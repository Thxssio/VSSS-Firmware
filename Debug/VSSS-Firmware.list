
VSSS-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800c3e0  0800c3e0  0000d3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c904  0800c904  0000e1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c904  0800c904  0000d904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c90c  0800c90c  0000e1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c90c  0800c90c  0000d90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c910  0800c910  0000d910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800c914  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  200001f8  0800cb08  0000e1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  0800cb08  0000e7b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183e5  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359b  00000000  00000000  00026609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00029ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001049  00000000  00000000  0002b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004394  00000000  00000000  0002c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183e1  00000000  00000000  00030485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb718  00000000  00000000  00048866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d58  00000000  00000000  00113fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0011ad1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c3c4 	.word	0x0800c3c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800c3c4 	.word	0x0800c3c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <IMU_Init>:


float GYRO_SCALE = 65.5;
float ACCEL_SCALE = 8192.0;

void IMU_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    uint8_t check;
    uint8_t data;

    check = IMU_ReadReg(IMU_WHO_AM_I);
 8001076:	2075      	movs	r0, #117	@ 0x75
 8001078:	f000 f8a0 	bl	80011bc <IMU_ReadReg>
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
    if (check == 0x70) {
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b70      	cmp	r3, #112	@ 0x70
 8001084:	d162      	bne.n	800114c <IMU_Init+0xdc>
        IMU_WriteReg(IMU_PWR_MGMT_1, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	206b      	movs	r0, #107	@ 0x6b
 800108a:	f000 f86f 	bl	800116c <IMU_WriteReg>
        IMU_WriteReg(IMU_GYRO_CONFIG, (1 << 3));
 800108e:	2108      	movs	r1, #8
 8001090:	201b      	movs	r0, #27
 8001092:	f000 f86b 	bl	800116c <IMU_WriteReg>
        IMU_WriteReg(IMU_ACCEL_CONFIG, (1 << 3));
 8001096:	2108      	movs	r1, #8
 8001098:	201c      	movs	r0, #28
 800109a:	f000 f867 	bl	800116c <IMU_WriteReg>

        uint8_t gyro_config = IMU_ReadReg(IMU_GYRO_CONFIG);
 800109e:	201b      	movs	r0, #27
 80010a0:	f000 f88c 	bl	80011bc <IMU_ReadReg>
 80010a4:	4603      	mov	r3, r0
 80010a6:	71bb      	strb	r3, [r7, #6]
        uint8_t fs_sel = (gyro_config >> 3) & 0x03;
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	08db      	lsrs	r3, r3, #3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	717b      	strb	r3, [r7, #5]

        switch(fs_sel) {
 80010b4:	797b      	ldrb	r3, [r7, #5]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d81a      	bhi.n	80010f0 <IMU_Init+0x80>
 80010ba:	a201      	add	r2, pc, #4	@ (adr r2, 80010c0 <IMU_Init+0x50>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010e9 	.word	0x080010e9
            case 0: GYRO_SCALE = 131.0; break;  // ±250°/s
 80010d0:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <IMU_Init+0xe4>)
 80010d2:	4a21      	ldr	r2, [pc, #132]	@ (8001158 <IMU_Init+0xe8>)
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e00b      	b.n	80010f0 <IMU_Init+0x80>
            case 1: GYRO_SCALE = 65.5;  break;  // ±500°/s
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <IMU_Init+0xe4>)
 80010da:	4a20      	ldr	r2, [pc, #128]	@ (800115c <IMU_Init+0xec>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e007      	b.n	80010f0 <IMU_Init+0x80>
            case 2: GYRO_SCALE = 32.8;  break;  // ±1000°/s
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <IMU_Init+0xe4>)
 80010e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <IMU_Init+0xf0>)
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e003      	b.n	80010f0 <IMU_Init+0x80>
            case 3: GYRO_SCALE = 16.4;  break;  // ±2000°/s
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <IMU_Init+0xe4>)
 80010ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <IMU_Init+0xf4>)
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	bf00      	nop
        }

        uint8_t accel_config = IMU_ReadReg(IMU_ACCEL_CONFIG);
 80010f0:	201c      	movs	r0, #28
 80010f2:	f000 f863 	bl	80011bc <IMU_ReadReg>
 80010f6:	4603      	mov	r3, r0
 80010f8:	713b      	strb	r3, [r7, #4]
        uint8_t afs_sel = (accel_config >> 3) & 0x03;
 80010fa:	793b      	ldrb	r3, [r7, #4]
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	70fb      	strb	r3, [r7, #3]

        switch(afs_sel) {
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d81f      	bhi.n	800114c <IMU_Init+0xdc>
 800110c:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <IMU_Init+0xa4>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	0800112f 	.word	0x0800112f
 800111c:	08001139 	.word	0x08001139
 8001120:	08001143 	.word	0x08001143
            case 0: ACCEL_SCALE = 16384.0; break;  // ±2g
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <IMU_Init+0xf8>)
 8001126:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e00e      	b.n	800114c <IMU_Init+0xdc>
            case 1: ACCEL_SCALE = 8192.0;  break;  // ±4g
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <IMU_Init+0xf8>)
 8001130:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e009      	b.n	800114c <IMU_Init+0xdc>
            case 2: ACCEL_SCALE = 4096.0;  break;  // ±8g
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <IMU_Init+0xf8>)
 800113a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e004      	b.n	800114c <IMU_Init+0xdc>
            case 3: ACCEL_SCALE = 2048.0;  break;  // ±16g
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <IMU_Init+0xf8>)
 8001144:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	bf00      	nop
        }
    }
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	43030000 	.word	0x43030000
 800115c:	42830000 	.word	0x42830000
 8001160:	42033333 	.word	0x42033333
 8001164:	41833333 	.word	0x41833333
 8001168:	20000004 	.word	0x20000004

0800116c <IMU_WriteReg>:

void IMU_WriteReg(uint8_t reg, uint8_t data) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {reg, data};
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	733b      	strb	r3, [r7, #12]
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118a:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <IMU_WriteReg+0x48>)
 800118c:	f002 fd36 	bl	8003bfc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, txData, 2, HAL_MAX_DELAY);
 8001190:	f107 010c 	add.w	r1, r7, #12
 8001194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001198:	2202      	movs	r2, #2
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <IMU_WriteReg+0x4c>)
 800119c:	f003 fdc3 	bl	8004d26 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <IMU_WriteReg+0x48>)
 80011a8:	f002 fd28 	bl	8003bfc <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	48000400 	.word	0x48000400
 80011b8:	20000404 	.word	0x20000404

080011bc <IMU_ReadReg>:

uint8_t IMU_ReadReg(uint8_t reg) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = reg | 0x80;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData;
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d6:	480f      	ldr	r0, [pc, #60]	@ (8001214 <IMU_ReadReg+0x58>)
 80011d8:	f002 fd10 	bl	8003bfc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, &txData, 1, HAL_MAX_DELAY);
 80011dc:	f107 010f 	add.w	r1, r7, #15
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e4:	2201      	movs	r2, #1
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <IMU_ReadReg+0x5c>)
 80011e8:	f003 fd9d 	bl	8004d26 <HAL_SPI_Transmit>
    HAL_SPI_Receive(IMU_SPI, &rxData, 1, HAL_MAX_DELAY);
 80011ec:	f107 010e 	add.w	r1, r7, #14
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f4:	2201      	movs	r2, #1
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <IMU_ReadReg+0x5c>)
 80011f8:	f003 ff0b 	bl	8005012 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001202:	4804      	ldr	r0, [pc, #16]	@ (8001214 <IMU_ReadReg+0x58>)
 8001204:	f002 fcfa 	bl	8003bfc <HAL_GPIO_WritePin>
    return rxData;
 8001208:	7bbb      	ldrb	r3, [r7, #14]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	48000400 	.word	0x48000400
 8001218:	20000404 	.word	0x20000404

0800121c <IMU_ReadAccelData>:

void IMU_ReadAccelData(int16_t *accelData) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_ACCEL_XOUT_H);
 8001224:	203b      	movs	r0, #59	@ 0x3b
 8001226:	f7ff ffc9 	bl	80011bc <IMU_ReadReg>
 800122a:	4603      	mov	r3, r0
 800122c:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_ACCEL_XOUT_L);
 800122e:	203c      	movs	r0, #60	@ 0x3c
 8001230:	f7ff ffc4 	bl	80011bc <IMU_ReadReg>
 8001234:	4603      	mov	r3, r0
 8001236:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_ACCEL_YOUT_H);
 8001238:	203d      	movs	r0, #61	@ 0x3d
 800123a:	f7ff ffbf 	bl	80011bc <IMU_ReadReg>
 800123e:	4603      	mov	r3, r0
 8001240:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_ACCEL_YOUT_L);
 8001242:	203e      	movs	r0, #62	@ 0x3e
 8001244:	f7ff ffba 	bl	80011bc <IMU_ReadReg>
 8001248:	4603      	mov	r3, r0
 800124a:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_ACCEL_ZOUT_H);
 800124c:	203f      	movs	r0, #63	@ 0x3f
 800124e:	f7ff ffb5 	bl	80011bc <IMU_ReadReg>
 8001252:	4603      	mov	r3, r0
 8001254:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_ACCEL_ZOUT_L);
 8001256:	2040      	movs	r0, #64	@ 0x40
 8001258:	f7ff ffb0 	bl	80011bc <IMU_ReadReg>
 800125c:	4603      	mov	r3, r0
 800125e:	737b      	strb	r3, [r7, #13]

    accelData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 8001260:	7a3b      	ldrb	r3, [r7, #8]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	801a      	strh	r2, [r3, #0]
    accelData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	b21b      	sxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b219      	sxth	r1, r3
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	b21a      	sxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3302      	adds	r3, #2
 8001284:	430a      	orrs	r2, r1
 8001286:	b212      	sxth	r2, r2
 8001288:	801a      	strh	r2, [r3, #0]
    accelData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 800128a:	7b3b      	ldrb	r3, [r7, #12]
 800128c:	b21b      	sxth	r3, r3
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b219      	sxth	r1, r3
 8001292:	7b7b      	ldrb	r3, [r7, #13]
 8001294:	b21a      	sxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	430a      	orrs	r2, r1
 800129c:	b212      	sxth	r2, r2
 800129e:	801a      	strh	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <IMU_ReadGyroData>:

void IMU_ReadGyroData(int16_t *gyroData) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_GYRO_XOUT_H);
 80012b0:	2043      	movs	r0, #67	@ 0x43
 80012b2:	f7ff ff83 	bl	80011bc <IMU_ReadReg>
 80012b6:	4603      	mov	r3, r0
 80012b8:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_GYRO_XOUT_L);
 80012ba:	2044      	movs	r0, #68	@ 0x44
 80012bc:	f7ff ff7e 	bl	80011bc <IMU_ReadReg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_GYRO_YOUT_H);
 80012c4:	2045      	movs	r0, #69	@ 0x45
 80012c6:	f7ff ff79 	bl	80011bc <IMU_ReadReg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_GYRO_YOUT_L);
 80012ce:	2046      	movs	r0, #70	@ 0x46
 80012d0:	f7ff ff74 	bl	80011bc <IMU_ReadReg>
 80012d4:	4603      	mov	r3, r0
 80012d6:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_GYRO_ZOUT_H);
 80012d8:	2047      	movs	r0, #71	@ 0x47
 80012da:	f7ff ff6f 	bl	80011bc <IMU_ReadReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_GYRO_ZOUT_L);
 80012e2:	2048      	movs	r0, #72	@ 0x48
 80012e4:	f7ff ff6a 	bl	80011bc <IMU_ReadReg>
 80012e8:	4603      	mov	r3, r0
 80012ea:	737b      	strb	r3, [r7, #13]

    gyroData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 80012ec:	7a3b      	ldrb	r3, [r7, #8]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	7a7b      	ldrb	r3, [r7, #9]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	801a      	strh	r2, [r3, #0]
    gyroData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	b21b      	sxth	r3, r3
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b219      	sxth	r1, r3
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	b21a      	sxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3302      	adds	r3, #2
 8001310:	430a      	orrs	r2, r1
 8001312:	b212      	sxth	r2, r2
 8001314:	801a      	strh	r2, [r3, #0]
    gyroData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	b21b      	sxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b219      	sxth	r1, r3
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	b21a      	sxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	430a      	orrs	r2, r1
 8001328:	b212      	sxth	r2, r2
 800132a:	801a      	strh	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	0000      	movs	r0, r0
	...

08001338 <IMU_GetConvertedData>:

void IMU_GetConvertedData(float *accel, float *gyro) {
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    int16_t accelData[3], gyroData[3];
    IMU_ReadAccelData(accelData);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff68 	bl	800121c <IMU_ReadAccelData>
    IMU_ReadGyroData(gyroData);
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ffa9 	bl	80012a8 <IMU_ReadGyroData>

    accel[0] = (float)accelData[0] / ACCEL_SCALE * 9.81;
 8001356:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <IMU_GetConvertedData+0x1a0>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800136c:	ee16 0a90 	vmov	r0, s13
 8001370:	f7ff f912 	bl	8000598 <__aeabi_f2d>
 8001374:	a354      	add	r3, pc, #336	@ (adr r3, 80014c8 <IMU_GetConvertedData+0x190>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f965 	bl	8000648 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc57 	bl	8000c38 <__aeabi_d2f>
 800138a:	4602      	mov	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	601a      	str	r2, [r3, #0]
    accel[1] = (float)accelData[1] / ACCEL_SCALE * 9.81;
 8001390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139c:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <IMU_GetConvertedData+0x1a0>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013a6:	ee16 0a90 	vmov	r0, s13
 80013aa:	f7ff f8f5 	bl	8000598 <__aeabi_f2d>
 80013ae:	a346      	add	r3, pc, #280	@ (adr r3, 80014c8 <IMU_GetConvertedData+0x190>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f948 	bl	8000648 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1d1c      	adds	r4, r3, #4
 80013c4:	f7ff fc38 	bl	8000c38 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	6023      	str	r3, [r4, #0]
    accel[2] = (float)accelData[2] / ACCEL_SCALE * 9.81;
 80013cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d8:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <IMU_GetConvertedData+0x1a0>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013e2:	ee16 0a90 	vmov	r0, s13
 80013e6:	f7ff f8d7 	bl	8000598 <__aeabi_f2d>
 80013ea:	a337      	add	r3, pc, #220	@ (adr r3, 80014c8 <IMU_GetConvertedData+0x190>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f92a 	bl	8000648 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f103 0408 	add.w	r4, r3, #8
 8001402:	f7ff fc19 	bl	8000c38 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	6023      	str	r3, [r4, #0]

    gyro[0] = (float)gyroData[0] / GYRO_SCALE * (M_PI / 180.0);
 800140a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <IMU_GetConvertedData+0x1a4>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001420:	ee16 0a90 	vmov	r0, s13
 8001424:	f7ff f8b8 	bl	8000598 <__aeabi_f2d>
 8001428:	a329      	add	r3, pc, #164	@ (adr r3, 80014d0 <IMU_GetConvertedData+0x198>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f90b 	bl	8000648 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fbfd 	bl	8000c38 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	601a      	str	r2, [r3, #0]
    gyro[1] = (float)gyroData[1] / GYRO_SCALE * (M_PI / 180.0);
 8001444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <IMU_GetConvertedData+0x1a4>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800145a:	ee16 0a90 	vmov	r0, s13
 800145e:	f7ff f89b 	bl	8000598 <__aeabi_f2d>
 8001462:	a31b      	add	r3, pc, #108	@ (adr r3, 80014d0 <IMU_GetConvertedData+0x198>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8ee 	bl	8000648 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	1d1c      	adds	r4, r3, #4
 8001478:	f7ff fbde 	bl	8000c38 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	6023      	str	r3, [r4, #0]
    gyro[2] = (float)gyroData[2] / GYRO_SCALE * (M_PI / 180.0);
 8001480:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <IMU_GetConvertedData+0x1a4>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001496:	ee16 0a90 	vmov	r0, s13
 800149a:	f7ff f87d 	bl	8000598 <__aeabi_f2d>
 800149e:	a30c      	add	r3, pc, #48	@ (adr r3, 80014d0 <IMU_GetConvertedData+0x198>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8d0 	bl	8000648 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f103 0408 	add.w	r4, r3, #8
 80014b6:	f7ff fbbf 	bl	8000c38 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	6023      	str	r3, [r4, #0]
}
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	51eb851f 	.word	0x51eb851f
 80014cc:	40239eb8 	.word	0x40239eb8
 80014d0:	a2529d39 	.word	0xa2529d39
 80014d4:	3f91df46 	.word	0x3f91df46
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000000 	.word	0x20000000

080014e0 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001510:	f7ff fb2a 	bl	8000b68 <__aeabi_dcmpgt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8001526:	e011      	b.n	800154c <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001534:	f7ff fafa 	bl	8000b2c <__aeabi_dcmplt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d100      	bne.n	8001540 <PID_Init+0x60>
}
 800153e:	e005      	b.n	800154c <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	0000      	movs	r0, r0
	...

08001558 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001560:	6239      	str	r1, [r7, #32]
 8001562:	61fa      	str	r2, [r7, #28]
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	ed87 0b04 	vstr	d0, [r7, #16]
 800156a:	ed87 1b02 	vstr	d1, [r7, #8]
 800156e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	2200      	movs	r2, #0
 8001588:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800158a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 80015e0 <PID+0x88>
 800158e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80015e8 <PID+0x90>
 8001592:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001594:	f000 f956 	bl	8001844 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	2264      	movs	r2, #100	@ 0x64
 800159c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800159e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015a2:	4619      	mov	r1, r3
 80015a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015a6:	f000 fa63 	bl	8001a70 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80015aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80015ae:	4619      	mov	r1, r3
 80015b0:	ed97 2b00 	vldr	d2, [r7]
 80015b4:	ed97 1b02 	vldr	d1, [r7, #8]
 80015b8:	ed97 0b04 	vldr	d0, [r7, #16]
 80015bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015be:	f000 f9af 	bl	8001920 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80015c2:	f002 f887 	bl	80036d4 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	605a      	str	r2, [r3, #4]

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	00000000 	.word	0x00000000
 80015e4:	406fe000 	.word	0x406fe000
	...

080015f0 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80015f8:	6239      	str	r1, [r7, #32]
 80015fa:	61fa      	str	r2, [r7, #28]
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001602:	ed87 1b02 	vstr	d1, [r7, #8]
 8001606:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 800160a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2301      	movs	r3, #1
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	ed97 2b00 	vldr	d2, [r7]
 8001618:	ed97 1b02 	vldr	d1, [r7, #8]
 800161c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	6a39      	ldr	r1, [r7, #32]
 8001626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001628:	f7ff ff96 	bl	8001558 <PID>
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b08c      	sub	sp, #48	@ 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <PID_Compute+0x14>
	{
		return _FALSE;
 8001644:	2300      	movs	r3, #0
 8001646:	e0db      	b.n	8001800 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001648:	f002 f844 	bl	80036d4 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	429a      	cmp	r2, r3
 8001660:	f0c0 80cd 	bcc.w	80017fe <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800167c:	f7fe fe2c 	bl	80002d8 <__aeabi_dsub>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800168e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001692:	f7fe fe21 	bl	80002d8 <__aeabi_dsub>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80016aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016ae:	f7fe ffcb 	bl	8000648 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fe0f 	bl	80002dc <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d114      	bne.n	80016fa <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80016dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e0:	f7fe ffb2 	bl	8000648 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fdf4 	bl	80002d8 <__aeabi_dsub>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001706:	f7ff fa2f 	bl	8000b68 <__aeabi_dcmpgt>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800171c:	e010      	b.n	8001740 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800172a:	f7ff f9ff 	bl	8000b2c <__aeabi_dcmplt>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800174e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001752:	f7fe ff79 	bl	8000648 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800175e:	e005      	b.n	800176c <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177c:	f7fe ff64 	bl	8000648 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fda6 	bl	80002d8 <__aeabi_dsub>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001794:	f7fe fda2 	bl	80002dc <__adddf3>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80017a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017aa:	f7ff f9dd 	bl	8000b68 <__aeabi_dcmpgt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80017ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80017be:	e00e      	b.n	80017de <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017ca:	f7ff f9af 	bl	8000b2c <__aeabi_dcmplt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80017e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017e6:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f8:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 80017fe:	2300      	movs	r3, #0
	}

}
 8001800:	4618      	mov	r0, r3
 8001802:	3730      	adds	r7, #48	@ 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bdb0      	pop	{r4, r5, r7, pc}

08001808 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b01      	cmp	r3, #1
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <PID_SetMode+0x2e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fe55 	bl	80014e0 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	705a      	strb	r2, [r3, #1]

}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6178      	str	r0, [r7, #20]
 800184c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001850:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800185c:	f7ff f97a 	bl	8000b54 <__aeabi_dcmpge>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d158      	bne.n	8001918 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8001866:	6979      	ldr	r1, [r7, #20]
 8001868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001876:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d04b      	beq.n	800191a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001890:	f7ff f96a 	bl	8000b68 <__aeabi_dcmpgt>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018a4:	e9c1 2300 	strd	r2, r3, [r1]
 80018a8:	e012      	b.n	80018d0 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018b8:	f7ff f938 	bl	8000b2c <__aeabi_dcmplt>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018dc:	f7ff f944 	bl	8000b68 <__aeabi_dcmpgt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80018f2:	e012      	b.n	800191a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001900:	f7ff f914 	bl	8000b2c <__aeabi_dcmplt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001910:	6979      	ldr	r1, [r7, #20]
 8001912:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001916:	e000      	b.n	800191a <PID_SetOutputLimits+0xd6>
		return;
 8001918:	bf00      	nop
		}
		else { }

	}

}
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	61f8      	str	r0, [r7, #28]
 8001928:	ed87 0b04 	vstr	d0, [r7, #16]
 800192c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001930:	ed87 2b00 	vstr	d2, [r7]
 8001934:	460b      	mov	r3, r1
 8001936:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001944:	f7ff f8f2 	bl	8000b2c <__aeabi_dcmplt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 8089 	bne.w	8001a62 <PID_SetTunings2+0x142>
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800195c:	f7ff f8e6 	bl	8000b2c <__aeabi_dcmplt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d17d      	bne.n	8001a62 <PID_SetTunings2+0x142>
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001972:	f7ff f8db 	bl	8000b2c <__aeabi_dcmplt>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d172      	bne.n	8001a62 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	7efa      	ldrb	r2, [r7, #27]
 8001980:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001982:	7efb      	ldrb	r3, [r7, #27]
 8001984:	2b01      	cmp	r3, #1
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001994:	69f9      	ldr	r1, [r7, #28]
 8001996:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800199a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800199e:	69f9      	ldr	r1, [r7, #28]
 80019a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80019a8:	69f9      	ldr	r1, [r7, #28]
 80019aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ae:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdcc 	bl	8000554 <__aeabi_ui2d>
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <PID_SetTunings2+0x14c>)
 80019c2:	f7fe ff6b 	bl	800089c <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80019ce:	69f9      	ldr	r1, [r7, #28]
 80019d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80019d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019e0:	f7fe fe32 	bl	8000648 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	69f9      	ldr	r1, [r7, #28]
 80019ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f6:	f7fe ff51 	bl	800089c <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	69f9      	ldr	r1, [r7, #28]
 8001a00:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	78db      	ldrb	r3, [r3, #3]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d12b      	bne.n	8001a64 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	f7fe fc5d 	bl	80002d8 <__aeabi_dsub>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	69f9      	ldr	r1, [r7, #28]
 8001a24:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	f7fe fc4f 	bl	80002d8 <__aeabi_dsub>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	69f9      	ldr	r1, [r7, #28]
 8001a40:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f7fe fc41 	bl	80002d8 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	69f9      	ldr	r1, [r7, #28]
 8001a5c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001a60:	e000      	b.n	8001a64 <PID_SetTunings2+0x144>
		return;
 8001a62:	bf00      	nop

	}

}
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	408f4000 	.word	0x408f4000

08001a70 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d02e      	beq.n	8001ae2 <PID_SetControllerDirection+0x72>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d029      	beq.n	8001ae2 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	f7fe fc1c 	bl	80002d8 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	f7fe fc0e 	bl	80002d8 <__aeabi_dsub>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	f7fe fc00 	bl	80002d8 <__aeabi_dsub>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	70da      	strb	r2, [r3, #3]

}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dd2e      	ble.n	8001b5e <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f7fe fd37 	bl	8000574 <__aeabi_i2d>
 8001b06:	4604      	mov	r4, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd20 	bl	8000554 <__aeabi_ui2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe febe 	bl	800089c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b32:	f7fe fd89 	bl	8000648 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b4a:	f7fe fea7 	bl	800089c <__aeabi_ddiv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

	}

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b68 <VSSS_Init>:
static float vL = 0.0f;
static float vR = 0.0f;



void VSSS_Init(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    Kinematics_Init();
 8001b6c:	f000 f9b0 	bl	8001ed0 <Kinematics_Init>
    NRF24_Init();
 8001b70:	f001 f942 	bl	8002df8 <NRF24_Init>
    NRF24_RxMode(RxAddress, 125);
 8001b74:	217d      	movs	r1, #125	@ 0x7d
 8001b76:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <VSSS_Init+0x38>)
 8001b78:	f001 f961 	bl	8002e3e <NRF24_RxMode>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001b7c:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <VSSS_Init+0x3c>)
 8001b7e:	f7fe fb9f 	bl	80002c0 <strlen>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	4906      	ldr	r1, [pc, #24]	@ (8001ba4 <VSSS_Init+0x3c>)
 8001b8c:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <VSSS_Init+0x40>)
 8001b8e:	f005 f9ff 	bl	8006f90 <HAL_UART_Transmit>
    last_rx_time = HAL_GetTick();
 8001b92:	f001 fd9f 	bl	80036d4 <HAL_GetTick>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <VSSS_Init+0x44>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	20000598 	.word	0x20000598
 8001bac:	20000240 	.word	0x20000240

08001bb0 <VSSS_Run>:

void VSSS_Run(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    if (isDataAvailable(2)) {
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f001 f981 	bl	8002ebc <isDataAvailable>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <VSSS_Run+0x1a>
        NRF24_Receive(robot.RxData);
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <VSSS_Run+0x48>)
 8001bc2:	f001 f99b 	bl	8002efc <NRF24_Receive>
        VSSS_ProcessReceivedData();
 8001bc6:	f000 f81f 	bl	8001c08 <VSSS_ProcessReceivedData>
    }

    if ((HAL_GetTick() - last_rx_time) > COMMUNICATION_TIMEOUT_MS) {
 8001bca:	f001 fd83 	bl	80036d4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <VSSS_Run+0x4c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001bda:	d90a      	bls.n	8001bf2 <VSSS_Run+0x42>
        Kinematics_SetSpeeds(0.0f, 0.0f);
 8001bdc:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001c00 <VSSS_Run+0x50>
 8001be0:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001c00 <VSSS_Run+0x50>
 8001be4:	f000 fa88 	bl	80020f8 <Kinematics_SetSpeeds>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2140      	movs	r1, #64	@ 0x40
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <VSSS_Run+0x54>)
 8001bee:	f002 f805 	bl	8003bfc <HAL_GPIO_WritePin>
    }
//	Kinematics_SetSpeeds(vL, vR);
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000220 	.word	0x20000220
 8001bfc:	20000240 	.word	0x20000240
 8001c00:	00000000 	.word	0x00000000
 8001c04:	48000800 	.word	0x48000800

08001c08 <VSSS_ProcessReceivedData>:

void VSSS_ProcessReceivedData(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
    uint8_t real_size = robot.RxData[0];
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c10:	7b1b      	ldrb	r3, [r3, #12]
 8001c12:	73fb      	strb	r3, [r7, #15]
    const size_t expected_size = sizeof(int) + 2 * sizeof(float);
 8001c14:	230c      	movs	r3, #12
 8001c16:	60bb      	str	r3, [r7, #8]

    if (real_size >= expected_size) {
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d82d      	bhi.n	8001c7c <VSSS_ProcessReceivedData+0x74>
        int id_raw;
        memcpy(&id_raw, &robot.RxData[1], sizeof(int));
 8001c20:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c22:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8001c26:	607b      	str	r3, [r7, #4]
        robot.id = __builtin_bswap32(id_raw);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	ba1b      	rev	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c30:	601a      	str	r2, [r3, #0]

        memcpy(&robot.vL, &robot.RxData[5], sizeof(float));
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c34:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c3c:	605a      	str	r2, [r3, #4]
        memcpy(&robot.vR, &robot.RxData[9], sizeof(float));
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c40:	f8d3 3015 	ldr.w	r3, [r3, #21]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c48:	609a      	str	r2, [r3, #8]

        if (robot.id == ROBOT_ID) {
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d114      	bne.n	8001c7c <VSSS_ProcessReceivedData+0x74>
            last_rx_time = HAL_GetTick();
 8001c52:	f001 fd3f 	bl	80036d4 <HAL_GetTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <VSSS_ProcessReceivedData+0x80>)
 8001c5a:	6013      	str	r3, [r2, #0]
            Kinematics_SetSpeeds(robot.vL, robot.vR);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c68:	eef0 0a47 	vmov.f32	s1, s14
 8001c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c70:	f000 fa42 	bl	80020f8 <Kinematics_SetSpeeds>
            VSSS_BlinkLED();
 8001c74:	f000 f80a 	bl	8001c8c <VSSS_BlinkLED>
            VSSS_DebugOutput();
 8001c78:	f000 f830 	bl	8001cdc <VSSS_DebugOutput>
        }
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000214 	.word	0x20000214
 8001c88:	20000240 	.word	0x20000240

08001c8c <VSSS_BlinkLED>:

void VSSS_BlinkLED(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() - last_blink_time) >= 200) {
 8001c90:	f001 fd20 	bl	80036d4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <VSSS_BlinkLED+0x44>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c9e:	d915      	bls.n	8001ccc <VSSS_BlinkLED+0x40>
        led_state = !led_state;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <VSSS_BlinkLED+0x48>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <VSSS_BlinkLED+0x48>)
 8001cb2:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <VSSS_BlinkLED+0x48>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2140      	movs	r1, #64	@ 0x40
 8001cbc:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <VSSS_BlinkLED+0x4c>)
 8001cbe:	f001 ff9d 	bl	8003bfc <HAL_GPIO_WritePin>
        last_blink_time = HAL_GetTick();
 8001cc2:	f001 fd07 	bl	80036d4 <HAL_GetTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a01      	ldr	r2, [pc, #4]	@ (8001cd0 <VSSS_BlinkLED+0x44>)
 8001cca:	6013      	str	r3, [r2, #0]
    }
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000244 	.word	0x20000244
 8001cd4:	20000248 	.word	0x20000248
 8001cd8:	48000800 	.word	0x48000800

08001cdc <VSSS_DebugOutput>:

void VSSS_DebugOutput(void) {
 8001cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cde:	b095      	sub	sp, #84	@ 0x54
 8001ce0:	af04      	add	r7, sp, #16
    char buffer[64];
    snprintf(buffer, sizeof(buffer), "ID: %d, VL: %.2f, VR: %.2f\r\n", robot.id, robot.vL, robot.vR);
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <VSSS_DebugOutput+0x5c>)
 8001ce4:	681e      	ldr	r6, [r3, #0]
 8001ce6:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <VSSS_DebugOutput+0x5c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc54 	bl	8000598 <__aeabi_f2d>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	460d      	mov	r5, r1
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <VSSS_DebugOutput+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc4d 	bl	8000598 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4638      	mov	r0, r7
 8001d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d08:	e9cd 4500 	strd	r4, r5, [sp]
 8001d0c:	4633      	mov	r3, r6
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d3c <VSSS_DebugOutput+0x60>)
 8001d10:	2140      	movs	r1, #64	@ 0x40
 8001d12:	f006 fedf 	bl	8008ad4 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fad1 	bl	80002c0 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4639      	mov	r1, r7
 8001d24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <VSSS_DebugOutput+0x64>)
 8001d2a:	f005 f931 	bl	8006f90 <HAL_UART_Transmit>
}
 8001d2e:	bf00      	nop
 8001d30:	3744      	adds	r7, #68	@ 0x44
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000214 	.word	0x20000214
 8001d3c:	0800c3e0 	.word	0x0800c3e0
 8001d40:	20000598 	.word	0x20000598

08001d44 <Encoder_Init>:

Encoder left_encoder;
Encoder right_encoder;

void Encoder_Init(Encoder *encoder, TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]
    encoder->last_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	809a      	strh	r2, [r3, #4]
    encoder->last_time = HAL_GetTick();
 8001d60:	f001 fcb8 	bl	80036d4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
    encoder->rpm = 0.0f;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <Encoder_Calculate_RPM>:

void Encoder_Calculate_RPM(Encoder *encoder)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

    uint32_t current_time = HAL_GetTick();
 8001d84:	f001 fca6 	bl	80036d4 <HAL_GetTick>
 8001d88:	61b8      	str	r0, [r7, #24]
    uint32_t delta_time = current_time - encoder->last_time;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]


    if (delta_time == 0) {
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d047      	beq.n	8001e2a <Encoder_Calculate_RPM+0xae>
        return;
    }

    int16_t current_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	827b      	strh	r3, [r7, #18]
    int16_t delta_encoder = current_encoder_value - encoder->last_encoder_value;
 8001da4:	8a7a      	ldrh	r2, [r7, #18]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	83fb      	strh	r3, [r7, #30]

    if (delta_encoder > (ENCODER_PULSES_PER_REV / 2)) {
 8001db4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001db8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	dd06      	ble.n	8001dce <Encoder_Calculate_RPM+0x52>
        delta_encoder -= ENCODER_PULSES_PER_REV;
 8001dc0:	8bfb      	ldrh	r3, [r7, #30]
 8001dc2:	f5a3 53ce 	sub.w	r3, r3, #6592	@ 0x19c0
 8001dc6:	3b08      	subs	r3, #8
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	83fb      	strh	r3, [r7, #30]
 8001dcc:	e00a      	b.n	8001de4 <Encoder_Calculate_RPM+0x68>
    }
    else if (delta_encoder < -(ENCODER_PULSES_PER_REV / 2)) {
 8001dce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001dd2:	4a18      	ldr	r2, [pc, #96]	@ (8001e34 <Encoder_Calculate_RPM+0xb8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	da05      	bge.n	8001de4 <Encoder_Calculate_RPM+0x68>
        delta_encoder += ENCODER_PULSES_PER_REV;
 8001dd8:	8bfb      	ldrh	r3, [r7, #30]
 8001dda:	f503 53ce 	add.w	r3, r3, #6592	@ 0x19c0
 8001dde:	3308      	adds	r3, #8
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	83fb      	strh	r3, [r7, #30]
    }

    float dt_min = (float)delta_time / 60000.0f;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dee:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001e38 <Encoder_Calculate_RPM+0xbc>
 8001df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df6:	edc7 7a03 	vstr	s15, [r7, #12]

    encoder->rpm = ((float)delta_encoder / (float)ENCODER_PULSES_PER_REV) / dt_min;
 8001dfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001e3c <Encoder_Calculate_RPM+0xc0>
 8001e0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	edc3 7a03 	vstr	s15, [r3, #12]


    encoder->last_encoder_value = current_encoder_value;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8a7a      	ldrh	r2, [r7, #18]
 8001e20:	809a      	strh	r2, [r3, #4]
    encoder->last_time = current_time;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	e000      	b.n	8001e2c <Encoder_Calculate_RPM+0xb0>
        return;
 8001e2a:	bf00      	nop
}
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	fffff31c 	.word	0xfffff31c
 8001e38:	476a6000 	.word	0x476a6000
 8001e3c:	45ce4000 	.word	0x45ce4000

08001e40 <Encoder_Update>:

void Encoder_Update(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    Encoder_Calculate_RPM(&left_encoder);
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <Encoder_Update+0x14>)
 8001e46:	f7ff ff99 	bl	8001d7c <Encoder_Calculate_RPM>
    Encoder_Calculate_RPM(&right_encoder);
 8001e4a:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <Encoder_Update+0x18>)
 8001e4c:	f7ff ff96 	bl	8001d7c <Encoder_Calculate_RPM>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	2000024c 	.word	0x2000024c
 8001e58:	2000025c 	.word	0x2000025c

08001e5c <CalibrateGyro>:
char debug_imu[150];

static float theta_imu = 0.0;
static float gyro_bias = 0.0; // Compensação do giroscópio

void CalibrateGyro(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
    float sum = 0.0;
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
    int samples = 1000;
 8001e68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6c:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < samples; i++) {
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	e012      	b.n	8001e9a <CalibrateGyro+0x3e>
        IMU_GetConvertedData(accel, gyro);
 8001e74:	4913      	ldr	r1, [pc, #76]	@ (8001ec4 <CalibrateGyro+0x68>)
 8001e76:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <CalibrateGyro+0x6c>)
 8001e78:	f7ff fa5e 	bl	8001338 <IMU_GetConvertedData>
        sum += gyro[2]; // Captura o bias do giroscópio
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <CalibrateGyro+0x68>)
 8001e7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e82:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(1);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f001 fc2c 	bl	80036ec <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbe8      	blt.n	8001e74 <CalibrateGyro+0x18>
    }

    gyro_bias = sum / samples; // Calcula a média
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eac:	edd7 6a03 	vldr	s13, [r7, #12]
 8001eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <CalibrateGyro+0x70>)
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000038c 	.word	0x2000038c
 8001ec8:	20000380 	.word	0x20000380
 8001ecc:	2000039c 	.word	0x2000039c

08001ed0 <Kinematics_Init>:

void Kinematics_Init(void) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af04      	add	r7, sp, #16
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ed6:	213c      	movs	r1, #60	@ 0x3c
 8001ed8:	4845      	ldr	r0, [pc, #276]	@ (8001ff0 <Kinematics_Init+0x120>)
 8001eda:	f004 f80b 	bl	8005ef4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001ede:	213c      	movs	r1, #60	@ 0x3c
 8001ee0:	4844      	ldr	r0, [pc, #272]	@ (8001ff4 <Kinematics_Init+0x124>)
 8001ee2:	f004 f807 	bl	8005ef4 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4843      	ldr	r0, [pc, #268]	@ (8001ff8 <Kinematics_Init+0x128>)
 8001eea:	f003 fe5d 	bl	8005ba8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4842      	ldr	r0, [pc, #264]	@ (8001ffc <Kinematics_Init+0x12c>)
 8001ef2:	f003 fe59 	bl	8005ba8 <HAL_TIM_PWM_Start>

    IMU_Init();
 8001ef6:	f7ff f8bb 	bl	8001070 <IMU_Init>
    CalibrateGyro(); // Calibra a IMU antes de começar
 8001efa:	f7ff ffaf 	bl	8001e5c <CalibrateGyro>

    Encoder_Init(&left_encoder, &htim3);
 8001efe:	493c      	ldr	r1, [pc, #240]	@ (8001ff0 <Kinematics_Init+0x120>)
 8001f00:	483f      	ldr	r0, [pc, #252]	@ (8002000 <Kinematics_Init+0x130>)
 8001f02:	f7ff ff1f 	bl	8001d44 <Encoder_Init>
    Encoder_Init(&right_encoder, &htim4);
 8001f06:	493b      	ldr	r1, [pc, #236]	@ (8001ff4 <Kinematics_Init+0x124>)
 8001f08:	483e      	ldr	r0, [pc, #248]	@ (8002004 <Kinematics_Init+0x134>)
 8001f0a:	f7ff ff1b 	bl	8001d44 <Encoder_Init>

    Motor_Init(&motorLeft, &htim2, TIM_CHANNEL_1, INA1_GPIO_Port, INA1_Pin, INA2_GPIO_Port, INA2_Pin);
 8001f0e:	2304      	movs	r3, #4
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2302      	movs	r3, #2
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f20:	2200      	movs	r2, #0
 8001f22:	4936      	ldr	r1, [pc, #216]	@ (8001ffc <Kinematics_Init+0x12c>)
 8001f24:	4838      	ldr	r0, [pc, #224]	@ (8002008 <Kinematics_Init+0x138>)
 8001f26:	f000 fd89 	bl	8002a3c <Motor_Init>
    Motor_Init(&motorRight, &htim1, TIM_CHANNEL_1, INB1_GPIO_Port, INB1_Pin, INB2_GPIO_Port, INB2_Pin);
 8001f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f40:	2200      	movs	r2, #0
 8001f42:	492d      	ldr	r1, [pc, #180]	@ (8001ff8 <Kinematics_Init+0x128>)
 8001f44:	4831      	ldr	r0, [pc, #196]	@ (800200c <Kinematics_Init+0x13c>)
 8001f46:	f000 fd79 	bl	8002a3c <Motor_Init>

    PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 8001fc8 <Kinematics_Init+0xf8>
 8001f52:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001fd0 <Kinematics_Init+0x100>
 8001f56:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8001fd8 <Kinematics_Init+0x108>
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002010 <Kinematics_Init+0x140>)
 8001f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002014 <Kinematics_Init+0x144>)
 8001f5e:	492e      	ldr	r1, [pc, #184]	@ (8002018 <Kinematics_Init+0x148>)
 8001f60:	482e      	ldr	r0, [pc, #184]	@ (800201c <Kinematics_Init+0x14c>)
 8001f62:	f7ff fb45 	bl	80015f0 <PID2>
    PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8001f66:	2300      	movs	r3, #0
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8001fc8 <Kinematics_Init+0xf8>
 8001f6e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001fd0 <Kinematics_Init+0x100>
 8001f72:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8001fd8 <Kinematics_Init+0x108>
 8001f76:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <Kinematics_Init+0x150>)
 8001f78:	4a2a      	ldr	r2, [pc, #168]	@ (8002024 <Kinematics_Init+0x154>)
 8001f7a:	492b      	ldr	r1, [pc, #172]	@ (8002028 <Kinematics_Init+0x158>)
 8001f7c:	482b      	ldr	r0, [pc, #172]	@ (800202c <Kinematics_Init+0x15c>)
 8001f7e:	f7ff fb37 	bl	80015f0 <PID2>

    PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8001f82:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001fe0 <Kinematics_Init+0x110>
 8001f86:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001fe8 <Kinematics_Init+0x118>
 8001f8a:	4824      	ldr	r0, [pc, #144]	@ (800201c <Kinematics_Init+0x14c>)
 8001f8c:	f7ff fc5a 	bl	8001844 <PID_SetOutputLimits>
    PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 8001f90:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8001fe0 <Kinematics_Init+0x110>
 8001f94:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8001fe8 <Kinematics_Init+0x118>
 8001f98:	4824      	ldr	r0, [pc, #144]	@ (800202c <Kinematics_Init+0x15c>)
 8001f9a:	f7ff fc53 	bl	8001844 <PID_SetOutputLimits>

    PID_SetSampleTime(&pidLeft, 1);
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	481e      	ldr	r0, [pc, #120]	@ (800201c <Kinematics_Init+0x14c>)
 8001fa2:	f7ff fda5 	bl	8001af0 <PID_SetSampleTime>
    PID_SetSampleTime(&pidRight, 1);
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4820      	ldr	r0, [pc, #128]	@ (800202c <Kinematics_Init+0x15c>)
 8001faa:	f7ff fda1 	bl	8001af0 <PID_SetSampleTime>

    PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	481a      	ldr	r0, [pc, #104]	@ (800201c <Kinematics_Init+0x14c>)
 8001fb2:	f7ff fc29 	bl	8001808 <PID_SetMode>
    PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	481c      	ldr	r0, [pc, #112]	@ (800202c <Kinematics_Init+0x15c>)
 8001fba:	f7ff fc25 	bl	8001808 <PID_SetMode>
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	bce4217d 	.word	0xbce4217d
 8001fcc:	3f538fff 	.word	0x3f538fff
 8001fd0:	cccccccd 	.word	0xcccccccd
 8001fd4:	407864cc 	.word	0x407864cc
 8001fd8:	ba5e353f 	.word	0xba5e353f
 8001fdc:	3ff60c49 	.word	0x3ff60c49
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	409a8c00 	.word	0x409a8c00
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	c09a8c00 	.word	0xc09a8c00
 8001ff0:	20000500 	.word	0x20000500
 8001ff4:	2000054c 	.word	0x2000054c
 8001ff8:	20000468 	.word	0x20000468
 8001ffc:	200004b4 	.word	0x200004b4
 8002000:	2000024c 	.word	0x2000024c
 8002004:	2000025c 	.word	0x2000025c
 8002008:	2000062c 	.word	0x2000062c
 800200c:	20000644 	.word	0x20000644
 8002010:	20000270 	.word	0x20000270
 8002014:	20000280 	.word	0x20000280
 8002018:	20000290 	.word	0x20000290
 800201c:	200002a0 	.word	0x200002a0
 8002020:	20000278 	.word	0x20000278
 8002024:	20000288 	.word	0x20000288
 8002028:	20000298 	.word	0x20000298
 800202c:	20000310 	.word	0x20000310

08002030 <LinearToRPM>:

/**
 * @brief Converte velocidade linear para RPM.
 */
float LinearToRPM(float v) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	ed87 0a01 	vstr	s0, [r7, #4]
	float rpm_motor = (v * 60.0f * GEAR_RATIO) / (2 * M_PI * WHEEL_RADIUS);
 800203a:	edd7 7a01 	vldr	s15, [r7, #4]
 800203e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002098 <LinearToRPM+0x68>
 8002042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002046:	ee17 0a90 	vmov	r0, s15
 800204a:	f7fe faa5 	bl	8000598 <__aeabi_f2d>
 800204e:	a30e      	add	r3, pc, #56	@ (adr r3, 8002088 <LinearToRPM+0x58>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe faf8 	bl	8000648 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a30b      	add	r3, pc, #44	@ (adr r3, 8002090 <LinearToRPM+0x60>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fc19 	bl	800089c <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fde1 	bl	8000c38 <__aeabi_d2f>
 8002076:	4603      	mov	r3, r0
 8002078:	60fb      	str	r3, [r7, #12]
}
 800207a:	bf00      	nop
 800207c:	eeb0 0a67 	vmov.f32	s0, s15
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	00000000 	.word	0x00000000
 800208c:	4062c000 	.word	0x4062c000
 8002090:	c4488cdf 	.word	0xc4488cdf
 8002094:	3fc7b9ad 	.word	0x3fc7b9ad
 8002098:	42700000 	.word	0x42700000
 800209c:	00000000 	.word	0x00000000

080020a0 <RPMToLinear>:

float RPMToLinear(double RPM){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	ed87 0b00 	vstr	d0, [r7]
    return (RPM * (2 * M_PI * WHEEL_RADIUS) / 60.0);
 80020aa:	a310      	add	r3, pc, #64	@ (adr r3, 80020ec <RPMToLinear+0x4c>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020b4:	f7fe fac8 	bl	8000648 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <RPMToLinear+0x48>)
 80020c6:	f7fe fbe9 	bl	800089c <__aeabi_ddiv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fdb1 	bl	8000c38 <__aeabi_d2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	ee07 3a90 	vmov	s15, r3
}
 80020dc:	eeb0 0a67 	vmov.f32	s0, s15
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	404e0000 	.word	0x404e0000
 80020ec:	c4488cdf 	.word	0xc4488cdf
 80020f0:	3fc7b9ad 	.word	0x3fc7b9ad
 80020f4:	00000000 	.word	0x00000000

080020f8 <Kinematics_SetSpeeds>:

/**
 * @brief Define as velocidades do robô com base em velocidades lineares (m/s).
 */
void Kinematics_SetSpeeds(float vL, float vR) {
 80020f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	ed87 0a01 	vstr	s0, [r7, #4]
 8002104:	edc7 0a00 	vstr	s1, [r7]
    Encoder_Update();
 8002108:	f7ff fe9a 	bl	8001e40 <Encoder_Update>
    IMU_GetConvertedData(accel, gyro);
 800210c:	4978      	ldr	r1, [pc, #480]	@ (80022f0 <Kinematics_SetSpeeds+0x1f8>)
 800210e:	4879      	ldr	r0, [pc, #484]	@ (80022f4 <Kinematics_SetSpeeds+0x1fc>)
 8002110:	f7ff f912 	bl	8001338 <IMU_GetConvertedData>

    theta_imu += (gyro[2] - gyro_bias) * 0.01;
 8002114:	4b78      	ldr	r3, [pc, #480]	@ (80022f8 <Kinematics_SetSpeeds+0x200>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa3d 	bl	8000598 <__aeabi_f2d>
 800211e:	4682      	mov	sl, r0
 8002120:	468b      	mov	fp, r1
 8002122:	4b73      	ldr	r3, [pc, #460]	@ (80022f0 <Kinematics_SetSpeeds+0x1f8>)
 8002124:	ed93 7a02 	vldr	s14, [r3, #8]
 8002128:	4b74      	ldr	r3, [pc, #464]	@ (80022fc <Kinematics_SetSpeeds+0x204>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002132:	ee17 0a90 	vmov	r0, s15
 8002136:	f7fe fa2f 	bl	8000598 <__aeabi_f2d>
 800213a:	a369      	add	r3, pc, #420	@ (adr r3, 80022e0 <Kinematics_SetSpeeds+0x1e8>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe fa82 	bl	8000648 <__aeabi_dmul>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4650      	mov	r0, sl
 800214a:	4659      	mov	r1, fp
 800214c:	f7fe f8c6 	bl	80002dc <__adddf3>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd6e 	bl	8000c38 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	4a66      	ldr	r2, [pc, #408]	@ (80022f8 <Kinematics_SetSpeeds+0x200>)
 8002160:	6013      	str	r3, [r2, #0]

    float vL_real = RPMToLinear(left_encoder.rpm);
 8002162:	4b67      	ldr	r3, [pc, #412]	@ (8002300 <Kinematics_SetSpeeds+0x208>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fa16 	bl	8000598 <__aeabi_f2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	ec43 2b10 	vmov	d0, r2, r3
 8002174:	f7ff ff94 	bl	80020a0 <RPMToLinear>
 8002178:	ed87 0a05 	vstr	s0, [r7, #20]
    float vR_real = RPMToLinear(right_encoder.rpm);
 800217c:	4b61      	ldr	r3, [pc, #388]	@ (8002304 <Kinematics_SetSpeeds+0x20c>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fa09 	bl	8000598 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	ec43 2b10 	vmov	d0, r2, r3
 800218e:	f7ff ff87 	bl	80020a0 <RPMToLinear>
 8002192:	ed87 0a04 	vstr	s0, [r7, #16]

    // Se os dois motores pararam, resetamos o ângulo estimado
    if (fabs(vL_real) < 0.001 && fabs(vR_real) < 0.001) {
 8002196:	edd7 7a05 	vldr	s15, [r7, #20]
 800219a:	eef0 7ae7 	vabs.f32	s15, s15
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe f9f9 	bl	8000598 <__aeabi_f2d>
 80021a6:	a350      	add	r3, pc, #320	@ (adr r3, 80022e8 <Kinematics_SetSpeeds+0x1f0>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fcbe 	bl	8000b2c <__aeabi_dcmplt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d013      	beq.n	80021de <Kinematics_SetSpeeds+0xe6>
 80021b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ba:	eef0 7ae7 	vabs.f32	s15, s15
 80021be:	ee17 0a90 	vmov	r0, s15
 80021c2:	f7fe f9e9 	bl	8000598 <__aeabi_f2d>
 80021c6:	a348      	add	r3, pc, #288	@ (adr r3, 80022e8 <Kinematics_SetSpeeds+0x1f0>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f7fe fcae 	bl	8000b2c <__aeabi_dcmplt>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <Kinematics_SetSpeeds+0xe6>
        theta_imu = 0.0;
 80021d6:	4b48      	ldr	r3, [pc, #288]	@ (80022f8 <Kinematics_SetSpeeds+0x200>)
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

    // Debug opcional:
    // snprintf(debug_imu, sizeof(debug_imu), "Theta IMU: %.2f rad\r\n", theta_imu);
    // HAL_UART_Transmit(&huart1, (uint8_t*)debug_imu, strlen(debug_imu), HAL_MAX_DELAY);

    float target_rpm_left = LinearToRPM(vL);
 80021de:	ed97 0a01 	vldr	s0, [r7, #4]
 80021e2:	f7ff ff25 	bl	8002030 <LinearToRPM>
 80021e6:	ed87 0a03 	vstr	s0, [r7, #12]
    float target_rpm_right = LinearToRPM(vR);
 80021ea:	ed97 0a00 	vldr	s0, [r7]
 80021ee:	f7ff ff1f 	bl	8002030 <LinearToRPM>
 80021f2:	ed87 0a02 	vstr	s0, [r7, #8]

    setpoint_left_rpm  = target_rpm_left;
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f7fe f9ce 	bl	8000598 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4941      	ldr	r1, [pc, #260]	@ (8002308 <Kinematics_SetSpeeds+0x210>)
 8002202:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 8002206:	68b8      	ldr	r0, [r7, #8]
 8002208:	f7fe f9c6 	bl	8000598 <__aeabi_f2d>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	493e      	ldr	r1, [pc, #248]	@ (800230c <Kinematics_SetSpeeds+0x214>)
 8002212:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_encoder.rpm;
 8002216:	4b3a      	ldr	r3, [pc, #232]	@ (8002300 <Kinematics_SetSpeeds+0x208>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f9bc 	bl	8000598 <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	493a      	ldr	r1, [pc, #232]	@ (8002310 <Kinematics_SetSpeeds+0x218>)
 8002226:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_encoder.rpm;
 800222a:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <Kinematics_SetSpeeds+0x20c>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f9b2 	bl	8000598 <__aeabi_f2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4936      	ldr	r1, [pc, #216]	@ (8002314 <Kinematics_SetSpeeds+0x21c>)
 800223a:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 800223e:	4836      	ldr	r0, [pc, #216]	@ (8002318 <Kinematics_SetSpeeds+0x220>)
 8002240:	f7ff f9f8 	bl	8001634 <PID_Compute>
    PID_Compute(&pidRight);
 8002244:	4835      	ldr	r0, [pc, #212]	@ (800231c <Kinematics_SetSpeeds+0x224>)
 8002246:	f7ff f9f5 	bl	8001634 <PID_Compute>

    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 800224a:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <Kinematics_SetSpeeds+0x228>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	4690      	mov	r8, r2
 8002252:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002256:	4640      	mov	r0, r8
 8002258:	4649      	mov	r1, r9
 800225a:	f7fe fccd 	bl	8000bf8 <__aeabi_d2uiz>
 800225e:	4680      	mov	r8, r0
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <Kinematics_SetSpeeds+0x228>)
 8002262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002266:	2301      	movs	r3, #1
 8002268:	461e      	mov	r6, r3
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	f7fe fc6f 	bl	8000b54 <__aeabi_dcmpge>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <Kinematics_SetSpeeds+0x188>
 800227c:	2300      	movs	r3, #0
 800227e:	461e      	mov	r6, r3
 8002280:	b2f3      	uxtb	r3, r6
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	b2de      	uxtb	r6, r3
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <Kinematics_SetSpeeds+0x22c>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	4614      	mov	r4, r2
 8002292:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8002296:	4620      	mov	r0, r4
 8002298:	4629      	mov	r1, r5
 800229a:	f7fe fcad 	bl	8000bf8 <__aeabi_d2uiz>
 800229e:	4604      	mov	r4, r0
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 80022a0:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <Kinematics_SetSpeeds+0x22c>)
 80022a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a6:	2301      	movs	r3, #1
 80022a8:	461d      	mov	r5, r3
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	f7fe fc4f 	bl	8000b54 <__aeabi_dcmpge>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <Kinematics_SetSpeeds+0x1c8>
 80022bc:	2300      	movs	r3, #0
 80022be:	461d      	mov	r5, r3
 80022c0:	b2eb      	uxtb	r3, r5
 80022c2:	f083 0301 	eor.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4622      	mov	r2, r4
 80022cc:	4631      	mov	r1, r6
 80022ce:	4640      	mov	r0, r8
 80022d0:	f000 fbda 	bl	8002a88 <Motor_Control>
}
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022de:	bf00      	nop
 80022e0:	47ae147b 	.word	0x47ae147b
 80022e4:	3f847ae1 	.word	0x3f847ae1
 80022e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80022ec:	3f50624d 	.word	0x3f50624d
 80022f0:	2000038c 	.word	0x2000038c
 80022f4:	20000380 	.word	0x20000380
 80022f8:	20000398 	.word	0x20000398
 80022fc:	2000039c 	.word	0x2000039c
 8002300:	2000024c 	.word	0x2000024c
 8002304:	2000025c 	.word	0x2000025c
 8002308:	20000270 	.word	0x20000270
 800230c:	20000278 	.word	0x20000278
 8002310:	20000290 	.word	0x20000290
 8002314:	20000298 	.word	0x20000298
 8002318:	200002a0 	.word	0x200002a0
 800231c:	20000310 	.word	0x20000310
 8002320:	20000280 	.word	0x20000280
 8002324:	20000288 	.word	0x20000288

08002328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800232c:	f001 f96d 	bl	800360a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002330:	f000 f815 	bl	800235e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002334:	f000 faf8 	bl	8002928 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002338:	f000 f8d6 	bl	80024e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800233c:	f000 f984 	bl	8002648 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002340:	f000 f9f8 	bl	8002734 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002344:	f000 fa4c 	bl	80027e0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002348:	f000 f852 	bl	80023f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800234c:	f000 fa9e 	bl	800288c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002350:	f000 f88c 	bl	800246c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  VSSS_Init();
 8002354:	f7ff fc08 	bl	8001b68 <VSSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VSSS_Run();
 8002358:	f7ff fc2a 	bl	8001bb0 <VSSS_Run>
 800235c:	e7fc      	b.n	8002358 <main+0x30>

0800235e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b094      	sub	sp, #80	@ 0x50
 8002362:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002364:	f107 0318 	add.w	r3, r7, #24
 8002368:	2238      	movs	r2, #56	@ 0x38
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f006 fce1 	bl	8008d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002380:	2000      	movs	r0, #0
 8002382:	f001 fc53 	bl	8003c2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002386:	2301      	movs	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800238e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002390:	2302      	movs	r3, #2
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002394:	2303      	movs	r3, #3
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002398:	2302      	movs	r3, #2
 800239a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800239c:	2355      	movs	r3, #85	@ 0x55
 800239e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023a4:	2302      	movs	r3, #2
 80023a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ac:	f107 0318 	add.w	r3, r7, #24
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 fcef 	bl	8003d94 <HAL_RCC_OscConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80023bc:	f000 fb38 	bl	8002a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c0:	230f      	movs	r3, #15
 80023c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c4:	2303      	movs	r3, #3
 80023c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	2104      	movs	r1, #4
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 ffed 	bl	80043b8 <HAL_RCC_ClockConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023e4:	f000 fb24 	bl	8002a30 <Error_Handler>
  }
}
 80023e8:	bf00      	nop
 80023ea:	3750      	adds	r7, #80	@ 0x50
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <MX_SPI1_Init+0x74>)
 80023f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <MX_SPI1_Init+0x78>)
 80023f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <MX_SPI1_Init+0x74>)
 80023fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002408:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <MX_SPI1_Init+0x74>)
 800240a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800240e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002410:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002416:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <MX_SPI1_Init+0x74>)
 800241e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002422:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002424:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002426:	2220      	movs	r2, #32
 8002428:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <MX_SPI1_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800243c:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <MX_SPI1_Init+0x74>)
 800243e:	2207      	movs	r2, #7
 8002440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002442:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <MX_SPI1_Init+0x74>)
 800244a:	2208      	movs	r2, #8
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800244e:	4805      	ldr	r0, [pc, #20]	@ (8002464 <MX_SPI1_Init+0x74>)
 8002450:	f002 fbbe 	bl	8004bd0 <HAL_SPI_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800245a:	f000 fae9 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200003a0 	.word	0x200003a0
 8002468:	40013000 	.word	0x40013000

0800246c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002470:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <MX_SPI2_Init+0x74>)
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <MX_SPI2_Init+0x78>)
 8002474:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002476:	4b1a      	ldr	r3, [pc, #104]	@ (80024e0 <MX_SPI2_Init+0x74>)
 8002478:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800247c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800247e:	4b18      	ldr	r3, [pc, #96]	@ (80024e0 <MX_SPI2_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <MX_SPI2_Init+0x74>)
 8002486:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800248a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800248c:	4b14      	ldr	r3, [pc, #80]	@ (80024e0 <MX_SPI2_Init+0x74>)
 800248e:	2202      	movs	r2, #2
 8002490:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002492:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <MX_SPI2_Init+0x74>)
 8002494:	2201      	movs	r2, #1
 8002496:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <MX_SPI2_Init+0x74>)
 800249a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024a2:	2228      	movs	r2, #40	@ 0x28
 80024a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024ba:	2207      	movs	r2, #7
 80024bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024c4:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024ca:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <MX_SPI2_Init+0x74>)
 80024cc:	f002 fb80 	bl	8004bd0 <HAL_SPI_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024d6:	f000 faab 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000404 	.word	0x20000404
 80024e4:	40003800 	.word	0x40003800

080024e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b09c      	sub	sp, #112	@ 0x70
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002508:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
 8002518:	615a      	str	r2, [r3, #20]
 800251a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	2234      	movs	r2, #52	@ 0x34
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f006 fc06 	bl	8008d34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002528:	4b45      	ldr	r3, [pc, #276]	@ (8002640 <MX_TIM1_Init+0x158>)
 800252a:	4a46      	ldr	r2, [pc, #280]	@ (8002644 <MX_TIM1_Init+0x15c>)
 800252c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800252e:	4b44      	ldr	r3, [pc, #272]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b42      	ldr	r3, [pc, #264]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 800253a:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <MX_TIM1_Init+0x158>)
 800253c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002540:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002542:	4b3f      	ldr	r3, [pc, #252]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002548:	4b3d      	ldr	r3, [pc, #244]	@ (8002640 <MX_TIM1_Init+0x158>)
 800254a:	2200      	movs	r2, #0
 800254c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b3c      	ldr	r3, [pc, #240]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002554:	483a      	ldr	r0, [pc, #232]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002556:	f003 fa6f 	bl	8005a38 <HAL_TIM_Base_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002560:	f000 fa66 	bl	8002a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002568:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800256a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800256e:	4619      	mov	r1, r3
 8002570:	4833      	ldr	r0, [pc, #204]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002572:	f003 fe61 	bl	8006238 <HAL_TIM_ConfigClockSource>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800257c:	f000 fa58 	bl	8002a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002580:	482f      	ldr	r0, [pc, #188]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002582:	f003 fab0 	bl	8005ae6 <HAL_TIM_PWM_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800258c:	f000 fa50 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800259c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025a0:	4619      	mov	r1, r3
 80025a2:	4827      	ldr	r0, [pc, #156]	@ (8002640 <MX_TIM1_Init+0x158>)
 80025a4:	f004 fb96 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80025ae:	f000 fa3f 	bl	8002a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025b2:	2360      	movs	r3, #96	@ 0x60
 80025b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ba:	2300      	movs	r3, #0
 80025bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025be:	2300      	movs	r3, #0
 80025c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025d2:	2200      	movs	r2, #0
 80025d4:	4619      	mov	r1, r3
 80025d6:	481a      	ldr	r0, [pc, #104]	@ (8002640 <MX_TIM1_Init+0x158>)
 80025d8:	f003 fd1a 	bl	8006010 <HAL_TIM_PWM_ConfigChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80025e2:	f000 fa25 	bl	8002a30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800260c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002610:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4807      	ldr	r0, [pc, #28]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002624:	f004 fbd8 	bl	8006dd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800262e:	f000 f9ff 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002632:	4803      	ldr	r0, [pc, #12]	@ (8002640 <MX_TIM1_Init+0x158>)
 8002634:	f000 fde8 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8002638:	bf00      	nop
 800263a:	3770      	adds	r7, #112	@ 0x70
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000468 	.word	0x20000468
 8002644:	40012c00 	.word	0x40012c00

08002648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08e      	sub	sp, #56	@ 0x38
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002668:	463b      	mov	r3, r7
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800267a:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <MX_TIM2_Init+0xe8>)
 800267c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002682:	4b2b      	ldr	r3, [pc, #172]	@ (8002730 <MX_TIM2_Init+0xe8>)
 8002684:	2200      	movs	r2, #0
 8002686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <MX_TIM2_Init+0xe8>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 800268e:	4b28      	ldr	r3, [pc, #160]	@ (8002730 <MX_TIM2_Init+0xe8>)
 8002690:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002696:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <MX_TIM2_Init+0xe8>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269c:	4b24      	ldr	r3, [pc, #144]	@ (8002730 <MX_TIM2_Init+0xe8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026a2:	4823      	ldr	r0, [pc, #140]	@ (8002730 <MX_TIM2_Init+0xe8>)
 80026a4:	f003 f9c8 	bl	8005a38 <HAL_TIM_Base_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80026ae:	f000 f9bf 	bl	8002a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026bc:	4619      	mov	r1, r3
 80026be:	481c      	ldr	r0, [pc, #112]	@ (8002730 <MX_TIM2_Init+0xe8>)
 80026c0:	f003 fdba 	bl	8006238 <HAL_TIM_ConfigClockSource>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80026ca:	f000 f9b1 	bl	8002a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026ce:	4818      	ldr	r0, [pc, #96]	@ (8002730 <MX_TIM2_Init+0xe8>)
 80026d0:	f003 fa09 	bl	8005ae6 <HAL_TIM_PWM_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80026da:	f000 f9a9 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026e6:	f107 031c 	add.w	r3, r7, #28
 80026ea:	4619      	mov	r1, r3
 80026ec:	4810      	ldr	r0, [pc, #64]	@ (8002730 <MX_TIM2_Init+0xe8>)
 80026ee:	f004 faf1 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80026f8:	f000 f99a 	bl	8002a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026fc:	2360      	movs	r3, #96	@ 0x60
 80026fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	2200      	movs	r2, #0
 8002710:	4619      	mov	r1, r3
 8002712:	4807      	ldr	r0, [pc, #28]	@ (8002730 <MX_TIM2_Init+0xe8>)
 8002714:	f003 fc7c 	bl	8006010 <HAL_TIM_PWM_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800271e:	f000 f987 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002722:	4803      	ldr	r0, [pc, #12]	@ (8002730 <MX_TIM2_Init+0xe8>)
 8002724:	f000 fd70 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8002728:	bf00      	nop
 800272a:	3738      	adds	r7, #56	@ 0x38
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200004b4 	.word	0x200004b4

08002734 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	@ 0x30
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	2224      	movs	r2, #36	@ 0x24
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f006 faf6 	bl	8008d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002748:	463b      	mov	r3, r7
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002752:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 8002754:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <MX_TIM3_Init+0xa8>)
 8002756:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002758:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002764:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 8002766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800276a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002778:	2303      	movs	r3, #3
 800277a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002780:	2301      	movs	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8002788:	2308      	movs	r3, #8
 800278a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002790:	2301      	movs	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	4619      	mov	r1, r3
 80027a2:	480d      	ldr	r0, [pc, #52]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 80027a4:	f003 fb00 	bl	8005da8 <HAL_TIM_Encoder_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80027ae:	f000 f93f 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ba:	463b      	mov	r3, r7
 80027bc:	4619      	mov	r1, r3
 80027be:	4806      	ldr	r0, [pc, #24]	@ (80027d8 <MX_TIM3_Init+0xa4>)
 80027c0:	f004 fa88 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80027ca:	f000 f931 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	3730      	adds	r7, #48	@ 0x30
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000500 	.word	0x20000500
 80027dc:	40000400 	.word	0x40000400

080027e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	@ 0x30
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f006 faa0 	bl	8008d34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f4:	463b      	mov	r3, r7
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027fe:	4b21      	ldr	r3, [pc, #132]	@ (8002884 <MX_TIM4_Init+0xa4>)
 8002800:	4a21      	ldr	r2, [pc, #132]	@ (8002888 <MX_TIM4_Init+0xa8>)
 8002802:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002804:	4b1f      	ldr	r3, [pc, #124]	@ (8002884 <MX_TIM4_Init+0xa4>)
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <MX_TIM4_Init+0xa4>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002810:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <MX_TIM4_Init+0xa4>)
 8002812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002816:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002818:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <MX_TIM4_Init+0xa4>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <MX_TIM4_Init+0xa4>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002824:	2303      	movs	r3, #3
 8002826:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800282c:	2301      	movs	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8002834:	2308      	movs	r3, #8
 8002836:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800283c:	2301      	movs	r3, #1
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	4619      	mov	r1, r3
 800284e:	480d      	ldr	r0, [pc, #52]	@ (8002884 <MX_TIM4_Init+0xa4>)
 8002850:	f003 faaa 	bl	8005da8 <HAL_TIM_Encoder_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800285a:	f000 f8e9 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002866:	463b      	mov	r3, r7
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	@ (8002884 <MX_TIM4_Init+0xa4>)
 800286c:	f004 fa32 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002876:	f000 f8db 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	3730      	adds	r7, #48	@ 0x30
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000054c 	.word	0x2000054c
 8002888:	40000800 	.word	0x40000800

0800288c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002890:	4b22      	ldr	r3, [pc, #136]	@ (800291c <MX_USART1_UART_Init+0x90>)
 8002892:	4a23      	ldr	r2, [pc, #140]	@ (8002920 <MX_USART1_UART_Init+0x94>)
 8002894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002896:	4b21      	ldr	r3, [pc, #132]	@ (800291c <MX_USART1_UART_Init+0x90>)
 8002898:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <MX_USART1_UART_Init+0x98>)
 800289a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800289c:	4b1f      	ldr	r3, [pc, #124]	@ (800291c <MX_USART1_UART_Init+0x90>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ae:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028b0:	220c      	movs	r2, #12
 80028b2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ba:	4b18      	ldr	r3, [pc, #96]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028d2:	4812      	ldr	r0, [pc, #72]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028d4:	f004 fb0c 	bl	8006ef0 <HAL_UART_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80028de:	f000 f8a7 	bl	8002a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028e2:	2100      	movs	r1, #0
 80028e4:	480d      	ldr	r0, [pc, #52]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028e6:	f005 f905 	bl	8007af4 <HAL_UARTEx_SetTxFifoThreshold>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80028f0:	f000 f89e 	bl	8002a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028f4:	2100      	movs	r1, #0
 80028f6:	4809      	ldr	r0, [pc, #36]	@ (800291c <MX_USART1_UART_Init+0x90>)
 80028f8:	f005 f93a 	bl	8007b70 <HAL_UARTEx_SetRxFifoThreshold>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002902:	f000 f895 	bl	8002a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002906:	4805      	ldr	r0, [pc, #20]	@ (800291c <MX_USART1_UART_Init+0x90>)
 8002908:	f005 f8bb 	bl	8007a82 <HAL_UARTEx_DisableFifoMode>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002912:	f000 f88d 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000598 	.word	0x20000598
 8002920:	40013800 	.word	0x40013800
 8002924:	000f4240 	.word	0x000f4240

08002928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800293e:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002942:	4a38      	ldr	r2, [pc, #224]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002944:	f043 0320 	orr.w	r3, r3, #32
 8002948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294a:	4b36      	ldr	r3, [pc, #216]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	4a32      	ldr	r2, [pc, #200]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002962:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	4a2c      	ldr	r2, [pc, #176]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	4a26      	ldr	r2, [pc, #152]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002992:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <MX_GPIO_Init+0xfc>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	f240 6106 	movw	r1, #1542	@ 0x606
 80029a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029a8:	f001 f928 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin|CS_Pin, GPIO_PIN_RESET);
 80029ac:	2200      	movs	r2, #0
 80029ae:	f241 0103 	movw	r1, #4099	@ 0x1003
 80029b2:	481d      	ldr	r0, [pc, #116]	@ (8002a28 <MX_GPIO_Init+0x100>)
 80029b4:	f001 f922 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2140      	movs	r1, #64	@ 0x40
 80029bc:	481b      	ldr	r0, [pc, #108]	@ (8002a2c <MX_GPIO_Init+0x104>)
 80029be:	f001 f91d 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 80029c2:	f240 6306 	movw	r3, #1542	@ 0x606
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029de:	f000 ff8b 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin|CS_Pin;
 80029e2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	480b      	ldr	r0, [pc, #44]	@ (8002a28 <MX_GPIO_Init+0x100>)
 80029fc:	f000 ff7c 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a00:	2340      	movs	r3, #64	@ 0x40
 8002a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_GPIO_Init+0x104>)
 8002a18:	f000 ff6e 	bl	80038f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	@ 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	48000400 	.word	0x48000400
 8002a2c:	48000800 	.word	0x48000800

08002a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a34:	b672      	cpsid	i
}
 8002a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <Error_Handler+0x8>

08002a3c <Motor_Init>:
Motor_t motorLeft;
Motor_t motorRight;

void Motor_Init(Motor_t *motor, TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel,
                GPIO_TypeDef *gpio_port1, uint16_t gpio_pin1,
                GPIO_TypeDef *gpio_port2, uint16_t gpio_pin2) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
    motor->pwm_timer = pwm_timer;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	601a      	str	r2, [r3, #0]
    motor->pwm_channel = pwm_channel;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	605a      	str	r2, [r3, #4]
    motor->gpio_port1 = gpio_port1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	609a      	str	r2, [r3, #8]
    motor->gpio_pin1 = gpio_pin1;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8b3a      	ldrh	r2, [r7, #24]
 8002a60:	819a      	strh	r2, [r3, #12]
    motor->gpio_port2 = gpio_port2;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	611a      	str	r2, [r3, #16]
    motor->gpio_pin2 = gpio_pin2;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8c3a      	ldrh	r2, [r7, #32]
 8002a6c:	829a      	strh	r2, [r3, #20]

    HAL_TIM_PWM_Start(motor->pwm_timer, motor->pwm_channel);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f003 f895 	bl	8005ba8 <HAL_TIM_PWM_Start>
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <Motor_Control>:

void Motor_Control(uint32_t pwm_left, uint8_t dir_left, uint32_t pwm_right, uint8_t dir_right) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	461a      	mov	r2, r3
 8002a94:	460b      	mov	r3, r1
 8002a96:	72fb      	strb	r3, [r7, #11]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	72bb      	strb	r3, [r7, #10]
    // --- Motor Esquerdo ---
    if (pwm_left == 0) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <Motor_Control+0x34>
        // Short Brake: IN1 = HIGH, IN2 = HIGH
        HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, GPIO_PIN_SET);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aaa:	f001 f8a7 	bl	8003bfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_SET);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab6:	f001 f8a1 	bl	8003bfc <HAL_GPIO_WritePin>
 8002aba:	e012      	b.n	8002ae2 <Motor_Control+0x5a>
    } else {
        HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 8002abc:	7afb      	ldrb	r3, [r7, #11]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac6:	f001 f899 	bl	8003bfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2104      	movs	r1, #4
 8002ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ade:	f001 f88d 	bl	8003bfc <HAL_GPIO_WritePin>
    }

    // --- Motor Direito ---
    if (pwm_right == 0) {
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10e      	bne.n	8002b06 <Motor_Control+0x7e>
        // Short Brake: IN1 = HIGH, IN2 = HIGH
        HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, GPIO_PIN_SET);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af2:	f001 f883 	bl	8003bfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_SET);
 8002af6:	2201      	movs	r2, #1
 8002af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b00:	f001 f87c 	bl	8003bfc <HAL_GPIO_WritePin>
 8002b04:	e014      	b.n	8002b30 <Motor_Control+0xa8>
    } else {
        HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, (GPIO_PinState)(dir_right));
 8002b06:	7abb      	ldrb	r3, [r7, #10]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b12:	f001 f873 	bl	8003bfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 8002b16:	7abb      	ldrb	r3, [r7, #10]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b2c:	f001 f866 	bl	8003bfc <HAL_GPIO_WritePin>
    }

    // PWM
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <Motor_Control+0xc0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 8002b38:	4b04      	ldr	r3, [pc, #16]	@ (8002b4c <Motor_Control+0xc4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200004b4 	.word	0x200004b4
 8002b4c:	20000468 	.word	0x20000468

08002b50 <CS_Select>:
}



void CS_Select (void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2101      	movs	r1, #1
 8002b58:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <CS_Select+0x14>)
 8002b5a:	f001 f84f 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	48000400 	.word	0x48000400

08002b68 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <CS_UnSelect+0x14>)
 8002b72:	f001 f843 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	48000400 	.word	0x48000400

08002b80 <CE_Enable>:


void CE_Enable (void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8002b84:	2201      	movs	r2, #1
 8002b86:	2102      	movs	r1, #2
 8002b88:	4802      	ldr	r0, [pc, #8]	@ (8002b94 <CE_Enable+0x14>)
 8002b8a:	f001 f837 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	48000400 	.word	0x48000400

08002b98 <CE_Disable>:

void CE_Disable (void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <CE_Disable+0x14>)
 8002ba2:	f001 f82b 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	48000400 	.word	0x48000400

08002bb0 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460a      	mov	r2, r1
 8002bba:	71fb      	strb	r3, [r7, #7]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f043 0320 	orr.w	r3, r3, #32
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002bce:	f7ff ffbf 	bl	8002b50 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8002bd2:	f107 010c 	add.w	r1, r7, #12
 8002bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4804      	ldr	r0, [pc, #16]	@ (8002bf0 <nrf24_WriteReg+0x40>)
 8002bde:	f002 f8a2 	bl	8004d26 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002be2:	f7ff ffc1 	bl	8002b68 <CS_UnSelect>
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200003a0 	.word	0x200003a0

08002bf4 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	f043 0320 	orr.w	r3, r3, #32
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002c0c:	f7ff ffa0 	bl	8002b50 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8002c10:	f107 0114 	add.w	r1, r7, #20
 8002c14:	2364      	movs	r3, #100	@ 0x64
 8002c16:	2201      	movs	r2, #1
 8002c18:	4808      	ldr	r0, [pc, #32]	@ (8002c3c <nrf24_WriteRegMulti+0x48>)
 8002c1a:	f002 f884 	bl	8004d26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	4804      	ldr	r0, [pc, #16]	@ (8002c3c <nrf24_WriteRegMulti+0x48>)
 8002c2a:	f002 f87c 	bl	8004d26 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002c2e:	f7ff ff9b 	bl	8002b68 <CS_UnSelect>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200003a0 	.word	0x200003a0

08002c40 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002c4e:	f7ff ff7f 	bl	8002b50 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8002c52:	1df9      	adds	r1, r7, #7
 8002c54:	2364      	movs	r3, #100	@ 0x64
 8002c56:	2201      	movs	r2, #1
 8002c58:	4808      	ldr	r0, [pc, #32]	@ (8002c7c <nrf24_ReadReg+0x3c>)
 8002c5a:	f002 f864 	bl	8004d26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8002c5e:	f107 010f 	add.w	r1, r7, #15
 8002c62:	2364      	movs	r3, #100	@ 0x64
 8002c64:	2201      	movs	r2, #1
 8002c66:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <nrf24_ReadReg+0x3c>)
 8002c68:	f002 f9d3 	bl	8005012 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002c6c:	f7ff ff7c 	bl	8002b68 <CS_UnSelect>

	return data;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200003a0 	.word	0x200003a0

08002c80 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002c8a:	f7ff ff61 	bl	8002b50 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8002c8e:	1df9      	adds	r1, r7, #7
 8002c90:	2364      	movs	r3, #100	@ 0x64
 8002c92:	2201      	movs	r2, #1
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <nrfsendCmd+0x28>)
 8002c96:	f002 f846 	bl	8004d26 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002c9a:	f7ff ff65 	bl	8002b68 <CS_UnSelect>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200003a0 	.word	0x200003a0

08002cac <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d104      	bne.n	8002cc6 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, (1 << 6) | (1 << 5) | (1 << 4));
 8002cbc:	2170      	movs	r1, #112	@ 0x70
 8002cbe:	2007      	movs	r0, #7
 8002cc0:	f7ff ff76 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);

	}
}
 8002cc4:	e090      	b.n	8002de8 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2b17      	cmp	r3, #23
 8002cca:	d104      	bne.n	8002cd6 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002ccc:	2111      	movs	r1, #17
 8002cce:	2017      	movs	r0, #23
 8002cd0:	f7ff ff6e 	bl	8002bb0 <nrf24_WriteReg>
}
 8002cd4:	e088      	b.n	8002de8 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8002cd6:	2108      	movs	r1, #8
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7ff ff69 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F); // Enable all the data pipes
 8002cde:	213f      	movs	r1, #63	@ 0x3f
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7ff ff65 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f7ff ff61 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8002cee:	2103      	movs	r1, #3
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03); // 0x3F = 4000us delay, 15 retransmission
 8002cf6:	2103      	movs	r1, #3
 8002cf8:	2004      	movs	r0, #4
 8002cfa:	f7ff ff59 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8002cfe:	2102      	movs	r1, #2
 8002d00:	2005      	movs	r0, #5
 8002d02:	f7ff ff55 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E); // 0x0E = 2Mbps ||  0x06 = 1Mbps
 8002d06:	210e      	movs	r1, #14
 8002d08:	2006      	movs	r0, #6
 8002d0a:	f7ff ff51 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2007      	movs	r0, #7
 8002d12:	f7ff ff4d 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8002d16:	2100      	movs	r1, #0
 8002d18:	2008      	movs	r0, #8
 8002d1a:	f7ff ff49 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2009      	movs	r0, #9
 8002d22:	f7ff ff45 	bl	8002bb0 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8002d26:	4a32      	ldr	r2, [pc, #200]	@ (8002df0 <nrf24_reset+0x144>)
 8002d28:	f107 0318 	add.w	r3, r7, #24
 8002d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d30:	6018      	str	r0, [r3, #0]
 8002d32:	3304      	adds	r3, #4
 8002d34:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8002d36:	f107 0318 	add.w	r3, r7, #24
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	200a      	movs	r0, #10
 8002d40:	f7ff ff58 	bl	8002bf4 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <nrf24_reset+0x148>)
 8002d46:	f107 0310 	add.w	r3, r7, #16
 8002d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d4e:	6018      	str	r0, [r3, #0]
 8002d50:	3304      	adds	r3, #4
 8002d52:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	2205      	movs	r2, #5
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	200b      	movs	r0, #11
 8002d5e:	f7ff ff49 	bl	8002bf4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8002d62:	21c3      	movs	r1, #195	@ 0xc3
 8002d64:	200c      	movs	r0, #12
 8002d66:	f7ff ff23 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8002d6a:	21c4      	movs	r1, #196	@ 0xc4
 8002d6c:	200d      	movs	r0, #13
 8002d6e:	f7ff ff1f 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8002d72:	21c5      	movs	r1, #197	@ 0xc5
 8002d74:	200e      	movs	r0, #14
 8002d76:	f7ff ff1b 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8002d7a:	21c6      	movs	r1, #198	@ 0xc6
 8002d7c:	200f      	movs	r0, #15
 8002d7e:	f7ff ff17 	bl	8002bb0 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8002d82:	4a1b      	ldr	r2, [pc, #108]	@ (8002df0 <nrf24_reset+0x144>)
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d8c:	6018      	str	r0, [r3, #0]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	2205      	movs	r2, #5
 8002d98:	4619      	mov	r1, r3
 8002d9a:	2010      	movs	r0, #16
 8002d9c:	f7ff ff2a 	bl	8002bf4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8002da0:	2100      	movs	r1, #0
 8002da2:	2011      	movs	r0, #17
 8002da4:	f7ff ff04 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8002da8:	2100      	movs	r1, #0
 8002daa:	2012      	movs	r0, #18
 8002dac:	f7ff ff00 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8002db0:	2100      	movs	r1, #0
 8002db2:	2013      	movs	r0, #19
 8002db4:	f7ff fefc 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8002db8:	2100      	movs	r1, #0
 8002dba:	2014      	movs	r0, #20
 8002dbc:	f7ff fef8 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2015      	movs	r0, #21
 8002dc4:	f7ff fef4 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2016      	movs	r0, #22
 8002dcc:	f7ff fef0 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002dd0:	2111      	movs	r1, #17
 8002dd2:	2017      	movs	r0, #23
 8002dd4:	f7ff feec 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	201c      	movs	r0, #28
 8002ddc:	f7ff fee8 	bl	8002bb0 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8002de0:	2100      	movs	r1, #0
 8002de2:	201d      	movs	r0, #29
 8002de4:	f7ff fee4 	bl	8002bb0 <nrf24_WriteReg>
}
 8002de8:	bf00      	nop
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	0800c48c 	.word	0x0800c48c
 8002df4:	0800c494 	.word	0x0800c494

08002df8 <NRF24_Init>:




void NRF24_Init(void) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
    CE_Disable();
 8002dfc:	f7ff fecc 	bl	8002b98 <CE_Disable>
    nrf24_reset(0);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff ff53 	bl	8002cac <nrf24_reset>

    // Habilita CRC de 16 bits (CONFIG: EN_CRC=1, CRCO=1)
    nrf24_WriteReg(CONFIG, (1 << 2) | (1 << 3));
 8002e06:	210c      	movs	r1, #12
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7ff fed1 	bl	8002bb0 <nrf24_WriteReg>

    // Auto-ACK em todos os pipes (EN_AA=0x3F)
    nrf24_WriteReg(EN_AA, 0x3F);
 8002e0e:	213f      	movs	r1, #63	@ 0x3f
 8002e10:	2001      	movs	r0, #1
 8002e12:	f7ff fecd 	bl	8002bb0 <nrf24_WriteReg>

    // Taxa de dados: 250Kbps (RF_SETUP=0x26) | Taxa de dados: 1mps (RF_SETUP=0x06)
    nrf24_WriteReg(RF_SETUP, 0x26);
 8002e16:	2126      	movs	r1, #38	@ 0x26
 8002e18:	2006      	movs	r0, #6
 8002e1a:	f7ff fec9 	bl	8002bb0 <nrf24_WriteReg>

    // 15 retransmissões, delay 4000µs (SETUP_RETR=0x4F)
    nrf24_WriteReg(SETUP_RETR, 0x4F);
 8002e1e:	214f      	movs	r1, #79	@ 0x4f
 8002e20:	2004      	movs	r0, #4
 8002e22:	f7ff fec5 	bl	8002bb0 <nrf24_WriteReg>

    // Habilita Dynamic Payloads (FEATURE=0x06)
    nrf24_WriteReg(FEATURE, 0x06);
 8002e26:	2106      	movs	r1, #6
 8002e28:	201d      	movs	r0, #29
 8002e2a:	f7ff fec1 	bl	8002bb0 <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD, 0x3F); // Ativa em todos os pipes
 8002e2e:	213f      	movs	r1, #63	@ 0x3f
 8002e30:	201c      	movs	r0, #28
 8002e32:	f7ff febd 	bl	8002bb0 <nrf24_WriteReg>

    CE_Enable();
 8002e36:	f7ff fea3 	bl	8002b80 <CE_Enable>
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <NRF24_RxMode>:
    return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8002e4a:	f7ff fea5 	bl	8002b98 <CE_Disable>

	nrf24_reset (STATUS);
 8002e4e:	2007      	movs	r0, #7
 8002e50:	f7ff ff2c 	bl	8002cac <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	4619      	mov	r1, r3
 8002e58:	2005      	movs	r0, #5
 8002e5a:	f7ff fea9 	bl	8002bb0 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8002e5e:	2002      	movs	r0, #2
 8002e60:	f7ff feee 	bl	8002c40 <nrf24_ReadReg>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	4619      	mov	r1, r3
 8002e74:	2002      	movs	r0, #2
 8002e76:	f7ff fe9b 	bl	8002bb0 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	200b      	movs	r0, #11
 8002e80:	f7ff feb8 	bl	8002bf4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8002e84:	21ee      	movs	r1, #238	@ 0xee
 8002e86:	200c      	movs	r0, #12
 8002e88:	f7ff fe92 	bl	8002bb0 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	2013      	movs	r0, #19
 8002e90:	f7ff fe8e 	bl	8002bb0 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff fed3 	bl	8002c40 <nrf24_ReadReg>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8002e9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ea0:	f043 0303 	orr.w	r3, r3, #3
 8002ea4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8002ea6:	7bbb      	ldrb	r3, [r7, #14]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7ff fe80 	bl	8002bb0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002eb0:	f7ff fe66 	bl	8002b80 <CE_Enable>
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8002ec4:	2007      	movs	r0, #7
 8002ec6:	f7ff febb 	bl	8002c40 <nrf24_ReadReg>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <isDataAvailable+0x34>
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8002ee4:	2140      	movs	r1, #64	@ 0x40
 8002ee6:	2007      	movs	r0, #7
 8002ee8:	f7ff fe62 	bl	8002bb0 <nrf24_WriteReg>

		return 1;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <isDataAvailable+0x36>
	}

	return 0;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8002f08:	f7ff fe22 	bl	8002b50 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8002f0c:	2361      	movs	r3, #97	@ 0x61
 8002f0e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8002f10:	f107 010f 	add.w	r1, r7, #15
 8002f14:	2364      	movs	r3, #100	@ 0x64
 8002f16:	2201      	movs	r2, #1
 8002f18:	480c      	ldr	r0, [pc, #48]	@ (8002f4c <NRF24_Receive+0x50>)
 8002f1a:	f001 ff04 	bl	8004d26 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8002f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f22:	2220      	movs	r2, #32
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4809      	ldr	r0, [pc, #36]	@ (8002f4c <NRF24_Receive+0x50>)
 8002f28:	f002 f873 	bl	8005012 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8002f2c:	f7ff fe1c 	bl	8002b68 <CS_UnSelect>

	HAL_Delay(1);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f000 fbdb 	bl	80036ec <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8002f36:	23e2      	movs	r3, #226	@ 0xe2
 8002f38:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe9f 	bl	8002c80 <nrfsendCmd>
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200003a0 	.word	0x200003a0

08002f50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_MspInit+0x44>)
 8002f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f94 <HAL_MspInit+0x44>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_MspInit+0x44>)
 8002f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <HAL_MspInit+0x44>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	4a08      	ldr	r2, [pc, #32]	@ (8002f94 <HAL_MspInit+0x44>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_MspInit+0x44>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f86:	f000 fef5 	bl	8003d74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	@ 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a3d      	ldr	r2, [pc, #244]	@ (80030ac <HAL_SPI_MspInit+0x114>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d145      	bne.n	8003046 <HAL_SPI_MspInit+0xae>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fba:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbe:	4a3c      	ldr	r2, [pc, #240]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002fc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd2:	4b37      	ldr	r3, [pc, #220]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd6:	4a36      	ldr	r2, [pc, #216]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fde:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fea:	4b31      	ldr	r3, [pc, #196]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fee:	4a30      	ldr	r2, [pc, #192]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8003002:	23a0      	movs	r3, #160	@ 0xa0
 8003004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300e:	2300      	movs	r3, #0
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003012:	2305      	movs	r3, #5
 8003014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 031c 	add.w	r3, r7, #28
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003020:	f000 fc6a 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8003024:	2310      	movs	r3, #16
 8003026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003034:	2305      	movs	r3, #5
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8003038:	f107 031c 	add.w	r3, r7, #28
 800303c:	4619      	mov	r1, r3
 800303e:	481d      	ldr	r0, [pc, #116]	@ (80030b4 <HAL_SPI_MspInit+0x11c>)
 8003040:	f000 fc5a 	bl	80038f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003044:	e02d      	b.n	80030a2 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1b      	ldr	r2, [pc, #108]	@ (80030b8 <HAL_SPI_MspInit+0x120>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d128      	bne.n	80030a2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003050:	4b17      	ldr	r3, [pc, #92]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	4a16      	ldr	r2, [pc, #88]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8003056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800305a:	6593      	str	r3, [r2, #88]	@ 0x58
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 800306a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306c:	4a10      	ldr	r2, [pc, #64]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003074:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <HAL_SPI_MspInit+0x118>)
 8003076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003080:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003092:	2305      	movs	r3, #5
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 031c 	add.w	r3, r7, #28
 800309a:	4619      	mov	r1, r3
 800309c:	4805      	ldr	r0, [pc, #20]	@ (80030b4 <HAL_SPI_MspInit+0x11c>)
 800309e:	f000 fc2b 	bl	80038f8 <HAL_GPIO_Init>
}
 80030a2:	bf00      	nop
 80030a4:	3730      	adds	r7, #48	@ 0x30
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40013000 	.word	0x40013000
 80030b0:	40021000 	.word	0x40021000
 80030b4:	48000400 	.word	0x48000400
 80030b8:	40003800 	.word	0x40003800

080030bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a13      	ldr	r2, [pc, #76]	@ (8003118 <HAL_TIM_Base_MspInit+0x5c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ce:	4b13      	ldr	r3, [pc, #76]	@ (800311c <HAL_TIM_Base_MspInit+0x60>)
 80030d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d2:	4a12      	ldr	r2, [pc, #72]	@ (800311c <HAL_TIM_Base_MspInit+0x60>)
 80030d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <HAL_TIM_Base_MspInit+0x60>)
 80030dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030e6:	e010      	b.n	800310a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f0:	d10b      	bne.n	800310a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_TIM_Base_MspInit+0x60>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_TIM_Base_MspInit+0x60>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fe:	4b07      	ldr	r3, [pc, #28]	@ (800311c <HAL_TIM_Base_MspInit+0x60>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40021000 	.word	0x40021000

08003120 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	@ 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a2f      	ldr	r2, [pc, #188]	@ (80031fc <HAL_TIM_Encoder_MspInit+0xdc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d129      	bne.n	8003196 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003142:	4b2f      	ldr	r3, [pc, #188]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	4a2e      	ldr	r2, [pc, #184]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003148:	f043 0302 	orr.w	r3, r3, #2
 800314c:	6593      	str	r3, [r2, #88]	@ 0x58
 800314e:	4b2c      	ldr	r3, [pc, #176]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	4b29      	ldr	r3, [pc, #164]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 800315c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315e:	4a28      	ldr	r2, [pc, #160]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003166:	4b26      	ldr	r3, [pc, #152]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 8003172:	2350      	movs	r3, #80	@ 0x50
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003176:	2302      	movs	r3, #2
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003182:	2302      	movs	r3, #2
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	f107 031c 	add.w	r3, r7, #28
 800318a:	4619      	mov	r1, r3
 800318c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003190:	f000 fbb2 	bl	80038f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003194:	e02e      	b.n	80031f4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1a      	ldr	r2, [pc, #104]	@ (8003204 <HAL_TIM_Encoder_MspInit+0xe4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d129      	bne.n	80031f4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031a0:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	4a16      	ldr	r2, [pc, #88]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031bc:	4a10      	ldr	r2, [pc, #64]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <HAL_TIM_Encoder_MspInit+0xe0>)
 80031c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 80031d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	2300      	movs	r3, #0
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80031e2:	230a      	movs	r3, #10
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e6:	f107 031c 	add.w	r3, r7, #28
 80031ea:	4619      	mov	r1, r3
 80031ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031f0:	f000 fb82 	bl	80038f8 <HAL_GPIO_Init>
}
 80031f4:	bf00      	nop
 80031f6:	3730      	adds	r7, #48	@ 0x30
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40000400 	.word	0x40000400
 8003200:	40021000 	.word	0x40021000
 8003204:	40000800 	.word	0x40000800

08003208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a23      	ldr	r2, [pc, #140]	@ (80032b4 <HAL_TIM_MspPostInit+0xac>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d11e      	bne.n	8003268 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <HAL_TIM_MspPostInit+0xb0>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322e:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <HAL_TIM_MspPostInit+0xb0>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_TIM_MspPostInit+0xb0>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 8003242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003250:	2302      	movs	r3, #2
 8003252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003254:	2306      	movs	r3, #6
 8003256:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	4619      	mov	r1, r3
 800325e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003262:	f000 fb49 	bl	80038f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003266:	e021      	b.n	80032ac <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003270:	d11c      	bne.n	80032ac <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <HAL_TIM_MspPostInit+0xb0>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	4a10      	ldr	r2, [pc, #64]	@ (80032b8 <HAL_TIM_MspPostInit+0xb0>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327e:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <HAL_TIM_MspPostInit+0xb0>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800329a:	2301      	movs	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032a8:	f000 fb26 	bl	80038f8 <HAL_GPIO_Init>
}
 80032ac:	bf00      	nop
 80032ae:	3728      	adds	r7, #40	@ 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b09c      	sub	sp, #112	@ 0x70
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	2244      	movs	r2, #68	@ 0x44
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f005 fd29 	bl	8008d34 <memset>
  if(huart->Instance==USART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003398 <HAL_UART_MspInit+0xdc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d151      	bne.n	8003390 <HAL_UART_MspInit+0xd4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032ec:	2301      	movs	r3, #1
 80032ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f4:	f107 0318 	add.w	r3, r7, #24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 fa79 	bl	80047f0 <HAL_RCCEx_PeriphCLKConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003304:	f7ff fb94 	bl	8002a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003308:	4b24      	ldr	r3, [pc, #144]	@ (800339c <HAL_UART_MspInit+0xe0>)
 800330a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330c:	4a23      	ldr	r2, [pc, #140]	@ (800339c <HAL_UART_MspInit+0xe0>)
 800330e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003312:	6613      	str	r3, [r2, #96]	@ 0x60
 8003314:	4b21      	ldr	r3, [pc, #132]	@ (800339c <HAL_UART_MspInit+0xe0>)
 8003316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003320:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <HAL_UART_MspInit+0xe0>)
 8003322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003324:	4a1d      	ldr	r2, [pc, #116]	@ (800339c <HAL_UART_MspInit+0xe0>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800332c:	4b1b      	ldr	r3, [pc, #108]	@ (800339c <HAL_UART_MspInit+0xe0>)
 800332e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003338:	4b18      	ldr	r3, [pc, #96]	@ (800339c <HAL_UART_MspInit+0xe0>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333c:	4a17      	ldr	r2, [pc, #92]	@ (800339c <HAL_UART_MspInit+0xe0>)
 800333e:	f043 0302 	orr.w	r3, r3, #2
 8003342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003344:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_UART_MspInit+0xe0>)
 8003346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8003350:	2310      	movs	r3, #16
 8003352:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003354:	2302      	movs	r3, #2
 8003356:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335c:	2300      	movs	r3, #0
 800335e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003360:	2307      	movs	r3, #7
 8003362:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8003364:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003368:	4619      	mov	r1, r3
 800336a:	480d      	ldr	r0, [pc, #52]	@ (80033a0 <HAL_UART_MspInit+0xe4>)
 800336c:	f000 fac4 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	2300      	movs	r3, #0
 800337e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003380:	2307      	movs	r3, #7
 8003382:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8003384:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003388:	4619      	mov	r1, r3
 800338a:	4806      	ldr	r0, [pc, #24]	@ (80033a4 <HAL_UART_MspInit+0xe8>)
 800338c:	f000 fab4 	bl	80038f8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003390:	bf00      	nop
 8003392:	3770      	adds	r7, #112	@ 0x70
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40013800 	.word	0x40013800
 800339c:	40021000 	.word	0x40021000
 80033a0:	48000800 	.word	0x48000800
 80033a4:	48000400 	.word	0x48000400

080033a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <NMI_Handler+0x4>

080033b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <HardFault_Handler+0x4>

080033b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <MemManage_Handler+0x4>

080033c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <BusFault_Handler+0x4>

080033c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <UsageFault_Handler+0x4>

080033d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033fe:	f000 f957 	bl	80036b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}

08003406 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  return 1;
 800340a:	2301      	movs	r3, #1
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <_kill>:

int _kill(int pid, int sig)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003420:	f005 fcda 	bl	8008dd8 <__errno>
 8003424:	4603      	mov	r3, r0
 8003426:	2216      	movs	r2, #22
 8003428:	601a      	str	r2, [r3, #0]
  return -1;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <_exit>:

void _exit (int status)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800343e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffe7 	bl	8003416 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <_exit+0x12>

0800344c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e00a      	b.n	8003474 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800345e:	f3af 8000 	nop.w
 8003462:	4601      	mov	r1, r0
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	60ba      	str	r2, [r7, #8]
 800346a:	b2ca      	uxtb	r2, r1
 800346c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3301      	adds	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	dbf0      	blt.n	800345e <_read+0x12>
  }

  return len;
 800347c:	687b      	ldr	r3, [r7, #4]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e009      	b.n	80034ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	60ba      	str	r2, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dbf1      	blt.n	8003498 <_write+0x12>
  }
  return len;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_close>:

int _close(int file)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034e6:	605a      	str	r2, [r3, #4]
  return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <_isatty>:

int _isatty(int file)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003530:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <_sbrk+0x5c>)
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <_sbrk+0x60>)
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800353c:	4b13      	ldr	r3, [pc, #76]	@ (800358c <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <_sbrk+0x64>)
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <_sbrk+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <_sbrk+0x64>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003558:	f005 fc3e 	bl	8008dd8 <__errno>
 800355c:	4603      	mov	r3, r0
 800355e:	220c      	movs	r2, #12
 8003560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003566:	e009      	b.n	800357c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003568:	4b08      	ldr	r3, [pc, #32]	@ (800358c <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	4a05      	ldr	r2, [pc, #20]	@ (800358c <_sbrk+0x64>)
 8003578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20008000 	.word	0x20008000
 8003588:	00000400 	.word	0x00000400
 800358c:	2000065c 	.word	0x2000065c
 8003590:	200007b0 	.word	0x200007b0

08003594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <SystemInit+0x20>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	4a05      	ldr	r2, [pc, #20]	@ (80035b4 <SystemInit+0x20>)
 80035a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 80035b8:	480d      	ldr	r0, [pc, #52]	@ (80035f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80035bc:	f7ff ffea 	bl	8003594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c0:	480c      	ldr	r0, [pc, #48]	@ (80035f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80035c2:	490d      	ldr	r1, [pc, #52]	@ (80035f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035c4:	4a0d      	ldr	r2, [pc, #52]	@ (80035fc <LoopForever+0xe>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80035c8:	e002      	b.n	80035d0 <LoopCopyDataInit>

080035ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ce:	3304      	adds	r3, #4

080035d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d4:	d3f9      	bcc.n	80035ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80035d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003604 <LoopForever+0x16>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035dc:	e001      	b.n	80035e2 <LoopFillZerobss>

080035de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e0:	3204      	adds	r2, #4

080035e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e4:	d3fb      	bcc.n	80035de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80035e6:	f005 fbfd 	bl	8008de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ea:	f7fe fe9d 	bl	8002328 <main>

080035ee <LoopForever>:

LoopForever:
    b LoopForever
 80035ee:	e7fe      	b.n	80035ee <LoopForever>
 ldr   r0, =_estack
 80035f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80035f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80035fc:	0800c914 	.word	0x0800c914
  ldr r2, =_sbss
 8003600:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003604:	200007b0 	.word	0x200007b0

08003608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC1_2_IRQHandler>

0800360a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 f93d 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800361a:	200f      	movs	r0, #15
 800361c:	f000 f80e 	bl	800363c <HAL_InitTick>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	71fb      	strb	r3, [r7, #7]
 800362a:	e001      	b.n	8003630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800362c:	f7ff fc90 	bl	8002f50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003630:	79fb      	ldrb	r3, [r7, #7]

}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003648:	4b16      	ldr	r3, [pc, #88]	@ (80036a4 <HAL_InitTick+0x68>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d022      	beq.n	8003696 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003650:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <HAL_InitTick+0x6c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <HAL_InitTick+0x68>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800365c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f93a 	bl	80038de <HAL_SYSTICK_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10f      	bne.n	8003690 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	d809      	bhi.n	800368a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003676:	2200      	movs	r2, #0
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800367e:	f000 f914 	bl	80038aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <HAL_InitTick+0x70>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e007      	b.n	800369a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e004      	b.n	800369a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e001      	b.n	800369a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20000028 	.word	0x20000028
 80036a8:	20000020 	.word	0x20000020
 80036ac:	20000024 	.word	0x20000024

080036b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <HAL_IncTick+0x1c>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_IncTick+0x20>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	4a03      	ldr	r2, [pc, #12]	@ (80036cc <HAL_IncTick+0x1c>)
 80036c0:	6013      	str	r3, [r2, #0]
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	20000660 	.word	0x20000660
 80036d0:	20000028 	.word	0x20000028

080036d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return uwTick;
 80036d8:	4b03      	ldr	r3, [pc, #12]	@ (80036e8 <HAL_GetTick+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000660 	.word	0x20000660

080036ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036f4:	f7ff ffee 	bl	80036d4 <HAL_GetTick>
 80036f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003704:	d004      	beq.n	8003710 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003706:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_Delay+0x40>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003710:	bf00      	nop
 8003712:	f7ff ffdf 	bl	80036d4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	429a      	cmp	r2, r3
 8003720:	d8f7      	bhi.n	8003712 <HAL_Delay+0x26>
  {
  }
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000028 	.word	0x20000028

08003730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003740:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800375c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	@ (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <__NVIC_GetPriorityGrouping+0x18>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0307 	and.w	r3, r3, #7
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	@ (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	@ (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
         );
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003860:	d301      	bcc.n	8003866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003866:	4a0a      	ldr	r2, [pc, #40]	@ (8003890 <SysTick_Config+0x40>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386e:	210f      	movs	r1, #15
 8003870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003874:	f7ff ff8e 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <SysTick_Config+0x40>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	@ (8003890 <SysTick_Config+0x40>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff47 	bl	8003730 <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff5e 	bl	8003778 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff90 	bl	80037e8 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5f 	bl	8003794 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffb2 	bl	8003850 <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003906:	e15a      	b.n	8003bbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	4013      	ands	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 814c 	beq.w	8003bb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d005      	beq.n	8003938 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003934:	2b02      	cmp	r3, #2
 8003936:	d130      	bne.n	800399a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800396e:	2201      	movs	r2, #1
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4013      	ands	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f003 0201 	and.w	r2, r3, #1
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d017      	beq.n	80039d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	2203      	movs	r2, #3
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d123      	bne.n	8003a2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	08da      	lsrs	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3208      	adds	r2, #8
 80039ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	08da      	lsrs	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3208      	adds	r2, #8
 8003a24:	6939      	ldr	r1, [r7, #16]
 8003a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	2203      	movs	r2, #3
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0203 	and.w	r2, r3, #3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80a6 	beq.w	8003bb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <HAL_GPIO_Init+0x2e4>)
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a70:	4a5a      	ldr	r2, [pc, #360]	@ (8003bdc <HAL_GPIO_Init+0x2e4>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a78:	4b58      	ldr	r3, [pc, #352]	@ (8003bdc <HAL_GPIO_Init+0x2e4>)
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a84:	4a56      	ldr	r2, [pc, #344]	@ (8003be0 <HAL_GPIO_Init+0x2e8>)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	220f      	movs	r2, #15
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003aae:	d01f      	beq.n	8003af0 <HAL_GPIO_Init+0x1f8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8003be4 <HAL_GPIO_Init+0x2ec>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d019      	beq.n	8003aec <HAL_GPIO_Init+0x1f4>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a4b      	ldr	r2, [pc, #300]	@ (8003be8 <HAL_GPIO_Init+0x2f0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_GPIO_Init+0x1f0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bec <HAL_GPIO_Init+0x2f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_GPIO_Init+0x1ec>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a49      	ldr	r2, [pc, #292]	@ (8003bf0 <HAL_GPIO_Init+0x2f8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <HAL_GPIO_Init+0x1e8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a48      	ldr	r2, [pc, #288]	@ (8003bf4 <HAL_GPIO_Init+0x2fc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_GPIO_Init+0x1e4>
 8003ad8:	2305      	movs	r3, #5
 8003ada:	e00a      	b.n	8003af2 <HAL_GPIO_Init+0x1fa>
 8003adc:	2306      	movs	r3, #6
 8003ade:	e008      	b.n	8003af2 <HAL_GPIO_Init+0x1fa>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	e006      	b.n	8003af2 <HAL_GPIO_Init+0x1fa>
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e004      	b.n	8003af2 <HAL_GPIO_Init+0x1fa>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e002      	b.n	8003af2 <HAL_GPIO_Init+0x1fa>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <HAL_GPIO_Init+0x1fa>
 8003af0:	2300      	movs	r3, #0
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	f002 0203 	and.w	r2, r2, #3
 8003af8:	0092      	lsls	r2, r2, #2
 8003afa:	4093      	lsls	r3, r2
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b02:	4937      	ldr	r1, [pc, #220]	@ (8003be0 <HAL_GPIO_Init+0x2e8>)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b34:	4a30      	ldr	r2, [pc, #192]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b5e:	4a26      	ldr	r2, [pc, #152]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b64:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b88:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bb2:	4a11      	ldr	r2, [pc, #68]	@ (8003bf8 <HAL_GPIO_Init+0x300>)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f47f ae9d 	bne.w	8003908 <HAL_GPIO_Init+0x10>
  }
}
 8003bce:	bf00      	nop
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40010000 	.word	0x40010000
 8003be4:	48000400 	.word	0x48000400
 8003be8:	48000800 	.word	0x48000800
 8003bec:	48000c00 	.word	0x48000c00
 8003bf0:	48001000 	.word	0x48001000
 8003bf4:	48001400 	.word	0x48001400
 8003bf8:	40010400 	.word	0x40010400

08003bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c0c:	787b      	ldrb	r3, [r7, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c18:	e002      	b.n	8003c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d141      	bne.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c46:	d131      	bne.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c48:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c4e:	4a46      	ldr	r2, [pc, #280]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c58:	4b43      	ldr	r3, [pc, #268]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c60:	4a41      	ldr	r2, [pc, #260]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c68:	4b40      	ldr	r3, [pc, #256]	@ (8003d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2232      	movs	r2, #50	@ 0x32
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	4a3f      	ldr	r2, [pc, #252]	@ (8003d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	0c9b      	lsrs	r3, r3, #18
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c7e:	e002      	b.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c86:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c92:	d102      	bne.n	8003c9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f2      	bne.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c9a:	4b33      	ldr	r3, [pc, #204]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d158      	bne.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e057      	b.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cac:	4b2e      	ldr	r3, [pc, #184]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cbc:	e04d      	b.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc4:	d141      	bne.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cc6:	4b28      	ldr	r3, [pc, #160]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd2:	d131      	bne.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd4:	4b24      	ldr	r3, [pc, #144]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cda:	4a23      	ldr	r2, [pc, #140]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ce4:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cec:	4a1e      	ldr	r2, [pc, #120]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2232      	movs	r2, #50	@ 0x32
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8003d70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	0c9b      	lsrs	r3, r3, #18
 8003d06:	3301      	adds	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d0a:	e002      	b.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d12:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1e:	d102      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f2      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d26:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d32:	d112      	bne.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e011      	b.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d48:	e007      	b.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d4a:	4b07      	ldr	r3, [pc, #28]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d52:	4a05      	ldr	r2, [pc, #20]	@ (8003d68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	20000020 	.word	0x20000020
 8003d70:	431bde83 	.word	0x431bde83

08003d74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d78:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a04      	ldr	r2, [pc, #16]	@ (8003d90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d82:	6093      	str	r3, [r2, #8]
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40007000 	.word	0x40007000

08003d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e2fe      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d075      	beq.n	8003e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db2:	4b97      	ldr	r3, [pc, #604]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dbc:	4b94      	ldr	r3, [pc, #592]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d102      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3e>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d002      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x44>
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d10b      	bne.n	8003df0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	4b8d      	ldr	r3, [pc, #564]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05b      	beq.n	8003e9c <HAL_RCC_OscConfig+0x108>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d157      	bne.n	8003e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e2d9      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x74>
 8003dfa:	4b85      	ldr	r3, [pc, #532]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a84      	ldr	r2, [pc, #528]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xb0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x98>
 8003e12:	4b7f      	ldr	r3, [pc, #508]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a7e      	ldr	r2, [pc, #504]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7b      	ldr	r2, [pc, #492]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	4b78      	ldr	r3, [pc, #480]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a77      	ldr	r2, [pc, #476]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b75      	ldr	r3, [pc, #468]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a74      	ldr	r2, [pc, #464]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7ff fc42 	bl	80036d4 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7ff fc3e 	bl	80036d4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	@ 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e29e      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xc0>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7ff fc2e 	bl	80036d4 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7ff fc2a 	bl	80036d4 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	@ 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e28a      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e8e:	4b60      	ldr	r3, [pc, #384]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0xe8>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d075      	beq.n	8003f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eaa:	4b59      	ldr	r3, [pc, #356]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb4:	4b56      	ldr	r3, [pc, #344]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d102      	bne.n	8003eca <HAL_RCC_OscConfig+0x136>
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x13c>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d11f      	bne.n	8003f10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x154>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e25d      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	061b      	lsls	r3, r3, #24
 8003ef6:	4946      	ldr	r1, [pc, #280]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003efc:	4b45      	ldr	r3, [pc, #276]	@ (8004014 <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fb9b 	bl	800363c <HAL_InitTick>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d043      	beq.n	8003f94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e249      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d023      	beq.n	8003f60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f18:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3c      	ldr	r2, [pc, #240]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7ff fbd6 	bl	80036d4 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7ff fbd2 	bl	80036d4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e232      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f3e:	4b34      	ldr	r3, [pc, #208]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4a:	4b31      	ldr	r3, [pc, #196]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	492d      	ldr	r1, [pc, #180]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
 8003f5e:	e01a      	b.n	8003f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f60:	4b2b      	ldr	r3, [pc, #172]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2a      	ldr	r2, [pc, #168]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7ff fbb2 	bl	80036d4 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7ff fbae 	bl	80036d4 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e20e      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f86:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1e0>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d041      	beq.n	8004026 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01c      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b19      	ldr	r3, [pc, #100]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb0:	4a17      	ldr	r2, [pc, #92]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7ff fb8b 	bl	80036d4 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc2:	f7ff fb87 	bl	80036d4 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e1e7      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0ef      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x22e>
 8003fe2:	e020      	b.n	8004026 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fea:	4a09      	ldr	r2, [pc, #36]	@ (8004010 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7ff fb6e 	bl	80036d4 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ffa:	e00d      	b.n	8004018 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffc:	f7ff fb6a 	bl	80036d4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d906      	bls.n	8004018 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1ca      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004018:	4b8c      	ldr	r3, [pc, #560]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ea      	bne.n	8003ffc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80a6 	beq.w	8004180 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004038:	4b84      	ldr	r3, [pc, #528]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_OscConfig+0x2b4>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x2b6>
 8004048:	2300      	movs	r3, #0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00d      	beq.n	800406a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	4b7f      	ldr	r3, [pc, #508]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004052:	4a7e      	ldr	r2, [pc, #504]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004058:	6593      	str	r3, [r2, #88]	@ 0x58
 800405a:	4b7c      	ldr	r3, [pc, #496]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 800405c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004066:	2301      	movs	r3, #1
 8004068:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406a:	4b79      	ldr	r3, [pc, #484]	@ (8004250 <HAL_RCC_OscConfig+0x4bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d118      	bne.n	80040a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004076:	4b76      	ldr	r3, [pc, #472]	@ (8004250 <HAL_RCC_OscConfig+0x4bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a75      	ldr	r2, [pc, #468]	@ (8004250 <HAL_RCC_OscConfig+0x4bc>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004082:	f7ff fb27 	bl	80036d4 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7ff fb23 	bl	80036d4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e183      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409c:	4b6c      	ldr	r3, [pc, #432]	@ (8004250 <HAL_RCC_OscConfig+0x4bc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d108      	bne.n	80040c2 <HAL_RCC_OscConfig+0x32e>
 80040b0:	4b66      	ldr	r3, [pc, #408]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b6:	4a65      	ldr	r2, [pc, #404]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040c0:	e024      	b.n	800410c <HAL_RCC_OscConfig+0x378>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d110      	bne.n	80040ec <HAL_RCC_OscConfig+0x358>
 80040ca:	4b60      	ldr	r3, [pc, #384]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d0:	4a5e      	ldr	r2, [pc, #376]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040da:	4b5c      	ldr	r3, [pc, #368]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e0:	4a5a      	ldr	r2, [pc, #360]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ea:	e00f      	b.n	800410c <HAL_RCC_OscConfig+0x378>
 80040ec:	4b57      	ldr	r3, [pc, #348]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	4a56      	ldr	r2, [pc, #344]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040fc:	4b53      	ldr	r3, [pc, #332]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	4a52      	ldr	r2, [pc, #328]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d016      	beq.n	8004142 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7ff fade 	bl	80036d4 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7ff fada 	bl	80036d4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e138      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	4b46      	ldr	r3, [pc, #280]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ed      	beq.n	800411c <HAL_RCC_OscConfig+0x388>
 8004140:	e015      	b.n	800416e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7ff fac7 	bl	80036d4 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7ff fac3 	bl	80036d4 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e121      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	4b3a      	ldr	r3, [pc, #232]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ed      	bne.n	800414a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800416e:	7ffb      	ldrb	r3, [r7, #31]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b35      	ldr	r3, [pc, #212]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004178:	4a34      	ldr	r2, [pc, #208]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03c      	beq.n	8004206 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01c      	beq.n	80041ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004194:	4b2d      	ldr	r3, [pc, #180]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800419a:	4a2c      	ldr	r2, [pc, #176]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7ff fa96 	bl	80036d4 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ac:	f7ff fa92 	bl	80036d4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0f2      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041be:	4b23      	ldr	r3, [pc, #140]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80041c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ef      	beq.n	80041ac <HAL_RCC_OscConfig+0x418>
 80041cc:	e01b      	b.n	8004206 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ce:	4b1f      	ldr	r3, [pc, #124]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7ff fa79 	bl	80036d4 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e6:	f7ff fa75 	bl	80036d4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0d5      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041f8:	4b14      	ldr	r3, [pc, #80]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 80041fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ef      	bne.n	80041e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 80c9 	beq.w	80043a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004210:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b0c      	cmp	r3, #12
 800421a:	f000 8083 	beq.w	8004324 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d15e      	bne.n	80042e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004226:	4b09      	ldr	r3, [pc, #36]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a08      	ldr	r2, [pc, #32]	@ (800424c <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7ff fa4f 	bl	80036d4 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004238:	e00c      	b.n	8004254 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423a:	f7ff fa4b 	bl	80036d4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d905      	bls.n	8004254 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0ab      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
 800424c:	40021000 	.word	0x40021000
 8004250:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004254:	4b55      	ldr	r3, [pc, #340]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ec      	bne.n	800423a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004260:	4b52      	ldr	r3, [pc, #328]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	4b52      	ldr	r3, [pc, #328]	@ (80043b0 <HAL_RCC_OscConfig+0x61c>)
 8004266:	4013      	ands	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6a11      	ldr	r1, [r2, #32]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004270:	3a01      	subs	r2, #1
 8004272:	0112      	lsls	r2, r2, #4
 8004274:	4311      	orrs	r1, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800427a:	0212      	lsls	r2, r2, #8
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004282:	0852      	lsrs	r2, r2, #1
 8004284:	3a01      	subs	r2, #1
 8004286:	0552      	lsls	r2, r2, #21
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800428e:	0852      	lsrs	r2, r2, #1
 8004290:	3a01      	subs	r2, #1
 8004292:	0652      	lsls	r2, r2, #25
 8004294:	4311      	orrs	r1, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800429a:	06d2      	lsls	r2, r2, #27
 800429c:	430a      	orrs	r2, r1
 800429e:	4943      	ldr	r1, [pc, #268]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a4:	4b41      	ldr	r3, [pc, #260]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a40      	ldr	r2, [pc, #256]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042b0:	4b3e      	ldr	r3, [pc, #248]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a3d      	ldr	r2, [pc, #244]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7ff fa0a 	bl	80036d4 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c4:	f7ff fa06 	bl	80036d4 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e066      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d6:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x530>
 80042e2:	e05e      	b.n	80043a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e4:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a30      	ldr	r2, [pc, #192]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 80042ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7ff f9f0 	bl	80036d4 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7ff f9ec 	bl	80036d4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e04c      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800430a:	4b28      	ldr	r3, [pc, #160]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004316:	4b25      	ldr	r3, [pc, #148]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	4924      	ldr	r1, [pc, #144]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 800431c:	4b25      	ldr	r3, [pc, #148]	@ (80043b4 <HAL_RCC_OscConfig+0x620>)
 800431e:	4013      	ands	r3, r2
 8004320:	60cb      	str	r3, [r1, #12]
 8004322:	e03e      	b.n	80043a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e039      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004330:	4b1e      	ldr	r3, [pc, #120]	@ (80043ac <HAL_RCC_OscConfig+0x618>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d12c      	bne.n	800439e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	3b01      	subs	r3, #1
 8004350:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d123      	bne.n	800439e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d11b      	bne.n	800439e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d113      	bne.n	800439e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d109      	bne.n	800439e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	019f800c 	.word	0x019f800c
 80043b4:	feeefffc 	.word	0xfeeefffc

080043b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e11e      	b.n	800460e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d0:	4b91      	ldr	r3, [pc, #580]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d910      	bls.n	8004400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b8e      	ldr	r3, [pc, #568]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 020f 	bic.w	r2, r3, #15
 80043e6:	498c      	ldr	r1, [pc, #560]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e106      	b.n	800460e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d073      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d129      	bne.n	8004468 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004414:	4b81      	ldr	r3, [pc, #516]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0f4      	b.n	800460e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004424:	f000 f99e 	bl	8004764 <RCC_GetSysClockFreqFromPLLSource>
 8004428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4a7c      	ldr	r2, [pc, #496]	@ (8004620 <HAL_RCC_ClockConfig+0x268>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d93f      	bls.n	80044b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004432:	4b7a      	ldr	r3, [pc, #488]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004446:	2b00      	cmp	r3, #0
 8004448:	d033      	beq.n	80044b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800444e:	2b00      	cmp	r3, #0
 8004450:	d12f      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004452:	4b72      	ldr	r3, [pc, #456]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800445a:	4a70      	ldr	r2, [pc, #448]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 800445c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004462:	2380      	movs	r3, #128	@ 0x80
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e024      	b.n	80044b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d107      	bne.n	8004480 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004470:	4b6a      	ldr	r3, [pc, #424]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0c6      	b.n	800460e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004480:	4b66      	ldr	r3, [pc, #408]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0be      	b.n	800460e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004490:	f000 f8ce 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 8004494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4a61      	ldr	r2, [pc, #388]	@ (8004620 <HAL_RCC_ClockConfig+0x268>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d909      	bls.n	80044b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800449e:	4b5f      	ldr	r3, [pc, #380]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044a6:	4a5d      	ldr	r2, [pc, #372]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80044a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80044ae:	2380      	movs	r3, #128	@ 0x80
 80044b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044b2:	4b5a      	ldr	r3, [pc, #360]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f023 0203 	bic.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4957      	ldr	r1, [pc, #348]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c4:	f7ff f906 	bl	80036d4 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7ff f902 	bl	80036d4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e095      	b.n	800460e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	4b4e      	ldr	r3, [pc, #312]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 020c 	and.w	r2, r3, #12
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1eb      	bne.n	80044cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d023      	beq.n	8004548 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800450c:	4b43      	ldr	r3, [pc, #268]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a42      	ldr	r2, [pc, #264]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004512:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004516:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004524:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800452c:	4a3b      	ldr	r2, [pc, #236]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 800452e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b39      	ldr	r3, [pc, #228]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4936      	ldr	r1, [pc, #216]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004542:	4313      	orrs	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
 8004546:	e008      	b.n	800455a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b80      	cmp	r3, #128	@ 0x80
 800454c:	d105      	bne.n	800455a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800454e:	4b33      	ldr	r3, [pc, #204]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	4a32      	ldr	r2, [pc, #200]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 8004554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004558:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800455a:	4b2f      	ldr	r3, [pc, #188]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d21d      	bcs.n	80045a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004568:	4b2b      	ldr	r3, [pc, #172]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 020f 	bic.w	r2, r3, #15
 8004570:	4929      	ldr	r1, [pc, #164]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004578:	f7ff f8ac 	bl	80036d4 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	e00a      	b.n	8004596 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004580:	f7ff f8a8 	bl	80036d4 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e03b      	b.n	800460e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <HAL_RCC_ClockConfig+0x260>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1ed      	bne.n	8004580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b0:	4b1a      	ldr	r3, [pc, #104]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4917      	ldr	r1, [pc, #92]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ce:	4b13      	ldr	r3, [pc, #76]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	490f      	ldr	r1, [pc, #60]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e2:	f000 f825 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4b0c      	ldr	r3, [pc, #48]	@ (800461c <HAL_RCC_ClockConfig+0x264>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	490c      	ldr	r1, [pc, #48]	@ (8004624 <HAL_RCC_ClockConfig+0x26c>)
 80045f4:	5ccb      	ldrb	r3, [r1, r3]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004628 <HAL_RCC_ClockConfig+0x270>)
 8004600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <HAL_RCC_ClockConfig+0x274>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f818 	bl	800363c <HAL_InitTick>
 800460c:	4603      	mov	r3, r0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40022000 	.word	0x40022000
 800461c:	40021000 	.word	0x40021000
 8004620:	04c4b400 	.word	0x04c4b400
 8004624:	0800c49c 	.word	0x0800c49c
 8004628:	20000020 	.word	0x20000020
 800462c:	20000024 	.word	0x20000024

08004630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004636:	4b2c      	ldr	r3, [pc, #176]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b04      	cmp	r3, #4
 8004640:	d102      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004642:	4b2a      	ldr	r3, [pc, #168]	@ (80046ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e047      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004648:	4b27      	ldr	r3, [pc, #156]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b08      	cmp	r3, #8
 8004652:	d102      	bne.n	800465a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004654:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e03e      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800465a:	4b23      	ldr	r3, [pc, #140]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d136      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004666:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004670:	4b1d      	ldr	r3, [pc, #116]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3301      	adds	r3, #1
 800467c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d10c      	bne.n	800469e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004684:	4a1a      	ldr	r2, [pc, #104]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	4a16      	ldr	r2, [pc, #88]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800468e:	68d2      	ldr	r2, [r2, #12]
 8004690:	0a12      	lsrs	r2, r2, #8
 8004692:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	617b      	str	r3, [r7, #20]
      break;
 800469c:	e00c      	b.n	80046b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800469e:	4a13      	ldr	r2, [pc, #76]	@ (80046ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	4a10      	ldr	r2, [pc, #64]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a8:	68d2      	ldr	r2, [r2, #12]
 80046aa:	0a12      	lsrs	r2, r2, #8
 80046ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
      break;
 80046b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0e5b      	lsrs	r3, r3, #25
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	3301      	adds	r3, #1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e001      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046d8:	693b      	ldr	r3, [r7, #16]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	00f42400 	.word	0x00f42400
 80046f0:	007a1200 	.word	0x007a1200

080046f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f8:	4b03      	ldr	r3, [pc, #12]	@ (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000020 	.word	0x20000020

0800470c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4904      	ldr	r1, [pc, #16]	@ (8004734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800c4ac 	.word	0x0800c4ac

08004738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800473c:	f7ff ffda 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b06      	ldr	r3, [pc, #24]	@ (800475c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	0adb      	lsrs	r3, r3, #11
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4904      	ldr	r1, [pc, #16]	@ (8004760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	0800c4ac 	.word	0x0800c4ac

08004764 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800476a:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004774:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	3301      	adds	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d10c      	bne.n	80047a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004788:	4a17      	ldr	r2, [pc, #92]	@ (80047e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	4a14      	ldr	r2, [pc, #80]	@ (80047e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004792:	68d2      	ldr	r2, [r2, #12]
 8004794:	0a12      	lsrs	r2, r2, #8
 8004796:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	617b      	str	r3, [r7, #20]
    break;
 80047a0:	e00c      	b.n	80047bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a2:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	4a0e      	ldr	r2, [pc, #56]	@ (80047e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ac:	68d2      	ldr	r2, [r2, #12]
 80047ae:	0a12      	lsrs	r2, r2, #8
 80047b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
    break;
 80047ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047bc:	4b09      	ldr	r3, [pc, #36]	@ (80047e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	0e5b      	lsrs	r3, r3, #25
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	3301      	adds	r3, #1
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80047d6:	687b      	ldr	r3, [r7, #4]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40021000 	.word	0x40021000
 80047e8:	007a1200 	.word	0x007a1200
 80047ec:	00f42400 	.word	0x00f42400

080047f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047f8:	2300      	movs	r3, #0
 80047fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047fc:	2300      	movs	r3, #0
 80047fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8098 	beq.w	800493e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800480e:	2300      	movs	r3, #0
 8004810:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004812:	4b43      	ldr	r3, [pc, #268]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10d      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	4b40      	ldr	r3, [pc, #256]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004822:	4a3f      	ldr	r2, [pc, #252]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004828:	6593      	str	r3, [r2, #88]	@ 0x58
 800482a:	4b3d      	ldr	r3, [pc, #244]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004836:	2301      	movs	r3, #1
 8004838:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483a:	4b3a      	ldr	r3, [pc, #232]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a39      	ldr	r2, [pc, #228]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004844:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004846:	f7fe ff45 	bl	80036d4 <HAL_GetTick>
 800484a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800484c:	e009      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484e:	f7fe ff41 	bl	80036d4 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d902      	bls.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	74fb      	strb	r3, [r7, #19]
        break;
 8004860:	e005      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004862:	4b30      	ldr	r3, [pc, #192]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0ef      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d159      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004874:	4b2a      	ldr	r3, [pc, #168]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800487e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01e      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	429a      	cmp	r2, r3
 800488e:	d019      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004890:	4b23      	ldr	r3, [pc, #140]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800489a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800489c:	4b20      	ldr	r3, [pc, #128]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048bc:	4a18      	ldr	r2, [pc, #96]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fe ff01 	bl	80036d4 <HAL_GetTick>
 80048d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d4:	e00b      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fe fefd 	bl	80036d4 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d902      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	74fb      	strb	r3, [r7, #19]
            break;
 80048ec:	e006      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ec      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004902:	4b07      	ldr	r3, [pc, #28]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	4903      	ldr	r1, [pc, #12]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004918:	e008      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800491a:	7cfb      	ldrb	r3, [r7, #19]
 800491c:	74bb      	strb	r3, [r7, #18]
 800491e:	e005      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004920:	40021000 	.word	0x40021000
 8004924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800492c:	7c7b      	ldrb	r3, [r7, #17]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d105      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004932:	4ba6      	ldr	r3, [pc, #664]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004936:	4aa5      	ldr	r2, [pc, #660]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800493c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800494a:	4ba0      	ldr	r3, [pc, #640]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004950:	f023 0203 	bic.w	r2, r3, #3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	499c      	ldr	r1, [pc, #624]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800496c:	4b97      	ldr	r3, [pc, #604]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f023 020c 	bic.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4994      	ldr	r1, [pc, #592]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800498e:	4b8f      	ldr	r3, [pc, #572]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004994:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	498b      	ldr	r1, [pc, #556]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049b0:	4b86      	ldr	r3, [pc, #536]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	4983      	ldr	r1, [pc, #524]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049d2:	4b7e      	ldr	r3, [pc, #504]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	497a      	ldr	r1, [pc, #488]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049f4:	4b75      	ldr	r3, [pc, #468]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	4972      	ldr	r1, [pc, #456]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a16:	4b6d      	ldr	r3, [pc, #436]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4969      	ldr	r1, [pc, #420]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a38:	4b64      	ldr	r3, [pc, #400]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	4961      	ldr	r1, [pc, #388]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	4958      	ldr	r1, [pc, #352]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a7c:	4b53      	ldr	r3, [pc, #332]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	4950      	ldr	r1, [pc, #320]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aa6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ab4:	4b45      	ldr	r3, [pc, #276]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac2:	4942      	ldr	r1, [pc, #264]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ade:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004aec:	4b37      	ldr	r3, [pc, #220]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	4934      	ldr	r1, [pc, #208]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a2e      	ldr	r2, [pc, #184]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d015      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b24:	4b29      	ldr	r3, [pc, #164]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b32:	4926      	ldr	r1, [pc, #152]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b42:	d105      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b44:	4b21      	ldr	r3, [pc, #132]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a20      	ldr	r2, [pc, #128]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d015      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	4918      	ldr	r1, [pc, #96]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b7c:	4b13      	ldr	r3, [pc, #76]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a12      	ldr	r2, [pc, #72]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d015      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b94:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba2:	490a      	ldr	r1, [pc, #40]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004bb4:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e09d      	b.n	8004d1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bf2:	d009      	beq.n	8004c08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	61da      	str	r2, [r3, #28]
 8004bfa:	e005      	b.n	8004c08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fe f9b8 	bl	8002f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c48:	d902      	bls.n	8004c50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e002      	b.n	8004c56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c5e:	d007      	beq.n	8004c70 <HAL_SPI_Init+0xa0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb2:	ea42 0103 	orr.w	r1, r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	f003 0204 	and.w	r2, r3, #4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cec:	ea42 0103 	orr.w	r1, r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69da      	ldr	r2, [r3, #28]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b088      	sub	sp, #32
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d36:	f7fe fccd 	bl	80036d4 <HAL_GetTick>
 8004d3a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d001      	beq.n	8004d50 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e15c      	b.n	800500a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_SPI_Transmit+0x36>
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e154      	b.n	800500a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_SPI_Transmit+0x48>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e14d      	b.n	800500a <HAL_SPI_Transmit+0x2e4>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2203      	movs	r2, #3
 8004d7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc0:	d10f      	bne.n	8004de2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d007      	beq.n	8004e00 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e08:	d952      	bls.n	8004eb0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_Transmit+0xf2>
 8004e12:	8b7b      	ldrh	r3, [r7, #26]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d145      	bne.n	8004ea4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	881a      	ldrh	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e3c:	e032      	b.n	8004ea4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d112      	bne.n	8004e72 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	881a      	ldrh	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5c:	1c9a      	adds	r2, r3, #2
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e70:	e018      	b.n	8004ea4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e72:	f7fe fc2f 	bl	80036d4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d803      	bhi.n	8004e8a <HAL_SPI_Transmit+0x164>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e88:	d102      	bne.n	8004e90 <HAL_SPI_Transmit+0x16a>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0b2      	b.n	800500a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1c7      	bne.n	8004e3e <HAL_SPI_Transmit+0x118>
 8004eae:	e083      	b.n	8004fb8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_SPI_Transmit+0x198>
 8004eb8:	8b7b      	ldrh	r3, [r7, #26]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d177      	bne.n	8004fae <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d912      	bls.n	8004eee <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ecc:	881a      	ldrh	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	1c9a      	adds	r2, r3, #2
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b02      	subs	r3, #2
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004eec:	e05f      	b.n	8004fae <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f14:	e04b      	b.n	8004fae <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d12b      	bne.n	8004f7c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d912      	bls.n	8004f54 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	881a      	ldrh	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3e:	1c9a      	adds	r2, r3, #2
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b02      	subs	r3, #2
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f52:	e02c      	b.n	8004fae <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	7812      	ldrb	r2, [r2, #0]
 8004f60:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f7a:	e018      	b.n	8004fae <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f7c:	f7fe fbaa 	bl	80036d4 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d803      	bhi.n	8004f94 <HAL_SPI_Transmit+0x26e>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f92:	d102      	bne.n	8004f9a <HAL_SPI_Transmit+0x274>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e02d      	b.n	800500a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ae      	bne.n	8004f16 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	6839      	ldr	r1, [r7, #0]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fcf5 	bl	80059ac <SPI_EndRxTxTransaction>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005008:	2300      	movs	r3, #0
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b088      	sub	sp, #32
 8005016:	af02      	add	r7, sp, #8
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b01      	cmp	r3, #1
 800502c:	d001      	beq.n	8005032 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
 8005030:	e123      	b.n	800527a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_Receive+0x2c>
 8005038:	88fb      	ldrh	r3, [r7, #6]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e11b      	b.n	800527a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800504a:	d112      	bne.n	8005072 <HAL_SPI_Receive+0x60>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10e      	bne.n	8005072 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2204      	movs	r2, #4
 8005058:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800505c:	88fa      	ldrh	r2, [r7, #6]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f90a 	bl	8005282 <HAL_SPI_TransmitReceive>
 800506e:	4603      	mov	r3, r0
 8005070:	e103      	b.n	800527a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005072:	f7fe fb2f 	bl	80036d4 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_SPI_Receive+0x74>
 8005082:	2302      	movs	r3, #2
 8005084:	e0f9      	b.n	800527a <HAL_SPI_Receive+0x268>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2204      	movs	r2, #4
 8005092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	88fa      	ldrh	r2, [r7, #6]
 80050a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050d8:	d908      	bls.n	80050ec <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	e007      	b.n	80050fc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050fa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005104:	d10f      	bne.n	8005126 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005114:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005124:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	d007      	beq.n	8005144 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005142:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800514c:	d875      	bhi.n	800523a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800514e:	e037      	b.n	80051c0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	d117      	bne.n	800518e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f103 020c 	add.w	r2, r3, #12
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800518c:	e018      	b.n	80051c0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800518e:	f7fe faa1 	bl	80036d4 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d803      	bhi.n	80051a6 <HAL_SPI_Receive+0x194>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_Receive+0x19a>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e05c      	b.n	800527a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1c1      	bne.n	8005150 <HAL_SPI_Receive+0x13e>
 80051cc:	e03b      	b.n	8005246 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d115      	bne.n	8005208 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	b292      	uxth	r2, r2
 80051e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005206:	e018      	b.n	800523a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005208:	f7fe fa64 	bl	80036d4 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d803      	bhi.n	8005220 <HAL_SPI_Receive+0x20e>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800521e:	d102      	bne.n	8005226 <HAL_SPI_Receive+0x214>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e01f      	b.n	800527a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1c3      	bne.n	80051ce <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fb56 	bl	80058fc <SPI_EndRxTransaction>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2220      	movs	r2, #32
 800525a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08a      	sub	sp, #40	@ 0x28
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005290:	2301      	movs	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005294:	f7fe fa1e 	bl	80036d4 <HAL_GetTick>
 8005298:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052a8:	887b      	ldrh	r3, [r7, #2]
 80052aa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80052ac:	887b      	ldrh	r3, [r7, #2]
 80052ae:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052b0:	7ffb      	ldrb	r3, [r7, #31]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d00c      	beq.n	80052d0 <HAL_SPI_TransmitReceive+0x4e>
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052bc:	d106      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d102      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x4a>
 80052c6:	7ffb      	ldrb	r3, [r7, #31]
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d001      	beq.n	80052d0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
 80052ce:	e1f3      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_SPI_TransmitReceive+0x60>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_SPI_TransmitReceive+0x60>
 80052dc:	887b      	ldrh	r3, [r7, #2]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e1e8      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x72>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e1e1      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x436>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b04      	cmp	r3, #4
 8005306:	d003      	beq.n	8005310 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2205      	movs	r2, #5
 800530c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	887a      	ldrh	r2, [r7, #2]
 8005320:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	887a      	ldrh	r2, [r7, #2]
 800533c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005352:	d802      	bhi.n	800535a <HAL_SPI_TransmitReceive+0xd8>
 8005354:	8abb      	ldrh	r3, [r7, #20]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d908      	bls.n	800536c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	e007      	b.n	800537c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005386:	2b40      	cmp	r3, #64	@ 0x40
 8005388:	d007      	beq.n	800539a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053a2:	f240 8083 	bls.w	80054ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x132>
 80053ae:	8afb      	ldrh	r3, [r7, #22]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d16f      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	881a      	ldrh	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	1c9a      	adds	r2, r3, #2
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d8:	e05c      	b.n	8005494 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d11b      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x19e>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d016      	beq.n	8005420 <HAL_SPI_TransmitReceive+0x19e>
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d113      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fc:	881a      	ldrh	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d11c      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x1e6>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005444:	b292      	uxth	r2, r2
 8005446:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	1c9a      	adds	r2, r3, #2
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005464:	2301      	movs	r3, #1
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005468:	f7fe f934 	bl	80036d4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005474:	429a      	cmp	r2, r3
 8005476:	d80d      	bhi.n	8005494 <HAL_SPI_TransmitReceive+0x212>
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800547e:	d009      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e111      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d19d      	bne.n	80053da <HAL_SPI_TransmitReceive+0x158>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d197      	bne.n	80053da <HAL_SPI_TransmitReceive+0x158>
 80054aa:	e0e5      	b.n	8005678 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x23a>
 80054b4:	8afb      	ldrh	r3, [r7, #22]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	f040 80d1 	bne.w	800565e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d912      	bls.n	80054ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ca:	881a      	ldrh	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b02      	subs	r3, #2
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054ea:	e0b8      	b.n	800565e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	7812      	ldrb	r2, [r2, #0]
 80054f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005512:	e0a4      	b.n	800565e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d134      	bne.n	800558c <HAL_SPI_TransmitReceive+0x30a>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d02f      	beq.n	800558c <HAL_SPI_TransmitReceive+0x30a>
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	2b01      	cmp	r3, #1
 8005530:	d12c      	bne.n	800558c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	d912      	bls.n	8005562 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b02      	subs	r3, #2
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005560:	e012      	b.n	8005588 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	330c      	adds	r3, #12
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b01      	cmp	r3, #1
 8005598:	d148      	bne.n	800562c <HAL_SPI_TransmitReceive+0x3aa>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d042      	beq.n	800562c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d923      	bls.n	80055fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	b292      	uxth	r2, r2
 80055be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b02      	subs	r3, #2
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d81f      	bhi.n	8005628 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055f6:	605a      	str	r2, [r3, #4]
 80055f8:	e016      	b.n	8005628 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f103 020c 	add.w	r2, r3, #12
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005628:	2301      	movs	r3, #1
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800562c:	f7fe f852 	bl	80036d4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005638:	429a      	cmp	r2, r3
 800563a:	d803      	bhi.n	8005644 <HAL_SPI_TransmitReceive+0x3c2>
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005642:	d102      	bne.n	800564a <HAL_SPI_TransmitReceive+0x3c8>
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e02c      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f af55 	bne.w	8005514 <HAL_SPI_TransmitReceive+0x292>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	f47f af4e 	bne.w	8005514 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f995 	bl	80059ac <SPI_EndRxTxTransaction>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e00e      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3728      	adds	r7, #40	@ 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056d0:	f7fe f800 	bl	80036d4 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	4413      	add	r3, r2
 80056de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056e0:	f7fd fff8 	bl	80036d4 <HAL_GetTick>
 80056e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056e6:	4b39      	ldr	r3, [pc, #228]	@ (80057cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	015b      	lsls	r3, r3, #5
 80056ec:	0d1b      	lsrs	r3, r3, #20
 80056ee:	69fa      	ldr	r2, [r7, #28]
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056f6:	e054      	b.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056fe:	d050      	beq.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005700:	f7fd ffe8 	bl	80036d4 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	429a      	cmp	r2, r3
 800570e:	d902      	bls.n	8005716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d13d      	bne.n	8005792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572e:	d111      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005738:	d004      	beq.n	8005744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005742:	d107      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800575c:	d10f      	bne.n	800577e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800577c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e017      	b.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3b01      	subs	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d19b      	bne.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000020 	.word	0x20000020

080057d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b08a      	sub	sp, #40	@ 0x28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057e2:	f7fd ff77 	bl	80036d4 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	4413      	add	r3, r2
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80057f2:	f7fd ff6f 	bl	80036d4 <HAL_GetTick>
 80057f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005800:	4b3d      	ldr	r3, [pc, #244]	@ (80058f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	00da      	lsls	r2, r3, #3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	0d1b      	lsrs	r3, r3, #20
 8005810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005818:	e060      	b.n	80058dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005820:	d107      	bne.n	8005832 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005830:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005838:	d050      	beq.n	80058dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800583a:	f7fd ff4b 	bl	80036d4 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005846:	429a      	cmp	r2, r3
 8005848:	d902      	bls.n	8005850 <SPI_WaitFifoStateUntilTimeout+0x80>
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	2b00      	cmp	r3, #0
 800584e:	d13d      	bne.n	80058cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800585e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005868:	d111      	bne.n	800588e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005872:	d004      	beq.n	800587e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800587c:	d107      	bne.n	800588e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800588c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005896:	d10f      	bne.n	80058b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e010      	b.n	80058ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3b01      	subs	r3, #1
 80058da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d196      	bne.n	800581a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3728      	adds	r7, #40	@ 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000020 	.word	0x20000020

080058fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005910:	d111      	bne.n	8005936 <SPI_EndRxTransaction+0x3a>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800591a:	d004      	beq.n	8005926 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005924:	d107      	bne.n	8005936 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005934:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2200      	movs	r2, #0
 800593e:	2180      	movs	r1, #128	@ 0x80
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff febd 	bl	80056c0 <SPI_WaitFlagStateUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d007      	beq.n	800595c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e023      	b.n	80059a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005964:	d11d      	bne.n	80059a2 <SPI_EndRxTransaction+0xa6>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800596e:	d004      	beq.n	800597a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005978:	d113      	bne.n	80059a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ff22 	bl	80057d0 <SPI_WaitFifoStateUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e000      	b.n	80059a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f7ff ff03 	bl	80057d0 <SPI_WaitFifoStateUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d4:	f043 0220 	orr.w	r2, r3, #32
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e027      	b.n	8005a30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2200      	movs	r2, #0
 80059e8:	2180      	movs	r1, #128	@ 0x80
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff fe68 	bl	80056c0 <SPI_WaitFlagStateUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e014      	b.n	8005a30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fedc 	bl	80057d0 <SPI_WaitFifoStateUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e000      	b.n	8005a30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e049      	b.n	8005ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fd fb2c 	bl	80030bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f000 fcd8 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e049      	b.n	8005b8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f841 	bl	8005b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f000 fc81 	bl	800642c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_TIM_PWM_Start+0x24>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e03c      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d109      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x3e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	bf14      	ite	ne
 8005bde:	2301      	movne	r3, #1
 8005be0:	2300      	moveq	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	e02f      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d109      	bne.n	8005c00 <HAL_TIM_PWM_Start+0x58>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e022      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d109      	bne.n	8005c1a <HAL_TIM_PWM_Start+0x72>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	bf14      	ite	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	2300      	moveq	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	e015      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b10      	cmp	r3, #16
 8005c1e:	d109      	bne.n	8005c34 <HAL_TIM_PWM_Start+0x8c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	bf14      	ite	ne
 8005c2c:	2301      	movne	r3, #1
 8005c2e:	2300      	moveq	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e008      	b.n	8005c46 <HAL_TIM_PWM_Start+0x9e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e097      	b.n	8005d7e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_PWM_Start+0xb6>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	e023      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_PWM_Start+0xc6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6c:	e01b      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start+0xd6>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c7c:	e013      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0xe6>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c8c:	e00b      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0xf6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c9c:	e003      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xfe>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2201      	movs	r2, #1
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 ffea 	bl	8006c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a33      	ldr	r2, [pc, #204]	@ (8005d88 <HAL_TIM_PWM_Start+0x1e0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x13e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a32      	ldr	r2, [pc, #200]	@ (8005d8c <HAL_TIM_PWM_Start+0x1e4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x13e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a30      	ldr	r2, [pc, #192]	@ (8005d90 <HAL_TIM_PWM_Start+0x1e8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x13e>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8005d94 <HAL_TIM_PWM_Start+0x1ec>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x13e>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d98 <HAL_TIM_PWM_Start+0x1f0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d101      	bne.n	8005cea <HAL_TIM_PWM_Start+0x142>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <HAL_TIM_PWM_Start+0x144>
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a20      	ldr	r2, [pc, #128]	@ (8005d88 <HAL_TIM_PWM_Start+0x1e0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d018      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x194>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d12:	d013      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x194>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a20      	ldr	r2, [pc, #128]	@ (8005d9c <HAL_TIM_PWM_Start+0x1f4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00e      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x194>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	@ (8005da0 <HAL_TIM_PWM_Start+0x1f8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d009      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x194>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a17      	ldr	r2, [pc, #92]	@ (8005d8c <HAL_TIM_PWM_Start+0x1e4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_PWM_Start+0x194>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a16      	ldr	r2, [pc, #88]	@ (8005d90 <HAL_TIM_PWM_Start+0x1e8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d115      	bne.n	8005d68 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	4b18      	ldr	r3, [pc, #96]	@ (8005da4 <HAL_TIM_PWM_Start+0x1fc>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b06      	cmp	r3, #6
 8005d4c:	d015      	beq.n	8005d7a <HAL_TIM_PWM_Start+0x1d2>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d54:	d011      	beq.n	8005d7a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d66:	e008      	b.n	8005d7a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0201 	orr.w	r2, r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e000      	b.n	8005d7c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40013400 	.word	0x40013400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	00010007 	.word	0x00010007

08005da8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e097      	b.n	8005eec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fd f9a5 	bl	8003120 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6812      	ldr	r2, [r2, #0]
 8005de8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f000 fb15 	bl	800642c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e48:	f023 030c 	bic.w	r3, r3, #12
 8005e4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	4313      	orrs	r3, r2
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	011a      	lsls	r2, r3, #4
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	031b      	lsls	r3, r3, #12
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d110      	bne.n	8005f46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f2a:	7b7b      	ldrb	r3, [r7, #13]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d001      	beq.n	8005f34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e069      	b.n	8006008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f44:	e031      	b.n	8005faa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d110      	bne.n	8005f6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d102      	bne.n	8005f58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f52:	7b3b      	ldrb	r3, [r7, #12]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d001      	beq.n	8005f5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e055      	b.n	8006008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f6c:	e01d      	b.n	8005faa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d108      	bne.n	8005f86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d105      	bne.n	8005f86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f7a:	7b7b      	ldrb	r3, [r7, #13]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d102      	bne.n	8005f86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f80:	7b3b      	ldrb	r3, [r7, #12]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d001      	beq.n	8005f8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e03e      	b.n	8006008 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_TIM_Encoder_Start+0xc4>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d008      	beq.n	8005fc8 <HAL_TIM_Encoder_Start+0xd4>
 8005fb6:	e00f      	b.n	8005fd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fe61 	bl	8006c88 <TIM_CCxChannelCmd>
      break;
 8005fc6:	e016      	b.n	8005ff6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	2104      	movs	r1, #4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fe59 	bl	8006c88 <TIM_CCxChannelCmd>
      break;
 8005fd6:	e00e      	b.n	8005ff6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fe51 	bl	8006c88 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	2104      	movs	r1, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fe4a 	bl	8006c88 <TIM_CCxChannelCmd>
      break;
 8005ff4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800602a:	2302      	movs	r3, #2
 800602c:	e0ff      	b.n	800622e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b14      	cmp	r3, #20
 800603a:	f200 80f0 	bhi.w	800621e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006099 	.word	0x08006099
 8006048:	0800621f 	.word	0x0800621f
 800604c:	0800621f 	.word	0x0800621f
 8006050:	0800621f 	.word	0x0800621f
 8006054:	080060d9 	.word	0x080060d9
 8006058:	0800621f 	.word	0x0800621f
 800605c:	0800621f 	.word	0x0800621f
 8006060:	0800621f 	.word	0x0800621f
 8006064:	0800611b 	.word	0x0800611b
 8006068:	0800621f 	.word	0x0800621f
 800606c:	0800621f 	.word	0x0800621f
 8006070:	0800621f 	.word	0x0800621f
 8006074:	0800615b 	.word	0x0800615b
 8006078:	0800621f 	.word	0x0800621f
 800607c:	0800621f 	.word	0x0800621f
 8006080:	0800621f 	.word	0x0800621f
 8006084:	0800619d 	.word	0x0800619d
 8006088:	0800621f 	.word	0x0800621f
 800608c:	0800621f 	.word	0x0800621f
 8006090:	0800621f 	.word	0x0800621f
 8006094:	080061dd 	.word	0x080061dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fa60 	bl	8006564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0208 	orr.w	r2, r2, #8
 80060b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0204 	bic.w	r2, r2, #4
 80060c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6999      	ldr	r1, [r3, #24]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	619a      	str	r2, [r3, #24]
      break;
 80060d6:	e0a5      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fad0 	bl	8006684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	021a      	lsls	r2, r3, #8
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	619a      	str	r2, [r3, #24]
      break;
 8006118:	e084      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fb39 	bl	8006798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0208 	orr.w	r2, r2, #8
 8006134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0204 	bic.w	r2, r2, #4
 8006144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69d9      	ldr	r1, [r3, #28]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	61da      	str	r2, [r3, #28]
      break;
 8006158:	e064      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fba1 	bl	80068a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69da      	ldr	r2, [r3, #28]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69d9      	ldr	r1, [r3, #28]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	021a      	lsls	r2, r3, #8
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	61da      	str	r2, [r3, #28]
      break;
 800619a:	e043      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68b9      	ldr	r1, [r7, #8]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 fc0a 	bl	80069bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0208 	orr.w	r2, r2, #8
 80061b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0204 	bic.w	r2, r2, #4
 80061c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80061da:	e023      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fc4e 	bl	8006a84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006206:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	021a      	lsls	r2, r3, #8
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800621c:	e002      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]
      break;
 8006222:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800622c:	7dfb      	ldrb	r3, [r7, #23]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop

08006238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_TIM_ConfigClockSource+0x1c>
 8006250:	2302      	movs	r3, #2
 8006252:	e0de      	b.n	8006412 <HAL_TIM_ConfigClockSource+0x1da>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006272:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800627e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a63      	ldr	r2, [pc, #396]	@ (800641c <HAL_TIM_ConfigClockSource+0x1e4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	f000 80a9 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006294:	4a61      	ldr	r2, [pc, #388]	@ (800641c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f200 80ae 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 800629c:	4a60      	ldr	r2, [pc, #384]	@ (8006420 <HAL_TIM_ConfigClockSource+0x1e8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	f000 80a1 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80062a4:	4a5e      	ldr	r2, [pc, #376]	@ (8006420 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	f200 80a6 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80062ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006424 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	f000 8099 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80062b4:	4a5b      	ldr	r2, [pc, #364]	@ (8006424 <HAL_TIM_ConfigClockSource+0x1ec>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	f200 809e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80062bc:	4a5a      	ldr	r2, [pc, #360]	@ (8006428 <HAL_TIM_ConfigClockSource+0x1f0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	f000 8091 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80062c4:	4a58      	ldr	r2, [pc, #352]	@ (8006428 <HAL_TIM_ConfigClockSource+0x1f0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	f200 8096 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80062cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80062d0:	f000 8089 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 80062d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80062d8:	f200 808e 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e0:	d03e      	beq.n	8006360 <HAL_TIM_ConfigClockSource+0x128>
 80062e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e6:	f200 8087 	bhi.w	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ee:	f000 8086 	beq.w	80063fe <HAL_TIM_ConfigClockSource+0x1c6>
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f6:	d87f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 80062f8:	2b70      	cmp	r3, #112	@ 0x70
 80062fa:	d01a      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0xfa>
 80062fc:	2b70      	cmp	r3, #112	@ 0x70
 80062fe:	d87b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006300:	2b60      	cmp	r3, #96	@ 0x60
 8006302:	d050      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0x16e>
 8006304:	2b60      	cmp	r3, #96	@ 0x60
 8006306:	d877      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006308:	2b50      	cmp	r3, #80	@ 0x50
 800630a:	d03c      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x14e>
 800630c:	2b50      	cmp	r3, #80	@ 0x50
 800630e:	d873      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006310:	2b40      	cmp	r3, #64	@ 0x40
 8006312:	d058      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x18e>
 8006314:	2b40      	cmp	r3, #64	@ 0x40
 8006316:	d86f      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006318:	2b30      	cmp	r3, #48	@ 0x30
 800631a:	d064      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800631c:	2b30      	cmp	r3, #48	@ 0x30
 800631e:	d86b      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006320:	2b20      	cmp	r3, #32
 8006322:	d060      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d867      	bhi.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 800632c:	2b10      	cmp	r3, #16
 800632e:	d05a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006330:	e062      	b.n	80063f8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006342:	f000 fc81 	bl	8006c48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	609a      	str	r2, [r3, #8]
      break;
 800635e:	e04f      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006370:	f000 fc6a 	bl	8006c48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006382:	609a      	str	r2, [r3, #8]
      break;
 8006384:	e03c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006392:	461a      	mov	r2, r3
 8006394:	f000 fbdc 	bl	8006b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2150      	movs	r1, #80	@ 0x50
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fc35 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 80063a4:	e02c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fbfb 	bl	8006bae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2160      	movs	r1, #96	@ 0x60
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fc25 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 80063c4:	e01c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fbbc 	bl	8006b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2140      	movs	r1, #64	@ 0x40
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fc15 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 80063e4:	e00c      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f000 fc0c 	bl	8006c0e <TIM_ITRx_SetConfig>
      break;
 80063f6:	e003      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
      break;
 80063fc:	e000      	b.n	8006400 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80063fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	00100070 	.word	0x00100070
 8006420:	00100040 	.word	0x00100040
 8006424:	00100030 	.word	0x00100030
 8006428:	00100020 	.word	0x00100020

0800642c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a42      	ldr	r2, [pc, #264]	@ (8006548 <TIM_Base_SetConfig+0x11c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644a:	d00b      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a3f      	ldr	r2, [pc, #252]	@ (800654c <TIM_Base_SetConfig+0x120>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a3e      	ldr	r2, [pc, #248]	@ (8006550 <TIM_Base_SetConfig+0x124>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0x38>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3d      	ldr	r2, [pc, #244]	@ (8006554 <TIM_Base_SetConfig+0x128>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d108      	bne.n	8006476 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a33      	ldr	r2, [pc, #204]	@ (8006548 <TIM_Base_SetConfig+0x11c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01b      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006484:	d017      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a30      	ldr	r2, [pc, #192]	@ (800654c <TIM_Base_SetConfig+0x120>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2f      	ldr	r2, [pc, #188]	@ (8006550 <TIM_Base_SetConfig+0x124>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00f      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2e      	ldr	r2, [pc, #184]	@ (8006554 <TIM_Base_SetConfig+0x128>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00b      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006558 <TIM_Base_SetConfig+0x12c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d007      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	@ (800655c <TIM_Base_SetConfig+0x130>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_Base_SetConfig+0x8a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006560 <TIM_Base_SetConfig+0x134>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d108      	bne.n	80064c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a16      	ldr	r2, [pc, #88]	@ (8006548 <TIM_Base_SetConfig+0x11c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00f      	beq.n	8006514 <TIM_Base_SetConfig+0xe8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a17      	ldr	r2, [pc, #92]	@ (8006554 <TIM_Base_SetConfig+0x128>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00b      	beq.n	8006514 <TIM_Base_SetConfig+0xe8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a16      	ldr	r2, [pc, #88]	@ (8006558 <TIM_Base_SetConfig+0x12c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_Base_SetConfig+0xe8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a15      	ldr	r2, [pc, #84]	@ (800655c <TIM_Base_SetConfig+0x130>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0xe8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a14      	ldr	r2, [pc, #80]	@ (8006560 <TIM_Base_SetConfig+0x134>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d103      	bne.n	800651c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d105      	bne.n	800653a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f023 0201 	bic.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]
  }
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40013400 	.word	0x40013400
 8006558:	40014000 	.word	0x40014000
 800655c:	40014400 	.word	0x40014400
 8006560:	40014800 	.word	0x40014800

08006564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0201 	bic.w	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f023 0302 	bic.w	r3, r3, #2
 80065b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a2c      	ldr	r2, [pc, #176]	@ (8006670 <TIM_OC1_SetConfig+0x10c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00f      	beq.n	80065e4 <TIM_OC1_SetConfig+0x80>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006674 <TIM_OC1_SetConfig+0x110>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <TIM_OC1_SetConfig+0x80>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006678 <TIM_OC1_SetConfig+0x114>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <TIM_OC1_SetConfig+0x80>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a29      	ldr	r2, [pc, #164]	@ (800667c <TIM_OC1_SetConfig+0x118>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_OC1_SetConfig+0x80>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a28      	ldr	r2, [pc, #160]	@ (8006680 <TIM_OC1_SetConfig+0x11c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d10c      	bne.n	80065fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f023 0308 	bic.w	r3, r3, #8
 80065ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f023 0304 	bic.w	r3, r3, #4
 80065fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <TIM_OC1_SetConfig+0x10c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00f      	beq.n	8006626 <TIM_OC1_SetConfig+0xc2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1a      	ldr	r2, [pc, #104]	@ (8006674 <TIM_OC1_SetConfig+0x110>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00b      	beq.n	8006626 <TIM_OC1_SetConfig+0xc2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a19      	ldr	r2, [pc, #100]	@ (8006678 <TIM_OC1_SetConfig+0x114>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d007      	beq.n	8006626 <TIM_OC1_SetConfig+0xc2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a18      	ldr	r2, [pc, #96]	@ (800667c <TIM_OC1_SetConfig+0x118>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d003      	beq.n	8006626 <TIM_OC1_SetConfig+0xc2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a17      	ldr	r2, [pc, #92]	@ (8006680 <TIM_OC1_SetConfig+0x11c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d111      	bne.n	800664a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800662c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0210 	bic.w	r2, r3, #16
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f023 0320 	bic.w	r3, r3, #32
 80066d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	011b      	lsls	r3, r3, #4
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a28      	ldr	r2, [pc, #160]	@ (8006784 <TIM_OC2_SetConfig+0x100>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC2_SetConfig+0x6c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a27      	ldr	r2, [pc, #156]	@ (8006788 <TIM_OC2_SetConfig+0x104>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d10d      	bne.n	800670c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1d      	ldr	r2, [pc, #116]	@ (8006784 <TIM_OC2_SetConfig+0x100>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00f      	beq.n	8006734 <TIM_OC2_SetConfig+0xb0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <TIM_OC2_SetConfig+0x104>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00b      	beq.n	8006734 <TIM_OC2_SetConfig+0xb0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a1b      	ldr	r2, [pc, #108]	@ (800678c <TIM_OC2_SetConfig+0x108>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d007      	beq.n	8006734 <TIM_OC2_SetConfig+0xb0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a1a      	ldr	r2, [pc, #104]	@ (8006790 <TIM_OC2_SetConfig+0x10c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC2_SetConfig+0xb0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a19      	ldr	r2, [pc, #100]	@ (8006794 <TIM_OC2_SetConfig+0x110>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d113      	bne.n	800675c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800673a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	4313      	orrs	r3, r2
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	621a      	str	r2, [r3, #32]
}
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40013400 	.word	0x40013400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800

08006798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a27      	ldr	r2, [pc, #156]	@ (8006894 <TIM_OC3_SetConfig+0xfc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_OC3_SetConfig+0x6a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a26      	ldr	r2, [pc, #152]	@ (8006898 <TIM_OC3_SetConfig+0x100>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d10d      	bne.n	800681e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800681c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1c      	ldr	r2, [pc, #112]	@ (8006894 <TIM_OC3_SetConfig+0xfc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00f      	beq.n	8006846 <TIM_OC3_SetConfig+0xae>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a1b      	ldr	r2, [pc, #108]	@ (8006898 <TIM_OC3_SetConfig+0x100>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00b      	beq.n	8006846 <TIM_OC3_SetConfig+0xae>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a1a      	ldr	r2, [pc, #104]	@ (800689c <TIM_OC3_SetConfig+0x104>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <TIM_OC3_SetConfig+0xae>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a19      	ldr	r2, [pc, #100]	@ (80068a0 <TIM_OC3_SetConfig+0x108>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_OC3_SetConfig+0xae>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a18      	ldr	r2, [pc, #96]	@ (80068a4 <TIM_OC3_SetConfig+0x10c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d113      	bne.n	800686e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800684c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	621a      	str	r2, [r3, #32]
}
 8006888:	bf00      	nop
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800

080068a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	031b      	lsls	r3, r3, #12
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a28      	ldr	r2, [pc, #160]	@ (80069a8 <TIM_OC4_SetConfig+0x100>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_OC4_SetConfig+0x6c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a27      	ldr	r2, [pc, #156]	@ (80069ac <TIM_OC4_SetConfig+0x104>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d10d      	bne.n	8006930 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800691a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800692e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <TIM_OC4_SetConfig+0x100>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d00f      	beq.n	8006958 <TIM_OC4_SetConfig+0xb0>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <TIM_OC4_SetConfig+0x104>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00b      	beq.n	8006958 <TIM_OC4_SetConfig+0xb0>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a1b      	ldr	r2, [pc, #108]	@ (80069b0 <TIM_OC4_SetConfig+0x108>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <TIM_OC4_SetConfig+0xb0>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1a      	ldr	r2, [pc, #104]	@ (80069b4 <TIM_OC4_SetConfig+0x10c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC4_SetConfig+0xb0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a19      	ldr	r2, [pc, #100]	@ (80069b8 <TIM_OC4_SetConfig+0x110>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d113      	bne.n	8006980 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800695e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006966:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	019b      	lsls	r3, r3, #6
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	019b      	lsls	r3, r3, #6
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40013400 	.word	0x40013400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	40014800 	.word	0x40014800

080069bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	041b      	lsls	r3, r3, #16
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a17      	ldr	r2, [pc, #92]	@ (8006a70 <TIM_OC5_SetConfig+0xb4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00f      	beq.n	8006a36 <TIM_OC5_SetConfig+0x7a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a16      	ldr	r2, [pc, #88]	@ (8006a74 <TIM_OC5_SetConfig+0xb8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00b      	beq.n	8006a36 <TIM_OC5_SetConfig+0x7a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a15      	ldr	r2, [pc, #84]	@ (8006a78 <TIM_OC5_SetConfig+0xbc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d007      	beq.n	8006a36 <TIM_OC5_SetConfig+0x7a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a14      	ldr	r2, [pc, #80]	@ (8006a7c <TIM_OC5_SetConfig+0xc0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d003      	beq.n	8006a36 <TIM_OC5_SetConfig+0x7a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a13      	ldr	r2, [pc, #76]	@ (8006a80 <TIM_OC5_SetConfig+0xc4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d109      	bne.n	8006a4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40013400 	.word	0x40013400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800

08006a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	051b      	lsls	r3, r3, #20
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a18      	ldr	r2, [pc, #96]	@ (8006b3c <TIM_OC6_SetConfig+0xb8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00f      	beq.n	8006b00 <TIM_OC6_SetConfig+0x7c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a17      	ldr	r2, [pc, #92]	@ (8006b40 <TIM_OC6_SetConfig+0xbc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d00b      	beq.n	8006b00 <TIM_OC6_SetConfig+0x7c>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a16      	ldr	r2, [pc, #88]	@ (8006b44 <TIM_OC6_SetConfig+0xc0>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d007      	beq.n	8006b00 <TIM_OC6_SetConfig+0x7c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a15      	ldr	r2, [pc, #84]	@ (8006b48 <TIM_OC6_SetConfig+0xc4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_OC6_SetConfig+0x7c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a14      	ldr	r2, [pc, #80]	@ (8006b4c <TIM_OC6_SetConfig+0xc8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d109      	bne.n	8006b14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	029b      	lsls	r3, r3, #10
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40012c00 	.word	0x40012c00
 8006b40:	40013400 	.word	0x40013400
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40014400 	.word	0x40014400
 8006b4c:	40014800 	.word	0x40014800

08006b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f023 0201 	bic.w	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	011b      	lsls	r3, r3, #4
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f023 030a 	bic.w	r3, r3, #10
 8006b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f023 0210 	bic.w	r2, r3, #16
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	031b      	lsls	r3, r3, #12
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f043 0307 	orr.w	r3, r3, #7
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	609a      	str	r2, [r3, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	401a      	ands	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1a      	ldr	r2, [r3, #32]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e065      	b.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d108      	bne.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d018      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d62:	d013      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00e      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d009      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a12      	ldr	r2, [pc, #72]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d004      	beq.n	8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a13      	ldr	r2, [pc, #76]	@ (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10c      	bne.n	8006da6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40014000 	.word	0x40014000

08006dd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e073      	b.n	8006edc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a19      	ldr	r2, [pc, #100]	@ (8006ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a18      	ldr	r2, [pc, #96]	@ (8006eec <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d11c      	bne.n	8006eca <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9a:	051b      	lsls	r3, r3, #20
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	40012c00 	.word	0x40012c00
 8006eec:	40013400 	.word	0x40013400

08006ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e042      	b.n	8006f88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fc f9d1 	bl	80032bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2224      	movs	r2, #36	@ 0x24
 8006f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0201 	bic.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb82 	bl	8007644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f8b3 	bl	80070ac <UART_SetConfig>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e01b      	b.n	8006f88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0201 	orr.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc01 	bl	8007788 <UART_CheckIdleState>
 8006f86:	4603      	mov	r3, r0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	@ 0x28
 8006f94:	af02      	add	r7, sp, #8
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d17b      	bne.n	80070a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_UART_Transmit+0x26>
 8006fb0:	88fb      	ldrh	r3, [r7, #6]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e074      	b.n	80070a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2221      	movs	r2, #33	@ 0x21
 8006fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fca:	f7fc fb83 	bl	80036d4 <HAL_GetTick>
 8006fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	88fa      	ldrh	r2, [r7, #6]
 8006fd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	88fa      	ldrh	r2, [r7, #6]
 8006fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe8:	d108      	bne.n	8006ffc <HAL_UART_Transmit+0x6c>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	e003      	b.n	8007004 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007004:	e030      	b.n	8007068 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2200      	movs	r2, #0
 800700e:	2180      	movs	r1, #128	@ 0x80
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fc63 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e03d      	b.n	80070a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10b      	bne.n	8007046 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800703c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	3302      	adds	r3, #2
 8007042:	61bb      	str	r3, [r7, #24]
 8007044:	e007      	b.n	8007056 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	3301      	adds	r3, #1
 8007054:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1c8      	bne.n	8007006 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2200      	movs	r2, #0
 800707c:	2140      	movs	r1, #64	@ 0x40
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 fc2c 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e006      	b.n	80070a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	e000      	b.n	80070a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
  }
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3720      	adds	r7, #32
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070b0:	b08c      	sub	sp, #48	@ 0x30
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	431a      	orrs	r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4bab      	ldr	r3, [pc, #684]	@ (8007388 <UART_SetConfig+0x2dc>)
 80070dc:	4013      	ands	r3, r2
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070e4:	430b      	orrs	r3, r1
 80070e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4aa0      	ldr	r2, [pc, #640]	@ (800738c <UART_SetConfig+0x2e0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007114:	4313      	orrs	r3, r2
 8007116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007122:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800712c:	430b      	orrs	r3, r1
 800712e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	f023 010f 	bic.w	r1, r3, #15
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a91      	ldr	r2, [pc, #580]	@ (8007390 <UART_SetConfig+0x2e4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d125      	bne.n	800719c <UART_SetConfig+0xf0>
 8007150:	4b90      	ldr	r3, [pc, #576]	@ (8007394 <UART_SetConfig+0x2e8>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d81a      	bhi.n	8007194 <UART_SetConfig+0xe8>
 800715e:	a201      	add	r2, pc, #4	@ (adr r2, 8007164 <UART_SetConfig+0xb8>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007175 	.word	0x08007175
 8007168:	08007185 	.word	0x08007185
 800716c:	0800717d 	.word	0x0800717d
 8007170:	0800718d 	.word	0x0800718d
 8007174:	2301      	movs	r3, #1
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e0d6      	b.n	800732a <UART_SetConfig+0x27e>
 800717c:	2302      	movs	r3, #2
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e0d2      	b.n	800732a <UART_SetConfig+0x27e>
 8007184:	2304      	movs	r3, #4
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e0ce      	b.n	800732a <UART_SetConfig+0x27e>
 800718c:	2308      	movs	r3, #8
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e0ca      	b.n	800732a <UART_SetConfig+0x27e>
 8007194:	2310      	movs	r3, #16
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e0c6      	b.n	800732a <UART_SetConfig+0x27e>
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a7d      	ldr	r2, [pc, #500]	@ (8007398 <UART_SetConfig+0x2ec>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d138      	bne.n	8007218 <UART_SetConfig+0x16c>
 80071a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007394 <UART_SetConfig+0x2e8>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b0c      	cmp	r3, #12
 80071b2:	d82d      	bhi.n	8007210 <UART_SetConfig+0x164>
 80071b4:	a201      	add	r2, pc, #4	@ (adr r2, 80071bc <UART_SetConfig+0x110>)
 80071b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ba:	bf00      	nop
 80071bc:	080071f1 	.word	0x080071f1
 80071c0:	08007211 	.word	0x08007211
 80071c4:	08007211 	.word	0x08007211
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007201 	.word	0x08007201
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007211 	.word	0x08007211
 80071d8:	08007211 	.word	0x08007211
 80071dc:	080071f9 	.word	0x080071f9
 80071e0:	08007211 	.word	0x08007211
 80071e4:	08007211 	.word	0x08007211
 80071e8:	08007211 	.word	0x08007211
 80071ec:	08007209 	.word	0x08007209
 80071f0:	2300      	movs	r3, #0
 80071f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f6:	e098      	b.n	800732a <UART_SetConfig+0x27e>
 80071f8:	2302      	movs	r3, #2
 80071fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fe:	e094      	b.n	800732a <UART_SetConfig+0x27e>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007206:	e090      	b.n	800732a <UART_SetConfig+0x27e>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800720e:	e08c      	b.n	800732a <UART_SetConfig+0x27e>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007216:	e088      	b.n	800732a <UART_SetConfig+0x27e>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a5f      	ldr	r2, [pc, #380]	@ (800739c <UART_SetConfig+0x2f0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d125      	bne.n	800726e <UART_SetConfig+0x1c2>
 8007222:	4b5c      	ldr	r3, [pc, #368]	@ (8007394 <UART_SetConfig+0x2e8>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007228:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800722c:	2b30      	cmp	r3, #48	@ 0x30
 800722e:	d016      	beq.n	800725e <UART_SetConfig+0x1b2>
 8007230:	2b30      	cmp	r3, #48	@ 0x30
 8007232:	d818      	bhi.n	8007266 <UART_SetConfig+0x1ba>
 8007234:	2b20      	cmp	r3, #32
 8007236:	d00a      	beq.n	800724e <UART_SetConfig+0x1a2>
 8007238:	2b20      	cmp	r3, #32
 800723a:	d814      	bhi.n	8007266 <UART_SetConfig+0x1ba>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <UART_SetConfig+0x19a>
 8007240:	2b10      	cmp	r3, #16
 8007242:	d008      	beq.n	8007256 <UART_SetConfig+0x1aa>
 8007244:	e00f      	b.n	8007266 <UART_SetConfig+0x1ba>
 8007246:	2300      	movs	r3, #0
 8007248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724c:	e06d      	b.n	800732a <UART_SetConfig+0x27e>
 800724e:	2302      	movs	r3, #2
 8007250:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007254:	e069      	b.n	800732a <UART_SetConfig+0x27e>
 8007256:	2304      	movs	r3, #4
 8007258:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725c:	e065      	b.n	800732a <UART_SetConfig+0x27e>
 800725e:	2308      	movs	r3, #8
 8007260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007264:	e061      	b.n	800732a <UART_SetConfig+0x27e>
 8007266:	2310      	movs	r3, #16
 8007268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800726c:	e05d      	b.n	800732a <UART_SetConfig+0x27e>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a4b      	ldr	r2, [pc, #300]	@ (80073a0 <UART_SetConfig+0x2f4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d125      	bne.n	80072c4 <UART_SetConfig+0x218>
 8007278:	4b46      	ldr	r3, [pc, #280]	@ (8007394 <UART_SetConfig+0x2e8>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007282:	2bc0      	cmp	r3, #192	@ 0xc0
 8007284:	d016      	beq.n	80072b4 <UART_SetConfig+0x208>
 8007286:	2bc0      	cmp	r3, #192	@ 0xc0
 8007288:	d818      	bhi.n	80072bc <UART_SetConfig+0x210>
 800728a:	2b80      	cmp	r3, #128	@ 0x80
 800728c:	d00a      	beq.n	80072a4 <UART_SetConfig+0x1f8>
 800728e:	2b80      	cmp	r3, #128	@ 0x80
 8007290:	d814      	bhi.n	80072bc <UART_SetConfig+0x210>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <UART_SetConfig+0x1f0>
 8007296:	2b40      	cmp	r3, #64	@ 0x40
 8007298:	d008      	beq.n	80072ac <UART_SetConfig+0x200>
 800729a:	e00f      	b.n	80072bc <UART_SetConfig+0x210>
 800729c:	2300      	movs	r3, #0
 800729e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a2:	e042      	b.n	800732a <UART_SetConfig+0x27e>
 80072a4:	2302      	movs	r3, #2
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072aa:	e03e      	b.n	800732a <UART_SetConfig+0x27e>
 80072ac:	2304      	movs	r3, #4
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b2:	e03a      	b.n	800732a <UART_SetConfig+0x27e>
 80072b4:	2308      	movs	r3, #8
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ba:	e036      	b.n	800732a <UART_SetConfig+0x27e>
 80072bc:	2310      	movs	r3, #16
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c2:	e032      	b.n	800732a <UART_SetConfig+0x27e>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a30      	ldr	r2, [pc, #192]	@ (800738c <UART_SetConfig+0x2e0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d12a      	bne.n	8007324 <UART_SetConfig+0x278>
 80072ce:	4b31      	ldr	r3, [pc, #196]	@ (8007394 <UART_SetConfig+0x2e8>)
 80072d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072dc:	d01a      	beq.n	8007314 <UART_SetConfig+0x268>
 80072de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072e2:	d81b      	bhi.n	800731c <UART_SetConfig+0x270>
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072e8:	d00c      	beq.n	8007304 <UART_SetConfig+0x258>
 80072ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072ee:	d815      	bhi.n	800731c <UART_SetConfig+0x270>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <UART_SetConfig+0x250>
 80072f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f8:	d008      	beq.n	800730c <UART_SetConfig+0x260>
 80072fa:	e00f      	b.n	800731c <UART_SetConfig+0x270>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007302:	e012      	b.n	800732a <UART_SetConfig+0x27e>
 8007304:	2302      	movs	r3, #2
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730a:	e00e      	b.n	800732a <UART_SetConfig+0x27e>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007312:	e00a      	b.n	800732a <UART_SetConfig+0x27e>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731a:	e006      	b.n	800732a <UART_SetConfig+0x27e>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007322:	e002      	b.n	800732a <UART_SetConfig+0x27e>
 8007324:	2310      	movs	r3, #16
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a17      	ldr	r2, [pc, #92]	@ (800738c <UART_SetConfig+0x2e0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	f040 80a8 	bne.w	8007486 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800733a:	2b08      	cmp	r3, #8
 800733c:	d834      	bhi.n	80073a8 <UART_SetConfig+0x2fc>
 800733e:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x298>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	08007369 	.word	0x08007369
 8007348:	080073a9 	.word	0x080073a9
 800734c:	08007371 	.word	0x08007371
 8007350:	080073a9 	.word	0x080073a9
 8007354:	08007377 	.word	0x08007377
 8007358:	080073a9 	.word	0x080073a9
 800735c:	080073a9 	.word	0x080073a9
 8007360:	080073a9 	.word	0x080073a9
 8007364:	0800737f 	.word	0x0800737f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007368:	f7fd f9d0 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800736e:	e021      	b.n	80073b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007370:	4b0c      	ldr	r3, [pc, #48]	@ (80073a4 <UART_SetConfig+0x2f8>)
 8007372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007374:	e01e      	b.n	80073b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007376:	f7fd f95b 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 800737a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800737c:	e01a      	b.n	80073b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007384:	e016      	b.n	80073b4 <UART_SetConfig+0x308>
 8007386:	bf00      	nop
 8007388:	cfff69f3 	.word	0xcfff69f3
 800738c:	40008000 	.word	0x40008000
 8007390:	40013800 	.word	0x40013800
 8007394:	40021000 	.word	0x40021000
 8007398:	40004400 	.word	0x40004400
 800739c:	40004800 	.word	0x40004800
 80073a0:	40004c00 	.word	0x40004c00
 80073a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 812a 	beq.w	8007610 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	4a9e      	ldr	r2, [pc, #632]	@ (800763c <UART_SetConfig+0x590>)
 80073c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	4413      	add	r3, r2
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d305      	bcc.n	80073ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d903      	bls.n	80073f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073f2:	e10d      	b.n	8007610 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f6:	2200      	movs	r2, #0
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	60fa      	str	r2, [r7, #12]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	4a8e      	ldr	r2, [pc, #568]	@ (800763c <UART_SetConfig+0x590>)
 8007402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007406:	b29b      	uxth	r3, r3
 8007408:	2200      	movs	r2, #0
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	607a      	str	r2, [r7, #4]
 800740e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007416:	f7f9 fc5f 	bl	8000cd8 <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4610      	mov	r0, r2
 8007420:	4619      	mov	r1, r3
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	020b      	lsls	r3, r1, #8
 800742c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007430:	0202      	lsls	r2, r0, #8
 8007432:	6979      	ldr	r1, [r7, #20]
 8007434:	6849      	ldr	r1, [r1, #4]
 8007436:	0849      	lsrs	r1, r1, #1
 8007438:	2000      	movs	r0, #0
 800743a:	460c      	mov	r4, r1
 800743c:	4605      	mov	r5, r0
 800743e:	eb12 0804 	adds.w	r8, r2, r4
 8007442:	eb43 0905 	adc.w	r9, r3, r5
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	469a      	mov	sl, r3
 800744e:	4693      	mov	fp, r2
 8007450:	4652      	mov	r2, sl
 8007452:	465b      	mov	r3, fp
 8007454:	4640      	mov	r0, r8
 8007456:	4649      	mov	r1, r9
 8007458:	f7f9 fc3e 	bl	8000cd8 <__aeabi_uldivmod>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4613      	mov	r3, r2
 8007462:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800746a:	d308      	bcc.n	800747e <UART_SetConfig+0x3d2>
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007472:	d204      	bcs.n	800747e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6a3a      	ldr	r2, [r7, #32]
 800747a:	60da      	str	r2, [r3, #12]
 800747c:	e0c8      	b.n	8007610 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007484:	e0c4      	b.n	8007610 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800748e:	d167      	bne.n	8007560 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007494:	2b08      	cmp	r3, #8
 8007496:	d828      	bhi.n	80074ea <UART_SetConfig+0x43e>
 8007498:	a201      	add	r2, pc, #4	@ (adr r2, 80074a0 <UART_SetConfig+0x3f4>)
 800749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749e:	bf00      	nop
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074cd 	.word	0x080074cd
 80074a8:	080074d5 	.word	0x080074d5
 80074ac:	080074eb 	.word	0x080074eb
 80074b0:	080074db 	.word	0x080074db
 80074b4:	080074eb 	.word	0x080074eb
 80074b8:	080074eb 	.word	0x080074eb
 80074bc:	080074eb 	.word	0x080074eb
 80074c0:	080074e3 	.word	0x080074e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c4:	f7fd f922 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 80074c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ca:	e014      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074cc:	f7fd f934 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 80074d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074d2:	e010      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007640 <UART_SetConfig+0x594>)
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d8:	e00d      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074da:	f7fd f8a9 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 80074de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074e0:	e009      	b.n	80074f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074e8:	e005      	b.n	80074f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8089 	beq.w	8007610 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	4a4e      	ldr	r2, [pc, #312]	@ (800763c <UART_SetConfig+0x590>)
 8007504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007508:	461a      	mov	r2, r3
 800750a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007510:	005a      	lsls	r2, r3, #1
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	085b      	lsrs	r3, r3, #1
 8007518:	441a      	add	r2, r3
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007522:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d916      	bls.n	8007558 <UART_SetConfig+0x4ac>
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007530:	d212      	bcs.n	8007558 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	b29b      	uxth	r3, r3
 8007536:	f023 030f 	bic.w	r3, r3, #15
 800753a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	b29b      	uxth	r3, r3
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	b29a      	uxth	r2, r3
 8007548:	8bfb      	ldrh	r3, [r7, #30]
 800754a:	4313      	orrs	r3, r2
 800754c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	8bfa      	ldrh	r2, [r7, #30]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	e05b      	b.n	8007610 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800755e:	e057      	b.n	8007610 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007560:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007564:	2b08      	cmp	r3, #8
 8007566:	d828      	bhi.n	80075ba <UART_SetConfig+0x50e>
 8007568:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <UART_SetConfig+0x4c4>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	08007595 	.word	0x08007595
 8007574:	0800759d 	.word	0x0800759d
 8007578:	080075a5 	.word	0x080075a5
 800757c:	080075bb 	.word	0x080075bb
 8007580:	080075ab 	.word	0x080075ab
 8007584:	080075bb 	.word	0x080075bb
 8007588:	080075bb 	.word	0x080075bb
 800758c:	080075bb 	.word	0x080075bb
 8007590:	080075b3 	.word	0x080075b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007594:	f7fd f8ba 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8007598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800759a:	e014      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800759c:	f7fd f8cc 	bl	8004738 <HAL_RCC_GetPCLK2Freq>
 80075a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075a2:	e010      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075a4:	4b26      	ldr	r3, [pc, #152]	@ (8007640 <UART_SetConfig+0x594>)
 80075a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075a8:	e00d      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075aa:	f7fd f841 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 80075ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075b0:	e009      	b.n	80075c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075b8:	e005      	b.n	80075c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075c4:	bf00      	nop
    }

    if (pclk != 0U)
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d021      	beq.n	8007610 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d0:	4a1a      	ldr	r2, [pc, #104]	@ (800763c <UART_SetConfig+0x590>)
 80075d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d6:	461a      	mov	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	fbb3 f2f2 	udiv	r2, r3, r2
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	441a      	add	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	2b0f      	cmp	r3, #15
 80075f4:	d909      	bls.n	800760a <UART_SetConfig+0x55e>
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fc:	d205      	bcs.n	800760a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	b29a      	uxth	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60da      	str	r2, [r3, #12]
 8007608:	e002      	b.n	8007610 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2201      	movs	r2, #1
 8007614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2201      	movs	r2, #1
 800761c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	2200      	movs	r2, #0
 8007624:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2200      	movs	r2, #0
 800762a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800762c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007630:	4618      	mov	r0, r3
 8007632:	3730      	adds	r7, #48	@ 0x30
 8007634:	46bd      	mov	sp, r7
 8007636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763a:	bf00      	nop
 800763c:	0800c4b4 	.word	0x0800c4b4
 8007640:	00f42400 	.word	0x00f42400

08007644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00a      	beq.n	800766e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01a      	beq.n	800775a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800773e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007742:	d10a      	bne.n	800775a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
  }
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b098      	sub	sp, #96	@ 0x60
 800778c:	af02      	add	r7, sp, #8
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007798:	f7fb ff9c 	bl	80036d4 <HAL_GetTick>
 800779c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d12f      	bne.n	800780c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b4:	2200      	movs	r2, #0
 80077b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f88e 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d022      	beq.n	800780c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077da:	653b      	str	r3, [r7, #80]	@ 0x50
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	461a      	mov	r2, r3
 80077e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e6      	bne.n	80077c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e063      	b.n	80078d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b04      	cmp	r3, #4
 8007818:	d149      	bne.n	80078ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800781a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007822:	2200      	movs	r2, #0
 8007824:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f857 	bl	80078dc <UART_WaitOnFlagUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d03c      	beq.n	80078ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	623b      	str	r3, [r7, #32]
   return(result);
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007852:	633b      	str	r3, [r7, #48]	@ 0x30
 8007854:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3308      	adds	r3, #8
 800786c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	60fb      	str	r3, [r7, #12]
   return(result);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007886:	61fa      	str	r2, [r7, #28]
 8007888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	69b9      	ldr	r1, [r7, #24]
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	617b      	str	r3, [r7, #20]
   return(result);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e5      	bne.n	8007866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e012      	b.n	80078d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3758      	adds	r7, #88	@ 0x58
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	4613      	mov	r3, r2
 80078ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ec:	e04f      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078f4:	d04b      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fb feed 	bl	80036d4 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <UART_WaitOnFlagUntilTimeout+0x30>
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e04e      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d037      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b80      	cmp	r3, #128	@ 0x80
 8007922:	d034      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d031      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b08      	cmp	r3, #8
 8007936:	d110      	bne.n	800795a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2208      	movs	r2, #8
 800793e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f838 	bl	80079b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2208      	movs	r2, #8
 800794a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e029      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007968:	d111      	bne.n	800798e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f81e 	bl	80079b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e00f      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4013      	ands	r3, r2
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	429a      	cmp	r2, r3
 800799c:	bf0c      	ite	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	2300      	movne	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d0a0      	beq.n	80078ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b095      	sub	sp, #84	@ 0x54
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80079de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e6      	bne.n	80079be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a06:	f023 0301 	bic.w	r3, r3, #1
 8007a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3308      	adds	r3, #8
 8007a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e3      	bne.n	80079f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d118      	bne.n	8007a62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f023 0310 	bic.w	r3, r3, #16
 8007a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a4e:	61bb      	str	r3, [r7, #24]
 8007a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6979      	ldr	r1, [r7, #20]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e6      	bne.n	8007a30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a76:	bf00      	nop
 8007a78:	3754      	adds	r7, #84	@ 0x54
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e027      	b.n	8007ae8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2224      	movs	r2, #36	@ 0x24
 8007aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e02d      	b.n	8007b68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2224      	movs	r2, #36	@ 0x24
 8007b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f84f 	bl	8007bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e02d      	b.n	8007be4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	@ 0x24
 8007b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f811 	bl	8007bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c0c:	e031      	b.n	8007c72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c0e:	2308      	movs	r3, #8
 8007c10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c12:	2308      	movs	r3, #8
 8007c14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	0e5b      	lsrs	r3, r3, #25
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	0f5b      	lsrs	r3, r3, #29
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	7b3a      	ldrb	r2, [r7, #12]
 8007c3a:	4911      	ldr	r1, [pc, #68]	@ (8007c80 <UARTEx_SetNbDataToProcess+0x94>)
 8007c3c:	5c8a      	ldrb	r2, [r1, r2]
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c42:	7b3a      	ldrb	r2, [r7, #12]
 8007c44:	490f      	ldr	r1, [pc, #60]	@ (8007c84 <UARTEx_SetNbDataToProcess+0x98>)
 8007c46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c48:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	7b7a      	ldrb	r2, [r7, #13]
 8007c58:	4909      	ldr	r1, [pc, #36]	@ (8007c80 <UARTEx_SetNbDataToProcess+0x94>)
 8007c5a:	5c8a      	ldrb	r2, [r1, r2]
 8007c5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c60:	7b7a      	ldrb	r2, [r7, #13]
 8007c62:	4908      	ldr	r1, [pc, #32]	@ (8007c84 <UARTEx_SetNbDataToProcess+0x98>)
 8007c64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c66:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	0800c4cc 	.word	0x0800c4cc
 8007c84:	0800c4d4 	.word	0x0800c4d4

08007c88 <__cvt>:
 8007c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	ec57 6b10 	vmov	r6, r7, d0
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	460c      	mov	r4, r1
 8007c94:	4619      	mov	r1, r3
 8007c96:	463b      	mov	r3, r7
 8007c98:	bfbb      	ittet	lt
 8007c9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c9e:	461f      	movlt	r7, r3
 8007ca0:	2300      	movge	r3, #0
 8007ca2:	232d      	movlt	r3, #45	@ 0x2d
 8007ca4:	700b      	strb	r3, [r1, #0]
 8007ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007cac:	4691      	mov	r9, r2
 8007cae:	f023 0820 	bic.w	r8, r3, #32
 8007cb2:	bfbc      	itt	lt
 8007cb4:	4632      	movlt	r2, r6
 8007cb6:	4616      	movlt	r6, r2
 8007cb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cbc:	d005      	beq.n	8007cca <__cvt+0x42>
 8007cbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007cc2:	d100      	bne.n	8007cc6 <__cvt+0x3e>
 8007cc4:	3401      	adds	r4, #1
 8007cc6:	2102      	movs	r1, #2
 8007cc8:	e000      	b.n	8007ccc <__cvt+0x44>
 8007cca:	2103      	movs	r1, #3
 8007ccc:	ab03      	add	r3, sp, #12
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	ab02      	add	r3, sp, #8
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	ec47 6b10 	vmov	d0, r6, r7
 8007cd8:	4653      	mov	r3, sl
 8007cda:	4622      	mov	r2, r4
 8007cdc:	f001 f948 	bl	8008f70 <_dtoa_r>
 8007ce0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ce4:	4605      	mov	r5, r0
 8007ce6:	d119      	bne.n	8007d1c <__cvt+0x94>
 8007ce8:	f019 0f01 	tst.w	r9, #1
 8007cec:	d00e      	beq.n	8007d0c <__cvt+0x84>
 8007cee:	eb00 0904 	add.w	r9, r0, r4
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f8 ff0d 	bl	8000b18 <__aeabi_dcmpeq>
 8007cfe:	b108      	cbz	r0, 8007d04 <__cvt+0x7c>
 8007d00:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d04:	2230      	movs	r2, #48	@ 0x30
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	454b      	cmp	r3, r9
 8007d0a:	d31e      	bcc.n	8007d4a <__cvt+0xc2>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d10:	1b5b      	subs	r3, r3, r5
 8007d12:	4628      	mov	r0, r5
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	b004      	add	sp, #16
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d20:	eb00 0904 	add.w	r9, r0, r4
 8007d24:	d1e5      	bne.n	8007cf2 <__cvt+0x6a>
 8007d26:	7803      	ldrb	r3, [r0, #0]
 8007d28:	2b30      	cmp	r3, #48	@ 0x30
 8007d2a:	d10a      	bne.n	8007d42 <__cvt+0xba>
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4630      	mov	r0, r6
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7f8 fef0 	bl	8000b18 <__aeabi_dcmpeq>
 8007d38:	b918      	cbnz	r0, 8007d42 <__cvt+0xba>
 8007d3a:	f1c4 0401 	rsb	r4, r4, #1
 8007d3e:	f8ca 4000 	str.w	r4, [sl]
 8007d42:	f8da 3000 	ldr.w	r3, [sl]
 8007d46:	4499      	add	r9, r3
 8007d48:	e7d3      	b.n	8007cf2 <__cvt+0x6a>
 8007d4a:	1c59      	adds	r1, r3, #1
 8007d4c:	9103      	str	r1, [sp, #12]
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	e7d9      	b.n	8007d06 <__cvt+0x7e>

08007d52 <__exponent>:
 8007d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d54:	2900      	cmp	r1, #0
 8007d56:	bfba      	itte	lt
 8007d58:	4249      	neglt	r1, r1
 8007d5a:	232d      	movlt	r3, #45	@ 0x2d
 8007d5c:	232b      	movge	r3, #43	@ 0x2b
 8007d5e:	2909      	cmp	r1, #9
 8007d60:	7002      	strb	r2, [r0, #0]
 8007d62:	7043      	strb	r3, [r0, #1]
 8007d64:	dd29      	ble.n	8007dba <__exponent+0x68>
 8007d66:	f10d 0307 	add.w	r3, sp, #7
 8007d6a:	461d      	mov	r5, r3
 8007d6c:	270a      	movs	r7, #10
 8007d6e:	461a      	mov	r2, r3
 8007d70:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d74:	fb07 1416 	mls	r4, r7, r6, r1
 8007d78:	3430      	adds	r4, #48	@ 0x30
 8007d7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d7e:	460c      	mov	r4, r1
 8007d80:	2c63      	cmp	r4, #99	@ 0x63
 8007d82:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007d86:	4631      	mov	r1, r6
 8007d88:	dcf1      	bgt.n	8007d6e <__exponent+0x1c>
 8007d8a:	3130      	adds	r1, #48	@ 0x30
 8007d8c:	1e94      	subs	r4, r2, #2
 8007d8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d92:	1c41      	adds	r1, r0, #1
 8007d94:	4623      	mov	r3, r4
 8007d96:	42ab      	cmp	r3, r5
 8007d98:	d30a      	bcc.n	8007db0 <__exponent+0x5e>
 8007d9a:	f10d 0309 	add.w	r3, sp, #9
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	42ac      	cmp	r4, r5
 8007da2:	bf88      	it	hi
 8007da4:	2300      	movhi	r3, #0
 8007da6:	3302      	adds	r3, #2
 8007da8:	4403      	add	r3, r0
 8007daa:	1a18      	subs	r0, r3, r0
 8007dac:	b003      	add	sp, #12
 8007dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007db0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007db4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007db8:	e7ed      	b.n	8007d96 <__exponent+0x44>
 8007dba:	2330      	movs	r3, #48	@ 0x30
 8007dbc:	3130      	adds	r1, #48	@ 0x30
 8007dbe:	7083      	strb	r3, [r0, #2]
 8007dc0:	70c1      	strb	r1, [r0, #3]
 8007dc2:	1d03      	adds	r3, r0, #4
 8007dc4:	e7f1      	b.n	8007daa <__exponent+0x58>
	...

08007dc8 <_printf_float>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	b08d      	sub	sp, #52	@ 0x34
 8007dce:	460c      	mov	r4, r1
 8007dd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007dd4:	4616      	mov	r6, r2
 8007dd6:	461f      	mov	r7, r3
 8007dd8:	4605      	mov	r5, r0
 8007dda:	f000 ffb3 	bl	8008d44 <_localeconv_r>
 8007dde:	6803      	ldr	r3, [r0, #0]
 8007de0:	9304      	str	r3, [sp, #16]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7f8 fa6c 	bl	80002c0 <strlen>
 8007de8:	2300      	movs	r3, #0
 8007dea:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dec:	f8d8 3000 	ldr.w	r3, [r8]
 8007df0:	9005      	str	r0, [sp, #20]
 8007df2:	3307      	adds	r3, #7
 8007df4:	f023 0307 	bic.w	r3, r3, #7
 8007df8:	f103 0208 	add.w	r2, r3, #8
 8007dfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e00:	f8d4 b000 	ldr.w	fp, [r4]
 8007e04:	f8c8 2000 	str.w	r2, [r8]
 8007e08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007e10:	9307      	str	r3, [sp, #28]
 8007e12:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e1e:	4b9c      	ldr	r3, [pc, #624]	@ (8008090 <_printf_float+0x2c8>)
 8007e20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e24:	f7f8 feaa 	bl	8000b7c <__aeabi_dcmpun>
 8007e28:	bb70      	cbnz	r0, 8007e88 <_printf_float+0xc0>
 8007e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e2e:	4b98      	ldr	r3, [pc, #608]	@ (8008090 <_printf_float+0x2c8>)
 8007e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e34:	f7f8 fe84 	bl	8000b40 <__aeabi_dcmple>
 8007e38:	bb30      	cbnz	r0, 8007e88 <_printf_float+0xc0>
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7f8 fe73 	bl	8000b2c <__aeabi_dcmplt>
 8007e46:	b110      	cbz	r0, 8007e4e <_printf_float+0x86>
 8007e48:	232d      	movs	r3, #45	@ 0x2d
 8007e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e4e:	4a91      	ldr	r2, [pc, #580]	@ (8008094 <_printf_float+0x2cc>)
 8007e50:	4b91      	ldr	r3, [pc, #580]	@ (8008098 <_printf_float+0x2d0>)
 8007e52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e56:	bf8c      	ite	hi
 8007e58:	4690      	movhi	r8, r2
 8007e5a:	4698      	movls	r8, r3
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	6123      	str	r3, [r4, #16]
 8007e60:	f02b 0304 	bic.w	r3, fp, #4
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	f04f 0900 	mov.w	r9, #0
 8007e6a:	9700      	str	r7, [sp, #0]
 8007e6c:	4633      	mov	r3, r6
 8007e6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e70:	4621      	mov	r1, r4
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 f9d2 	bl	800821c <_printf_common>
 8007e78:	3001      	adds	r0, #1
 8007e7a:	f040 808d 	bne.w	8007f98 <_printf_float+0x1d0>
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e82:	b00d      	add	sp, #52	@ 0x34
 8007e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4649      	mov	r1, r9
 8007e90:	f7f8 fe74 	bl	8000b7c <__aeabi_dcmpun>
 8007e94:	b140      	cbz	r0, 8007ea8 <_printf_float+0xe0>
 8007e96:	464b      	mov	r3, r9
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	bfbc      	itt	lt
 8007e9c:	232d      	movlt	r3, #45	@ 0x2d
 8007e9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800809c <_printf_float+0x2d4>)
 8007ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80080a0 <_printf_float+0x2d8>)
 8007ea6:	e7d4      	b.n	8007e52 <_printf_float+0x8a>
 8007ea8:	6863      	ldr	r3, [r4, #4]
 8007eaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007eae:	9206      	str	r2, [sp, #24]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	d13b      	bne.n	8007f2c <_printf_float+0x164>
 8007eb4:	2306      	movs	r3, #6
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	6022      	str	r2, [r4, #0]
 8007ec0:	9303      	str	r3, [sp, #12]
 8007ec2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ec4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ec8:	ab09      	add	r3, sp, #36	@ 0x24
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	6861      	ldr	r1, [r4, #4]
 8007ece:	ec49 8b10 	vmov	d0, r8, r9
 8007ed2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7ff fed6 	bl	8007c88 <__cvt>
 8007edc:	9b06      	ldr	r3, [sp, #24]
 8007ede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ee0:	2b47      	cmp	r3, #71	@ 0x47
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	d129      	bne.n	8007f3a <_printf_float+0x172>
 8007ee6:	1cc8      	adds	r0, r1, #3
 8007ee8:	db02      	blt.n	8007ef0 <_printf_float+0x128>
 8007eea:	6863      	ldr	r3, [r4, #4]
 8007eec:	4299      	cmp	r1, r3
 8007eee:	dd41      	ble.n	8007f74 <_printf_float+0x1ac>
 8007ef0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ef4:	fa5f fa8a 	uxtb.w	sl, sl
 8007ef8:	3901      	subs	r1, #1
 8007efa:	4652      	mov	r2, sl
 8007efc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007f00:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f02:	f7ff ff26 	bl	8007d52 <__exponent>
 8007f06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f08:	1813      	adds	r3, r2, r0
 8007f0a:	2a01      	cmp	r2, #1
 8007f0c:	4681      	mov	r9, r0
 8007f0e:	6123      	str	r3, [r4, #16]
 8007f10:	dc02      	bgt.n	8007f18 <_printf_float+0x150>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	07d2      	lsls	r2, r2, #31
 8007f16:	d501      	bpl.n	8007f1c <_printf_float+0x154>
 8007f18:	3301      	adds	r3, #1
 8007f1a:	6123      	str	r3, [r4, #16]
 8007f1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0a2      	beq.n	8007e6a <_printf_float+0xa2>
 8007f24:	232d      	movs	r3, #45	@ 0x2d
 8007f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f2a:	e79e      	b.n	8007e6a <_printf_float+0xa2>
 8007f2c:	9a06      	ldr	r2, [sp, #24]
 8007f2e:	2a47      	cmp	r2, #71	@ 0x47
 8007f30:	d1c2      	bne.n	8007eb8 <_printf_float+0xf0>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1c0      	bne.n	8007eb8 <_printf_float+0xf0>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e7bd      	b.n	8007eb6 <_printf_float+0xee>
 8007f3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f3e:	d9db      	bls.n	8007ef8 <_printf_float+0x130>
 8007f40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f44:	d118      	bne.n	8007f78 <_printf_float+0x1b0>
 8007f46:	2900      	cmp	r1, #0
 8007f48:	6863      	ldr	r3, [r4, #4]
 8007f4a:	dd0b      	ble.n	8007f64 <_printf_float+0x19c>
 8007f4c:	6121      	str	r1, [r4, #16]
 8007f4e:	b913      	cbnz	r3, 8007f56 <_printf_float+0x18e>
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	07d0      	lsls	r0, r2, #31
 8007f54:	d502      	bpl.n	8007f5c <_printf_float+0x194>
 8007f56:	3301      	adds	r3, #1
 8007f58:	440b      	add	r3, r1
 8007f5a:	6123      	str	r3, [r4, #16]
 8007f5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f5e:	f04f 0900 	mov.w	r9, #0
 8007f62:	e7db      	b.n	8007f1c <_printf_float+0x154>
 8007f64:	b913      	cbnz	r3, 8007f6c <_printf_float+0x1a4>
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	07d2      	lsls	r2, r2, #31
 8007f6a:	d501      	bpl.n	8007f70 <_printf_float+0x1a8>
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	e7f4      	b.n	8007f5a <_printf_float+0x192>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e7f2      	b.n	8007f5a <_printf_float+0x192>
 8007f74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	db05      	blt.n	8007f8a <_printf_float+0x1c2>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	6121      	str	r1, [r4, #16]
 8007f82:	07d8      	lsls	r0, r3, #31
 8007f84:	d5ea      	bpl.n	8007f5c <_printf_float+0x194>
 8007f86:	1c4b      	adds	r3, r1, #1
 8007f88:	e7e7      	b.n	8007f5a <_printf_float+0x192>
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	bfd4      	ite	le
 8007f8e:	f1c1 0202 	rsble	r2, r1, #2
 8007f92:	2201      	movgt	r2, #1
 8007f94:	4413      	add	r3, r2
 8007f96:	e7e0      	b.n	8007f5a <_printf_float+0x192>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	055a      	lsls	r2, r3, #21
 8007f9c:	d407      	bmi.n	8007fae <_printf_float+0x1e6>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b8      	blx	r7
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d12b      	bne.n	8008004 <_printf_float+0x23c>
 8007fac:	e767      	b.n	8007e7e <_printf_float+0xb6>
 8007fae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007fb2:	f240 80dd 	bls.w	8008170 <_printf_float+0x3a8>
 8007fb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f7f8 fdab 	bl	8000b18 <__aeabi_dcmpeq>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d033      	beq.n	800802e <_printf_float+0x266>
 8007fc6:	4a37      	ldr	r2, [pc, #220]	@ (80080a4 <_printf_float+0x2dc>)
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4628      	mov	r0, r5
 8007fce:	47b8      	blx	r7
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	f43f af54 	beq.w	8007e7e <_printf_float+0xb6>
 8007fd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007fda:	4543      	cmp	r3, r8
 8007fdc:	db02      	blt.n	8007fe4 <_printf_float+0x21c>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	07d8      	lsls	r0, r3, #31
 8007fe2:	d50f      	bpl.n	8008004 <_printf_float+0x23c>
 8007fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f43f af45 	beq.w	8007e7e <_printf_float+0xb6>
 8007ff4:	f04f 0900 	mov.w	r9, #0
 8007ff8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007ffc:	f104 0a1a 	add.w	sl, r4, #26
 8008000:	45c8      	cmp	r8, r9
 8008002:	dc09      	bgt.n	8008018 <_printf_float+0x250>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	079b      	lsls	r3, r3, #30
 8008008:	f100 8103 	bmi.w	8008212 <_printf_float+0x44a>
 800800c:	68e0      	ldr	r0, [r4, #12]
 800800e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008010:	4298      	cmp	r0, r3
 8008012:	bfb8      	it	lt
 8008014:	4618      	movlt	r0, r3
 8008016:	e734      	b.n	8007e82 <_printf_float+0xba>
 8008018:	2301      	movs	r3, #1
 800801a:	4652      	mov	r2, sl
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	f43f af2b 	beq.w	8007e7e <_printf_float+0xb6>
 8008028:	f109 0901 	add.w	r9, r9, #1
 800802c:	e7e8      	b.n	8008000 <_printf_float+0x238>
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	dc39      	bgt.n	80080a8 <_printf_float+0x2e0>
 8008034:	4a1b      	ldr	r2, [pc, #108]	@ (80080a4 <_printf_float+0x2dc>)
 8008036:	2301      	movs	r3, #1
 8008038:	4631      	mov	r1, r6
 800803a:	4628      	mov	r0, r5
 800803c:	47b8      	blx	r7
 800803e:	3001      	adds	r0, #1
 8008040:	f43f af1d 	beq.w	8007e7e <_printf_float+0xb6>
 8008044:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008048:	ea59 0303 	orrs.w	r3, r9, r3
 800804c:	d102      	bne.n	8008054 <_printf_float+0x28c>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	07d9      	lsls	r1, r3, #31
 8008052:	d5d7      	bpl.n	8008004 <_printf_float+0x23c>
 8008054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008058:	4631      	mov	r1, r6
 800805a:	4628      	mov	r0, r5
 800805c:	47b8      	blx	r7
 800805e:	3001      	adds	r0, #1
 8008060:	f43f af0d 	beq.w	8007e7e <_printf_float+0xb6>
 8008064:	f04f 0a00 	mov.w	sl, #0
 8008068:	f104 0b1a 	add.w	fp, r4, #26
 800806c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800806e:	425b      	negs	r3, r3
 8008070:	4553      	cmp	r3, sl
 8008072:	dc01      	bgt.n	8008078 <_printf_float+0x2b0>
 8008074:	464b      	mov	r3, r9
 8008076:	e793      	b.n	8007fa0 <_printf_float+0x1d8>
 8008078:	2301      	movs	r3, #1
 800807a:	465a      	mov	r2, fp
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	f43f aefb 	beq.w	8007e7e <_printf_float+0xb6>
 8008088:	f10a 0a01 	add.w	sl, sl, #1
 800808c:	e7ee      	b.n	800806c <_printf_float+0x2a4>
 800808e:	bf00      	nop
 8008090:	7fefffff 	.word	0x7fefffff
 8008094:	0800c4e0 	.word	0x0800c4e0
 8008098:	0800c4dc 	.word	0x0800c4dc
 800809c:	0800c4e8 	.word	0x0800c4e8
 80080a0:	0800c4e4 	.word	0x0800c4e4
 80080a4:	0800c4ec 	.word	0x0800c4ec
 80080a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080ae:	4553      	cmp	r3, sl
 80080b0:	bfa8      	it	ge
 80080b2:	4653      	movge	r3, sl
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	4699      	mov	r9, r3
 80080b8:	dc36      	bgt.n	8008128 <_printf_float+0x360>
 80080ba:	f04f 0b00 	mov.w	fp, #0
 80080be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c2:	f104 021a 	add.w	r2, r4, #26
 80080c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80080c8:	9306      	str	r3, [sp, #24]
 80080ca:	eba3 0309 	sub.w	r3, r3, r9
 80080ce:	455b      	cmp	r3, fp
 80080d0:	dc31      	bgt.n	8008136 <_printf_float+0x36e>
 80080d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d4:	459a      	cmp	sl, r3
 80080d6:	dc3a      	bgt.n	800814e <_printf_float+0x386>
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	07da      	lsls	r2, r3, #31
 80080dc:	d437      	bmi.n	800814e <_printf_float+0x386>
 80080de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e0:	ebaa 0903 	sub.w	r9, sl, r3
 80080e4:	9b06      	ldr	r3, [sp, #24]
 80080e6:	ebaa 0303 	sub.w	r3, sl, r3
 80080ea:	4599      	cmp	r9, r3
 80080ec:	bfa8      	it	ge
 80080ee:	4699      	movge	r9, r3
 80080f0:	f1b9 0f00 	cmp.w	r9, #0
 80080f4:	dc33      	bgt.n	800815e <_printf_float+0x396>
 80080f6:	f04f 0800 	mov.w	r8, #0
 80080fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080fe:	f104 0b1a 	add.w	fp, r4, #26
 8008102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008104:	ebaa 0303 	sub.w	r3, sl, r3
 8008108:	eba3 0309 	sub.w	r3, r3, r9
 800810c:	4543      	cmp	r3, r8
 800810e:	f77f af79 	ble.w	8008004 <_printf_float+0x23c>
 8008112:	2301      	movs	r3, #1
 8008114:	465a      	mov	r2, fp
 8008116:	4631      	mov	r1, r6
 8008118:	4628      	mov	r0, r5
 800811a:	47b8      	blx	r7
 800811c:	3001      	adds	r0, #1
 800811e:	f43f aeae 	beq.w	8007e7e <_printf_float+0xb6>
 8008122:	f108 0801 	add.w	r8, r8, #1
 8008126:	e7ec      	b.n	8008102 <_printf_float+0x33a>
 8008128:	4642      	mov	r2, r8
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	d1c2      	bne.n	80080ba <_printf_float+0x2f2>
 8008134:	e6a3      	b.n	8007e7e <_printf_float+0xb6>
 8008136:	2301      	movs	r3, #1
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	9206      	str	r2, [sp, #24]
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	f43f ae9c 	beq.w	8007e7e <_printf_float+0xb6>
 8008146:	9a06      	ldr	r2, [sp, #24]
 8008148:	f10b 0b01 	add.w	fp, fp, #1
 800814c:	e7bb      	b.n	80080c6 <_printf_float+0x2fe>
 800814e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	47b8      	blx	r7
 8008158:	3001      	adds	r0, #1
 800815a:	d1c0      	bne.n	80080de <_printf_float+0x316>
 800815c:	e68f      	b.n	8007e7e <_printf_float+0xb6>
 800815e:	9a06      	ldr	r2, [sp, #24]
 8008160:	464b      	mov	r3, r9
 8008162:	4442      	add	r2, r8
 8008164:	4631      	mov	r1, r6
 8008166:	4628      	mov	r0, r5
 8008168:	47b8      	blx	r7
 800816a:	3001      	adds	r0, #1
 800816c:	d1c3      	bne.n	80080f6 <_printf_float+0x32e>
 800816e:	e686      	b.n	8007e7e <_printf_float+0xb6>
 8008170:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008174:	f1ba 0f01 	cmp.w	sl, #1
 8008178:	dc01      	bgt.n	800817e <_printf_float+0x3b6>
 800817a:	07db      	lsls	r3, r3, #31
 800817c:	d536      	bpl.n	80081ec <_printf_float+0x424>
 800817e:	2301      	movs	r3, #1
 8008180:	4642      	mov	r2, r8
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	f43f ae78 	beq.w	8007e7e <_printf_float+0xb6>
 800818e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	f43f ae70 	beq.w	8007e7e <_printf_float+0xb6>
 800819e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80081a2:	2200      	movs	r2, #0
 80081a4:	2300      	movs	r3, #0
 80081a6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80081aa:	f7f8 fcb5 	bl	8000b18 <__aeabi_dcmpeq>
 80081ae:	b9c0      	cbnz	r0, 80081e2 <_printf_float+0x41a>
 80081b0:	4653      	mov	r3, sl
 80081b2:	f108 0201 	add.w	r2, r8, #1
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	d10c      	bne.n	80081da <_printf_float+0x412>
 80081c0:	e65d      	b.n	8007e7e <_printf_float+0xb6>
 80081c2:	2301      	movs	r3, #1
 80081c4:	465a      	mov	r2, fp
 80081c6:	4631      	mov	r1, r6
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f ae56 	beq.w	8007e7e <_printf_float+0xb6>
 80081d2:	f108 0801 	add.w	r8, r8, #1
 80081d6:	45d0      	cmp	r8, sl
 80081d8:	dbf3      	blt.n	80081c2 <_printf_float+0x3fa>
 80081da:	464b      	mov	r3, r9
 80081dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081e0:	e6df      	b.n	8007fa2 <_printf_float+0x1da>
 80081e2:	f04f 0800 	mov.w	r8, #0
 80081e6:	f104 0b1a 	add.w	fp, r4, #26
 80081ea:	e7f4      	b.n	80081d6 <_printf_float+0x40e>
 80081ec:	2301      	movs	r3, #1
 80081ee:	4642      	mov	r2, r8
 80081f0:	e7e1      	b.n	80081b6 <_printf_float+0x3ee>
 80081f2:	2301      	movs	r3, #1
 80081f4:	464a      	mov	r2, r9
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	f43f ae3e 	beq.w	8007e7e <_printf_float+0xb6>
 8008202:	f108 0801 	add.w	r8, r8, #1
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800820a:	1a5b      	subs	r3, r3, r1
 800820c:	4543      	cmp	r3, r8
 800820e:	dcf0      	bgt.n	80081f2 <_printf_float+0x42a>
 8008210:	e6fc      	b.n	800800c <_printf_float+0x244>
 8008212:	f04f 0800 	mov.w	r8, #0
 8008216:	f104 0919 	add.w	r9, r4, #25
 800821a:	e7f4      	b.n	8008206 <_printf_float+0x43e>

0800821c <_printf_common>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	4616      	mov	r6, r2
 8008222:	4698      	mov	r8, r3
 8008224:	688a      	ldr	r2, [r1, #8]
 8008226:	690b      	ldr	r3, [r1, #16]
 8008228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800822c:	4293      	cmp	r3, r2
 800822e:	bfb8      	it	lt
 8008230:	4613      	movlt	r3, r2
 8008232:	6033      	str	r3, [r6, #0]
 8008234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008238:	4607      	mov	r7, r0
 800823a:	460c      	mov	r4, r1
 800823c:	b10a      	cbz	r2, 8008242 <_printf_common+0x26>
 800823e:	3301      	adds	r3, #1
 8008240:	6033      	str	r3, [r6, #0]
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	0699      	lsls	r1, r3, #26
 8008246:	bf42      	ittt	mi
 8008248:	6833      	ldrmi	r3, [r6, #0]
 800824a:	3302      	addmi	r3, #2
 800824c:	6033      	strmi	r3, [r6, #0]
 800824e:	6825      	ldr	r5, [r4, #0]
 8008250:	f015 0506 	ands.w	r5, r5, #6
 8008254:	d106      	bne.n	8008264 <_printf_common+0x48>
 8008256:	f104 0a19 	add.w	sl, r4, #25
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	6832      	ldr	r2, [r6, #0]
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	42ab      	cmp	r3, r5
 8008262:	dc26      	bgt.n	80082b2 <_printf_common+0x96>
 8008264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	3b00      	subs	r3, #0
 800826c:	bf18      	it	ne
 800826e:	2301      	movne	r3, #1
 8008270:	0692      	lsls	r2, r2, #26
 8008272:	d42b      	bmi.n	80082cc <_printf_common+0xb0>
 8008274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008278:	4641      	mov	r1, r8
 800827a:	4638      	mov	r0, r7
 800827c:	47c8      	blx	r9
 800827e:	3001      	adds	r0, #1
 8008280:	d01e      	beq.n	80082c0 <_printf_common+0xa4>
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	f003 0306 	and.w	r3, r3, #6
 800828a:	2b04      	cmp	r3, #4
 800828c:	bf02      	ittt	eq
 800828e:	68e5      	ldreq	r5, [r4, #12]
 8008290:	6833      	ldreq	r3, [r6, #0]
 8008292:	1aed      	subeq	r5, r5, r3
 8008294:	68a3      	ldr	r3, [r4, #8]
 8008296:	bf0c      	ite	eq
 8008298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800829c:	2500      	movne	r5, #0
 800829e:	4293      	cmp	r3, r2
 80082a0:	bfc4      	itt	gt
 80082a2:	1a9b      	subgt	r3, r3, r2
 80082a4:	18ed      	addgt	r5, r5, r3
 80082a6:	2600      	movs	r6, #0
 80082a8:	341a      	adds	r4, #26
 80082aa:	42b5      	cmp	r5, r6
 80082ac:	d11a      	bne.n	80082e4 <_printf_common+0xc8>
 80082ae:	2000      	movs	r0, #0
 80082b0:	e008      	b.n	80082c4 <_printf_common+0xa8>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4652      	mov	r2, sl
 80082b6:	4641      	mov	r1, r8
 80082b8:	4638      	mov	r0, r7
 80082ba:	47c8      	blx	r9
 80082bc:	3001      	adds	r0, #1
 80082be:	d103      	bne.n	80082c8 <_printf_common+0xac>
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c8:	3501      	adds	r5, #1
 80082ca:	e7c6      	b.n	800825a <_printf_common+0x3e>
 80082cc:	18e1      	adds	r1, r4, r3
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	2030      	movs	r0, #48	@ 0x30
 80082d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082d6:	4422      	add	r2, r4
 80082d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082e0:	3302      	adds	r3, #2
 80082e2:	e7c7      	b.n	8008274 <_printf_common+0x58>
 80082e4:	2301      	movs	r3, #1
 80082e6:	4622      	mov	r2, r4
 80082e8:	4641      	mov	r1, r8
 80082ea:	4638      	mov	r0, r7
 80082ec:	47c8      	blx	r9
 80082ee:	3001      	adds	r0, #1
 80082f0:	d0e6      	beq.n	80082c0 <_printf_common+0xa4>
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7d9      	b.n	80082aa <_printf_common+0x8e>
	...

080082f8 <_printf_i>:
 80082f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082fc:	7e0f      	ldrb	r7, [r1, #24]
 80082fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008300:	2f78      	cmp	r7, #120	@ 0x78
 8008302:	4691      	mov	r9, r2
 8008304:	4680      	mov	r8, r0
 8008306:	460c      	mov	r4, r1
 8008308:	469a      	mov	sl, r3
 800830a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800830e:	d807      	bhi.n	8008320 <_printf_i+0x28>
 8008310:	2f62      	cmp	r7, #98	@ 0x62
 8008312:	d80a      	bhi.n	800832a <_printf_i+0x32>
 8008314:	2f00      	cmp	r7, #0
 8008316:	f000 80d1 	beq.w	80084bc <_printf_i+0x1c4>
 800831a:	2f58      	cmp	r7, #88	@ 0x58
 800831c:	f000 80b8 	beq.w	8008490 <_printf_i+0x198>
 8008320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008328:	e03a      	b.n	80083a0 <_printf_i+0xa8>
 800832a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800832e:	2b15      	cmp	r3, #21
 8008330:	d8f6      	bhi.n	8008320 <_printf_i+0x28>
 8008332:	a101      	add	r1, pc, #4	@ (adr r1, 8008338 <_printf_i+0x40>)
 8008334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008338:	08008391 	.word	0x08008391
 800833c:	080083a5 	.word	0x080083a5
 8008340:	08008321 	.word	0x08008321
 8008344:	08008321 	.word	0x08008321
 8008348:	08008321 	.word	0x08008321
 800834c:	08008321 	.word	0x08008321
 8008350:	080083a5 	.word	0x080083a5
 8008354:	08008321 	.word	0x08008321
 8008358:	08008321 	.word	0x08008321
 800835c:	08008321 	.word	0x08008321
 8008360:	08008321 	.word	0x08008321
 8008364:	080084a3 	.word	0x080084a3
 8008368:	080083cf 	.word	0x080083cf
 800836c:	0800845d 	.word	0x0800845d
 8008370:	08008321 	.word	0x08008321
 8008374:	08008321 	.word	0x08008321
 8008378:	080084c5 	.word	0x080084c5
 800837c:	08008321 	.word	0x08008321
 8008380:	080083cf 	.word	0x080083cf
 8008384:	08008321 	.word	0x08008321
 8008388:	08008321 	.word	0x08008321
 800838c:	08008465 	.word	0x08008465
 8008390:	6833      	ldr	r3, [r6, #0]
 8008392:	1d1a      	adds	r2, r3, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6032      	str	r2, [r6, #0]
 8008398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800839c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083a0:	2301      	movs	r3, #1
 80083a2:	e09c      	b.n	80084de <_printf_i+0x1e6>
 80083a4:	6833      	ldr	r3, [r6, #0]
 80083a6:	6820      	ldr	r0, [r4, #0]
 80083a8:	1d19      	adds	r1, r3, #4
 80083aa:	6031      	str	r1, [r6, #0]
 80083ac:	0606      	lsls	r6, r0, #24
 80083ae:	d501      	bpl.n	80083b4 <_printf_i+0xbc>
 80083b0:	681d      	ldr	r5, [r3, #0]
 80083b2:	e003      	b.n	80083bc <_printf_i+0xc4>
 80083b4:	0645      	lsls	r5, r0, #25
 80083b6:	d5fb      	bpl.n	80083b0 <_printf_i+0xb8>
 80083b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083bc:	2d00      	cmp	r5, #0
 80083be:	da03      	bge.n	80083c8 <_printf_i+0xd0>
 80083c0:	232d      	movs	r3, #45	@ 0x2d
 80083c2:	426d      	negs	r5, r5
 80083c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c8:	4858      	ldr	r0, [pc, #352]	@ (800852c <_printf_i+0x234>)
 80083ca:	230a      	movs	r3, #10
 80083cc:	e011      	b.n	80083f2 <_printf_i+0xfa>
 80083ce:	6821      	ldr	r1, [r4, #0]
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	0608      	lsls	r0, r1, #24
 80083d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80083d8:	d402      	bmi.n	80083e0 <_printf_i+0xe8>
 80083da:	0649      	lsls	r1, r1, #25
 80083dc:	bf48      	it	mi
 80083de:	b2ad      	uxthmi	r5, r5
 80083e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80083e2:	4852      	ldr	r0, [pc, #328]	@ (800852c <_printf_i+0x234>)
 80083e4:	6033      	str	r3, [r6, #0]
 80083e6:	bf14      	ite	ne
 80083e8:	230a      	movne	r3, #10
 80083ea:	2308      	moveq	r3, #8
 80083ec:	2100      	movs	r1, #0
 80083ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083f2:	6866      	ldr	r6, [r4, #4]
 80083f4:	60a6      	str	r6, [r4, #8]
 80083f6:	2e00      	cmp	r6, #0
 80083f8:	db05      	blt.n	8008406 <_printf_i+0x10e>
 80083fa:	6821      	ldr	r1, [r4, #0]
 80083fc:	432e      	orrs	r6, r5
 80083fe:	f021 0104 	bic.w	r1, r1, #4
 8008402:	6021      	str	r1, [r4, #0]
 8008404:	d04b      	beq.n	800849e <_printf_i+0x1a6>
 8008406:	4616      	mov	r6, r2
 8008408:	fbb5 f1f3 	udiv	r1, r5, r3
 800840c:	fb03 5711 	mls	r7, r3, r1, r5
 8008410:	5dc7      	ldrb	r7, [r0, r7]
 8008412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008416:	462f      	mov	r7, r5
 8008418:	42bb      	cmp	r3, r7
 800841a:	460d      	mov	r5, r1
 800841c:	d9f4      	bls.n	8008408 <_printf_i+0x110>
 800841e:	2b08      	cmp	r3, #8
 8008420:	d10b      	bne.n	800843a <_printf_i+0x142>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	07df      	lsls	r7, r3, #31
 8008426:	d508      	bpl.n	800843a <_printf_i+0x142>
 8008428:	6923      	ldr	r3, [r4, #16]
 800842a:	6861      	ldr	r1, [r4, #4]
 800842c:	4299      	cmp	r1, r3
 800842e:	bfde      	ittt	le
 8008430:	2330      	movle	r3, #48	@ 0x30
 8008432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008436:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800843a:	1b92      	subs	r2, r2, r6
 800843c:	6122      	str	r2, [r4, #16]
 800843e:	f8cd a000 	str.w	sl, [sp]
 8008442:	464b      	mov	r3, r9
 8008444:	aa03      	add	r2, sp, #12
 8008446:	4621      	mov	r1, r4
 8008448:	4640      	mov	r0, r8
 800844a:	f7ff fee7 	bl	800821c <_printf_common>
 800844e:	3001      	adds	r0, #1
 8008450:	d14a      	bne.n	80084e8 <_printf_i+0x1f0>
 8008452:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008456:	b004      	add	sp, #16
 8008458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	f043 0320 	orr.w	r3, r3, #32
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	4832      	ldr	r0, [pc, #200]	@ (8008530 <_printf_i+0x238>)
 8008466:	2778      	movs	r7, #120	@ 0x78
 8008468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	6831      	ldr	r1, [r6, #0]
 8008470:	061f      	lsls	r7, r3, #24
 8008472:	f851 5b04 	ldr.w	r5, [r1], #4
 8008476:	d402      	bmi.n	800847e <_printf_i+0x186>
 8008478:	065f      	lsls	r7, r3, #25
 800847a:	bf48      	it	mi
 800847c:	b2ad      	uxthmi	r5, r5
 800847e:	6031      	str	r1, [r6, #0]
 8008480:	07d9      	lsls	r1, r3, #31
 8008482:	bf44      	itt	mi
 8008484:	f043 0320 	orrmi.w	r3, r3, #32
 8008488:	6023      	strmi	r3, [r4, #0]
 800848a:	b11d      	cbz	r5, 8008494 <_printf_i+0x19c>
 800848c:	2310      	movs	r3, #16
 800848e:	e7ad      	b.n	80083ec <_printf_i+0xf4>
 8008490:	4826      	ldr	r0, [pc, #152]	@ (800852c <_printf_i+0x234>)
 8008492:	e7e9      	b.n	8008468 <_printf_i+0x170>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	f023 0320 	bic.w	r3, r3, #32
 800849a:	6023      	str	r3, [r4, #0]
 800849c:	e7f6      	b.n	800848c <_printf_i+0x194>
 800849e:	4616      	mov	r6, r2
 80084a0:	e7bd      	b.n	800841e <_printf_i+0x126>
 80084a2:	6833      	ldr	r3, [r6, #0]
 80084a4:	6825      	ldr	r5, [r4, #0]
 80084a6:	6961      	ldr	r1, [r4, #20]
 80084a8:	1d18      	adds	r0, r3, #4
 80084aa:	6030      	str	r0, [r6, #0]
 80084ac:	062e      	lsls	r6, r5, #24
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	d501      	bpl.n	80084b6 <_printf_i+0x1be>
 80084b2:	6019      	str	r1, [r3, #0]
 80084b4:	e002      	b.n	80084bc <_printf_i+0x1c4>
 80084b6:	0668      	lsls	r0, r5, #25
 80084b8:	d5fb      	bpl.n	80084b2 <_printf_i+0x1ba>
 80084ba:	8019      	strh	r1, [r3, #0]
 80084bc:	2300      	movs	r3, #0
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	4616      	mov	r6, r2
 80084c2:	e7bc      	b.n	800843e <_printf_i+0x146>
 80084c4:	6833      	ldr	r3, [r6, #0]
 80084c6:	1d1a      	adds	r2, r3, #4
 80084c8:	6032      	str	r2, [r6, #0]
 80084ca:	681e      	ldr	r6, [r3, #0]
 80084cc:	6862      	ldr	r2, [r4, #4]
 80084ce:	2100      	movs	r1, #0
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7f7 fea5 	bl	8000220 <memchr>
 80084d6:	b108      	cbz	r0, 80084dc <_printf_i+0x1e4>
 80084d8:	1b80      	subs	r0, r0, r6
 80084da:	6060      	str	r0, [r4, #4]
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	6123      	str	r3, [r4, #16]
 80084e0:	2300      	movs	r3, #0
 80084e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e6:	e7aa      	b.n	800843e <_printf_i+0x146>
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	4632      	mov	r2, r6
 80084ec:	4649      	mov	r1, r9
 80084ee:	4640      	mov	r0, r8
 80084f0:	47d0      	blx	sl
 80084f2:	3001      	adds	r0, #1
 80084f4:	d0ad      	beq.n	8008452 <_printf_i+0x15a>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	079b      	lsls	r3, r3, #30
 80084fa:	d413      	bmi.n	8008524 <_printf_i+0x22c>
 80084fc:	68e0      	ldr	r0, [r4, #12]
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	4298      	cmp	r0, r3
 8008502:	bfb8      	it	lt
 8008504:	4618      	movlt	r0, r3
 8008506:	e7a6      	b.n	8008456 <_printf_i+0x15e>
 8008508:	2301      	movs	r3, #1
 800850a:	4632      	mov	r2, r6
 800850c:	4649      	mov	r1, r9
 800850e:	4640      	mov	r0, r8
 8008510:	47d0      	blx	sl
 8008512:	3001      	adds	r0, #1
 8008514:	d09d      	beq.n	8008452 <_printf_i+0x15a>
 8008516:	3501      	adds	r5, #1
 8008518:	68e3      	ldr	r3, [r4, #12]
 800851a:	9903      	ldr	r1, [sp, #12]
 800851c:	1a5b      	subs	r3, r3, r1
 800851e:	42ab      	cmp	r3, r5
 8008520:	dcf2      	bgt.n	8008508 <_printf_i+0x210>
 8008522:	e7eb      	b.n	80084fc <_printf_i+0x204>
 8008524:	2500      	movs	r5, #0
 8008526:	f104 0619 	add.w	r6, r4, #25
 800852a:	e7f5      	b.n	8008518 <_printf_i+0x220>
 800852c:	0800c4ee 	.word	0x0800c4ee
 8008530:	0800c4ff 	.word	0x0800c4ff

08008534 <_scanf_float>:
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	b087      	sub	sp, #28
 800853a:	4691      	mov	r9, r2
 800853c:	9303      	str	r3, [sp, #12]
 800853e:	688b      	ldr	r3, [r1, #8]
 8008540:	1e5a      	subs	r2, r3, #1
 8008542:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008546:	bf81      	itttt	hi
 8008548:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800854c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008550:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008554:	608b      	strhi	r3, [r1, #8]
 8008556:	680b      	ldr	r3, [r1, #0]
 8008558:	460a      	mov	r2, r1
 800855a:	f04f 0500 	mov.w	r5, #0
 800855e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008562:	f842 3b1c 	str.w	r3, [r2], #28
 8008566:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800856a:	4680      	mov	r8, r0
 800856c:	460c      	mov	r4, r1
 800856e:	bf98      	it	ls
 8008570:	f04f 0b00 	movls.w	fp, #0
 8008574:	9201      	str	r2, [sp, #4]
 8008576:	4616      	mov	r6, r2
 8008578:	46aa      	mov	sl, r5
 800857a:	462f      	mov	r7, r5
 800857c:	9502      	str	r5, [sp, #8]
 800857e:	68a2      	ldr	r2, [r4, #8]
 8008580:	b15a      	cbz	r2, 800859a <_scanf_float+0x66>
 8008582:	f8d9 3000 	ldr.w	r3, [r9]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b4e      	cmp	r3, #78	@ 0x4e
 800858a:	d863      	bhi.n	8008654 <_scanf_float+0x120>
 800858c:	2b40      	cmp	r3, #64	@ 0x40
 800858e:	d83b      	bhi.n	8008608 <_scanf_float+0xd4>
 8008590:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008594:	b2c8      	uxtb	r0, r1
 8008596:	280e      	cmp	r0, #14
 8008598:	d939      	bls.n	800860e <_scanf_float+0xda>
 800859a:	b11f      	cbz	r7, 80085a4 <_scanf_float+0x70>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80085a8:	f1ba 0f01 	cmp.w	sl, #1
 80085ac:	f200 8114 	bhi.w	80087d8 <_scanf_float+0x2a4>
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	429e      	cmp	r6, r3
 80085b4:	f200 8105 	bhi.w	80087c2 <_scanf_float+0x28e>
 80085b8:	2001      	movs	r0, #1
 80085ba:	b007      	add	sp, #28
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80085c4:	2a0d      	cmp	r2, #13
 80085c6:	d8e8      	bhi.n	800859a <_scanf_float+0x66>
 80085c8:	a101      	add	r1, pc, #4	@ (adr r1, 80085d0 <_scanf_float+0x9c>)
 80085ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	08008719 	.word	0x08008719
 80085d4:	0800859b 	.word	0x0800859b
 80085d8:	0800859b 	.word	0x0800859b
 80085dc:	0800859b 	.word	0x0800859b
 80085e0:	08008775 	.word	0x08008775
 80085e4:	0800874f 	.word	0x0800874f
 80085e8:	0800859b 	.word	0x0800859b
 80085ec:	0800859b 	.word	0x0800859b
 80085f0:	08008727 	.word	0x08008727
 80085f4:	0800859b 	.word	0x0800859b
 80085f8:	0800859b 	.word	0x0800859b
 80085fc:	0800859b 	.word	0x0800859b
 8008600:	0800859b 	.word	0x0800859b
 8008604:	080086e3 	.word	0x080086e3
 8008608:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800860c:	e7da      	b.n	80085c4 <_scanf_float+0x90>
 800860e:	290e      	cmp	r1, #14
 8008610:	d8c3      	bhi.n	800859a <_scanf_float+0x66>
 8008612:	a001      	add	r0, pc, #4	@ (adr r0, 8008618 <_scanf_float+0xe4>)
 8008614:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008618:	080086d3 	.word	0x080086d3
 800861c:	0800859b 	.word	0x0800859b
 8008620:	080086d3 	.word	0x080086d3
 8008624:	08008763 	.word	0x08008763
 8008628:	0800859b 	.word	0x0800859b
 800862c:	08008675 	.word	0x08008675
 8008630:	080086b9 	.word	0x080086b9
 8008634:	080086b9 	.word	0x080086b9
 8008638:	080086b9 	.word	0x080086b9
 800863c:	080086b9 	.word	0x080086b9
 8008640:	080086b9 	.word	0x080086b9
 8008644:	080086b9 	.word	0x080086b9
 8008648:	080086b9 	.word	0x080086b9
 800864c:	080086b9 	.word	0x080086b9
 8008650:	080086b9 	.word	0x080086b9
 8008654:	2b6e      	cmp	r3, #110	@ 0x6e
 8008656:	d809      	bhi.n	800866c <_scanf_float+0x138>
 8008658:	2b60      	cmp	r3, #96	@ 0x60
 800865a:	d8b1      	bhi.n	80085c0 <_scanf_float+0x8c>
 800865c:	2b54      	cmp	r3, #84	@ 0x54
 800865e:	d07b      	beq.n	8008758 <_scanf_float+0x224>
 8008660:	2b59      	cmp	r3, #89	@ 0x59
 8008662:	d19a      	bne.n	800859a <_scanf_float+0x66>
 8008664:	2d07      	cmp	r5, #7
 8008666:	d198      	bne.n	800859a <_scanf_float+0x66>
 8008668:	2508      	movs	r5, #8
 800866a:	e02f      	b.n	80086cc <_scanf_float+0x198>
 800866c:	2b74      	cmp	r3, #116	@ 0x74
 800866e:	d073      	beq.n	8008758 <_scanf_float+0x224>
 8008670:	2b79      	cmp	r3, #121	@ 0x79
 8008672:	e7f6      	b.n	8008662 <_scanf_float+0x12e>
 8008674:	6821      	ldr	r1, [r4, #0]
 8008676:	05c8      	lsls	r0, r1, #23
 8008678:	d51e      	bpl.n	80086b8 <_scanf_float+0x184>
 800867a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800867e:	6021      	str	r1, [r4, #0]
 8008680:	3701      	adds	r7, #1
 8008682:	f1bb 0f00 	cmp.w	fp, #0
 8008686:	d003      	beq.n	8008690 <_scanf_float+0x15c>
 8008688:	3201      	adds	r2, #1
 800868a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800868e:	60a2      	str	r2, [r4, #8]
 8008690:	68a3      	ldr	r3, [r4, #8]
 8008692:	3b01      	subs	r3, #1
 8008694:	60a3      	str	r3, [r4, #8]
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	3301      	adds	r3, #1
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f8c9 3004 	str.w	r3, [r9, #4]
 80086a8:	f340 8082 	ble.w	80087b0 <_scanf_float+0x27c>
 80086ac:	f8d9 3000 	ldr.w	r3, [r9]
 80086b0:	3301      	adds	r3, #1
 80086b2:	f8c9 3000 	str.w	r3, [r9]
 80086b6:	e762      	b.n	800857e <_scanf_float+0x4a>
 80086b8:	eb1a 0105 	adds.w	r1, sl, r5
 80086bc:	f47f af6d 	bne.w	800859a <_scanf_float+0x66>
 80086c0:	6822      	ldr	r2, [r4, #0]
 80086c2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	460d      	mov	r5, r1
 80086ca:	468a      	mov	sl, r1
 80086cc:	f806 3b01 	strb.w	r3, [r6], #1
 80086d0:	e7de      	b.n	8008690 <_scanf_float+0x15c>
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	0610      	lsls	r0, r2, #24
 80086d6:	f57f af60 	bpl.w	800859a <_scanf_float+0x66>
 80086da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	e7f4      	b.n	80086cc <_scanf_float+0x198>
 80086e2:	f1ba 0f00 	cmp.w	sl, #0
 80086e6:	d10c      	bne.n	8008702 <_scanf_float+0x1ce>
 80086e8:	b977      	cbnz	r7, 8008708 <_scanf_float+0x1d4>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086f4:	d108      	bne.n	8008708 <_scanf_float+0x1d4>
 80086f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	f04f 0a01 	mov.w	sl, #1
 8008700:	e7e4      	b.n	80086cc <_scanf_float+0x198>
 8008702:	f1ba 0f02 	cmp.w	sl, #2
 8008706:	d050      	beq.n	80087aa <_scanf_float+0x276>
 8008708:	2d01      	cmp	r5, #1
 800870a:	d002      	beq.n	8008712 <_scanf_float+0x1de>
 800870c:	2d04      	cmp	r5, #4
 800870e:	f47f af44 	bne.w	800859a <_scanf_float+0x66>
 8008712:	3501      	adds	r5, #1
 8008714:	b2ed      	uxtb	r5, r5
 8008716:	e7d9      	b.n	80086cc <_scanf_float+0x198>
 8008718:	f1ba 0f01 	cmp.w	sl, #1
 800871c:	f47f af3d 	bne.w	800859a <_scanf_float+0x66>
 8008720:	f04f 0a02 	mov.w	sl, #2
 8008724:	e7d2      	b.n	80086cc <_scanf_float+0x198>
 8008726:	b975      	cbnz	r5, 8008746 <_scanf_float+0x212>
 8008728:	2f00      	cmp	r7, #0
 800872a:	f47f af37 	bne.w	800859c <_scanf_float+0x68>
 800872e:	6822      	ldr	r2, [r4, #0]
 8008730:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008734:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008738:	f040 8103 	bne.w	8008942 <_scanf_float+0x40e>
 800873c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008740:	6022      	str	r2, [r4, #0]
 8008742:	2501      	movs	r5, #1
 8008744:	e7c2      	b.n	80086cc <_scanf_float+0x198>
 8008746:	2d03      	cmp	r5, #3
 8008748:	d0e3      	beq.n	8008712 <_scanf_float+0x1de>
 800874a:	2d05      	cmp	r5, #5
 800874c:	e7df      	b.n	800870e <_scanf_float+0x1da>
 800874e:	2d02      	cmp	r5, #2
 8008750:	f47f af23 	bne.w	800859a <_scanf_float+0x66>
 8008754:	2503      	movs	r5, #3
 8008756:	e7b9      	b.n	80086cc <_scanf_float+0x198>
 8008758:	2d06      	cmp	r5, #6
 800875a:	f47f af1e 	bne.w	800859a <_scanf_float+0x66>
 800875e:	2507      	movs	r5, #7
 8008760:	e7b4      	b.n	80086cc <_scanf_float+0x198>
 8008762:	6822      	ldr	r2, [r4, #0]
 8008764:	0591      	lsls	r1, r2, #22
 8008766:	f57f af18 	bpl.w	800859a <_scanf_float+0x66>
 800876a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	9702      	str	r7, [sp, #8]
 8008772:	e7ab      	b.n	80086cc <_scanf_float+0x198>
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800877a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800877e:	d005      	beq.n	800878c <_scanf_float+0x258>
 8008780:	0550      	lsls	r0, r2, #21
 8008782:	f57f af0a 	bpl.w	800859a <_scanf_float+0x66>
 8008786:	2f00      	cmp	r7, #0
 8008788:	f000 80db 	beq.w	8008942 <_scanf_float+0x40e>
 800878c:	0591      	lsls	r1, r2, #22
 800878e:	bf58      	it	pl
 8008790:	9902      	ldrpl	r1, [sp, #8]
 8008792:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008796:	bf58      	it	pl
 8008798:	1a79      	subpl	r1, r7, r1
 800879a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800879e:	bf58      	it	pl
 80087a0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80087a4:	6022      	str	r2, [r4, #0]
 80087a6:	2700      	movs	r7, #0
 80087a8:	e790      	b.n	80086cc <_scanf_float+0x198>
 80087aa:	f04f 0a03 	mov.w	sl, #3
 80087ae:	e78d      	b.n	80086cc <_scanf_float+0x198>
 80087b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80087b4:	4649      	mov	r1, r9
 80087b6:	4640      	mov	r0, r8
 80087b8:	4798      	blx	r3
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f43f aedf 	beq.w	800857e <_scanf_float+0x4a>
 80087c0:	e6eb      	b.n	800859a <_scanf_float+0x66>
 80087c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087ca:	464a      	mov	r2, r9
 80087cc:	4640      	mov	r0, r8
 80087ce:	4798      	blx	r3
 80087d0:	6923      	ldr	r3, [r4, #16]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	6123      	str	r3, [r4, #16]
 80087d6:	e6eb      	b.n	80085b0 <_scanf_float+0x7c>
 80087d8:	1e6b      	subs	r3, r5, #1
 80087da:	2b06      	cmp	r3, #6
 80087dc:	d824      	bhi.n	8008828 <_scanf_float+0x2f4>
 80087de:	2d02      	cmp	r5, #2
 80087e0:	d836      	bhi.n	8008850 <_scanf_float+0x31c>
 80087e2:	9b01      	ldr	r3, [sp, #4]
 80087e4:	429e      	cmp	r6, r3
 80087e6:	f67f aee7 	bls.w	80085b8 <_scanf_float+0x84>
 80087ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087f2:	464a      	mov	r2, r9
 80087f4:	4640      	mov	r0, r8
 80087f6:	4798      	blx	r3
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	e7f0      	b.n	80087e2 <_scanf_float+0x2ae>
 8008800:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008804:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008808:	464a      	mov	r2, r9
 800880a:	4640      	mov	r0, r8
 800880c:	4798      	blx	r3
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008818:	fa5f fa8a 	uxtb.w	sl, sl
 800881c:	f1ba 0f02 	cmp.w	sl, #2
 8008820:	d1ee      	bne.n	8008800 <_scanf_float+0x2cc>
 8008822:	3d03      	subs	r5, #3
 8008824:	b2ed      	uxtb	r5, r5
 8008826:	1b76      	subs	r6, r6, r5
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	05da      	lsls	r2, r3, #23
 800882c:	d530      	bpl.n	8008890 <_scanf_float+0x35c>
 800882e:	055b      	lsls	r3, r3, #21
 8008830:	d511      	bpl.n	8008856 <_scanf_float+0x322>
 8008832:	9b01      	ldr	r3, [sp, #4]
 8008834:	429e      	cmp	r6, r3
 8008836:	f67f aebf 	bls.w	80085b8 <_scanf_float+0x84>
 800883a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800883e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008842:	464a      	mov	r2, r9
 8008844:	4640      	mov	r0, r8
 8008846:	4798      	blx	r3
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	3b01      	subs	r3, #1
 800884c:	6123      	str	r3, [r4, #16]
 800884e:	e7f0      	b.n	8008832 <_scanf_float+0x2fe>
 8008850:	46aa      	mov	sl, r5
 8008852:	46b3      	mov	fp, r6
 8008854:	e7de      	b.n	8008814 <_scanf_float+0x2e0>
 8008856:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	2965      	cmp	r1, #101	@ 0x65
 800885e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008862:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	d00c      	beq.n	8008884 <_scanf_float+0x350>
 800886a:	2945      	cmp	r1, #69	@ 0x45
 800886c:	d00a      	beq.n	8008884 <_scanf_float+0x350>
 800886e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008872:	464a      	mov	r2, r9
 8008874:	4640      	mov	r0, r8
 8008876:	4798      	blx	r3
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800887e:	3b01      	subs	r3, #1
 8008880:	1eb5      	subs	r5, r6, #2
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008888:	464a      	mov	r2, r9
 800888a:	4640      	mov	r0, r8
 800888c:	4798      	blx	r3
 800888e:	462e      	mov	r6, r5
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	f012 0210 	ands.w	r2, r2, #16
 8008896:	d001      	beq.n	800889c <_scanf_float+0x368>
 8008898:	2000      	movs	r0, #0
 800889a:	e68e      	b.n	80085ba <_scanf_float+0x86>
 800889c:	7032      	strb	r2, [r6, #0]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a8:	d125      	bne.n	80088f6 <_scanf_float+0x3c2>
 80088aa:	9b02      	ldr	r3, [sp, #8]
 80088ac:	429f      	cmp	r7, r3
 80088ae:	d00a      	beq.n	80088c6 <_scanf_float+0x392>
 80088b0:	1bda      	subs	r2, r3, r7
 80088b2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80088b6:	429e      	cmp	r6, r3
 80088b8:	bf28      	it	cs
 80088ba:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80088be:	4922      	ldr	r1, [pc, #136]	@ (8008948 <_scanf_float+0x414>)
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f93d 	bl	8008b40 <siprintf>
 80088c6:	9901      	ldr	r1, [sp, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	4640      	mov	r0, r8
 80088cc:	f002 fccc 	bl	800b268 <_strtod_r>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	6821      	ldr	r1, [r4, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f011 0f02 	tst.w	r1, #2
 80088da:	ec57 6b10 	vmov	r6, r7, d0
 80088de:	f103 0204 	add.w	r2, r3, #4
 80088e2:	d015      	beq.n	8008910 <_scanf_float+0x3dc>
 80088e4:	9903      	ldr	r1, [sp, #12]
 80088e6:	600a      	str	r2, [r1, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	e9c3 6700 	strd	r6, r7, [r3]
 80088ee:	68e3      	ldr	r3, [r4, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60e3      	str	r3, [r4, #12]
 80088f4:	e7d0      	b.n	8008898 <_scanf_float+0x364>
 80088f6:	9b04      	ldr	r3, [sp, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0e4      	beq.n	80088c6 <_scanf_float+0x392>
 80088fc:	9905      	ldr	r1, [sp, #20]
 80088fe:	230a      	movs	r3, #10
 8008900:	3101      	adds	r1, #1
 8008902:	4640      	mov	r0, r8
 8008904:	f002 fd30 	bl	800b368 <_strtol_r>
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	9e05      	ldr	r6, [sp, #20]
 800890c:	1ac2      	subs	r2, r0, r3
 800890e:	e7d0      	b.n	80088b2 <_scanf_float+0x37e>
 8008910:	f011 0f04 	tst.w	r1, #4
 8008914:	9903      	ldr	r1, [sp, #12]
 8008916:	600a      	str	r2, [r1, #0]
 8008918:	d1e6      	bne.n	80088e8 <_scanf_float+0x3b4>
 800891a:	681d      	ldr	r5, [r3, #0]
 800891c:	4632      	mov	r2, r6
 800891e:	463b      	mov	r3, r7
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f8 f92a 	bl	8000b7c <__aeabi_dcmpun>
 8008928:	b128      	cbz	r0, 8008936 <_scanf_float+0x402>
 800892a:	4808      	ldr	r0, [pc, #32]	@ (800894c <_scanf_float+0x418>)
 800892c:	f000 fa90 	bl	8008e50 <nanf>
 8008930:	ed85 0a00 	vstr	s0, [r5]
 8008934:	e7db      	b.n	80088ee <_scanf_float+0x3ba>
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f8 f97d 	bl	8000c38 <__aeabi_d2f>
 800893e:	6028      	str	r0, [r5, #0]
 8008940:	e7d5      	b.n	80088ee <_scanf_float+0x3ba>
 8008942:	2700      	movs	r7, #0
 8008944:	e62e      	b.n	80085a4 <_scanf_float+0x70>
 8008946:	bf00      	nop
 8008948:	0800c510 	.word	0x0800c510
 800894c:	0800c651 	.word	0x0800c651

08008950 <std>:
 8008950:	2300      	movs	r3, #0
 8008952:	b510      	push	{r4, lr}
 8008954:	4604      	mov	r4, r0
 8008956:	e9c0 3300 	strd	r3, r3, [r0]
 800895a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800895e:	6083      	str	r3, [r0, #8]
 8008960:	8181      	strh	r1, [r0, #12]
 8008962:	6643      	str	r3, [r0, #100]	@ 0x64
 8008964:	81c2      	strh	r2, [r0, #14]
 8008966:	6183      	str	r3, [r0, #24]
 8008968:	4619      	mov	r1, r3
 800896a:	2208      	movs	r2, #8
 800896c:	305c      	adds	r0, #92	@ 0x5c
 800896e:	f000 f9e1 	bl	8008d34 <memset>
 8008972:	4b0d      	ldr	r3, [pc, #52]	@ (80089a8 <std+0x58>)
 8008974:	6263      	str	r3, [r4, #36]	@ 0x24
 8008976:	4b0d      	ldr	r3, [pc, #52]	@ (80089ac <std+0x5c>)
 8008978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800897a:	4b0d      	ldr	r3, [pc, #52]	@ (80089b0 <std+0x60>)
 800897c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800897e:	4b0d      	ldr	r3, [pc, #52]	@ (80089b4 <std+0x64>)
 8008980:	6323      	str	r3, [r4, #48]	@ 0x30
 8008982:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <std+0x68>)
 8008984:	6224      	str	r4, [r4, #32]
 8008986:	429c      	cmp	r4, r3
 8008988:	d006      	beq.n	8008998 <std+0x48>
 800898a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800898e:	4294      	cmp	r4, r2
 8008990:	d002      	beq.n	8008998 <std+0x48>
 8008992:	33d0      	adds	r3, #208	@ 0xd0
 8008994:	429c      	cmp	r4, r3
 8008996:	d105      	bne.n	80089a4 <std+0x54>
 8008998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800899c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a0:	f000 ba44 	b.w	8008e2c <__retarget_lock_init_recursive>
 80089a4:	bd10      	pop	{r4, pc}
 80089a6:	bf00      	nop
 80089a8:	08008b85 	.word	0x08008b85
 80089ac:	08008ba7 	.word	0x08008ba7
 80089b0:	08008bdf 	.word	0x08008bdf
 80089b4:	08008c03 	.word	0x08008c03
 80089b8:	20000664 	.word	0x20000664

080089bc <stdio_exit_handler>:
 80089bc:	4a02      	ldr	r2, [pc, #8]	@ (80089c8 <stdio_exit_handler+0xc>)
 80089be:	4903      	ldr	r1, [pc, #12]	@ (80089cc <stdio_exit_handler+0x10>)
 80089c0:	4803      	ldr	r0, [pc, #12]	@ (80089d0 <stdio_exit_handler+0x14>)
 80089c2:	f000 b869 	b.w	8008a98 <_fwalk_sglue>
 80089c6:	bf00      	nop
 80089c8:	2000002c 	.word	0x2000002c
 80089cc:	0800b9a9 	.word	0x0800b9a9
 80089d0:	2000003c 	.word	0x2000003c

080089d4 <cleanup_stdio>:
 80089d4:	6841      	ldr	r1, [r0, #4]
 80089d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a08 <cleanup_stdio+0x34>)
 80089d8:	4299      	cmp	r1, r3
 80089da:	b510      	push	{r4, lr}
 80089dc:	4604      	mov	r4, r0
 80089de:	d001      	beq.n	80089e4 <cleanup_stdio+0x10>
 80089e0:	f002 ffe2 	bl	800b9a8 <_fflush_r>
 80089e4:	68a1      	ldr	r1, [r4, #8]
 80089e6:	4b09      	ldr	r3, [pc, #36]	@ (8008a0c <cleanup_stdio+0x38>)
 80089e8:	4299      	cmp	r1, r3
 80089ea:	d002      	beq.n	80089f2 <cleanup_stdio+0x1e>
 80089ec:	4620      	mov	r0, r4
 80089ee:	f002 ffdb 	bl	800b9a8 <_fflush_r>
 80089f2:	68e1      	ldr	r1, [r4, #12]
 80089f4:	4b06      	ldr	r3, [pc, #24]	@ (8008a10 <cleanup_stdio+0x3c>)
 80089f6:	4299      	cmp	r1, r3
 80089f8:	d004      	beq.n	8008a04 <cleanup_stdio+0x30>
 80089fa:	4620      	mov	r0, r4
 80089fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a00:	f002 bfd2 	b.w	800b9a8 <_fflush_r>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	bf00      	nop
 8008a08:	20000664 	.word	0x20000664
 8008a0c:	200006cc 	.word	0x200006cc
 8008a10:	20000734 	.word	0x20000734

08008a14 <global_stdio_init.part.0>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4b0b      	ldr	r3, [pc, #44]	@ (8008a44 <global_stdio_init.part.0+0x30>)
 8008a18:	4c0b      	ldr	r4, [pc, #44]	@ (8008a48 <global_stdio_init.part.0+0x34>)
 8008a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a4c <global_stdio_init.part.0+0x38>)
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	2200      	movs	r2, #0
 8008a22:	2104      	movs	r1, #4
 8008a24:	f7ff ff94 	bl	8008950 <std>
 8008a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	2109      	movs	r1, #9
 8008a30:	f7ff ff8e 	bl	8008950 <std>
 8008a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a38:	2202      	movs	r2, #2
 8008a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a3e:	2112      	movs	r1, #18
 8008a40:	f7ff bf86 	b.w	8008950 <std>
 8008a44:	2000079c 	.word	0x2000079c
 8008a48:	20000664 	.word	0x20000664
 8008a4c:	080089bd 	.word	0x080089bd

08008a50 <__sfp_lock_acquire>:
 8008a50:	4801      	ldr	r0, [pc, #4]	@ (8008a58 <__sfp_lock_acquire+0x8>)
 8008a52:	f000 b9ec 	b.w	8008e2e <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	200007a5 	.word	0x200007a5

08008a5c <__sfp_lock_release>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	@ (8008a64 <__sfp_lock_release+0x8>)
 8008a5e:	f000 b9e7 	b.w	8008e30 <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	200007a5 	.word	0x200007a5

08008a68 <__sinit>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	f7ff fff0 	bl	8008a50 <__sfp_lock_acquire>
 8008a70:	6a23      	ldr	r3, [r4, #32]
 8008a72:	b11b      	cbz	r3, 8008a7c <__sinit+0x14>
 8008a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a78:	f7ff bff0 	b.w	8008a5c <__sfp_lock_release>
 8008a7c:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <__sinit+0x28>)
 8008a7e:	6223      	str	r3, [r4, #32]
 8008a80:	4b04      	ldr	r3, [pc, #16]	@ (8008a94 <__sinit+0x2c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1f5      	bne.n	8008a74 <__sinit+0xc>
 8008a88:	f7ff ffc4 	bl	8008a14 <global_stdio_init.part.0>
 8008a8c:	e7f2      	b.n	8008a74 <__sinit+0xc>
 8008a8e:	bf00      	nop
 8008a90:	080089d5 	.word	0x080089d5
 8008a94:	2000079c 	.word	0x2000079c

08008a98 <_fwalk_sglue>:
 8008a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	4688      	mov	r8, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8008aac:	d505      	bpl.n	8008aba <_fwalk_sglue+0x22>
 8008aae:	6824      	ldr	r4, [r4, #0]
 8008ab0:	2c00      	cmp	r4, #0
 8008ab2:	d1f7      	bne.n	8008aa4 <_fwalk_sglue+0xc>
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d907      	bls.n	8008ad0 <_fwalk_sglue+0x38>
 8008ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	d003      	beq.n	8008ad0 <_fwalk_sglue+0x38>
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4638      	mov	r0, r7
 8008acc:	47c0      	blx	r8
 8008ace:	4306      	orrs	r6, r0
 8008ad0:	3568      	adds	r5, #104	@ 0x68
 8008ad2:	e7e9      	b.n	8008aa8 <_fwalk_sglue+0x10>

08008ad4 <sniprintf>:
 8008ad4:	b40c      	push	{r2, r3}
 8008ad6:	b530      	push	{r4, r5, lr}
 8008ad8:	4b18      	ldr	r3, [pc, #96]	@ (8008b3c <sniprintf+0x68>)
 8008ada:	1e0c      	subs	r4, r1, #0
 8008adc:	681d      	ldr	r5, [r3, #0]
 8008ade:	b09d      	sub	sp, #116	@ 0x74
 8008ae0:	da08      	bge.n	8008af4 <sniprintf+0x20>
 8008ae2:	238b      	movs	r3, #139	@ 0x8b
 8008ae4:	602b      	str	r3, [r5, #0]
 8008ae6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008aea:	b01d      	add	sp, #116	@ 0x74
 8008aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008af0:	b002      	add	sp, #8
 8008af2:	4770      	bx	lr
 8008af4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008afc:	f04f 0300 	mov.w	r3, #0
 8008b00:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008b02:	bf14      	ite	ne
 8008b04:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008b08:	4623      	moveq	r3, r4
 8008b0a:	9304      	str	r3, [sp, #16]
 8008b0c:	9307      	str	r3, [sp, #28]
 8008b0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b12:	9002      	str	r0, [sp, #8]
 8008b14:	9006      	str	r0, [sp, #24]
 8008b16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b1a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b1c:	ab21      	add	r3, sp, #132	@ 0x84
 8008b1e:	a902      	add	r1, sp, #8
 8008b20:	4628      	mov	r0, r5
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	f002 fc7e 	bl	800b424 <_svfiprintf_r>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	bfbc      	itt	lt
 8008b2c:	238b      	movlt	r3, #139	@ 0x8b
 8008b2e:	602b      	strlt	r3, [r5, #0]
 8008b30:	2c00      	cmp	r4, #0
 8008b32:	d0da      	beq.n	8008aea <sniprintf+0x16>
 8008b34:	9b02      	ldr	r3, [sp, #8]
 8008b36:	2200      	movs	r2, #0
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	e7d6      	b.n	8008aea <sniprintf+0x16>
 8008b3c:	20000038 	.word	0x20000038

08008b40 <siprintf>:
 8008b40:	b40e      	push	{r1, r2, r3}
 8008b42:	b510      	push	{r4, lr}
 8008b44:	b09d      	sub	sp, #116	@ 0x74
 8008b46:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008b48:	9002      	str	r0, [sp, #8]
 8008b4a:	9006      	str	r0, [sp, #24]
 8008b4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008b50:	480a      	ldr	r0, [pc, #40]	@ (8008b7c <siprintf+0x3c>)
 8008b52:	9107      	str	r1, [sp, #28]
 8008b54:	9104      	str	r1, [sp, #16]
 8008b56:	490a      	ldr	r1, [pc, #40]	@ (8008b80 <siprintf+0x40>)
 8008b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5c:	9105      	str	r1, [sp, #20]
 8008b5e:	2400      	movs	r4, #0
 8008b60:	a902      	add	r1, sp, #8
 8008b62:	6800      	ldr	r0, [r0, #0]
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008b68:	f002 fc5c 	bl	800b424 <_svfiprintf_r>
 8008b6c:	9b02      	ldr	r3, [sp, #8]
 8008b6e:	701c      	strb	r4, [r3, #0]
 8008b70:	b01d      	add	sp, #116	@ 0x74
 8008b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b76:	b003      	add	sp, #12
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000038 	.word	0x20000038
 8008b80:	ffff0208 	.word	0xffff0208

08008b84 <__sread>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	460c      	mov	r4, r1
 8008b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8c:	f000 f900 	bl	8008d90 <_read_r>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	bfab      	itete	ge
 8008b94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b96:	89a3      	ldrhlt	r3, [r4, #12]
 8008b98:	181b      	addge	r3, r3, r0
 8008b9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b9e:	bfac      	ite	ge
 8008ba0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ba2:	81a3      	strhlt	r3, [r4, #12]
 8008ba4:	bd10      	pop	{r4, pc}

08008ba6 <__swrite>:
 8008ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008baa:	461f      	mov	r7, r3
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	05db      	lsls	r3, r3, #23
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	d505      	bpl.n	8008bc4 <__swrite+0x1e>
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f000 f8d4 	bl	8008d6c <_lseek_r>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bda:	f000 b8eb 	b.w	8008db4 <_write_r>

08008bde <__sseek>:
 8008bde:	b510      	push	{r4, lr}
 8008be0:	460c      	mov	r4, r1
 8008be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be6:	f000 f8c1 	bl	8008d6c <_lseek_r>
 8008bea:	1c43      	adds	r3, r0, #1
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	bf15      	itete	ne
 8008bf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008bfa:	81a3      	strheq	r3, [r4, #12]
 8008bfc:	bf18      	it	ne
 8008bfe:	81a3      	strhne	r3, [r4, #12]
 8008c00:	bd10      	pop	{r4, pc}

08008c02 <__sclose>:
 8008c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c06:	f000 b8a1 	b.w	8008d4c <_close_r>

08008c0a <__swbuf_r>:
 8008c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0c:	460e      	mov	r6, r1
 8008c0e:	4614      	mov	r4, r2
 8008c10:	4605      	mov	r5, r0
 8008c12:	b118      	cbz	r0, 8008c1c <__swbuf_r+0x12>
 8008c14:	6a03      	ldr	r3, [r0, #32]
 8008c16:	b90b      	cbnz	r3, 8008c1c <__swbuf_r+0x12>
 8008c18:	f7ff ff26 	bl	8008a68 <__sinit>
 8008c1c:	69a3      	ldr	r3, [r4, #24]
 8008c1e:	60a3      	str	r3, [r4, #8]
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	071a      	lsls	r2, r3, #28
 8008c24:	d501      	bpl.n	8008c2a <__swbuf_r+0x20>
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	b943      	cbnz	r3, 8008c3c <__swbuf_r+0x32>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 f82b 	bl	8008c88 <__swsetup_r>
 8008c32:	b118      	cbz	r0, 8008c3c <__swbuf_r+0x32>
 8008c34:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008c38:	4638      	mov	r0, r7
 8008c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	6922      	ldr	r2, [r4, #16]
 8008c40:	1a98      	subs	r0, r3, r2
 8008c42:	6963      	ldr	r3, [r4, #20]
 8008c44:	b2f6      	uxtb	r6, r6
 8008c46:	4283      	cmp	r3, r0
 8008c48:	4637      	mov	r7, r6
 8008c4a:	dc05      	bgt.n	8008c58 <__swbuf_r+0x4e>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f002 feaa 	bl	800b9a8 <_fflush_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d1ed      	bne.n	8008c34 <__swbuf_r+0x2a>
 8008c58:	68a3      	ldr	r3, [r4, #8]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	60a3      	str	r3, [r4, #8]
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	6022      	str	r2, [r4, #0]
 8008c64:	701e      	strb	r6, [r3, #0]
 8008c66:	6962      	ldr	r2, [r4, #20]
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d004      	beq.n	8008c78 <__swbuf_r+0x6e>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	07db      	lsls	r3, r3, #31
 8008c72:	d5e1      	bpl.n	8008c38 <__swbuf_r+0x2e>
 8008c74:	2e0a      	cmp	r6, #10
 8008c76:	d1df      	bne.n	8008c38 <__swbuf_r+0x2e>
 8008c78:	4621      	mov	r1, r4
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	f002 fe94 	bl	800b9a8 <_fflush_r>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d0d9      	beq.n	8008c38 <__swbuf_r+0x2e>
 8008c84:	e7d6      	b.n	8008c34 <__swbuf_r+0x2a>
	...

08008c88 <__swsetup_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4b29      	ldr	r3, [pc, #164]	@ (8008d30 <__swsetup_r+0xa8>)
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	460c      	mov	r4, r1
 8008c92:	b118      	cbz	r0, 8008c9c <__swsetup_r+0x14>
 8008c94:	6a03      	ldr	r3, [r0, #32]
 8008c96:	b90b      	cbnz	r3, 8008c9c <__swsetup_r+0x14>
 8008c98:	f7ff fee6 	bl	8008a68 <__sinit>
 8008c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca0:	0719      	lsls	r1, r3, #28
 8008ca2:	d422      	bmi.n	8008cea <__swsetup_r+0x62>
 8008ca4:	06da      	lsls	r2, r3, #27
 8008ca6:	d407      	bmi.n	8008cb8 <__swsetup_r+0x30>
 8008ca8:	2209      	movs	r2, #9
 8008caa:	602a      	str	r2, [r5, #0]
 8008cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cb6:	e033      	b.n	8008d20 <__swsetup_r+0x98>
 8008cb8:	0758      	lsls	r0, r3, #29
 8008cba:	d512      	bpl.n	8008ce2 <__swsetup_r+0x5a>
 8008cbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cbe:	b141      	cbz	r1, 8008cd2 <__swsetup_r+0x4a>
 8008cc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	d002      	beq.n	8008cce <__swsetup_r+0x46>
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f000 ff21 	bl	8009b10 <_free_r>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cd8:	81a3      	strh	r3, [r4, #12]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6063      	str	r3, [r4, #4]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0308 	orr.w	r3, r3, #8
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	b94b      	cbnz	r3, 8008d02 <__swsetup_r+0x7a>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cf8:	d003      	beq.n	8008d02 <__swsetup_r+0x7a>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f002 fea1 	bl	800ba44 <__smakebuf_r>
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	f013 0201 	ands.w	r2, r3, #1
 8008d0a:	d00a      	beq.n	8008d22 <__swsetup_r+0x9a>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	60a2      	str	r2, [r4, #8]
 8008d10:	6962      	ldr	r2, [r4, #20]
 8008d12:	4252      	negs	r2, r2
 8008d14:	61a2      	str	r2, [r4, #24]
 8008d16:	6922      	ldr	r2, [r4, #16]
 8008d18:	b942      	cbnz	r2, 8008d2c <__swsetup_r+0xa4>
 8008d1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d1e:	d1c5      	bne.n	8008cac <__swsetup_r+0x24>
 8008d20:	bd38      	pop	{r3, r4, r5, pc}
 8008d22:	0799      	lsls	r1, r3, #30
 8008d24:	bf58      	it	pl
 8008d26:	6962      	ldrpl	r2, [r4, #20]
 8008d28:	60a2      	str	r2, [r4, #8]
 8008d2a:	e7f4      	b.n	8008d16 <__swsetup_r+0x8e>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e7f7      	b.n	8008d20 <__swsetup_r+0x98>
 8008d30:	20000038 	.word	0x20000038

08008d34 <memset>:
 8008d34:	4402      	add	r2, r0
 8008d36:	4603      	mov	r3, r0
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d100      	bne.n	8008d3e <memset+0xa>
 8008d3c:	4770      	bx	lr
 8008d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d42:	e7f9      	b.n	8008d38 <memset+0x4>

08008d44 <_localeconv_r>:
 8008d44:	4800      	ldr	r0, [pc, #0]	@ (8008d48 <_localeconv_r+0x4>)
 8008d46:	4770      	bx	lr
 8008d48:	20000178 	.word	0x20000178

08008d4c <_close_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d06      	ldr	r5, [pc, #24]	@ (8008d68 <_close_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	f7fa fbb1 	bl	80034be <_close>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_close_r+0x1a>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_close_r+0x1a>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	200007a0 	.word	0x200007a0

08008d6c <_lseek_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d07      	ldr	r5, [pc, #28]	@ (8008d8c <_lseek_r+0x20>)
 8008d70:	4604      	mov	r4, r0
 8008d72:	4608      	mov	r0, r1
 8008d74:	4611      	mov	r1, r2
 8008d76:	2200      	movs	r2, #0
 8008d78:	602a      	str	r2, [r5, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f7fa fbc6 	bl	800350c <_lseek>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_lseek_r+0x1e>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_lseek_r+0x1e>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	200007a0 	.word	0x200007a0

08008d90 <_read_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	@ (8008db0 <_read_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7fa fb54 	bl	800344c <_read>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_read_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_read_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	200007a0 	.word	0x200007a0

08008db4 <_write_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	@ (8008dd4 <_write_r+0x20>)
 8008db8:	4604      	mov	r4, r0
 8008dba:	4608      	mov	r0, r1
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	602a      	str	r2, [r5, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	f7fa fb5f 	bl	8003486 <_write>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_write_r+0x1e>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_write_r+0x1e>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	200007a0 	.word	0x200007a0

08008dd8 <__errno>:
 8008dd8:	4b01      	ldr	r3, [pc, #4]	@ (8008de0 <__errno+0x8>)
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20000038 	.word	0x20000038

08008de4 <__libc_init_array>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	4d0d      	ldr	r5, [pc, #52]	@ (8008e1c <__libc_init_array+0x38>)
 8008de8:	4c0d      	ldr	r4, [pc, #52]	@ (8008e20 <__libc_init_array+0x3c>)
 8008dea:	1b64      	subs	r4, r4, r5
 8008dec:	10a4      	asrs	r4, r4, #2
 8008dee:	2600      	movs	r6, #0
 8008df0:	42a6      	cmp	r6, r4
 8008df2:	d109      	bne.n	8008e08 <__libc_init_array+0x24>
 8008df4:	4d0b      	ldr	r5, [pc, #44]	@ (8008e24 <__libc_init_array+0x40>)
 8008df6:	4c0c      	ldr	r4, [pc, #48]	@ (8008e28 <__libc_init_array+0x44>)
 8008df8:	f003 fae4 	bl	800c3c4 <_init>
 8008dfc:	1b64      	subs	r4, r4, r5
 8008dfe:	10a4      	asrs	r4, r4, #2
 8008e00:	2600      	movs	r6, #0
 8008e02:	42a6      	cmp	r6, r4
 8008e04:	d105      	bne.n	8008e12 <__libc_init_array+0x2e>
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0c:	4798      	blx	r3
 8008e0e:	3601      	adds	r6, #1
 8008e10:	e7ee      	b.n	8008df0 <__libc_init_array+0xc>
 8008e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e16:	4798      	blx	r3
 8008e18:	3601      	adds	r6, #1
 8008e1a:	e7f2      	b.n	8008e02 <__libc_init_array+0x1e>
 8008e1c:	0800c90c 	.word	0x0800c90c
 8008e20:	0800c90c 	.word	0x0800c90c
 8008e24:	0800c90c 	.word	0x0800c90c
 8008e28:	0800c910 	.word	0x0800c910

08008e2c <__retarget_lock_init_recursive>:
 8008e2c:	4770      	bx	lr

08008e2e <__retarget_lock_acquire_recursive>:
 8008e2e:	4770      	bx	lr

08008e30 <__retarget_lock_release_recursive>:
 8008e30:	4770      	bx	lr

08008e32 <memcpy>:
 8008e32:	440a      	add	r2, r1
 8008e34:	4291      	cmp	r1, r2
 8008e36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e3a:	d100      	bne.n	8008e3e <memcpy+0xc>
 8008e3c:	4770      	bx	lr
 8008e3e:	b510      	push	{r4, lr}
 8008e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e48:	4291      	cmp	r1, r2
 8008e4a:	d1f9      	bne.n	8008e40 <memcpy+0xe>
 8008e4c:	bd10      	pop	{r4, pc}
	...

08008e50 <nanf>:
 8008e50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e58 <nanf+0x8>
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	7fc00000 	.word	0x7fc00000

08008e5c <quorem>:
 8008e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e60:	6903      	ldr	r3, [r0, #16]
 8008e62:	690c      	ldr	r4, [r1, #16]
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	4607      	mov	r7, r0
 8008e68:	db7e      	blt.n	8008f68 <quorem+0x10c>
 8008e6a:	3c01      	subs	r4, #1
 8008e6c:	f101 0814 	add.w	r8, r1, #20
 8008e70:	00a3      	lsls	r3, r4, #2
 8008e72:	f100 0514 	add.w	r5, r0, #20
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e86:	3301      	adds	r3, #1
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e92:	d32e      	bcc.n	8008ef2 <quorem+0x96>
 8008e94:	f04f 0a00 	mov.w	sl, #0
 8008e98:	46c4      	mov	ip, r8
 8008e9a:	46ae      	mov	lr, r5
 8008e9c:	46d3      	mov	fp, sl
 8008e9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ea2:	b298      	uxth	r0, r3
 8008ea4:	fb06 a000 	mla	r0, r6, r0, sl
 8008ea8:	0c02      	lsrs	r2, r0, #16
 8008eaa:	0c1b      	lsrs	r3, r3, #16
 8008eac:	fb06 2303 	mla	r3, r6, r3, r2
 8008eb0:	f8de 2000 	ldr.w	r2, [lr]
 8008eb4:	b280      	uxth	r0, r0
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	1a12      	subs	r2, r2, r0
 8008eba:	445a      	add	r2, fp
 8008ebc:	f8de 0000 	ldr.w	r0, [lr]
 8008ec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008eca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ece:	b292      	uxth	r2, r2
 8008ed0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ed4:	45e1      	cmp	r9, ip
 8008ed6:	f84e 2b04 	str.w	r2, [lr], #4
 8008eda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ede:	d2de      	bcs.n	8008e9e <quorem+0x42>
 8008ee0:	9b00      	ldr	r3, [sp, #0]
 8008ee2:	58eb      	ldr	r3, [r5, r3]
 8008ee4:	b92b      	cbnz	r3, 8008ef2 <quorem+0x96>
 8008ee6:	9b01      	ldr	r3, [sp, #4]
 8008ee8:	3b04      	subs	r3, #4
 8008eea:	429d      	cmp	r5, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	d32f      	bcc.n	8008f50 <quorem+0xf4>
 8008ef0:	613c      	str	r4, [r7, #16]
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f001 f9c8 	bl	800a288 <__mcmp>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	db25      	blt.n	8008f48 <quorem+0xec>
 8008efc:	4629      	mov	r1, r5
 8008efe:	2000      	movs	r0, #0
 8008f00:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f04:	f8d1 c000 	ldr.w	ip, [r1]
 8008f08:	fa1f fe82 	uxth.w	lr, r2
 8008f0c:	fa1f f38c 	uxth.w	r3, ip
 8008f10:	eba3 030e 	sub.w	r3, r3, lr
 8008f14:	4403      	add	r3, r0
 8008f16:	0c12      	lsrs	r2, r2, #16
 8008f18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f26:	45c1      	cmp	r9, r8
 8008f28:	f841 3b04 	str.w	r3, [r1], #4
 8008f2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f30:	d2e6      	bcs.n	8008f00 <quorem+0xa4>
 8008f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f3a:	b922      	cbnz	r2, 8008f46 <quorem+0xea>
 8008f3c:	3b04      	subs	r3, #4
 8008f3e:	429d      	cmp	r5, r3
 8008f40:	461a      	mov	r2, r3
 8008f42:	d30b      	bcc.n	8008f5c <quorem+0x100>
 8008f44:	613c      	str	r4, [r7, #16]
 8008f46:	3601      	adds	r6, #1
 8008f48:	4630      	mov	r0, r6
 8008f4a:	b003      	add	sp, #12
 8008f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f50:	6812      	ldr	r2, [r2, #0]
 8008f52:	3b04      	subs	r3, #4
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	d1cb      	bne.n	8008ef0 <quorem+0x94>
 8008f58:	3c01      	subs	r4, #1
 8008f5a:	e7c6      	b.n	8008eea <quorem+0x8e>
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	3b04      	subs	r3, #4
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	d1ef      	bne.n	8008f44 <quorem+0xe8>
 8008f64:	3c01      	subs	r4, #1
 8008f66:	e7ea      	b.n	8008f3e <quorem+0xe2>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e7ee      	b.n	8008f4a <quorem+0xee>
 8008f6c:	0000      	movs	r0, r0
	...

08008f70 <_dtoa_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	69c7      	ldr	r7, [r0, #28]
 8008f76:	b097      	sub	sp, #92	@ 0x5c
 8008f78:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f7c:	ec55 4b10 	vmov	r4, r5, d0
 8008f80:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008f82:	9107      	str	r1, [sp, #28]
 8008f84:	4681      	mov	r9, r0
 8008f86:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f88:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f8a:	b97f      	cbnz	r7, 8008fac <_dtoa_r+0x3c>
 8008f8c:	2010      	movs	r0, #16
 8008f8e:	f000 fe09 	bl	8009ba4 <malloc>
 8008f92:	4602      	mov	r2, r0
 8008f94:	f8c9 001c 	str.w	r0, [r9, #28]
 8008f98:	b920      	cbnz	r0, 8008fa4 <_dtoa_r+0x34>
 8008f9a:	4ba9      	ldr	r3, [pc, #676]	@ (8009240 <_dtoa_r+0x2d0>)
 8008f9c:	21ef      	movs	r1, #239	@ 0xef
 8008f9e:	48a9      	ldr	r0, [pc, #676]	@ (8009244 <_dtoa_r+0x2d4>)
 8008fa0:	f002 fdf2 	bl	800bb88 <__assert_func>
 8008fa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008fa8:	6007      	str	r7, [r0, #0]
 8008faa:	60c7      	str	r7, [r0, #12]
 8008fac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fb0:	6819      	ldr	r1, [r3, #0]
 8008fb2:	b159      	cbz	r1, 8008fcc <_dtoa_r+0x5c>
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	604a      	str	r2, [r1, #4]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4093      	lsls	r3, r2
 8008fbc:	608b      	str	r3, [r1, #8]
 8008fbe:	4648      	mov	r0, r9
 8008fc0:	f000 fee6 	bl	8009d90 <_Bfree>
 8008fc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	1e2b      	subs	r3, r5, #0
 8008fce:	bfb9      	ittee	lt
 8008fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008fd4:	9305      	strlt	r3, [sp, #20]
 8008fd6:	2300      	movge	r3, #0
 8008fd8:	6033      	strge	r3, [r6, #0]
 8008fda:	9f05      	ldr	r7, [sp, #20]
 8008fdc:	4b9a      	ldr	r3, [pc, #616]	@ (8009248 <_dtoa_r+0x2d8>)
 8008fde:	bfbc      	itt	lt
 8008fe0:	2201      	movlt	r2, #1
 8008fe2:	6032      	strlt	r2, [r6, #0]
 8008fe4:	43bb      	bics	r3, r7
 8008fe6:	d112      	bne.n	800900e <_dtoa_r+0x9e>
 8008fe8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ff4:	4323      	orrs	r3, r4
 8008ff6:	f000 855a 	beq.w	8009aae <_dtoa_r+0xb3e>
 8008ffa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ffc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800925c <_dtoa_r+0x2ec>
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 855c 	beq.w	8009abe <_dtoa_r+0xb4e>
 8009006:	f10a 0303 	add.w	r3, sl, #3
 800900a:	f000 bd56 	b.w	8009aba <_dtoa_r+0xb4a>
 800900e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009012:	2200      	movs	r2, #0
 8009014:	ec51 0b17 	vmov	r0, r1, d7
 8009018:	2300      	movs	r3, #0
 800901a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800901e:	f7f7 fd7b 	bl	8000b18 <__aeabi_dcmpeq>
 8009022:	4680      	mov	r8, r0
 8009024:	b158      	cbz	r0, 800903e <_dtoa_r+0xce>
 8009026:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009028:	2301      	movs	r3, #1
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800902e:	b113      	cbz	r3, 8009036 <_dtoa_r+0xc6>
 8009030:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009032:	4b86      	ldr	r3, [pc, #536]	@ (800924c <_dtoa_r+0x2dc>)
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009260 <_dtoa_r+0x2f0>
 800903a:	f000 bd40 	b.w	8009abe <_dtoa_r+0xb4e>
 800903e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009042:	aa14      	add	r2, sp, #80	@ 0x50
 8009044:	a915      	add	r1, sp, #84	@ 0x54
 8009046:	4648      	mov	r0, r9
 8009048:	f001 fa3e 	bl	800a4c8 <__d2b>
 800904c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009050:	9002      	str	r0, [sp, #8]
 8009052:	2e00      	cmp	r6, #0
 8009054:	d078      	beq.n	8009148 <_dtoa_r+0x1d8>
 8009056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009058:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800905c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009064:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009068:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800906c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009070:	4619      	mov	r1, r3
 8009072:	2200      	movs	r2, #0
 8009074:	4b76      	ldr	r3, [pc, #472]	@ (8009250 <_dtoa_r+0x2e0>)
 8009076:	f7f7 f92f 	bl	80002d8 <__aeabi_dsub>
 800907a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009228 <_dtoa_r+0x2b8>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 fae2 	bl	8000648 <__aeabi_dmul>
 8009084:	a36a      	add	r3, pc, #424	@ (adr r3, 8009230 <_dtoa_r+0x2c0>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 f927 	bl	80002dc <__adddf3>
 800908e:	4604      	mov	r4, r0
 8009090:	4630      	mov	r0, r6
 8009092:	460d      	mov	r5, r1
 8009094:	f7f7 fa6e 	bl	8000574 <__aeabi_i2d>
 8009098:	a367      	add	r3, pc, #412	@ (adr r3, 8009238 <_dtoa_r+0x2c8>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 fad3 	bl	8000648 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 f917 	bl	80002dc <__adddf3>
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	f7f7 fd79 	bl	8000ba8 <__aeabi_d2iz>
 80090b6:	2200      	movs	r2, #0
 80090b8:	4607      	mov	r7, r0
 80090ba:	2300      	movs	r3, #0
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 fd34 	bl	8000b2c <__aeabi_dcmplt>
 80090c4:	b140      	cbz	r0, 80090d8 <_dtoa_r+0x168>
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7f7 fa54 	bl	8000574 <__aeabi_i2d>
 80090cc:	4622      	mov	r2, r4
 80090ce:	462b      	mov	r3, r5
 80090d0:	f7f7 fd22 	bl	8000b18 <__aeabi_dcmpeq>
 80090d4:	b900      	cbnz	r0, 80090d8 <_dtoa_r+0x168>
 80090d6:	3f01      	subs	r7, #1
 80090d8:	2f16      	cmp	r7, #22
 80090da:	d852      	bhi.n	8009182 <_dtoa_r+0x212>
 80090dc:	4b5d      	ldr	r3, [pc, #372]	@ (8009254 <_dtoa_r+0x2e4>)
 80090de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090ea:	f7f7 fd1f 	bl	8000b2c <__aeabi_dcmplt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d049      	beq.n	8009186 <_dtoa_r+0x216>
 80090f2:	3f01      	subs	r7, #1
 80090f4:	2300      	movs	r3, #0
 80090f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80090f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090fa:	1b9b      	subs	r3, r3, r6
 80090fc:	1e5a      	subs	r2, r3, #1
 80090fe:	bf45      	ittet	mi
 8009100:	f1c3 0301 	rsbmi	r3, r3, #1
 8009104:	9300      	strmi	r3, [sp, #0]
 8009106:	2300      	movpl	r3, #0
 8009108:	2300      	movmi	r3, #0
 800910a:	9206      	str	r2, [sp, #24]
 800910c:	bf54      	ite	pl
 800910e:	9300      	strpl	r3, [sp, #0]
 8009110:	9306      	strmi	r3, [sp, #24]
 8009112:	2f00      	cmp	r7, #0
 8009114:	db39      	blt.n	800918a <_dtoa_r+0x21a>
 8009116:	9b06      	ldr	r3, [sp, #24]
 8009118:	970d      	str	r7, [sp, #52]	@ 0x34
 800911a:	443b      	add	r3, r7
 800911c:	9306      	str	r3, [sp, #24]
 800911e:	2300      	movs	r3, #0
 8009120:	9308      	str	r3, [sp, #32]
 8009122:	9b07      	ldr	r3, [sp, #28]
 8009124:	2b09      	cmp	r3, #9
 8009126:	d863      	bhi.n	80091f0 <_dtoa_r+0x280>
 8009128:	2b05      	cmp	r3, #5
 800912a:	bfc4      	itt	gt
 800912c:	3b04      	subgt	r3, #4
 800912e:	9307      	strgt	r3, [sp, #28]
 8009130:	9b07      	ldr	r3, [sp, #28]
 8009132:	f1a3 0302 	sub.w	r3, r3, #2
 8009136:	bfcc      	ite	gt
 8009138:	2400      	movgt	r4, #0
 800913a:	2401      	movle	r4, #1
 800913c:	2b03      	cmp	r3, #3
 800913e:	d863      	bhi.n	8009208 <_dtoa_r+0x298>
 8009140:	e8df f003 	tbb	[pc, r3]
 8009144:	2b375452 	.word	0x2b375452
 8009148:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800914c:	441e      	add	r6, r3
 800914e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009152:	2b20      	cmp	r3, #32
 8009154:	bfc1      	itttt	gt
 8009156:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800915a:	409f      	lslgt	r7, r3
 800915c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009160:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009164:	bfd6      	itet	le
 8009166:	f1c3 0320 	rsble	r3, r3, #32
 800916a:	ea47 0003 	orrgt.w	r0, r7, r3
 800916e:	fa04 f003 	lslle.w	r0, r4, r3
 8009172:	f7f7 f9ef 	bl	8000554 <__aeabi_ui2d>
 8009176:	2201      	movs	r2, #1
 8009178:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800917c:	3e01      	subs	r6, #1
 800917e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009180:	e776      	b.n	8009070 <_dtoa_r+0x100>
 8009182:	2301      	movs	r3, #1
 8009184:	e7b7      	b.n	80090f6 <_dtoa_r+0x186>
 8009186:	9010      	str	r0, [sp, #64]	@ 0x40
 8009188:	e7b6      	b.n	80090f8 <_dtoa_r+0x188>
 800918a:	9b00      	ldr	r3, [sp, #0]
 800918c:	1bdb      	subs	r3, r3, r7
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	427b      	negs	r3, r7
 8009192:	9308      	str	r3, [sp, #32]
 8009194:	2300      	movs	r3, #0
 8009196:	930d      	str	r3, [sp, #52]	@ 0x34
 8009198:	e7c3      	b.n	8009122 <_dtoa_r+0x1b2>
 800919a:	2301      	movs	r3, #1
 800919c:	9309      	str	r3, [sp, #36]	@ 0x24
 800919e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091a0:	eb07 0b03 	add.w	fp, r7, r3
 80091a4:	f10b 0301 	add.w	r3, fp, #1
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	9303      	str	r3, [sp, #12]
 80091ac:	bfb8      	it	lt
 80091ae:	2301      	movlt	r3, #1
 80091b0:	e006      	b.n	80091c0 <_dtoa_r+0x250>
 80091b2:	2301      	movs	r3, #1
 80091b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dd28      	ble.n	800920e <_dtoa_r+0x29e>
 80091bc:	469b      	mov	fp, r3
 80091be:	9303      	str	r3, [sp, #12]
 80091c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80091c4:	2100      	movs	r1, #0
 80091c6:	2204      	movs	r2, #4
 80091c8:	f102 0514 	add.w	r5, r2, #20
 80091cc:	429d      	cmp	r5, r3
 80091ce:	d926      	bls.n	800921e <_dtoa_r+0x2ae>
 80091d0:	6041      	str	r1, [r0, #4]
 80091d2:	4648      	mov	r0, r9
 80091d4:	f000 fd9c 	bl	8009d10 <_Balloc>
 80091d8:	4682      	mov	sl, r0
 80091da:	2800      	cmp	r0, #0
 80091dc:	d142      	bne.n	8009264 <_dtoa_r+0x2f4>
 80091de:	4b1e      	ldr	r3, [pc, #120]	@ (8009258 <_dtoa_r+0x2e8>)
 80091e0:	4602      	mov	r2, r0
 80091e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80091e6:	e6da      	b.n	8008f9e <_dtoa_r+0x2e>
 80091e8:	2300      	movs	r3, #0
 80091ea:	e7e3      	b.n	80091b4 <_dtoa_r+0x244>
 80091ec:	2300      	movs	r3, #0
 80091ee:	e7d5      	b.n	800919c <_dtoa_r+0x22c>
 80091f0:	2401      	movs	r4, #1
 80091f2:	2300      	movs	r3, #0
 80091f4:	9307      	str	r3, [sp, #28]
 80091f6:	9409      	str	r4, [sp, #36]	@ 0x24
 80091f8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8009202:	2312      	movs	r3, #18
 8009204:	920c      	str	r2, [sp, #48]	@ 0x30
 8009206:	e7db      	b.n	80091c0 <_dtoa_r+0x250>
 8009208:	2301      	movs	r3, #1
 800920a:	9309      	str	r3, [sp, #36]	@ 0x24
 800920c:	e7f4      	b.n	80091f8 <_dtoa_r+0x288>
 800920e:	f04f 0b01 	mov.w	fp, #1
 8009212:	f8cd b00c 	str.w	fp, [sp, #12]
 8009216:	465b      	mov	r3, fp
 8009218:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800921c:	e7d0      	b.n	80091c0 <_dtoa_r+0x250>
 800921e:	3101      	adds	r1, #1
 8009220:	0052      	lsls	r2, r2, #1
 8009222:	e7d1      	b.n	80091c8 <_dtoa_r+0x258>
 8009224:	f3af 8000 	nop.w
 8009228:	636f4361 	.word	0x636f4361
 800922c:	3fd287a7 	.word	0x3fd287a7
 8009230:	8b60c8b3 	.word	0x8b60c8b3
 8009234:	3fc68a28 	.word	0x3fc68a28
 8009238:	509f79fb 	.word	0x509f79fb
 800923c:	3fd34413 	.word	0x3fd34413
 8009240:	0800c522 	.word	0x0800c522
 8009244:	0800c539 	.word	0x0800c539
 8009248:	7ff00000 	.word	0x7ff00000
 800924c:	0800c4ed 	.word	0x0800c4ed
 8009250:	3ff80000 	.word	0x3ff80000
 8009254:	0800c6e8 	.word	0x0800c6e8
 8009258:	0800c591 	.word	0x0800c591
 800925c:	0800c51e 	.word	0x0800c51e
 8009260:	0800c4ec 	.word	0x0800c4ec
 8009264:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009268:	6018      	str	r0, [r3, #0]
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	2b0e      	cmp	r3, #14
 800926e:	f200 80a1 	bhi.w	80093b4 <_dtoa_r+0x444>
 8009272:	2c00      	cmp	r4, #0
 8009274:	f000 809e 	beq.w	80093b4 <_dtoa_r+0x444>
 8009278:	2f00      	cmp	r7, #0
 800927a:	dd33      	ble.n	80092e4 <_dtoa_r+0x374>
 800927c:	4b9c      	ldr	r3, [pc, #624]	@ (80094f0 <_dtoa_r+0x580>)
 800927e:	f007 020f 	and.w	r2, r7, #15
 8009282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009286:	ed93 7b00 	vldr	d7, [r3]
 800928a:	05f8      	lsls	r0, r7, #23
 800928c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009290:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009294:	d516      	bpl.n	80092c4 <_dtoa_r+0x354>
 8009296:	4b97      	ldr	r3, [pc, #604]	@ (80094f4 <_dtoa_r+0x584>)
 8009298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800929c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092a0:	f7f7 fafc 	bl	800089c <__aeabi_ddiv>
 80092a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092a8:	f004 040f 	and.w	r4, r4, #15
 80092ac:	2603      	movs	r6, #3
 80092ae:	4d91      	ldr	r5, [pc, #580]	@ (80094f4 <_dtoa_r+0x584>)
 80092b0:	b954      	cbnz	r4, 80092c8 <_dtoa_r+0x358>
 80092b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ba:	f7f7 faef 	bl	800089c <__aeabi_ddiv>
 80092be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092c2:	e028      	b.n	8009316 <_dtoa_r+0x3a6>
 80092c4:	2602      	movs	r6, #2
 80092c6:	e7f2      	b.n	80092ae <_dtoa_r+0x33e>
 80092c8:	07e1      	lsls	r1, r4, #31
 80092ca:	d508      	bpl.n	80092de <_dtoa_r+0x36e>
 80092cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092d4:	f7f7 f9b8 	bl	8000648 <__aeabi_dmul>
 80092d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092dc:	3601      	adds	r6, #1
 80092de:	1064      	asrs	r4, r4, #1
 80092e0:	3508      	adds	r5, #8
 80092e2:	e7e5      	b.n	80092b0 <_dtoa_r+0x340>
 80092e4:	f000 80af 	beq.w	8009446 <_dtoa_r+0x4d6>
 80092e8:	427c      	negs	r4, r7
 80092ea:	4b81      	ldr	r3, [pc, #516]	@ (80094f0 <_dtoa_r+0x580>)
 80092ec:	4d81      	ldr	r5, [pc, #516]	@ (80094f4 <_dtoa_r+0x584>)
 80092ee:	f004 020f 	and.w	r2, r4, #15
 80092f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092fe:	f7f7 f9a3 	bl	8000648 <__aeabi_dmul>
 8009302:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009306:	1124      	asrs	r4, r4, #4
 8009308:	2300      	movs	r3, #0
 800930a:	2602      	movs	r6, #2
 800930c:	2c00      	cmp	r4, #0
 800930e:	f040 808f 	bne.w	8009430 <_dtoa_r+0x4c0>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1d3      	bne.n	80092be <_dtoa_r+0x34e>
 8009316:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009318:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8094 	beq.w	800944a <_dtoa_r+0x4da>
 8009322:	4b75      	ldr	r3, [pc, #468]	@ (80094f8 <_dtoa_r+0x588>)
 8009324:	2200      	movs	r2, #0
 8009326:	4620      	mov	r0, r4
 8009328:	4629      	mov	r1, r5
 800932a:	f7f7 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	f000 808b 	beq.w	800944a <_dtoa_r+0x4da>
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 8087 	beq.w	800944a <_dtoa_r+0x4da>
 800933c:	f1bb 0f00 	cmp.w	fp, #0
 8009340:	dd34      	ble.n	80093ac <_dtoa_r+0x43c>
 8009342:	4620      	mov	r0, r4
 8009344:	4b6d      	ldr	r3, [pc, #436]	@ (80094fc <_dtoa_r+0x58c>)
 8009346:	2200      	movs	r2, #0
 8009348:	4629      	mov	r1, r5
 800934a:	f7f7 f97d 	bl	8000648 <__aeabi_dmul>
 800934e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009352:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009356:	3601      	adds	r6, #1
 8009358:	465c      	mov	r4, fp
 800935a:	4630      	mov	r0, r6
 800935c:	f7f7 f90a 	bl	8000574 <__aeabi_i2d>
 8009360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009364:	f7f7 f970 	bl	8000648 <__aeabi_dmul>
 8009368:	4b65      	ldr	r3, [pc, #404]	@ (8009500 <_dtoa_r+0x590>)
 800936a:	2200      	movs	r2, #0
 800936c:	f7f6 ffb6 	bl	80002dc <__adddf3>
 8009370:	4605      	mov	r5, r0
 8009372:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009376:	2c00      	cmp	r4, #0
 8009378:	d16a      	bne.n	8009450 <_dtoa_r+0x4e0>
 800937a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800937e:	4b61      	ldr	r3, [pc, #388]	@ (8009504 <_dtoa_r+0x594>)
 8009380:	2200      	movs	r2, #0
 8009382:	f7f6 ffa9 	bl	80002d8 <__aeabi_dsub>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800938e:	462a      	mov	r2, r5
 8009390:	4633      	mov	r3, r6
 8009392:	f7f7 fbe9 	bl	8000b68 <__aeabi_dcmpgt>
 8009396:	2800      	cmp	r0, #0
 8009398:	f040 8298 	bne.w	80098cc <_dtoa_r+0x95c>
 800939c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a0:	462a      	mov	r2, r5
 80093a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093a6:	f7f7 fbc1 	bl	8000b2c <__aeabi_dcmplt>
 80093aa:	bb38      	cbnz	r0, 80093fc <_dtoa_r+0x48c>
 80093ac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80093b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80093b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f2c0 8157 	blt.w	800966a <_dtoa_r+0x6fa>
 80093bc:	2f0e      	cmp	r7, #14
 80093be:	f300 8154 	bgt.w	800966a <_dtoa_r+0x6fa>
 80093c2:	4b4b      	ldr	r3, [pc, #300]	@ (80094f0 <_dtoa_r+0x580>)
 80093c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093c8:	ed93 7b00 	vldr	d7, [r3]
 80093cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	ed8d 7b00 	vstr	d7, [sp]
 80093d4:	f280 80e5 	bge.w	80095a2 <_dtoa_r+0x632>
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f300 80e1 	bgt.w	80095a2 <_dtoa_r+0x632>
 80093e0:	d10c      	bne.n	80093fc <_dtoa_r+0x48c>
 80093e2:	4b48      	ldr	r3, [pc, #288]	@ (8009504 <_dtoa_r+0x594>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	ec51 0b17 	vmov	r0, r1, d7
 80093ea:	f7f7 f92d 	bl	8000648 <__aeabi_dmul>
 80093ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093f2:	f7f7 fbaf 	bl	8000b54 <__aeabi_dcmpge>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f000 8266 	beq.w	80098c8 <_dtoa_r+0x958>
 80093fc:	2400      	movs	r4, #0
 80093fe:	4625      	mov	r5, r4
 8009400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009402:	4656      	mov	r6, sl
 8009404:	ea6f 0803 	mvn.w	r8, r3
 8009408:	2700      	movs	r7, #0
 800940a:	4621      	mov	r1, r4
 800940c:	4648      	mov	r0, r9
 800940e:	f000 fcbf 	bl	8009d90 <_Bfree>
 8009412:	2d00      	cmp	r5, #0
 8009414:	f000 80bd 	beq.w	8009592 <_dtoa_r+0x622>
 8009418:	b12f      	cbz	r7, 8009426 <_dtoa_r+0x4b6>
 800941a:	42af      	cmp	r7, r5
 800941c:	d003      	beq.n	8009426 <_dtoa_r+0x4b6>
 800941e:	4639      	mov	r1, r7
 8009420:	4648      	mov	r0, r9
 8009422:	f000 fcb5 	bl	8009d90 <_Bfree>
 8009426:	4629      	mov	r1, r5
 8009428:	4648      	mov	r0, r9
 800942a:	f000 fcb1 	bl	8009d90 <_Bfree>
 800942e:	e0b0      	b.n	8009592 <_dtoa_r+0x622>
 8009430:	07e2      	lsls	r2, r4, #31
 8009432:	d505      	bpl.n	8009440 <_dtoa_r+0x4d0>
 8009434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009438:	f7f7 f906 	bl	8000648 <__aeabi_dmul>
 800943c:	3601      	adds	r6, #1
 800943e:	2301      	movs	r3, #1
 8009440:	1064      	asrs	r4, r4, #1
 8009442:	3508      	adds	r5, #8
 8009444:	e762      	b.n	800930c <_dtoa_r+0x39c>
 8009446:	2602      	movs	r6, #2
 8009448:	e765      	b.n	8009316 <_dtoa_r+0x3a6>
 800944a:	9c03      	ldr	r4, [sp, #12]
 800944c:	46b8      	mov	r8, r7
 800944e:	e784      	b.n	800935a <_dtoa_r+0x3ea>
 8009450:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <_dtoa_r+0x580>)
 8009452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009454:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009458:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800945c:	4454      	add	r4, sl
 800945e:	2900      	cmp	r1, #0
 8009460:	d054      	beq.n	800950c <_dtoa_r+0x59c>
 8009462:	4929      	ldr	r1, [pc, #164]	@ (8009508 <_dtoa_r+0x598>)
 8009464:	2000      	movs	r0, #0
 8009466:	f7f7 fa19 	bl	800089c <__aeabi_ddiv>
 800946a:	4633      	mov	r3, r6
 800946c:	462a      	mov	r2, r5
 800946e:	f7f6 ff33 	bl	80002d8 <__aeabi_dsub>
 8009472:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009476:	4656      	mov	r6, sl
 8009478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800947c:	f7f7 fb94 	bl	8000ba8 <__aeabi_d2iz>
 8009480:	4605      	mov	r5, r0
 8009482:	f7f7 f877 	bl	8000574 <__aeabi_i2d>
 8009486:	4602      	mov	r2, r0
 8009488:	460b      	mov	r3, r1
 800948a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800948e:	f7f6 ff23 	bl	80002d8 <__aeabi_dsub>
 8009492:	3530      	adds	r5, #48	@ 0x30
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800949c:	f806 5b01 	strb.w	r5, [r6], #1
 80094a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094a4:	f7f7 fb42 	bl	8000b2c <__aeabi_dcmplt>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d172      	bne.n	8009592 <_dtoa_r+0x622>
 80094ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b0:	4911      	ldr	r1, [pc, #68]	@ (80094f8 <_dtoa_r+0x588>)
 80094b2:	2000      	movs	r0, #0
 80094b4:	f7f6 ff10 	bl	80002d8 <__aeabi_dsub>
 80094b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094bc:	f7f7 fb36 	bl	8000b2c <__aeabi_dcmplt>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f040 80b4 	bne.w	800962e <_dtoa_r+0x6be>
 80094c6:	42a6      	cmp	r6, r4
 80094c8:	f43f af70 	beq.w	80093ac <_dtoa_r+0x43c>
 80094cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80094d0:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <_dtoa_r+0x58c>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	f7f7 f8b8 	bl	8000648 <__aeabi_dmul>
 80094d8:	4b08      	ldr	r3, [pc, #32]	@ (80094fc <_dtoa_r+0x58c>)
 80094da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094de:	2200      	movs	r2, #0
 80094e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094e4:	f7f7 f8b0 	bl	8000648 <__aeabi_dmul>
 80094e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094ec:	e7c4      	b.n	8009478 <_dtoa_r+0x508>
 80094ee:	bf00      	nop
 80094f0:	0800c6e8 	.word	0x0800c6e8
 80094f4:	0800c6c0 	.word	0x0800c6c0
 80094f8:	3ff00000 	.word	0x3ff00000
 80094fc:	40240000 	.word	0x40240000
 8009500:	401c0000 	.word	0x401c0000
 8009504:	40140000 	.word	0x40140000
 8009508:	3fe00000 	.word	0x3fe00000
 800950c:	4631      	mov	r1, r6
 800950e:	4628      	mov	r0, r5
 8009510:	f7f7 f89a 	bl	8000648 <__aeabi_dmul>
 8009514:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009518:	9413      	str	r4, [sp, #76]	@ 0x4c
 800951a:	4656      	mov	r6, sl
 800951c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009520:	f7f7 fb42 	bl	8000ba8 <__aeabi_d2iz>
 8009524:	4605      	mov	r5, r0
 8009526:	f7f7 f825 	bl	8000574 <__aeabi_i2d>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009532:	f7f6 fed1 	bl	80002d8 <__aeabi_dsub>
 8009536:	3530      	adds	r5, #48	@ 0x30
 8009538:	f806 5b01 	strb.w	r5, [r6], #1
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	42a6      	cmp	r6, r4
 8009542:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009546:	f04f 0200 	mov.w	r2, #0
 800954a:	d124      	bne.n	8009596 <_dtoa_r+0x626>
 800954c:	4baf      	ldr	r3, [pc, #700]	@ (800980c <_dtoa_r+0x89c>)
 800954e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009552:	f7f6 fec3 	bl	80002dc <__adddf3>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800955e:	f7f7 fb03 	bl	8000b68 <__aeabi_dcmpgt>
 8009562:	2800      	cmp	r0, #0
 8009564:	d163      	bne.n	800962e <_dtoa_r+0x6be>
 8009566:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800956a:	49a8      	ldr	r1, [pc, #672]	@ (800980c <_dtoa_r+0x89c>)
 800956c:	2000      	movs	r0, #0
 800956e:	f7f6 feb3 	bl	80002d8 <__aeabi_dsub>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800957a:	f7f7 fad7 	bl	8000b2c <__aeabi_dcmplt>
 800957e:	2800      	cmp	r0, #0
 8009580:	f43f af14 	beq.w	80093ac <_dtoa_r+0x43c>
 8009584:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009586:	1e73      	subs	r3, r6, #1
 8009588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800958a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800958e:	2b30      	cmp	r3, #48	@ 0x30
 8009590:	d0f8      	beq.n	8009584 <_dtoa_r+0x614>
 8009592:	4647      	mov	r7, r8
 8009594:	e03b      	b.n	800960e <_dtoa_r+0x69e>
 8009596:	4b9e      	ldr	r3, [pc, #632]	@ (8009810 <_dtoa_r+0x8a0>)
 8009598:	f7f7 f856 	bl	8000648 <__aeabi_dmul>
 800959c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095a0:	e7bc      	b.n	800951c <_dtoa_r+0x5ac>
 80095a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80095a6:	4656      	mov	r6, sl
 80095a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f7 f974 	bl	800089c <__aeabi_ddiv>
 80095b4:	f7f7 faf8 	bl	8000ba8 <__aeabi_d2iz>
 80095b8:	4680      	mov	r8, r0
 80095ba:	f7f6 ffdb 	bl	8000574 <__aeabi_i2d>
 80095be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095c2:	f7f7 f841 	bl	8000648 <__aeabi_dmul>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4620      	mov	r0, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095d2:	f7f6 fe81 	bl	80002d8 <__aeabi_dsub>
 80095d6:	f806 4b01 	strb.w	r4, [r6], #1
 80095da:	9d03      	ldr	r5, [sp, #12]
 80095dc:	eba6 040a 	sub.w	r4, r6, sl
 80095e0:	42a5      	cmp	r5, r4
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	d133      	bne.n	8009650 <_dtoa_r+0x6e0>
 80095e8:	f7f6 fe78 	bl	80002dc <__adddf3>
 80095ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095f0:	4604      	mov	r4, r0
 80095f2:	460d      	mov	r5, r1
 80095f4:	f7f7 fab8 	bl	8000b68 <__aeabi_dcmpgt>
 80095f8:	b9c0      	cbnz	r0, 800962c <_dtoa_r+0x6bc>
 80095fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f7 fa89 	bl	8000b18 <__aeabi_dcmpeq>
 8009606:	b110      	cbz	r0, 800960e <_dtoa_r+0x69e>
 8009608:	f018 0f01 	tst.w	r8, #1
 800960c:	d10e      	bne.n	800962c <_dtoa_r+0x6bc>
 800960e:	9902      	ldr	r1, [sp, #8]
 8009610:	4648      	mov	r0, r9
 8009612:	f000 fbbd 	bl	8009d90 <_Bfree>
 8009616:	2300      	movs	r3, #0
 8009618:	7033      	strb	r3, [r6, #0]
 800961a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800961c:	3701      	adds	r7, #1
 800961e:	601f      	str	r7, [r3, #0]
 8009620:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 824b 	beq.w	8009abe <_dtoa_r+0xb4e>
 8009628:	601e      	str	r6, [r3, #0]
 800962a:	e248      	b.n	8009abe <_dtoa_r+0xb4e>
 800962c:	46b8      	mov	r8, r7
 800962e:	4633      	mov	r3, r6
 8009630:	461e      	mov	r6, r3
 8009632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009636:	2a39      	cmp	r2, #57	@ 0x39
 8009638:	d106      	bne.n	8009648 <_dtoa_r+0x6d8>
 800963a:	459a      	cmp	sl, r3
 800963c:	d1f8      	bne.n	8009630 <_dtoa_r+0x6c0>
 800963e:	2230      	movs	r2, #48	@ 0x30
 8009640:	f108 0801 	add.w	r8, r8, #1
 8009644:	f88a 2000 	strb.w	r2, [sl]
 8009648:	781a      	ldrb	r2, [r3, #0]
 800964a:	3201      	adds	r2, #1
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	e7a0      	b.n	8009592 <_dtoa_r+0x622>
 8009650:	4b6f      	ldr	r3, [pc, #444]	@ (8009810 <_dtoa_r+0x8a0>)
 8009652:	2200      	movs	r2, #0
 8009654:	f7f6 fff8 	bl	8000648 <__aeabi_dmul>
 8009658:	2200      	movs	r2, #0
 800965a:	2300      	movs	r3, #0
 800965c:	4604      	mov	r4, r0
 800965e:	460d      	mov	r5, r1
 8009660:	f7f7 fa5a 	bl	8000b18 <__aeabi_dcmpeq>
 8009664:	2800      	cmp	r0, #0
 8009666:	d09f      	beq.n	80095a8 <_dtoa_r+0x638>
 8009668:	e7d1      	b.n	800960e <_dtoa_r+0x69e>
 800966a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800966c:	2a00      	cmp	r2, #0
 800966e:	f000 80ea 	beq.w	8009846 <_dtoa_r+0x8d6>
 8009672:	9a07      	ldr	r2, [sp, #28]
 8009674:	2a01      	cmp	r2, #1
 8009676:	f300 80cd 	bgt.w	8009814 <_dtoa_r+0x8a4>
 800967a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800967c:	2a00      	cmp	r2, #0
 800967e:	f000 80c1 	beq.w	8009804 <_dtoa_r+0x894>
 8009682:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009686:	9c08      	ldr	r4, [sp, #32]
 8009688:	9e00      	ldr	r6, [sp, #0]
 800968a:	9a00      	ldr	r2, [sp, #0]
 800968c:	441a      	add	r2, r3
 800968e:	9200      	str	r2, [sp, #0]
 8009690:	9a06      	ldr	r2, [sp, #24]
 8009692:	2101      	movs	r1, #1
 8009694:	441a      	add	r2, r3
 8009696:	4648      	mov	r0, r9
 8009698:	9206      	str	r2, [sp, #24]
 800969a:	f000 fc77 	bl	8009f8c <__i2b>
 800969e:	4605      	mov	r5, r0
 80096a0:	b166      	cbz	r6, 80096bc <_dtoa_r+0x74c>
 80096a2:	9b06      	ldr	r3, [sp, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dd09      	ble.n	80096bc <_dtoa_r+0x74c>
 80096a8:	42b3      	cmp	r3, r6
 80096aa:	9a00      	ldr	r2, [sp, #0]
 80096ac:	bfa8      	it	ge
 80096ae:	4633      	movge	r3, r6
 80096b0:	1ad2      	subs	r2, r2, r3
 80096b2:	9200      	str	r2, [sp, #0]
 80096b4:	9a06      	ldr	r2, [sp, #24]
 80096b6:	1af6      	subs	r6, r6, r3
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	9306      	str	r3, [sp, #24]
 80096bc:	9b08      	ldr	r3, [sp, #32]
 80096be:	b30b      	cbz	r3, 8009704 <_dtoa_r+0x794>
 80096c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 80c6 	beq.w	8009854 <_dtoa_r+0x8e4>
 80096c8:	2c00      	cmp	r4, #0
 80096ca:	f000 80c0 	beq.w	800984e <_dtoa_r+0x8de>
 80096ce:	4629      	mov	r1, r5
 80096d0:	4622      	mov	r2, r4
 80096d2:	4648      	mov	r0, r9
 80096d4:	f000 fd12 	bl	800a0fc <__pow5mult>
 80096d8:	9a02      	ldr	r2, [sp, #8]
 80096da:	4601      	mov	r1, r0
 80096dc:	4605      	mov	r5, r0
 80096de:	4648      	mov	r0, r9
 80096e0:	f000 fc6a 	bl	8009fb8 <__multiply>
 80096e4:	9902      	ldr	r1, [sp, #8]
 80096e6:	4680      	mov	r8, r0
 80096e8:	4648      	mov	r0, r9
 80096ea:	f000 fb51 	bl	8009d90 <_Bfree>
 80096ee:	9b08      	ldr	r3, [sp, #32]
 80096f0:	1b1b      	subs	r3, r3, r4
 80096f2:	9308      	str	r3, [sp, #32]
 80096f4:	f000 80b1 	beq.w	800985a <_dtoa_r+0x8ea>
 80096f8:	9a08      	ldr	r2, [sp, #32]
 80096fa:	4641      	mov	r1, r8
 80096fc:	4648      	mov	r0, r9
 80096fe:	f000 fcfd 	bl	800a0fc <__pow5mult>
 8009702:	9002      	str	r0, [sp, #8]
 8009704:	2101      	movs	r1, #1
 8009706:	4648      	mov	r0, r9
 8009708:	f000 fc40 	bl	8009f8c <__i2b>
 800970c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800970e:	4604      	mov	r4, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 81d8 	beq.w	8009ac6 <_dtoa_r+0xb56>
 8009716:	461a      	mov	r2, r3
 8009718:	4601      	mov	r1, r0
 800971a:	4648      	mov	r0, r9
 800971c:	f000 fcee 	bl	800a0fc <__pow5mult>
 8009720:	9b07      	ldr	r3, [sp, #28]
 8009722:	2b01      	cmp	r3, #1
 8009724:	4604      	mov	r4, r0
 8009726:	f300 809f 	bgt.w	8009868 <_dtoa_r+0x8f8>
 800972a:	9b04      	ldr	r3, [sp, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	f040 8097 	bne.w	8009860 <_dtoa_r+0x8f0>
 8009732:	9b05      	ldr	r3, [sp, #20]
 8009734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009738:	2b00      	cmp	r3, #0
 800973a:	f040 8093 	bne.w	8009864 <_dtoa_r+0x8f4>
 800973e:	9b05      	ldr	r3, [sp, #20]
 8009740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009744:	0d1b      	lsrs	r3, r3, #20
 8009746:	051b      	lsls	r3, r3, #20
 8009748:	b133      	cbz	r3, 8009758 <_dtoa_r+0x7e8>
 800974a:	9b00      	ldr	r3, [sp, #0]
 800974c:	3301      	adds	r3, #1
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	9b06      	ldr	r3, [sp, #24]
 8009752:	3301      	adds	r3, #1
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	2301      	movs	r3, #1
 8009758:	9308      	str	r3, [sp, #32]
 800975a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800975c:	2b00      	cmp	r3, #0
 800975e:	f000 81b8 	beq.w	8009ad2 <_dtoa_r+0xb62>
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009768:	6918      	ldr	r0, [r3, #16]
 800976a:	f000 fbc3 	bl	8009ef4 <__hi0bits>
 800976e:	f1c0 0020 	rsb	r0, r0, #32
 8009772:	9b06      	ldr	r3, [sp, #24]
 8009774:	4418      	add	r0, r3
 8009776:	f010 001f 	ands.w	r0, r0, #31
 800977a:	f000 8082 	beq.w	8009882 <_dtoa_r+0x912>
 800977e:	f1c0 0320 	rsb	r3, r0, #32
 8009782:	2b04      	cmp	r3, #4
 8009784:	dd73      	ble.n	800986e <_dtoa_r+0x8fe>
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	f1c0 001c 	rsb	r0, r0, #28
 800978c:	4403      	add	r3, r0
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	9b06      	ldr	r3, [sp, #24]
 8009792:	4403      	add	r3, r0
 8009794:	4406      	add	r6, r0
 8009796:	9306      	str	r3, [sp, #24]
 8009798:	9b00      	ldr	r3, [sp, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	dd05      	ble.n	80097aa <_dtoa_r+0x83a>
 800979e:	9902      	ldr	r1, [sp, #8]
 80097a0:	461a      	mov	r2, r3
 80097a2:	4648      	mov	r0, r9
 80097a4:	f000 fd04 	bl	800a1b0 <__lshift>
 80097a8:	9002      	str	r0, [sp, #8]
 80097aa:	9b06      	ldr	r3, [sp, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dd05      	ble.n	80097bc <_dtoa_r+0x84c>
 80097b0:	4621      	mov	r1, r4
 80097b2:	461a      	mov	r2, r3
 80097b4:	4648      	mov	r0, r9
 80097b6:	f000 fcfb 	bl	800a1b0 <__lshift>
 80097ba:	4604      	mov	r4, r0
 80097bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d061      	beq.n	8009886 <_dtoa_r+0x916>
 80097c2:	9802      	ldr	r0, [sp, #8]
 80097c4:	4621      	mov	r1, r4
 80097c6:	f000 fd5f 	bl	800a288 <__mcmp>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	da5b      	bge.n	8009886 <_dtoa_r+0x916>
 80097ce:	2300      	movs	r3, #0
 80097d0:	9902      	ldr	r1, [sp, #8]
 80097d2:	220a      	movs	r2, #10
 80097d4:	4648      	mov	r0, r9
 80097d6:	f000 fafd 	bl	8009dd4 <__multadd>
 80097da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097dc:	9002      	str	r0, [sp, #8]
 80097de:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8177 	beq.w	8009ad6 <_dtoa_r+0xb66>
 80097e8:	4629      	mov	r1, r5
 80097ea:	2300      	movs	r3, #0
 80097ec:	220a      	movs	r2, #10
 80097ee:	4648      	mov	r0, r9
 80097f0:	f000 faf0 	bl	8009dd4 <__multadd>
 80097f4:	f1bb 0f00 	cmp.w	fp, #0
 80097f8:	4605      	mov	r5, r0
 80097fa:	dc6f      	bgt.n	80098dc <_dtoa_r+0x96c>
 80097fc:	9b07      	ldr	r3, [sp, #28]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	dc49      	bgt.n	8009896 <_dtoa_r+0x926>
 8009802:	e06b      	b.n	80098dc <_dtoa_r+0x96c>
 8009804:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009806:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800980a:	e73c      	b.n	8009686 <_dtoa_r+0x716>
 800980c:	3fe00000 	.word	0x3fe00000
 8009810:	40240000 	.word	0x40240000
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	1e5c      	subs	r4, r3, #1
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	42a3      	cmp	r3, r4
 800981c:	db09      	blt.n	8009832 <_dtoa_r+0x8c2>
 800981e:	1b1c      	subs	r4, r3, r4
 8009820:	9b03      	ldr	r3, [sp, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	f6bf af30 	bge.w	8009688 <_dtoa_r+0x718>
 8009828:	9b00      	ldr	r3, [sp, #0]
 800982a:	9a03      	ldr	r2, [sp, #12]
 800982c:	1a9e      	subs	r6, r3, r2
 800982e:	2300      	movs	r3, #0
 8009830:	e72b      	b.n	800968a <_dtoa_r+0x71a>
 8009832:	9b08      	ldr	r3, [sp, #32]
 8009834:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009836:	9408      	str	r4, [sp, #32]
 8009838:	1ae3      	subs	r3, r4, r3
 800983a:	441a      	add	r2, r3
 800983c:	9e00      	ldr	r6, [sp, #0]
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	920d      	str	r2, [sp, #52]	@ 0x34
 8009842:	2400      	movs	r4, #0
 8009844:	e721      	b.n	800968a <_dtoa_r+0x71a>
 8009846:	9c08      	ldr	r4, [sp, #32]
 8009848:	9e00      	ldr	r6, [sp, #0]
 800984a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800984c:	e728      	b.n	80096a0 <_dtoa_r+0x730>
 800984e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009852:	e751      	b.n	80096f8 <_dtoa_r+0x788>
 8009854:	9a08      	ldr	r2, [sp, #32]
 8009856:	9902      	ldr	r1, [sp, #8]
 8009858:	e750      	b.n	80096fc <_dtoa_r+0x78c>
 800985a:	f8cd 8008 	str.w	r8, [sp, #8]
 800985e:	e751      	b.n	8009704 <_dtoa_r+0x794>
 8009860:	2300      	movs	r3, #0
 8009862:	e779      	b.n	8009758 <_dtoa_r+0x7e8>
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	e777      	b.n	8009758 <_dtoa_r+0x7e8>
 8009868:	2300      	movs	r3, #0
 800986a:	9308      	str	r3, [sp, #32]
 800986c:	e779      	b.n	8009762 <_dtoa_r+0x7f2>
 800986e:	d093      	beq.n	8009798 <_dtoa_r+0x828>
 8009870:	9a00      	ldr	r2, [sp, #0]
 8009872:	331c      	adds	r3, #28
 8009874:	441a      	add	r2, r3
 8009876:	9200      	str	r2, [sp, #0]
 8009878:	9a06      	ldr	r2, [sp, #24]
 800987a:	441a      	add	r2, r3
 800987c:	441e      	add	r6, r3
 800987e:	9206      	str	r2, [sp, #24]
 8009880:	e78a      	b.n	8009798 <_dtoa_r+0x828>
 8009882:	4603      	mov	r3, r0
 8009884:	e7f4      	b.n	8009870 <_dtoa_r+0x900>
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	46b8      	mov	r8, r7
 800988c:	dc20      	bgt.n	80098d0 <_dtoa_r+0x960>
 800988e:	469b      	mov	fp, r3
 8009890:	9b07      	ldr	r3, [sp, #28]
 8009892:	2b02      	cmp	r3, #2
 8009894:	dd1e      	ble.n	80098d4 <_dtoa_r+0x964>
 8009896:	f1bb 0f00 	cmp.w	fp, #0
 800989a:	f47f adb1 	bne.w	8009400 <_dtoa_r+0x490>
 800989e:	4621      	mov	r1, r4
 80098a0:	465b      	mov	r3, fp
 80098a2:	2205      	movs	r2, #5
 80098a4:	4648      	mov	r0, r9
 80098a6:	f000 fa95 	bl	8009dd4 <__multadd>
 80098aa:	4601      	mov	r1, r0
 80098ac:	4604      	mov	r4, r0
 80098ae:	9802      	ldr	r0, [sp, #8]
 80098b0:	f000 fcea 	bl	800a288 <__mcmp>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	f77f ada3 	ble.w	8009400 <_dtoa_r+0x490>
 80098ba:	4656      	mov	r6, sl
 80098bc:	2331      	movs	r3, #49	@ 0x31
 80098be:	f806 3b01 	strb.w	r3, [r6], #1
 80098c2:	f108 0801 	add.w	r8, r8, #1
 80098c6:	e59f      	b.n	8009408 <_dtoa_r+0x498>
 80098c8:	9c03      	ldr	r4, [sp, #12]
 80098ca:	46b8      	mov	r8, r7
 80098cc:	4625      	mov	r5, r4
 80098ce:	e7f4      	b.n	80098ba <_dtoa_r+0x94a>
 80098d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80098d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 8101 	beq.w	8009ade <_dtoa_r+0xb6e>
 80098dc:	2e00      	cmp	r6, #0
 80098de:	dd05      	ble.n	80098ec <_dtoa_r+0x97c>
 80098e0:	4629      	mov	r1, r5
 80098e2:	4632      	mov	r2, r6
 80098e4:	4648      	mov	r0, r9
 80098e6:	f000 fc63 	bl	800a1b0 <__lshift>
 80098ea:	4605      	mov	r5, r0
 80098ec:	9b08      	ldr	r3, [sp, #32]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d05c      	beq.n	80099ac <_dtoa_r+0xa3c>
 80098f2:	6869      	ldr	r1, [r5, #4]
 80098f4:	4648      	mov	r0, r9
 80098f6:	f000 fa0b 	bl	8009d10 <_Balloc>
 80098fa:	4606      	mov	r6, r0
 80098fc:	b928      	cbnz	r0, 800990a <_dtoa_r+0x99a>
 80098fe:	4b82      	ldr	r3, [pc, #520]	@ (8009b08 <_dtoa_r+0xb98>)
 8009900:	4602      	mov	r2, r0
 8009902:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009906:	f7ff bb4a 	b.w	8008f9e <_dtoa_r+0x2e>
 800990a:	692a      	ldr	r2, [r5, #16]
 800990c:	3202      	adds	r2, #2
 800990e:	0092      	lsls	r2, r2, #2
 8009910:	f105 010c 	add.w	r1, r5, #12
 8009914:	300c      	adds	r0, #12
 8009916:	f7ff fa8c 	bl	8008e32 <memcpy>
 800991a:	2201      	movs	r2, #1
 800991c:	4631      	mov	r1, r6
 800991e:	4648      	mov	r0, r9
 8009920:	f000 fc46 	bl	800a1b0 <__lshift>
 8009924:	f10a 0301 	add.w	r3, sl, #1
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	eb0a 030b 	add.w	r3, sl, fp
 800992e:	9308      	str	r3, [sp, #32]
 8009930:	9b04      	ldr	r3, [sp, #16]
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	462f      	mov	r7, r5
 8009938:	9306      	str	r3, [sp, #24]
 800993a:	4605      	mov	r5, r0
 800993c:	9b00      	ldr	r3, [sp, #0]
 800993e:	9802      	ldr	r0, [sp, #8]
 8009940:	4621      	mov	r1, r4
 8009942:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009946:	f7ff fa89 	bl	8008e5c <quorem>
 800994a:	4603      	mov	r3, r0
 800994c:	3330      	adds	r3, #48	@ 0x30
 800994e:	9003      	str	r0, [sp, #12]
 8009950:	4639      	mov	r1, r7
 8009952:	9802      	ldr	r0, [sp, #8]
 8009954:	9309      	str	r3, [sp, #36]	@ 0x24
 8009956:	f000 fc97 	bl	800a288 <__mcmp>
 800995a:	462a      	mov	r2, r5
 800995c:	9004      	str	r0, [sp, #16]
 800995e:	4621      	mov	r1, r4
 8009960:	4648      	mov	r0, r9
 8009962:	f000 fcad 	bl	800a2c0 <__mdiff>
 8009966:	68c2      	ldr	r2, [r0, #12]
 8009968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800996a:	4606      	mov	r6, r0
 800996c:	bb02      	cbnz	r2, 80099b0 <_dtoa_r+0xa40>
 800996e:	4601      	mov	r1, r0
 8009970:	9802      	ldr	r0, [sp, #8]
 8009972:	f000 fc89 	bl	800a288 <__mcmp>
 8009976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009978:	4602      	mov	r2, r0
 800997a:	4631      	mov	r1, r6
 800997c:	4648      	mov	r0, r9
 800997e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009980:	9309      	str	r3, [sp, #36]	@ 0x24
 8009982:	f000 fa05 	bl	8009d90 <_Bfree>
 8009986:	9b07      	ldr	r3, [sp, #28]
 8009988:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800998a:	9e00      	ldr	r6, [sp, #0]
 800998c:	ea42 0103 	orr.w	r1, r2, r3
 8009990:	9b06      	ldr	r3, [sp, #24]
 8009992:	4319      	orrs	r1, r3
 8009994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009996:	d10d      	bne.n	80099b4 <_dtoa_r+0xa44>
 8009998:	2b39      	cmp	r3, #57	@ 0x39
 800999a:	d027      	beq.n	80099ec <_dtoa_r+0xa7c>
 800999c:	9a04      	ldr	r2, [sp, #16]
 800999e:	2a00      	cmp	r2, #0
 80099a0:	dd01      	ble.n	80099a6 <_dtoa_r+0xa36>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	3331      	adds	r3, #49	@ 0x31
 80099a6:	f88b 3000 	strb.w	r3, [fp]
 80099aa:	e52e      	b.n	800940a <_dtoa_r+0x49a>
 80099ac:	4628      	mov	r0, r5
 80099ae:	e7b9      	b.n	8009924 <_dtoa_r+0x9b4>
 80099b0:	2201      	movs	r2, #1
 80099b2:	e7e2      	b.n	800997a <_dtoa_r+0xa0a>
 80099b4:	9904      	ldr	r1, [sp, #16]
 80099b6:	2900      	cmp	r1, #0
 80099b8:	db04      	blt.n	80099c4 <_dtoa_r+0xa54>
 80099ba:	9807      	ldr	r0, [sp, #28]
 80099bc:	4301      	orrs	r1, r0
 80099be:	9806      	ldr	r0, [sp, #24]
 80099c0:	4301      	orrs	r1, r0
 80099c2:	d120      	bne.n	8009a06 <_dtoa_r+0xa96>
 80099c4:	2a00      	cmp	r2, #0
 80099c6:	ddee      	ble.n	80099a6 <_dtoa_r+0xa36>
 80099c8:	9902      	ldr	r1, [sp, #8]
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	2201      	movs	r2, #1
 80099ce:	4648      	mov	r0, r9
 80099d0:	f000 fbee 	bl	800a1b0 <__lshift>
 80099d4:	4621      	mov	r1, r4
 80099d6:	9002      	str	r0, [sp, #8]
 80099d8:	f000 fc56 	bl	800a288 <__mcmp>
 80099dc:	2800      	cmp	r0, #0
 80099de:	9b00      	ldr	r3, [sp, #0]
 80099e0:	dc02      	bgt.n	80099e8 <_dtoa_r+0xa78>
 80099e2:	d1e0      	bne.n	80099a6 <_dtoa_r+0xa36>
 80099e4:	07da      	lsls	r2, r3, #31
 80099e6:	d5de      	bpl.n	80099a6 <_dtoa_r+0xa36>
 80099e8:	2b39      	cmp	r3, #57	@ 0x39
 80099ea:	d1da      	bne.n	80099a2 <_dtoa_r+0xa32>
 80099ec:	2339      	movs	r3, #57	@ 0x39
 80099ee:	f88b 3000 	strb.w	r3, [fp]
 80099f2:	4633      	mov	r3, r6
 80099f4:	461e      	mov	r6, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80099fc:	2a39      	cmp	r2, #57	@ 0x39
 80099fe:	d04e      	beq.n	8009a9e <_dtoa_r+0xb2e>
 8009a00:	3201      	adds	r2, #1
 8009a02:	701a      	strb	r2, [r3, #0]
 8009a04:	e501      	b.n	800940a <_dtoa_r+0x49a>
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	dd03      	ble.n	8009a12 <_dtoa_r+0xaa2>
 8009a0a:	2b39      	cmp	r3, #57	@ 0x39
 8009a0c:	d0ee      	beq.n	80099ec <_dtoa_r+0xa7c>
 8009a0e:	3301      	adds	r3, #1
 8009a10:	e7c9      	b.n	80099a6 <_dtoa_r+0xa36>
 8009a12:	9a00      	ldr	r2, [sp, #0]
 8009a14:	9908      	ldr	r1, [sp, #32]
 8009a16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a1a:	428a      	cmp	r2, r1
 8009a1c:	d028      	beq.n	8009a70 <_dtoa_r+0xb00>
 8009a1e:	9902      	ldr	r1, [sp, #8]
 8009a20:	2300      	movs	r3, #0
 8009a22:	220a      	movs	r2, #10
 8009a24:	4648      	mov	r0, r9
 8009a26:	f000 f9d5 	bl	8009dd4 <__multadd>
 8009a2a:	42af      	cmp	r7, r5
 8009a2c:	9002      	str	r0, [sp, #8]
 8009a2e:	f04f 0300 	mov.w	r3, #0
 8009a32:	f04f 020a 	mov.w	r2, #10
 8009a36:	4639      	mov	r1, r7
 8009a38:	4648      	mov	r0, r9
 8009a3a:	d107      	bne.n	8009a4c <_dtoa_r+0xadc>
 8009a3c:	f000 f9ca 	bl	8009dd4 <__multadd>
 8009a40:	4607      	mov	r7, r0
 8009a42:	4605      	mov	r5, r0
 8009a44:	9b00      	ldr	r3, [sp, #0]
 8009a46:	3301      	adds	r3, #1
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	e777      	b.n	800993c <_dtoa_r+0x9cc>
 8009a4c:	f000 f9c2 	bl	8009dd4 <__multadd>
 8009a50:	4629      	mov	r1, r5
 8009a52:	4607      	mov	r7, r0
 8009a54:	2300      	movs	r3, #0
 8009a56:	220a      	movs	r2, #10
 8009a58:	4648      	mov	r0, r9
 8009a5a:	f000 f9bb 	bl	8009dd4 <__multadd>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	e7f0      	b.n	8009a44 <_dtoa_r+0xad4>
 8009a62:	f1bb 0f00 	cmp.w	fp, #0
 8009a66:	bfcc      	ite	gt
 8009a68:	465e      	movgt	r6, fp
 8009a6a:	2601      	movle	r6, #1
 8009a6c:	4456      	add	r6, sl
 8009a6e:	2700      	movs	r7, #0
 8009a70:	9902      	ldr	r1, [sp, #8]
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	2201      	movs	r2, #1
 8009a76:	4648      	mov	r0, r9
 8009a78:	f000 fb9a 	bl	800a1b0 <__lshift>
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	9002      	str	r0, [sp, #8]
 8009a80:	f000 fc02 	bl	800a288 <__mcmp>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	dcb4      	bgt.n	80099f2 <_dtoa_r+0xa82>
 8009a88:	d102      	bne.n	8009a90 <_dtoa_r+0xb20>
 8009a8a:	9b00      	ldr	r3, [sp, #0]
 8009a8c:	07db      	lsls	r3, r3, #31
 8009a8e:	d4b0      	bmi.n	80099f2 <_dtoa_r+0xa82>
 8009a90:	4633      	mov	r3, r6
 8009a92:	461e      	mov	r6, r3
 8009a94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a98:	2a30      	cmp	r2, #48	@ 0x30
 8009a9a:	d0fa      	beq.n	8009a92 <_dtoa_r+0xb22>
 8009a9c:	e4b5      	b.n	800940a <_dtoa_r+0x49a>
 8009a9e:	459a      	cmp	sl, r3
 8009aa0:	d1a8      	bne.n	80099f4 <_dtoa_r+0xa84>
 8009aa2:	2331      	movs	r3, #49	@ 0x31
 8009aa4:	f108 0801 	add.w	r8, r8, #1
 8009aa8:	f88a 3000 	strb.w	r3, [sl]
 8009aac:	e4ad      	b.n	800940a <_dtoa_r+0x49a>
 8009aae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ab0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009b0c <_dtoa_r+0xb9c>
 8009ab4:	b11b      	cbz	r3, 8009abe <_dtoa_r+0xb4e>
 8009ab6:	f10a 0308 	add.w	r3, sl, #8
 8009aba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	4650      	mov	r0, sl
 8009ac0:	b017      	add	sp, #92	@ 0x5c
 8009ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac6:	9b07      	ldr	r3, [sp, #28]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	f77f ae2e 	ble.w	800972a <_dtoa_r+0x7ba>
 8009ace:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ad0:	9308      	str	r3, [sp, #32]
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	e64d      	b.n	8009772 <_dtoa_r+0x802>
 8009ad6:	f1bb 0f00 	cmp.w	fp, #0
 8009ada:	f77f aed9 	ble.w	8009890 <_dtoa_r+0x920>
 8009ade:	4656      	mov	r6, sl
 8009ae0:	9802      	ldr	r0, [sp, #8]
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	f7ff f9ba 	bl	8008e5c <quorem>
 8009ae8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009aec:	f806 3b01 	strb.w	r3, [r6], #1
 8009af0:	eba6 020a 	sub.w	r2, r6, sl
 8009af4:	4593      	cmp	fp, r2
 8009af6:	ddb4      	ble.n	8009a62 <_dtoa_r+0xaf2>
 8009af8:	9902      	ldr	r1, [sp, #8]
 8009afa:	2300      	movs	r3, #0
 8009afc:	220a      	movs	r2, #10
 8009afe:	4648      	mov	r0, r9
 8009b00:	f000 f968 	bl	8009dd4 <__multadd>
 8009b04:	9002      	str	r0, [sp, #8]
 8009b06:	e7eb      	b.n	8009ae0 <_dtoa_r+0xb70>
 8009b08:	0800c591 	.word	0x0800c591
 8009b0c:	0800c515 	.word	0x0800c515

08009b10 <_free_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4605      	mov	r5, r0
 8009b14:	2900      	cmp	r1, #0
 8009b16:	d041      	beq.n	8009b9c <_free_r+0x8c>
 8009b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b1c:	1f0c      	subs	r4, r1, #4
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfb8      	it	lt
 8009b22:	18e4      	addlt	r4, r4, r3
 8009b24:	f000 f8e8 	bl	8009cf8 <__malloc_lock>
 8009b28:	4a1d      	ldr	r2, [pc, #116]	@ (8009ba0 <_free_r+0x90>)
 8009b2a:	6813      	ldr	r3, [r2, #0]
 8009b2c:	b933      	cbnz	r3, 8009b3c <_free_r+0x2c>
 8009b2e:	6063      	str	r3, [r4, #4]
 8009b30:	6014      	str	r4, [r2, #0]
 8009b32:	4628      	mov	r0, r5
 8009b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b38:	f000 b8e4 	b.w	8009d04 <__malloc_unlock>
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	d908      	bls.n	8009b52 <_free_r+0x42>
 8009b40:	6820      	ldr	r0, [r4, #0]
 8009b42:	1821      	adds	r1, r4, r0
 8009b44:	428b      	cmp	r3, r1
 8009b46:	bf01      	itttt	eq
 8009b48:	6819      	ldreq	r1, [r3, #0]
 8009b4a:	685b      	ldreq	r3, [r3, #4]
 8009b4c:	1809      	addeq	r1, r1, r0
 8009b4e:	6021      	streq	r1, [r4, #0]
 8009b50:	e7ed      	b.n	8009b2e <_free_r+0x1e>
 8009b52:	461a      	mov	r2, r3
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	b10b      	cbz	r3, 8009b5c <_free_r+0x4c>
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	d9fa      	bls.n	8009b52 <_free_r+0x42>
 8009b5c:	6811      	ldr	r1, [r2, #0]
 8009b5e:	1850      	adds	r0, r2, r1
 8009b60:	42a0      	cmp	r0, r4
 8009b62:	d10b      	bne.n	8009b7c <_free_r+0x6c>
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	4401      	add	r1, r0
 8009b68:	1850      	adds	r0, r2, r1
 8009b6a:	4283      	cmp	r3, r0
 8009b6c:	6011      	str	r1, [r2, #0]
 8009b6e:	d1e0      	bne.n	8009b32 <_free_r+0x22>
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	6053      	str	r3, [r2, #4]
 8009b76:	4408      	add	r0, r1
 8009b78:	6010      	str	r0, [r2, #0]
 8009b7a:	e7da      	b.n	8009b32 <_free_r+0x22>
 8009b7c:	d902      	bls.n	8009b84 <_free_r+0x74>
 8009b7e:	230c      	movs	r3, #12
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	e7d6      	b.n	8009b32 <_free_r+0x22>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	1821      	adds	r1, r4, r0
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	bf04      	itt	eq
 8009b8c:	6819      	ldreq	r1, [r3, #0]
 8009b8e:	685b      	ldreq	r3, [r3, #4]
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	bf04      	itt	eq
 8009b94:	1809      	addeq	r1, r1, r0
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	6054      	str	r4, [r2, #4]
 8009b9a:	e7ca      	b.n	8009b32 <_free_r+0x22>
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200007ac 	.word	0x200007ac

08009ba4 <malloc>:
 8009ba4:	4b02      	ldr	r3, [pc, #8]	@ (8009bb0 <malloc+0xc>)
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	f000 b825 	b.w	8009bf8 <_malloc_r>
 8009bae:	bf00      	nop
 8009bb0:	20000038 	.word	0x20000038

08009bb4 <sbrk_aligned>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8009bf4 <sbrk_aligned+0x40>)
 8009bb8:	460c      	mov	r4, r1
 8009bba:	6831      	ldr	r1, [r6, #0]
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	b911      	cbnz	r1, 8009bc6 <sbrk_aligned+0x12>
 8009bc0:	f001 ffca 	bl	800bb58 <_sbrk_r>
 8009bc4:	6030      	str	r0, [r6, #0]
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f001 ffc5 	bl	800bb58 <_sbrk_r>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	d103      	bne.n	8009bda <sbrk_aligned+0x26>
 8009bd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	bd70      	pop	{r4, r5, r6, pc}
 8009bda:	1cc4      	adds	r4, r0, #3
 8009bdc:	f024 0403 	bic.w	r4, r4, #3
 8009be0:	42a0      	cmp	r0, r4
 8009be2:	d0f8      	beq.n	8009bd6 <sbrk_aligned+0x22>
 8009be4:	1a21      	subs	r1, r4, r0
 8009be6:	4628      	mov	r0, r5
 8009be8:	f001 ffb6 	bl	800bb58 <_sbrk_r>
 8009bec:	3001      	adds	r0, #1
 8009bee:	d1f2      	bne.n	8009bd6 <sbrk_aligned+0x22>
 8009bf0:	e7ef      	b.n	8009bd2 <sbrk_aligned+0x1e>
 8009bf2:	bf00      	nop
 8009bf4:	200007a8 	.word	0x200007a8

08009bf8 <_malloc_r>:
 8009bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	1ccd      	adds	r5, r1, #3
 8009bfe:	f025 0503 	bic.w	r5, r5, #3
 8009c02:	3508      	adds	r5, #8
 8009c04:	2d0c      	cmp	r5, #12
 8009c06:	bf38      	it	cc
 8009c08:	250c      	movcc	r5, #12
 8009c0a:	2d00      	cmp	r5, #0
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	db01      	blt.n	8009c14 <_malloc_r+0x1c>
 8009c10:	42a9      	cmp	r1, r5
 8009c12:	d904      	bls.n	8009c1e <_malloc_r+0x26>
 8009c14:	230c      	movs	r3, #12
 8009c16:	6033      	str	r3, [r6, #0]
 8009c18:	2000      	movs	r0, #0
 8009c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009cf4 <_malloc_r+0xfc>
 8009c22:	f000 f869 	bl	8009cf8 <__malloc_lock>
 8009c26:	f8d8 3000 	ldr.w	r3, [r8]
 8009c2a:	461c      	mov	r4, r3
 8009c2c:	bb44      	cbnz	r4, 8009c80 <_malloc_r+0x88>
 8009c2e:	4629      	mov	r1, r5
 8009c30:	4630      	mov	r0, r6
 8009c32:	f7ff ffbf 	bl	8009bb4 <sbrk_aligned>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	4604      	mov	r4, r0
 8009c3a:	d158      	bne.n	8009cee <_malloc_r+0xf6>
 8009c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8009c40:	4627      	mov	r7, r4
 8009c42:	2f00      	cmp	r7, #0
 8009c44:	d143      	bne.n	8009cce <_malloc_r+0xd6>
 8009c46:	2c00      	cmp	r4, #0
 8009c48:	d04b      	beq.n	8009ce2 <_malloc_r+0xea>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	4630      	mov	r0, r6
 8009c50:	eb04 0903 	add.w	r9, r4, r3
 8009c54:	f001 ff80 	bl	800bb58 <_sbrk_r>
 8009c58:	4581      	cmp	r9, r0
 8009c5a:	d142      	bne.n	8009ce2 <_malloc_r+0xea>
 8009c5c:	6821      	ldr	r1, [r4, #0]
 8009c5e:	1a6d      	subs	r5, r5, r1
 8009c60:	4629      	mov	r1, r5
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff ffa6 	bl	8009bb4 <sbrk_aligned>
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d03a      	beq.n	8009ce2 <_malloc_r+0xea>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	442b      	add	r3, r5
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	f8d8 3000 	ldr.w	r3, [r8]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	bb62      	cbnz	r2, 8009cd4 <_malloc_r+0xdc>
 8009c7a:	f8c8 7000 	str.w	r7, [r8]
 8009c7e:	e00f      	b.n	8009ca0 <_malloc_r+0xa8>
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	1b52      	subs	r2, r2, r5
 8009c84:	d420      	bmi.n	8009cc8 <_malloc_r+0xd0>
 8009c86:	2a0b      	cmp	r2, #11
 8009c88:	d917      	bls.n	8009cba <_malloc_r+0xc2>
 8009c8a:	1961      	adds	r1, r4, r5
 8009c8c:	42a3      	cmp	r3, r4
 8009c8e:	6025      	str	r5, [r4, #0]
 8009c90:	bf18      	it	ne
 8009c92:	6059      	strne	r1, [r3, #4]
 8009c94:	6863      	ldr	r3, [r4, #4]
 8009c96:	bf08      	it	eq
 8009c98:	f8c8 1000 	streq.w	r1, [r8]
 8009c9c:	5162      	str	r2, [r4, r5]
 8009c9e:	604b      	str	r3, [r1, #4]
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f000 f82f 	bl	8009d04 <__malloc_unlock>
 8009ca6:	f104 000b 	add.w	r0, r4, #11
 8009caa:	1d23      	adds	r3, r4, #4
 8009cac:	f020 0007 	bic.w	r0, r0, #7
 8009cb0:	1ac2      	subs	r2, r0, r3
 8009cb2:	bf1c      	itt	ne
 8009cb4:	1a1b      	subne	r3, r3, r0
 8009cb6:	50a3      	strne	r3, [r4, r2]
 8009cb8:	e7af      	b.n	8009c1a <_malloc_r+0x22>
 8009cba:	6862      	ldr	r2, [r4, #4]
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	bf0c      	ite	eq
 8009cc0:	f8c8 2000 	streq.w	r2, [r8]
 8009cc4:	605a      	strne	r2, [r3, #4]
 8009cc6:	e7eb      	b.n	8009ca0 <_malloc_r+0xa8>
 8009cc8:	4623      	mov	r3, r4
 8009cca:	6864      	ldr	r4, [r4, #4]
 8009ccc:	e7ae      	b.n	8009c2c <_malloc_r+0x34>
 8009cce:	463c      	mov	r4, r7
 8009cd0:	687f      	ldr	r7, [r7, #4]
 8009cd2:	e7b6      	b.n	8009c42 <_malloc_r+0x4a>
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	d1fb      	bne.n	8009cd4 <_malloc_r+0xdc>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	6053      	str	r3, [r2, #4]
 8009ce0:	e7de      	b.n	8009ca0 <_malloc_r+0xa8>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 f80c 	bl	8009d04 <__malloc_unlock>
 8009cec:	e794      	b.n	8009c18 <_malloc_r+0x20>
 8009cee:	6005      	str	r5, [r0, #0]
 8009cf0:	e7d6      	b.n	8009ca0 <_malloc_r+0xa8>
 8009cf2:	bf00      	nop
 8009cf4:	200007ac 	.word	0x200007ac

08009cf8 <__malloc_lock>:
 8009cf8:	4801      	ldr	r0, [pc, #4]	@ (8009d00 <__malloc_lock+0x8>)
 8009cfa:	f7ff b898 	b.w	8008e2e <__retarget_lock_acquire_recursive>
 8009cfe:	bf00      	nop
 8009d00:	200007a4 	.word	0x200007a4

08009d04 <__malloc_unlock>:
 8009d04:	4801      	ldr	r0, [pc, #4]	@ (8009d0c <__malloc_unlock+0x8>)
 8009d06:	f7ff b893 	b.w	8008e30 <__retarget_lock_release_recursive>
 8009d0a:	bf00      	nop
 8009d0c:	200007a4 	.word	0x200007a4

08009d10 <_Balloc>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	69c6      	ldr	r6, [r0, #28]
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	b976      	cbnz	r6, 8009d38 <_Balloc+0x28>
 8009d1a:	2010      	movs	r0, #16
 8009d1c:	f7ff ff42 	bl	8009ba4 <malloc>
 8009d20:	4602      	mov	r2, r0
 8009d22:	61e0      	str	r0, [r4, #28]
 8009d24:	b920      	cbnz	r0, 8009d30 <_Balloc+0x20>
 8009d26:	4b18      	ldr	r3, [pc, #96]	@ (8009d88 <_Balloc+0x78>)
 8009d28:	4818      	ldr	r0, [pc, #96]	@ (8009d8c <_Balloc+0x7c>)
 8009d2a:	216b      	movs	r1, #107	@ 0x6b
 8009d2c:	f001 ff2c 	bl	800bb88 <__assert_func>
 8009d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d34:	6006      	str	r6, [r0, #0]
 8009d36:	60c6      	str	r6, [r0, #12]
 8009d38:	69e6      	ldr	r6, [r4, #28]
 8009d3a:	68f3      	ldr	r3, [r6, #12]
 8009d3c:	b183      	cbz	r3, 8009d60 <_Balloc+0x50>
 8009d3e:	69e3      	ldr	r3, [r4, #28]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d46:	b9b8      	cbnz	r0, 8009d78 <_Balloc+0x68>
 8009d48:	2101      	movs	r1, #1
 8009d4a:	fa01 f605 	lsl.w	r6, r1, r5
 8009d4e:	1d72      	adds	r2, r6, #5
 8009d50:	0092      	lsls	r2, r2, #2
 8009d52:	4620      	mov	r0, r4
 8009d54:	f001 ff36 	bl	800bbc4 <_calloc_r>
 8009d58:	b160      	cbz	r0, 8009d74 <_Balloc+0x64>
 8009d5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d5e:	e00e      	b.n	8009d7e <_Balloc+0x6e>
 8009d60:	2221      	movs	r2, #33	@ 0x21
 8009d62:	2104      	movs	r1, #4
 8009d64:	4620      	mov	r0, r4
 8009d66:	f001 ff2d 	bl	800bbc4 <_calloc_r>
 8009d6a:	69e3      	ldr	r3, [r4, #28]
 8009d6c:	60f0      	str	r0, [r6, #12]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e4      	bne.n	8009d3e <_Balloc+0x2e>
 8009d74:	2000      	movs	r0, #0
 8009d76:	bd70      	pop	{r4, r5, r6, pc}
 8009d78:	6802      	ldr	r2, [r0, #0]
 8009d7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d84:	e7f7      	b.n	8009d76 <_Balloc+0x66>
 8009d86:	bf00      	nop
 8009d88:	0800c522 	.word	0x0800c522
 8009d8c:	0800c5a2 	.word	0x0800c5a2

08009d90 <_Bfree>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	69c6      	ldr	r6, [r0, #28]
 8009d94:	4605      	mov	r5, r0
 8009d96:	460c      	mov	r4, r1
 8009d98:	b976      	cbnz	r6, 8009db8 <_Bfree+0x28>
 8009d9a:	2010      	movs	r0, #16
 8009d9c:	f7ff ff02 	bl	8009ba4 <malloc>
 8009da0:	4602      	mov	r2, r0
 8009da2:	61e8      	str	r0, [r5, #28]
 8009da4:	b920      	cbnz	r0, 8009db0 <_Bfree+0x20>
 8009da6:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <_Bfree+0x3c>)
 8009da8:	4809      	ldr	r0, [pc, #36]	@ (8009dd0 <_Bfree+0x40>)
 8009daa:	218f      	movs	r1, #143	@ 0x8f
 8009dac:	f001 feec 	bl	800bb88 <__assert_func>
 8009db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009db4:	6006      	str	r6, [r0, #0]
 8009db6:	60c6      	str	r6, [r0, #12]
 8009db8:	b13c      	cbz	r4, 8009dca <_Bfree+0x3a>
 8009dba:	69eb      	ldr	r3, [r5, #28]
 8009dbc:	6862      	ldr	r2, [r4, #4]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dc4:	6021      	str	r1, [r4, #0]
 8009dc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	0800c522 	.word	0x0800c522
 8009dd0:	0800c5a2 	.word	0x0800c5a2

08009dd4 <__multadd>:
 8009dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd8:	690d      	ldr	r5, [r1, #16]
 8009dda:	4607      	mov	r7, r0
 8009ddc:	460c      	mov	r4, r1
 8009dde:	461e      	mov	r6, r3
 8009de0:	f101 0c14 	add.w	ip, r1, #20
 8009de4:	2000      	movs	r0, #0
 8009de6:	f8dc 3000 	ldr.w	r3, [ip]
 8009dea:	b299      	uxth	r1, r3
 8009dec:	fb02 6101 	mla	r1, r2, r1, r6
 8009df0:	0c1e      	lsrs	r6, r3, #16
 8009df2:	0c0b      	lsrs	r3, r1, #16
 8009df4:	fb02 3306 	mla	r3, r2, r6, r3
 8009df8:	b289      	uxth	r1, r1
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e00:	4285      	cmp	r5, r0
 8009e02:	f84c 1b04 	str.w	r1, [ip], #4
 8009e06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e0a:	dcec      	bgt.n	8009de6 <__multadd+0x12>
 8009e0c:	b30e      	cbz	r6, 8009e52 <__multadd+0x7e>
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	42ab      	cmp	r3, r5
 8009e12:	dc19      	bgt.n	8009e48 <__multadd+0x74>
 8009e14:	6861      	ldr	r1, [r4, #4]
 8009e16:	4638      	mov	r0, r7
 8009e18:	3101      	adds	r1, #1
 8009e1a:	f7ff ff79 	bl	8009d10 <_Balloc>
 8009e1e:	4680      	mov	r8, r0
 8009e20:	b928      	cbnz	r0, 8009e2e <__multadd+0x5a>
 8009e22:	4602      	mov	r2, r0
 8009e24:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <__multadd+0x84>)
 8009e26:	480d      	ldr	r0, [pc, #52]	@ (8009e5c <__multadd+0x88>)
 8009e28:	21ba      	movs	r1, #186	@ 0xba
 8009e2a:	f001 fead 	bl	800bb88 <__assert_func>
 8009e2e:	6922      	ldr	r2, [r4, #16]
 8009e30:	3202      	adds	r2, #2
 8009e32:	f104 010c 	add.w	r1, r4, #12
 8009e36:	0092      	lsls	r2, r2, #2
 8009e38:	300c      	adds	r0, #12
 8009e3a:	f7fe fffa 	bl	8008e32 <memcpy>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7ff ffa5 	bl	8009d90 <_Bfree>
 8009e46:	4644      	mov	r4, r8
 8009e48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	615e      	str	r6, [r3, #20]
 8009e50:	6125      	str	r5, [r4, #16]
 8009e52:	4620      	mov	r0, r4
 8009e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e58:	0800c591 	.word	0x0800c591
 8009e5c:	0800c5a2 	.word	0x0800c5a2

08009e60 <__s2b>:
 8009e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	4615      	mov	r5, r2
 8009e68:	461f      	mov	r7, r3
 8009e6a:	2209      	movs	r2, #9
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	4606      	mov	r6, r0
 8009e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e74:	2100      	movs	r1, #0
 8009e76:	2201      	movs	r2, #1
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	db09      	blt.n	8009e90 <__s2b+0x30>
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f7ff ff47 	bl	8009d10 <_Balloc>
 8009e82:	b940      	cbnz	r0, 8009e96 <__s2b+0x36>
 8009e84:	4602      	mov	r2, r0
 8009e86:	4b19      	ldr	r3, [pc, #100]	@ (8009eec <__s2b+0x8c>)
 8009e88:	4819      	ldr	r0, [pc, #100]	@ (8009ef0 <__s2b+0x90>)
 8009e8a:	21d3      	movs	r1, #211	@ 0xd3
 8009e8c:	f001 fe7c 	bl	800bb88 <__assert_func>
 8009e90:	0052      	lsls	r2, r2, #1
 8009e92:	3101      	adds	r1, #1
 8009e94:	e7f0      	b.n	8009e78 <__s2b+0x18>
 8009e96:	9b08      	ldr	r3, [sp, #32]
 8009e98:	6143      	str	r3, [r0, #20]
 8009e9a:	2d09      	cmp	r5, #9
 8009e9c:	f04f 0301 	mov.w	r3, #1
 8009ea0:	6103      	str	r3, [r0, #16]
 8009ea2:	dd16      	ble.n	8009ed2 <__s2b+0x72>
 8009ea4:	f104 0909 	add.w	r9, r4, #9
 8009ea8:	46c8      	mov	r8, r9
 8009eaa:	442c      	add	r4, r5
 8009eac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009eb0:	4601      	mov	r1, r0
 8009eb2:	3b30      	subs	r3, #48	@ 0x30
 8009eb4:	220a      	movs	r2, #10
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ff8c 	bl	8009dd4 <__multadd>
 8009ebc:	45a0      	cmp	r8, r4
 8009ebe:	d1f5      	bne.n	8009eac <__s2b+0x4c>
 8009ec0:	f1a5 0408 	sub.w	r4, r5, #8
 8009ec4:	444c      	add	r4, r9
 8009ec6:	1b2d      	subs	r5, r5, r4
 8009ec8:	1963      	adds	r3, r4, r5
 8009eca:	42bb      	cmp	r3, r7
 8009ecc:	db04      	blt.n	8009ed8 <__s2b+0x78>
 8009ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed2:	340a      	adds	r4, #10
 8009ed4:	2509      	movs	r5, #9
 8009ed6:	e7f6      	b.n	8009ec6 <__s2b+0x66>
 8009ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009edc:	4601      	mov	r1, r0
 8009ede:	3b30      	subs	r3, #48	@ 0x30
 8009ee0:	220a      	movs	r2, #10
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff ff76 	bl	8009dd4 <__multadd>
 8009ee8:	e7ee      	b.n	8009ec8 <__s2b+0x68>
 8009eea:	bf00      	nop
 8009eec:	0800c591 	.word	0x0800c591
 8009ef0:	0800c5a2 	.word	0x0800c5a2

08009ef4 <__hi0bits>:
 8009ef4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ef8:	4603      	mov	r3, r0
 8009efa:	bf36      	itet	cc
 8009efc:	0403      	lslcc	r3, r0, #16
 8009efe:	2000      	movcs	r0, #0
 8009f00:	2010      	movcc	r0, #16
 8009f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f06:	bf3c      	itt	cc
 8009f08:	021b      	lslcc	r3, r3, #8
 8009f0a:	3008      	addcc	r0, #8
 8009f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f10:	bf3c      	itt	cc
 8009f12:	011b      	lslcc	r3, r3, #4
 8009f14:	3004      	addcc	r0, #4
 8009f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f1a:	bf3c      	itt	cc
 8009f1c:	009b      	lslcc	r3, r3, #2
 8009f1e:	3002      	addcc	r0, #2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	db05      	blt.n	8009f30 <__hi0bits+0x3c>
 8009f24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f28:	f100 0001 	add.w	r0, r0, #1
 8009f2c:	bf08      	it	eq
 8009f2e:	2020      	moveq	r0, #32
 8009f30:	4770      	bx	lr

08009f32 <__lo0bits>:
 8009f32:	6803      	ldr	r3, [r0, #0]
 8009f34:	4602      	mov	r2, r0
 8009f36:	f013 0007 	ands.w	r0, r3, #7
 8009f3a:	d00b      	beq.n	8009f54 <__lo0bits+0x22>
 8009f3c:	07d9      	lsls	r1, r3, #31
 8009f3e:	d421      	bmi.n	8009f84 <__lo0bits+0x52>
 8009f40:	0798      	lsls	r0, r3, #30
 8009f42:	bf49      	itett	mi
 8009f44:	085b      	lsrmi	r3, r3, #1
 8009f46:	089b      	lsrpl	r3, r3, #2
 8009f48:	2001      	movmi	r0, #1
 8009f4a:	6013      	strmi	r3, [r2, #0]
 8009f4c:	bf5c      	itt	pl
 8009f4e:	6013      	strpl	r3, [r2, #0]
 8009f50:	2002      	movpl	r0, #2
 8009f52:	4770      	bx	lr
 8009f54:	b299      	uxth	r1, r3
 8009f56:	b909      	cbnz	r1, 8009f5c <__lo0bits+0x2a>
 8009f58:	0c1b      	lsrs	r3, r3, #16
 8009f5a:	2010      	movs	r0, #16
 8009f5c:	b2d9      	uxtb	r1, r3
 8009f5e:	b909      	cbnz	r1, 8009f64 <__lo0bits+0x32>
 8009f60:	3008      	adds	r0, #8
 8009f62:	0a1b      	lsrs	r3, r3, #8
 8009f64:	0719      	lsls	r1, r3, #28
 8009f66:	bf04      	itt	eq
 8009f68:	091b      	lsreq	r3, r3, #4
 8009f6a:	3004      	addeq	r0, #4
 8009f6c:	0799      	lsls	r1, r3, #30
 8009f6e:	bf04      	itt	eq
 8009f70:	089b      	lsreq	r3, r3, #2
 8009f72:	3002      	addeq	r0, #2
 8009f74:	07d9      	lsls	r1, r3, #31
 8009f76:	d403      	bmi.n	8009f80 <__lo0bits+0x4e>
 8009f78:	085b      	lsrs	r3, r3, #1
 8009f7a:	f100 0001 	add.w	r0, r0, #1
 8009f7e:	d003      	beq.n	8009f88 <__lo0bits+0x56>
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	4770      	bx	lr
 8009f84:	2000      	movs	r0, #0
 8009f86:	4770      	bx	lr
 8009f88:	2020      	movs	r0, #32
 8009f8a:	4770      	bx	lr

08009f8c <__i2b>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	460c      	mov	r4, r1
 8009f90:	2101      	movs	r1, #1
 8009f92:	f7ff febd 	bl	8009d10 <_Balloc>
 8009f96:	4602      	mov	r2, r0
 8009f98:	b928      	cbnz	r0, 8009fa6 <__i2b+0x1a>
 8009f9a:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <__i2b+0x24>)
 8009f9c:	4805      	ldr	r0, [pc, #20]	@ (8009fb4 <__i2b+0x28>)
 8009f9e:	f240 1145 	movw	r1, #325	@ 0x145
 8009fa2:	f001 fdf1 	bl	800bb88 <__assert_func>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	6144      	str	r4, [r0, #20]
 8009faa:	6103      	str	r3, [r0, #16]
 8009fac:	bd10      	pop	{r4, pc}
 8009fae:	bf00      	nop
 8009fb0:	0800c591 	.word	0x0800c591
 8009fb4:	0800c5a2 	.word	0x0800c5a2

08009fb8 <__multiply>:
 8009fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fbc:	4617      	mov	r7, r2
 8009fbe:	690a      	ldr	r2, [r1, #16]
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	bfa8      	it	ge
 8009fc6:	463b      	movge	r3, r7
 8009fc8:	4689      	mov	r9, r1
 8009fca:	bfa4      	itt	ge
 8009fcc:	460f      	movge	r7, r1
 8009fce:	4699      	movge	r9, r3
 8009fd0:	693d      	ldr	r5, [r7, #16]
 8009fd2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	eb05 060a 	add.w	r6, r5, sl
 8009fde:	42b3      	cmp	r3, r6
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	bfb8      	it	lt
 8009fe4:	3101      	addlt	r1, #1
 8009fe6:	f7ff fe93 	bl	8009d10 <_Balloc>
 8009fea:	b930      	cbnz	r0, 8009ffa <__multiply+0x42>
 8009fec:	4602      	mov	r2, r0
 8009fee:	4b41      	ldr	r3, [pc, #260]	@ (800a0f4 <__multiply+0x13c>)
 8009ff0:	4841      	ldr	r0, [pc, #260]	@ (800a0f8 <__multiply+0x140>)
 8009ff2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009ff6:	f001 fdc7 	bl	800bb88 <__assert_func>
 8009ffa:	f100 0414 	add.w	r4, r0, #20
 8009ffe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a002:	4623      	mov	r3, r4
 800a004:	2200      	movs	r2, #0
 800a006:	4573      	cmp	r3, lr
 800a008:	d320      	bcc.n	800a04c <__multiply+0x94>
 800a00a:	f107 0814 	add.w	r8, r7, #20
 800a00e:	f109 0114 	add.w	r1, r9, #20
 800a012:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a016:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a01a:	9302      	str	r3, [sp, #8]
 800a01c:	1beb      	subs	r3, r5, r7
 800a01e:	3b15      	subs	r3, #21
 800a020:	f023 0303 	bic.w	r3, r3, #3
 800a024:	3304      	adds	r3, #4
 800a026:	3715      	adds	r7, #21
 800a028:	42bd      	cmp	r5, r7
 800a02a:	bf38      	it	cc
 800a02c:	2304      	movcc	r3, #4
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	9b02      	ldr	r3, [sp, #8]
 800a032:	9103      	str	r1, [sp, #12]
 800a034:	428b      	cmp	r3, r1
 800a036:	d80c      	bhi.n	800a052 <__multiply+0x9a>
 800a038:	2e00      	cmp	r6, #0
 800a03a:	dd03      	ble.n	800a044 <__multiply+0x8c>
 800a03c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a040:	2b00      	cmp	r3, #0
 800a042:	d055      	beq.n	800a0f0 <__multiply+0x138>
 800a044:	6106      	str	r6, [r0, #16]
 800a046:	b005      	add	sp, #20
 800a048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04c:	f843 2b04 	str.w	r2, [r3], #4
 800a050:	e7d9      	b.n	800a006 <__multiply+0x4e>
 800a052:	f8b1 a000 	ldrh.w	sl, [r1]
 800a056:	f1ba 0f00 	cmp.w	sl, #0
 800a05a:	d01f      	beq.n	800a09c <__multiply+0xe4>
 800a05c:	46c4      	mov	ip, r8
 800a05e:	46a1      	mov	r9, r4
 800a060:	2700      	movs	r7, #0
 800a062:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a066:	f8d9 3000 	ldr.w	r3, [r9]
 800a06a:	fa1f fb82 	uxth.w	fp, r2
 800a06e:	b29b      	uxth	r3, r3
 800a070:	fb0a 330b 	mla	r3, sl, fp, r3
 800a074:	443b      	add	r3, r7
 800a076:	f8d9 7000 	ldr.w	r7, [r9]
 800a07a:	0c12      	lsrs	r2, r2, #16
 800a07c:	0c3f      	lsrs	r7, r7, #16
 800a07e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a082:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a086:	b29b      	uxth	r3, r3
 800a088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a08c:	4565      	cmp	r5, ip
 800a08e:	f849 3b04 	str.w	r3, [r9], #4
 800a092:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a096:	d8e4      	bhi.n	800a062 <__multiply+0xaa>
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	50e7      	str	r7, [r4, r3]
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0a2:	3104      	adds	r1, #4
 800a0a4:	f1b9 0f00 	cmp.w	r9, #0
 800a0a8:	d020      	beq.n	800a0ec <__multiply+0x134>
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	4647      	mov	r7, r8
 800a0ae:	46a4      	mov	ip, r4
 800a0b0:	f04f 0a00 	mov.w	sl, #0
 800a0b4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a0b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a0bc:	fb09 220b 	mla	r2, r9, fp, r2
 800a0c0:	4452      	add	r2, sl
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0c8:	f84c 3b04 	str.w	r3, [ip], #4
 800a0cc:	f857 3b04 	ldr.w	r3, [r7], #4
 800a0d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0d4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a0d8:	fb09 330a 	mla	r3, r9, sl, r3
 800a0dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a0e0:	42bd      	cmp	r5, r7
 800a0e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0e6:	d8e5      	bhi.n	800a0b4 <__multiply+0xfc>
 800a0e8:	9a01      	ldr	r2, [sp, #4]
 800a0ea:	50a3      	str	r3, [r4, r2]
 800a0ec:	3404      	adds	r4, #4
 800a0ee:	e79f      	b.n	800a030 <__multiply+0x78>
 800a0f0:	3e01      	subs	r6, #1
 800a0f2:	e7a1      	b.n	800a038 <__multiply+0x80>
 800a0f4:	0800c591 	.word	0x0800c591
 800a0f8:	0800c5a2 	.word	0x0800c5a2

0800a0fc <__pow5mult>:
 800a0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a100:	4615      	mov	r5, r2
 800a102:	f012 0203 	ands.w	r2, r2, #3
 800a106:	4607      	mov	r7, r0
 800a108:	460e      	mov	r6, r1
 800a10a:	d007      	beq.n	800a11c <__pow5mult+0x20>
 800a10c:	4c25      	ldr	r4, [pc, #148]	@ (800a1a4 <__pow5mult+0xa8>)
 800a10e:	3a01      	subs	r2, #1
 800a110:	2300      	movs	r3, #0
 800a112:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a116:	f7ff fe5d 	bl	8009dd4 <__multadd>
 800a11a:	4606      	mov	r6, r0
 800a11c:	10ad      	asrs	r5, r5, #2
 800a11e:	d03d      	beq.n	800a19c <__pow5mult+0xa0>
 800a120:	69fc      	ldr	r4, [r7, #28]
 800a122:	b97c      	cbnz	r4, 800a144 <__pow5mult+0x48>
 800a124:	2010      	movs	r0, #16
 800a126:	f7ff fd3d 	bl	8009ba4 <malloc>
 800a12a:	4602      	mov	r2, r0
 800a12c:	61f8      	str	r0, [r7, #28]
 800a12e:	b928      	cbnz	r0, 800a13c <__pow5mult+0x40>
 800a130:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a8 <__pow5mult+0xac>)
 800a132:	481e      	ldr	r0, [pc, #120]	@ (800a1ac <__pow5mult+0xb0>)
 800a134:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a138:	f001 fd26 	bl	800bb88 <__assert_func>
 800a13c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a140:	6004      	str	r4, [r0, #0]
 800a142:	60c4      	str	r4, [r0, #12]
 800a144:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a148:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a14c:	b94c      	cbnz	r4, 800a162 <__pow5mult+0x66>
 800a14e:	f240 2171 	movw	r1, #625	@ 0x271
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ff1a 	bl	8009f8c <__i2b>
 800a158:	2300      	movs	r3, #0
 800a15a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a15e:	4604      	mov	r4, r0
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	f04f 0900 	mov.w	r9, #0
 800a166:	07eb      	lsls	r3, r5, #31
 800a168:	d50a      	bpl.n	800a180 <__pow5mult+0x84>
 800a16a:	4631      	mov	r1, r6
 800a16c:	4622      	mov	r2, r4
 800a16e:	4638      	mov	r0, r7
 800a170:	f7ff ff22 	bl	8009fb8 <__multiply>
 800a174:	4631      	mov	r1, r6
 800a176:	4680      	mov	r8, r0
 800a178:	4638      	mov	r0, r7
 800a17a:	f7ff fe09 	bl	8009d90 <_Bfree>
 800a17e:	4646      	mov	r6, r8
 800a180:	106d      	asrs	r5, r5, #1
 800a182:	d00b      	beq.n	800a19c <__pow5mult+0xa0>
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	b938      	cbnz	r0, 800a198 <__pow5mult+0x9c>
 800a188:	4622      	mov	r2, r4
 800a18a:	4621      	mov	r1, r4
 800a18c:	4638      	mov	r0, r7
 800a18e:	f7ff ff13 	bl	8009fb8 <__multiply>
 800a192:	6020      	str	r0, [r4, #0]
 800a194:	f8c0 9000 	str.w	r9, [r0]
 800a198:	4604      	mov	r4, r0
 800a19a:	e7e4      	b.n	800a166 <__pow5mult+0x6a>
 800a19c:	4630      	mov	r0, r6
 800a19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800c6b4 	.word	0x0800c6b4
 800a1a8:	0800c522 	.word	0x0800c522
 800a1ac:	0800c5a2 	.word	0x0800c5a2

0800a1b0 <__lshift>:
 800a1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	6849      	ldr	r1, [r1, #4]
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	4607      	mov	r7, r0
 800a1c2:	4691      	mov	r9, r2
 800a1c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1c8:	f108 0601 	add.w	r6, r8, #1
 800a1cc:	42b3      	cmp	r3, r6
 800a1ce:	db0b      	blt.n	800a1e8 <__lshift+0x38>
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7ff fd9d 	bl	8009d10 <_Balloc>
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	b948      	cbnz	r0, 800a1ee <__lshift+0x3e>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	4b28      	ldr	r3, [pc, #160]	@ (800a280 <__lshift+0xd0>)
 800a1de:	4829      	ldr	r0, [pc, #164]	@ (800a284 <__lshift+0xd4>)
 800a1e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a1e4:	f001 fcd0 	bl	800bb88 <__assert_func>
 800a1e8:	3101      	adds	r1, #1
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	e7ee      	b.n	800a1cc <__lshift+0x1c>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f100 0114 	add.w	r1, r0, #20
 800a1f4:	f100 0210 	add.w	r2, r0, #16
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	4553      	cmp	r3, sl
 800a1fc:	db33      	blt.n	800a266 <__lshift+0xb6>
 800a1fe:	6920      	ldr	r0, [r4, #16]
 800a200:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a204:	f104 0314 	add.w	r3, r4, #20
 800a208:	f019 091f 	ands.w	r9, r9, #31
 800a20c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a210:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a214:	d02b      	beq.n	800a26e <__lshift+0xbe>
 800a216:	f1c9 0e20 	rsb	lr, r9, #32
 800a21a:	468a      	mov	sl, r1
 800a21c:	2200      	movs	r2, #0
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	fa00 f009 	lsl.w	r0, r0, r9
 800a224:	4310      	orrs	r0, r2
 800a226:	f84a 0b04 	str.w	r0, [sl], #4
 800a22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22e:	459c      	cmp	ip, r3
 800a230:	fa22 f20e 	lsr.w	r2, r2, lr
 800a234:	d8f3      	bhi.n	800a21e <__lshift+0x6e>
 800a236:	ebac 0304 	sub.w	r3, ip, r4
 800a23a:	3b15      	subs	r3, #21
 800a23c:	f023 0303 	bic.w	r3, r3, #3
 800a240:	3304      	adds	r3, #4
 800a242:	f104 0015 	add.w	r0, r4, #21
 800a246:	4560      	cmp	r0, ip
 800a248:	bf88      	it	hi
 800a24a:	2304      	movhi	r3, #4
 800a24c:	50ca      	str	r2, [r1, r3]
 800a24e:	b10a      	cbz	r2, 800a254 <__lshift+0xa4>
 800a250:	f108 0602 	add.w	r6, r8, #2
 800a254:	3e01      	subs	r6, #1
 800a256:	4638      	mov	r0, r7
 800a258:	612e      	str	r6, [r5, #16]
 800a25a:	4621      	mov	r1, r4
 800a25c:	f7ff fd98 	bl	8009d90 <_Bfree>
 800a260:	4628      	mov	r0, r5
 800a262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a266:	f842 0f04 	str.w	r0, [r2, #4]!
 800a26a:	3301      	adds	r3, #1
 800a26c:	e7c5      	b.n	800a1fa <__lshift+0x4a>
 800a26e:	3904      	subs	r1, #4
 800a270:	f853 2b04 	ldr.w	r2, [r3], #4
 800a274:	f841 2f04 	str.w	r2, [r1, #4]!
 800a278:	459c      	cmp	ip, r3
 800a27a:	d8f9      	bhi.n	800a270 <__lshift+0xc0>
 800a27c:	e7ea      	b.n	800a254 <__lshift+0xa4>
 800a27e:	bf00      	nop
 800a280:	0800c591 	.word	0x0800c591
 800a284:	0800c5a2 	.word	0x0800c5a2

0800a288 <__mcmp>:
 800a288:	690a      	ldr	r2, [r1, #16]
 800a28a:	4603      	mov	r3, r0
 800a28c:	6900      	ldr	r0, [r0, #16]
 800a28e:	1a80      	subs	r0, r0, r2
 800a290:	b530      	push	{r4, r5, lr}
 800a292:	d10e      	bne.n	800a2b2 <__mcmp+0x2a>
 800a294:	3314      	adds	r3, #20
 800a296:	3114      	adds	r1, #20
 800a298:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a29c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2a8:	4295      	cmp	r5, r2
 800a2aa:	d003      	beq.n	800a2b4 <__mcmp+0x2c>
 800a2ac:	d205      	bcs.n	800a2ba <__mcmp+0x32>
 800a2ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2b2:	bd30      	pop	{r4, r5, pc}
 800a2b4:	42a3      	cmp	r3, r4
 800a2b6:	d3f3      	bcc.n	800a2a0 <__mcmp+0x18>
 800a2b8:	e7fb      	b.n	800a2b2 <__mcmp+0x2a>
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	e7f9      	b.n	800a2b2 <__mcmp+0x2a>
	...

0800a2c0 <__mdiff>:
 800a2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	4689      	mov	r9, r1
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	4648      	mov	r0, r9
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	f7ff ffdb 	bl	800a288 <__mcmp>
 800a2d2:	1e05      	subs	r5, r0, #0
 800a2d4:	d112      	bne.n	800a2fc <__mdiff+0x3c>
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7ff fd19 	bl	8009d10 <_Balloc>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	b928      	cbnz	r0, 800a2ee <__mdiff+0x2e>
 800a2e2:	4b3f      	ldr	r3, [pc, #252]	@ (800a3e0 <__mdiff+0x120>)
 800a2e4:	f240 2137 	movw	r1, #567	@ 0x237
 800a2e8:	483e      	ldr	r0, [pc, #248]	@ (800a3e4 <__mdiff+0x124>)
 800a2ea:	f001 fc4d 	bl	800bb88 <__assert_func>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	b003      	add	sp, #12
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	bfbc      	itt	lt
 800a2fe:	464b      	movlt	r3, r9
 800a300:	46a1      	movlt	r9, r4
 800a302:	4630      	mov	r0, r6
 800a304:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a308:	bfba      	itte	lt
 800a30a:	461c      	movlt	r4, r3
 800a30c:	2501      	movlt	r5, #1
 800a30e:	2500      	movge	r5, #0
 800a310:	f7ff fcfe 	bl	8009d10 <_Balloc>
 800a314:	4602      	mov	r2, r0
 800a316:	b918      	cbnz	r0, 800a320 <__mdiff+0x60>
 800a318:	4b31      	ldr	r3, [pc, #196]	@ (800a3e0 <__mdiff+0x120>)
 800a31a:	f240 2145 	movw	r1, #581	@ 0x245
 800a31e:	e7e3      	b.n	800a2e8 <__mdiff+0x28>
 800a320:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a324:	6926      	ldr	r6, [r4, #16]
 800a326:	60c5      	str	r5, [r0, #12]
 800a328:	f109 0310 	add.w	r3, r9, #16
 800a32c:	f109 0514 	add.w	r5, r9, #20
 800a330:	f104 0e14 	add.w	lr, r4, #20
 800a334:	f100 0b14 	add.w	fp, r0, #20
 800a338:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a33c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a340:	9301      	str	r3, [sp, #4]
 800a342:	46d9      	mov	r9, fp
 800a344:	f04f 0c00 	mov.w	ip, #0
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a34e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	fa1f f38a 	uxth.w	r3, sl
 800a358:	4619      	mov	r1, r3
 800a35a:	b283      	uxth	r3, r0
 800a35c:	1acb      	subs	r3, r1, r3
 800a35e:	0c00      	lsrs	r0, r0, #16
 800a360:	4463      	add	r3, ip
 800a362:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a366:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a370:	4576      	cmp	r6, lr
 800a372:	f849 3b04 	str.w	r3, [r9], #4
 800a376:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a37a:	d8e5      	bhi.n	800a348 <__mdiff+0x88>
 800a37c:	1b33      	subs	r3, r6, r4
 800a37e:	3b15      	subs	r3, #21
 800a380:	f023 0303 	bic.w	r3, r3, #3
 800a384:	3415      	adds	r4, #21
 800a386:	3304      	adds	r3, #4
 800a388:	42a6      	cmp	r6, r4
 800a38a:	bf38      	it	cc
 800a38c:	2304      	movcc	r3, #4
 800a38e:	441d      	add	r5, r3
 800a390:	445b      	add	r3, fp
 800a392:	461e      	mov	r6, r3
 800a394:	462c      	mov	r4, r5
 800a396:	4544      	cmp	r4, r8
 800a398:	d30e      	bcc.n	800a3b8 <__mdiff+0xf8>
 800a39a:	f108 0103 	add.w	r1, r8, #3
 800a39e:	1b49      	subs	r1, r1, r5
 800a3a0:	f021 0103 	bic.w	r1, r1, #3
 800a3a4:	3d03      	subs	r5, #3
 800a3a6:	45a8      	cmp	r8, r5
 800a3a8:	bf38      	it	cc
 800a3aa:	2100      	movcc	r1, #0
 800a3ac:	440b      	add	r3, r1
 800a3ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3b2:	b191      	cbz	r1, 800a3da <__mdiff+0x11a>
 800a3b4:	6117      	str	r7, [r2, #16]
 800a3b6:	e79d      	b.n	800a2f4 <__mdiff+0x34>
 800a3b8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3bc:	46e6      	mov	lr, ip
 800a3be:	0c08      	lsrs	r0, r1, #16
 800a3c0:	fa1c fc81 	uxtah	ip, ip, r1
 800a3c4:	4471      	add	r1, lr
 800a3c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a3ca:	b289      	uxth	r1, r1
 800a3cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a3d0:	f846 1b04 	str.w	r1, [r6], #4
 800a3d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3d8:	e7dd      	b.n	800a396 <__mdiff+0xd6>
 800a3da:	3f01      	subs	r7, #1
 800a3dc:	e7e7      	b.n	800a3ae <__mdiff+0xee>
 800a3de:	bf00      	nop
 800a3e0:	0800c591 	.word	0x0800c591
 800a3e4:	0800c5a2 	.word	0x0800c5a2

0800a3e8 <__ulp>:
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	ed8d 0b00 	vstr	d0, [sp]
 800a3ee:	9a01      	ldr	r2, [sp, #4]
 800a3f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a430 <__ulp+0x48>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dc08      	bgt.n	800a40e <__ulp+0x26>
 800a3fc:	425b      	negs	r3, r3
 800a3fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a402:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a406:	da04      	bge.n	800a412 <__ulp+0x2a>
 800a408:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a40c:	4113      	asrs	r3, r2
 800a40e:	2200      	movs	r2, #0
 800a410:	e008      	b.n	800a424 <__ulp+0x3c>
 800a412:	f1a2 0314 	sub.w	r3, r2, #20
 800a416:	2b1e      	cmp	r3, #30
 800a418:	bfda      	itte	le
 800a41a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a41e:	40da      	lsrle	r2, r3
 800a420:	2201      	movgt	r2, #1
 800a422:	2300      	movs	r3, #0
 800a424:	4619      	mov	r1, r3
 800a426:	4610      	mov	r0, r2
 800a428:	ec41 0b10 	vmov	d0, r0, r1
 800a42c:	b002      	add	sp, #8
 800a42e:	4770      	bx	lr
 800a430:	7ff00000 	.word	0x7ff00000

0800a434 <__b2d>:
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	6906      	ldr	r6, [r0, #16]
 800a43a:	f100 0814 	add.w	r8, r0, #20
 800a43e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a442:	1f37      	subs	r7, r6, #4
 800a444:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a448:	4610      	mov	r0, r2
 800a44a:	f7ff fd53 	bl	8009ef4 <__hi0bits>
 800a44e:	f1c0 0320 	rsb	r3, r0, #32
 800a452:	280a      	cmp	r0, #10
 800a454:	600b      	str	r3, [r1, #0]
 800a456:	491b      	ldr	r1, [pc, #108]	@ (800a4c4 <__b2d+0x90>)
 800a458:	dc15      	bgt.n	800a486 <__b2d+0x52>
 800a45a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a45e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a462:	45b8      	cmp	r8, r7
 800a464:	ea43 0501 	orr.w	r5, r3, r1
 800a468:	bf34      	ite	cc
 800a46a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a46e:	2300      	movcs	r3, #0
 800a470:	3015      	adds	r0, #21
 800a472:	fa02 f000 	lsl.w	r0, r2, r0
 800a476:	fa23 f30c 	lsr.w	r3, r3, ip
 800a47a:	4303      	orrs	r3, r0
 800a47c:	461c      	mov	r4, r3
 800a47e:	ec45 4b10 	vmov	d0, r4, r5
 800a482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a486:	45b8      	cmp	r8, r7
 800a488:	bf3a      	itte	cc
 800a48a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a48e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a492:	2300      	movcs	r3, #0
 800a494:	380b      	subs	r0, #11
 800a496:	d012      	beq.n	800a4be <__b2d+0x8a>
 800a498:	f1c0 0120 	rsb	r1, r0, #32
 800a49c:	fa23 f401 	lsr.w	r4, r3, r1
 800a4a0:	4082      	lsls	r2, r0
 800a4a2:	4322      	orrs	r2, r4
 800a4a4:	4547      	cmp	r7, r8
 800a4a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a4aa:	bf8c      	ite	hi
 800a4ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4b0:	2200      	movls	r2, #0
 800a4b2:	4083      	lsls	r3, r0
 800a4b4:	40ca      	lsrs	r2, r1
 800a4b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	e7de      	b.n	800a47c <__b2d+0x48>
 800a4be:	ea42 0501 	orr.w	r5, r2, r1
 800a4c2:	e7db      	b.n	800a47c <__b2d+0x48>
 800a4c4:	3ff00000 	.word	0x3ff00000

0800a4c8 <__d2b>:
 800a4c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4cc:	460f      	mov	r7, r1
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	ec59 8b10 	vmov	r8, r9, d0
 800a4d4:	4616      	mov	r6, r2
 800a4d6:	f7ff fc1b 	bl	8009d10 <_Balloc>
 800a4da:	4604      	mov	r4, r0
 800a4dc:	b930      	cbnz	r0, 800a4ec <__d2b+0x24>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	4b23      	ldr	r3, [pc, #140]	@ (800a570 <__d2b+0xa8>)
 800a4e2:	4824      	ldr	r0, [pc, #144]	@ (800a574 <__d2b+0xac>)
 800a4e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4e8:	f001 fb4e 	bl	800bb88 <__assert_func>
 800a4ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4f4:	b10d      	cbz	r5, 800a4fa <__d2b+0x32>
 800a4f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	f1b8 0300 	subs.w	r3, r8, #0
 800a500:	d023      	beq.n	800a54a <__d2b+0x82>
 800a502:	4668      	mov	r0, sp
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	f7ff fd14 	bl	8009f32 <__lo0bits>
 800a50a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a50e:	b1d0      	cbz	r0, 800a546 <__d2b+0x7e>
 800a510:	f1c0 0320 	rsb	r3, r0, #32
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	430b      	orrs	r3, r1
 800a51a:	40c2      	lsrs	r2, r0
 800a51c:	6163      	str	r3, [r4, #20]
 800a51e:	9201      	str	r2, [sp, #4]
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	61a3      	str	r3, [r4, #24]
 800a524:	2b00      	cmp	r3, #0
 800a526:	bf0c      	ite	eq
 800a528:	2201      	moveq	r2, #1
 800a52a:	2202      	movne	r2, #2
 800a52c:	6122      	str	r2, [r4, #16]
 800a52e:	b1a5      	cbz	r5, 800a55a <__d2b+0x92>
 800a530:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a534:	4405      	add	r5, r0
 800a536:	603d      	str	r5, [r7, #0]
 800a538:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a53c:	6030      	str	r0, [r6, #0]
 800a53e:	4620      	mov	r0, r4
 800a540:	b003      	add	sp, #12
 800a542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a546:	6161      	str	r1, [r4, #20]
 800a548:	e7ea      	b.n	800a520 <__d2b+0x58>
 800a54a:	a801      	add	r0, sp, #4
 800a54c:	f7ff fcf1 	bl	8009f32 <__lo0bits>
 800a550:	9b01      	ldr	r3, [sp, #4]
 800a552:	6163      	str	r3, [r4, #20]
 800a554:	3020      	adds	r0, #32
 800a556:	2201      	movs	r2, #1
 800a558:	e7e8      	b.n	800a52c <__d2b+0x64>
 800a55a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a55e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a562:	6038      	str	r0, [r7, #0]
 800a564:	6918      	ldr	r0, [r3, #16]
 800a566:	f7ff fcc5 	bl	8009ef4 <__hi0bits>
 800a56a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a56e:	e7e5      	b.n	800a53c <__d2b+0x74>
 800a570:	0800c591 	.word	0x0800c591
 800a574:	0800c5a2 	.word	0x0800c5a2

0800a578 <__ratio>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	b085      	sub	sp, #20
 800a57e:	e9cd 1000 	strd	r1, r0, [sp]
 800a582:	a902      	add	r1, sp, #8
 800a584:	f7ff ff56 	bl	800a434 <__b2d>
 800a588:	9800      	ldr	r0, [sp, #0]
 800a58a:	a903      	add	r1, sp, #12
 800a58c:	ec55 4b10 	vmov	r4, r5, d0
 800a590:	f7ff ff50 	bl	800a434 <__b2d>
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	6919      	ldr	r1, [r3, #16]
 800a598:	9b00      	ldr	r3, [sp, #0]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	1ac9      	subs	r1, r1, r3
 800a59e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a5a2:	1a9b      	subs	r3, r3, r2
 800a5a4:	ec5b ab10 	vmov	sl, fp, d0
 800a5a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bfce      	itee	gt
 800a5b0:	462a      	movgt	r2, r5
 800a5b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5b6:	465a      	movle	r2, fp
 800a5b8:	462f      	mov	r7, r5
 800a5ba:	46d9      	mov	r9, fp
 800a5bc:	bfcc      	ite	gt
 800a5be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a5c6:	464b      	mov	r3, r9
 800a5c8:	4652      	mov	r2, sl
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f6 f965 	bl	800089c <__aeabi_ddiv>
 800a5d2:	ec41 0b10 	vmov	d0, r0, r1
 800a5d6:	b005      	add	sp, #20
 800a5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5dc <__copybits>:
 800a5dc:	3901      	subs	r1, #1
 800a5de:	b570      	push	{r4, r5, r6, lr}
 800a5e0:	1149      	asrs	r1, r1, #5
 800a5e2:	6914      	ldr	r4, [r2, #16]
 800a5e4:	3101      	adds	r1, #1
 800a5e6:	f102 0314 	add.w	r3, r2, #20
 800a5ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5f2:	1f05      	subs	r5, r0, #4
 800a5f4:	42a3      	cmp	r3, r4
 800a5f6:	d30c      	bcc.n	800a612 <__copybits+0x36>
 800a5f8:	1aa3      	subs	r3, r4, r2
 800a5fa:	3b11      	subs	r3, #17
 800a5fc:	f023 0303 	bic.w	r3, r3, #3
 800a600:	3211      	adds	r2, #17
 800a602:	42a2      	cmp	r2, r4
 800a604:	bf88      	it	hi
 800a606:	2300      	movhi	r3, #0
 800a608:	4418      	add	r0, r3
 800a60a:	2300      	movs	r3, #0
 800a60c:	4288      	cmp	r0, r1
 800a60e:	d305      	bcc.n	800a61c <__copybits+0x40>
 800a610:	bd70      	pop	{r4, r5, r6, pc}
 800a612:	f853 6b04 	ldr.w	r6, [r3], #4
 800a616:	f845 6f04 	str.w	r6, [r5, #4]!
 800a61a:	e7eb      	b.n	800a5f4 <__copybits+0x18>
 800a61c:	f840 3b04 	str.w	r3, [r0], #4
 800a620:	e7f4      	b.n	800a60c <__copybits+0x30>

0800a622 <__any_on>:
 800a622:	f100 0214 	add.w	r2, r0, #20
 800a626:	6900      	ldr	r0, [r0, #16]
 800a628:	114b      	asrs	r3, r1, #5
 800a62a:	4298      	cmp	r0, r3
 800a62c:	b510      	push	{r4, lr}
 800a62e:	db11      	blt.n	800a654 <__any_on+0x32>
 800a630:	dd0a      	ble.n	800a648 <__any_on+0x26>
 800a632:	f011 011f 	ands.w	r1, r1, #31
 800a636:	d007      	beq.n	800a648 <__any_on+0x26>
 800a638:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a63c:	fa24 f001 	lsr.w	r0, r4, r1
 800a640:	fa00 f101 	lsl.w	r1, r0, r1
 800a644:	428c      	cmp	r4, r1
 800a646:	d10b      	bne.n	800a660 <__any_on+0x3e>
 800a648:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d803      	bhi.n	800a658 <__any_on+0x36>
 800a650:	2000      	movs	r0, #0
 800a652:	bd10      	pop	{r4, pc}
 800a654:	4603      	mov	r3, r0
 800a656:	e7f7      	b.n	800a648 <__any_on+0x26>
 800a658:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a65c:	2900      	cmp	r1, #0
 800a65e:	d0f5      	beq.n	800a64c <__any_on+0x2a>
 800a660:	2001      	movs	r0, #1
 800a662:	e7f6      	b.n	800a652 <__any_on+0x30>

0800a664 <sulp>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	4604      	mov	r4, r0
 800a668:	460d      	mov	r5, r1
 800a66a:	ec45 4b10 	vmov	d0, r4, r5
 800a66e:	4616      	mov	r6, r2
 800a670:	f7ff feba 	bl	800a3e8 <__ulp>
 800a674:	ec51 0b10 	vmov	r0, r1, d0
 800a678:	b17e      	cbz	r6, 800a69a <sulp+0x36>
 800a67a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a67e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a682:	2b00      	cmp	r3, #0
 800a684:	dd09      	ble.n	800a69a <sulp+0x36>
 800a686:	051b      	lsls	r3, r3, #20
 800a688:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a68c:	2400      	movs	r4, #0
 800a68e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a692:	4622      	mov	r2, r4
 800a694:	462b      	mov	r3, r5
 800a696:	f7f5 ffd7 	bl	8000648 <__aeabi_dmul>
 800a69a:	ec41 0b10 	vmov	d0, r0, r1
 800a69e:	bd70      	pop	{r4, r5, r6, pc}

0800a6a0 <_strtod_l>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	b09f      	sub	sp, #124	@ 0x7c
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800a6ae:	9005      	str	r0, [sp, #20]
 800a6b0:	f04f 0a00 	mov.w	sl, #0
 800a6b4:	f04f 0b00 	mov.w	fp, #0
 800a6b8:	460a      	mov	r2, r1
 800a6ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6bc:	7811      	ldrb	r1, [r2, #0]
 800a6be:	292b      	cmp	r1, #43	@ 0x2b
 800a6c0:	d04a      	beq.n	800a758 <_strtod_l+0xb8>
 800a6c2:	d838      	bhi.n	800a736 <_strtod_l+0x96>
 800a6c4:	290d      	cmp	r1, #13
 800a6c6:	d832      	bhi.n	800a72e <_strtod_l+0x8e>
 800a6c8:	2908      	cmp	r1, #8
 800a6ca:	d832      	bhi.n	800a732 <_strtod_l+0x92>
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	d03b      	beq.n	800a748 <_strtod_l+0xa8>
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a6d6:	782a      	ldrb	r2, [r5, #0]
 800a6d8:	2a30      	cmp	r2, #48	@ 0x30
 800a6da:	f040 80b2 	bne.w	800a842 <_strtod_l+0x1a2>
 800a6de:	786a      	ldrb	r2, [r5, #1]
 800a6e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6e4:	2a58      	cmp	r2, #88	@ 0x58
 800a6e6:	d16e      	bne.n	800a7c6 <_strtod_l+0x126>
 800a6e8:	9302      	str	r3, [sp, #8]
 800a6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	4a8f      	ldr	r2, [pc, #572]	@ (800a930 <_strtod_l+0x290>)
 800a6f4:	9805      	ldr	r0, [sp, #20]
 800a6f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6f8:	a919      	add	r1, sp, #100	@ 0x64
 800a6fa:	f001 fadf 	bl	800bcbc <__gethex>
 800a6fe:	f010 060f 	ands.w	r6, r0, #15
 800a702:	4604      	mov	r4, r0
 800a704:	d005      	beq.n	800a712 <_strtod_l+0x72>
 800a706:	2e06      	cmp	r6, #6
 800a708:	d128      	bne.n	800a75c <_strtod_l+0xbc>
 800a70a:	3501      	adds	r5, #1
 800a70c:	2300      	movs	r3, #0
 800a70e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a710:	930e      	str	r3, [sp, #56]	@ 0x38
 800a712:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 858e 	bne.w	800b236 <_strtod_l+0xb96>
 800a71a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a71c:	b1cb      	cbz	r3, 800a752 <_strtod_l+0xb2>
 800a71e:	4652      	mov	r2, sl
 800a720:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a724:	ec43 2b10 	vmov	d0, r2, r3
 800a728:	b01f      	add	sp, #124	@ 0x7c
 800a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72e:	2920      	cmp	r1, #32
 800a730:	d1ce      	bne.n	800a6d0 <_strtod_l+0x30>
 800a732:	3201      	adds	r2, #1
 800a734:	e7c1      	b.n	800a6ba <_strtod_l+0x1a>
 800a736:	292d      	cmp	r1, #45	@ 0x2d
 800a738:	d1ca      	bne.n	800a6d0 <_strtod_l+0x30>
 800a73a:	2101      	movs	r1, #1
 800a73c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a73e:	1c51      	adds	r1, r2, #1
 800a740:	9119      	str	r1, [sp, #100]	@ 0x64
 800a742:	7852      	ldrb	r2, [r2, #1]
 800a744:	2a00      	cmp	r2, #0
 800a746:	d1c5      	bne.n	800a6d4 <_strtod_l+0x34>
 800a748:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a74a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f040 8570 	bne.w	800b232 <_strtod_l+0xb92>
 800a752:	4652      	mov	r2, sl
 800a754:	465b      	mov	r3, fp
 800a756:	e7e5      	b.n	800a724 <_strtod_l+0x84>
 800a758:	2100      	movs	r1, #0
 800a75a:	e7ef      	b.n	800a73c <_strtod_l+0x9c>
 800a75c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a75e:	b13a      	cbz	r2, 800a770 <_strtod_l+0xd0>
 800a760:	2135      	movs	r1, #53	@ 0x35
 800a762:	a81c      	add	r0, sp, #112	@ 0x70
 800a764:	f7ff ff3a 	bl	800a5dc <__copybits>
 800a768:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a76a:	9805      	ldr	r0, [sp, #20]
 800a76c:	f7ff fb10 	bl	8009d90 <_Bfree>
 800a770:	3e01      	subs	r6, #1
 800a772:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a774:	2e04      	cmp	r6, #4
 800a776:	d806      	bhi.n	800a786 <_strtod_l+0xe6>
 800a778:	e8df f006 	tbb	[pc, r6]
 800a77c:	201d0314 	.word	0x201d0314
 800a780:	14          	.byte	0x14
 800a781:	00          	.byte	0x00
 800a782:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a786:	05e1      	lsls	r1, r4, #23
 800a788:	bf48      	it	mi
 800a78a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a78e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a792:	0d1b      	lsrs	r3, r3, #20
 800a794:	051b      	lsls	r3, r3, #20
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1bb      	bne.n	800a712 <_strtod_l+0x72>
 800a79a:	f7fe fb1d 	bl	8008dd8 <__errno>
 800a79e:	2322      	movs	r3, #34	@ 0x22
 800a7a0:	6003      	str	r3, [r0, #0]
 800a7a2:	e7b6      	b.n	800a712 <_strtod_l+0x72>
 800a7a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a7a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a7ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a7b4:	e7e7      	b.n	800a786 <_strtod_l+0xe6>
 800a7b6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a938 <_strtod_l+0x298>
 800a7ba:	e7e4      	b.n	800a786 <_strtod_l+0xe6>
 800a7bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a7c0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a7c4:	e7df      	b.n	800a786 <_strtod_l+0xe6>
 800a7c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7c8:	1c5a      	adds	r2, r3, #1
 800a7ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7cc:	785b      	ldrb	r3, [r3, #1]
 800a7ce:	2b30      	cmp	r3, #48	@ 0x30
 800a7d0:	d0f9      	beq.n	800a7c6 <_strtod_l+0x126>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d09d      	beq.n	800a712 <_strtod_l+0x72>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	2700      	movs	r7, #0
 800a7da:	9308      	str	r3, [sp, #32]
 800a7dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7de:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7e0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a7e2:	46b9      	mov	r9, r7
 800a7e4:	220a      	movs	r2, #10
 800a7e6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a7e8:	7805      	ldrb	r5, [r0, #0]
 800a7ea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a7ee:	b2d9      	uxtb	r1, r3
 800a7f0:	2909      	cmp	r1, #9
 800a7f2:	d928      	bls.n	800a846 <_strtod_l+0x1a6>
 800a7f4:	494f      	ldr	r1, [pc, #316]	@ (800a934 <_strtod_l+0x294>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f001 f97a 	bl	800baf0 <strncmp>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d032      	beq.n	800a866 <_strtod_l+0x1c6>
 800a800:	2000      	movs	r0, #0
 800a802:	462a      	mov	r2, r5
 800a804:	900a      	str	r0, [sp, #40]	@ 0x28
 800a806:	464d      	mov	r5, r9
 800a808:	4603      	mov	r3, r0
 800a80a:	2a65      	cmp	r2, #101	@ 0x65
 800a80c:	d001      	beq.n	800a812 <_strtod_l+0x172>
 800a80e:	2a45      	cmp	r2, #69	@ 0x45
 800a810:	d114      	bne.n	800a83c <_strtod_l+0x19c>
 800a812:	b91d      	cbnz	r5, 800a81c <_strtod_l+0x17c>
 800a814:	9a08      	ldr	r2, [sp, #32]
 800a816:	4302      	orrs	r2, r0
 800a818:	d096      	beq.n	800a748 <_strtod_l+0xa8>
 800a81a:	2500      	movs	r5, #0
 800a81c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a81e:	1c62      	adds	r2, r4, #1
 800a820:	9219      	str	r2, [sp, #100]	@ 0x64
 800a822:	7862      	ldrb	r2, [r4, #1]
 800a824:	2a2b      	cmp	r2, #43	@ 0x2b
 800a826:	d07a      	beq.n	800a91e <_strtod_l+0x27e>
 800a828:	2a2d      	cmp	r2, #45	@ 0x2d
 800a82a:	d07e      	beq.n	800a92a <_strtod_l+0x28a>
 800a82c:	f04f 0c00 	mov.w	ip, #0
 800a830:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a834:	2909      	cmp	r1, #9
 800a836:	f240 8085 	bls.w	800a944 <_strtod_l+0x2a4>
 800a83a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a83c:	f04f 0800 	mov.w	r8, #0
 800a840:	e0a5      	b.n	800a98e <_strtod_l+0x2ee>
 800a842:	2300      	movs	r3, #0
 800a844:	e7c8      	b.n	800a7d8 <_strtod_l+0x138>
 800a846:	f1b9 0f08 	cmp.w	r9, #8
 800a84a:	bfd8      	it	le
 800a84c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a84e:	f100 0001 	add.w	r0, r0, #1
 800a852:	bfda      	itte	le
 800a854:	fb02 3301 	mlale	r3, r2, r1, r3
 800a858:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a85a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a85e:	f109 0901 	add.w	r9, r9, #1
 800a862:	9019      	str	r0, [sp, #100]	@ 0x64
 800a864:	e7bf      	b.n	800a7e6 <_strtod_l+0x146>
 800a866:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a86c:	785a      	ldrb	r2, [r3, #1]
 800a86e:	f1b9 0f00 	cmp.w	r9, #0
 800a872:	d03b      	beq.n	800a8ec <_strtod_l+0x24c>
 800a874:	900a      	str	r0, [sp, #40]	@ 0x28
 800a876:	464d      	mov	r5, r9
 800a878:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a87c:	2b09      	cmp	r3, #9
 800a87e:	d912      	bls.n	800a8a6 <_strtod_l+0x206>
 800a880:	2301      	movs	r3, #1
 800a882:	e7c2      	b.n	800a80a <_strtod_l+0x16a>
 800a884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	9219      	str	r2, [sp, #100]	@ 0x64
 800a88a:	785a      	ldrb	r2, [r3, #1]
 800a88c:	3001      	adds	r0, #1
 800a88e:	2a30      	cmp	r2, #48	@ 0x30
 800a890:	d0f8      	beq.n	800a884 <_strtod_l+0x1e4>
 800a892:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a896:	2b08      	cmp	r3, #8
 800a898:	f200 84d2 	bhi.w	800b240 <_strtod_l+0xba0>
 800a89c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a89e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	3a30      	subs	r2, #48	@ 0x30
 800a8a8:	f100 0301 	add.w	r3, r0, #1
 800a8ac:	d018      	beq.n	800a8e0 <_strtod_l+0x240>
 800a8ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8b0:	4419      	add	r1, r3
 800a8b2:	910a      	str	r1, [sp, #40]	@ 0x28
 800a8b4:	462e      	mov	r6, r5
 800a8b6:	f04f 0e0a 	mov.w	lr, #10
 800a8ba:	1c71      	adds	r1, r6, #1
 800a8bc:	eba1 0c05 	sub.w	ip, r1, r5
 800a8c0:	4563      	cmp	r3, ip
 800a8c2:	dc15      	bgt.n	800a8f0 <_strtod_l+0x250>
 800a8c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a8c8:	182b      	adds	r3, r5, r0
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	f105 0501 	add.w	r5, r5, #1
 800a8d0:	4405      	add	r5, r0
 800a8d2:	dc1a      	bgt.n	800a90a <_strtod_l+0x26a>
 800a8d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8d6:	230a      	movs	r3, #10
 800a8d8:	fb03 2301 	mla	r3, r3, r1, r2
 800a8dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8de:	2300      	movs	r3, #0
 800a8e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8e2:	1c51      	adds	r1, r2, #1
 800a8e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8e6:	7852      	ldrb	r2, [r2, #1]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	e7c5      	b.n	800a878 <_strtod_l+0x1d8>
 800a8ec:	4648      	mov	r0, r9
 800a8ee:	e7ce      	b.n	800a88e <_strtod_l+0x1ee>
 800a8f0:	2e08      	cmp	r6, #8
 800a8f2:	dc05      	bgt.n	800a900 <_strtod_l+0x260>
 800a8f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a8f6:	fb0e f606 	mul.w	r6, lr, r6
 800a8fa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a8fc:	460e      	mov	r6, r1
 800a8fe:	e7dc      	b.n	800a8ba <_strtod_l+0x21a>
 800a900:	2910      	cmp	r1, #16
 800a902:	bfd8      	it	le
 800a904:	fb0e f707 	mulle.w	r7, lr, r7
 800a908:	e7f8      	b.n	800a8fc <_strtod_l+0x25c>
 800a90a:	2b0f      	cmp	r3, #15
 800a90c:	bfdc      	itt	le
 800a90e:	230a      	movle	r3, #10
 800a910:	fb03 2707 	mlale	r7, r3, r7, r2
 800a914:	e7e3      	b.n	800a8de <_strtod_l+0x23e>
 800a916:	2300      	movs	r3, #0
 800a918:	930a      	str	r3, [sp, #40]	@ 0x28
 800a91a:	2301      	movs	r3, #1
 800a91c:	e77a      	b.n	800a814 <_strtod_l+0x174>
 800a91e:	f04f 0c00 	mov.w	ip, #0
 800a922:	1ca2      	adds	r2, r4, #2
 800a924:	9219      	str	r2, [sp, #100]	@ 0x64
 800a926:	78a2      	ldrb	r2, [r4, #2]
 800a928:	e782      	b.n	800a830 <_strtod_l+0x190>
 800a92a:	f04f 0c01 	mov.w	ip, #1
 800a92e:	e7f8      	b.n	800a922 <_strtod_l+0x282>
 800a930:	0800c7c4 	.word	0x0800c7c4
 800a934:	0800c5fb 	.word	0x0800c5fb
 800a938:	7ff00000 	.word	0x7ff00000
 800a93c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a93e:	1c51      	adds	r1, r2, #1
 800a940:	9119      	str	r1, [sp, #100]	@ 0x64
 800a942:	7852      	ldrb	r2, [r2, #1]
 800a944:	2a30      	cmp	r2, #48	@ 0x30
 800a946:	d0f9      	beq.n	800a93c <_strtod_l+0x29c>
 800a948:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a94c:	2908      	cmp	r1, #8
 800a94e:	f63f af75 	bhi.w	800a83c <_strtod_l+0x19c>
 800a952:	3a30      	subs	r2, #48	@ 0x30
 800a954:	9209      	str	r2, [sp, #36]	@ 0x24
 800a956:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a958:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a95a:	f04f 080a 	mov.w	r8, #10
 800a95e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a960:	1c56      	adds	r6, r2, #1
 800a962:	9619      	str	r6, [sp, #100]	@ 0x64
 800a964:	7852      	ldrb	r2, [r2, #1]
 800a966:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a96a:	f1be 0f09 	cmp.w	lr, #9
 800a96e:	d939      	bls.n	800a9e4 <_strtod_l+0x344>
 800a970:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a972:	1a76      	subs	r6, r6, r1
 800a974:	2e08      	cmp	r6, #8
 800a976:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a97a:	dc03      	bgt.n	800a984 <_strtod_l+0x2e4>
 800a97c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a97e:	4588      	cmp	r8, r1
 800a980:	bfa8      	it	ge
 800a982:	4688      	movge	r8, r1
 800a984:	f1bc 0f00 	cmp.w	ip, #0
 800a988:	d001      	beq.n	800a98e <_strtod_l+0x2ee>
 800a98a:	f1c8 0800 	rsb	r8, r8, #0
 800a98e:	2d00      	cmp	r5, #0
 800a990:	d14e      	bne.n	800aa30 <_strtod_l+0x390>
 800a992:	9908      	ldr	r1, [sp, #32]
 800a994:	4308      	orrs	r0, r1
 800a996:	f47f aebc 	bne.w	800a712 <_strtod_l+0x72>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f47f aed4 	bne.w	800a748 <_strtod_l+0xa8>
 800a9a0:	2a69      	cmp	r2, #105	@ 0x69
 800a9a2:	d028      	beq.n	800a9f6 <_strtod_l+0x356>
 800a9a4:	dc25      	bgt.n	800a9f2 <_strtod_l+0x352>
 800a9a6:	2a49      	cmp	r2, #73	@ 0x49
 800a9a8:	d025      	beq.n	800a9f6 <_strtod_l+0x356>
 800a9aa:	2a4e      	cmp	r2, #78	@ 0x4e
 800a9ac:	f47f aecc 	bne.w	800a748 <_strtod_l+0xa8>
 800a9b0:	499a      	ldr	r1, [pc, #616]	@ (800ac1c <_strtod_l+0x57c>)
 800a9b2:	a819      	add	r0, sp, #100	@ 0x64
 800a9b4:	f001 fba4 	bl	800c100 <__match>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	f43f aec5 	beq.w	800a748 <_strtod_l+0xa8>
 800a9be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b28      	cmp	r3, #40	@ 0x28
 800a9c4:	d12e      	bne.n	800aa24 <_strtod_l+0x384>
 800a9c6:	4996      	ldr	r1, [pc, #600]	@ (800ac20 <_strtod_l+0x580>)
 800a9c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9ca:	a819      	add	r0, sp, #100	@ 0x64
 800a9cc:	f001 fbac 	bl	800c128 <__hexnan>
 800a9d0:	2805      	cmp	r0, #5
 800a9d2:	d127      	bne.n	800aa24 <_strtod_l+0x384>
 800a9d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a9da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a9de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a9e2:	e696      	b.n	800a712 <_strtod_l+0x72>
 800a9e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9e6:	fb08 2101 	mla	r1, r8, r1, r2
 800a9ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a9ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9f0:	e7b5      	b.n	800a95e <_strtod_l+0x2be>
 800a9f2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9f4:	e7da      	b.n	800a9ac <_strtod_l+0x30c>
 800a9f6:	498b      	ldr	r1, [pc, #556]	@ (800ac24 <_strtod_l+0x584>)
 800a9f8:	a819      	add	r0, sp, #100	@ 0x64
 800a9fa:	f001 fb81 	bl	800c100 <__match>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	f43f aea2 	beq.w	800a748 <_strtod_l+0xa8>
 800aa04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa06:	4988      	ldr	r1, [pc, #544]	@ (800ac28 <_strtod_l+0x588>)
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	a819      	add	r0, sp, #100	@ 0x64
 800aa0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa0e:	f001 fb77 	bl	800c100 <__match>
 800aa12:	b910      	cbnz	r0, 800aa1a <_strtod_l+0x37a>
 800aa14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa16:	3301      	adds	r3, #1
 800aa18:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa1a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ac38 <_strtod_l+0x598>
 800aa1e:	f04f 0a00 	mov.w	sl, #0
 800aa22:	e676      	b.n	800a712 <_strtod_l+0x72>
 800aa24:	4881      	ldr	r0, [pc, #516]	@ (800ac2c <_strtod_l+0x58c>)
 800aa26:	f001 f8a7 	bl	800bb78 <nan>
 800aa2a:	ec5b ab10 	vmov	sl, fp, d0
 800aa2e:	e670      	b.n	800a712 <_strtod_l+0x72>
 800aa30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa32:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aa34:	eba8 0303 	sub.w	r3, r8, r3
 800aa38:	f1b9 0f00 	cmp.w	r9, #0
 800aa3c:	bf08      	it	eq
 800aa3e:	46a9      	moveq	r9, r5
 800aa40:	2d10      	cmp	r5, #16
 800aa42:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa44:	462c      	mov	r4, r5
 800aa46:	bfa8      	it	ge
 800aa48:	2410      	movge	r4, #16
 800aa4a:	f7f5 fd83 	bl	8000554 <__aeabi_ui2d>
 800aa4e:	2d09      	cmp	r5, #9
 800aa50:	4682      	mov	sl, r0
 800aa52:	468b      	mov	fp, r1
 800aa54:	dc13      	bgt.n	800aa7e <_strtod_l+0x3de>
 800aa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f43f ae5a 	beq.w	800a712 <_strtod_l+0x72>
 800aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa60:	dd78      	ble.n	800ab54 <_strtod_l+0x4b4>
 800aa62:	2b16      	cmp	r3, #22
 800aa64:	dc5f      	bgt.n	800ab26 <_strtod_l+0x486>
 800aa66:	4972      	ldr	r1, [pc, #456]	@ (800ac30 <_strtod_l+0x590>)
 800aa68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa70:	4652      	mov	r2, sl
 800aa72:	465b      	mov	r3, fp
 800aa74:	f7f5 fde8 	bl	8000648 <__aeabi_dmul>
 800aa78:	4682      	mov	sl, r0
 800aa7a:	468b      	mov	fp, r1
 800aa7c:	e649      	b.n	800a712 <_strtod_l+0x72>
 800aa7e:	4b6c      	ldr	r3, [pc, #432]	@ (800ac30 <_strtod_l+0x590>)
 800aa80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa88:	f7f5 fdde 	bl	8000648 <__aeabi_dmul>
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	4638      	mov	r0, r7
 800aa90:	468b      	mov	fp, r1
 800aa92:	f7f5 fd5f 	bl	8000554 <__aeabi_ui2d>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	4659      	mov	r1, fp
 800aa9e:	f7f5 fc1d 	bl	80002dc <__adddf3>
 800aaa2:	2d0f      	cmp	r5, #15
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	468b      	mov	fp, r1
 800aaa8:	ddd5      	ble.n	800aa56 <_strtod_l+0x3b6>
 800aaaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaac:	1b2c      	subs	r4, r5, r4
 800aaae:	441c      	add	r4, r3
 800aab0:	2c00      	cmp	r4, #0
 800aab2:	f340 8093 	ble.w	800abdc <_strtod_l+0x53c>
 800aab6:	f014 030f 	ands.w	r3, r4, #15
 800aaba:	d00a      	beq.n	800aad2 <_strtod_l+0x432>
 800aabc:	495c      	ldr	r1, [pc, #368]	@ (800ac30 <_strtod_l+0x590>)
 800aabe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aac2:	4652      	mov	r2, sl
 800aac4:	465b      	mov	r3, fp
 800aac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaca:	f7f5 fdbd 	bl	8000648 <__aeabi_dmul>
 800aace:	4682      	mov	sl, r0
 800aad0:	468b      	mov	fp, r1
 800aad2:	f034 040f 	bics.w	r4, r4, #15
 800aad6:	d073      	beq.n	800abc0 <_strtod_l+0x520>
 800aad8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aadc:	dd49      	ble.n	800ab72 <_strtod_l+0x4d2>
 800aade:	2400      	movs	r4, #0
 800aae0:	46a0      	mov	r8, r4
 800aae2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aae4:	46a1      	mov	r9, r4
 800aae6:	9a05      	ldr	r2, [sp, #20]
 800aae8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ac38 <_strtod_l+0x598>
 800aaec:	2322      	movs	r3, #34	@ 0x22
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	f04f 0a00 	mov.w	sl, #0
 800aaf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f43f ae0b 	beq.w	800a712 <_strtod_l+0x72>
 800aafc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aafe:	9805      	ldr	r0, [sp, #20]
 800ab00:	f7ff f946 	bl	8009d90 <_Bfree>
 800ab04:	9805      	ldr	r0, [sp, #20]
 800ab06:	4649      	mov	r1, r9
 800ab08:	f7ff f942 	bl	8009d90 <_Bfree>
 800ab0c:	9805      	ldr	r0, [sp, #20]
 800ab0e:	4641      	mov	r1, r8
 800ab10:	f7ff f93e 	bl	8009d90 <_Bfree>
 800ab14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab16:	9805      	ldr	r0, [sp, #20]
 800ab18:	f7ff f93a 	bl	8009d90 <_Bfree>
 800ab1c:	9805      	ldr	r0, [sp, #20]
 800ab1e:	4621      	mov	r1, r4
 800ab20:	f7ff f936 	bl	8009d90 <_Bfree>
 800ab24:	e5f5      	b.n	800a712 <_strtod_l+0x72>
 800ab26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	dbbc      	blt.n	800aaaa <_strtod_l+0x40a>
 800ab30:	4c3f      	ldr	r4, [pc, #252]	@ (800ac30 <_strtod_l+0x590>)
 800ab32:	f1c5 050f 	rsb	r5, r5, #15
 800ab36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	465b      	mov	r3, fp
 800ab3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab42:	f7f5 fd81 	bl	8000648 <__aeabi_dmul>
 800ab46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab48:	1b5d      	subs	r5, r3, r5
 800ab4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab52:	e78f      	b.n	800aa74 <_strtod_l+0x3d4>
 800ab54:	3316      	adds	r3, #22
 800ab56:	dba8      	blt.n	800aaaa <_strtod_l+0x40a>
 800ab58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5a:	eba3 0808 	sub.w	r8, r3, r8
 800ab5e:	4b34      	ldr	r3, [pc, #208]	@ (800ac30 <_strtod_l+0x590>)
 800ab60:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab64:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab68:	4650      	mov	r0, sl
 800ab6a:	4659      	mov	r1, fp
 800ab6c:	f7f5 fe96 	bl	800089c <__aeabi_ddiv>
 800ab70:	e782      	b.n	800aa78 <_strtod_l+0x3d8>
 800ab72:	2300      	movs	r3, #0
 800ab74:	4f2f      	ldr	r7, [pc, #188]	@ (800ac34 <_strtod_l+0x594>)
 800ab76:	1124      	asrs	r4, r4, #4
 800ab78:	4650      	mov	r0, sl
 800ab7a:	4659      	mov	r1, fp
 800ab7c:	461e      	mov	r6, r3
 800ab7e:	2c01      	cmp	r4, #1
 800ab80:	dc21      	bgt.n	800abc6 <_strtod_l+0x526>
 800ab82:	b10b      	cbz	r3, 800ab88 <_strtod_l+0x4e8>
 800ab84:	4682      	mov	sl, r0
 800ab86:	468b      	mov	fp, r1
 800ab88:	492a      	ldr	r1, [pc, #168]	@ (800ac34 <_strtod_l+0x594>)
 800ab8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab92:	4652      	mov	r2, sl
 800ab94:	465b      	mov	r3, fp
 800ab96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab9a:	f7f5 fd55 	bl	8000648 <__aeabi_dmul>
 800ab9e:	4b26      	ldr	r3, [pc, #152]	@ (800ac38 <_strtod_l+0x598>)
 800aba0:	460a      	mov	r2, r1
 800aba2:	400b      	ands	r3, r1
 800aba4:	4925      	ldr	r1, [pc, #148]	@ (800ac3c <_strtod_l+0x59c>)
 800aba6:	428b      	cmp	r3, r1
 800aba8:	4682      	mov	sl, r0
 800abaa:	d898      	bhi.n	800aade <_strtod_l+0x43e>
 800abac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800abb0:	428b      	cmp	r3, r1
 800abb2:	bf86      	itte	hi
 800abb4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ac40 <_strtod_l+0x5a0>
 800abb8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800abbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800abc0:	2300      	movs	r3, #0
 800abc2:	9308      	str	r3, [sp, #32]
 800abc4:	e076      	b.n	800acb4 <_strtod_l+0x614>
 800abc6:	07e2      	lsls	r2, r4, #31
 800abc8:	d504      	bpl.n	800abd4 <_strtod_l+0x534>
 800abca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abce:	f7f5 fd3b 	bl	8000648 <__aeabi_dmul>
 800abd2:	2301      	movs	r3, #1
 800abd4:	3601      	adds	r6, #1
 800abd6:	1064      	asrs	r4, r4, #1
 800abd8:	3708      	adds	r7, #8
 800abda:	e7d0      	b.n	800ab7e <_strtod_l+0x4de>
 800abdc:	d0f0      	beq.n	800abc0 <_strtod_l+0x520>
 800abde:	4264      	negs	r4, r4
 800abe0:	f014 020f 	ands.w	r2, r4, #15
 800abe4:	d00a      	beq.n	800abfc <_strtod_l+0x55c>
 800abe6:	4b12      	ldr	r3, [pc, #72]	@ (800ac30 <_strtod_l+0x590>)
 800abe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abec:	4650      	mov	r0, sl
 800abee:	4659      	mov	r1, fp
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 fe52 	bl	800089c <__aeabi_ddiv>
 800abf8:	4682      	mov	sl, r0
 800abfa:	468b      	mov	fp, r1
 800abfc:	1124      	asrs	r4, r4, #4
 800abfe:	d0df      	beq.n	800abc0 <_strtod_l+0x520>
 800ac00:	2c1f      	cmp	r4, #31
 800ac02:	dd1f      	ble.n	800ac44 <_strtod_l+0x5a4>
 800ac04:	2400      	movs	r4, #0
 800ac06:	46a0      	mov	r8, r4
 800ac08:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac0a:	46a1      	mov	r9, r4
 800ac0c:	9a05      	ldr	r2, [sp, #20]
 800ac0e:	2322      	movs	r3, #34	@ 0x22
 800ac10:	f04f 0a00 	mov.w	sl, #0
 800ac14:	f04f 0b00 	mov.w	fp, #0
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	e76b      	b.n	800aaf4 <_strtod_l+0x454>
 800ac1c:	0800c4e9 	.word	0x0800c4e9
 800ac20:	0800c7b0 	.word	0x0800c7b0
 800ac24:	0800c4e1 	.word	0x0800c4e1
 800ac28:	0800c518 	.word	0x0800c518
 800ac2c:	0800c651 	.word	0x0800c651
 800ac30:	0800c6e8 	.word	0x0800c6e8
 800ac34:	0800c6c0 	.word	0x0800c6c0
 800ac38:	7ff00000 	.word	0x7ff00000
 800ac3c:	7ca00000 	.word	0x7ca00000
 800ac40:	7fefffff 	.word	0x7fefffff
 800ac44:	f014 0310 	ands.w	r3, r4, #16
 800ac48:	bf18      	it	ne
 800ac4a:	236a      	movne	r3, #106	@ 0x6a
 800ac4c:	4ea9      	ldr	r6, [pc, #676]	@ (800aef4 <_strtod_l+0x854>)
 800ac4e:	9308      	str	r3, [sp, #32]
 800ac50:	4650      	mov	r0, sl
 800ac52:	4659      	mov	r1, fp
 800ac54:	2300      	movs	r3, #0
 800ac56:	07e7      	lsls	r7, r4, #31
 800ac58:	d504      	bpl.n	800ac64 <_strtod_l+0x5c4>
 800ac5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac5e:	f7f5 fcf3 	bl	8000648 <__aeabi_dmul>
 800ac62:	2301      	movs	r3, #1
 800ac64:	1064      	asrs	r4, r4, #1
 800ac66:	f106 0608 	add.w	r6, r6, #8
 800ac6a:	d1f4      	bne.n	800ac56 <_strtod_l+0x5b6>
 800ac6c:	b10b      	cbz	r3, 800ac72 <_strtod_l+0x5d2>
 800ac6e:	4682      	mov	sl, r0
 800ac70:	468b      	mov	fp, r1
 800ac72:	9b08      	ldr	r3, [sp, #32]
 800ac74:	b1b3      	cbz	r3, 800aca4 <_strtod_l+0x604>
 800ac76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	4659      	mov	r1, fp
 800ac82:	dd0f      	ble.n	800aca4 <_strtod_l+0x604>
 800ac84:	2b1f      	cmp	r3, #31
 800ac86:	dd56      	ble.n	800ad36 <_strtod_l+0x696>
 800ac88:	2b34      	cmp	r3, #52	@ 0x34
 800ac8a:	bfde      	ittt	le
 800ac8c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ac90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac94:	4093      	lslle	r3, r2
 800ac96:	f04f 0a00 	mov.w	sl, #0
 800ac9a:	bfcc      	ite	gt
 800ac9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aca0:	ea03 0b01 	andle.w	fp, r3, r1
 800aca4:	2200      	movs	r2, #0
 800aca6:	2300      	movs	r3, #0
 800aca8:	4650      	mov	r0, sl
 800acaa:	4659      	mov	r1, fp
 800acac:	f7f5 ff34 	bl	8000b18 <__aeabi_dcmpeq>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d1a7      	bne.n	800ac04 <_strtod_l+0x564>
 800acb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800acba:	9805      	ldr	r0, [sp, #20]
 800acbc:	462b      	mov	r3, r5
 800acbe:	464a      	mov	r2, r9
 800acc0:	f7ff f8ce 	bl	8009e60 <__s2b>
 800acc4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800acc6:	2800      	cmp	r0, #0
 800acc8:	f43f af09 	beq.w	800aade <_strtod_l+0x43e>
 800accc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd0:	2a00      	cmp	r2, #0
 800acd2:	eba3 0308 	sub.w	r3, r3, r8
 800acd6:	bfa8      	it	ge
 800acd8:	2300      	movge	r3, #0
 800acda:	9312      	str	r3, [sp, #72]	@ 0x48
 800acdc:	2400      	movs	r4, #0
 800acde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ace2:	9316      	str	r3, [sp, #88]	@ 0x58
 800ace4:	46a0      	mov	r8, r4
 800ace6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace8:	9805      	ldr	r0, [sp, #20]
 800acea:	6859      	ldr	r1, [r3, #4]
 800acec:	f7ff f810 	bl	8009d10 <_Balloc>
 800acf0:	4681      	mov	r9, r0
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f43f aef7 	beq.w	800aae6 <_strtod_l+0x446>
 800acf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acfa:	691a      	ldr	r2, [r3, #16]
 800acfc:	3202      	adds	r2, #2
 800acfe:	f103 010c 	add.w	r1, r3, #12
 800ad02:	0092      	lsls	r2, r2, #2
 800ad04:	300c      	adds	r0, #12
 800ad06:	f7fe f894 	bl	8008e32 <memcpy>
 800ad0a:	ec4b ab10 	vmov	d0, sl, fp
 800ad0e:	9805      	ldr	r0, [sp, #20]
 800ad10:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad12:	a91b      	add	r1, sp, #108	@ 0x6c
 800ad14:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ad18:	f7ff fbd6 	bl	800a4c8 <__d2b>
 800ad1c:	901a      	str	r0, [sp, #104]	@ 0x68
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f43f aee1 	beq.w	800aae6 <_strtod_l+0x446>
 800ad24:	9805      	ldr	r0, [sp, #20]
 800ad26:	2101      	movs	r1, #1
 800ad28:	f7ff f930 	bl	8009f8c <__i2b>
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	b948      	cbnz	r0, 800ad44 <_strtod_l+0x6a4>
 800ad30:	f04f 0800 	mov.w	r8, #0
 800ad34:	e6d7      	b.n	800aae6 <_strtod_l+0x446>
 800ad36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3e:	ea03 0a0a 	and.w	sl, r3, sl
 800ad42:	e7af      	b.n	800aca4 <_strtod_l+0x604>
 800ad44:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ad46:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ad48:	2d00      	cmp	r5, #0
 800ad4a:	bfab      	itete	ge
 800ad4c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad4e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad50:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad52:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad54:	bfac      	ite	ge
 800ad56:	18ef      	addge	r7, r5, r3
 800ad58:	1b5e      	sublt	r6, r3, r5
 800ad5a:	9b08      	ldr	r3, [sp, #32]
 800ad5c:	1aed      	subs	r5, r5, r3
 800ad5e:	4415      	add	r5, r2
 800ad60:	4b65      	ldr	r3, [pc, #404]	@ (800aef8 <_strtod_l+0x858>)
 800ad62:	3d01      	subs	r5, #1
 800ad64:	429d      	cmp	r5, r3
 800ad66:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad6a:	da50      	bge.n	800ae0e <_strtod_l+0x76e>
 800ad6c:	1b5b      	subs	r3, r3, r5
 800ad6e:	2b1f      	cmp	r3, #31
 800ad70:	eba2 0203 	sub.w	r2, r2, r3
 800ad74:	f04f 0101 	mov.w	r1, #1
 800ad78:	dc3d      	bgt.n	800adf6 <_strtod_l+0x756>
 800ad7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad7e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad80:	2300      	movs	r3, #0
 800ad82:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad84:	18bd      	adds	r5, r7, r2
 800ad86:	9b08      	ldr	r3, [sp, #32]
 800ad88:	42af      	cmp	r7, r5
 800ad8a:	4416      	add	r6, r2
 800ad8c:	441e      	add	r6, r3
 800ad8e:	463b      	mov	r3, r7
 800ad90:	bfa8      	it	ge
 800ad92:	462b      	movge	r3, r5
 800ad94:	42b3      	cmp	r3, r6
 800ad96:	bfa8      	it	ge
 800ad98:	4633      	movge	r3, r6
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bfc2      	ittt	gt
 800ad9e:	1aed      	subgt	r5, r5, r3
 800ada0:	1af6      	subgt	r6, r6, r3
 800ada2:	1aff      	subgt	r7, r7, r3
 800ada4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd16      	ble.n	800add8 <_strtod_l+0x738>
 800adaa:	4641      	mov	r1, r8
 800adac:	9805      	ldr	r0, [sp, #20]
 800adae:	461a      	mov	r2, r3
 800adb0:	f7ff f9a4 	bl	800a0fc <__pow5mult>
 800adb4:	4680      	mov	r8, r0
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d0ba      	beq.n	800ad30 <_strtod_l+0x690>
 800adba:	4601      	mov	r1, r0
 800adbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800adbe:	9805      	ldr	r0, [sp, #20]
 800adc0:	f7ff f8fa 	bl	8009fb8 <__multiply>
 800adc4:	900a      	str	r0, [sp, #40]	@ 0x28
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f43f ae8d 	beq.w	800aae6 <_strtod_l+0x446>
 800adcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adce:	9805      	ldr	r0, [sp, #20]
 800add0:	f7fe ffde 	bl	8009d90 <_Bfree>
 800add4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add6:	931a      	str	r3, [sp, #104]	@ 0x68
 800add8:	2d00      	cmp	r5, #0
 800adda:	dc1d      	bgt.n	800ae18 <_strtod_l+0x778>
 800addc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adde:	2b00      	cmp	r3, #0
 800ade0:	dd23      	ble.n	800ae2a <_strtod_l+0x78a>
 800ade2:	4649      	mov	r1, r9
 800ade4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ade6:	9805      	ldr	r0, [sp, #20]
 800ade8:	f7ff f988 	bl	800a0fc <__pow5mult>
 800adec:	4681      	mov	r9, r0
 800adee:	b9e0      	cbnz	r0, 800ae2a <_strtod_l+0x78a>
 800adf0:	f04f 0900 	mov.w	r9, #0
 800adf4:	e677      	b.n	800aae6 <_strtod_l+0x446>
 800adf6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800adfa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800adfe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ae02:	35e2      	adds	r5, #226	@ 0xe2
 800ae04:	fa01 f305 	lsl.w	r3, r1, r5
 800ae08:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae0a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ae0c:	e7ba      	b.n	800ad84 <_strtod_l+0x6e4>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae12:	2301      	movs	r3, #1
 800ae14:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae16:	e7b5      	b.n	800ad84 <_strtod_l+0x6e4>
 800ae18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae1a:	9805      	ldr	r0, [sp, #20]
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	f7ff f9c7 	bl	800a1b0 <__lshift>
 800ae22:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d1d9      	bne.n	800addc <_strtod_l+0x73c>
 800ae28:	e65d      	b.n	800aae6 <_strtod_l+0x446>
 800ae2a:	2e00      	cmp	r6, #0
 800ae2c:	dd07      	ble.n	800ae3e <_strtod_l+0x79e>
 800ae2e:	4649      	mov	r1, r9
 800ae30:	9805      	ldr	r0, [sp, #20]
 800ae32:	4632      	mov	r2, r6
 800ae34:	f7ff f9bc 	bl	800a1b0 <__lshift>
 800ae38:	4681      	mov	r9, r0
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d0d8      	beq.n	800adf0 <_strtod_l+0x750>
 800ae3e:	2f00      	cmp	r7, #0
 800ae40:	dd08      	ble.n	800ae54 <_strtod_l+0x7b4>
 800ae42:	4641      	mov	r1, r8
 800ae44:	9805      	ldr	r0, [sp, #20]
 800ae46:	463a      	mov	r2, r7
 800ae48:	f7ff f9b2 	bl	800a1b0 <__lshift>
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f ae49 	beq.w	800aae6 <_strtod_l+0x446>
 800ae54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae56:	9805      	ldr	r0, [sp, #20]
 800ae58:	464a      	mov	r2, r9
 800ae5a:	f7ff fa31 	bl	800a2c0 <__mdiff>
 800ae5e:	4604      	mov	r4, r0
 800ae60:	2800      	cmp	r0, #0
 800ae62:	f43f ae40 	beq.w	800aae6 <_strtod_l+0x446>
 800ae66:	68c3      	ldr	r3, [r0, #12]
 800ae68:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60c3      	str	r3, [r0, #12]
 800ae6e:	4641      	mov	r1, r8
 800ae70:	f7ff fa0a 	bl	800a288 <__mcmp>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	da45      	bge.n	800af04 <_strtod_l+0x864>
 800ae78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae7a:	ea53 030a 	orrs.w	r3, r3, sl
 800ae7e:	d16b      	bne.n	800af58 <_strtod_l+0x8b8>
 800ae80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d167      	bne.n	800af58 <_strtod_l+0x8b8>
 800ae88:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae8c:	0d1b      	lsrs	r3, r3, #20
 800ae8e:	051b      	lsls	r3, r3, #20
 800ae90:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae94:	d960      	bls.n	800af58 <_strtod_l+0x8b8>
 800ae96:	6963      	ldr	r3, [r4, #20]
 800ae98:	b913      	cbnz	r3, 800aea0 <_strtod_l+0x800>
 800ae9a:	6923      	ldr	r3, [r4, #16]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	dd5b      	ble.n	800af58 <_strtod_l+0x8b8>
 800aea0:	4621      	mov	r1, r4
 800aea2:	2201      	movs	r2, #1
 800aea4:	9805      	ldr	r0, [sp, #20]
 800aea6:	f7ff f983 	bl	800a1b0 <__lshift>
 800aeaa:	4641      	mov	r1, r8
 800aeac:	4604      	mov	r4, r0
 800aeae:	f7ff f9eb 	bl	800a288 <__mcmp>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	dd50      	ble.n	800af58 <_strtod_l+0x8b8>
 800aeb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aeba:	9a08      	ldr	r2, [sp, #32]
 800aebc:	0d1b      	lsrs	r3, r3, #20
 800aebe:	051b      	lsls	r3, r3, #20
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	d06a      	beq.n	800af9a <_strtod_l+0x8fa>
 800aec4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aec8:	d867      	bhi.n	800af9a <_strtod_l+0x8fa>
 800aeca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aece:	f67f ae9d 	bls.w	800ac0c <_strtod_l+0x56c>
 800aed2:	4b0a      	ldr	r3, [pc, #40]	@ (800aefc <_strtod_l+0x85c>)
 800aed4:	4650      	mov	r0, sl
 800aed6:	4659      	mov	r1, fp
 800aed8:	2200      	movs	r2, #0
 800aeda:	f7f5 fbb5 	bl	8000648 <__aeabi_dmul>
 800aede:	4b08      	ldr	r3, [pc, #32]	@ (800af00 <_strtod_l+0x860>)
 800aee0:	400b      	ands	r3, r1
 800aee2:	4682      	mov	sl, r0
 800aee4:	468b      	mov	fp, r1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f47f ae08 	bne.w	800aafc <_strtod_l+0x45c>
 800aeec:	9a05      	ldr	r2, [sp, #20]
 800aeee:	2322      	movs	r3, #34	@ 0x22
 800aef0:	6013      	str	r3, [r2, #0]
 800aef2:	e603      	b.n	800aafc <_strtod_l+0x45c>
 800aef4:	0800c7d8 	.word	0x0800c7d8
 800aef8:	fffffc02 	.word	0xfffffc02
 800aefc:	39500000 	.word	0x39500000
 800af00:	7ff00000 	.word	0x7ff00000
 800af04:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800af08:	d165      	bne.n	800afd6 <_strtod_l+0x936>
 800af0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af10:	b35a      	cbz	r2, 800af6a <_strtod_l+0x8ca>
 800af12:	4a9f      	ldr	r2, [pc, #636]	@ (800b190 <_strtod_l+0xaf0>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d12b      	bne.n	800af70 <_strtod_l+0x8d0>
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	4651      	mov	r1, sl
 800af1c:	b303      	cbz	r3, 800af60 <_strtod_l+0x8c0>
 800af1e:	4b9d      	ldr	r3, [pc, #628]	@ (800b194 <_strtod_l+0xaf4>)
 800af20:	465a      	mov	r2, fp
 800af22:	4013      	ands	r3, r2
 800af24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af2c:	d81b      	bhi.n	800af66 <_strtod_l+0x8c6>
 800af2e:	0d1b      	lsrs	r3, r3, #20
 800af30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af34:	fa02 f303 	lsl.w	r3, r2, r3
 800af38:	4299      	cmp	r1, r3
 800af3a:	d119      	bne.n	800af70 <_strtod_l+0x8d0>
 800af3c:	4b96      	ldr	r3, [pc, #600]	@ (800b198 <_strtod_l+0xaf8>)
 800af3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af40:	429a      	cmp	r2, r3
 800af42:	d102      	bne.n	800af4a <_strtod_l+0x8aa>
 800af44:	3101      	adds	r1, #1
 800af46:	f43f adce 	beq.w	800aae6 <_strtod_l+0x446>
 800af4a:	4b92      	ldr	r3, [pc, #584]	@ (800b194 <_strtod_l+0xaf4>)
 800af4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af4e:	401a      	ands	r2, r3
 800af50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af54:	f04f 0a00 	mov.w	sl, #0
 800af58:	9b08      	ldr	r3, [sp, #32]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1b9      	bne.n	800aed2 <_strtod_l+0x832>
 800af5e:	e5cd      	b.n	800aafc <_strtod_l+0x45c>
 800af60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af64:	e7e8      	b.n	800af38 <_strtod_l+0x898>
 800af66:	4613      	mov	r3, r2
 800af68:	e7e6      	b.n	800af38 <_strtod_l+0x898>
 800af6a:	ea53 030a 	orrs.w	r3, r3, sl
 800af6e:	d0a2      	beq.n	800aeb6 <_strtod_l+0x816>
 800af70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af72:	b1db      	cbz	r3, 800afac <_strtod_l+0x90c>
 800af74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af76:	4213      	tst	r3, r2
 800af78:	d0ee      	beq.n	800af58 <_strtod_l+0x8b8>
 800af7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af7c:	9a08      	ldr	r2, [sp, #32]
 800af7e:	4650      	mov	r0, sl
 800af80:	4659      	mov	r1, fp
 800af82:	b1bb      	cbz	r3, 800afb4 <_strtod_l+0x914>
 800af84:	f7ff fb6e 	bl	800a664 <sulp>
 800af88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af8c:	ec53 2b10 	vmov	r2, r3, d0
 800af90:	f7f5 f9a4 	bl	80002dc <__adddf3>
 800af94:	4682      	mov	sl, r0
 800af96:	468b      	mov	fp, r1
 800af98:	e7de      	b.n	800af58 <_strtod_l+0x8b8>
 800af9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800afa2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800afa6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800afaa:	e7d5      	b.n	800af58 <_strtod_l+0x8b8>
 800afac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afae:	ea13 0f0a 	tst.w	r3, sl
 800afb2:	e7e1      	b.n	800af78 <_strtod_l+0x8d8>
 800afb4:	f7ff fb56 	bl	800a664 <sulp>
 800afb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afbc:	ec53 2b10 	vmov	r2, r3, d0
 800afc0:	f7f5 f98a 	bl	80002d8 <__aeabi_dsub>
 800afc4:	2200      	movs	r2, #0
 800afc6:	2300      	movs	r3, #0
 800afc8:	4682      	mov	sl, r0
 800afca:	468b      	mov	fp, r1
 800afcc:	f7f5 fda4 	bl	8000b18 <__aeabi_dcmpeq>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d0c1      	beq.n	800af58 <_strtod_l+0x8b8>
 800afd4:	e61a      	b.n	800ac0c <_strtod_l+0x56c>
 800afd6:	4641      	mov	r1, r8
 800afd8:	4620      	mov	r0, r4
 800afda:	f7ff facd 	bl	800a578 <__ratio>
 800afde:	ec57 6b10 	vmov	r6, r7, d0
 800afe2:	2200      	movs	r2, #0
 800afe4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800afe8:	4630      	mov	r0, r6
 800afea:	4639      	mov	r1, r7
 800afec:	f7f5 fda8 	bl	8000b40 <__aeabi_dcmple>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d06f      	beq.n	800b0d4 <_strtod_l+0xa34>
 800aff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d17a      	bne.n	800b0f0 <_strtod_l+0xa50>
 800affa:	f1ba 0f00 	cmp.w	sl, #0
 800affe:	d158      	bne.n	800b0b2 <_strtod_l+0xa12>
 800b000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b006:	2b00      	cmp	r3, #0
 800b008:	d15a      	bne.n	800b0c0 <_strtod_l+0xa20>
 800b00a:	4b64      	ldr	r3, [pc, #400]	@ (800b19c <_strtod_l+0xafc>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	4630      	mov	r0, r6
 800b010:	4639      	mov	r1, r7
 800b012:	f7f5 fd8b 	bl	8000b2c <__aeabi_dcmplt>
 800b016:	2800      	cmp	r0, #0
 800b018:	d159      	bne.n	800b0ce <_strtod_l+0xa2e>
 800b01a:	4630      	mov	r0, r6
 800b01c:	4639      	mov	r1, r7
 800b01e:	4b60      	ldr	r3, [pc, #384]	@ (800b1a0 <_strtod_l+0xb00>)
 800b020:	2200      	movs	r2, #0
 800b022:	f7f5 fb11 	bl	8000648 <__aeabi_dmul>
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b02e:	9606      	str	r6, [sp, #24]
 800b030:	9307      	str	r3, [sp, #28]
 800b032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b036:	4d57      	ldr	r5, [pc, #348]	@ (800b194 <_strtod_l+0xaf4>)
 800b038:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b03e:	401d      	ands	r5, r3
 800b040:	4b58      	ldr	r3, [pc, #352]	@ (800b1a4 <_strtod_l+0xb04>)
 800b042:	429d      	cmp	r5, r3
 800b044:	f040 80b2 	bne.w	800b1ac <_strtod_l+0xb0c>
 800b048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b04e:	ec4b ab10 	vmov	d0, sl, fp
 800b052:	f7ff f9c9 	bl	800a3e8 <__ulp>
 800b056:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b05a:	ec51 0b10 	vmov	r0, r1, d0
 800b05e:	f7f5 faf3 	bl	8000648 <__aeabi_dmul>
 800b062:	4652      	mov	r2, sl
 800b064:	465b      	mov	r3, fp
 800b066:	f7f5 f939 	bl	80002dc <__adddf3>
 800b06a:	460b      	mov	r3, r1
 800b06c:	4949      	ldr	r1, [pc, #292]	@ (800b194 <_strtod_l+0xaf4>)
 800b06e:	4a4e      	ldr	r2, [pc, #312]	@ (800b1a8 <_strtod_l+0xb08>)
 800b070:	4019      	ands	r1, r3
 800b072:	4291      	cmp	r1, r2
 800b074:	4682      	mov	sl, r0
 800b076:	d942      	bls.n	800b0fe <_strtod_l+0xa5e>
 800b078:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b07a:	4b47      	ldr	r3, [pc, #284]	@ (800b198 <_strtod_l+0xaf8>)
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d103      	bne.n	800b088 <_strtod_l+0x9e8>
 800b080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b082:	3301      	adds	r3, #1
 800b084:	f43f ad2f 	beq.w	800aae6 <_strtod_l+0x446>
 800b088:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b198 <_strtod_l+0xaf8>
 800b08c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b090:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b092:	9805      	ldr	r0, [sp, #20]
 800b094:	f7fe fe7c 	bl	8009d90 <_Bfree>
 800b098:	9805      	ldr	r0, [sp, #20]
 800b09a:	4649      	mov	r1, r9
 800b09c:	f7fe fe78 	bl	8009d90 <_Bfree>
 800b0a0:	9805      	ldr	r0, [sp, #20]
 800b0a2:	4641      	mov	r1, r8
 800b0a4:	f7fe fe74 	bl	8009d90 <_Bfree>
 800b0a8:	9805      	ldr	r0, [sp, #20]
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	f7fe fe70 	bl	8009d90 <_Bfree>
 800b0b0:	e619      	b.n	800ace6 <_strtod_l+0x646>
 800b0b2:	f1ba 0f01 	cmp.w	sl, #1
 800b0b6:	d103      	bne.n	800b0c0 <_strtod_l+0xa20>
 800b0b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f43f ada6 	beq.w	800ac0c <_strtod_l+0x56c>
 800b0c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b170 <_strtod_l+0xad0>
 800b0c4:	4f35      	ldr	r7, [pc, #212]	@ (800b19c <_strtod_l+0xafc>)
 800b0c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	e7b1      	b.n	800b032 <_strtod_l+0x992>
 800b0ce:	4f34      	ldr	r7, [pc, #208]	@ (800b1a0 <_strtod_l+0xb00>)
 800b0d0:	2600      	movs	r6, #0
 800b0d2:	e7aa      	b.n	800b02a <_strtod_l+0x98a>
 800b0d4:	4b32      	ldr	r3, [pc, #200]	@ (800b1a0 <_strtod_l+0xb00>)
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	4639      	mov	r1, r7
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f7f5 fab4 	bl	8000648 <__aeabi_dmul>
 800b0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0e2:	4606      	mov	r6, r0
 800b0e4:	460f      	mov	r7, r1
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d09f      	beq.n	800b02a <_strtod_l+0x98a>
 800b0ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b0ee:	e7a0      	b.n	800b032 <_strtod_l+0x992>
 800b0f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b178 <_strtod_l+0xad8>
 800b0f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0f8:	ec57 6b17 	vmov	r6, r7, d7
 800b0fc:	e799      	b.n	800b032 <_strtod_l+0x992>
 800b0fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b102:	9b08      	ldr	r3, [sp, #32]
 800b104:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1c1      	bne.n	800b090 <_strtod_l+0x9f0>
 800b10c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b110:	0d1b      	lsrs	r3, r3, #20
 800b112:	051b      	lsls	r3, r3, #20
 800b114:	429d      	cmp	r5, r3
 800b116:	d1bb      	bne.n	800b090 <_strtod_l+0x9f0>
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f7f5 fdf4 	bl	8000d08 <__aeabi_d2lz>
 800b120:	f7f5 fa64 	bl	80005ec <__aeabi_l2d>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4630      	mov	r0, r6
 800b12a:	4639      	mov	r1, r7
 800b12c:	f7f5 f8d4 	bl	80002d8 <__aeabi_dsub>
 800b130:	460b      	mov	r3, r1
 800b132:	4602      	mov	r2, r0
 800b134:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b138:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b13e:	ea46 060a 	orr.w	r6, r6, sl
 800b142:	431e      	orrs	r6, r3
 800b144:	d06f      	beq.n	800b226 <_strtod_l+0xb86>
 800b146:	a30e      	add	r3, pc, #56	@ (adr r3, 800b180 <_strtod_l+0xae0>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 fcee 	bl	8000b2c <__aeabi_dcmplt>
 800b150:	2800      	cmp	r0, #0
 800b152:	f47f acd3 	bne.w	800aafc <_strtod_l+0x45c>
 800b156:	a30c      	add	r3, pc, #48	@ (adr r3, 800b188 <_strtod_l+0xae8>)
 800b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b160:	f7f5 fd02 	bl	8000b68 <__aeabi_dcmpgt>
 800b164:	2800      	cmp	r0, #0
 800b166:	d093      	beq.n	800b090 <_strtod_l+0x9f0>
 800b168:	e4c8      	b.n	800aafc <_strtod_l+0x45c>
 800b16a:	bf00      	nop
 800b16c:	f3af 8000 	nop.w
 800b170:	00000000 	.word	0x00000000
 800b174:	bff00000 	.word	0xbff00000
 800b178:	00000000 	.word	0x00000000
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	94a03595 	.word	0x94a03595
 800b184:	3fdfffff 	.word	0x3fdfffff
 800b188:	35afe535 	.word	0x35afe535
 800b18c:	3fe00000 	.word	0x3fe00000
 800b190:	000fffff 	.word	0x000fffff
 800b194:	7ff00000 	.word	0x7ff00000
 800b198:	7fefffff 	.word	0x7fefffff
 800b19c:	3ff00000 	.word	0x3ff00000
 800b1a0:	3fe00000 	.word	0x3fe00000
 800b1a4:	7fe00000 	.word	0x7fe00000
 800b1a8:	7c9fffff 	.word	0x7c9fffff
 800b1ac:	9b08      	ldr	r3, [sp, #32]
 800b1ae:	b323      	cbz	r3, 800b1fa <_strtod_l+0xb5a>
 800b1b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b1b4:	d821      	bhi.n	800b1fa <_strtod_l+0xb5a>
 800b1b6:	a328      	add	r3, pc, #160	@ (adr r3, 800b258 <_strtod_l+0xbb8>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	4630      	mov	r0, r6
 800b1be:	4639      	mov	r1, r7
 800b1c0:	f7f5 fcbe 	bl	8000b40 <__aeabi_dcmple>
 800b1c4:	b1a0      	cbz	r0, 800b1f0 <_strtod_l+0xb50>
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	f7f5 fd15 	bl	8000bf8 <__aeabi_d2uiz>
 800b1ce:	2801      	cmp	r0, #1
 800b1d0:	bf38      	it	cc
 800b1d2:	2001      	movcc	r0, #1
 800b1d4:	f7f5 f9be 	bl	8000554 <__aeabi_ui2d>
 800b1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1da:	4606      	mov	r6, r0
 800b1dc:	460f      	mov	r7, r1
 800b1de:	b9fb      	cbnz	r3, 800b220 <_strtod_l+0xb80>
 800b1e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b1e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b1e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b1ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b1f6:	1b5b      	subs	r3, r3, r5
 800b1f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b202:	f7ff f8f1 	bl	800a3e8 <__ulp>
 800b206:	4650      	mov	r0, sl
 800b208:	ec53 2b10 	vmov	r2, r3, d0
 800b20c:	4659      	mov	r1, fp
 800b20e:	f7f5 fa1b 	bl	8000648 <__aeabi_dmul>
 800b212:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b216:	f7f5 f861 	bl	80002dc <__adddf3>
 800b21a:	4682      	mov	sl, r0
 800b21c:	468b      	mov	fp, r1
 800b21e:	e770      	b.n	800b102 <_strtod_l+0xa62>
 800b220:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b224:	e7e0      	b.n	800b1e8 <_strtod_l+0xb48>
 800b226:	a30e      	add	r3, pc, #56	@ (adr r3, 800b260 <_strtod_l+0xbc0>)
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f7f5 fc7e 	bl	8000b2c <__aeabi_dcmplt>
 800b230:	e798      	b.n	800b164 <_strtod_l+0xac4>
 800b232:	2300      	movs	r3, #0
 800b234:	930e      	str	r3, [sp, #56]	@ 0x38
 800b236:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b238:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	f7ff ba6d 	b.w	800a71a <_strtod_l+0x7a>
 800b240:	2a65      	cmp	r2, #101	@ 0x65
 800b242:	f43f ab68 	beq.w	800a916 <_strtod_l+0x276>
 800b246:	2a45      	cmp	r2, #69	@ 0x45
 800b248:	f43f ab65 	beq.w	800a916 <_strtod_l+0x276>
 800b24c:	2301      	movs	r3, #1
 800b24e:	f7ff bba0 	b.w	800a992 <_strtod_l+0x2f2>
 800b252:	bf00      	nop
 800b254:	f3af 8000 	nop.w
 800b258:	ffc00000 	.word	0xffc00000
 800b25c:	41dfffff 	.word	0x41dfffff
 800b260:	94a03595 	.word	0x94a03595
 800b264:	3fcfffff 	.word	0x3fcfffff

0800b268 <_strtod_r>:
 800b268:	4b01      	ldr	r3, [pc, #4]	@ (800b270 <_strtod_r+0x8>)
 800b26a:	f7ff ba19 	b.w	800a6a0 <_strtod_l>
 800b26e:	bf00      	nop
 800b270:	20000088 	.word	0x20000088

0800b274 <_strtol_l.isra.0>:
 800b274:	2b24      	cmp	r3, #36	@ 0x24
 800b276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b27a:	4686      	mov	lr, r0
 800b27c:	4690      	mov	r8, r2
 800b27e:	d801      	bhi.n	800b284 <_strtol_l.isra.0+0x10>
 800b280:	2b01      	cmp	r3, #1
 800b282:	d106      	bne.n	800b292 <_strtol_l.isra.0+0x1e>
 800b284:	f7fd fda8 	bl	8008dd8 <__errno>
 800b288:	2316      	movs	r3, #22
 800b28a:	6003      	str	r3, [r0, #0]
 800b28c:	2000      	movs	r0, #0
 800b28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b292:	4834      	ldr	r0, [pc, #208]	@ (800b364 <_strtol_l.isra.0+0xf0>)
 800b294:	460d      	mov	r5, r1
 800b296:	462a      	mov	r2, r5
 800b298:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b29c:	5d06      	ldrb	r6, [r0, r4]
 800b29e:	f016 0608 	ands.w	r6, r6, #8
 800b2a2:	d1f8      	bne.n	800b296 <_strtol_l.isra.0+0x22>
 800b2a4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2a6:	d110      	bne.n	800b2ca <_strtol_l.isra.0+0x56>
 800b2a8:	782c      	ldrb	r4, [r5, #0]
 800b2aa:	2601      	movs	r6, #1
 800b2ac:	1c95      	adds	r5, r2, #2
 800b2ae:	f033 0210 	bics.w	r2, r3, #16
 800b2b2:	d115      	bne.n	800b2e0 <_strtol_l.isra.0+0x6c>
 800b2b4:	2c30      	cmp	r4, #48	@ 0x30
 800b2b6:	d10d      	bne.n	800b2d4 <_strtol_l.isra.0+0x60>
 800b2b8:	782a      	ldrb	r2, [r5, #0]
 800b2ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2be:	2a58      	cmp	r2, #88	@ 0x58
 800b2c0:	d108      	bne.n	800b2d4 <_strtol_l.isra.0+0x60>
 800b2c2:	786c      	ldrb	r4, [r5, #1]
 800b2c4:	3502      	adds	r5, #2
 800b2c6:	2310      	movs	r3, #16
 800b2c8:	e00a      	b.n	800b2e0 <_strtol_l.isra.0+0x6c>
 800b2ca:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2cc:	bf04      	itt	eq
 800b2ce:	782c      	ldrbeq	r4, [r5, #0]
 800b2d0:	1c95      	addeq	r5, r2, #2
 800b2d2:	e7ec      	b.n	800b2ae <_strtol_l.isra.0+0x3a>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1f6      	bne.n	800b2c6 <_strtol_l.isra.0+0x52>
 800b2d8:	2c30      	cmp	r4, #48	@ 0x30
 800b2da:	bf14      	ite	ne
 800b2dc:	230a      	movne	r3, #10
 800b2de:	2308      	moveq	r3, #8
 800b2e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b2e4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	fbbc f9f3 	udiv	r9, ip, r3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b2f8:	2f09      	cmp	r7, #9
 800b2fa:	d80f      	bhi.n	800b31c <_strtol_l.isra.0+0xa8>
 800b2fc:	463c      	mov	r4, r7
 800b2fe:	42a3      	cmp	r3, r4
 800b300:	dd1b      	ble.n	800b33a <_strtol_l.isra.0+0xc6>
 800b302:	1c57      	adds	r7, r2, #1
 800b304:	d007      	beq.n	800b316 <_strtol_l.isra.0+0xa2>
 800b306:	4581      	cmp	r9, r0
 800b308:	d314      	bcc.n	800b334 <_strtol_l.isra.0+0xc0>
 800b30a:	d101      	bne.n	800b310 <_strtol_l.isra.0+0x9c>
 800b30c:	45a2      	cmp	sl, r4
 800b30e:	db11      	blt.n	800b334 <_strtol_l.isra.0+0xc0>
 800b310:	fb00 4003 	mla	r0, r0, r3, r4
 800b314:	2201      	movs	r2, #1
 800b316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b31a:	e7eb      	b.n	800b2f4 <_strtol_l.isra.0+0x80>
 800b31c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b320:	2f19      	cmp	r7, #25
 800b322:	d801      	bhi.n	800b328 <_strtol_l.isra.0+0xb4>
 800b324:	3c37      	subs	r4, #55	@ 0x37
 800b326:	e7ea      	b.n	800b2fe <_strtol_l.isra.0+0x8a>
 800b328:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b32c:	2f19      	cmp	r7, #25
 800b32e:	d804      	bhi.n	800b33a <_strtol_l.isra.0+0xc6>
 800b330:	3c57      	subs	r4, #87	@ 0x57
 800b332:	e7e4      	b.n	800b2fe <_strtol_l.isra.0+0x8a>
 800b334:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b338:	e7ed      	b.n	800b316 <_strtol_l.isra.0+0xa2>
 800b33a:	1c53      	adds	r3, r2, #1
 800b33c:	d108      	bne.n	800b350 <_strtol_l.isra.0+0xdc>
 800b33e:	2322      	movs	r3, #34	@ 0x22
 800b340:	f8ce 3000 	str.w	r3, [lr]
 800b344:	4660      	mov	r0, ip
 800b346:	f1b8 0f00 	cmp.w	r8, #0
 800b34a:	d0a0      	beq.n	800b28e <_strtol_l.isra.0+0x1a>
 800b34c:	1e69      	subs	r1, r5, #1
 800b34e:	e006      	b.n	800b35e <_strtol_l.isra.0+0xea>
 800b350:	b106      	cbz	r6, 800b354 <_strtol_l.isra.0+0xe0>
 800b352:	4240      	negs	r0, r0
 800b354:	f1b8 0f00 	cmp.w	r8, #0
 800b358:	d099      	beq.n	800b28e <_strtol_l.isra.0+0x1a>
 800b35a:	2a00      	cmp	r2, #0
 800b35c:	d1f6      	bne.n	800b34c <_strtol_l.isra.0+0xd8>
 800b35e:	f8c8 1000 	str.w	r1, [r8]
 800b362:	e794      	b.n	800b28e <_strtol_l.isra.0+0x1a>
 800b364:	0800c801 	.word	0x0800c801

0800b368 <_strtol_r>:
 800b368:	f7ff bf84 	b.w	800b274 <_strtol_l.isra.0>

0800b36c <__ssputs_r>:
 800b36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b370:	688e      	ldr	r6, [r1, #8]
 800b372:	461f      	mov	r7, r3
 800b374:	42be      	cmp	r6, r7
 800b376:	680b      	ldr	r3, [r1, #0]
 800b378:	4682      	mov	sl, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	4690      	mov	r8, r2
 800b37e:	d82d      	bhi.n	800b3dc <__ssputs_r+0x70>
 800b380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b384:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b388:	d026      	beq.n	800b3d8 <__ssputs_r+0x6c>
 800b38a:	6965      	ldr	r5, [r4, #20]
 800b38c:	6909      	ldr	r1, [r1, #16]
 800b38e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b392:	eba3 0901 	sub.w	r9, r3, r1
 800b396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b39a:	1c7b      	adds	r3, r7, #1
 800b39c:	444b      	add	r3, r9
 800b39e:	106d      	asrs	r5, r5, #1
 800b3a0:	429d      	cmp	r5, r3
 800b3a2:	bf38      	it	cc
 800b3a4:	461d      	movcc	r5, r3
 800b3a6:	0553      	lsls	r3, r2, #21
 800b3a8:	d527      	bpl.n	800b3fa <__ssputs_r+0x8e>
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7fe fc24 	bl	8009bf8 <_malloc_r>
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	b360      	cbz	r0, 800b40e <__ssputs_r+0xa2>
 800b3b4:	6921      	ldr	r1, [r4, #16]
 800b3b6:	464a      	mov	r2, r9
 800b3b8:	f7fd fd3b 	bl	8008e32 <memcpy>
 800b3bc:	89a3      	ldrh	r3, [r4, #12]
 800b3be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	6126      	str	r6, [r4, #16]
 800b3ca:	6165      	str	r5, [r4, #20]
 800b3cc:	444e      	add	r6, r9
 800b3ce:	eba5 0509 	sub.w	r5, r5, r9
 800b3d2:	6026      	str	r6, [r4, #0]
 800b3d4:	60a5      	str	r5, [r4, #8]
 800b3d6:	463e      	mov	r6, r7
 800b3d8:	42be      	cmp	r6, r7
 800b3da:	d900      	bls.n	800b3de <__ssputs_r+0x72>
 800b3dc:	463e      	mov	r6, r7
 800b3de:	6820      	ldr	r0, [r4, #0]
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	4641      	mov	r1, r8
 800b3e4:	f000 fb6a 	bl	800babc <memmove>
 800b3e8:	68a3      	ldr	r3, [r4, #8]
 800b3ea:	1b9b      	subs	r3, r3, r6
 800b3ec:	60a3      	str	r3, [r4, #8]
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	4433      	add	r3, r6
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	f000 ff41 	bl	800c282 <_realloc_r>
 800b400:	4606      	mov	r6, r0
 800b402:	2800      	cmp	r0, #0
 800b404:	d1e0      	bne.n	800b3c8 <__ssputs_r+0x5c>
 800b406:	6921      	ldr	r1, [r4, #16]
 800b408:	4650      	mov	r0, sl
 800b40a:	f7fe fb81 	bl	8009b10 <_free_r>
 800b40e:	230c      	movs	r3, #12
 800b410:	f8ca 3000 	str.w	r3, [sl]
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b41a:	81a3      	strh	r3, [r4, #12]
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b420:	e7e9      	b.n	800b3f6 <__ssputs_r+0x8a>
	...

0800b424 <_svfiprintf_r>:
 800b424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b428:	4698      	mov	r8, r3
 800b42a:	898b      	ldrh	r3, [r1, #12]
 800b42c:	061b      	lsls	r3, r3, #24
 800b42e:	b09d      	sub	sp, #116	@ 0x74
 800b430:	4607      	mov	r7, r0
 800b432:	460d      	mov	r5, r1
 800b434:	4614      	mov	r4, r2
 800b436:	d510      	bpl.n	800b45a <_svfiprintf_r+0x36>
 800b438:	690b      	ldr	r3, [r1, #16]
 800b43a:	b973      	cbnz	r3, 800b45a <_svfiprintf_r+0x36>
 800b43c:	2140      	movs	r1, #64	@ 0x40
 800b43e:	f7fe fbdb 	bl	8009bf8 <_malloc_r>
 800b442:	6028      	str	r0, [r5, #0]
 800b444:	6128      	str	r0, [r5, #16]
 800b446:	b930      	cbnz	r0, 800b456 <_svfiprintf_r+0x32>
 800b448:	230c      	movs	r3, #12
 800b44a:	603b      	str	r3, [r7, #0]
 800b44c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b450:	b01d      	add	sp, #116	@ 0x74
 800b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b456:	2340      	movs	r3, #64	@ 0x40
 800b458:	616b      	str	r3, [r5, #20]
 800b45a:	2300      	movs	r3, #0
 800b45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45e:	2320      	movs	r3, #32
 800b460:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b464:	f8cd 800c 	str.w	r8, [sp, #12]
 800b468:	2330      	movs	r3, #48	@ 0x30
 800b46a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b608 <_svfiprintf_r+0x1e4>
 800b46e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b472:	f04f 0901 	mov.w	r9, #1
 800b476:	4623      	mov	r3, r4
 800b478:	469a      	mov	sl, r3
 800b47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b47e:	b10a      	cbz	r2, 800b484 <_svfiprintf_r+0x60>
 800b480:	2a25      	cmp	r2, #37	@ 0x25
 800b482:	d1f9      	bne.n	800b478 <_svfiprintf_r+0x54>
 800b484:	ebba 0b04 	subs.w	fp, sl, r4
 800b488:	d00b      	beq.n	800b4a2 <_svfiprintf_r+0x7e>
 800b48a:	465b      	mov	r3, fp
 800b48c:	4622      	mov	r2, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	4638      	mov	r0, r7
 800b492:	f7ff ff6b 	bl	800b36c <__ssputs_r>
 800b496:	3001      	adds	r0, #1
 800b498:	f000 80a7 	beq.w	800b5ea <_svfiprintf_r+0x1c6>
 800b49c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b49e:	445a      	add	r2, fp
 800b4a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 809f 	beq.w	800b5ea <_svfiprintf_r+0x1c6>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	9307      	str	r3, [sp, #28]
 800b4be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4c4:	4654      	mov	r4, sl
 800b4c6:	2205      	movs	r2, #5
 800b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4cc:	484e      	ldr	r0, [pc, #312]	@ (800b608 <_svfiprintf_r+0x1e4>)
 800b4ce:	f7f4 fea7 	bl	8000220 <memchr>
 800b4d2:	9a04      	ldr	r2, [sp, #16]
 800b4d4:	b9d8      	cbnz	r0, 800b50e <_svfiprintf_r+0xea>
 800b4d6:	06d0      	lsls	r0, r2, #27
 800b4d8:	bf44      	itt	mi
 800b4da:	2320      	movmi	r3, #32
 800b4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4e0:	0711      	lsls	r1, r2, #28
 800b4e2:	bf44      	itt	mi
 800b4e4:	232b      	movmi	r3, #43	@ 0x2b
 800b4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4f0:	d015      	beq.n	800b51e <_svfiprintf_r+0xfa>
 800b4f2:	9a07      	ldr	r2, [sp, #28]
 800b4f4:	4654      	mov	r4, sl
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f04f 0c0a 	mov.w	ip, #10
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b502:	3b30      	subs	r3, #48	@ 0x30
 800b504:	2b09      	cmp	r3, #9
 800b506:	d94b      	bls.n	800b5a0 <_svfiprintf_r+0x17c>
 800b508:	b1b0      	cbz	r0, 800b538 <_svfiprintf_r+0x114>
 800b50a:	9207      	str	r2, [sp, #28]
 800b50c:	e014      	b.n	800b538 <_svfiprintf_r+0x114>
 800b50e:	eba0 0308 	sub.w	r3, r0, r8
 800b512:	fa09 f303 	lsl.w	r3, r9, r3
 800b516:	4313      	orrs	r3, r2
 800b518:	9304      	str	r3, [sp, #16]
 800b51a:	46a2      	mov	sl, r4
 800b51c:	e7d2      	b.n	800b4c4 <_svfiprintf_r+0xa0>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	1d19      	adds	r1, r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	9103      	str	r1, [sp, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	bfbb      	ittet	lt
 800b52a:	425b      	neglt	r3, r3
 800b52c:	f042 0202 	orrlt.w	r2, r2, #2
 800b530:	9307      	strge	r3, [sp, #28]
 800b532:	9307      	strlt	r3, [sp, #28]
 800b534:	bfb8      	it	lt
 800b536:	9204      	strlt	r2, [sp, #16]
 800b538:	7823      	ldrb	r3, [r4, #0]
 800b53a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b53c:	d10a      	bne.n	800b554 <_svfiprintf_r+0x130>
 800b53e:	7863      	ldrb	r3, [r4, #1]
 800b540:	2b2a      	cmp	r3, #42	@ 0x2a
 800b542:	d132      	bne.n	800b5aa <_svfiprintf_r+0x186>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	1d1a      	adds	r2, r3, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	9203      	str	r2, [sp, #12]
 800b54c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b550:	3402      	adds	r4, #2
 800b552:	9305      	str	r3, [sp, #20]
 800b554:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b618 <_svfiprintf_r+0x1f4>
 800b558:	7821      	ldrb	r1, [r4, #0]
 800b55a:	2203      	movs	r2, #3
 800b55c:	4650      	mov	r0, sl
 800b55e:	f7f4 fe5f 	bl	8000220 <memchr>
 800b562:	b138      	cbz	r0, 800b574 <_svfiprintf_r+0x150>
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	eba0 000a 	sub.w	r0, r0, sl
 800b56a:	2240      	movs	r2, #64	@ 0x40
 800b56c:	4082      	lsls	r2, r0
 800b56e:	4313      	orrs	r3, r2
 800b570:	3401      	adds	r4, #1
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b578:	4824      	ldr	r0, [pc, #144]	@ (800b60c <_svfiprintf_r+0x1e8>)
 800b57a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b57e:	2206      	movs	r2, #6
 800b580:	f7f4 fe4e 	bl	8000220 <memchr>
 800b584:	2800      	cmp	r0, #0
 800b586:	d036      	beq.n	800b5f6 <_svfiprintf_r+0x1d2>
 800b588:	4b21      	ldr	r3, [pc, #132]	@ (800b610 <_svfiprintf_r+0x1ec>)
 800b58a:	bb1b      	cbnz	r3, 800b5d4 <_svfiprintf_r+0x1b0>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	3307      	adds	r3, #7
 800b590:	f023 0307 	bic.w	r3, r3, #7
 800b594:	3308      	adds	r3, #8
 800b596:	9303      	str	r3, [sp, #12]
 800b598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59a:	4433      	add	r3, r6
 800b59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b59e:	e76a      	b.n	800b476 <_svfiprintf_r+0x52>
 800b5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	e7a8      	b.n	800b4fc <_svfiprintf_r+0xd8>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	3401      	adds	r4, #1
 800b5ae:	9305      	str	r3, [sp, #20]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	f04f 0c0a 	mov.w	ip, #10
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5bc:	3a30      	subs	r2, #48	@ 0x30
 800b5be:	2a09      	cmp	r2, #9
 800b5c0:	d903      	bls.n	800b5ca <_svfiprintf_r+0x1a6>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0c6      	beq.n	800b554 <_svfiprintf_r+0x130>
 800b5c6:	9105      	str	r1, [sp, #20]
 800b5c8:	e7c4      	b.n	800b554 <_svfiprintf_r+0x130>
 800b5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e7f0      	b.n	800b5b6 <_svfiprintf_r+0x192>
 800b5d4:	ab03      	add	r3, sp, #12
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	462a      	mov	r2, r5
 800b5da:	4b0e      	ldr	r3, [pc, #56]	@ (800b614 <_svfiprintf_r+0x1f0>)
 800b5dc:	a904      	add	r1, sp, #16
 800b5de:	4638      	mov	r0, r7
 800b5e0:	f7fc fbf2 	bl	8007dc8 <_printf_float>
 800b5e4:	1c42      	adds	r2, r0, #1
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	d1d6      	bne.n	800b598 <_svfiprintf_r+0x174>
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	065b      	lsls	r3, r3, #25
 800b5ee:	f53f af2d 	bmi.w	800b44c <_svfiprintf_r+0x28>
 800b5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f4:	e72c      	b.n	800b450 <_svfiprintf_r+0x2c>
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <_svfiprintf_r+0x1f0>)
 800b5fe:	a904      	add	r1, sp, #16
 800b600:	4638      	mov	r0, r7
 800b602:	f7fc fe79 	bl	80082f8 <_printf_i>
 800b606:	e7ed      	b.n	800b5e4 <_svfiprintf_r+0x1c0>
 800b608:	0800c5fd 	.word	0x0800c5fd
 800b60c:	0800c607 	.word	0x0800c607
 800b610:	08007dc9 	.word	0x08007dc9
 800b614:	0800b36d 	.word	0x0800b36d
 800b618:	0800c603 	.word	0x0800c603

0800b61c <__sfputc_r>:
 800b61c:	6893      	ldr	r3, [r2, #8]
 800b61e:	3b01      	subs	r3, #1
 800b620:	2b00      	cmp	r3, #0
 800b622:	b410      	push	{r4}
 800b624:	6093      	str	r3, [r2, #8]
 800b626:	da08      	bge.n	800b63a <__sfputc_r+0x1e>
 800b628:	6994      	ldr	r4, [r2, #24]
 800b62a:	42a3      	cmp	r3, r4
 800b62c:	db01      	blt.n	800b632 <__sfputc_r+0x16>
 800b62e:	290a      	cmp	r1, #10
 800b630:	d103      	bne.n	800b63a <__sfputc_r+0x1e>
 800b632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b636:	f7fd bae8 	b.w	8008c0a <__swbuf_r>
 800b63a:	6813      	ldr	r3, [r2, #0]
 800b63c:	1c58      	adds	r0, r3, #1
 800b63e:	6010      	str	r0, [r2, #0]
 800b640:	7019      	strb	r1, [r3, #0]
 800b642:	4608      	mov	r0, r1
 800b644:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <__sfputs_r>:
 800b64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64c:	4606      	mov	r6, r0
 800b64e:	460f      	mov	r7, r1
 800b650:	4614      	mov	r4, r2
 800b652:	18d5      	adds	r5, r2, r3
 800b654:	42ac      	cmp	r4, r5
 800b656:	d101      	bne.n	800b65c <__sfputs_r+0x12>
 800b658:	2000      	movs	r0, #0
 800b65a:	e007      	b.n	800b66c <__sfputs_r+0x22>
 800b65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b660:	463a      	mov	r2, r7
 800b662:	4630      	mov	r0, r6
 800b664:	f7ff ffda 	bl	800b61c <__sfputc_r>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d1f3      	bne.n	800b654 <__sfputs_r+0xa>
 800b66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b670 <_vfiprintf_r>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	460d      	mov	r5, r1
 800b676:	b09d      	sub	sp, #116	@ 0x74
 800b678:	4614      	mov	r4, r2
 800b67a:	4698      	mov	r8, r3
 800b67c:	4606      	mov	r6, r0
 800b67e:	b118      	cbz	r0, 800b688 <_vfiprintf_r+0x18>
 800b680:	6a03      	ldr	r3, [r0, #32]
 800b682:	b90b      	cbnz	r3, 800b688 <_vfiprintf_r+0x18>
 800b684:	f7fd f9f0 	bl	8008a68 <__sinit>
 800b688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b68a:	07d9      	lsls	r1, r3, #31
 800b68c:	d405      	bmi.n	800b69a <_vfiprintf_r+0x2a>
 800b68e:	89ab      	ldrh	r3, [r5, #12]
 800b690:	059a      	lsls	r2, r3, #22
 800b692:	d402      	bmi.n	800b69a <_vfiprintf_r+0x2a>
 800b694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b696:	f7fd fbca 	bl	8008e2e <__retarget_lock_acquire_recursive>
 800b69a:	89ab      	ldrh	r3, [r5, #12]
 800b69c:	071b      	lsls	r3, r3, #28
 800b69e:	d501      	bpl.n	800b6a4 <_vfiprintf_r+0x34>
 800b6a0:	692b      	ldr	r3, [r5, #16]
 800b6a2:	b99b      	cbnz	r3, 800b6cc <_vfiprintf_r+0x5c>
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7fd faee 	bl	8008c88 <__swsetup_r>
 800b6ac:	b170      	cbz	r0, 800b6cc <_vfiprintf_r+0x5c>
 800b6ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6b0:	07dc      	lsls	r4, r3, #31
 800b6b2:	d504      	bpl.n	800b6be <_vfiprintf_r+0x4e>
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6b8:	b01d      	add	sp, #116	@ 0x74
 800b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6be:	89ab      	ldrh	r3, [r5, #12]
 800b6c0:	0598      	lsls	r0, r3, #22
 800b6c2:	d4f7      	bmi.n	800b6b4 <_vfiprintf_r+0x44>
 800b6c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6c6:	f7fd fbb3 	bl	8008e30 <__retarget_lock_release_recursive>
 800b6ca:	e7f3      	b.n	800b6b4 <_vfiprintf_r+0x44>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d0:	2320      	movs	r3, #32
 800b6d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6da:	2330      	movs	r3, #48	@ 0x30
 800b6dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b88c <_vfiprintf_r+0x21c>
 800b6e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6e4:	f04f 0901 	mov.w	r9, #1
 800b6e8:	4623      	mov	r3, r4
 800b6ea:	469a      	mov	sl, r3
 800b6ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6f0:	b10a      	cbz	r2, 800b6f6 <_vfiprintf_r+0x86>
 800b6f2:	2a25      	cmp	r2, #37	@ 0x25
 800b6f4:	d1f9      	bne.n	800b6ea <_vfiprintf_r+0x7a>
 800b6f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6fa:	d00b      	beq.n	800b714 <_vfiprintf_r+0xa4>
 800b6fc:	465b      	mov	r3, fp
 800b6fe:	4622      	mov	r2, r4
 800b700:	4629      	mov	r1, r5
 800b702:	4630      	mov	r0, r6
 800b704:	f7ff ffa1 	bl	800b64a <__sfputs_r>
 800b708:	3001      	adds	r0, #1
 800b70a:	f000 80a7 	beq.w	800b85c <_vfiprintf_r+0x1ec>
 800b70e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b710:	445a      	add	r2, fp
 800b712:	9209      	str	r2, [sp, #36]	@ 0x24
 800b714:	f89a 3000 	ldrb.w	r3, [sl]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 809f 	beq.w	800b85c <_vfiprintf_r+0x1ec>
 800b71e:	2300      	movs	r3, #0
 800b720:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b728:	f10a 0a01 	add.w	sl, sl, #1
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	9307      	str	r3, [sp, #28]
 800b730:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b734:	931a      	str	r3, [sp, #104]	@ 0x68
 800b736:	4654      	mov	r4, sl
 800b738:	2205      	movs	r2, #5
 800b73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73e:	4853      	ldr	r0, [pc, #332]	@ (800b88c <_vfiprintf_r+0x21c>)
 800b740:	f7f4 fd6e 	bl	8000220 <memchr>
 800b744:	9a04      	ldr	r2, [sp, #16]
 800b746:	b9d8      	cbnz	r0, 800b780 <_vfiprintf_r+0x110>
 800b748:	06d1      	lsls	r1, r2, #27
 800b74a:	bf44      	itt	mi
 800b74c:	2320      	movmi	r3, #32
 800b74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b752:	0713      	lsls	r3, r2, #28
 800b754:	bf44      	itt	mi
 800b756:	232b      	movmi	r3, #43	@ 0x2b
 800b758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b75c:	f89a 3000 	ldrb.w	r3, [sl]
 800b760:	2b2a      	cmp	r3, #42	@ 0x2a
 800b762:	d015      	beq.n	800b790 <_vfiprintf_r+0x120>
 800b764:	9a07      	ldr	r2, [sp, #28]
 800b766:	4654      	mov	r4, sl
 800b768:	2000      	movs	r0, #0
 800b76a:	f04f 0c0a 	mov.w	ip, #10
 800b76e:	4621      	mov	r1, r4
 800b770:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b774:	3b30      	subs	r3, #48	@ 0x30
 800b776:	2b09      	cmp	r3, #9
 800b778:	d94b      	bls.n	800b812 <_vfiprintf_r+0x1a2>
 800b77a:	b1b0      	cbz	r0, 800b7aa <_vfiprintf_r+0x13a>
 800b77c:	9207      	str	r2, [sp, #28]
 800b77e:	e014      	b.n	800b7aa <_vfiprintf_r+0x13a>
 800b780:	eba0 0308 	sub.w	r3, r0, r8
 800b784:	fa09 f303 	lsl.w	r3, r9, r3
 800b788:	4313      	orrs	r3, r2
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	46a2      	mov	sl, r4
 800b78e:	e7d2      	b.n	800b736 <_vfiprintf_r+0xc6>
 800b790:	9b03      	ldr	r3, [sp, #12]
 800b792:	1d19      	adds	r1, r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	9103      	str	r1, [sp, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bfbb      	ittet	lt
 800b79c:	425b      	neglt	r3, r3
 800b79e:	f042 0202 	orrlt.w	r2, r2, #2
 800b7a2:	9307      	strge	r3, [sp, #28]
 800b7a4:	9307      	strlt	r3, [sp, #28]
 800b7a6:	bfb8      	it	lt
 800b7a8:	9204      	strlt	r2, [sp, #16]
 800b7aa:	7823      	ldrb	r3, [r4, #0]
 800b7ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7ae:	d10a      	bne.n	800b7c6 <_vfiprintf_r+0x156>
 800b7b0:	7863      	ldrb	r3, [r4, #1]
 800b7b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7b4:	d132      	bne.n	800b81c <_vfiprintf_r+0x1ac>
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	1d1a      	adds	r2, r3, #4
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	9203      	str	r2, [sp, #12]
 800b7be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7c2:	3402      	adds	r4, #2
 800b7c4:	9305      	str	r3, [sp, #20]
 800b7c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b89c <_vfiprintf_r+0x22c>
 800b7ca:	7821      	ldrb	r1, [r4, #0]
 800b7cc:	2203      	movs	r2, #3
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	f7f4 fd26 	bl	8000220 <memchr>
 800b7d4:	b138      	cbz	r0, 800b7e6 <_vfiprintf_r+0x176>
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	eba0 000a 	sub.w	r0, r0, sl
 800b7dc:	2240      	movs	r2, #64	@ 0x40
 800b7de:	4082      	lsls	r2, r0
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	3401      	adds	r4, #1
 800b7e4:	9304      	str	r3, [sp, #16]
 800b7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ea:	4829      	ldr	r0, [pc, #164]	@ (800b890 <_vfiprintf_r+0x220>)
 800b7ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7f0:	2206      	movs	r2, #6
 800b7f2:	f7f4 fd15 	bl	8000220 <memchr>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d03f      	beq.n	800b87a <_vfiprintf_r+0x20a>
 800b7fa:	4b26      	ldr	r3, [pc, #152]	@ (800b894 <_vfiprintf_r+0x224>)
 800b7fc:	bb1b      	cbnz	r3, 800b846 <_vfiprintf_r+0x1d6>
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	3307      	adds	r3, #7
 800b802:	f023 0307 	bic.w	r3, r3, #7
 800b806:	3308      	adds	r3, #8
 800b808:	9303      	str	r3, [sp, #12]
 800b80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b80c:	443b      	add	r3, r7
 800b80e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b810:	e76a      	b.n	800b6e8 <_vfiprintf_r+0x78>
 800b812:	fb0c 3202 	mla	r2, ip, r2, r3
 800b816:	460c      	mov	r4, r1
 800b818:	2001      	movs	r0, #1
 800b81a:	e7a8      	b.n	800b76e <_vfiprintf_r+0xfe>
 800b81c:	2300      	movs	r3, #0
 800b81e:	3401      	adds	r4, #1
 800b820:	9305      	str	r3, [sp, #20]
 800b822:	4619      	mov	r1, r3
 800b824:	f04f 0c0a 	mov.w	ip, #10
 800b828:	4620      	mov	r0, r4
 800b82a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b82e:	3a30      	subs	r2, #48	@ 0x30
 800b830:	2a09      	cmp	r2, #9
 800b832:	d903      	bls.n	800b83c <_vfiprintf_r+0x1cc>
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0c6      	beq.n	800b7c6 <_vfiprintf_r+0x156>
 800b838:	9105      	str	r1, [sp, #20]
 800b83a:	e7c4      	b.n	800b7c6 <_vfiprintf_r+0x156>
 800b83c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b840:	4604      	mov	r4, r0
 800b842:	2301      	movs	r3, #1
 800b844:	e7f0      	b.n	800b828 <_vfiprintf_r+0x1b8>
 800b846:	ab03      	add	r3, sp, #12
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	462a      	mov	r2, r5
 800b84c:	4b12      	ldr	r3, [pc, #72]	@ (800b898 <_vfiprintf_r+0x228>)
 800b84e:	a904      	add	r1, sp, #16
 800b850:	4630      	mov	r0, r6
 800b852:	f7fc fab9 	bl	8007dc8 <_printf_float>
 800b856:	4607      	mov	r7, r0
 800b858:	1c78      	adds	r0, r7, #1
 800b85a:	d1d6      	bne.n	800b80a <_vfiprintf_r+0x19a>
 800b85c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b85e:	07d9      	lsls	r1, r3, #31
 800b860:	d405      	bmi.n	800b86e <_vfiprintf_r+0x1fe>
 800b862:	89ab      	ldrh	r3, [r5, #12]
 800b864:	059a      	lsls	r2, r3, #22
 800b866:	d402      	bmi.n	800b86e <_vfiprintf_r+0x1fe>
 800b868:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b86a:	f7fd fae1 	bl	8008e30 <__retarget_lock_release_recursive>
 800b86e:	89ab      	ldrh	r3, [r5, #12]
 800b870:	065b      	lsls	r3, r3, #25
 800b872:	f53f af1f 	bmi.w	800b6b4 <_vfiprintf_r+0x44>
 800b876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b878:	e71e      	b.n	800b6b8 <_vfiprintf_r+0x48>
 800b87a:	ab03      	add	r3, sp, #12
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	462a      	mov	r2, r5
 800b880:	4b05      	ldr	r3, [pc, #20]	@ (800b898 <_vfiprintf_r+0x228>)
 800b882:	a904      	add	r1, sp, #16
 800b884:	4630      	mov	r0, r6
 800b886:	f7fc fd37 	bl	80082f8 <_printf_i>
 800b88a:	e7e4      	b.n	800b856 <_vfiprintf_r+0x1e6>
 800b88c:	0800c5fd 	.word	0x0800c5fd
 800b890:	0800c607 	.word	0x0800c607
 800b894:	08007dc9 	.word	0x08007dc9
 800b898:	0800b64b 	.word	0x0800b64b
 800b89c:	0800c603 	.word	0x0800c603

0800b8a0 <__sflush_r>:
 800b8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a8:	0716      	lsls	r6, r2, #28
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	d454      	bmi.n	800b95a <__sflush_r+0xba>
 800b8b0:	684b      	ldr	r3, [r1, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	dc02      	bgt.n	800b8bc <__sflush_r+0x1c>
 800b8b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd48      	ble.n	800b94e <__sflush_r+0xae>
 800b8bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8be:	2e00      	cmp	r6, #0
 800b8c0:	d045      	beq.n	800b94e <__sflush_r+0xae>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8c8:	682f      	ldr	r7, [r5, #0]
 800b8ca:	6a21      	ldr	r1, [r4, #32]
 800b8cc:	602b      	str	r3, [r5, #0]
 800b8ce:	d030      	beq.n	800b932 <__sflush_r+0x92>
 800b8d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	0759      	lsls	r1, r3, #29
 800b8d6:	d505      	bpl.n	800b8e4 <__sflush_r+0x44>
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	1ad2      	subs	r2, r2, r3
 800b8dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8de:	b10b      	cbz	r3, 800b8e4 <__sflush_r+0x44>
 800b8e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8e2:	1ad2      	subs	r2, r2, r3
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8e8:	6a21      	ldr	r1, [r4, #32]
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	47b0      	blx	r6
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	89a3      	ldrh	r3, [r4, #12]
 800b8f2:	d106      	bne.n	800b902 <__sflush_r+0x62>
 800b8f4:	6829      	ldr	r1, [r5, #0]
 800b8f6:	291d      	cmp	r1, #29
 800b8f8:	d82b      	bhi.n	800b952 <__sflush_r+0xb2>
 800b8fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b9a4 <__sflush_r+0x104>)
 800b8fc:	40ca      	lsrs	r2, r1
 800b8fe:	07d6      	lsls	r6, r2, #31
 800b900:	d527      	bpl.n	800b952 <__sflush_r+0xb2>
 800b902:	2200      	movs	r2, #0
 800b904:	6062      	str	r2, [r4, #4]
 800b906:	04d9      	lsls	r1, r3, #19
 800b908:	6922      	ldr	r2, [r4, #16]
 800b90a:	6022      	str	r2, [r4, #0]
 800b90c:	d504      	bpl.n	800b918 <__sflush_r+0x78>
 800b90e:	1c42      	adds	r2, r0, #1
 800b910:	d101      	bne.n	800b916 <__sflush_r+0x76>
 800b912:	682b      	ldr	r3, [r5, #0]
 800b914:	b903      	cbnz	r3, 800b918 <__sflush_r+0x78>
 800b916:	6560      	str	r0, [r4, #84]	@ 0x54
 800b918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b91a:	602f      	str	r7, [r5, #0]
 800b91c:	b1b9      	cbz	r1, 800b94e <__sflush_r+0xae>
 800b91e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b922:	4299      	cmp	r1, r3
 800b924:	d002      	beq.n	800b92c <__sflush_r+0x8c>
 800b926:	4628      	mov	r0, r5
 800b928:	f7fe f8f2 	bl	8009b10 <_free_r>
 800b92c:	2300      	movs	r3, #0
 800b92e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b930:	e00d      	b.n	800b94e <__sflush_r+0xae>
 800b932:	2301      	movs	r3, #1
 800b934:	4628      	mov	r0, r5
 800b936:	47b0      	blx	r6
 800b938:	4602      	mov	r2, r0
 800b93a:	1c50      	adds	r0, r2, #1
 800b93c:	d1c9      	bne.n	800b8d2 <__sflush_r+0x32>
 800b93e:	682b      	ldr	r3, [r5, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c6      	beq.n	800b8d2 <__sflush_r+0x32>
 800b944:	2b1d      	cmp	r3, #29
 800b946:	d001      	beq.n	800b94c <__sflush_r+0xac>
 800b948:	2b16      	cmp	r3, #22
 800b94a:	d11e      	bne.n	800b98a <__sflush_r+0xea>
 800b94c:	602f      	str	r7, [r5, #0]
 800b94e:	2000      	movs	r0, #0
 800b950:	e022      	b.n	800b998 <__sflush_r+0xf8>
 800b952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b956:	b21b      	sxth	r3, r3
 800b958:	e01b      	b.n	800b992 <__sflush_r+0xf2>
 800b95a:	690f      	ldr	r7, [r1, #16]
 800b95c:	2f00      	cmp	r7, #0
 800b95e:	d0f6      	beq.n	800b94e <__sflush_r+0xae>
 800b960:	0793      	lsls	r3, r2, #30
 800b962:	680e      	ldr	r6, [r1, #0]
 800b964:	bf08      	it	eq
 800b966:	694b      	ldreq	r3, [r1, #20]
 800b968:	600f      	str	r7, [r1, #0]
 800b96a:	bf18      	it	ne
 800b96c:	2300      	movne	r3, #0
 800b96e:	eba6 0807 	sub.w	r8, r6, r7
 800b972:	608b      	str	r3, [r1, #8]
 800b974:	f1b8 0f00 	cmp.w	r8, #0
 800b978:	dde9      	ble.n	800b94e <__sflush_r+0xae>
 800b97a:	6a21      	ldr	r1, [r4, #32]
 800b97c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b97e:	4643      	mov	r3, r8
 800b980:	463a      	mov	r2, r7
 800b982:	4628      	mov	r0, r5
 800b984:	47b0      	blx	r6
 800b986:	2800      	cmp	r0, #0
 800b988:	dc08      	bgt.n	800b99c <__sflush_r+0xfc>
 800b98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99c:	4407      	add	r7, r0
 800b99e:	eba8 0800 	sub.w	r8, r8, r0
 800b9a2:	e7e7      	b.n	800b974 <__sflush_r+0xd4>
 800b9a4:	20400001 	.word	0x20400001

0800b9a8 <_fflush_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	690b      	ldr	r3, [r1, #16]
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	b913      	cbnz	r3, 800b9b8 <_fflush_r+0x10>
 800b9b2:	2500      	movs	r5, #0
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	b118      	cbz	r0, 800b9c2 <_fflush_r+0x1a>
 800b9ba:	6a03      	ldr	r3, [r0, #32]
 800b9bc:	b90b      	cbnz	r3, 800b9c2 <_fflush_r+0x1a>
 800b9be:	f7fd f853 	bl	8008a68 <__sinit>
 800b9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0f3      	beq.n	800b9b2 <_fflush_r+0xa>
 800b9ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9cc:	07d0      	lsls	r0, r2, #31
 800b9ce:	d404      	bmi.n	800b9da <_fflush_r+0x32>
 800b9d0:	0599      	lsls	r1, r3, #22
 800b9d2:	d402      	bmi.n	800b9da <_fflush_r+0x32>
 800b9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9d6:	f7fd fa2a 	bl	8008e2e <__retarget_lock_acquire_recursive>
 800b9da:	4628      	mov	r0, r5
 800b9dc:	4621      	mov	r1, r4
 800b9de:	f7ff ff5f 	bl	800b8a0 <__sflush_r>
 800b9e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9e4:	07da      	lsls	r2, r3, #31
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	d4e4      	bmi.n	800b9b4 <_fflush_r+0xc>
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	059b      	lsls	r3, r3, #22
 800b9ee:	d4e1      	bmi.n	800b9b4 <_fflush_r+0xc>
 800b9f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9f2:	f7fd fa1d 	bl	8008e30 <__retarget_lock_release_recursive>
 800b9f6:	e7dd      	b.n	800b9b4 <_fflush_r+0xc>

0800b9f8 <__swhatbuf_r>:
 800b9f8:	b570      	push	{r4, r5, r6, lr}
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba00:	2900      	cmp	r1, #0
 800ba02:	b096      	sub	sp, #88	@ 0x58
 800ba04:	4615      	mov	r5, r2
 800ba06:	461e      	mov	r6, r3
 800ba08:	da0d      	bge.n	800ba26 <__swhatbuf_r+0x2e>
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba10:	f04f 0100 	mov.w	r1, #0
 800ba14:	bf14      	ite	ne
 800ba16:	2340      	movne	r3, #64	@ 0x40
 800ba18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	6031      	str	r1, [r6, #0]
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	b016      	add	sp, #88	@ 0x58
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
 800ba26:	466a      	mov	r2, sp
 800ba28:	f000 f874 	bl	800bb14 <_fstat_r>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	dbec      	blt.n	800ba0a <__swhatbuf_r+0x12>
 800ba30:	9901      	ldr	r1, [sp, #4]
 800ba32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba3a:	4259      	negs	r1, r3
 800ba3c:	4159      	adcs	r1, r3
 800ba3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba42:	e7eb      	b.n	800ba1c <__swhatbuf_r+0x24>

0800ba44 <__smakebuf_r>:
 800ba44:	898b      	ldrh	r3, [r1, #12]
 800ba46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba48:	079d      	lsls	r5, r3, #30
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	d507      	bpl.n	800ba60 <__smakebuf_r+0x1c>
 800ba50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	6123      	str	r3, [r4, #16]
 800ba58:	2301      	movs	r3, #1
 800ba5a:	6163      	str	r3, [r4, #20]
 800ba5c:	b003      	add	sp, #12
 800ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba60:	ab01      	add	r3, sp, #4
 800ba62:	466a      	mov	r2, sp
 800ba64:	f7ff ffc8 	bl	800b9f8 <__swhatbuf_r>
 800ba68:	9f00      	ldr	r7, [sp, #0]
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7fe f8c2 	bl	8009bf8 <_malloc_r>
 800ba74:	b948      	cbnz	r0, 800ba8a <__smakebuf_r+0x46>
 800ba76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba7a:	059a      	lsls	r2, r3, #22
 800ba7c:	d4ee      	bmi.n	800ba5c <__smakebuf_r+0x18>
 800ba7e:	f023 0303 	bic.w	r3, r3, #3
 800ba82:	f043 0302 	orr.w	r3, r3, #2
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	e7e2      	b.n	800ba50 <__smakebuf_r+0xc>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	6020      	str	r0, [r4, #0]
 800ba8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba92:	81a3      	strh	r3, [r4, #12]
 800ba94:	9b01      	ldr	r3, [sp, #4]
 800ba96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba9a:	b15b      	cbz	r3, 800bab4 <__smakebuf_r+0x70>
 800ba9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa0:	4630      	mov	r0, r6
 800baa2:	f000 f849 	bl	800bb38 <_isatty_r>
 800baa6:	b128      	cbz	r0, 800bab4 <__smakebuf_r+0x70>
 800baa8:	89a3      	ldrh	r3, [r4, #12]
 800baaa:	f023 0303 	bic.w	r3, r3, #3
 800baae:	f043 0301 	orr.w	r3, r3, #1
 800bab2:	81a3      	strh	r3, [r4, #12]
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	431d      	orrs	r5, r3
 800bab8:	81a5      	strh	r5, [r4, #12]
 800baba:	e7cf      	b.n	800ba5c <__smakebuf_r+0x18>

0800babc <memmove>:
 800babc:	4288      	cmp	r0, r1
 800babe:	b510      	push	{r4, lr}
 800bac0:	eb01 0402 	add.w	r4, r1, r2
 800bac4:	d902      	bls.n	800bacc <memmove+0x10>
 800bac6:	4284      	cmp	r4, r0
 800bac8:	4623      	mov	r3, r4
 800baca:	d807      	bhi.n	800badc <memmove+0x20>
 800bacc:	1e43      	subs	r3, r0, #1
 800bace:	42a1      	cmp	r1, r4
 800bad0:	d008      	beq.n	800bae4 <memmove+0x28>
 800bad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bada:	e7f8      	b.n	800bace <memmove+0x12>
 800badc:	4402      	add	r2, r0
 800bade:	4601      	mov	r1, r0
 800bae0:	428a      	cmp	r2, r1
 800bae2:	d100      	bne.n	800bae6 <memmove+0x2a>
 800bae4:	bd10      	pop	{r4, pc}
 800bae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baee:	e7f7      	b.n	800bae0 <memmove+0x24>

0800baf0 <strncmp>:
 800baf0:	b510      	push	{r4, lr}
 800baf2:	b16a      	cbz	r2, 800bb10 <strncmp+0x20>
 800baf4:	3901      	subs	r1, #1
 800baf6:	1884      	adds	r4, r0, r2
 800baf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bafc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d103      	bne.n	800bb0c <strncmp+0x1c>
 800bb04:	42a0      	cmp	r0, r4
 800bb06:	d001      	beq.n	800bb0c <strncmp+0x1c>
 800bb08:	2a00      	cmp	r2, #0
 800bb0a:	d1f5      	bne.n	800baf8 <strncmp+0x8>
 800bb0c:	1ad0      	subs	r0, r2, r3
 800bb0e:	bd10      	pop	{r4, pc}
 800bb10:	4610      	mov	r0, r2
 800bb12:	e7fc      	b.n	800bb0e <strncmp+0x1e>

0800bb14 <_fstat_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d07      	ldr	r5, [pc, #28]	@ (800bb34 <_fstat_r+0x20>)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	4611      	mov	r1, r2
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	f7f7 fcd8 	bl	80034d6 <_fstat>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d102      	bne.n	800bb30 <_fstat_r+0x1c>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	b103      	cbz	r3, 800bb30 <_fstat_r+0x1c>
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	bd38      	pop	{r3, r4, r5, pc}
 800bb32:	bf00      	nop
 800bb34:	200007a0 	.word	0x200007a0

0800bb38 <_isatty_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d06      	ldr	r5, [pc, #24]	@ (800bb54 <_isatty_r+0x1c>)
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4608      	mov	r0, r1
 800bb42:	602b      	str	r3, [r5, #0]
 800bb44:	f7f7 fcd7 	bl	80034f6 <_isatty>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_isatty_r+0x1a>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_isatty_r+0x1a>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	200007a0 	.word	0x200007a0

0800bb58 <_sbrk_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4d06      	ldr	r5, [pc, #24]	@ (800bb74 <_sbrk_r+0x1c>)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	602b      	str	r3, [r5, #0]
 800bb64:	f7f7 fce0 	bl	8003528 <_sbrk>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_sbrk_r+0x1a>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_sbrk_r+0x1a>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	200007a0 	.word	0x200007a0

0800bb78 <nan>:
 800bb78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb80 <nan+0x8>
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	00000000 	.word	0x00000000
 800bb84:	7ff80000 	.word	0x7ff80000

0800bb88 <__assert_func>:
 800bb88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb8a:	4614      	mov	r4, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4b09      	ldr	r3, [pc, #36]	@ (800bbb4 <__assert_func+0x2c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4605      	mov	r5, r0
 800bb94:	68d8      	ldr	r0, [r3, #12]
 800bb96:	b14c      	cbz	r4, 800bbac <__assert_func+0x24>
 800bb98:	4b07      	ldr	r3, [pc, #28]	@ (800bbb8 <__assert_func+0x30>)
 800bb9a:	9100      	str	r1, [sp, #0]
 800bb9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bba0:	4906      	ldr	r1, [pc, #24]	@ (800bbbc <__assert_func+0x34>)
 800bba2:	462b      	mov	r3, r5
 800bba4:	f000 fba8 	bl	800c2f8 <fiprintf>
 800bba8:	f000 fbb8 	bl	800c31c <abort>
 800bbac:	4b04      	ldr	r3, [pc, #16]	@ (800bbc0 <__assert_func+0x38>)
 800bbae:	461c      	mov	r4, r3
 800bbb0:	e7f3      	b.n	800bb9a <__assert_func+0x12>
 800bbb2:	bf00      	nop
 800bbb4:	20000038 	.word	0x20000038
 800bbb8:	0800c616 	.word	0x0800c616
 800bbbc:	0800c623 	.word	0x0800c623
 800bbc0:	0800c651 	.word	0x0800c651

0800bbc4 <_calloc_r>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	fba1 5402 	umull	r5, r4, r1, r2
 800bbca:	b934      	cbnz	r4, 800bbda <_calloc_r+0x16>
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7fe f813 	bl	8009bf8 <_malloc_r>
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	b928      	cbnz	r0, 800bbe2 <_calloc_r+0x1e>
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
 800bbda:	220c      	movs	r2, #12
 800bbdc:	6002      	str	r2, [r0, #0]
 800bbde:	2600      	movs	r6, #0
 800bbe0:	e7f9      	b.n	800bbd6 <_calloc_r+0x12>
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	f7fd f8a5 	bl	8008d34 <memset>
 800bbea:	e7f4      	b.n	800bbd6 <_calloc_r+0x12>

0800bbec <rshift>:
 800bbec:	6903      	ldr	r3, [r0, #16]
 800bbee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbfa:	f100 0414 	add.w	r4, r0, #20
 800bbfe:	dd45      	ble.n	800bc8c <rshift+0xa0>
 800bc00:	f011 011f 	ands.w	r1, r1, #31
 800bc04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc0c:	d10c      	bne.n	800bc28 <rshift+0x3c>
 800bc0e:	f100 0710 	add.w	r7, r0, #16
 800bc12:	4629      	mov	r1, r5
 800bc14:	42b1      	cmp	r1, r6
 800bc16:	d334      	bcc.n	800bc82 <rshift+0x96>
 800bc18:	1a9b      	subs	r3, r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	1eea      	subs	r2, r5, #3
 800bc1e:	4296      	cmp	r6, r2
 800bc20:	bf38      	it	cc
 800bc22:	2300      	movcc	r3, #0
 800bc24:	4423      	add	r3, r4
 800bc26:	e015      	b.n	800bc54 <rshift+0x68>
 800bc28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc2c:	f1c1 0820 	rsb	r8, r1, #32
 800bc30:	40cf      	lsrs	r7, r1
 800bc32:	f105 0e04 	add.w	lr, r5, #4
 800bc36:	46a1      	mov	r9, r4
 800bc38:	4576      	cmp	r6, lr
 800bc3a:	46f4      	mov	ip, lr
 800bc3c:	d815      	bhi.n	800bc6a <rshift+0x7e>
 800bc3e:	1a9a      	subs	r2, r3, r2
 800bc40:	0092      	lsls	r2, r2, #2
 800bc42:	3a04      	subs	r2, #4
 800bc44:	3501      	adds	r5, #1
 800bc46:	42ae      	cmp	r6, r5
 800bc48:	bf38      	it	cc
 800bc4a:	2200      	movcc	r2, #0
 800bc4c:	18a3      	adds	r3, r4, r2
 800bc4e:	50a7      	str	r7, [r4, r2]
 800bc50:	b107      	cbz	r7, 800bc54 <rshift+0x68>
 800bc52:	3304      	adds	r3, #4
 800bc54:	1b1a      	subs	r2, r3, r4
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc5c:	bf08      	it	eq
 800bc5e:	2300      	moveq	r3, #0
 800bc60:	6102      	str	r2, [r0, #16]
 800bc62:	bf08      	it	eq
 800bc64:	6143      	streq	r3, [r0, #20]
 800bc66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc6a:	f8dc c000 	ldr.w	ip, [ip]
 800bc6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc72:	ea4c 0707 	orr.w	r7, ip, r7
 800bc76:	f849 7b04 	str.w	r7, [r9], #4
 800bc7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc7e:	40cf      	lsrs	r7, r1
 800bc80:	e7da      	b.n	800bc38 <rshift+0x4c>
 800bc82:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc86:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc8a:	e7c3      	b.n	800bc14 <rshift+0x28>
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	e7e1      	b.n	800bc54 <rshift+0x68>

0800bc90 <__hexdig_fun>:
 800bc90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc94:	2b09      	cmp	r3, #9
 800bc96:	d802      	bhi.n	800bc9e <__hexdig_fun+0xe>
 800bc98:	3820      	subs	r0, #32
 800bc9a:	b2c0      	uxtb	r0, r0
 800bc9c:	4770      	bx	lr
 800bc9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bca2:	2b05      	cmp	r3, #5
 800bca4:	d801      	bhi.n	800bcaa <__hexdig_fun+0x1a>
 800bca6:	3847      	subs	r0, #71	@ 0x47
 800bca8:	e7f7      	b.n	800bc9a <__hexdig_fun+0xa>
 800bcaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bcae:	2b05      	cmp	r3, #5
 800bcb0:	d801      	bhi.n	800bcb6 <__hexdig_fun+0x26>
 800bcb2:	3827      	subs	r0, #39	@ 0x27
 800bcb4:	e7f1      	b.n	800bc9a <__hexdig_fun+0xa>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	4770      	bx	lr
	...

0800bcbc <__gethex>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	b085      	sub	sp, #20
 800bcc2:	468a      	mov	sl, r1
 800bcc4:	9302      	str	r3, [sp, #8]
 800bcc6:	680b      	ldr	r3, [r1, #0]
 800bcc8:	9001      	str	r0, [sp, #4]
 800bcca:	4690      	mov	r8, r2
 800bccc:	1c9c      	adds	r4, r3, #2
 800bcce:	46a1      	mov	r9, r4
 800bcd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bcd4:	2830      	cmp	r0, #48	@ 0x30
 800bcd6:	d0fa      	beq.n	800bcce <__gethex+0x12>
 800bcd8:	eba9 0303 	sub.w	r3, r9, r3
 800bcdc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bce0:	f7ff ffd6 	bl	800bc90 <__hexdig_fun>
 800bce4:	4605      	mov	r5, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d168      	bne.n	800bdbc <__gethex+0x100>
 800bcea:	49a0      	ldr	r1, [pc, #640]	@ (800bf6c <__gethex+0x2b0>)
 800bcec:	2201      	movs	r2, #1
 800bcee:	4648      	mov	r0, r9
 800bcf0:	f7ff fefe 	bl	800baf0 <strncmp>
 800bcf4:	4607      	mov	r7, r0
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d167      	bne.n	800bdca <__gethex+0x10e>
 800bcfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bcfe:	4626      	mov	r6, r4
 800bd00:	f7ff ffc6 	bl	800bc90 <__hexdig_fun>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d062      	beq.n	800bdce <__gethex+0x112>
 800bd08:	4623      	mov	r3, r4
 800bd0a:	7818      	ldrb	r0, [r3, #0]
 800bd0c:	2830      	cmp	r0, #48	@ 0x30
 800bd0e:	4699      	mov	r9, r3
 800bd10:	f103 0301 	add.w	r3, r3, #1
 800bd14:	d0f9      	beq.n	800bd0a <__gethex+0x4e>
 800bd16:	f7ff ffbb 	bl	800bc90 <__hexdig_fun>
 800bd1a:	fab0 f580 	clz	r5, r0
 800bd1e:	096d      	lsrs	r5, r5, #5
 800bd20:	f04f 0b01 	mov.w	fp, #1
 800bd24:	464a      	mov	r2, r9
 800bd26:	4616      	mov	r6, r2
 800bd28:	3201      	adds	r2, #1
 800bd2a:	7830      	ldrb	r0, [r6, #0]
 800bd2c:	f7ff ffb0 	bl	800bc90 <__hexdig_fun>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d1f8      	bne.n	800bd26 <__gethex+0x6a>
 800bd34:	498d      	ldr	r1, [pc, #564]	@ (800bf6c <__gethex+0x2b0>)
 800bd36:	2201      	movs	r2, #1
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7ff fed9 	bl	800baf0 <strncmp>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d13f      	bne.n	800bdc2 <__gethex+0x106>
 800bd42:	b944      	cbnz	r4, 800bd56 <__gethex+0x9a>
 800bd44:	1c74      	adds	r4, r6, #1
 800bd46:	4622      	mov	r2, r4
 800bd48:	4616      	mov	r6, r2
 800bd4a:	3201      	adds	r2, #1
 800bd4c:	7830      	ldrb	r0, [r6, #0]
 800bd4e:	f7ff ff9f 	bl	800bc90 <__hexdig_fun>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d1f8      	bne.n	800bd48 <__gethex+0x8c>
 800bd56:	1ba4      	subs	r4, r4, r6
 800bd58:	00a7      	lsls	r7, r4, #2
 800bd5a:	7833      	ldrb	r3, [r6, #0]
 800bd5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bd60:	2b50      	cmp	r3, #80	@ 0x50
 800bd62:	d13e      	bne.n	800bde2 <__gethex+0x126>
 800bd64:	7873      	ldrb	r3, [r6, #1]
 800bd66:	2b2b      	cmp	r3, #43	@ 0x2b
 800bd68:	d033      	beq.n	800bdd2 <__gethex+0x116>
 800bd6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd6c:	d034      	beq.n	800bdd8 <__gethex+0x11c>
 800bd6e:	1c71      	adds	r1, r6, #1
 800bd70:	2400      	movs	r4, #0
 800bd72:	7808      	ldrb	r0, [r1, #0]
 800bd74:	f7ff ff8c 	bl	800bc90 <__hexdig_fun>
 800bd78:	1e43      	subs	r3, r0, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b18      	cmp	r3, #24
 800bd7e:	d830      	bhi.n	800bde2 <__gethex+0x126>
 800bd80:	f1a0 0210 	sub.w	r2, r0, #16
 800bd84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd88:	f7ff ff82 	bl	800bc90 <__hexdig_fun>
 800bd8c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bd90:	fa5f fc8c 	uxtb.w	ip, ip
 800bd94:	f1bc 0f18 	cmp.w	ip, #24
 800bd98:	f04f 030a 	mov.w	r3, #10
 800bd9c:	d91e      	bls.n	800bddc <__gethex+0x120>
 800bd9e:	b104      	cbz	r4, 800bda2 <__gethex+0xe6>
 800bda0:	4252      	negs	r2, r2
 800bda2:	4417      	add	r7, r2
 800bda4:	f8ca 1000 	str.w	r1, [sl]
 800bda8:	b1ed      	cbz	r5, 800bde6 <__gethex+0x12a>
 800bdaa:	f1bb 0f00 	cmp.w	fp, #0
 800bdae:	bf0c      	ite	eq
 800bdb0:	2506      	moveq	r5, #6
 800bdb2:	2500      	movne	r5, #0
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	b005      	add	sp, #20
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	2500      	movs	r5, #0
 800bdbe:	462c      	mov	r4, r5
 800bdc0:	e7b0      	b.n	800bd24 <__gethex+0x68>
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	d1c7      	bne.n	800bd56 <__gethex+0x9a>
 800bdc6:	4627      	mov	r7, r4
 800bdc8:	e7c7      	b.n	800bd5a <__gethex+0x9e>
 800bdca:	464e      	mov	r6, r9
 800bdcc:	462f      	mov	r7, r5
 800bdce:	2501      	movs	r5, #1
 800bdd0:	e7c3      	b.n	800bd5a <__gethex+0x9e>
 800bdd2:	2400      	movs	r4, #0
 800bdd4:	1cb1      	adds	r1, r6, #2
 800bdd6:	e7cc      	b.n	800bd72 <__gethex+0xb6>
 800bdd8:	2401      	movs	r4, #1
 800bdda:	e7fb      	b.n	800bdd4 <__gethex+0x118>
 800bddc:	fb03 0002 	mla	r0, r3, r2, r0
 800bde0:	e7ce      	b.n	800bd80 <__gethex+0xc4>
 800bde2:	4631      	mov	r1, r6
 800bde4:	e7de      	b.n	800bda4 <__gethex+0xe8>
 800bde6:	eba6 0309 	sub.w	r3, r6, r9
 800bdea:	3b01      	subs	r3, #1
 800bdec:	4629      	mov	r1, r5
 800bdee:	2b07      	cmp	r3, #7
 800bdf0:	dc0a      	bgt.n	800be08 <__gethex+0x14c>
 800bdf2:	9801      	ldr	r0, [sp, #4]
 800bdf4:	f7fd ff8c 	bl	8009d10 <_Balloc>
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	b940      	cbnz	r0, 800be0e <__gethex+0x152>
 800bdfc:	4b5c      	ldr	r3, [pc, #368]	@ (800bf70 <__gethex+0x2b4>)
 800bdfe:	4602      	mov	r2, r0
 800be00:	21e4      	movs	r1, #228	@ 0xe4
 800be02:	485c      	ldr	r0, [pc, #368]	@ (800bf74 <__gethex+0x2b8>)
 800be04:	f7ff fec0 	bl	800bb88 <__assert_func>
 800be08:	3101      	adds	r1, #1
 800be0a:	105b      	asrs	r3, r3, #1
 800be0c:	e7ef      	b.n	800bdee <__gethex+0x132>
 800be0e:	f100 0a14 	add.w	sl, r0, #20
 800be12:	2300      	movs	r3, #0
 800be14:	4655      	mov	r5, sl
 800be16:	469b      	mov	fp, r3
 800be18:	45b1      	cmp	r9, r6
 800be1a:	d337      	bcc.n	800be8c <__gethex+0x1d0>
 800be1c:	f845 bb04 	str.w	fp, [r5], #4
 800be20:	eba5 050a 	sub.w	r5, r5, sl
 800be24:	10ad      	asrs	r5, r5, #2
 800be26:	6125      	str	r5, [r4, #16]
 800be28:	4658      	mov	r0, fp
 800be2a:	f7fe f863 	bl	8009ef4 <__hi0bits>
 800be2e:	016d      	lsls	r5, r5, #5
 800be30:	f8d8 6000 	ldr.w	r6, [r8]
 800be34:	1a2d      	subs	r5, r5, r0
 800be36:	42b5      	cmp	r5, r6
 800be38:	dd54      	ble.n	800bee4 <__gethex+0x228>
 800be3a:	1bad      	subs	r5, r5, r6
 800be3c:	4629      	mov	r1, r5
 800be3e:	4620      	mov	r0, r4
 800be40:	f7fe fbef 	bl	800a622 <__any_on>
 800be44:	4681      	mov	r9, r0
 800be46:	b178      	cbz	r0, 800be68 <__gethex+0x1ac>
 800be48:	1e6b      	subs	r3, r5, #1
 800be4a:	1159      	asrs	r1, r3, #5
 800be4c:	f003 021f 	and.w	r2, r3, #31
 800be50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be54:	f04f 0901 	mov.w	r9, #1
 800be58:	fa09 f202 	lsl.w	r2, r9, r2
 800be5c:	420a      	tst	r2, r1
 800be5e:	d003      	beq.n	800be68 <__gethex+0x1ac>
 800be60:	454b      	cmp	r3, r9
 800be62:	dc36      	bgt.n	800bed2 <__gethex+0x216>
 800be64:	f04f 0902 	mov.w	r9, #2
 800be68:	4629      	mov	r1, r5
 800be6a:	4620      	mov	r0, r4
 800be6c:	f7ff febe 	bl	800bbec <rshift>
 800be70:	442f      	add	r7, r5
 800be72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be76:	42bb      	cmp	r3, r7
 800be78:	da42      	bge.n	800bf00 <__gethex+0x244>
 800be7a:	9801      	ldr	r0, [sp, #4]
 800be7c:	4621      	mov	r1, r4
 800be7e:	f7fd ff87 	bl	8009d90 <_Bfree>
 800be82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be84:	2300      	movs	r3, #0
 800be86:	6013      	str	r3, [r2, #0]
 800be88:	25a3      	movs	r5, #163	@ 0xa3
 800be8a:	e793      	b.n	800bdb4 <__gethex+0xf8>
 800be8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be90:	2a2e      	cmp	r2, #46	@ 0x2e
 800be92:	d012      	beq.n	800beba <__gethex+0x1fe>
 800be94:	2b20      	cmp	r3, #32
 800be96:	d104      	bne.n	800bea2 <__gethex+0x1e6>
 800be98:	f845 bb04 	str.w	fp, [r5], #4
 800be9c:	f04f 0b00 	mov.w	fp, #0
 800bea0:	465b      	mov	r3, fp
 800bea2:	7830      	ldrb	r0, [r6, #0]
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	f7ff fef3 	bl	800bc90 <__hexdig_fun>
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	f000 000f 	and.w	r0, r0, #15
 800beb0:	4098      	lsls	r0, r3
 800beb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800beb6:	3304      	adds	r3, #4
 800beb8:	e7ae      	b.n	800be18 <__gethex+0x15c>
 800beba:	45b1      	cmp	r9, r6
 800bebc:	d8ea      	bhi.n	800be94 <__gethex+0x1d8>
 800bebe:	492b      	ldr	r1, [pc, #172]	@ (800bf6c <__gethex+0x2b0>)
 800bec0:	9303      	str	r3, [sp, #12]
 800bec2:	2201      	movs	r2, #1
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff fe13 	bl	800baf0 <strncmp>
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	2800      	cmp	r0, #0
 800bece:	d1e1      	bne.n	800be94 <__gethex+0x1d8>
 800bed0:	e7a2      	b.n	800be18 <__gethex+0x15c>
 800bed2:	1ea9      	subs	r1, r5, #2
 800bed4:	4620      	mov	r0, r4
 800bed6:	f7fe fba4 	bl	800a622 <__any_on>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d0c2      	beq.n	800be64 <__gethex+0x1a8>
 800bede:	f04f 0903 	mov.w	r9, #3
 800bee2:	e7c1      	b.n	800be68 <__gethex+0x1ac>
 800bee4:	da09      	bge.n	800befa <__gethex+0x23e>
 800bee6:	1b75      	subs	r5, r6, r5
 800bee8:	4621      	mov	r1, r4
 800beea:	9801      	ldr	r0, [sp, #4]
 800beec:	462a      	mov	r2, r5
 800beee:	f7fe f95f 	bl	800a1b0 <__lshift>
 800bef2:	1b7f      	subs	r7, r7, r5
 800bef4:	4604      	mov	r4, r0
 800bef6:	f100 0a14 	add.w	sl, r0, #20
 800befa:	f04f 0900 	mov.w	r9, #0
 800befe:	e7b8      	b.n	800be72 <__gethex+0x1b6>
 800bf00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf04:	42bd      	cmp	r5, r7
 800bf06:	dd6f      	ble.n	800bfe8 <__gethex+0x32c>
 800bf08:	1bed      	subs	r5, r5, r7
 800bf0a:	42ae      	cmp	r6, r5
 800bf0c:	dc34      	bgt.n	800bf78 <__gethex+0x2bc>
 800bf0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d022      	beq.n	800bf5c <__gethex+0x2a0>
 800bf16:	2b03      	cmp	r3, #3
 800bf18:	d024      	beq.n	800bf64 <__gethex+0x2a8>
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d115      	bne.n	800bf4a <__gethex+0x28e>
 800bf1e:	42ae      	cmp	r6, r5
 800bf20:	d113      	bne.n	800bf4a <__gethex+0x28e>
 800bf22:	2e01      	cmp	r6, #1
 800bf24:	d10b      	bne.n	800bf3e <__gethex+0x282>
 800bf26:	9a02      	ldr	r2, [sp, #8]
 800bf28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf2c:	6013      	str	r3, [r2, #0]
 800bf2e:	2301      	movs	r3, #1
 800bf30:	6123      	str	r3, [r4, #16]
 800bf32:	f8ca 3000 	str.w	r3, [sl]
 800bf36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf38:	2562      	movs	r5, #98	@ 0x62
 800bf3a:	601c      	str	r4, [r3, #0]
 800bf3c:	e73a      	b.n	800bdb4 <__gethex+0xf8>
 800bf3e:	1e71      	subs	r1, r6, #1
 800bf40:	4620      	mov	r0, r4
 800bf42:	f7fe fb6e 	bl	800a622 <__any_on>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	d1ed      	bne.n	800bf26 <__gethex+0x26a>
 800bf4a:	9801      	ldr	r0, [sp, #4]
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	f7fd ff1f 	bl	8009d90 <_Bfree>
 800bf52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf54:	2300      	movs	r3, #0
 800bf56:	6013      	str	r3, [r2, #0]
 800bf58:	2550      	movs	r5, #80	@ 0x50
 800bf5a:	e72b      	b.n	800bdb4 <__gethex+0xf8>
 800bf5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1f3      	bne.n	800bf4a <__gethex+0x28e>
 800bf62:	e7e0      	b.n	800bf26 <__gethex+0x26a>
 800bf64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1dd      	bne.n	800bf26 <__gethex+0x26a>
 800bf6a:	e7ee      	b.n	800bf4a <__gethex+0x28e>
 800bf6c:	0800c5fb 	.word	0x0800c5fb
 800bf70:	0800c591 	.word	0x0800c591
 800bf74:	0800c652 	.word	0x0800c652
 800bf78:	1e6f      	subs	r7, r5, #1
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	d130      	bne.n	800bfe2 <__gethex+0x326>
 800bf80:	b127      	cbz	r7, 800bf8c <__gethex+0x2d0>
 800bf82:	4639      	mov	r1, r7
 800bf84:	4620      	mov	r0, r4
 800bf86:	f7fe fb4c 	bl	800a622 <__any_on>
 800bf8a:	4681      	mov	r9, r0
 800bf8c:	117a      	asrs	r2, r7, #5
 800bf8e:	2301      	movs	r3, #1
 800bf90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf94:	f007 071f 	and.w	r7, r7, #31
 800bf98:	40bb      	lsls	r3, r7
 800bf9a:	4213      	tst	r3, r2
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	bf18      	it	ne
 800bfa2:	f049 0902 	orrne.w	r9, r9, #2
 800bfa6:	f7ff fe21 	bl	800bbec <rshift>
 800bfaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bfae:	1b76      	subs	r6, r6, r5
 800bfb0:	2502      	movs	r5, #2
 800bfb2:	f1b9 0f00 	cmp.w	r9, #0
 800bfb6:	d047      	beq.n	800c048 <__gethex+0x38c>
 800bfb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d015      	beq.n	800bfec <__gethex+0x330>
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d017      	beq.n	800bff4 <__gethex+0x338>
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d109      	bne.n	800bfdc <__gethex+0x320>
 800bfc8:	f019 0f02 	tst.w	r9, #2
 800bfcc:	d006      	beq.n	800bfdc <__gethex+0x320>
 800bfce:	f8da 3000 	ldr.w	r3, [sl]
 800bfd2:	ea49 0903 	orr.w	r9, r9, r3
 800bfd6:	f019 0f01 	tst.w	r9, #1
 800bfda:	d10e      	bne.n	800bffa <__gethex+0x33e>
 800bfdc:	f045 0510 	orr.w	r5, r5, #16
 800bfe0:	e032      	b.n	800c048 <__gethex+0x38c>
 800bfe2:	f04f 0901 	mov.w	r9, #1
 800bfe6:	e7d1      	b.n	800bf8c <__gethex+0x2d0>
 800bfe8:	2501      	movs	r5, #1
 800bfea:	e7e2      	b.n	800bfb2 <__gethex+0x2f6>
 800bfec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfee:	f1c3 0301 	rsb	r3, r3, #1
 800bff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0f0      	beq.n	800bfdc <__gethex+0x320>
 800bffa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bffe:	f104 0314 	add.w	r3, r4, #20
 800c002:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c006:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c00a:	f04f 0c00 	mov.w	ip, #0
 800c00e:	4618      	mov	r0, r3
 800c010:	f853 2b04 	ldr.w	r2, [r3], #4
 800c014:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c018:	d01b      	beq.n	800c052 <__gethex+0x396>
 800c01a:	3201      	adds	r2, #1
 800c01c:	6002      	str	r2, [r0, #0]
 800c01e:	2d02      	cmp	r5, #2
 800c020:	f104 0314 	add.w	r3, r4, #20
 800c024:	d13c      	bne.n	800c0a0 <__gethex+0x3e4>
 800c026:	f8d8 2000 	ldr.w	r2, [r8]
 800c02a:	3a01      	subs	r2, #1
 800c02c:	42b2      	cmp	r2, r6
 800c02e:	d109      	bne.n	800c044 <__gethex+0x388>
 800c030:	1171      	asrs	r1, r6, #5
 800c032:	2201      	movs	r2, #1
 800c034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c038:	f006 061f 	and.w	r6, r6, #31
 800c03c:	fa02 f606 	lsl.w	r6, r2, r6
 800c040:	421e      	tst	r6, r3
 800c042:	d13a      	bne.n	800c0ba <__gethex+0x3fe>
 800c044:	f045 0520 	orr.w	r5, r5, #32
 800c048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c04a:	601c      	str	r4, [r3, #0]
 800c04c:	9b02      	ldr	r3, [sp, #8]
 800c04e:	601f      	str	r7, [r3, #0]
 800c050:	e6b0      	b.n	800bdb4 <__gethex+0xf8>
 800c052:	4299      	cmp	r1, r3
 800c054:	f843 cc04 	str.w	ip, [r3, #-4]
 800c058:	d8d9      	bhi.n	800c00e <__gethex+0x352>
 800c05a:	68a3      	ldr	r3, [r4, #8]
 800c05c:	459b      	cmp	fp, r3
 800c05e:	db17      	blt.n	800c090 <__gethex+0x3d4>
 800c060:	6861      	ldr	r1, [r4, #4]
 800c062:	9801      	ldr	r0, [sp, #4]
 800c064:	3101      	adds	r1, #1
 800c066:	f7fd fe53 	bl	8009d10 <_Balloc>
 800c06a:	4681      	mov	r9, r0
 800c06c:	b918      	cbnz	r0, 800c076 <__gethex+0x3ba>
 800c06e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0d8 <__gethex+0x41c>)
 800c070:	4602      	mov	r2, r0
 800c072:	2184      	movs	r1, #132	@ 0x84
 800c074:	e6c5      	b.n	800be02 <__gethex+0x146>
 800c076:	6922      	ldr	r2, [r4, #16]
 800c078:	3202      	adds	r2, #2
 800c07a:	f104 010c 	add.w	r1, r4, #12
 800c07e:	0092      	lsls	r2, r2, #2
 800c080:	300c      	adds	r0, #12
 800c082:	f7fc fed6 	bl	8008e32 <memcpy>
 800c086:	4621      	mov	r1, r4
 800c088:	9801      	ldr	r0, [sp, #4]
 800c08a:	f7fd fe81 	bl	8009d90 <_Bfree>
 800c08e:	464c      	mov	r4, r9
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c098:	6122      	str	r2, [r4, #16]
 800c09a:	2201      	movs	r2, #1
 800c09c:	615a      	str	r2, [r3, #20]
 800c09e:	e7be      	b.n	800c01e <__gethex+0x362>
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	455a      	cmp	r2, fp
 800c0a4:	dd0b      	ble.n	800c0be <__gethex+0x402>
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f7ff fd9f 	bl	800bbec <rshift>
 800c0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0b2:	3701      	adds	r7, #1
 800c0b4:	42bb      	cmp	r3, r7
 800c0b6:	f6ff aee0 	blt.w	800be7a <__gethex+0x1be>
 800c0ba:	2501      	movs	r5, #1
 800c0bc:	e7c2      	b.n	800c044 <__gethex+0x388>
 800c0be:	f016 061f 	ands.w	r6, r6, #31
 800c0c2:	d0fa      	beq.n	800c0ba <__gethex+0x3fe>
 800c0c4:	4453      	add	r3, sl
 800c0c6:	f1c6 0620 	rsb	r6, r6, #32
 800c0ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c0ce:	f7fd ff11 	bl	8009ef4 <__hi0bits>
 800c0d2:	42b0      	cmp	r0, r6
 800c0d4:	dbe7      	blt.n	800c0a6 <__gethex+0x3ea>
 800c0d6:	e7f0      	b.n	800c0ba <__gethex+0x3fe>
 800c0d8:	0800c591 	.word	0x0800c591

0800c0dc <L_shift>:
 800c0dc:	f1c2 0208 	rsb	r2, r2, #8
 800c0e0:	0092      	lsls	r2, r2, #2
 800c0e2:	b570      	push	{r4, r5, r6, lr}
 800c0e4:	f1c2 0620 	rsb	r6, r2, #32
 800c0e8:	6843      	ldr	r3, [r0, #4]
 800c0ea:	6804      	ldr	r4, [r0, #0]
 800c0ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c0f0:	432c      	orrs	r4, r5
 800c0f2:	40d3      	lsrs	r3, r2
 800c0f4:	6004      	str	r4, [r0, #0]
 800c0f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0fa:	4288      	cmp	r0, r1
 800c0fc:	d3f4      	bcc.n	800c0e8 <L_shift+0xc>
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}

0800c100 <__match>:
 800c100:	b530      	push	{r4, r5, lr}
 800c102:	6803      	ldr	r3, [r0, #0]
 800c104:	3301      	adds	r3, #1
 800c106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c10a:	b914      	cbnz	r4, 800c112 <__match+0x12>
 800c10c:	6003      	str	r3, [r0, #0]
 800c10e:	2001      	movs	r0, #1
 800c110:	bd30      	pop	{r4, r5, pc}
 800c112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c116:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c11a:	2d19      	cmp	r5, #25
 800c11c:	bf98      	it	ls
 800c11e:	3220      	addls	r2, #32
 800c120:	42a2      	cmp	r2, r4
 800c122:	d0f0      	beq.n	800c106 <__match+0x6>
 800c124:	2000      	movs	r0, #0
 800c126:	e7f3      	b.n	800c110 <__match+0x10>

0800c128 <__hexnan>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	680b      	ldr	r3, [r1, #0]
 800c12e:	6801      	ldr	r1, [r0, #0]
 800c130:	115e      	asrs	r6, r3, #5
 800c132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c136:	f013 031f 	ands.w	r3, r3, #31
 800c13a:	b087      	sub	sp, #28
 800c13c:	bf18      	it	ne
 800c13e:	3604      	addne	r6, #4
 800c140:	2500      	movs	r5, #0
 800c142:	1f37      	subs	r7, r6, #4
 800c144:	4682      	mov	sl, r0
 800c146:	4690      	mov	r8, r2
 800c148:	9301      	str	r3, [sp, #4]
 800c14a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c14e:	46b9      	mov	r9, r7
 800c150:	463c      	mov	r4, r7
 800c152:	9502      	str	r5, [sp, #8]
 800c154:	46ab      	mov	fp, r5
 800c156:	784a      	ldrb	r2, [r1, #1]
 800c158:	1c4b      	adds	r3, r1, #1
 800c15a:	9303      	str	r3, [sp, #12]
 800c15c:	b342      	cbz	r2, 800c1b0 <__hexnan+0x88>
 800c15e:	4610      	mov	r0, r2
 800c160:	9105      	str	r1, [sp, #20]
 800c162:	9204      	str	r2, [sp, #16]
 800c164:	f7ff fd94 	bl	800bc90 <__hexdig_fun>
 800c168:	2800      	cmp	r0, #0
 800c16a:	d151      	bne.n	800c210 <__hexnan+0xe8>
 800c16c:	9a04      	ldr	r2, [sp, #16]
 800c16e:	9905      	ldr	r1, [sp, #20]
 800c170:	2a20      	cmp	r2, #32
 800c172:	d818      	bhi.n	800c1a6 <__hexnan+0x7e>
 800c174:	9b02      	ldr	r3, [sp, #8]
 800c176:	459b      	cmp	fp, r3
 800c178:	dd13      	ble.n	800c1a2 <__hexnan+0x7a>
 800c17a:	454c      	cmp	r4, r9
 800c17c:	d206      	bcs.n	800c18c <__hexnan+0x64>
 800c17e:	2d07      	cmp	r5, #7
 800c180:	dc04      	bgt.n	800c18c <__hexnan+0x64>
 800c182:	462a      	mov	r2, r5
 800c184:	4649      	mov	r1, r9
 800c186:	4620      	mov	r0, r4
 800c188:	f7ff ffa8 	bl	800c0dc <L_shift>
 800c18c:	4544      	cmp	r4, r8
 800c18e:	d952      	bls.n	800c236 <__hexnan+0x10e>
 800c190:	2300      	movs	r3, #0
 800c192:	f1a4 0904 	sub.w	r9, r4, #4
 800c196:	f844 3c04 	str.w	r3, [r4, #-4]
 800c19a:	f8cd b008 	str.w	fp, [sp, #8]
 800c19e:	464c      	mov	r4, r9
 800c1a0:	461d      	mov	r5, r3
 800c1a2:	9903      	ldr	r1, [sp, #12]
 800c1a4:	e7d7      	b.n	800c156 <__hexnan+0x2e>
 800c1a6:	2a29      	cmp	r2, #41	@ 0x29
 800c1a8:	d157      	bne.n	800c25a <__hexnan+0x132>
 800c1aa:	3102      	adds	r1, #2
 800c1ac:	f8ca 1000 	str.w	r1, [sl]
 800c1b0:	f1bb 0f00 	cmp.w	fp, #0
 800c1b4:	d051      	beq.n	800c25a <__hexnan+0x132>
 800c1b6:	454c      	cmp	r4, r9
 800c1b8:	d206      	bcs.n	800c1c8 <__hexnan+0xa0>
 800c1ba:	2d07      	cmp	r5, #7
 800c1bc:	dc04      	bgt.n	800c1c8 <__hexnan+0xa0>
 800c1be:	462a      	mov	r2, r5
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7ff ff8a 	bl	800c0dc <L_shift>
 800c1c8:	4544      	cmp	r4, r8
 800c1ca:	d936      	bls.n	800c23a <__hexnan+0x112>
 800c1cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c1d0:	4623      	mov	r3, r4
 800c1d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1da:	429f      	cmp	r7, r3
 800c1dc:	d2f9      	bcs.n	800c1d2 <__hexnan+0xaa>
 800c1de:	1b3b      	subs	r3, r7, r4
 800c1e0:	f023 0303 	bic.w	r3, r3, #3
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	3401      	adds	r4, #1
 800c1e8:	3e03      	subs	r6, #3
 800c1ea:	42b4      	cmp	r4, r6
 800c1ec:	bf88      	it	hi
 800c1ee:	2304      	movhi	r3, #4
 800c1f0:	4443      	add	r3, r8
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f843 2b04 	str.w	r2, [r3], #4
 800c1f8:	429f      	cmp	r7, r3
 800c1fa:	d2fb      	bcs.n	800c1f4 <__hexnan+0xcc>
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	b91b      	cbnz	r3, 800c208 <__hexnan+0xe0>
 800c200:	4547      	cmp	r7, r8
 800c202:	d128      	bne.n	800c256 <__hexnan+0x12e>
 800c204:	2301      	movs	r3, #1
 800c206:	603b      	str	r3, [r7, #0]
 800c208:	2005      	movs	r0, #5
 800c20a:	b007      	add	sp, #28
 800c20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c210:	3501      	adds	r5, #1
 800c212:	2d08      	cmp	r5, #8
 800c214:	f10b 0b01 	add.w	fp, fp, #1
 800c218:	dd06      	ble.n	800c228 <__hexnan+0x100>
 800c21a:	4544      	cmp	r4, r8
 800c21c:	d9c1      	bls.n	800c1a2 <__hexnan+0x7a>
 800c21e:	2300      	movs	r3, #0
 800c220:	f844 3c04 	str.w	r3, [r4, #-4]
 800c224:	2501      	movs	r5, #1
 800c226:	3c04      	subs	r4, #4
 800c228:	6822      	ldr	r2, [r4, #0]
 800c22a:	f000 000f 	and.w	r0, r0, #15
 800c22e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c232:	6020      	str	r0, [r4, #0]
 800c234:	e7b5      	b.n	800c1a2 <__hexnan+0x7a>
 800c236:	2508      	movs	r5, #8
 800c238:	e7b3      	b.n	800c1a2 <__hexnan+0x7a>
 800c23a:	9b01      	ldr	r3, [sp, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d0dd      	beq.n	800c1fc <__hexnan+0xd4>
 800c240:	f1c3 0320 	rsb	r3, r3, #32
 800c244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c248:	40da      	lsrs	r2, r3
 800c24a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c24e:	4013      	ands	r3, r2
 800c250:	f846 3c04 	str.w	r3, [r6, #-4]
 800c254:	e7d2      	b.n	800c1fc <__hexnan+0xd4>
 800c256:	3f04      	subs	r7, #4
 800c258:	e7d0      	b.n	800c1fc <__hexnan+0xd4>
 800c25a:	2004      	movs	r0, #4
 800c25c:	e7d5      	b.n	800c20a <__hexnan+0xe2>

0800c25e <__ascii_mbtowc>:
 800c25e:	b082      	sub	sp, #8
 800c260:	b901      	cbnz	r1, 800c264 <__ascii_mbtowc+0x6>
 800c262:	a901      	add	r1, sp, #4
 800c264:	b142      	cbz	r2, 800c278 <__ascii_mbtowc+0x1a>
 800c266:	b14b      	cbz	r3, 800c27c <__ascii_mbtowc+0x1e>
 800c268:	7813      	ldrb	r3, [r2, #0]
 800c26a:	600b      	str	r3, [r1, #0]
 800c26c:	7812      	ldrb	r2, [r2, #0]
 800c26e:	1e10      	subs	r0, r2, #0
 800c270:	bf18      	it	ne
 800c272:	2001      	movne	r0, #1
 800c274:	b002      	add	sp, #8
 800c276:	4770      	bx	lr
 800c278:	4610      	mov	r0, r2
 800c27a:	e7fb      	b.n	800c274 <__ascii_mbtowc+0x16>
 800c27c:	f06f 0001 	mvn.w	r0, #1
 800c280:	e7f8      	b.n	800c274 <__ascii_mbtowc+0x16>

0800c282 <_realloc_r>:
 800c282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c286:	4607      	mov	r7, r0
 800c288:	4614      	mov	r4, r2
 800c28a:	460d      	mov	r5, r1
 800c28c:	b921      	cbnz	r1, 800c298 <_realloc_r+0x16>
 800c28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c292:	4611      	mov	r1, r2
 800c294:	f7fd bcb0 	b.w	8009bf8 <_malloc_r>
 800c298:	b92a      	cbnz	r2, 800c2a6 <_realloc_r+0x24>
 800c29a:	f7fd fc39 	bl	8009b10 <_free_r>
 800c29e:	4625      	mov	r5, r4
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a6:	f000 f840 	bl	800c32a <_malloc_usable_size_r>
 800c2aa:	4284      	cmp	r4, r0
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	d802      	bhi.n	800c2b6 <_realloc_r+0x34>
 800c2b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2b4:	d8f4      	bhi.n	800c2a0 <_realloc_r+0x1e>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7fd fc9d 	bl	8009bf8 <_malloc_r>
 800c2be:	4680      	mov	r8, r0
 800c2c0:	b908      	cbnz	r0, 800c2c6 <_realloc_r+0x44>
 800c2c2:	4645      	mov	r5, r8
 800c2c4:	e7ec      	b.n	800c2a0 <_realloc_r+0x1e>
 800c2c6:	42b4      	cmp	r4, r6
 800c2c8:	4622      	mov	r2, r4
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	bf28      	it	cs
 800c2ce:	4632      	movcs	r2, r6
 800c2d0:	f7fc fdaf 	bl	8008e32 <memcpy>
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	f7fd fc1a 	bl	8009b10 <_free_r>
 800c2dc:	e7f1      	b.n	800c2c2 <_realloc_r+0x40>

0800c2de <__ascii_wctomb>:
 800c2de:	4603      	mov	r3, r0
 800c2e0:	4608      	mov	r0, r1
 800c2e2:	b141      	cbz	r1, 800c2f6 <__ascii_wctomb+0x18>
 800c2e4:	2aff      	cmp	r2, #255	@ 0xff
 800c2e6:	d904      	bls.n	800c2f2 <__ascii_wctomb+0x14>
 800c2e8:	228a      	movs	r2, #138	@ 0x8a
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2f0:	4770      	bx	lr
 800c2f2:	700a      	strb	r2, [r1, #0]
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	4770      	bx	lr

0800c2f8 <fiprintf>:
 800c2f8:	b40e      	push	{r1, r2, r3}
 800c2fa:	b503      	push	{r0, r1, lr}
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	ab03      	add	r3, sp, #12
 800c300:	4805      	ldr	r0, [pc, #20]	@ (800c318 <fiprintf+0x20>)
 800c302:	f853 2b04 	ldr.w	r2, [r3], #4
 800c306:	6800      	ldr	r0, [r0, #0]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	f7ff f9b1 	bl	800b670 <_vfiprintf_r>
 800c30e:	b002      	add	sp, #8
 800c310:	f85d eb04 	ldr.w	lr, [sp], #4
 800c314:	b003      	add	sp, #12
 800c316:	4770      	bx	lr
 800c318:	20000038 	.word	0x20000038

0800c31c <abort>:
 800c31c:	b508      	push	{r3, lr}
 800c31e:	2006      	movs	r0, #6
 800c320:	f000 f834 	bl	800c38c <raise>
 800c324:	2001      	movs	r0, #1
 800c326:	f7f7 f886 	bl	8003436 <_exit>

0800c32a <_malloc_usable_size_r>:
 800c32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c32e:	1f18      	subs	r0, r3, #4
 800c330:	2b00      	cmp	r3, #0
 800c332:	bfbc      	itt	lt
 800c334:	580b      	ldrlt	r3, [r1, r0]
 800c336:	18c0      	addlt	r0, r0, r3
 800c338:	4770      	bx	lr

0800c33a <_raise_r>:
 800c33a:	291f      	cmp	r1, #31
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	4605      	mov	r5, r0
 800c340:	460c      	mov	r4, r1
 800c342:	d904      	bls.n	800c34e <_raise_r+0x14>
 800c344:	2316      	movs	r3, #22
 800c346:	6003      	str	r3, [r0, #0]
 800c348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c350:	b112      	cbz	r2, 800c358 <_raise_r+0x1e>
 800c352:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c356:	b94b      	cbnz	r3, 800c36c <_raise_r+0x32>
 800c358:	4628      	mov	r0, r5
 800c35a:	f000 f831 	bl	800c3c0 <_getpid_r>
 800c35e:	4622      	mov	r2, r4
 800c360:	4601      	mov	r1, r0
 800c362:	4628      	mov	r0, r5
 800c364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c368:	f000 b818 	b.w	800c39c <_kill_r>
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d00a      	beq.n	800c386 <_raise_r+0x4c>
 800c370:	1c59      	adds	r1, r3, #1
 800c372:	d103      	bne.n	800c37c <_raise_r+0x42>
 800c374:	2316      	movs	r3, #22
 800c376:	6003      	str	r3, [r0, #0]
 800c378:	2001      	movs	r0, #1
 800c37a:	e7e7      	b.n	800c34c <_raise_r+0x12>
 800c37c:	2100      	movs	r1, #0
 800c37e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c382:	4620      	mov	r0, r4
 800c384:	4798      	blx	r3
 800c386:	2000      	movs	r0, #0
 800c388:	e7e0      	b.n	800c34c <_raise_r+0x12>
	...

0800c38c <raise>:
 800c38c:	4b02      	ldr	r3, [pc, #8]	@ (800c398 <raise+0xc>)
 800c38e:	4601      	mov	r1, r0
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	f7ff bfd2 	b.w	800c33a <_raise_r>
 800c396:	bf00      	nop
 800c398:	20000038 	.word	0x20000038

0800c39c <_kill_r>:
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	4d07      	ldr	r5, [pc, #28]	@ (800c3bc <_kill_r+0x20>)
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	4608      	mov	r0, r1
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	602b      	str	r3, [r5, #0]
 800c3aa:	f7f7 f834 	bl	8003416 <_kill>
 800c3ae:	1c43      	adds	r3, r0, #1
 800c3b0:	d102      	bne.n	800c3b8 <_kill_r+0x1c>
 800c3b2:	682b      	ldr	r3, [r5, #0]
 800c3b4:	b103      	cbz	r3, 800c3b8 <_kill_r+0x1c>
 800c3b6:	6023      	str	r3, [r4, #0]
 800c3b8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ba:	bf00      	nop
 800c3bc:	200007a0 	.word	0x200007a0

0800c3c0 <_getpid_r>:
 800c3c0:	f7f7 b821 	b.w	8003406 <_getpid>

0800c3c4 <_init>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	bf00      	nop
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr

0800c3d0 <_fini>:
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	bf00      	nop
 800c3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3d6:	bc08      	pop	{r3}
 800c3d8:	469e      	mov	lr, r3
 800c3da:	4770      	bx	lr
