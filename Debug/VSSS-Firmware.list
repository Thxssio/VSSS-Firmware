
VSSS-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc54  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800be38  0800be38  0000ce38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c35c  0800c35c  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c35c  0800c35c  0000d35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c364  0800c364  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c364  0800c364  0000d364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c368  0800c368  0000d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c36c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  200001f0  0800c558  0000e1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800c558  0000e788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017919  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003335  00000000  00000000  00025b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100e  00000000  00000000  0002a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004002  00000000  00000000  0002b32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001796c  00000000  00000000  0002f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb497  00000000  00000000  00046c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112133  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c44  00000000  00000000  00112178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00118dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be1c 	.word	0x0800be1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800be1c 	.word	0x0800be1c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80010a0:	f7ff fd62 	bl	8000b68 <__aeabi_dcmpgt>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80010b6:	e011      	b.n	80010dc <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80010c4:	f7ff fd32 	bl	8000b2c <__aeabi_dcmplt>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d100      	bne.n	80010d0 <PID_Init+0x60>
}
 80010ce:	e005      	b.n	80010dc <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	0000      	movs	r0, r0
	...

080010e8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80010f0:	6239      	str	r1, [r7, #32]
 80010f2:	61fa      	str	r2, [r7, #28]
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80010fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80010fe:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110a:	6a3a      	ldr	r2, [r7, #32]
 800110c:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800111a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001170 <PID+0x88>
 800111e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001178 <PID+0x90>
 8001122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001124:	f000 f956 	bl	80013d4 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	2264      	movs	r2, #100	@ 0x64
 800112c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800112e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001132:	4619      	mov	r1, r3
 8001134:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001136:	f000 fa63 	bl	8001600 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800113a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800113e:	4619      	mov	r1, r3
 8001140:	ed97 2b00 	vldr	d2, [r7]
 8001144:	ed97 1b02 	vldr	d1, [r7, #8]
 8001148:	ed97 0b04 	vldr	d0, [r7, #16]
 800114c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800114e:	f000 f9af 	bl	80014b0 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001152:	f001 ffeb 	bl	800312c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	1ad2      	subs	r2, r2, r3
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	605a      	str	r2, [r3, #4]

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	@ 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	00000000 	.word	0x00000000
 8001174:	406fe000 	.word	0x406fe000
	...

08001180 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	@ 0x30
 8001184:	af02      	add	r7, sp, #8
 8001186:	6278      	str	r0, [r7, #36]	@ 0x24
 8001188:	6239      	str	r1, [r7, #32]
 800118a:	61fa      	str	r2, [r7, #28]
 800118c:	61bb      	str	r3, [r7, #24]
 800118e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001192:	ed87 1b02 	vstr	d1, [r7, #8]
 8001196:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 800119a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	ed97 2b00 	vldr	d2, [r7]
 80011a8:	ed97 1b02 	vldr	d1, [r7, #8]
 80011ac:	ed97 0b04 	vldr	d0, [r7, #16]
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	6a39      	ldr	r1, [r7, #32]
 80011b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011b8:	f7ff ff96 	bl	80010e8 <PID>
}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	@ 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <PID_Compute+0x14>
	{
		return _FALSE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e0db      	b.n	8001390 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80011d8:	f001 ffa8 	bl	800312c <HAL_GetTick>
 80011dc:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	6a3a      	ldr	r2, [r7, #32]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	f0c0 80cd 	bcc.w	800138e <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800120c:	f7ff f864 	bl	80002d8 <__aeabi_dsub>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800121e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001222:	f7ff f859 	bl	80002d8 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800123a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800123e:	f7ff fa03 	bl	8000648 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4620      	mov	r0, r4
 8001248:	4629      	mov	r1, r5
 800124a:	f7ff f847 	bl	80002dc <__adddf3>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d114      	bne.n	800128a <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800126c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001270:	f7ff f9ea 	bl	8000648 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff f82c 	bl	80002d8 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001296:	f7ff fc67 	bl	8000b68 <__aeabi_dcmpgt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80012ac:	e010      	b.n	80012d0 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80012ba:	f7ff fc37 	bl	8000b2c <__aeabi_dcmplt>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80012de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012e2:	f7ff f9b1 	bl	8000648 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80012ee:	e005      	b.n	80012fc <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130c:	f7ff f99c 	bl	8000648 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7fe ffde 	bl	80002d8 <__aeabi_dsub>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001324:	f7fe ffda 	bl	80002dc <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800133a:	f7ff fc15 	bl	8000b68 <__aeabi_dcmpgt>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800134a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800134e:	e00e      	b.n	800136e <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001356:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800135a:	f7ff fbe7 	bl	8000b2c <__aeabi_dcmplt>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800136a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001376:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001380:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001388:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 800138e:	2300      	movs	r3, #0
	}

}
 8001390:	4618      	mov	r0, r3
 8001392:	3730      	adds	r7, #48	@ 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}

08001398 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	bf0c      	ite	eq
 80013aa:	2301      	moveq	r3, #1
 80013ac:	2300      	movne	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d006      	beq.n	80013c6 <PID_SetMode+0x2e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fe55 	bl	8001070 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	705a      	strb	r2, [r3, #1]

}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6178      	str	r0, [r7, #20]
 80013dc:	ed87 0b02 	vstr	d0, [r7, #8]
 80013e0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80013e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ec:	f7ff fbb2 	bl	8000b54 <__aeabi_dcmpge>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d158      	bne.n	80014a8 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001400:	6979      	ldr	r1, [r7, #20]
 8001402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001406:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d04b      	beq.n	80014aa <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001420:	f7ff fba2 	bl	8000b68 <__aeabi_dcmpgt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001434:	e9c1 2300 	strd	r2, r3, [r1]
 8001438:	e012      	b.n	8001460 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001448:	f7ff fb70 	bl	8000b2c <__aeabi_dcmplt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800146c:	f7ff fb7c 	bl	8000b68 <__aeabi_dcmpgt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d006      	beq.n	8001484 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800147c:	6979      	ldr	r1, [r7, #20]
 800147e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001482:	e012      	b.n	80014aa <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001490:	f7ff fb4c 	bl	8000b2c <__aeabi_dcmplt>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80014a0:	6979      	ldr	r1, [r7, #20]
 80014a2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80014a6:	e000      	b.n	80014aa <PID_SetOutputLimits+0xd6>
		return;
 80014a8:	bf00      	nop
		}
		else { }

	}

}
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	61f8      	str	r0, [r7, #28]
 80014b8:	ed87 0b04 	vstr	d0, [r7, #16]
 80014bc:	ed87 1b02 	vstr	d1, [r7, #8]
 80014c0:	ed87 2b00 	vstr	d2, [r7]
 80014c4:	460b      	mov	r3, r1
 80014c6:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014d4:	f7ff fb2a 	bl	8000b2c <__aeabi_dcmplt>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 8089 	bne.w	80015f2 <PID_SetTunings2+0x142>
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ec:	f7ff fb1e 	bl	8000b2c <__aeabi_dcmplt>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d17d      	bne.n	80015f2 <PID_SetTunings2+0x142>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001502:	f7ff fb13 	bl	8000b2c <__aeabi_dcmplt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d172      	bne.n	80015f2 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	7efa      	ldrb	r2, [r7, #27]
 8001510:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001512:	7efb      	ldrb	r3, [r7, #27]
 8001514:	2b01      	cmp	r3, #1
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001524:	69f9      	ldr	r1, [r7, #28]
 8001526:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800152a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800152e:	69f9      	ldr	r1, [r7, #28]
 8001530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001534:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001538:	69f9      	ldr	r1, [r7, #28]
 800153a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800153e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f804 	bl	8000554 <__aeabi_ui2d>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b2a      	ldr	r3, [pc, #168]	@ (80015fc <PID_SetTunings2+0x14c>)
 8001552:	f7ff f9a3 	bl	800089c <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800155e:	69f9      	ldr	r1, [r7, #28]
 8001560:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001564:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001568:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800156c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001570:	f7ff f86a 	bl	8000648 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	69f9      	ldr	r1, [r7, #28]
 800157a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800157e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001586:	f7ff f989 	bl	800089c <__aeabi_ddiv>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	69f9      	ldr	r1, [r7, #28]
 8001590:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	78db      	ldrb	r3, [r3, #3]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d12b      	bne.n	80015f4 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80015a2:	f04f 0000 	mov.w	r0, #0
 80015a6:	f04f 0100 	mov.w	r1, #0
 80015aa:	f7fe fe95 	bl	80002d8 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	69f9      	ldr	r1, [r7, #28]
 80015b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015be:	f04f 0000 	mov.w	r0, #0
 80015c2:	f04f 0100 	mov.w	r1, #0
 80015c6:	f7fe fe87 	bl	80002d8 <__aeabi_dsub>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	69f9      	ldr	r1, [r7, #28]
 80015d0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015da:	f04f 0000 	mov.w	r0, #0
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	f7fe fe79 	bl	80002d8 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	69f9      	ldr	r1, [r7, #28]
 80015ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 80015f0:	e000      	b.n	80015f4 <PID_SetTunings2+0x144>
		return;
 80015f2:	bf00      	nop

	}

}
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	408f4000 	.word	0x408f4000

08001600 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	785b      	ldrb	r3, [r3, #1]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02e      	beq.n	8001672 <PID_SetControllerDirection+0x72>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	429a      	cmp	r2, r3
 800161c:	d029      	beq.n	8001672 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001624:	f04f 0000 	mov.w	r0, #0
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	f7fe fe54 	bl	80002d8 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	f7fe fe46 	bl	80002d8 <__aeabi_dsub>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800165c:	f04f 0000 	mov.w	r0, #0
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	f7fe fe38 	bl	80002d8 <__aeabi_dsub>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	70da      	strb	r2, [r3, #3]

}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	dd2e      	ble.n	80016ee <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7fe ff6f 	bl	8000574 <__aeabi_i2d>
 8001696:	4604      	mov	r4, r0
 8001698:	460d      	mov	r5, r1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff58 	bl	8000554 <__aeabi_ui2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4620      	mov	r0, r4
 80016aa:	4629      	mov	r1, r5
 80016ac:	f7ff f8f6 	bl	800089c <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80016be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016c2:	f7fe ffc1 	bl	8000648 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80016d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016da:	f7ff f8df 	bl	800089c <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	609a      	str	r2, [r3, #8]

	}

}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080016f8 <VSSS_Init>:
static float vL = 0.0f;
static float vR = 0.0f;



void VSSS_Init(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    Kinematics_Init();
 80016fc:	f000 f978 	bl	80019f0 <Kinematics_Init>
    NRF24_Init();
 8001700:	f001 f8a6 	bl	8002850 <NRF24_Init>
    NRF24_RxMode(RxAddress, 125);
 8001704:	217d      	movs	r1, #125	@ 0x7d
 8001706:	480a      	ldr	r0, [pc, #40]	@ (8001730 <VSSS_Init+0x38>)
 8001708:	f001 f8c5 	bl	8002896 <NRF24_RxMode>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800170c:	4809      	ldr	r0, [pc, #36]	@ (8001734 <VSSS_Init+0x3c>)
 800170e:	f7fe fdd7 	bl	80002c0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	4906      	ldr	r1, [pc, #24]	@ (8001734 <VSSS_Init+0x3c>)
 800171c:	4806      	ldr	r0, [pc, #24]	@ (8001738 <VSSS_Init+0x40>)
 800171e:	f005 f963 	bl	80069e8 <HAL_UART_Transmit>
    last_rx_time = HAL_GetTick();
 8001722:	f001 fd03 	bl	800312c <HAL_GetTick>
 8001726:	4603      	mov	r3, r0
 8001728:	4a04      	ldr	r2, [pc, #16]	@ (800173c <VSSS_Init+0x44>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000000 	.word	0x20000000
 8001734:	20000008 	.word	0x20000008
 8001738:	20000570 	.word	0x20000570
 800173c:	20000238 	.word	0x20000238

08001740 <VSSS_Run>:

void VSSS_Run(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    if (isDataAvailable(2)) {
 8001744:	2002      	movs	r0, #2
 8001746:	f001 f8e5 	bl	8002914 <isDataAvailable>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <VSSS_Run+0x1a>
        NRF24_Receive(robot.RxData);
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <VSSS_Run+0x48>)
 8001752:	f001 f8ff 	bl	8002954 <NRF24_Receive>
        VSSS_ProcessReceivedData();
 8001756:	f000 f81f 	bl	8001798 <VSSS_ProcessReceivedData>
    }

    if ((HAL_GetTick() - last_rx_time) > COMMUNICATION_TIMEOUT_MS) {
 800175a:	f001 fce7 	bl	800312c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <VSSS_Run+0x4c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800176a:	d90a      	bls.n	8001782 <VSSS_Run+0x42>
        Kinematics_SetSpeeds(0.0f, 0.0f);
 800176c:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001790 <VSSS_Run+0x50>
 8001770:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001790 <VSSS_Run+0x50>
 8001774:	f000 fa4c 	bl	8001c10 <Kinematics_SetSpeeds>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	2140      	movs	r1, #64	@ 0x40
 800177c:	4805      	ldr	r0, [pc, #20]	@ (8001794 <VSSS_Run+0x54>)
 800177e:	f001 ff69 	bl	8003654 <HAL_GPIO_WritePin>
    }
//	Kinematics_SetSpeeds(vL, vR);
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000218 	.word	0x20000218
 800178c:	20000238 	.word	0x20000238
 8001790:	00000000 	.word	0x00000000
 8001794:	48000800 	.word	0x48000800

08001798 <VSSS_ProcessReceivedData>:

void VSSS_ProcessReceivedData(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
    uint8_t real_size = robot.RxData[0];
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
 80017a2:	73fb      	strb	r3, [r7, #15]
    const size_t expected_size = sizeof(int) + 2 * sizeof(float);
 80017a4:	230c      	movs	r3, #12
 80017a6:	60bb      	str	r3, [r7, #8]

    if (real_size >= expected_size) {
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d82d      	bhi.n	800180c <VSSS_ProcessReceivedData+0x74>
        int id_raw;
        memcpy(&id_raw, &robot.RxData[1], sizeof(int));
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017b2:	f8d3 300d 	ldr.w	r3, [r3, #13]
 80017b6:	607b      	str	r3, [r7, #4]
        robot.id = __builtin_bswap32(id_raw);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ba1b      	rev	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017c0:	601a      	str	r2, [r3, #0]

        memcpy(&robot.vL, &robot.RxData[5], sizeof(float));
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017c4:	f8d3 3011 	ldr.w	r3, [r3, #17]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017cc:	605a      	str	r2, [r3, #4]
        memcpy(&robot.vR, &robot.RxData[9], sizeof(float));
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017d0:	f8d3 3015 	ldr.w	r3, [r3, #21]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017d8:	609a      	str	r2, [r3, #8]

        if (robot.id == ROBOT_ID) {
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d114      	bne.n	800180c <VSSS_ProcessReceivedData+0x74>
            last_rx_time = HAL_GetTick();
 80017e2:	f001 fca3 	bl	800312c <HAL_GetTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <VSSS_ProcessReceivedData+0x80>)
 80017ea:	6013      	str	r3, [r2, #0]
            Kinematics_SetSpeeds(robot.vL, robot.vR);
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <VSSS_ProcessReceivedData+0x7c>)
 80017f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80017f8:	eef0 0a47 	vmov.f32	s1, s14
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	f000 fa06 	bl	8001c10 <Kinematics_SetSpeeds>
            VSSS_BlinkLED();
 8001804:	f000 f80a 	bl	800181c <VSSS_BlinkLED>
            VSSS_DebugOutput();
 8001808:	f000 f830 	bl	800186c <VSSS_DebugOutput>
        }
    }
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000020c 	.word	0x2000020c
 8001818:	20000238 	.word	0x20000238

0800181c <VSSS_BlinkLED>:

void VSSS_BlinkLED(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() - last_blink_time) >= 200) {
 8001820:	f001 fc84 	bl	800312c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <VSSS_BlinkLED+0x44>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2bc7      	cmp	r3, #199	@ 0xc7
 800182e:	d915      	bls.n	800185c <VSSS_BlinkLED+0x40>
        led_state = !led_state;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <VSSS_BlinkLED+0x48>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <VSSS_BlinkLED+0x48>)
 8001842:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <VSSS_BlinkLED+0x48>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	2140      	movs	r1, #64	@ 0x40
 800184c:	4806      	ldr	r0, [pc, #24]	@ (8001868 <VSSS_BlinkLED+0x4c>)
 800184e:	f001 ff01 	bl	8003654 <HAL_GPIO_WritePin>
        last_blink_time = HAL_GetTick();
 8001852:	f001 fc6b 	bl	800312c <HAL_GetTick>
 8001856:	4603      	mov	r3, r0
 8001858:	4a01      	ldr	r2, [pc, #4]	@ (8001860 <VSSS_BlinkLED+0x44>)
 800185a:	6013      	str	r3, [r2, #0]
    }
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000023c 	.word	0x2000023c
 8001864:	20000240 	.word	0x20000240
 8001868:	48000800 	.word	0x48000800

0800186c <VSSS_DebugOutput>:

void VSSS_DebugOutput(void) {
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	b095      	sub	sp, #84	@ 0x54
 8001870:	af04      	add	r7, sp, #16
    char buffer[64];
    snprintf(buffer, sizeof(buffer), "ID: %d, VL: %.2f, VR: %.2f\r\n", robot.id, robot.vL, robot.vR);
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <VSSS_DebugOutput+0x5c>)
 8001874:	681e      	ldr	r6, [r3, #0]
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <VSSS_DebugOutput+0x5c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe8c 	bl	8000598 <__aeabi_f2d>
 8001880:	4604      	mov	r4, r0
 8001882:	460d      	mov	r5, r1
 8001884:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <VSSS_DebugOutput+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe85 	bl	8000598 <__aeabi_f2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4638      	mov	r0, r7
 8001894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001898:	e9cd 4500 	strd	r4, r5, [sp]
 800189c:	4633      	mov	r3, r6
 800189e:	4a0b      	ldr	r2, [pc, #44]	@ (80018cc <VSSS_DebugOutput+0x60>)
 80018a0:	2140      	movs	r1, #64	@ 0x40
 80018a2:	f006 fe43 	bl	800852c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 80018a6:	463b      	mov	r3, r7
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fd09 	bl	80002c0 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4639      	mov	r1, r7
 80018b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <VSSS_DebugOutput+0x64>)
 80018ba:	f005 f895 	bl	80069e8 <HAL_UART_Transmit>
}
 80018be:	bf00      	nop
 80018c0:	3744      	adds	r7, #68	@ 0x44
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000020c 	.word	0x2000020c
 80018cc:	0800be38 	.word	0x0800be38
 80018d0:	20000570 	.word	0x20000570

080018d4 <Encoder_Init>:

Encoder left_encoder;
Encoder right_encoder;

void Encoder_Init(Encoder *encoder, TIM_HandleTypeDef *htim)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	601a      	str	r2, [r3, #0]
    encoder->last_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	809a      	strh	r2, [r3, #4]
    encoder->last_time = HAL_GetTick();
 80018f0:	f001 fc1c 	bl	800312c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	609a      	str	r2, [r3, #8]
    encoder->rpm = 0.0f;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <Encoder_Calculate_RPM>:

void Encoder_Calculate_RPM(Encoder *encoder)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

    uint32_t current_time = HAL_GetTick();
 8001914:	f001 fc0a 	bl	800312c <HAL_GetTick>
 8001918:	61b8      	str	r0, [r7, #24]
    uint32_t delta_time = current_time - encoder->last_time;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	617b      	str	r3, [r7, #20]


    if (delta_time == 0) {
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d047      	beq.n	80019ba <Encoder_Calculate_RPM+0xae>
        return;
    }

    int16_t current_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	827b      	strh	r3, [r7, #18]
    int16_t delta_encoder = current_encoder_value - encoder->last_encoder_value;
 8001934:	8a7a      	ldrh	r2, [r7, #18]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800193c:	b29b      	uxth	r3, r3
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	83fb      	strh	r3, [r7, #30]

    if (delta_encoder > (ENCODER_PULSES_PER_REV / 2)) {
 8001944:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001948:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800194c:	4293      	cmp	r3, r2
 800194e:	dd06      	ble.n	800195e <Encoder_Calculate_RPM+0x52>
        delta_encoder -= ENCODER_PULSES_PER_REV;
 8001950:	8bfb      	ldrh	r3, [r7, #30]
 8001952:	f5a3 53ce 	sub.w	r3, r3, #6592	@ 0x19c0
 8001956:	3b08      	subs	r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	83fb      	strh	r3, [r7, #30]
 800195c:	e00a      	b.n	8001974 <Encoder_Calculate_RPM+0x68>
    }
    else if (delta_encoder < -(ENCODER_PULSES_PER_REV / 2)) {
 800195e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001962:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <Encoder_Calculate_RPM+0xb8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	da05      	bge.n	8001974 <Encoder_Calculate_RPM+0x68>
        delta_encoder += ENCODER_PULSES_PER_REV;
 8001968:	8bfb      	ldrh	r3, [r7, #30]
 800196a:	f503 53ce 	add.w	r3, r3, #6592	@ 0x19c0
 800196e:	3308      	adds	r3, #8
 8001970:	b29b      	uxth	r3, r3
 8001972:	83fb      	strh	r3, [r7, #30]
    }

    float dt_min = (float)delta_time / 60000.0f;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80019c8 <Encoder_Calculate_RPM+0xbc>
 8001982:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001986:	edc7 7a03 	vstr	s15, [r7, #12]

    encoder->rpm = ((float)delta_encoder / (float)ENCODER_PULSES_PER_REV) / dt_min;
 800198a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80019cc <Encoder_Calculate_RPM+0xc0>
 800199a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800199e:	ed97 7a03 	vldr	s14, [r7, #12]
 80019a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edc3 7a03 	vstr	s15, [r3, #12]


    encoder->last_encoder_value = current_encoder_value;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	8a7a      	ldrh	r2, [r7, #18]
 80019b0:	809a      	strh	r2, [r3, #4]
    encoder->last_time = current_time;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e000      	b.n	80019bc <Encoder_Calculate_RPM+0xb0>
        return;
 80019ba:	bf00      	nop
}
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	fffff31c 	.word	0xfffff31c
 80019c8:	476a6000 	.word	0x476a6000
 80019cc:	45ce4000 	.word	0x45ce4000

080019d0 <Encoder_Update>:

void Encoder_Update(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    Encoder_Calculate_RPM(&left_encoder);
 80019d4:	4803      	ldr	r0, [pc, #12]	@ (80019e4 <Encoder_Update+0x14>)
 80019d6:	f7ff ff99 	bl	800190c <Encoder_Calculate_RPM>
    Encoder_Calculate_RPM(&right_encoder);
 80019da:	4803      	ldr	r0, [pc, #12]	@ (80019e8 <Encoder_Update+0x18>)
 80019dc:	f7ff ff96 	bl	800190c <Encoder_Calculate_RPM>
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000244 	.word	0x20000244
 80019e8:	20000254 	.word	0x20000254
 80019ec:	00000000 	.word	0x00000000

080019f0 <Kinematics_Init>:

float accel[3], gyro[3];
char debug_imu[150];


void Kinematics_Init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af04      	add	r7, sp, #16
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80019f6:	213c      	movs	r1, #60	@ 0x3c
 80019f8:	4843      	ldr	r0, [pc, #268]	@ (8001b08 <Kinematics_Init+0x118>)
 80019fa:	f003 ffa7 	bl	800594c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80019fe:	213c      	movs	r1, #60	@ 0x3c
 8001a00:	4842      	ldr	r0, [pc, #264]	@ (8001b0c <Kinematics_Init+0x11c>)
 8001a02:	f003 ffa3 	bl	800594c <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a06:	2100      	movs	r1, #0
 8001a08:	4841      	ldr	r0, [pc, #260]	@ (8001b10 <Kinematics_Init+0x120>)
 8001a0a:	f003 fdf9 	bl	8005600 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4840      	ldr	r0, [pc, #256]	@ (8001b14 <Kinematics_Init+0x124>)
 8001a12:	f003 fdf5 	bl	8005600 <HAL_TIM_PWM_Start>

    Encoder_Init(&left_encoder, &htim3);
 8001a16:	493c      	ldr	r1, [pc, #240]	@ (8001b08 <Kinematics_Init+0x118>)
 8001a18:	483f      	ldr	r0, [pc, #252]	@ (8001b18 <Kinematics_Init+0x128>)
 8001a1a:	f7ff ff5b 	bl	80018d4 <Encoder_Init>
    Encoder_Init(&right_encoder, &htim4);
 8001a1e:	493b      	ldr	r1, [pc, #236]	@ (8001b0c <Kinematics_Init+0x11c>)
 8001a20:	483e      	ldr	r0, [pc, #248]	@ (8001b1c <Kinematics_Init+0x12c>)
 8001a22:	f7ff ff57 	bl	80018d4 <Encoder_Init>

    Motor_Init(&motorLeft, &htim2, TIM_CHANNEL_1, INA1_GPIO_Port, INA1_Pin, INA2_GPIO_Port, INA2_Pin);
 8001a26:	2304      	movs	r3, #4
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	2302      	movs	r3, #2
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4936      	ldr	r1, [pc, #216]	@ (8001b14 <Kinematics_Init+0x124>)
 8001a3c:	4838      	ldr	r0, [pc, #224]	@ (8001b20 <Kinematics_Init+0x130>)
 8001a3e:	f000 fd29 	bl	8002494 <Motor_Init>
    Motor_Init(&motorRight, &htim1, TIM_CHANNEL_1, INB1_GPIO_Port, INB1_Pin, INB2_GPIO_Port, INB2_Pin);
 8001a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a58:	2200      	movs	r2, #0
 8001a5a:	492d      	ldr	r1, [pc, #180]	@ (8001b10 <Kinematics_Init+0x120>)
 8001a5c:	4831      	ldr	r0, [pc, #196]	@ (8001b24 <Kinematics_Init+0x134>)
 8001a5e:	f000 fd19 	bl	8002494 <Motor_Init>

    PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8001a62:	2300      	movs	r3, #0
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 8001ae0 <Kinematics_Init+0xf0>
 8001a6a:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001ae8 <Kinematics_Init+0xf8>
 8001a6e:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8001af0 <Kinematics_Init+0x100>
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <Kinematics_Init+0x138>)
 8001a74:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <Kinematics_Init+0x13c>)
 8001a76:	492e      	ldr	r1, [pc, #184]	@ (8001b30 <Kinematics_Init+0x140>)
 8001a78:	482e      	ldr	r0, [pc, #184]	@ (8001b34 <Kinematics_Init+0x144>)
 8001a7a:	f7ff fb81 	bl	8001180 <PID2>
    PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8001ae0 <Kinematics_Init+0xf0>
 8001a86:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001ae8 <Kinematics_Init+0xf8>
 8001a8a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8001af0 <Kinematics_Init+0x100>
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b38 <Kinematics_Init+0x148>)
 8001a90:	4a2a      	ldr	r2, [pc, #168]	@ (8001b3c <Kinematics_Init+0x14c>)
 8001a92:	492b      	ldr	r1, [pc, #172]	@ (8001b40 <Kinematics_Init+0x150>)
 8001a94:	482b      	ldr	r0, [pc, #172]	@ (8001b44 <Kinematics_Init+0x154>)
 8001a96:	f7ff fb73 	bl	8001180 <PID2>

    PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8001a9a:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001af8 <Kinematics_Init+0x108>
 8001a9e:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001b00 <Kinematics_Init+0x110>
 8001aa2:	4824      	ldr	r0, [pc, #144]	@ (8001b34 <Kinematics_Init+0x144>)
 8001aa4:	f7ff fc96 	bl	80013d4 <PID_SetOutputLimits>
    PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 8001aa8:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8001af8 <Kinematics_Init+0x108>
 8001aac:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8001b00 <Kinematics_Init+0x110>
 8001ab0:	4824      	ldr	r0, [pc, #144]	@ (8001b44 <Kinematics_Init+0x154>)
 8001ab2:	f7ff fc8f 	bl	80013d4 <PID_SetOutputLimits>

    PID_SetSampleTime(&pidLeft, 1);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	481e      	ldr	r0, [pc, #120]	@ (8001b34 <Kinematics_Init+0x144>)
 8001aba:	f7ff fde1 	bl	8001680 <PID_SetSampleTime>
    PID_SetSampleTime(&pidRight, 1);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4820      	ldr	r0, [pc, #128]	@ (8001b44 <Kinematics_Init+0x154>)
 8001ac2:	f7ff fddd 	bl	8001680 <PID_SetSampleTime>

    PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	481a      	ldr	r0, [pc, #104]	@ (8001b34 <Kinematics_Init+0x144>)
 8001aca:	f7ff fc65 	bl	8001398 <PID_SetMode>
    PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	481c      	ldr	r0, [pc, #112]	@ (8001b44 <Kinematics_Init+0x154>)
 8001ad2:	f7ff fc61 	bl	8001398 <PID_SetMode>
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	f3af 8000 	nop.w
 8001ae0:	bce4217d 	.word	0xbce4217d
 8001ae4:	3f538fff 	.word	0x3f538fff
 8001ae8:	cccccccd 	.word	0xcccccccd
 8001aec:	407864cc 	.word	0x407864cc
 8001af0:	ba5e353f 	.word	0xba5e353f
 8001af4:	3ff60c49 	.word	0x3ff60c49
 8001af8:	00000000 	.word	0x00000000
 8001afc:	409a8c00 	.word	0x409a8c00
 8001b00:	00000000 	.word	0x00000000
 8001b04:	c09a8c00 	.word	0xc09a8c00
 8001b08:	200004d8 	.word	0x200004d8
 8001b0c:	20000524 	.word	0x20000524
 8001b10:	20000440 	.word	0x20000440
 8001b14:	2000048c 	.word	0x2000048c
 8001b18:	20000244 	.word	0x20000244
 8001b1c:	20000254 	.word	0x20000254
 8001b20:	20000604 	.word	0x20000604
 8001b24:	2000061c 	.word	0x2000061c
 8001b28:	20000268 	.word	0x20000268
 8001b2c:	20000278 	.word	0x20000278
 8001b30:	20000288 	.word	0x20000288
 8001b34:	20000298 	.word	0x20000298
 8001b38:	20000270 	.word	0x20000270
 8001b3c:	20000280 	.word	0x20000280
 8001b40:	20000290 	.word	0x20000290
 8001b44:	20000308 	.word	0x20000308

08001b48 <LinearToRPM>:

/**
 * @brief Converte velocidade linear para RPM.
 */
float LinearToRPM(float v) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	ed87 0a01 	vstr	s0, [r7, #4]
	double rpm_motor = (v * 60.0f) / (2 * M_PI * WHEEL_RADIUS);
 8001b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b56:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001b98 <LinearToRPM+0x50>
 8001b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5e:	ee17 0a90 	vmov	r0, s15
 8001b62:	f7fe fd19 	bl	8000598 <__aeabi_f2d>
 8001b66:	a30a      	add	r3, pc, #40	@ (adr r3, 8001b90 <LinearToRPM+0x48>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fe96 	bl	800089c <__aeabi_ddiv>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return rpm_motor;
 8001b78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b7c:	f7ff f85c 	bl	8000c38 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	ee07 3a90 	vmov	s15, r3
}
 8001b86:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	c4488cdf 	.word	0xc4488cdf
 8001b94:	3fc7b9ad 	.word	0x3fc7b9ad
 8001b98:	42700000 	.word	0x42700000
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <RPMToLinear>:

float RPMToLinear(double RPM){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0b00 	vstr	d0, [r7]
	float linear_velocity = (RPM * 2 * M_PI * WHEEL_RADIUS);
 8001baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	f7fe fb93 	bl	80002dc <__adddf3>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	a310      	add	r3, pc, #64	@ (adr r3, 8001c00 <RPMToLinear+0x60>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd40 	bl	8000648 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	a30d      	add	r3, pc, #52	@ (adr r3, 8001c08 <RPMToLinear+0x68>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fd37 	bl	8000648 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f829 	bl	8000c38 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	60fb      	str	r3, [r7, #12]
    return linear_velocity;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	ee07 3a90 	vmov	s15, r3
}
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w
 8001c00:	54442d18 	.word	0x54442d18
 8001c04:	400921fb 	.word	0x400921fb
 8001c08:	7ced9168 	.word	0x7ced9168
 8001c0c:	3f9e353f 	.word	0x3f9e353f

08001c10 <Kinematics_SetSpeeds>:

/**
 * @brief Define as velocidades do robô com base em velocidades lineares (m/s).
 */
void Kinematics_SetSpeeds(float vL, float vR) {
 8001c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c14:	b087      	sub	sp, #28
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c1c:	edc7 0a00 	vstr	s1, [r7]
    Encoder_Update();
 8001c20:	f7ff fed6 	bl	80019d0 <Encoder_Update>

    float vL_real = RPMToLinear(left_encoder.rpm);
 8001c24:	4b4c      	ldr	r3, [pc, #304]	@ (8001d58 <Kinematics_SetSpeeds+0x148>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fcb5 	bl	8000598 <__aeabi_f2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	ec43 2b10 	vmov	d0, r2, r3
 8001c36:	f7ff ffb3 	bl	8001ba0 <RPMToLinear>
 8001c3a:	ed87 0a05 	vstr	s0, [r7, #20]
    float vR_real = RPMToLinear(right_encoder.rpm);
 8001c3e:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <Kinematics_SetSpeeds+0x14c>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fca8 	bl	8000598 <__aeabi_f2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	ec43 2b10 	vmov	d0, r2, r3
 8001c50:	f7ff ffa6 	bl	8001ba0 <RPMToLinear>
 8001c54:	ed87 0a04 	vstr	s0, [r7, #16]

    float target_rpm_left = LinearToRPM(vL);
 8001c58:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c5c:	f7ff ff74 	bl	8001b48 <LinearToRPM>
 8001c60:	ed87 0a03 	vstr	s0, [r7, #12]
    float target_rpm_right = LinearToRPM(vR);
 8001c64:	ed97 0a00 	vldr	s0, [r7]
 8001c68:	f7ff ff6e 	bl	8001b48 <LinearToRPM>
 8001c6c:	ed87 0a02 	vstr	s0, [r7, #8]

    setpoint_left_rpm  = target_rpm_left;
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7fe fc91 	bl	8000598 <__aeabi_f2d>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4939      	ldr	r1, [pc, #228]	@ (8001d60 <Kinematics_SetSpeeds+0x150>)
 8001c7c:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 8001c80:	68b8      	ldr	r0, [r7, #8]
 8001c82:	f7fe fc89 	bl	8000598 <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4936      	ldr	r1, [pc, #216]	@ (8001d64 <Kinematics_SetSpeeds+0x154>)
 8001c8c:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_encoder.rpm;
 8001c90:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <Kinematics_SetSpeeds+0x148>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc7f 	bl	8000598 <__aeabi_f2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4932      	ldr	r1, [pc, #200]	@ (8001d68 <Kinematics_SetSpeeds+0x158>)
 8001ca0:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_encoder.rpm;
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d5c <Kinematics_SetSpeeds+0x14c>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc75 	bl	8000598 <__aeabi_f2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	492e      	ldr	r1, [pc, #184]	@ (8001d6c <Kinematics_SetSpeeds+0x15c>)
 8001cb4:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 8001cb8:	482d      	ldr	r0, [pc, #180]	@ (8001d70 <Kinematics_SetSpeeds+0x160>)
 8001cba:	f7ff fa83 	bl	80011c4 <PID_Compute>
    PID_Compute(&pidRight);
 8001cbe:	482d      	ldr	r0, [pc, #180]	@ (8001d74 <Kinematics_SetSpeeds+0x164>)
 8001cc0:	f7ff fa80 	bl	80011c4 <PID_Compute>

    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <Kinematics_SetSpeeds+0x168>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	4690      	mov	r8, r2
 8001ccc:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe ff90 	bl	8000bf8 <__aeabi_d2uiz>
 8001cd8:	4680      	mov	r8, r0
 8001cda:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <Kinematics_SetSpeeds+0x168>)
 8001cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	461e      	mov	r6, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	f7fe ff32 	bl	8000b54 <__aeabi_dcmpge>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <Kinematics_SetSpeeds+0xea>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	461e      	mov	r6, r3
 8001cfa:	b2f3      	uxtb	r3, r6
 8001cfc:	f083 0301 	eor.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	b2de      	uxtb	r6, r3
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <Kinematics_SetSpeeds+0x16c>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe ff70 	bl	8000bf8 <__aeabi_d2uiz>
 8001d18:	4604      	mov	r4, r0
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 8001d1a:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <Kinematics_SetSpeeds+0x16c>)
 8001d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d20:	2301      	movs	r3, #1
 8001d22:	461d      	mov	r5, r3
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	f7fe ff12 	bl	8000b54 <__aeabi_dcmpge>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <Kinematics_SetSpeeds+0x12a>
 8001d36:	2300      	movs	r3, #0
 8001d38:	461d      	mov	r5, r3
 8001d3a:	b2eb      	uxtb	r3, r5
 8001d3c:	f083 0301 	eor.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4622      	mov	r2, r4
 8001d46:	4631      	mov	r1, r6
 8001d48:	4640      	mov	r0, r8
 8001d4a:	f000 fbc9 	bl	80024e0 <Motor_Control>


}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d58:	20000244 	.word	0x20000244
 8001d5c:	20000254 	.word	0x20000254
 8001d60:	20000268 	.word	0x20000268
 8001d64:	20000270 	.word	0x20000270
 8001d68:	20000288 	.word	0x20000288
 8001d6c:	20000290 	.word	0x20000290
 8001d70:	20000298 	.word	0x20000298
 8001d74:	20000308 	.word	0x20000308
 8001d78:	20000278 	.word	0x20000278
 8001d7c:	20000280 	.word	0x20000280

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d84:	f001 f96d 	bl	8003062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d88:	f000 f815 	bl	8001db6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8c:	f000 faf8 	bl	8002380 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001d90:	f000 f8d6 	bl	8001f40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d94:	f000 f984 	bl	80020a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d98:	f000 f9f8 	bl	800218c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d9c:	f000 fa4c 	bl	8002238 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001da0:	f000 f852 	bl	8001e48 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001da4:	f000 fa9e 	bl	80022e4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001da8:	f000 f88c 	bl	8001ec4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  VSSS_Init();
 8001dac:	f7ff fca4 	bl	80016f8 <VSSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VSSS_Run();
 8001db0:	f7ff fcc6 	bl	8001740 <VSSS_Run>
 8001db4:	e7fc      	b.n	8001db0 <main+0x30>

08001db6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b094      	sub	sp, #80	@ 0x50
 8001dba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	2238      	movs	r2, #56	@ 0x38
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f006 fce1 	bl	800878c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f001 fc53 	bl	8003684 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001de6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de8:	2302      	movs	r3, #2
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dec:	2303      	movs	r3, #3
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001df4:	2355      	movs	r3, #85	@ 0x55
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e00:	2302      	movs	r3, #2
 8001e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e04:	f107 0318 	add.w	r3, r7, #24
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fcef 	bl	80037ec <HAL_RCC_OscConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001e14:	f000 fb38 	bl	8002488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e18:	230f      	movs	r3, #15
 8001e1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2104      	movs	r1, #4
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 ffed 	bl	8003e10 <HAL_RCC_ClockConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001e3c:	f000 fb24 	bl	8002488 <Error_Handler>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3750      	adds	r7, #80	@ 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <MX_SPI1_Init+0x78>)
 8001e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e62:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e68:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e7e:	2220      	movs	r2, #32
 8001e80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e96:	2207      	movs	r2, #7
 8001e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_SPI1_Init+0x74>)
 8001ea8:	f002 fbbe 	bl	8004628 <HAL_SPI_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001eb2:	f000 fae9 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000378 	.word	0x20000378
 8001ec0:	40013000 	.word	0x40013000

08001ec4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001eca:	4a1c      	ldr	r2, [pc, #112]	@ (8001f3c <MX_SPI2_Init+0x78>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001ed0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001ede:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001ee2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001eea:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001efa:	2228      	movs	r2, #40	@ 0x28
 8001efc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001f12:	2207      	movs	r2, #7
 8001f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_SPI2_Init+0x74>)
 8001f24:	f002 fb80 	bl	8004628 <HAL_SPI_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f2e:	f000 faab 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200003dc 	.word	0x200003dc
 8001f3c:	40003800 	.word	0x40003800

08001f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b09c      	sub	sp, #112	@ 0x70
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	615a      	str	r2, [r3, #20]
 8001f72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2234      	movs	r2, #52	@ 0x34
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f006 fc06 	bl	800878c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f80:	4b45      	ldr	r3, [pc, #276]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001f82:	4a46      	ldr	r2, [pc, #280]	@ (800209c <MX_TIM1_Init+0x15c>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f86:	4b44      	ldr	r3, [pc, #272]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b42      	ldr	r3, [pc, #264]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8001f92:	4b41      	ldr	r3, [pc, #260]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001f94:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001f98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fac:	483a      	ldr	r0, [pc, #232]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001fae:	f003 fa6f 	bl	8005490 <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001fb8:	f000 fa66 	bl	8002488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fc2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4833      	ldr	r0, [pc, #204]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001fca:	f003 fe61 	bl	8005c90 <HAL_TIM_ConfigClockSource>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fd4:	f000 fa58 	bl	8002488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fd8:	482f      	ldr	r0, [pc, #188]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001fda:	f003 fab0 	bl	800553e <HAL_TIM_PWM_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fe4:	f000 fa50 	bl	8002488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ff4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4827      	ldr	r0, [pc, #156]	@ (8002098 <MX_TIM1_Init+0x158>)
 8001ffc:	f004 fb96 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002006:	f000 fa3f 	bl	8002488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200a:	2360      	movs	r3, #96	@ 0x60
 800200c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002012:	2300      	movs	r3, #0
 8002014:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002016:	2300      	movs	r3, #0
 8002018:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002026:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800202a:	2200      	movs	r2, #0
 800202c:	4619      	mov	r1, r3
 800202e:	481a      	ldr	r0, [pc, #104]	@ (8002098 <MX_TIM1_Init+0x158>)
 8002030:	f003 fd1a 	bl	8005a68 <HAL_TIM_PWM_ConfigChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800203a:	f000 fa25 	bl	8002488 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002052:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800206e:	2300      	movs	r3, #0
 8002070:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4807      	ldr	r0, [pc, #28]	@ (8002098 <MX_TIM1_Init+0x158>)
 800207c:	f004 fbd8 	bl	8006830 <HAL_TIMEx_ConfigBreakDeadTime>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8002086:	f000 f9ff 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800208a:	4803      	ldr	r0, [pc, #12]	@ (8002098 <MX_TIM1_Init+0x158>)
 800208c:	f000 fde8 	bl	8002c60 <HAL_TIM_MspPostInit>

}
 8002090:	bf00      	nop
 8002092:	3770      	adds	r7, #112	@ 0x70
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000440 	.word	0x20000440
 800209c:	40012c00 	.word	0x40012c00

080020a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	@ 0x38
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c0:	463b      	mov	r3, r7
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	615a      	str	r2, [r3, #20]
 80020d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <MX_TIM2_Init+0xe8>)
 80020d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020da:	4b2b      	ldr	r3, [pc, #172]	@ (8002188 <MX_TIM2_Init+0xe8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <MX_TIM2_Init+0xe8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 80020e6:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <MX_TIM2_Init+0xe8>)
 80020e8:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80020ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b26      	ldr	r3, [pc, #152]	@ (8002188 <MX_TIM2_Init+0xe8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f4:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <MX_TIM2_Init+0xe8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020fa:	4823      	ldr	r0, [pc, #140]	@ (8002188 <MX_TIM2_Init+0xe8>)
 80020fc:	f003 f9c8 	bl	8005490 <HAL_TIM_Base_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002106:	f000 f9bf 	bl	8002488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800210a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800210e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002110:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002114:	4619      	mov	r1, r3
 8002116:	481c      	ldr	r0, [pc, #112]	@ (8002188 <MX_TIM2_Init+0xe8>)
 8002118:	f003 fdba 	bl	8005c90 <HAL_TIM_ConfigClockSource>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002122:	f000 f9b1 	bl	8002488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002126:	4818      	ldr	r0, [pc, #96]	@ (8002188 <MX_TIM2_Init+0xe8>)
 8002128:	f003 fa09 	bl	800553e <HAL_TIM_PWM_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002132:	f000 f9a9 	bl	8002488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	4810      	ldr	r0, [pc, #64]	@ (8002188 <MX_TIM2_Init+0xe8>)
 8002146:	f004 faf1 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002150:	f000 f99a 	bl	8002488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002154:	2360      	movs	r3, #96	@ 0x60
 8002156:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	4807      	ldr	r0, [pc, #28]	@ (8002188 <MX_TIM2_Init+0xe8>)
 800216c:	f003 fc7c 	bl	8005a68 <HAL_TIM_PWM_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002176:	f000 f987 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800217a:	4803      	ldr	r0, [pc, #12]	@ (8002188 <MX_TIM2_Init+0xe8>)
 800217c:	f000 fd70 	bl	8002c60 <HAL_TIM_MspPostInit>

}
 8002180:	bf00      	nop
 8002182:	3738      	adds	r7, #56	@ 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	2000048c 	.word	0x2000048c

0800218c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	@ 0x30
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	2224      	movs	r2, #36	@ 0x24
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f006 faf6 	bl	800878c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021aa:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021ac:	4a21      	ldr	r2, [pc, #132]	@ (8002234 <MX_TIM3_Init+0xa8>)
 80021ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021d0:	2303      	movs	r3, #3
 80021d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021d8:	2301      	movs	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021dc:	2300      	movs	r3, #0
 80021de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80021e0:	2308      	movs	r3, #8
 80021e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021e8:	2301      	movs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	4619      	mov	r1, r3
 80021fa:	480d      	ldr	r0, [pc, #52]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021fc:	f003 fb00 	bl	8005800 <HAL_TIM_Encoder_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002206:	f000 f93f 	bl	8002488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002212:	463b      	mov	r3, r7
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	@ (8002230 <MX_TIM3_Init+0xa4>)
 8002218:	f004 fa88 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002222:	f000 f931 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	3730      	adds	r7, #48	@ 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200004d8 	.word	0x200004d8
 8002234:	40000400 	.word	0x40000400

08002238 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	@ 0x30
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	2224      	movs	r2, #36	@ 0x24
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f006 faa0 	bl	800878c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224c:	463b      	mov	r3, r7
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <MX_TIM4_Init+0xa4>)
 8002258:	4a21      	ldr	r2, [pc, #132]	@ (80022e0 <MX_TIM4_Init+0xa8>)
 800225a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800225c:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <MX_TIM4_Init+0xa4>)
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b1e      	ldr	r3, [pc, #120]	@ (80022dc <MX_TIM4_Init+0xa4>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002268:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <MX_TIM4_Init+0xa4>)
 800226a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800226e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_TIM4_Init+0xa4>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <MX_TIM4_Init+0xa4>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800227c:	2303      	movs	r3, #3
 800227e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002284:	2301      	movs	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 800228c:	2308      	movs	r3, #8
 800228e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002294:	2301      	movs	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	4619      	mov	r1, r3
 80022a6:	480d      	ldr	r0, [pc, #52]	@ (80022dc <MX_TIM4_Init+0xa4>)
 80022a8:	f003 faaa 	bl	8005800 <HAL_TIM_Encoder_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80022b2:	f000 f8e9 	bl	8002488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	@ (80022dc <MX_TIM4_Init+0xa4>)
 80022c4:	f004 fa32 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80022ce:	f000 f8db 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3730      	adds	r7, #48	@ 0x30
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000524 	.word	0x20000524
 80022e0:	40000800 	.word	0x40000800

080022e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022e8:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 80022ea:	4a23      	ldr	r2, [pc, #140]	@ (8002378 <MX_USART1_UART_Init+0x94>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80022ee:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 80022f0:	4a22      	ldr	r2, [pc, #136]	@ (800237c <MX_USART1_UART_Init+0x98>)
 80022f2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002300:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 8002302:	2200      	movs	r2, #0
 8002304:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 8002308:	220c      	movs	r2, #12
 800230a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002318:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 8002326:	2200      	movs	r2, #0
 8002328:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800232a:	4812      	ldr	r0, [pc, #72]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 800232c:	f004 fb0c 	bl	8006948 <HAL_UART_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8002336:	f000 f8a7 	bl	8002488 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800233a:	2100      	movs	r1, #0
 800233c:	480d      	ldr	r0, [pc, #52]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 800233e:	f005 f905 	bl	800754c <HAL_UARTEx_SetTxFifoThreshold>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8002348:	f000 f89e 	bl	8002488 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800234c:	2100      	movs	r1, #0
 800234e:	4809      	ldr	r0, [pc, #36]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 8002350:	f005 f93a 	bl	80075c8 <HAL_UARTEx_SetRxFifoThreshold>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800235a:	f000 f895 	bl	8002488 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	@ (8002374 <MX_USART1_UART_Init+0x90>)
 8002360:	f005 f8bb 	bl	80074da <HAL_UARTEx_DisableFifoMode>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800236a:	f000 f88d 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000570 	.word	0x20000570
 8002378:	40013800 	.word	0x40013800
 800237c:	000f4240 	.word	0x000f4240

08002380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002396:	4b39      	ldr	r3, [pc, #228]	@ (800247c <MX_GPIO_Init+0xfc>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239a:	4a38      	ldr	r2, [pc, #224]	@ (800247c <MX_GPIO_Init+0xfc>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a2:	4b36      	ldr	r3, [pc, #216]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	4b33      	ldr	r3, [pc, #204]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	4a32      	ldr	r2, [pc, #200]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	4a26      	ldr	r2, [pc, #152]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ea:	4b24      	ldr	r3, [pc, #144]	@ (800247c <MX_GPIO_Init+0xfc>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	f240 6106 	movw	r1, #1542	@ 0x606
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002400:	f001 f928 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin|CS_Pin, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f241 0103 	movw	r1, #4099	@ 0x1003
 800240a:	481d      	ldr	r0, [pc, #116]	@ (8002480 <MX_GPIO_Init+0x100>)
 800240c:	f001 f922 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	2140      	movs	r1, #64	@ 0x40
 8002414:	481b      	ldr	r0, [pc, #108]	@ (8002484 <MX_GPIO_Init+0x104>)
 8002416:	f001 f91d 	bl	8003654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 800241a:	f240 6306 	movw	r3, #1542	@ 0x606
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002436:	f000 ff8b 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin|CS_Pin;
 800243a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800243e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	480b      	ldr	r0, [pc, #44]	@ (8002480 <MX_GPIO_Init+0x100>)
 8002454:	f000 ff7c 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002458:	2340      	movs	r3, #64	@ 0x40
 800245a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_GPIO_Init+0x104>)
 8002470:	f000 ff6e 	bl	8003350 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	@ 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	48000400 	.word	0x48000400
 8002484:	48000800 	.word	0x48000800

08002488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <Error_Handler+0x8>

08002494 <Motor_Init>:
Motor_t motorLeft;
Motor_t motorRight;

void Motor_Init(Motor_t *motor, TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel,
                GPIO_TypeDef *gpio_port1, uint16_t gpio_pin1,
                GPIO_TypeDef *gpio_port2, uint16_t gpio_pin2) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
    motor->pwm_timer = pwm_timer;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	601a      	str	r2, [r3, #0]
    motor->pwm_channel = pwm_channel;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	605a      	str	r2, [r3, #4]
    motor->gpio_port1 = gpio_port1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	609a      	str	r2, [r3, #8]
    motor->gpio_pin1 = gpio_pin1;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8b3a      	ldrh	r2, [r7, #24]
 80024b8:	819a      	strh	r2, [r3, #12]
    motor->gpio_port2 = gpio_port2;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	611a      	str	r2, [r3, #16]
    motor->gpio_pin2 = gpio_pin2;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8c3a      	ldrh	r2, [r7, #32]
 80024c4:	829a      	strh	r2, [r3, #20]

    HAL_TIM_PWM_Start(motor->pwm_timer, motor->pwm_channel);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4619      	mov	r1, r3
 80024d0:	4610      	mov	r0, r2
 80024d2:	f003 f895 	bl	8005600 <HAL_TIM_PWM_Start>
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <Motor_Control>:

void Motor_Control(uint32_t pwm_left, uint8_t dir_left, uint32_t pwm_right, uint8_t dir_right) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	72fb      	strb	r3, [r7, #11]
 80024f0:	4613      	mov	r3, r2
 80024f2:	72bb      	strb	r3, [r7, #10]
    // --- Motor Esquerdo ---
    if (pwm_left == 0) {
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <Motor_Control+0x34>
        // Short Brake: IN1 = HIGH, IN2 = HIGH
        HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	2102      	movs	r1, #2
 80024fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002502:	f001 f8a7 	bl	8003654 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	2104      	movs	r1, #4
 800250a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250e:	f001 f8a1 	bl	8003654 <HAL_GPIO_WritePin>
 8002512:	e012      	b.n	800253a <Motor_Control+0x5a>
    } else {
        HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 8002514:	7afb      	ldrb	r3, [r7, #11]
 8002516:	461a      	mov	r2, r3
 8002518:	2102      	movs	r1, #2
 800251a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800251e:	f001 f899 	bl	8003654 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 8002522:	7afb      	ldrb	r3, [r7, #11]
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	2104      	movs	r1, #4
 8002532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002536:	f001 f88d 	bl	8003654 <HAL_GPIO_WritePin>
    }

    // --- Motor Direito ---
    if (pwm_right == 0) {
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10e      	bne.n	800255e <Motor_Control+0x7e>
        // Short Brake: IN1 = HIGH, IN2 = HIGH
        HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, GPIO_PIN_SET);
 8002540:	2201      	movs	r2, #1
 8002542:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254a:	f001 f883 	bl	8003654 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, GPIO_PIN_SET);
 800254e:	2201      	movs	r2, #1
 8002550:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002558:	f001 f87c 	bl	8003654 <HAL_GPIO_WritePin>
 800255c:	e014      	b.n	8002588 <Motor_Control+0xa8>
    } else {
        HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, (GPIO_PinState)(dir_right));
 800255e:	7abb      	ldrb	r3, [r7, #10]
 8002560:	461a      	mov	r2, r3
 8002562:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002566:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800256a:	f001 f873 	bl	8003654 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 800256e:	7abb      	ldrb	r3, [r7, #10]
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002584:	f001 f866 	bl	8003654 <HAL_GPIO_WritePin>
    }

    // PWM
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 8002588:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <Motor_Control+0xc0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <Motor_Control+0xc4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000048c 	.word	0x2000048c
 80025a4:	20000440 	.word	0x20000440

080025a8 <CS_Select>:
}



void CS_Select (void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <CS_Select+0x14>)
 80025b2:	f001 f84f 	bl	8003654 <HAL_GPIO_WritePin>
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	48000400 	.word	0x48000400

080025c0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80025c4:	2201      	movs	r2, #1
 80025c6:	2101      	movs	r1, #1
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <CS_UnSelect+0x14>)
 80025ca:	f001 f843 	bl	8003654 <HAL_GPIO_WritePin>
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	48000400 	.word	0x48000400

080025d8 <CE_Enable>:


void CE_Enable (void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80025dc:	2201      	movs	r2, #1
 80025de:	2102      	movs	r1, #2
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <CE_Enable+0x14>)
 80025e2:	f001 f837 	bl	8003654 <HAL_GPIO_WritePin>
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	48000400 	.word	0x48000400

080025f0 <CE_Disable>:

void CE_Disable (void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2102      	movs	r1, #2
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <CE_Disable+0x14>)
 80025fa:	f001 f82b 	bl	8003654 <HAL_GPIO_WritePin>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	48000400 	.word	0x48000400

08002608 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	460a      	mov	r2, r1
 8002612:	71fb      	strb	r3, [r7, #7]
 8002614:	4613      	mov	r3, r2
 8002616:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f043 0320 	orr.w	r3, r3, #32
 800261e:	b2db      	uxtb	r3, r3
 8002620:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002626:	f7ff ffbf 	bl	80025a8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800262a:	f107 010c 	add.w	r1, r7, #12
 800262e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002632:	2202      	movs	r2, #2
 8002634:	4804      	ldr	r0, [pc, #16]	@ (8002648 <nrf24_WriteReg+0x40>)
 8002636:	f002 f8a2 	bl	800477e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800263a:	f7ff ffc1 	bl	80025c0 <CS_UnSelect>
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000378 	.word	0x20000378

0800264c <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	f043 0320 	orr.w	r3, r3, #32
 8002660:	b2db      	uxtb	r3, r3
 8002662:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002664:	f7ff ffa0 	bl	80025a8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8002668:	f107 0114 	add.w	r1, r7, #20
 800266c:	2364      	movs	r3, #100	@ 0x64
 800266e:	2201      	movs	r2, #1
 8002670:	4808      	ldr	r0, [pc, #32]	@ (8002694 <nrf24_WriteRegMulti+0x48>)
 8002672:	f002 f884 	bl	800477e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	b29a      	uxth	r2, r3
 800267a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	4804      	ldr	r0, [pc, #16]	@ (8002694 <nrf24_WriteRegMulti+0x48>)
 8002682:	f002 f87c 	bl	800477e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002686:	f7ff ff9b 	bl	80025c0 <CS_UnSelect>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000378 	.word	0x20000378

08002698 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80026a6:	f7ff ff7f 	bl	80025a8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80026aa:	1df9      	adds	r1, r7, #7
 80026ac:	2364      	movs	r3, #100	@ 0x64
 80026ae:	2201      	movs	r2, #1
 80026b0:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <nrf24_ReadReg+0x3c>)
 80026b2:	f002 f864 	bl	800477e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80026b6:	f107 010f 	add.w	r1, r7, #15
 80026ba:	2364      	movs	r3, #100	@ 0x64
 80026bc:	2201      	movs	r2, #1
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <nrf24_ReadReg+0x3c>)
 80026c0:	f002 f9d3 	bl	8004a6a <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80026c4:	f7ff ff7c 	bl	80025c0 <CS_UnSelect>

	return data;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000378 	.word	0x20000378

080026d8 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80026e2:	f7ff ff61 	bl	80025a8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80026e6:	1df9      	adds	r1, r7, #7
 80026e8:	2364      	movs	r3, #100	@ 0x64
 80026ea:	2201      	movs	r2, #1
 80026ec:	4804      	ldr	r0, [pc, #16]	@ (8002700 <nrfsendCmd+0x28>)
 80026ee:	f002 f846 	bl	800477e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80026f2:	f7ff ff65 	bl	80025c0 <CS_UnSelect>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000378 	.word	0x20000378

08002704 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b07      	cmp	r3, #7
 8002712:	d104      	bne.n	800271e <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, (1 << 6) | (1 << 5) | (1 << 4));
 8002714:	2170      	movs	r1, #112	@ 0x70
 8002716:	2007      	movs	r0, #7
 8002718:	f7ff ff76 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);

	}
}
 800271c:	e090      	b.n	8002840 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	2b17      	cmp	r3, #23
 8002722:	d104      	bne.n	800272e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002724:	2111      	movs	r1, #17
 8002726:	2017      	movs	r0, #23
 8002728:	f7ff ff6e 	bl	8002608 <nrf24_WriteReg>
}
 800272c:	e088      	b.n	8002840 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800272e:	2108      	movs	r1, #8
 8002730:	2000      	movs	r0, #0
 8002732:	f7ff ff69 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F); // Enable all the data pipes
 8002736:	213f      	movs	r1, #63	@ 0x3f
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff ff65 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800273e:	2103      	movs	r1, #3
 8002740:	2002      	movs	r0, #2
 8002742:	f7ff ff61 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8002746:	2103      	movs	r1, #3
 8002748:	2003      	movs	r0, #3
 800274a:	f7ff ff5d 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03); // 0x3F = 4000us delay, 15 retransmission
 800274e:	2103      	movs	r1, #3
 8002750:	2004      	movs	r0, #4
 8002752:	f7ff ff59 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8002756:	2102      	movs	r1, #2
 8002758:	2005      	movs	r0, #5
 800275a:	f7ff ff55 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E); // 0x0E = 2Mbps ||  0x06 = 1Mbps
 800275e:	210e      	movs	r1, #14
 8002760:	2006      	movs	r0, #6
 8002762:	f7ff ff51 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8002766:	2100      	movs	r1, #0
 8002768:	2007      	movs	r0, #7
 800276a:	f7ff ff4d 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800276e:	2100      	movs	r1, #0
 8002770:	2008      	movs	r0, #8
 8002772:	f7ff ff49 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8002776:	2100      	movs	r1, #0
 8002778:	2009      	movs	r0, #9
 800277a:	f7ff ff45 	bl	8002608 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800277e:	4a32      	ldr	r2, [pc, #200]	@ (8002848 <nrf24_reset+0x144>)
 8002780:	f107 0318 	add.w	r3, r7, #24
 8002784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002788:	6018      	str	r0, [r3, #0]
 800278a:	3304      	adds	r3, #4
 800278c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800278e:	f107 0318 	add.w	r3, r7, #24
 8002792:	2205      	movs	r2, #5
 8002794:	4619      	mov	r1, r3
 8002796:	200a      	movs	r0, #10
 8002798:	f7ff ff58 	bl	800264c <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800279c:	4a2b      	ldr	r2, [pc, #172]	@ (800284c <nrf24_reset+0x148>)
 800279e:	f107 0310 	add.w	r3, r7, #16
 80027a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027a6:	6018      	str	r0, [r3, #0]
 80027a8:	3304      	adds	r3, #4
 80027aa:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	2205      	movs	r2, #5
 80027b2:	4619      	mov	r1, r3
 80027b4:	200b      	movs	r0, #11
 80027b6:	f7ff ff49 	bl	800264c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80027ba:	21c3      	movs	r1, #195	@ 0xc3
 80027bc:	200c      	movs	r0, #12
 80027be:	f7ff ff23 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80027c2:	21c4      	movs	r1, #196	@ 0xc4
 80027c4:	200d      	movs	r0, #13
 80027c6:	f7ff ff1f 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80027ca:	21c5      	movs	r1, #197	@ 0xc5
 80027cc:	200e      	movs	r0, #14
 80027ce:	f7ff ff1b 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80027d2:	21c6      	movs	r1, #198	@ 0xc6
 80027d4:	200f      	movs	r0, #15
 80027d6:	f7ff ff17 	bl	8002608 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80027da:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <nrf24_reset+0x144>)
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027e4:	6018      	str	r0, [r3, #0]
 80027e6:	3304      	adds	r3, #4
 80027e8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	2205      	movs	r2, #5
 80027f0:	4619      	mov	r1, r3
 80027f2:	2010      	movs	r0, #16
 80027f4:	f7ff ff2a 	bl	800264c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80027f8:	2100      	movs	r1, #0
 80027fa:	2011      	movs	r0, #17
 80027fc:	f7ff ff04 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8002800:	2100      	movs	r1, #0
 8002802:	2012      	movs	r0, #18
 8002804:	f7ff ff00 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8002808:	2100      	movs	r1, #0
 800280a:	2013      	movs	r0, #19
 800280c:	f7ff fefc 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8002810:	2100      	movs	r1, #0
 8002812:	2014      	movs	r0, #20
 8002814:	f7ff fef8 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8002818:	2100      	movs	r1, #0
 800281a:	2015      	movs	r0, #21
 800281c:	f7ff fef4 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8002820:	2100      	movs	r1, #0
 8002822:	2016      	movs	r0, #22
 8002824:	f7ff fef0 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002828:	2111      	movs	r1, #17
 800282a:	2017      	movs	r0, #23
 800282c:	f7ff feec 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8002830:	2100      	movs	r1, #0
 8002832:	201c      	movs	r0, #28
 8002834:	f7ff fee8 	bl	8002608 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8002838:	2100      	movs	r1, #0
 800283a:	201d      	movs	r0, #29
 800283c:	f7ff fee4 	bl	8002608 <nrf24_WriteReg>
}
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	0800bee4 	.word	0x0800bee4
 800284c:	0800beec 	.word	0x0800beec

08002850 <NRF24_Init>:




void NRF24_Init(void) {
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
    CE_Disable();
 8002854:	f7ff fecc 	bl	80025f0 <CE_Disable>
    nrf24_reset(0);
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff ff53 	bl	8002704 <nrf24_reset>

    // Habilita CRC de 16 bits (CONFIG: EN_CRC=1, CRCO=1)
    nrf24_WriteReg(CONFIG, (1 << 2) | (1 << 3));
 800285e:	210c      	movs	r1, #12
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff fed1 	bl	8002608 <nrf24_WriteReg>

    // Auto-ACK em todos os pipes (EN_AA=0x3F)
    nrf24_WriteReg(EN_AA, 0x3F);
 8002866:	213f      	movs	r1, #63	@ 0x3f
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff fecd 	bl	8002608 <nrf24_WriteReg>

    // Taxa de dados: 250Kbps (RF_SETUP=0x26) | Taxa de dados: 1mps (RF_SETUP=0x06)
    nrf24_WriteReg(RF_SETUP, 0x26);
 800286e:	2126      	movs	r1, #38	@ 0x26
 8002870:	2006      	movs	r0, #6
 8002872:	f7ff fec9 	bl	8002608 <nrf24_WriteReg>

    // 15 retransmissões, delay 4000µs (SETUP_RETR=0x4F)
    nrf24_WriteReg(SETUP_RETR, 0x4F);
 8002876:	214f      	movs	r1, #79	@ 0x4f
 8002878:	2004      	movs	r0, #4
 800287a:	f7ff fec5 	bl	8002608 <nrf24_WriteReg>

    // Habilita Dynamic Payloads (FEATURE=0x06)
    nrf24_WriteReg(FEATURE, 0x06);
 800287e:	2106      	movs	r1, #6
 8002880:	201d      	movs	r0, #29
 8002882:	f7ff fec1 	bl	8002608 <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD, 0x3F); // Ativa em todos os pipes
 8002886:	213f      	movs	r1, #63	@ 0x3f
 8002888:	201c      	movs	r0, #28
 800288a:	f7ff febd 	bl	8002608 <nrf24_WriteReg>

    CE_Enable();
 800288e:	f7ff fea3 	bl	80025d8 <CE_Enable>
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}

08002896 <NRF24_RxMode>:
    return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80028a2:	f7ff fea5 	bl	80025f0 <CE_Disable>

	nrf24_reset (STATUS);
 80028a6:	2007      	movs	r0, #7
 80028a8:	f7ff ff2c 	bl	8002704 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	4619      	mov	r1, r3
 80028b0:	2005      	movs	r0, #5
 80028b2:	f7ff fea9 	bl	8002608 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80028b6:	2002      	movs	r0, #2
 80028b8:	f7ff feee 	bl	8002698 <nrf24_ReadReg>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	4619      	mov	r1, r3
 80028cc:	2002      	movs	r0, #2
 80028ce:	f7ff fe9b 	bl	8002608 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80028d2:	2205      	movs	r2, #5
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	200b      	movs	r0, #11
 80028d8:	f7ff feb8 	bl	800264c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80028dc:	21ee      	movs	r1, #238	@ 0xee
 80028de:	200c      	movs	r0, #12
 80028e0:	f7ff fe92 	bl	8002608 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80028e4:	2120      	movs	r1, #32
 80028e6:	2013      	movs	r0, #19
 80028e8:	f7ff fe8e 	bl	8002608 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff fed3 	bl	8002698 <nrf24_ReadReg>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80028f6:	7bbb      	ldrb	r3, [r7, #14]
 80028f8:	f043 0303 	orr.w	r3, r3, #3
 80028fc:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80028fe:	7bbb      	ldrb	r3, [r7, #14]
 8002900:	4619      	mov	r1, r3
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff fe80 	bl	8002608 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002908:	f7ff fe66 	bl	80025d8 <CE_Enable>
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 800291c:	2007      	movs	r0, #7
 800291e:	f7ff febb 	bl	8002698 <nrf24_ReadReg>
 8002922:	4603      	mov	r3, r0
 8002924:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <isDataAvailable+0x34>
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 800293c:	2140      	movs	r1, #64	@ 0x40
 800293e:	2007      	movs	r0, #7
 8002940:	f7ff fe62 	bl	8002608 <nrf24_WriteReg>

		return 1;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <isDataAvailable+0x36>
	}

	return 0;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8002960:	f7ff fe22 	bl	80025a8 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8002964:	2361      	movs	r3, #97	@ 0x61
 8002966:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8002968:	f107 010f 	add.w	r1, r7, #15
 800296c:	2364      	movs	r3, #100	@ 0x64
 800296e:	2201      	movs	r2, #1
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <NRF24_Receive+0x50>)
 8002972:	f001 ff04 	bl	800477e <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8002976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297a:	2220      	movs	r2, #32
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4809      	ldr	r0, [pc, #36]	@ (80029a4 <NRF24_Receive+0x50>)
 8002980:	f002 f873 	bl	8004a6a <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8002984:	f7ff fe1c 	bl	80025c0 <CS_UnSelect>

	HAL_Delay(1);
 8002988:	2001      	movs	r0, #1
 800298a:	f000 fbdb 	bl	8003144 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800298e:	23e2      	movs	r3, #226	@ 0xe2
 8002990:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fe9f 	bl	80026d8 <nrfsendCmd>
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000378 	.word	0x20000378

080029a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <HAL_MspInit+0x44>)
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	4a0e      	ldr	r2, [pc, #56]	@ (80029ec <HAL_MspInit+0x44>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80029ba:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <HAL_MspInit+0x44>)
 80029bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_MspInit+0x44>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	4a08      	ldr	r2, [pc, #32]	@ (80029ec <HAL_MspInit+0x44>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_MspInit+0x44>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80029de:	f000 fef5 	bl	80037cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	@ 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b04 <HAL_SPI_MspInit+0x114>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d145      	bne.n	8002a9e <HAL_SPI_MspInit+0xae>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a16:	4a3c      	ldr	r2, [pc, #240]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b37      	ldr	r3, [pc, #220]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	4a36      	ldr	r2, [pc, #216]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a36:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	4a30      	ldr	r2, [pc, #192]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8002a5a:	23a0      	movs	r3, #160	@ 0xa0
 8002a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 031c 	add.w	r3, r7, #28
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a78:	f000 fc6a 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a8c:	2305      	movs	r3, #5
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	481d      	ldr	r0, [pc, #116]	@ (8002b0c <HAL_SPI_MspInit+0x11c>)
 8002a98:	f000 fc5a 	bl	8003350 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a9c:	e02d      	b.n	8002afa <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <HAL_SPI_MspInit+0x120>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d128      	bne.n	8002afa <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002aa8:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aac:	4a16      	ldr	r2, [pc, #88]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac4:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_SPI_MspInit+0x118>)
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ad8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aea:	2305      	movs	r3, #5
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <HAL_SPI_MspInit+0x11c>)
 8002af6:	f000 fc2b 	bl	8003350 <HAL_GPIO_Init>
}
 8002afa:	bf00      	nop
 8002afc:	3730      	adds	r7, #48	@ 0x30
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40013000 	.word	0x40013000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	40003800 	.word	0x40003800

08002b14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a13      	ldr	r2, [pc, #76]	@ (8002b70 <HAL_TIM_Base_MspInit+0x5c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10c      	bne.n	8002b40 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_TIM_Base_MspInit+0x60>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2a:	4a12      	ldr	r2, [pc, #72]	@ (8002b74 <HAL_TIM_Base_MspInit+0x60>)
 8002b2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <HAL_TIM_Base_MspInit+0x60>)
 8002b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b3e:	e010      	b.n	8002b62 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b48:	d10b      	bne.n	8002b62 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_TIM_Base_MspInit+0x60>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	4a09      	ldr	r2, [pc, #36]	@ (8002b74 <HAL_TIM_Base_MspInit+0x60>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b56:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <HAL_TIM_Base_MspInit+0x60>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40021000 	.word	0x40021000

08002b78 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	@ 0x30
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2f      	ldr	r2, [pc, #188]	@ (8002c54 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d129      	bne.n	8002bee <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	4a28      	ldr	r2, [pc, #160]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bbe:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 8002bca:	2350      	movs	r3, #80	@ 0x50
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002be8:	f000 fbb2 	bl	8003350 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bec:	e02e      	b.n	8002c4c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c5c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d129      	bne.n	8002c4c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf8:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	4a16      	ldr	r2, [pc, #88]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c14:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 8002c28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002c3a:	230a      	movs	r3, #10
 8002c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c48:	f000 fb82 	bl	8003350 <HAL_GPIO_Init>
}
 8002c4c:	bf00      	nop
 8002c4e:	3730      	adds	r7, #48	@ 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40000800 	.word	0x40000800

08002c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	@ 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	@ (8002d0c <HAL_TIM_MspPostInit+0xac>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d11e      	bne.n	8002cc0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	4b23      	ldr	r3, [pc, #140]	@ (8002d10 <HAL_TIM_MspPostInit+0xb0>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	4a22      	ldr	r2, [pc, #136]	@ (8002d10 <HAL_TIM_MspPostInit+0xb0>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c8e:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <HAL_TIM_MspPostInit+0xb0>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 8002c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002cac:	2306      	movs	r3, #6
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cba:	f000 fb49 	bl	8003350 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002cbe:	e021      	b.n	8002d04 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc8:	d11c      	bne.n	8002d04 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <HAL_TIM_MspPostInit+0xb0>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	4a10      	ldr	r2, [pc, #64]	@ (8002d10 <HAL_TIM_MspPostInit+0xb0>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <HAL_TIM_MspPostInit+0xb0>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d00:	f000 fb26 	bl	8003350 <HAL_GPIO_Init>
}
 8002d04:	bf00      	nop
 8002d06:	3728      	adds	r7, #40	@ 0x28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40021000 	.word	0x40021000

08002d14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b09c      	sub	sp, #112	@ 0x70
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d2c:	f107 0318 	add.w	r3, r7, #24
 8002d30:	2244      	movs	r2, #68	@ 0x44
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fd29 	bl	800878c <memset>
  if(huart->Instance==USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <HAL_UART_MspInit+0xdc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d151      	bne.n	8002de8 <HAL_UART_MspInit+0xd4>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d44:	2301      	movs	r3, #1
 8002d46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d4c:	f107 0318 	add.w	r3, r7, #24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 fa79 	bl	8004248 <HAL_RCCEx_PeriphCLKConfig>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d5c:	f7ff fb94 	bl	8002488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d60:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d64:	4a23      	ldr	r2, [pc, #140]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d6c:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d78:	4b1e      	ldr	r3, [pc, #120]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d90:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d94:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d9c:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_UART_MspInit+0xe0>)
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8002da8:	2310      	movs	r3, #16
 8002daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002db8:	2307      	movs	r3, #7
 8002dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480d      	ldr	r0, [pc, #52]	@ (8002df8 <HAL_UART_MspInit+0xe4>)
 8002dc4:	f000 fac4 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dd8:	2307      	movs	r3, #7
 8002dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002de0:	4619      	mov	r1, r3
 8002de2:	4806      	ldr	r0, [pc, #24]	@ (8002dfc <HAL_UART_MspInit+0xe8>)
 8002de4:	f000 fab4 	bl	8003350 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002de8:	bf00      	nop
 8002dea:	3770      	adds	r7, #112	@ 0x70
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40021000 	.word	0x40021000
 8002df8:	48000800 	.word	0x48000800
 8002dfc:	48000400 	.word	0x48000400

08002e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <NMI_Handler+0x4>

08002e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <HardFault_Handler+0x4>

08002e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e14:	bf00      	nop
 8002e16:	e7fd      	b.n	8002e14 <MemManage_Handler+0x4>

08002e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <BusFault_Handler+0x4>

08002e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <UsageFault_Handler+0x4>

08002e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e56:	f000 f957 	bl	8003108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  return 1;
 8002e62:	2301      	movs	r3, #1
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_kill>:

int _kill(int pid, int sig)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e78:	f005 fcda 	bl	8008830 <__errno>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2216      	movs	r2, #22
 8002e80:	601a      	str	r2, [r3, #0]
  return -1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_exit>:

void _exit (int status)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ffe7 	bl	8002e6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <_exit+0x12>

08002ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e00a      	b.n	8002ecc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002eb6:	f3af 8000 	nop.w
 8002eba:	4601      	mov	r1, r0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	b2ca      	uxtb	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dbf0      	blt.n	8002eb6 <_read+0x12>
  }

  return len;
 8002ed4:	687b      	ldr	r3, [r7, #4]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e009      	b.n	8002f04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	60ba      	str	r2, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbf1      	blt.n	8002ef0 <_write+0x12>
  }
  return len;
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_close>:

int _close(int file)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f3e:	605a      	str	r2, [r3, #4]
  return 0;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_isatty>:

int _isatty(int file)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	@ (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f005 fc3e 	bl	8008830 <__errno>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	@ (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20008000 	.word	0x20008000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	20000634 	.word	0x20000634
 8002fe8:	20000788 	.word	0x20000788

08002fec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <SystemInit+0x20>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	4a05      	ldr	r2, [pc, #20]	@ (800300c <SystemInit+0x20>)
 8002ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 8003010:	480d      	ldr	r0, [pc, #52]	@ (8003048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003012:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003014:	f7ff ffea 	bl	8002fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003018:	480c      	ldr	r0, [pc, #48]	@ (800304c <LoopForever+0x6>)
  ldr r1, =_edata
 800301a:	490d      	ldr	r1, [pc, #52]	@ (8003050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800301c:	4a0d      	ldr	r2, [pc, #52]	@ (8003054 <LoopForever+0xe>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003020:	e002      	b.n	8003028 <LoopCopyDataInit>

08003022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003026:	3304      	adds	r3, #4

08003028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800302c:	d3f9      	bcc.n	8003022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003030:	4c0a      	ldr	r4, [pc, #40]	@ (800305c <LoopForever+0x16>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003034:	e001      	b.n	800303a <LoopFillZerobss>

08003036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003038:	3204      	adds	r2, #4

0800303a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800303c:	d3fb      	bcc.n	8003036 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800303e:	f005 fbfd 	bl	800883c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003042:	f7fe fe9d 	bl	8001d80 <main>

08003046 <LoopForever>:

LoopForever:
    b LoopForever
 8003046:	e7fe      	b.n	8003046 <LoopForever>
 ldr   r0, =_estack
 8003048:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003054:	0800c36c 	.word	0x0800c36c
  ldr r2, =_sbss
 8003058:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800305c:	20000788 	.word	0x20000788

08003060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC1_2_IRQHandler>

08003062 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800306c:	2003      	movs	r0, #3
 800306e:	f000 f93d 	bl	80032ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003072:	200f      	movs	r0, #15
 8003074:	f000 f80e 	bl	8003094 <HAL_InitTick>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	71fb      	strb	r3, [r7, #7]
 8003082:	e001      	b.n	8003088 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003084:	f7ff fc90 	bl	80029a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003088:	79fb      	ldrb	r3, [r7, #7]

}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030a0:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <HAL_InitTick+0x68>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d022      	beq.n	80030ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030a8:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_InitTick+0x6c>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <HAL_InitTick+0x68>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80030b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f93a 	bl	8003336 <HAL_SYSTICK_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10f      	bne.n	80030e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	d809      	bhi.n	80030e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ce:	2200      	movs	r2, #0
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030d6:	f000 f914 	bl	8003302 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <HAL_InitTick+0x70>)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e007      	b.n	80030f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	e004      	b.n	80030f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e001      	b.n	80030f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20000020 	.word	0x20000020
 8003100:	20000018 	.word	0x20000018
 8003104:	2000001c 	.word	0x2000001c

08003108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <HAL_IncTick+0x1c>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <HAL_IncTick+0x20>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4413      	add	r3, r2
 8003116:	4a03      	ldr	r2, [pc, #12]	@ (8003124 <HAL_IncTick+0x1c>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	20000638 	.word	0x20000638
 8003128:	20000020 	.word	0x20000020

0800312c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return uwTick;
 8003130:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <HAL_GetTick+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000638 	.word	0x20000638

08003144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7ff ffee 	bl	800312c <HAL_GetTick>
 8003150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800315c:	d004      	beq.n	8003168 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800315e:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_Delay+0x40>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003168:	bf00      	nop
 800316a:	f7ff ffdf 	bl	800312c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	429a      	cmp	r2, r3
 8003178:	d8f7      	bhi.n	800316a <HAL_Delay+0x26>
  {
  }
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000020 	.word	0x20000020

08003188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a4:	4013      	ands	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ba:	4a04      	ldr	r2, [pc, #16]	@ (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60d3      	str	r3, [r2, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <__NVIC_GetPriorityGrouping+0x18>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 0307 	and.w	r3, r3, #7
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db0a      	blt.n	8003216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	490c      	ldr	r1, [pc, #48]	@ (8003238 <__NVIC_SetPriority+0x4c>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	0112      	lsls	r2, r2, #4
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	440b      	add	r3, r1
 8003210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003214:	e00a      	b.n	800322c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4908      	ldr	r1, [pc, #32]	@ (800323c <__NVIC_SetPriority+0x50>)
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	3b04      	subs	r3, #4
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	440b      	add	r3, r1
 800322a:	761a      	strb	r2, [r3, #24]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	@ 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	2b04      	cmp	r3, #4
 800325c:	bf28      	it	cs
 800325e:	2304      	movcs	r3, #4
 8003260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3304      	adds	r3, #4
 8003266:	2b06      	cmp	r3, #6
 8003268:	d902      	bls.n	8003270 <NVIC_EncodePriority+0x30>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3b03      	subs	r3, #3
 800326e:	e000      	b.n	8003272 <NVIC_EncodePriority+0x32>
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	401a      	ands	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003288:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	43d9      	mvns	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	4313      	orrs	r3, r2
         );
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	@ 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b8:	d301      	bcc.n	80032be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00f      	b.n	80032de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032be:	4a0a      	ldr	r2, [pc, #40]	@ (80032e8 <SysTick_Config+0x40>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c6:	210f      	movs	r1, #15
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032cc:	f7ff ff8e 	bl	80031ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <SysTick_Config+0x40>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d6:	4b04      	ldr	r3, [pc, #16]	@ (80032e8 <SysTick_Config+0x40>)
 80032d8:	2207      	movs	r2, #7
 80032da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	e000e010 	.word	0xe000e010

080032ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff47 	bl	8003188 <__NVIC_SetPriorityGrouping>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003310:	f7ff ff5e 	bl	80031d0 <__NVIC_GetPriorityGrouping>
 8003314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	f7ff ff90 	bl	8003240 <NVIC_EncodePriority>
 8003320:	4602      	mov	r2, r0
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff5f 	bl	80031ec <__NVIC_SetPriority>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffb2 	bl	80032a8 <SysTick_Config>
 8003344:	4603      	mov	r3, r0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800335e:	e15a      	b.n	8003616 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	4013      	ands	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 814c 	beq.w	8003610 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d005      	beq.n	8003390 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800338c:	2b02      	cmp	r3, #2
 800338e:	d130      	bne.n	80033f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	2203      	movs	r2, #3
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c6:	2201      	movs	r2, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0201 	and.w	r2, r3, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d017      	beq.n	800342e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2203      	movs	r2, #3
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d123      	bne.n	8003482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	220f      	movs	r2, #15
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	6939      	ldr	r1, [r7, #16]
 800347e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80a6 	beq.w	8003610 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <HAL_GPIO_Init+0x2e4>)
 80034c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003634 <HAL_GPIO_Init+0x2e4>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80034d0:	4b58      	ldr	r3, [pc, #352]	@ (8003634 <HAL_GPIO_Init+0x2e4>)
 80034d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034dc:	4a56      	ldr	r2, [pc, #344]	@ (8003638 <HAL_GPIO_Init+0x2e8>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003506:	d01f      	beq.n	8003548 <HAL_GPIO_Init+0x1f8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a4c      	ldr	r2, [pc, #304]	@ (800363c <HAL_GPIO_Init+0x2ec>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d019      	beq.n	8003544 <HAL_GPIO_Init+0x1f4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a4b      	ldr	r2, [pc, #300]	@ (8003640 <HAL_GPIO_Init+0x2f0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d013      	beq.n	8003540 <HAL_GPIO_Init+0x1f0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a4a      	ldr	r2, [pc, #296]	@ (8003644 <HAL_GPIO_Init+0x2f4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00d      	beq.n	800353c <HAL_GPIO_Init+0x1ec>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a49      	ldr	r2, [pc, #292]	@ (8003648 <HAL_GPIO_Init+0x2f8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x1e8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a48      	ldr	r2, [pc, #288]	@ (800364c <HAL_GPIO_Init+0x2fc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_GPIO_Init+0x1e4>
 8003530:	2305      	movs	r3, #5
 8003532:	e00a      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003534:	2306      	movs	r3, #6
 8003536:	e008      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003538:	2304      	movs	r3, #4
 800353a:	e006      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 800353c:	2303      	movs	r3, #3
 800353e:	e004      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003540:	2302      	movs	r3, #2
 8003542:	e002      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_GPIO_Init+0x1fa>
 8003548:	2300      	movs	r3, #0
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	f002 0203 	and.w	r2, r2, #3
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	4093      	lsls	r3, r2
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800355a:	4937      	ldr	r1, [pc, #220]	@ (8003638 <HAL_GPIO_Init+0x2e8>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3302      	adds	r3, #2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003568:	4b39      	ldr	r3, [pc, #228]	@ (8003650 <HAL_GPIO_Init+0x300>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43db      	mvns	r3, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800358c:	4a30      	ldr	r2, [pc, #192]	@ (8003650 <HAL_GPIO_Init+0x300>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003592:	4b2f      	ldr	r3, [pc, #188]	@ (8003650 <HAL_GPIO_Init+0x300>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035b6:	4a26      	ldr	r2, [pc, #152]	@ (8003650 <HAL_GPIO_Init+0x300>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035bc:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_GPIO_Init+0x300>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003650 <HAL_GPIO_Init+0x300>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_GPIO_Init+0x300>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800360a:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <HAL_GPIO_Init+0x300>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f ae9d 	bne.w	8003360 <HAL_GPIO_Init+0x10>
  }
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40021000 	.word	0x40021000
 8003638:	40010000 	.word	0x40010000
 800363c:	48000400 	.word	0x48000400
 8003640:	48000800 	.word	0x48000800
 8003644:	48000c00 	.word	0x48000c00
 8003648:	48001000 	.word	0x48001000
 800364c:	48001400 	.word	0x48001400
 8003650:	40010400 	.word	0x40010400

08003654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
 8003660:	4613      	mov	r3, r2
 8003662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003664:	787b      	ldrb	r3, [r7, #1]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003670:	e002      	b.n	8003678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d141      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003692:	4b4b      	ldr	r3, [pc, #300]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369e:	d131      	bne.n	8003704 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036a0:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a6:	4a46      	ldr	r2, [pc, #280]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b0:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036b8:	4a41      	ldr	r2, [pc, #260]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036c0:	4b40      	ldr	r3, [pc, #256]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2232      	movs	r2, #50	@ 0x32
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	4a3f      	ldr	r2, [pc, #252]	@ (80037c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	0c9b      	lsrs	r3, r3, #18
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d6:	e002      	b.n	80036de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036de:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ea:	d102      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f2      	bne.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036f2:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fe:	d158      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e057      	b.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003704:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800370a:	4a2d      	ldr	r2, [pc, #180]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003714:	e04d      	b.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800371c:	d141      	bne.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800371e:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800372a:	d131      	bne.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800372c:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003732:	4a23      	ldr	r2, [pc, #140]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800373c:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003744:	4a1e      	ldr	r2, [pc, #120]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800374a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800374c:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2232      	movs	r2, #50	@ 0x32
 8003752:	fb02 f303 	mul.w	r3, r2, r3
 8003756:	4a1c      	ldr	r2, [pc, #112]	@ (80037c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003758:	fba2 2303 	umull	r2, r3, r2, r3
 800375c:	0c9b      	lsrs	r3, r3, #18
 800375e:	3301      	adds	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003762:	e002      	b.n	800376a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3b01      	subs	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003776:	d102      	bne.n	800377e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f2      	bne.n	8003764 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800377e:	4b10      	ldr	r3, [pc, #64]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800378a:	d112      	bne.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e011      	b.n	80037b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003796:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037a0:	e007      	b.n	80037b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037a2:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037aa:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40007000 	.word	0x40007000
 80037c4:	20000018 	.word	0x20000018
 80037c8:	431bde83 	.word	0x431bde83

080037cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a04      	ldr	r2, [pc, #16]	@ (80037e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037da:	6093      	str	r3, [r2, #8]
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40007000 	.word	0x40007000

080037ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e2fe      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d075      	beq.n	80038f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380a:	4b97      	ldr	r3, [pc, #604]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003814:	4b94      	ldr	r3, [pc, #592]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d102      	bne.n	800382a <HAL_RCC_OscConfig+0x3e>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d002      	beq.n	8003830 <HAL_RCC_OscConfig+0x44>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	4b8d      	ldr	r3, [pc, #564]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05b      	beq.n	80038f4 <HAL_RCC_OscConfig+0x108>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e2d9      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x74>
 8003852:	4b85      	ldr	r3, [pc, #532]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a84      	ldr	r2, [pc, #528]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x98>
 800386a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b7c      	ldr	r3, [pc, #496]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003884:	4b78      	ldr	r3, [pc, #480]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a77      	ldr	r2, [pc, #476]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a74      	ldr	r2, [pc, #464]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7ff fc42 	bl	800312c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ac:	f7ff fc3e 	bl	800312c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e29e      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038be:	4b6a      	ldr	r3, [pc, #424]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xc0>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7ff fc2e 	bl	800312c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d4:	f7ff fc2a 	bl	800312c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e28a      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e6:	4b60      	ldr	r3, [pc, #384]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0xe8>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d075      	beq.n	80039ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b59      	ldr	r3, [pc, #356]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390c:	4b56      	ldr	r3, [pc, #344]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b0c      	cmp	r3, #12
 800391a:	d102      	bne.n	8003922 <HAL_RCC_OscConfig+0x136>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d002      	beq.n	8003928 <HAL_RCC_OscConfig+0x13c>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b04      	cmp	r3, #4
 8003926:	d11f      	bne.n	8003968 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003928:	4b4f      	ldr	r3, [pc, #316]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_OscConfig+0x154>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e25d      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	4b49      	ldr	r3, [pc, #292]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	4946      	ldr	r1, [pc, #280]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003954:	4b45      	ldr	r3, [pc, #276]	@ (8003a6c <HAL_RCC_OscConfig+0x280>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fb9b 	bl	8003094 <HAL_InitTick>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d043      	beq.n	80039ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e249      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d023      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003970:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3c      	ldr	r2, [pc, #240]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7ff fbd6 	bl	800312c <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003984:	f7ff fbd2 	bl	800312c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e232      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003996:	4b34      	ldr	r3, [pc, #208]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a2:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	061b      	lsls	r3, r3, #24
 80039b0:	492d      	ldr	r1, [pc, #180]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
 80039b6:	e01a      	b.n	80039ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80039be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7ff fbb2 	bl	800312c <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7ff fbae 	bl	800312c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e20e      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039de:	4b22      	ldr	r3, [pc, #136]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1e0>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d041      	beq.n	8003a7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a02:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a08:	4a17      	ldr	r2, [pc, #92]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7ff fb8b 	bl	800312c <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1a:	f7ff fb87 	bl	800312c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e1e7      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0ef      	beq.n	8003a1a <HAL_RCC_OscConfig+0x22e>
 8003a3a:	e020      	b.n	8003a7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a42:	4a09      	ldr	r2, [pc, #36]	@ (8003a68 <HAL_RCC_OscConfig+0x27c>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7ff fb6e 	bl	800312c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a52:	e00d      	b.n	8003a70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a54:	f7ff fb6a 	bl	800312c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d906      	bls.n	8003a70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1ca      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a70:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ea      	bne.n	8003a54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0304 	and.w	r3, r3, #4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a6 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a90:	4b84      	ldr	r3, [pc, #528]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2b4>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2b6>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac2:	4b79      	ldr	r3, [pc, #484]	@ (8003ca8 <HAL_RCC_OscConfig+0x4bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d118      	bne.n	8003b00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ace:	4b76      	ldr	r3, [pc, #472]	@ (8003ca8 <HAL_RCC_OscConfig+0x4bc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a75      	ldr	r2, [pc, #468]	@ (8003ca8 <HAL_RCC_OscConfig+0x4bc>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ada:	f7ff fb27 	bl	800312c <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae2:	f7ff fb23 	bl	800312c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e183      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca8 <HAL_RCC_OscConfig+0x4bc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d108      	bne.n	8003b1a <HAL_RCC_OscConfig+0x32e>
 8003b08:	4b66      	ldr	r3, [pc, #408]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0e:	4a65      	ldr	r2, [pc, #404]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b18:	e024      	b.n	8003b64 <HAL_RCC_OscConfig+0x378>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d110      	bne.n	8003b44 <HAL_RCC_OscConfig+0x358>
 8003b22:	4b60      	ldr	r3, [pc, #384]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b28:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b2a:	f043 0304 	orr.w	r3, r3, #4
 8003b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b38:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b42:	e00f      	b.n	8003b64 <HAL_RCC_OscConfig+0x378>
 8003b44:	4b57      	ldr	r3, [pc, #348]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	4a56      	ldr	r2, [pc, #344]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	f023 0301 	bic.w	r3, r3, #1
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b54:	4b53      	ldr	r3, [pc, #332]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	4a52      	ldr	r2, [pc, #328]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b5c:	f023 0304 	bic.w	r3, r3, #4
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d016      	beq.n	8003b9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7ff fade 	bl	800312c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7ff fada 	bl	800312c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e138      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ed      	beq.n	8003b74 <HAL_RCC_OscConfig+0x388>
 8003b98:	e015      	b.n	8003bc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7ff fac7 	bl	800312c <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7ff fac3 	bl	800312c <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e121      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ed      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bc6:	7ffb      	ldrb	r3, [r7, #31]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b35      	ldr	r3, [pc, #212]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd0:	4a34      	ldr	r2, [pc, #208]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d03c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7ff fa96 	bl	800312c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c04:	f7ff fa92 	bl	800312c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0f2      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c16:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ef      	beq.n	8003c04 <HAL_RCC_OscConfig+0x418>
 8003c24:	e01b      	b.n	8003c5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c26:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003c2e:	f023 0301 	bic.w	r3, r3, #1
 8003c32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7ff fa79 	bl	800312c <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c3e:	f7ff fa75 	bl	800312c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0d5      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c50:	4b14      	ldr	r3, [pc, #80]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ef      	bne.n	8003c3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80c9 	beq.w	8003dfa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b0c      	cmp	r3, #12
 8003c72:	f000 8083 	beq.w	8003d7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d15e      	bne.n	8003d3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a08      	ldr	r2, [pc, #32]	@ (8003ca4 <HAL_RCC_OscConfig+0x4b8>)
 8003c84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7ff fa4f 	bl	800312c <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c90:	e00c      	b.n	8003cac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c92:	f7ff fa4b 	bl	800312c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d905      	bls.n	8003cac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e0ab      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cac:	4b55      	ldr	r3, [pc, #340]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ec      	bne.n	8003c92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb8:	4b52      	ldr	r3, [pc, #328]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	4b52      	ldr	r3, [pc, #328]	@ (8003e08 <HAL_RCC_OscConfig+0x61c>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6a11      	ldr	r1, [r2, #32]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cc8:	3a01      	subs	r2, #1
 8003cca:	0112      	lsls	r2, r2, #4
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003cd2:	0212      	lsls	r2, r2, #8
 8003cd4:	4311      	orrs	r1, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cda:	0852      	lsrs	r2, r2, #1
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0552      	lsls	r2, r2, #21
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ce6:	0852      	lsrs	r2, r2, #1
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	0652      	lsls	r2, r2, #25
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cf2:	06d2      	lsls	r2, r2, #27
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	4943      	ldr	r1, [pc, #268]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b41      	ldr	r3, [pc, #260]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a40      	ldr	r2, [pc, #256]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d08:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7ff fa0a 	bl	800312c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7ff fa06 	bl	800312c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e066      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	4b35      	ldr	r3, [pc, #212]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x530>
 8003d3a:	e05e      	b.n	8003dfa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7ff f9f0 	bl	800312c <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7ff f9ec 	bl	800312c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e04c      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d62:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d6e:	4b25      	ldr	r3, [pc, #148]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	4924      	ldr	r1, [pc, #144]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d74:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <HAL_RCC_OscConfig+0x620>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	60cb      	str	r3, [r1, #12]
 8003d7a:	e03e      	b.n	8003dfa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e039      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d88:	4b1e      	ldr	r3, [pc, #120]	@ (8003e04 <HAL_RCC_OscConfig+0x618>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0203 	and.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d12c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	3b01      	subs	r3, #1
 8003da8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d123      	bne.n	8003df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d11b      	bne.n	8003df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d113      	bne.n	8003df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	3b01      	subs	r3, #1
 8003df0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40021000 	.word	0x40021000
 8003e08:	019f800c 	.word	0x019f800c
 8003e0c:	feeefffc 	.word	0xfeeefffc

08003e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e11e      	b.n	8004066 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b91      	ldr	r3, [pc, #580]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b8e      	ldr	r3, [pc, #568]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 020f 	bic.w	r2, r3, #15
 8003e3e:	498c      	ldr	r1, [pc, #560]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b8a      	ldr	r3, [pc, #552]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e106      	b.n	8004066 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d073      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d129      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6c:	4b81      	ldr	r3, [pc, #516]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0f4      	b.n	8004066 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e7c:	f000 f99e 	bl	80041bc <RCC_GetSysClockFreqFromPLLSource>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4a7c      	ldr	r2, [pc, #496]	@ (8004078 <HAL_RCC_ClockConfig+0x268>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d93f      	bls.n	8003f0a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d033      	beq.n	8003f0a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d12f      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eaa:	4b72      	ldr	r3, [pc, #456]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eb2:	4a70      	ldr	r2, [pc, #448]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eb8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	e024      	b.n	8003f0a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0c6      	b.n	8004066 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed8:	4b66      	ldr	r3, [pc, #408]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0be      	b.n	8004066 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ee8:	f000 f8ce 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4a61      	ldr	r2, [pc, #388]	@ (8004078 <HAL_RCC_ClockConfig+0x268>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d909      	bls.n	8003f0a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003efe:	4a5d      	ldr	r2, [pc, #372]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f06:	2380      	movs	r3, #128	@ 0x80
 8003f08:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4957      	ldr	r1, [pc, #348]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7ff f906 	bl	800312c <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7ff f902 	bl	800312c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e095      	b.n	8004066 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d023      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f64:	4b43      	ldr	r3, [pc, #268]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a42      	ldr	r2, [pc, #264]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f6e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f84:	4a3b      	ldr	r2, [pc, #236]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8c:	4b39      	ldr	r3, [pc, #228]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4936      	ldr	r1, [pc, #216]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fa6:	4b33      	ldr	r3, [pc, #204]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4a32      	ldr	r2, [pc, #200]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8003fac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fb0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d21d      	bcs.n	8003ffc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 020f 	bic.w	r2, r3, #15
 8003fc8:	4929      	ldr	r1, [pc, #164]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fd0:	f7ff f8ac 	bl	800312c <HAL_GetTick>
 8003fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd8:	f7ff f8a8 	bl	800312c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e03b      	b.n	8004066 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1ed      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004008:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4917      	ldr	r1, [pc, #92]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004026:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	490f      	ldr	r1, [pc, #60]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800403a:	f000 f825 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 800403e:	4602      	mov	r2, r0
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <HAL_RCC_ClockConfig+0x264>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	490c      	ldr	r1, [pc, #48]	@ (800407c <HAL_RCC_ClockConfig+0x26c>)
 800404c:	5ccb      	ldrb	r3, [r1, r3]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	4a0a      	ldr	r2, [pc, #40]	@ (8004080 <HAL_RCC_ClockConfig+0x270>)
 8004058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800405a:	4b0a      	ldr	r3, [pc, #40]	@ (8004084 <HAL_RCC_ClockConfig+0x274>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff f818 	bl	8003094 <HAL_InitTick>
 8004064:	4603      	mov	r3, r0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40022000 	.word	0x40022000
 8004074:	40021000 	.word	0x40021000
 8004078:	04c4b400 	.word	0x04c4b400
 800407c:	0800bef4 	.word	0x0800bef4
 8004080:	20000018 	.word	0x20000018
 8004084:	2000001c 	.word	0x2000001c

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800408e:	4b2c      	ldr	r3, [pc, #176]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b04      	cmp	r3, #4
 8004098:	d102      	bne.n	80040a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800409a:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <HAL_RCC_GetSysClockFreq+0xbc>)
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	e047      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040a0:	4b27      	ldr	r3, [pc, #156]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d102      	bne.n	80040b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040ac:	4b26      	ldr	r3, [pc, #152]	@ (8004148 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e03e      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80040b2:	4b23      	ldr	r3, [pc, #140]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d136      	bne.n	800412c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040be:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	3301      	adds	r3, #1
 80040d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d10c      	bne.n	80040f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004148 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	4a16      	ldr	r2, [pc, #88]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e6:	68d2      	ldr	r2, [r2, #12]
 80040e8:	0a12      	lsrs	r2, r2, #8
 80040ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	617b      	str	r3, [r7, #20]
      break;
 80040f4:	e00c      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f6:	4a13      	ldr	r2, [pc, #76]	@ (8004144 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fe:	4a10      	ldr	r2, [pc, #64]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004100:	68d2      	ldr	r2, [r2, #12]
 8004102:	0a12      	lsrs	r2, r2, #8
 8004104:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
      break;
 800410e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0e5b      	lsrs	r3, r3, #25
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	3301      	adds	r3, #1
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e001      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004130:	693b      	ldr	r3, [r7, #16]
}
 8004132:	4618      	mov	r0, r3
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	00f42400 	.word	0x00f42400
 8004148:	007a1200 	.word	0x007a1200

0800414c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004150:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <HAL_RCC_GetHCLKFreq+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000018 	.word	0x20000018

08004164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004168:	f7ff fff0 	bl	800414c <HAL_RCC_GetHCLKFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	4904      	ldr	r1, [pc, #16]	@ (800418c <HAL_RCC_GetPCLK1Freq+0x28>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000
 800418c:	0800bf04 	.word	0x0800bf04

08004190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004194:	f7ff ffda 	bl	800414c <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0adb      	lsrs	r3, r3, #11
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4904      	ldr	r1, [pc, #16]	@ (80041b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000
 80041b8:	0800bf04 	.word	0x0800bf04

080041bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041cc:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d10c      	bne.n	80041fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041e0:	4a17      	ldr	r2, [pc, #92]	@ (8004240 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	4a14      	ldr	r2, [pc, #80]	@ (800423c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ea:	68d2      	ldr	r2, [r2, #12]
 80041ec:	0a12      	lsrs	r2, r2, #8
 80041ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	617b      	str	r3, [r7, #20]
    break;
 80041f8:	e00c      	b.n	8004214 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041fa:	4a12      	ldr	r2, [pc, #72]	@ (8004244 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	4a0e      	ldr	r2, [pc, #56]	@ (800423c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	0a12      	lsrs	r2, r2, #8
 8004208:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
    break;
 8004212:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004214:	4b09      	ldr	r3, [pc, #36]	@ (800423c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	0e5b      	lsrs	r3, r3, #25
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	3301      	adds	r3, #1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800422e:	687b      	ldr	r3, [r7, #4]
}
 8004230:	4618      	mov	r0, r3
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40021000 	.word	0x40021000
 8004240:	007a1200 	.word	0x007a1200
 8004244:	00f42400 	.word	0x00f42400

08004248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004250:	2300      	movs	r3, #0
 8004252:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004254:	2300      	movs	r3, #0
 8004256:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8098 	beq.w	8004396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426a:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10d      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	4b40      	ldr	r3, [pc, #256]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427a:	4a3f      	ldr	r2, [pc, #252]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004280:	6593      	str	r3, [r2, #88]	@ 0x58
 8004282:	4b3d      	ldr	r3, [pc, #244]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428e:	2301      	movs	r3, #1
 8004290:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004292:	4b3a      	ldr	r3, [pc, #232]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a39      	ldr	r2, [pc, #228]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800429c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800429e:	f7fe ff45 	bl	800312c <HAL_GetTick>
 80042a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042a4:	e009      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a6:	f7fe ff41 	bl	800312c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d902      	bls.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	74fb      	strb	r3, [r7, #19]
        break;
 80042b8:	e005      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ba:	4b30      	ldr	r3, [pc, #192]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0ef      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042c6:	7cfb      	ldrb	r3, [r7, #19]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d159      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01e      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d019      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042e8:	4b23      	ldr	r3, [pc, #140]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042f4:	4b20      	ldr	r3, [pc, #128]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004304:	4b1c      	ldr	r3, [pc, #112]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430a:	4a1b      	ldr	r2, [pc, #108]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800430c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004314:	4a18      	ldr	r2, [pc, #96]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004326:	f7fe ff01 	bl	800312c <HAL_GetTick>
 800432a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800432c:	e00b      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fe fefd 	bl	800312c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d902      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	74fb      	strb	r3, [r7, #19]
            break;
 8004344:	e006      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004346:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ec      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	4903      	ldr	r1, [pc, #12]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004370:	e008      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	74bb      	strb	r3, [r7, #18]
 8004376:	e005      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004378:	40021000 	.word	0x40021000
 800437c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004384:	7c7b      	ldrb	r3, [r7, #17]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d105      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438a:	4ba6      	ldr	r3, [pc, #664]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	4aa5      	ldr	r2, [pc, #660]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004390:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004394:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043a2:	4ba0      	ldr	r3, [pc, #640]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a8:	f023 0203 	bic.w	r2, r3, #3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	499c      	ldr	r1, [pc, #624]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043c4:	4b97      	ldr	r3, [pc, #604]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	f023 020c 	bic.w	r2, r3, #12
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4994      	ldr	r1, [pc, #592]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	498b      	ldr	r1, [pc, #556]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004408:	4b86      	ldr	r3, [pc, #536]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	4983      	ldr	r1, [pc, #524]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800442a:	4b7e      	ldr	r3, [pc, #504]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	497a      	ldr	r1, [pc, #488]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444c:	4b75      	ldr	r3, [pc, #468]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	4972      	ldr	r1, [pc, #456]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800446e:	4b6d      	ldr	r3, [pc, #436]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004474:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4969      	ldr	r1, [pc, #420]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004490:	4b64      	ldr	r3, [pc, #400]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	4961      	ldr	r1, [pc, #388]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	4958      	ldr	r1, [pc, #352]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d4:	4b53      	ldr	r3, [pc, #332]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e2:	4950      	ldr	r1, [pc, #320]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800450c:	4b45      	ldr	r3, [pc, #276]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451a:	4942      	ldr	r1, [pc, #264]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800452c:	4b3d      	ldr	r3, [pc, #244]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a3c      	ldr	r2, [pc, #240]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004536:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004544:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	4934      	ldr	r1, [pc, #208]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004562:	d105      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004564:	4b2f      	ldr	r3, [pc, #188]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a2e      	ldr	r2, [pc, #184]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800456e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d015      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800457c:	4b29      	ldr	r3, [pc, #164]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004582:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	4926      	ldr	r1, [pc, #152]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004596:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800459a:	d105      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800459c:	4b21      	ldr	r3, [pc, #132]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a20      	ldr	r2, [pc, #128]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d015      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c2:	4918      	ldr	r1, [pc, #96]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045d2:	d105      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4a12      	ldr	r2, [pc, #72]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fa:	490a      	ldr	r1, [pc, #40]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800460a:	d105      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800460c:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a04      	ldr	r2, [pc, #16]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004616:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004618:	7cbb      	ldrb	r3, [r7, #18]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e09d      	b.n	8004776 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800464a:	d009      	beq.n	8004660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
 8004652:	e005      	b.n	8004660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fe f9b8 	bl	80029f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004696:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046a0:	d902      	bls.n	80046a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e002      	b.n	80046ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80046b6:	d007      	beq.n	80046c8 <HAL_SPI_Init+0xa0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	ea42 0103 	orr.w	r1, r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	0c1b      	lsrs	r3, r3, #16
 8004724:	f003 0204 	and.w	r2, r3, #4
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004744:	ea42 0103 	orr.w	r1, r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004764:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b088      	sub	sp, #32
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800478e:	f7fe fccd 	bl	800312c <HAL_GetTick>
 8004792:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
 80047a6:	e15c      	b.n	8004a62 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Transmit+0x36>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e154      	b.n	8004a62 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_SPI_Transmit+0x48>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e14d      	b.n	8004a62 <HAL_SPI_Transmit+0x2e4>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2203      	movs	r2, #3
 80047d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004818:	d10f      	bne.n	800483a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d007      	beq.n	8004858 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004860:	d952      	bls.n	8004908 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_SPI_Transmit+0xf2>
 800486a:	8b7b      	ldrh	r3, [r7, #26]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d145      	bne.n	80048fc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	881a      	ldrh	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	1c9a      	adds	r2, r3, #2
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004894:	e032      	b.n	80048fc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d112      	bne.n	80048ca <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	881a      	ldrh	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048c8:	e018      	b.n	80048fc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ca:	f7fe fc2f 	bl	800312c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d803      	bhi.n	80048e2 <HAL_SPI_Transmit+0x164>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e0:	d102      	bne.n	80048e8 <HAL_SPI_Transmit+0x16a>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0b2      	b.n	8004a62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1c7      	bne.n	8004896 <HAL_SPI_Transmit+0x118>
 8004906:	e083      	b.n	8004a10 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <HAL_SPI_Transmit+0x198>
 8004910:	8b7b      	ldrh	r3, [r7, #26]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d177      	bne.n	8004a06 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d912      	bls.n	8004946 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004924:	881a      	ldrh	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	1c9a      	adds	r2, r3, #2
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b02      	subs	r3, #2
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004944:	e05f      	b.n	8004a06 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800496c:	e04b      	b.n	8004a06 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d12b      	bne.n	80049d4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d912      	bls.n	80049ac <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	881a      	ldrh	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	1c9a      	adds	r2, r3, #2
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b02      	subs	r3, #2
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049aa:	e02c      	b.n	8004a06 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049d2:	e018      	b.n	8004a06 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d4:	f7fe fbaa 	bl	800312c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d803      	bhi.n	80049ec <HAL_SPI_Transmit+0x26e>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ea:	d102      	bne.n	80049f2 <HAL_SPI_Transmit+0x274>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e02d      	b.n	8004a62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ae      	bne.n	800496e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fcf5 	bl	8005404 <SPI_EndRxTxTransaction>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e000      	b.n	8004a62 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004a60:	2300      	movs	r3, #0
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b088      	sub	sp, #32
 8004a6e:	af02      	add	r7, sp, #8
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d001      	beq.n	8004a8a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
 8004a88:	e123      	b.n	8004cd2 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_SPI_Receive+0x2c>
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e11b      	b.n	8004cd2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa2:	d112      	bne.n	8004aca <HAL_SPI_Receive+0x60>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10e      	bne.n	8004aca <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f90a 	bl	8004cda <HAL_SPI_TransmitReceive>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	e103      	b.n	8004cd2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aca:	f7fe fb2f 	bl	800312c <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_SPI_Receive+0x74>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e0f9      	b.n	8004cd2 <HAL_SPI_Receive+0x268>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b30:	d908      	bls.n	8004b44 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	e007      	b.n	8004b54 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b5c:	d10f      	bne.n	8004b7e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b40      	cmp	r3, #64	@ 0x40
 8004b8a:	d007      	beq.n	8004b9c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ba4:	d875      	bhi.n	8004c92 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ba6:	e037      	b.n	8004c18 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d117      	bne.n	8004be6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f103 020c 	add.w	r2, r3, #12
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	7812      	ldrb	r2, [r2, #0]
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004be4:	e018      	b.n	8004c18 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004be6:	f7fe faa1 	bl	800312c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d803      	bhi.n	8004bfe <HAL_SPI_Receive+0x194>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bfc:	d102      	bne.n	8004c04 <HAL_SPI_Receive+0x19a>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e05c      	b.n	8004cd2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1c1      	bne.n	8004ba8 <HAL_SPI_Receive+0x13e>
 8004c24:	e03b      	b.n	8004c9e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d115      	bne.n	8004c60 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004c5e:	e018      	b.n	8004c92 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c60:	f7fe fa64 	bl	800312c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d803      	bhi.n	8004c78 <HAL_SPI_Receive+0x20e>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_Receive+0x214>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e01f      	b.n	8004cd2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1c3      	bne.n	8004c26 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 fb56 	bl	8005354 <SPI_EndRxTransaction>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b08a      	sub	sp, #40	@ 0x28
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cec:	f7fe fa1e 	bl	800312c <HAL_GetTick>
 8004cf0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cf8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004d04:	887b      	ldrh	r3, [r7, #2]
 8004d06:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d08:	7ffb      	ldrb	r3, [r7, #31]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d00c      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x4e>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d14:	d106      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <HAL_SPI_TransmitReceive+0x4a>
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d001      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
 8004d26:	e1f3      	b.n	8005110 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x60>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x60>
 8004d34:	887b      	ldrh	r3, [r7, #2]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e1e8      	b.n	8005110 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x72>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e1e1      	b.n	8005110 <HAL_SPI_TransmitReceive+0x436>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d003      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2205      	movs	r2, #5
 8004d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004daa:	d802      	bhi.n	8004db2 <HAL_SPI_TransmitReceive+0xd8>
 8004dac:	8abb      	ldrh	r3, [r7, #20]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d908      	bls.n	8004dc4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dc0:	605a      	str	r2, [r3, #4]
 8004dc2:	e007      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dd2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dde:	2b40      	cmp	r3, #64	@ 0x40
 8004de0:	d007      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004df0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dfa:	f240 8083 	bls.w	8004f04 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x132>
 8004e06:	8afb      	ldrh	r3, [r7, #22]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d16f      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e30:	e05c      	b.n	8004eec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d11b      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x19e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x19e>
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d113      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d11c      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x1e6>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	b292      	uxth	r2, r2
 8004e9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	1c9a      	adds	r2, r3, #2
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec0:	f7fe f934 	bl	800312c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d80d      	bhi.n	8004eec <HAL_SPI_TransmitReceive+0x212>
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ed6:	d009      	beq.n	8004eec <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e111      	b.n	8005110 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d19d      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x158>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d197      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x158>
 8004f02:	e0e5      	b.n	80050d0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x23a>
 8004f0c:	8afb      	ldrh	r3, [r7, #22]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	f040 80d1 	bne.w	80050b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d912      	bls.n	8004f44 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	881a      	ldrh	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2e:	1c9a      	adds	r2, r3, #2
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b02      	subs	r3, #2
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f42:	e0b8      	b.n	80050b6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6a:	e0a4      	b.n	80050b6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d134      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x30a>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02f      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x30a>
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d12c      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d912      	bls.n	8004fba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	881a      	ldrh	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	1c9a      	adds	r2, r3, #2
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b02      	subs	r3, #2
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fb8:	e012      	b.n	8004fe0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d148      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x3aa>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d042      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	d923      	bls.n	8005052 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	b292      	uxth	r2, r2
 8005016:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b02      	subs	r3, #2
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d81f      	bhi.n	8005080 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	e016      	b.n	8005080 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f103 020c 	add.w	r2, r3, #12
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	7812      	ldrb	r2, [r2, #0]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005080:	2301      	movs	r3, #1
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005084:	f7fe f852 	bl	800312c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005090:	429a      	cmp	r2, r3
 8005092:	d803      	bhi.n	800509c <HAL_SPI_TransmitReceive+0x3c2>
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800509a:	d102      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x3c8>
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e02c      	b.n	8005110 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af55 	bne.w	8004f6c <HAL_SPI_TransmitReceive+0x292>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f47f af4e 	bne.w	8004f6c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f995 	bl	8005404 <SPI_EndRxTxTransaction>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e00e      	b.n	8005110 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800510e:	2300      	movs	r3, #0
  }
}
 8005110:	4618      	mov	r0, r3
 8005112:	3728      	adds	r7, #40	@ 0x28
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005128:	f7fe f800 	bl	800312c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	4413      	add	r3, r2
 8005136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005138:	f7fd fff8 	bl	800312c <HAL_GetTick>
 800513c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800513e:	4b39      	ldr	r3, [pc, #228]	@ (8005224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	015b      	lsls	r3, r3, #5
 8005144:	0d1b      	lsrs	r3, r3, #20
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	fb02 f303 	mul.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800514e:	e054      	b.n	80051fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005156:	d050      	beq.n	80051fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005158:	f7fd ffe8 	bl	800312c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	429a      	cmp	r2, r3
 8005166:	d902      	bls.n	800516e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d13d      	bne.n	80051ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800517c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005186:	d111      	bne.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005190:	d004      	beq.n	800519c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519a:	d107      	bne.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b4:	d10f      	bne.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e017      	b.n	800521a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d19b      	bne.n	8005150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000018 	.word	0x20000018

08005228 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	@ 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800523a:	f7fd ff77 	bl	800312c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4413      	add	r3, r2
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800524a:	f7fd ff6f 	bl	800312c <HAL_GetTick>
 800524e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005258:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	00da      	lsls	r2, r3, #3
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	0d1b      	lsrs	r3, r3, #20
 8005268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005270:	e060      	b.n	8005334 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005278:	d107      	bne.n	800528a <SPI_WaitFifoStateUntilTimeout+0x62>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005288:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005290:	d050      	beq.n	8005334 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005292:	f7fd ff4b 	bl	800312c <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529e:	429a      	cmp	r2, r3
 80052a0:	d902      	bls.n	80052a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d13d      	bne.n	8005324 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052c0:	d111      	bne.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052ca:	d004      	beq.n	80052d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d4:	d107      	bne.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ee:	d10f      	bne.n	8005310 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800530e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e010      	b.n	8005346 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	3b01      	subs	r3, #1
 8005332:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d196      	bne.n	8005272 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3728      	adds	r7, #40	@ 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000018 	.word	0x20000018

08005354 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005368:	d111      	bne.n	800538e <SPI_EndRxTransaction+0x3a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005372:	d004      	beq.n	800537e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537c:	d107      	bne.n	800538e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800538c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff febd 	bl	8005118 <SPI_WaitFlagStateUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e023      	b.n	80053fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053bc:	d11d      	bne.n	80053fa <SPI_EndRxTransaction+0xa6>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c6:	d004      	beq.n	80053d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d0:	d113      	bne.n	80053fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff ff22 	bl	8005228 <SPI_WaitFifoStateUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e000      	b.n	80053fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7ff ff03 	bl	8005228 <SPI_WaitFifoStateUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542c:	f043 0220 	orr.w	r2, r3, #32
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e027      	b.n	8005488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2200      	movs	r2, #0
 8005440:	2180      	movs	r1, #128	@ 0x80
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7ff fe68 	bl	8005118 <SPI_WaitFlagStateUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005452:	f043 0220 	orr.w	r2, r3, #32
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e014      	b.n	8005488 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff fedc 	bl	8005228 <SPI_WaitFifoStateUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e000      	b.n	8005488 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e049      	b.n	8005536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fd fb2c 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 fcd8 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e049      	b.n	80055e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f841 	bl	80055ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f000 fc81 	bl	8005e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <HAL_TIM_PWM_Start+0x24>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b01      	cmp	r3, #1
 800561a:	bf14      	ite	ne
 800561c:	2301      	movne	r3, #1
 800561e:	2300      	moveq	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	e03c      	b.n	800569e <HAL_TIM_PWM_Start+0x9e>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b04      	cmp	r3, #4
 8005628:	d109      	bne.n	800563e <HAL_TIM_PWM_Start+0x3e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b01      	cmp	r3, #1
 8005634:	bf14      	ite	ne
 8005636:	2301      	movne	r3, #1
 8005638:	2300      	moveq	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	e02f      	b.n	800569e <HAL_TIM_PWM_Start+0x9e>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d109      	bne.n	8005658 <HAL_TIM_PWM_Start+0x58>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e022      	b.n	800569e <HAL_TIM_PWM_Start+0x9e>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b0c      	cmp	r3, #12
 800565c:	d109      	bne.n	8005672 <HAL_TIM_PWM_Start+0x72>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	bf14      	ite	ne
 800566a:	2301      	movne	r3, #1
 800566c:	2300      	moveq	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	e015      	b.n	800569e <HAL_TIM_PWM_Start+0x9e>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b10      	cmp	r3, #16
 8005676:	d109      	bne.n	800568c <HAL_TIM_PWM_Start+0x8c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	e008      	b.n	800569e <HAL_TIM_PWM_Start+0x9e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	bf14      	ite	ne
 8005698:	2301      	movne	r3, #1
 800569a:	2300      	moveq	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e097      	b.n	80057d6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_TIM_PWM_Start+0xb6>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056b4:	e023      	b.n	80056fe <HAL_TIM_PWM_Start+0xfe>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_PWM_Start+0xc6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c4:	e01b      	b.n	80056fe <HAL_TIM_PWM_Start+0xfe>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_PWM_Start+0xd6>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056d4:	e013      	b.n	80056fe <HAL_TIM_PWM_Start+0xfe>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b0c      	cmp	r3, #12
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_PWM_Start+0xe6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e4:	e00b      	b.n	80056fe <HAL_TIM_PWM_Start+0xfe>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Start+0xf6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f4:	e003      	b.n	80056fe <HAL_TIM_PWM_Start+0xfe>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2201      	movs	r2, #1
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 ffea 	bl	80066e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a33      	ldr	r2, [pc, #204]	@ (80057e0 <HAL_TIM_PWM_Start+0x1e0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_TIM_PWM_Start+0x13e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a32      	ldr	r2, [pc, #200]	@ (80057e4 <HAL_TIM_PWM_Start+0x1e4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_TIM_PWM_Start+0x13e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a30      	ldr	r2, [pc, #192]	@ (80057e8 <HAL_TIM_PWM_Start+0x1e8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_TIM_PWM_Start+0x13e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2f      	ldr	r2, [pc, #188]	@ (80057ec <HAL_TIM_PWM_Start+0x1ec>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_TIM_PWM_Start+0x13e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2d      	ldr	r2, [pc, #180]	@ (80057f0 <HAL_TIM_PWM_Start+0x1f0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <HAL_TIM_PWM_Start+0x142>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_TIM_PWM_Start+0x144>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005756:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a20      	ldr	r2, [pc, #128]	@ (80057e0 <HAL_TIM_PWM_Start+0x1e0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d018      	beq.n	8005794 <HAL_TIM_PWM_Start+0x194>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576a:	d013      	beq.n	8005794 <HAL_TIM_PWM_Start+0x194>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a20      	ldr	r2, [pc, #128]	@ (80057f4 <HAL_TIM_PWM_Start+0x1f4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_TIM_PWM_Start+0x194>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1f      	ldr	r2, [pc, #124]	@ (80057f8 <HAL_TIM_PWM_Start+0x1f8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_TIM_PWM_Start+0x194>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <HAL_TIM_PWM_Start+0x1e4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_TIM_PWM_Start+0x194>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <HAL_TIM_PWM_Start+0x1e8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d115      	bne.n	80057c0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <HAL_TIM_PWM_Start+0x1fc>)
 800579c:	4013      	ands	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b06      	cmp	r3, #6
 80057a4:	d015      	beq.n	80057d2 <HAL_TIM_PWM_Start+0x1d2>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ac:	d011      	beq.n	80057d2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	e008      	b.n	80057d2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e000      	b.n	80057d4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	00010007 	.word	0x00010007

08005800 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e097      	b.n	8005944 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fd f9a5 	bl	8002b78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005844:	f023 0307 	bic.w	r3, r3, #7
 8005848:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f000 fb15 	bl	8005e84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	4313      	orrs	r3, r2
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80058a0:	f023 030c 	bic.w	r3, r3, #12
 80058a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	4313      	orrs	r3, r2
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	011a      	lsls	r2, r3, #4
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	031b      	lsls	r3, r3, #12
 80058d0:	4313      	orrs	r3, r2
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	4313      	orrs	r3, r2
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800595c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005964:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800596c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005974:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d110      	bne.n	800599e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d102      	bne.n	8005988 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005982:	7b7b      	ldrb	r3, [r7, #13]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d001      	beq.n	800598c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e069      	b.n	8005a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800599c:	e031      	b.n	8005a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d110      	bne.n	80059c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d102      	bne.n	80059b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059aa:	7b3b      	ldrb	r3, [r7, #12]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d001      	beq.n	80059b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e055      	b.n	8005a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059c4:	e01d      	b.n	8005a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d108      	bne.n	80059de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059d2:	7b7b      	ldrb	r3, [r7, #13]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d102      	bne.n	80059de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059d8:	7b3b      	ldrb	r3, [r7, #12]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d001      	beq.n	80059e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e03e      	b.n	8005a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_TIM_Encoder_Start+0xc4>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d008      	beq.n	8005a20 <HAL_TIM_Encoder_Start+0xd4>
 8005a0e:	e00f      	b.n	8005a30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	2100      	movs	r1, #0
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fe61 	bl	80066e0 <TIM_CCxChannelCmd>
      break;
 8005a1e:	e016      	b.n	8005a4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2201      	movs	r2, #1
 8005a26:	2104      	movs	r1, #4
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fe59 	bl	80066e0 <TIM_CCxChannelCmd>
      break;
 8005a2e:	e00e      	b.n	8005a4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2201      	movs	r2, #1
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fe51 	bl	80066e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2201      	movs	r2, #1
 8005a44:	2104      	movs	r1, #4
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fe4a 	bl	80066e0 <TIM_CCxChannelCmd>
      break;
 8005a4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0201 	orr.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e0ff      	b.n	8005c86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b14      	cmp	r3, #20
 8005a92:	f200 80f0 	bhi.w	8005c76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005c77 	.word	0x08005c77
 8005aa4:	08005c77 	.word	0x08005c77
 8005aa8:	08005c77 	.word	0x08005c77
 8005aac:	08005b31 	.word	0x08005b31
 8005ab0:	08005c77 	.word	0x08005c77
 8005ab4:	08005c77 	.word	0x08005c77
 8005ab8:	08005c77 	.word	0x08005c77
 8005abc:	08005b73 	.word	0x08005b73
 8005ac0:	08005c77 	.word	0x08005c77
 8005ac4:	08005c77 	.word	0x08005c77
 8005ac8:	08005c77 	.word	0x08005c77
 8005acc:	08005bb3 	.word	0x08005bb3
 8005ad0:	08005c77 	.word	0x08005c77
 8005ad4:	08005c77 	.word	0x08005c77
 8005ad8:	08005c77 	.word	0x08005c77
 8005adc:	08005bf5 	.word	0x08005bf5
 8005ae0:	08005c77 	.word	0x08005c77
 8005ae4:	08005c77 	.word	0x08005c77
 8005ae8:	08005c77 	.word	0x08005c77
 8005aec:	08005c35 	.word	0x08005c35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fa60 	bl	8005fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0208 	orr.w	r2, r2, #8
 8005b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0204 	bic.w	r2, r2, #4
 8005b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	619a      	str	r2, [r3, #24]
      break;
 8005b2e:	e0a5      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fad0 	bl	80060dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6999      	ldr	r1, [r3, #24]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	021a      	lsls	r2, r3, #8
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	619a      	str	r2, [r3, #24]
      break;
 8005b70:	e084      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fb39 	bl	80061f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0208 	orr.w	r2, r2, #8
 8005b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0204 	bic.w	r2, r2, #4
 8005b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69d9      	ldr	r1, [r3, #28]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	61da      	str	r2, [r3, #28]
      break;
 8005bb0:	e064      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fba1 	bl	8006300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69d9      	ldr	r1, [r3, #28]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	021a      	lsls	r2, r3, #8
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	61da      	str	r2, [r3, #28]
      break;
 8005bf2:	e043      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fc0a 	bl	8006414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c32:	e023      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fc4e 	bl	80064dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c74:	e002      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop

08005c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_TIM_ConfigClockSource+0x1c>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e0de      	b.n	8005e6a <HAL_TIM_ConfigClockSource+0x1da>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a63      	ldr	r2, [pc, #396]	@ (8005e74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	f000 80a9 	beq.w	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005cec:	4a61      	ldr	r2, [pc, #388]	@ (8005e74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f200 80ae 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005cf4:	4a60      	ldr	r2, [pc, #384]	@ (8005e78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f000 80a1 	beq.w	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005cfc:	4a5e      	ldr	r2, [pc, #376]	@ (8005e78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	f200 80a6 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d04:	4a5d      	ldr	r2, [pc, #372]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	f000 8099 	beq.w	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005d0c:	4a5b      	ldr	r2, [pc, #364]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	f200 809e 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d14:	4a5a      	ldr	r2, [pc, #360]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f000 8091 	beq.w	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005d1c:	4a58      	ldr	r2, [pc, #352]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	f200 8096 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d28:	f000 8089 	beq.w	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005d2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d30:	f200 808e 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d38:	d03e      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0x128>
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3e:	f200 8087 	bhi.w	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d46:	f000 8086 	beq.w	8005e56 <HAL_TIM_ConfigClockSource+0x1c6>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4e:	d87f      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d50:	2b70      	cmp	r3, #112	@ 0x70
 8005d52:	d01a      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0xfa>
 8005d54:	2b70      	cmp	r3, #112	@ 0x70
 8005d56:	d87b      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d58:	2b60      	cmp	r3, #96	@ 0x60
 8005d5a:	d050      	beq.n	8005dfe <HAL_TIM_ConfigClockSource+0x16e>
 8005d5c:	2b60      	cmp	r3, #96	@ 0x60
 8005d5e:	d877      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d60:	2b50      	cmp	r3, #80	@ 0x50
 8005d62:	d03c      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x14e>
 8005d64:	2b50      	cmp	r3, #80	@ 0x50
 8005d66:	d873      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d68:	2b40      	cmp	r3, #64	@ 0x40
 8005d6a:	d058      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0x18e>
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	d86f      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d70:	2b30      	cmp	r3, #48	@ 0x30
 8005d72:	d064      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005d74:	2b30      	cmp	r3, #48	@ 0x30
 8005d76:	d86b      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d060      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d867      	bhi.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d05c      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d05a      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x1ae>
 8005d88:	e062      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d9a:	f000 fc81 	bl	80066a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	609a      	str	r2, [r3, #8]
      break;
 8005db6:	e04f      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dc8:	f000 fc6a 	bl	80066a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dda:	609a      	str	r2, [r3, #8]
      break;
 8005ddc:	e03c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dea:	461a      	mov	r2, r3
 8005dec:	f000 fbdc 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2150      	movs	r1, #80	@ 0x50
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fc35 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005dfc:	e02c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f000 fbfb 	bl	8006606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2160      	movs	r1, #96	@ 0x60
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fc25 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005e1c:	e01c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f000 fbbc 	bl	80065a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2140      	movs	r1, #64	@ 0x40
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fc15 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005e3c:	e00c      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f000 fc0c 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8005e4e:	e003      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	e000      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	00100070 	.word	0x00100070
 8005e78:	00100040 	.word	0x00100040
 8005e7c:	00100030 	.word	0x00100030
 8005e80:	00100020 	.word	0x00100020

08005e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a42      	ldr	r2, [pc, #264]	@ (8005fa0 <TIM_Base_SetConfig+0x11c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00f      	beq.n	8005ebc <TIM_Base_SetConfig+0x38>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d00b      	beq.n	8005ebc <TIM_Base_SetConfig+0x38>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8005fa4 <TIM_Base_SetConfig+0x120>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d007      	beq.n	8005ebc <TIM_Base_SetConfig+0x38>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa8 <TIM_Base_SetConfig+0x124>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_Base_SetConfig+0x38>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a3d      	ldr	r2, [pc, #244]	@ (8005fac <TIM_Base_SetConfig+0x128>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d108      	bne.n	8005ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a33      	ldr	r2, [pc, #204]	@ (8005fa0 <TIM_Base_SetConfig+0x11c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d01b      	beq.n	8005f0e <TIM_Base_SetConfig+0x8a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005edc:	d017      	beq.n	8005f0e <TIM_Base_SetConfig+0x8a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a30      	ldr	r2, [pc, #192]	@ (8005fa4 <TIM_Base_SetConfig+0x120>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d013      	beq.n	8005f0e <TIM_Base_SetConfig+0x8a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa8 <TIM_Base_SetConfig+0x124>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00f      	beq.n	8005f0e <TIM_Base_SetConfig+0x8a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8005fac <TIM_Base_SetConfig+0x128>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00b      	beq.n	8005f0e <TIM_Base_SetConfig+0x8a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d007      	beq.n	8005f0e <TIM_Base_SetConfig+0x8a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb4 <TIM_Base_SetConfig+0x130>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d003      	beq.n	8005f0e <TIM_Base_SetConfig+0x8a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb8 <TIM_Base_SetConfig+0x134>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d108      	bne.n	8005f20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a16      	ldr	r2, [pc, #88]	@ (8005fa0 <TIM_Base_SetConfig+0x11c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00f      	beq.n	8005f6c <TIM_Base_SetConfig+0xe8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a17      	ldr	r2, [pc, #92]	@ (8005fac <TIM_Base_SetConfig+0x128>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <TIM_Base_SetConfig+0xe8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a16      	ldr	r2, [pc, #88]	@ (8005fb0 <TIM_Base_SetConfig+0x12c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_Base_SetConfig+0xe8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a15      	ldr	r2, [pc, #84]	@ (8005fb4 <TIM_Base_SetConfig+0x130>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0xe8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a14      	ldr	r2, [pc, #80]	@ (8005fb8 <TIM_Base_SetConfig+0x134>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d103      	bne.n	8005f74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d105      	bne.n	8005f92 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f023 0201 	bic.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	611a      	str	r2, [r3, #16]
  }
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f023 0201 	bic.w	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0302 	bic.w	r3, r3, #2
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a2c      	ldr	r2, [pc, #176]	@ (80060c8 <TIM_OC1_SetConfig+0x10c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00f      	beq.n	800603c <TIM_OC1_SetConfig+0x80>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2b      	ldr	r2, [pc, #172]	@ (80060cc <TIM_OC1_SetConfig+0x110>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_OC1_SetConfig+0x80>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2a      	ldr	r2, [pc, #168]	@ (80060d0 <TIM_OC1_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_OC1_SetConfig+0x80>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a29      	ldr	r2, [pc, #164]	@ (80060d4 <TIM_OC1_SetConfig+0x118>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_OC1_SetConfig+0x80>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a28      	ldr	r2, [pc, #160]	@ (80060d8 <TIM_OC1_SetConfig+0x11c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10c      	bne.n	8006056 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0308 	bic.w	r3, r3, #8
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0304 	bic.w	r3, r3, #4
 8006054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1b      	ldr	r2, [pc, #108]	@ (80060c8 <TIM_OC1_SetConfig+0x10c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00f      	beq.n	800607e <TIM_OC1_SetConfig+0xc2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1a      	ldr	r2, [pc, #104]	@ (80060cc <TIM_OC1_SetConfig+0x110>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00b      	beq.n	800607e <TIM_OC1_SetConfig+0xc2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a19      	ldr	r2, [pc, #100]	@ (80060d0 <TIM_OC1_SetConfig+0x114>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <TIM_OC1_SetConfig+0xc2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a18      	ldr	r2, [pc, #96]	@ (80060d4 <TIM_OC1_SetConfig+0x118>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <TIM_OC1_SetConfig+0xc2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a17      	ldr	r2, [pc, #92]	@ (80060d8 <TIM_OC1_SetConfig+0x11c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d111      	bne.n	80060a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800608c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	621a      	str	r2, [r3, #32]
}
 80060bc:	bf00      	nop
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	40012c00 	.word	0x40012c00
 80060cc:	40013400 	.word	0x40013400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800

080060dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f023 0210 	bic.w	r2, r3, #16
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0320 	bic.w	r3, r3, #32
 800612a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a28      	ldr	r2, [pc, #160]	@ (80061dc <TIM_OC2_SetConfig+0x100>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC2_SetConfig+0x6c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a27      	ldr	r2, [pc, #156]	@ (80061e0 <TIM_OC2_SetConfig+0x104>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d10d      	bne.n	8006164 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800614e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006162:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1d      	ldr	r2, [pc, #116]	@ (80061dc <TIM_OC2_SetConfig+0x100>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00f      	beq.n	800618c <TIM_OC2_SetConfig+0xb0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <TIM_OC2_SetConfig+0x104>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00b      	beq.n	800618c <TIM_OC2_SetConfig+0xb0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <TIM_OC2_SetConfig+0x108>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d007      	beq.n	800618c <TIM_OC2_SetConfig+0xb0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a1a      	ldr	r2, [pc, #104]	@ (80061e8 <TIM_OC2_SetConfig+0x10c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC2_SetConfig+0xb0>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a19      	ldr	r2, [pc, #100]	@ (80061ec <TIM_OC2_SetConfig+0x110>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d113      	bne.n	80061b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800619a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	621a      	str	r2, [r3, #32]
}
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40012c00 	.word	0x40012c00
 80061e0:	40013400 	.word	0x40013400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800

080061f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800621e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800623c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a27      	ldr	r2, [pc, #156]	@ (80062ec <TIM_OC3_SetConfig+0xfc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_OC3_SetConfig+0x6a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a26      	ldr	r2, [pc, #152]	@ (80062f0 <TIM_OC3_SetConfig+0x100>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10d      	bne.n	8006276 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1c      	ldr	r2, [pc, #112]	@ (80062ec <TIM_OC3_SetConfig+0xfc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00f      	beq.n	800629e <TIM_OC3_SetConfig+0xae>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <TIM_OC3_SetConfig+0x100>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00b      	beq.n	800629e <TIM_OC3_SetConfig+0xae>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1a      	ldr	r2, [pc, #104]	@ (80062f4 <TIM_OC3_SetConfig+0x104>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_OC3_SetConfig+0xae>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <TIM_OC3_SetConfig+0x108>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC3_SetConfig+0xae>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a18      	ldr	r2, [pc, #96]	@ (80062fc <TIM_OC3_SetConfig+0x10c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d113      	bne.n	80062c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40013400 	.word	0x40013400
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400
 80062fc:	40014800 	.word	0x40014800

08006300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	021b      	lsls	r3, r3, #8
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800634e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	031b      	lsls	r3, r3, #12
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a28      	ldr	r2, [pc, #160]	@ (8006400 <TIM_OC4_SetConfig+0x100>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_OC4_SetConfig+0x6c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a27      	ldr	r2, [pc, #156]	@ (8006404 <TIM_OC4_SetConfig+0x104>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d10d      	bne.n	8006388 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	031b      	lsls	r3, r3, #12
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1d      	ldr	r2, [pc, #116]	@ (8006400 <TIM_OC4_SetConfig+0x100>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00f      	beq.n	80063b0 <TIM_OC4_SetConfig+0xb0>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a1c      	ldr	r2, [pc, #112]	@ (8006404 <TIM_OC4_SetConfig+0x104>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_OC4_SetConfig+0xb0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1b      	ldr	r2, [pc, #108]	@ (8006408 <TIM_OC4_SetConfig+0x108>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_OC4_SetConfig+0xb0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a1a      	ldr	r2, [pc, #104]	@ (800640c <TIM_OC4_SetConfig+0x10c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_OC4_SetConfig+0xb0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <TIM_OC4_SetConfig+0x110>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d113      	bne.n	80063d8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	019b      	lsls	r3, r3, #6
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	019b      	lsls	r3, r3, #6
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40013400 	.word	0x40013400
 8006408:	40014000 	.word	0x40014000
 800640c:	40014400 	.word	0x40014400
 8006410:	40014800 	.word	0x40014800

08006414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006458:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <TIM_OC5_SetConfig+0xb4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00f      	beq.n	800648e <TIM_OC5_SetConfig+0x7a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a16      	ldr	r2, [pc, #88]	@ (80064cc <TIM_OC5_SetConfig+0xb8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00b      	beq.n	800648e <TIM_OC5_SetConfig+0x7a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a15      	ldr	r2, [pc, #84]	@ (80064d0 <TIM_OC5_SetConfig+0xbc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <TIM_OC5_SetConfig+0x7a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a14      	ldr	r2, [pc, #80]	@ (80064d4 <TIM_OC5_SetConfig+0xc0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d003      	beq.n	800648e <TIM_OC5_SetConfig+0x7a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a13      	ldr	r2, [pc, #76]	@ (80064d8 <TIM_OC5_SetConfig+0xc4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d109      	bne.n	80064a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006494:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	621a      	str	r2, [r3, #32]
}
 80064bc:	bf00      	nop
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	40012c00 	.word	0x40012c00
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	051b      	lsls	r3, r3, #20
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a18      	ldr	r2, [pc, #96]	@ (8006594 <TIM_OC6_SetConfig+0xb8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00f      	beq.n	8006558 <TIM_OC6_SetConfig+0x7c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a17      	ldr	r2, [pc, #92]	@ (8006598 <TIM_OC6_SetConfig+0xbc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00b      	beq.n	8006558 <TIM_OC6_SetConfig+0x7c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a16      	ldr	r2, [pc, #88]	@ (800659c <TIM_OC6_SetConfig+0xc0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_OC6_SetConfig+0x7c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a15      	ldr	r2, [pc, #84]	@ (80065a0 <TIM_OC6_SetConfig+0xc4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_OC6_SetConfig+0x7c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a14      	ldr	r2, [pc, #80]	@ (80065a4 <TIM_OC6_SetConfig+0xc8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d109      	bne.n	800656c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800

080065a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0201 	bic.w	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f023 030a 	bic.w	r3, r3, #10
 80065e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006606:	b480      	push	{r7}
 8006608:	b087      	sub	sp, #28
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f023 0210 	bic.w	r2, r3, #16
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	031b      	lsls	r3, r3, #12
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006642:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800667c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	f043 0307 	orr.w	r3, r3, #7
 800668c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	021a      	lsls	r2, r3, #8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	2201      	movs	r2, #1
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1a      	ldr	r2, [r3, #32]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	43db      	mvns	r3, r3
 8006702:	401a      	ands	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1a      	ldr	r2, [r3, #32]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	6879      	ldr	r1, [r7, #4]
 8006714:	fa01 f303 	lsl.w	r3, r1, r3
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006740:	2302      	movs	r3, #2
 8006742:	e065      	b.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a2c      	ldr	r2, [pc, #176]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a2b      	ldr	r2, [pc, #172]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d108      	bne.n	800678a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800677e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006794:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ba:	d013      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a17      	ldr	r2, [pc, #92]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a12      	ldr	r2, [pc, #72]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a13      	ldr	r2, [pc, #76]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d10c      	bne.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40013400 	.word	0x40013400
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40014000 	.word	0x40014000

08006830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006848:	2302      	movs	r3, #2
 800684a:	e073      	b.n	8006934 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a19      	ldr	r2, [pc, #100]	@ (8006940 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a18      	ldr	r2, [pc, #96]	@ (8006944 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d11c      	bne.n	8006922 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	051b      	lsls	r3, r3, #20
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40013400 	.word	0x40013400

08006948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e042      	b.n	80069e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fc f9d1 	bl	8002d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2224      	movs	r2, #36	@ 0x24
 8006976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0201 	bic.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fb82 	bl	800709c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f8b3 	bl	8006b04 <UART_SetConfig>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e01b      	b.n	80069e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fc01 	bl	80071e0 <UART_CheckIdleState>
 80069de:	4603      	mov	r3, r0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	@ 0x28
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d17b      	bne.n	8006afa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_UART_Transmit+0x26>
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e074      	b.n	8006afc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2221      	movs	r2, #33	@ 0x21
 8006a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a22:	f7fc fb83 	bl	800312c <HAL_GetTick>
 8006a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	88fa      	ldrh	r2, [r7, #6]
 8006a2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a40:	d108      	bne.n	8006a54 <HAL_UART_Transmit+0x6c>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	e003      	b.n	8006a5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a5c:	e030      	b.n	8006ac0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	2180      	movs	r1, #128	@ 0x80
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fc63 	bl	8007334 <UART_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e03d      	b.n	8006afc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	3302      	adds	r3, #2
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	e007      	b.n	8006aae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1c8      	bne.n	8006a5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2140      	movs	r1, #64	@ 0x40
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 fc2c 	bl	8007334 <UART_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e006      	b.n	8006afc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e000      	b.n	8006afc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006afa:	2302      	movs	r3, #2
  }
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b08:	b08c      	sub	sp, #48	@ 0x30
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	431a      	orrs	r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4bab      	ldr	r3, [pc, #684]	@ (8006de0 <UART_SetConfig+0x2dc>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4aa0      	ldr	r2, [pc, #640]	@ (8006de4 <UART_SetConfig+0x2e0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006b7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b84:	430b      	orrs	r3, r1
 8006b86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8e:	f023 010f 	bic.w	r1, r3, #15
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a91      	ldr	r2, [pc, #580]	@ (8006de8 <UART_SetConfig+0x2e4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d125      	bne.n	8006bf4 <UART_SetConfig+0xf0>
 8006ba8:	4b90      	ldr	r3, [pc, #576]	@ (8006dec <UART_SetConfig+0x2e8>)
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d81a      	bhi.n	8006bec <UART_SetConfig+0xe8>
 8006bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <UART_SetConfig+0xb8>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bcd 	.word	0x08006bcd
 8006bc0:	08006bdd 	.word	0x08006bdd
 8006bc4:	08006bd5 	.word	0x08006bd5
 8006bc8:	08006be5 	.word	0x08006be5
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd2:	e0d6      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bda:	e0d2      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006bdc:	2304      	movs	r3, #4
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be2:	e0ce      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006be4:	2308      	movs	r3, #8
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bea:	e0ca      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006bec:	2310      	movs	r3, #16
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf2:	e0c6      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a7d      	ldr	r2, [pc, #500]	@ (8006df0 <UART_SetConfig+0x2ec>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d138      	bne.n	8006c70 <UART_SetConfig+0x16c>
 8006bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8006dec <UART_SetConfig+0x2e8>)
 8006c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c04:	f003 030c 	and.w	r3, r3, #12
 8006c08:	2b0c      	cmp	r3, #12
 8006c0a:	d82d      	bhi.n	8006c68 <UART_SetConfig+0x164>
 8006c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <UART_SetConfig+0x110>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c49 	.word	0x08006c49
 8006c18:	08006c69 	.word	0x08006c69
 8006c1c:	08006c69 	.word	0x08006c69
 8006c20:	08006c69 	.word	0x08006c69
 8006c24:	08006c59 	.word	0x08006c59
 8006c28:	08006c69 	.word	0x08006c69
 8006c2c:	08006c69 	.word	0x08006c69
 8006c30:	08006c69 	.word	0x08006c69
 8006c34:	08006c51 	.word	0x08006c51
 8006c38:	08006c69 	.word	0x08006c69
 8006c3c:	08006c69 	.word	0x08006c69
 8006c40:	08006c69 	.word	0x08006c69
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4e:	e098      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006c50:	2302      	movs	r3, #2
 8006c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c56:	e094      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	e090      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	e08c      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6e:	e088      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a5f      	ldr	r2, [pc, #380]	@ (8006df4 <UART_SetConfig+0x2f0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d125      	bne.n	8006cc6 <UART_SetConfig+0x1c2>
 8006c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8006dec <UART_SetConfig+0x2e8>)
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c84:	2b30      	cmp	r3, #48	@ 0x30
 8006c86:	d016      	beq.n	8006cb6 <UART_SetConfig+0x1b2>
 8006c88:	2b30      	cmp	r3, #48	@ 0x30
 8006c8a:	d818      	bhi.n	8006cbe <UART_SetConfig+0x1ba>
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d00a      	beq.n	8006ca6 <UART_SetConfig+0x1a2>
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d814      	bhi.n	8006cbe <UART_SetConfig+0x1ba>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <UART_SetConfig+0x19a>
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d008      	beq.n	8006cae <UART_SetConfig+0x1aa>
 8006c9c:	e00f      	b.n	8006cbe <UART_SetConfig+0x1ba>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca4:	e06d      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cac:	e069      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006cae:	2304      	movs	r3, #4
 8006cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb4:	e065      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbc:	e061      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006cbe:	2310      	movs	r3, #16
 8006cc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc4:	e05d      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a4b      	ldr	r2, [pc, #300]	@ (8006df8 <UART_SetConfig+0x2f4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d125      	bne.n	8006d1c <UART_SetConfig+0x218>
 8006cd0:	4b46      	ldr	r3, [pc, #280]	@ (8006dec <UART_SetConfig+0x2e8>)
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cdc:	d016      	beq.n	8006d0c <UART_SetConfig+0x208>
 8006cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ce0:	d818      	bhi.n	8006d14 <UART_SetConfig+0x210>
 8006ce2:	2b80      	cmp	r3, #128	@ 0x80
 8006ce4:	d00a      	beq.n	8006cfc <UART_SetConfig+0x1f8>
 8006ce6:	2b80      	cmp	r3, #128	@ 0x80
 8006ce8:	d814      	bhi.n	8006d14 <UART_SetConfig+0x210>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <UART_SetConfig+0x1f0>
 8006cee:	2b40      	cmp	r3, #64	@ 0x40
 8006cf0:	d008      	beq.n	8006d04 <UART_SetConfig+0x200>
 8006cf2:	e00f      	b.n	8006d14 <UART_SetConfig+0x210>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfa:	e042      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d02:	e03e      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d04:	2304      	movs	r3, #4
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0a:	e03a      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d12:	e036      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d14:	2310      	movs	r3, #16
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1a:	e032      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a30      	ldr	r2, [pc, #192]	@ (8006de4 <UART_SetConfig+0x2e0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d12a      	bne.n	8006d7c <UART_SetConfig+0x278>
 8006d26:	4b31      	ldr	r3, [pc, #196]	@ (8006dec <UART_SetConfig+0x2e8>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d34:	d01a      	beq.n	8006d6c <UART_SetConfig+0x268>
 8006d36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d3a:	d81b      	bhi.n	8006d74 <UART_SetConfig+0x270>
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d40:	d00c      	beq.n	8006d5c <UART_SetConfig+0x258>
 8006d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d46:	d815      	bhi.n	8006d74 <UART_SetConfig+0x270>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <UART_SetConfig+0x250>
 8006d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d50:	d008      	beq.n	8006d64 <UART_SetConfig+0x260>
 8006d52:	e00f      	b.n	8006d74 <UART_SetConfig+0x270>
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d5a:	e012      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d62:	e00e      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d64:	2304      	movs	r3, #4
 8006d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d6a:	e00a      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d72:	e006      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d74:	2310      	movs	r3, #16
 8006d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d7a:	e002      	b.n	8006d82 <UART_SetConfig+0x27e>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a17      	ldr	r2, [pc, #92]	@ (8006de4 <UART_SetConfig+0x2e0>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	f040 80a8 	bne.w	8006ede <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d834      	bhi.n	8006e00 <UART_SetConfig+0x2fc>
 8006d96:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <UART_SetConfig+0x298>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006e01 	.word	0x08006e01
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006e01 	.word	0x08006e01
 8006dac:	08006dcf 	.word	0x08006dcf
 8006db0:	08006e01 	.word	0x08006e01
 8006db4:	08006e01 	.word	0x08006e01
 8006db8:	08006e01 	.word	0x08006e01
 8006dbc:	08006dd7 	.word	0x08006dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fd f9d0 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dc6:	e021      	b.n	8006e0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006dfc <UART_SetConfig+0x2f8>)
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dcc:	e01e      	b.n	8006e0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dce:	f7fd f95b 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8006dd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd4:	e01a      	b.n	8006e0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ddc:	e016      	b.n	8006e0c <UART_SetConfig+0x308>
 8006dde:	bf00      	nop
 8006de0:	cfff69f3 	.word	0xcfff69f3
 8006de4:	40008000 	.word	0x40008000
 8006de8:	40013800 	.word	0x40013800
 8006dec:	40021000 	.word	0x40021000
 8006df0:	40004400 	.word	0x40004400
 8006df4:	40004800 	.word	0x40004800
 8006df8:	40004c00 	.word	0x40004c00
 8006dfc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 812a 	beq.w	8007068 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e18:	4a9e      	ldr	r2, [pc, #632]	@ (8007094 <UART_SetConfig+0x590>)
 8006e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e26:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	4413      	add	r3, r2
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d305      	bcc.n	8006e44 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d903      	bls.n	8006e4c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e4a:	e10d      	b.n	8007068 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	2200      	movs	r2, #0
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	60fa      	str	r2, [r7, #12]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	4a8e      	ldr	r2, [pc, #568]	@ (8007094 <UART_SetConfig+0x590>)
 8006e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2200      	movs	r2, #0
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e6e:	f7f9 ff33 	bl	8000cd8 <__aeabi_uldivmod>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4610      	mov	r0, r2
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	020b      	lsls	r3, r1, #8
 8006e84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e88:	0202      	lsls	r2, r0, #8
 8006e8a:	6979      	ldr	r1, [r7, #20]
 8006e8c:	6849      	ldr	r1, [r1, #4]
 8006e8e:	0849      	lsrs	r1, r1, #1
 8006e90:	2000      	movs	r0, #0
 8006e92:	460c      	mov	r4, r1
 8006e94:	4605      	mov	r5, r0
 8006e96:	eb12 0804 	adds.w	r8, r2, r4
 8006e9a:	eb43 0905 	adc.w	r9, r3, r5
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	469a      	mov	sl, r3
 8006ea6:	4693      	mov	fp, r2
 8006ea8:	4652      	mov	r2, sl
 8006eaa:	465b      	mov	r3, fp
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 ff12 	bl	8000cd8 <__aeabi_uldivmod>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4613      	mov	r3, r2
 8006eba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ec2:	d308      	bcc.n	8006ed6 <UART_SetConfig+0x3d2>
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eca:	d204      	bcs.n	8006ed6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	60da      	str	r2, [r3, #12]
 8006ed4:	e0c8      	b.n	8007068 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006edc:	e0c4      	b.n	8007068 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee6:	d167      	bne.n	8006fb8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006ee8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d828      	bhi.n	8006f42 <UART_SetConfig+0x43e>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <UART_SetConfig+0x3f4>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f2d 	.word	0x08006f2d
 8006f04:	08006f43 	.word	0x08006f43
 8006f08:	08006f33 	.word	0x08006f33
 8006f0c:	08006f43 	.word	0x08006f43
 8006f10:	08006f43 	.word	0x08006f43
 8006f14:	08006f43 	.word	0x08006f43
 8006f18:	08006f3b 	.word	0x08006f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fd f922 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8006f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f22:	e014      	b.n	8006f4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f24:	f7fd f934 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8006f28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f2a:	e010      	b.n	8006f4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8007098 <UART_SetConfig+0x594>)
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f30:	e00d      	b.n	8006f4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f32:	f7fd f8a9 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8006f36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f38:	e009      	b.n	8006f4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f40:	e005      	b.n	8006f4e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8089 	beq.w	8007068 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8007094 <UART_SetConfig+0x590>)
 8006f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f68:	005a      	lsls	r2, r3, #1
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	441a      	add	r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	d916      	bls.n	8006fb0 <UART_SetConfig+0x4ac>
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f88:	d212      	bcs.n	8006fb0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f023 030f 	bic.w	r3, r3, #15
 8006f92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	8bfb      	ldrh	r3, [r7, #30]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	8bfa      	ldrh	r2, [r7, #30]
 8006fac:	60da      	str	r2, [r3, #12]
 8006fae:	e05b      	b.n	8007068 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006fb6:	e057      	b.n	8007068 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d828      	bhi.n	8007012 <UART_SetConfig+0x50e>
 8006fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc8 <UART_SetConfig+0x4c4>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006fed 	.word	0x08006fed
 8006fcc:	08006ff5 	.word	0x08006ff5
 8006fd0:	08006ffd 	.word	0x08006ffd
 8006fd4:	08007013 	.word	0x08007013
 8006fd8:	08007003 	.word	0x08007003
 8006fdc:	08007013 	.word	0x08007013
 8006fe0:	08007013 	.word	0x08007013
 8006fe4:	08007013 	.word	0x08007013
 8006fe8:	0800700b 	.word	0x0800700b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fec:	f7fd f8ba 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8006ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ff2:	e014      	b.n	800701e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff4:	f7fd f8cc 	bl	8004190 <HAL_RCC_GetPCLK2Freq>
 8006ff8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ffa:	e010      	b.n	800701e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ffc:	4b26      	ldr	r3, [pc, #152]	@ (8007098 <UART_SetConfig+0x594>)
 8006ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007000:	e00d      	b.n	800701e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007002:	f7fd f841 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8007006:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007008:	e009      	b.n	800701e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800700a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007010:	e005      	b.n	800701e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800701c:	bf00      	nop
    }

    if (pclk != 0U)
 800701e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	d021      	beq.n	8007068 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	4a1a      	ldr	r2, [pc, #104]	@ (8007094 <UART_SetConfig+0x590>)
 800702a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800702e:	461a      	mov	r2, r3
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	fbb3 f2f2 	udiv	r2, r3, r2
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	441a      	add	r2, r3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	d909      	bls.n	8007062 <UART_SetConfig+0x55e>
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007054:	d205      	bcs.n	8007062 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	b29a      	uxth	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60da      	str	r2, [r3, #12]
 8007060:	e002      	b.n	8007068 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2201      	movs	r2, #1
 800706c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2201      	movs	r2, #1
 8007074:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2200      	movs	r2, #0
 800707c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2200      	movs	r2, #0
 8007082:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007084:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007088:	4618      	mov	r0, r3
 800708a:	3730      	adds	r7, #48	@ 0x30
 800708c:	46bd      	mov	sp, r7
 800708e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007092:	bf00      	nop
 8007094:	0800bf0c 	.word	0x0800bf0c
 8007098:	00f42400 	.word	0x00f42400

0800709c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800719a:	d10a      	bne.n	80071b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b098      	sub	sp, #96	@ 0x60
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071f0:	f7fb ff9c 	bl	800312c <HAL_GetTick>
 80071f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b08      	cmp	r3, #8
 8007202:	d12f      	bne.n	8007264 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800720c:	2200      	movs	r2, #0
 800720e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f88e 	bl	8007334 <UART_WaitOnFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d022      	beq.n	8007264 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800722c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007232:	653b      	str	r3, [r7, #80]	@ 0x50
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800723c:	647b      	str	r3, [r7, #68]	@ 0x44
 800723e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800724a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e6      	bne.n	800721e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e063      	b.n	800732c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b04      	cmp	r3, #4
 8007270:	d149      	bne.n	8007306 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007272:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800727a:	2200      	movs	r2, #0
 800727c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f857 	bl	8007334 <UART_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d03c      	beq.n	8007306 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	623b      	str	r3, [r7, #32]
   return(result);
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e6      	bne.n	800728c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072de:	61fa      	str	r2, [r7, #28]
 80072e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	69b9      	ldr	r1, [r7, #24]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	617b      	str	r3, [r7, #20]
   return(result);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e5      	bne.n	80072be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e012      	b.n	800732c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3758      	adds	r7, #88	@ 0x58
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	4613      	mov	r3, r2
 8007342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007344:	e04f      	b.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800734c:	d04b      	beq.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734e:	f7fb feed 	bl	800312c <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	429a      	cmp	r2, r3
 800735c:	d302      	bcc.n	8007364 <UART_WaitOnFlagUntilTimeout+0x30>
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e04e      	b.n	8007406 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d037      	beq.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b80      	cmp	r3, #128	@ 0x80
 800737a:	d034      	beq.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b40      	cmp	r3, #64	@ 0x40
 8007380:	d031      	beq.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b08      	cmp	r3, #8
 800738e:	d110      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2208      	movs	r2, #8
 8007396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f838 	bl	800740e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2208      	movs	r2, #8
 80073a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e029      	b.n	8007406 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073c0:	d111      	bne.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f81e 	bl	800740e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e00f      	b.n	8007406 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	4013      	ands	r3, r2
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	bf0c      	ite	eq
 80073f6:	2301      	moveq	r3, #1
 80073f8:	2300      	movne	r3, #0
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	429a      	cmp	r2, r3
 8007402:	d0a0      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800740e:	b480      	push	{r7}
 8007410:	b095      	sub	sp, #84	@ 0x54
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800742a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007434:	643b      	str	r3, [r7, #64]	@ 0x40
 8007436:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800743a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e6      	bne.n	8007416 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	61fb      	str	r3, [r7, #28]
   return(result);
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800746c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800746e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e3      	bne.n	8007448 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007484:	2b01      	cmp	r3, #1
 8007486:	d118      	bne.n	80074ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	60bb      	str	r3, [r7, #8]
   return(result);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f023 0310 	bic.w	r3, r3, #16
 800749c:	647b      	str	r3, [r7, #68]	@ 0x44
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6979      	ldr	r1, [r7, #20]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	613b      	str	r3, [r7, #16]
   return(result);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e6      	bne.n	8007488 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074ce:	bf00      	nop
 80074d0:	3754      	adds	r7, #84	@ 0x54
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d101      	bne.n	80074f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80074ec:	2302      	movs	r3, #2
 80074ee:	e027      	b.n	8007540 <HAL_UARTEx_DisableFifoMode+0x66>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2224      	movs	r2, #36	@ 0x24
 80074fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800751e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007560:	2302      	movs	r3, #2
 8007562:	e02d      	b.n	80075c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2224      	movs	r2, #36	@ 0x24
 8007570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0201 	bic.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f84f 	bl	8007644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075dc:	2302      	movs	r3, #2
 80075de:	e02d      	b.n	800763c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2224      	movs	r2, #36	@ 0x24
 80075ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f811 	bl	8007644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007650:	2b00      	cmp	r3, #0
 8007652:	d108      	bne.n	8007666 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007664:	e031      	b.n	80076ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007666:	2308      	movs	r3, #8
 8007668:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800766a:	2308      	movs	r3, #8
 800766c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	0e5b      	lsrs	r3, r3, #25
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	0f5b      	lsrs	r3, r3, #29
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	7b3a      	ldrb	r2, [r7, #12]
 8007692:	4911      	ldr	r1, [pc, #68]	@ (80076d8 <UARTEx_SetNbDataToProcess+0x94>)
 8007694:	5c8a      	ldrb	r2, [r1, r2]
 8007696:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800769a:	7b3a      	ldrb	r2, [r7, #12]
 800769c:	490f      	ldr	r1, [pc, #60]	@ (80076dc <UARTEx_SetNbDataToProcess+0x98>)
 800769e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	7b7a      	ldrb	r2, [r7, #13]
 80076b0:	4909      	ldr	r1, [pc, #36]	@ (80076d8 <UARTEx_SetNbDataToProcess+0x94>)
 80076b2:	5c8a      	ldrb	r2, [r1, r2]
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80076b8:	7b7a      	ldrb	r2, [r7, #13]
 80076ba:	4908      	ldr	r1, [pc, #32]	@ (80076dc <UARTEx_SetNbDataToProcess+0x98>)
 80076bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076be:	fb93 f3f2 	sdiv	r3, r3, r2
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	0800bf24 	.word	0x0800bf24
 80076dc:	0800bf2c 	.word	0x0800bf2c

080076e0 <__cvt>:
 80076e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e4:	ec57 6b10 	vmov	r6, r7, d0
 80076e8:	2f00      	cmp	r7, #0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4619      	mov	r1, r3
 80076ee:	463b      	mov	r3, r7
 80076f0:	bfbb      	ittet	lt
 80076f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076f6:	461f      	movlt	r7, r3
 80076f8:	2300      	movge	r3, #0
 80076fa:	232d      	movlt	r3, #45	@ 0x2d
 80076fc:	700b      	strb	r3, [r1, #0]
 80076fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007700:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007704:	4691      	mov	r9, r2
 8007706:	f023 0820 	bic.w	r8, r3, #32
 800770a:	bfbc      	itt	lt
 800770c:	4632      	movlt	r2, r6
 800770e:	4616      	movlt	r6, r2
 8007710:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007714:	d005      	beq.n	8007722 <__cvt+0x42>
 8007716:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800771a:	d100      	bne.n	800771e <__cvt+0x3e>
 800771c:	3401      	adds	r4, #1
 800771e:	2102      	movs	r1, #2
 8007720:	e000      	b.n	8007724 <__cvt+0x44>
 8007722:	2103      	movs	r1, #3
 8007724:	ab03      	add	r3, sp, #12
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	ab02      	add	r3, sp, #8
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	ec47 6b10 	vmov	d0, r6, r7
 8007730:	4653      	mov	r3, sl
 8007732:	4622      	mov	r2, r4
 8007734:	f001 f948 	bl	80089c8 <_dtoa_r>
 8007738:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800773c:	4605      	mov	r5, r0
 800773e:	d119      	bne.n	8007774 <__cvt+0x94>
 8007740:	f019 0f01 	tst.w	r9, #1
 8007744:	d00e      	beq.n	8007764 <__cvt+0x84>
 8007746:	eb00 0904 	add.w	r9, r0, r4
 800774a:	2200      	movs	r2, #0
 800774c:	2300      	movs	r3, #0
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f9 f9e1 	bl	8000b18 <__aeabi_dcmpeq>
 8007756:	b108      	cbz	r0, 800775c <__cvt+0x7c>
 8007758:	f8cd 900c 	str.w	r9, [sp, #12]
 800775c:	2230      	movs	r2, #48	@ 0x30
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	454b      	cmp	r3, r9
 8007762:	d31e      	bcc.n	80077a2 <__cvt+0xc2>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007768:	1b5b      	subs	r3, r3, r5
 800776a:	4628      	mov	r0, r5
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	b004      	add	sp, #16
 8007770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007774:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007778:	eb00 0904 	add.w	r9, r0, r4
 800777c:	d1e5      	bne.n	800774a <__cvt+0x6a>
 800777e:	7803      	ldrb	r3, [r0, #0]
 8007780:	2b30      	cmp	r3, #48	@ 0x30
 8007782:	d10a      	bne.n	800779a <__cvt+0xba>
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f9 f9c4 	bl	8000b18 <__aeabi_dcmpeq>
 8007790:	b918      	cbnz	r0, 800779a <__cvt+0xba>
 8007792:	f1c4 0401 	rsb	r4, r4, #1
 8007796:	f8ca 4000 	str.w	r4, [sl]
 800779a:	f8da 3000 	ldr.w	r3, [sl]
 800779e:	4499      	add	r9, r3
 80077a0:	e7d3      	b.n	800774a <__cvt+0x6a>
 80077a2:	1c59      	adds	r1, r3, #1
 80077a4:	9103      	str	r1, [sp, #12]
 80077a6:	701a      	strb	r2, [r3, #0]
 80077a8:	e7d9      	b.n	800775e <__cvt+0x7e>

080077aa <__exponent>:
 80077aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ac:	2900      	cmp	r1, #0
 80077ae:	bfba      	itte	lt
 80077b0:	4249      	neglt	r1, r1
 80077b2:	232d      	movlt	r3, #45	@ 0x2d
 80077b4:	232b      	movge	r3, #43	@ 0x2b
 80077b6:	2909      	cmp	r1, #9
 80077b8:	7002      	strb	r2, [r0, #0]
 80077ba:	7043      	strb	r3, [r0, #1]
 80077bc:	dd29      	ble.n	8007812 <__exponent+0x68>
 80077be:	f10d 0307 	add.w	r3, sp, #7
 80077c2:	461d      	mov	r5, r3
 80077c4:	270a      	movs	r7, #10
 80077c6:	461a      	mov	r2, r3
 80077c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80077cc:	fb07 1416 	mls	r4, r7, r6, r1
 80077d0:	3430      	adds	r4, #48	@ 0x30
 80077d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077d6:	460c      	mov	r4, r1
 80077d8:	2c63      	cmp	r4, #99	@ 0x63
 80077da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80077de:	4631      	mov	r1, r6
 80077e0:	dcf1      	bgt.n	80077c6 <__exponent+0x1c>
 80077e2:	3130      	adds	r1, #48	@ 0x30
 80077e4:	1e94      	subs	r4, r2, #2
 80077e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077ea:	1c41      	adds	r1, r0, #1
 80077ec:	4623      	mov	r3, r4
 80077ee:	42ab      	cmp	r3, r5
 80077f0:	d30a      	bcc.n	8007808 <__exponent+0x5e>
 80077f2:	f10d 0309 	add.w	r3, sp, #9
 80077f6:	1a9b      	subs	r3, r3, r2
 80077f8:	42ac      	cmp	r4, r5
 80077fa:	bf88      	it	hi
 80077fc:	2300      	movhi	r3, #0
 80077fe:	3302      	adds	r3, #2
 8007800:	4403      	add	r3, r0
 8007802:	1a18      	subs	r0, r3, r0
 8007804:	b003      	add	sp, #12
 8007806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007808:	f813 6b01 	ldrb.w	r6, [r3], #1
 800780c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007810:	e7ed      	b.n	80077ee <__exponent+0x44>
 8007812:	2330      	movs	r3, #48	@ 0x30
 8007814:	3130      	adds	r1, #48	@ 0x30
 8007816:	7083      	strb	r3, [r0, #2]
 8007818:	70c1      	strb	r1, [r0, #3]
 800781a:	1d03      	adds	r3, r0, #4
 800781c:	e7f1      	b.n	8007802 <__exponent+0x58>
	...

08007820 <_printf_float>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	b08d      	sub	sp, #52	@ 0x34
 8007826:	460c      	mov	r4, r1
 8007828:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800782c:	4616      	mov	r6, r2
 800782e:	461f      	mov	r7, r3
 8007830:	4605      	mov	r5, r0
 8007832:	f000 ffb3 	bl	800879c <_localeconv_r>
 8007836:	6803      	ldr	r3, [r0, #0]
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	4618      	mov	r0, r3
 800783c:	f7f8 fd40 	bl	80002c0 <strlen>
 8007840:	2300      	movs	r3, #0
 8007842:	930a      	str	r3, [sp, #40]	@ 0x28
 8007844:	f8d8 3000 	ldr.w	r3, [r8]
 8007848:	9005      	str	r0, [sp, #20]
 800784a:	3307      	adds	r3, #7
 800784c:	f023 0307 	bic.w	r3, r3, #7
 8007850:	f103 0208 	add.w	r2, r3, #8
 8007854:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007858:	f8d4 b000 	ldr.w	fp, [r4]
 800785c:	f8c8 2000 	str.w	r2, [r8]
 8007860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007864:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007868:	9307      	str	r3, [sp, #28]
 800786a:	f8cd 8018 	str.w	r8, [sp, #24]
 800786e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007876:	4b9c      	ldr	r3, [pc, #624]	@ (8007ae8 <_printf_float+0x2c8>)
 8007878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800787c:	f7f9 f97e 	bl	8000b7c <__aeabi_dcmpun>
 8007880:	bb70      	cbnz	r0, 80078e0 <_printf_float+0xc0>
 8007882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007886:	4b98      	ldr	r3, [pc, #608]	@ (8007ae8 <_printf_float+0x2c8>)
 8007888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800788c:	f7f9 f958 	bl	8000b40 <__aeabi_dcmple>
 8007890:	bb30      	cbnz	r0, 80078e0 <_printf_float+0xc0>
 8007892:	2200      	movs	r2, #0
 8007894:	2300      	movs	r3, #0
 8007896:	4640      	mov	r0, r8
 8007898:	4649      	mov	r1, r9
 800789a:	f7f9 f947 	bl	8000b2c <__aeabi_dcmplt>
 800789e:	b110      	cbz	r0, 80078a6 <_printf_float+0x86>
 80078a0:	232d      	movs	r3, #45	@ 0x2d
 80078a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078a6:	4a91      	ldr	r2, [pc, #580]	@ (8007aec <_printf_float+0x2cc>)
 80078a8:	4b91      	ldr	r3, [pc, #580]	@ (8007af0 <_printf_float+0x2d0>)
 80078aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078ae:	bf8c      	ite	hi
 80078b0:	4690      	movhi	r8, r2
 80078b2:	4698      	movls	r8, r3
 80078b4:	2303      	movs	r3, #3
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	f02b 0304 	bic.w	r3, fp, #4
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	f04f 0900 	mov.w	r9, #0
 80078c2:	9700      	str	r7, [sp, #0]
 80078c4:	4633      	mov	r3, r6
 80078c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 f9d2 	bl	8007c74 <_printf_common>
 80078d0:	3001      	adds	r0, #1
 80078d2:	f040 808d 	bne.w	80079f0 <_printf_float+0x1d0>
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078da:	b00d      	add	sp, #52	@ 0x34
 80078dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	4640      	mov	r0, r8
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f9 f948 	bl	8000b7c <__aeabi_dcmpun>
 80078ec:	b140      	cbz	r0, 8007900 <_printf_float+0xe0>
 80078ee:	464b      	mov	r3, r9
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfbc      	itt	lt
 80078f4:	232d      	movlt	r3, #45	@ 0x2d
 80078f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078fa:	4a7e      	ldr	r2, [pc, #504]	@ (8007af4 <_printf_float+0x2d4>)
 80078fc:	4b7e      	ldr	r3, [pc, #504]	@ (8007af8 <_printf_float+0x2d8>)
 80078fe:	e7d4      	b.n	80078aa <_printf_float+0x8a>
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007906:	9206      	str	r2, [sp, #24]
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	d13b      	bne.n	8007984 <_printf_float+0x164>
 800790c:	2306      	movs	r3, #6
 800790e:	6063      	str	r3, [r4, #4]
 8007910:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007914:	2300      	movs	r3, #0
 8007916:	6022      	str	r2, [r4, #0]
 8007918:	9303      	str	r3, [sp, #12]
 800791a:	ab0a      	add	r3, sp, #40	@ 0x28
 800791c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007920:	ab09      	add	r3, sp, #36	@ 0x24
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	6861      	ldr	r1, [r4, #4]
 8007926:	ec49 8b10 	vmov	d0, r8, r9
 800792a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800792e:	4628      	mov	r0, r5
 8007930:	f7ff fed6 	bl	80076e0 <__cvt>
 8007934:	9b06      	ldr	r3, [sp, #24]
 8007936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007938:	2b47      	cmp	r3, #71	@ 0x47
 800793a:	4680      	mov	r8, r0
 800793c:	d129      	bne.n	8007992 <_printf_float+0x172>
 800793e:	1cc8      	adds	r0, r1, #3
 8007940:	db02      	blt.n	8007948 <_printf_float+0x128>
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	4299      	cmp	r1, r3
 8007946:	dd41      	ble.n	80079cc <_printf_float+0x1ac>
 8007948:	f1aa 0a02 	sub.w	sl, sl, #2
 800794c:	fa5f fa8a 	uxtb.w	sl, sl
 8007950:	3901      	subs	r1, #1
 8007952:	4652      	mov	r2, sl
 8007954:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007958:	9109      	str	r1, [sp, #36]	@ 0x24
 800795a:	f7ff ff26 	bl	80077aa <__exponent>
 800795e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007960:	1813      	adds	r3, r2, r0
 8007962:	2a01      	cmp	r2, #1
 8007964:	4681      	mov	r9, r0
 8007966:	6123      	str	r3, [r4, #16]
 8007968:	dc02      	bgt.n	8007970 <_printf_float+0x150>
 800796a:	6822      	ldr	r2, [r4, #0]
 800796c:	07d2      	lsls	r2, r2, #31
 800796e:	d501      	bpl.n	8007974 <_printf_float+0x154>
 8007970:	3301      	adds	r3, #1
 8007972:	6123      	str	r3, [r4, #16]
 8007974:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0a2      	beq.n	80078c2 <_printf_float+0xa2>
 800797c:	232d      	movs	r3, #45	@ 0x2d
 800797e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007982:	e79e      	b.n	80078c2 <_printf_float+0xa2>
 8007984:	9a06      	ldr	r2, [sp, #24]
 8007986:	2a47      	cmp	r2, #71	@ 0x47
 8007988:	d1c2      	bne.n	8007910 <_printf_float+0xf0>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1c0      	bne.n	8007910 <_printf_float+0xf0>
 800798e:	2301      	movs	r3, #1
 8007990:	e7bd      	b.n	800790e <_printf_float+0xee>
 8007992:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007996:	d9db      	bls.n	8007950 <_printf_float+0x130>
 8007998:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800799c:	d118      	bne.n	80079d0 <_printf_float+0x1b0>
 800799e:	2900      	cmp	r1, #0
 80079a0:	6863      	ldr	r3, [r4, #4]
 80079a2:	dd0b      	ble.n	80079bc <_printf_float+0x19c>
 80079a4:	6121      	str	r1, [r4, #16]
 80079a6:	b913      	cbnz	r3, 80079ae <_printf_float+0x18e>
 80079a8:	6822      	ldr	r2, [r4, #0]
 80079aa:	07d0      	lsls	r0, r2, #31
 80079ac:	d502      	bpl.n	80079b4 <_printf_float+0x194>
 80079ae:	3301      	adds	r3, #1
 80079b0:	440b      	add	r3, r1
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079b6:	f04f 0900 	mov.w	r9, #0
 80079ba:	e7db      	b.n	8007974 <_printf_float+0x154>
 80079bc:	b913      	cbnz	r3, 80079c4 <_printf_float+0x1a4>
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	07d2      	lsls	r2, r2, #31
 80079c2:	d501      	bpl.n	80079c8 <_printf_float+0x1a8>
 80079c4:	3302      	adds	r3, #2
 80079c6:	e7f4      	b.n	80079b2 <_printf_float+0x192>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e7f2      	b.n	80079b2 <_printf_float+0x192>
 80079cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079d2:	4299      	cmp	r1, r3
 80079d4:	db05      	blt.n	80079e2 <_printf_float+0x1c2>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	6121      	str	r1, [r4, #16]
 80079da:	07d8      	lsls	r0, r3, #31
 80079dc:	d5ea      	bpl.n	80079b4 <_printf_float+0x194>
 80079de:	1c4b      	adds	r3, r1, #1
 80079e0:	e7e7      	b.n	80079b2 <_printf_float+0x192>
 80079e2:	2900      	cmp	r1, #0
 80079e4:	bfd4      	ite	le
 80079e6:	f1c1 0202 	rsble	r2, r1, #2
 80079ea:	2201      	movgt	r2, #1
 80079ec:	4413      	add	r3, r2
 80079ee:	e7e0      	b.n	80079b2 <_printf_float+0x192>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	055a      	lsls	r2, r3, #21
 80079f4:	d407      	bmi.n	8007a06 <_printf_float+0x1e6>
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	4642      	mov	r2, r8
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	d12b      	bne.n	8007a5c <_printf_float+0x23c>
 8007a04:	e767      	b.n	80078d6 <_printf_float+0xb6>
 8007a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a0a:	f240 80dd 	bls.w	8007bc8 <_printf_float+0x3a8>
 8007a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a12:	2200      	movs	r2, #0
 8007a14:	2300      	movs	r3, #0
 8007a16:	f7f9 f87f 	bl	8000b18 <__aeabi_dcmpeq>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d033      	beq.n	8007a86 <_printf_float+0x266>
 8007a1e:	4a37      	ldr	r2, [pc, #220]	@ (8007afc <_printf_float+0x2dc>)
 8007a20:	2301      	movs	r3, #1
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f43f af54 	beq.w	80078d6 <_printf_float+0xb6>
 8007a2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a32:	4543      	cmp	r3, r8
 8007a34:	db02      	blt.n	8007a3c <_printf_float+0x21c>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	07d8      	lsls	r0, r3, #31
 8007a3a:	d50f      	bpl.n	8007a5c <_printf_float+0x23c>
 8007a3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f af45 	beq.w	80078d6 <_printf_float+0xb6>
 8007a4c:	f04f 0900 	mov.w	r9, #0
 8007a50:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007a54:	f104 0a1a 	add.w	sl, r4, #26
 8007a58:	45c8      	cmp	r8, r9
 8007a5a:	dc09      	bgt.n	8007a70 <_printf_float+0x250>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	079b      	lsls	r3, r3, #30
 8007a60:	f100 8103 	bmi.w	8007c6a <_printf_float+0x44a>
 8007a64:	68e0      	ldr	r0, [r4, #12]
 8007a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a68:	4298      	cmp	r0, r3
 8007a6a:	bfb8      	it	lt
 8007a6c:	4618      	movlt	r0, r3
 8007a6e:	e734      	b.n	80078da <_printf_float+0xba>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4652      	mov	r2, sl
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f43f af2b 	beq.w	80078d6 <_printf_float+0xb6>
 8007a80:	f109 0901 	add.w	r9, r9, #1
 8007a84:	e7e8      	b.n	8007a58 <_printf_float+0x238>
 8007a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc39      	bgt.n	8007b00 <_printf_float+0x2e0>
 8007a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007afc <_printf_float+0x2dc>)
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f af1d 	beq.w	80078d6 <_printf_float+0xb6>
 8007a9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007aa0:	ea59 0303 	orrs.w	r3, r9, r3
 8007aa4:	d102      	bne.n	8007aac <_printf_float+0x28c>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	07d9      	lsls	r1, r3, #31
 8007aaa:	d5d7      	bpl.n	8007a5c <_printf_float+0x23c>
 8007aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af0d 	beq.w	80078d6 <_printf_float+0xb6>
 8007abc:	f04f 0a00 	mov.w	sl, #0
 8007ac0:	f104 0b1a 	add.w	fp, r4, #26
 8007ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac6:	425b      	negs	r3, r3
 8007ac8:	4553      	cmp	r3, sl
 8007aca:	dc01      	bgt.n	8007ad0 <_printf_float+0x2b0>
 8007acc:	464b      	mov	r3, r9
 8007ace:	e793      	b.n	80079f8 <_printf_float+0x1d8>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	465a      	mov	r2, fp
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f aefb 	beq.w	80078d6 <_printf_float+0xb6>
 8007ae0:	f10a 0a01 	add.w	sl, sl, #1
 8007ae4:	e7ee      	b.n	8007ac4 <_printf_float+0x2a4>
 8007ae6:	bf00      	nop
 8007ae8:	7fefffff 	.word	0x7fefffff
 8007aec:	0800bf38 	.word	0x0800bf38
 8007af0:	0800bf34 	.word	0x0800bf34
 8007af4:	0800bf40 	.word	0x0800bf40
 8007af8:	0800bf3c 	.word	0x0800bf3c
 8007afc:	0800bf44 	.word	0x0800bf44
 8007b00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b06:	4553      	cmp	r3, sl
 8007b08:	bfa8      	it	ge
 8007b0a:	4653      	movge	r3, sl
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	4699      	mov	r9, r3
 8007b10:	dc36      	bgt.n	8007b80 <_printf_float+0x360>
 8007b12:	f04f 0b00 	mov.w	fp, #0
 8007b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b1a:	f104 021a 	add.w	r2, r4, #26
 8007b1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b20:	9306      	str	r3, [sp, #24]
 8007b22:	eba3 0309 	sub.w	r3, r3, r9
 8007b26:	455b      	cmp	r3, fp
 8007b28:	dc31      	bgt.n	8007b8e <_printf_float+0x36e>
 8007b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b2c:	459a      	cmp	sl, r3
 8007b2e:	dc3a      	bgt.n	8007ba6 <_printf_float+0x386>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	07da      	lsls	r2, r3, #31
 8007b34:	d437      	bmi.n	8007ba6 <_printf_float+0x386>
 8007b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b38:	ebaa 0903 	sub.w	r9, sl, r3
 8007b3c:	9b06      	ldr	r3, [sp, #24]
 8007b3e:	ebaa 0303 	sub.w	r3, sl, r3
 8007b42:	4599      	cmp	r9, r3
 8007b44:	bfa8      	it	ge
 8007b46:	4699      	movge	r9, r3
 8007b48:	f1b9 0f00 	cmp.w	r9, #0
 8007b4c:	dc33      	bgt.n	8007bb6 <_printf_float+0x396>
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b56:	f104 0b1a 	add.w	fp, r4, #26
 8007b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5c:	ebaa 0303 	sub.w	r3, sl, r3
 8007b60:	eba3 0309 	sub.w	r3, r3, r9
 8007b64:	4543      	cmp	r3, r8
 8007b66:	f77f af79 	ble.w	8007a5c <_printf_float+0x23c>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	465a      	mov	r2, fp
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	f43f aeae 	beq.w	80078d6 <_printf_float+0xb6>
 8007b7a:	f108 0801 	add.w	r8, r8, #1
 8007b7e:	e7ec      	b.n	8007b5a <_printf_float+0x33a>
 8007b80:	4642      	mov	r2, r8
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d1c2      	bne.n	8007b12 <_printf_float+0x2f2>
 8007b8c:	e6a3      	b.n	80078d6 <_printf_float+0xb6>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	9206      	str	r2, [sp, #24]
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f ae9c 	beq.w	80078d6 <_printf_float+0xb6>
 8007b9e:	9a06      	ldr	r2, [sp, #24]
 8007ba0:	f10b 0b01 	add.w	fp, fp, #1
 8007ba4:	e7bb      	b.n	8007b1e <_printf_float+0x2fe>
 8007ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d1c0      	bne.n	8007b36 <_printf_float+0x316>
 8007bb4:	e68f      	b.n	80078d6 <_printf_float+0xb6>
 8007bb6:	9a06      	ldr	r2, [sp, #24]
 8007bb8:	464b      	mov	r3, r9
 8007bba:	4442      	add	r2, r8
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b8      	blx	r7
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d1c3      	bne.n	8007b4e <_printf_float+0x32e>
 8007bc6:	e686      	b.n	80078d6 <_printf_float+0xb6>
 8007bc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bcc:	f1ba 0f01 	cmp.w	sl, #1
 8007bd0:	dc01      	bgt.n	8007bd6 <_printf_float+0x3b6>
 8007bd2:	07db      	lsls	r3, r3, #31
 8007bd4:	d536      	bpl.n	8007c44 <_printf_float+0x424>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4642      	mov	r2, r8
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f ae78 	beq.w	80078d6 <_printf_float+0xb6>
 8007be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae70 	beq.w	80078d6 <_printf_float+0xb6>
 8007bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007c02:	f7f8 ff89 	bl	8000b18 <__aeabi_dcmpeq>
 8007c06:	b9c0      	cbnz	r0, 8007c3a <_printf_float+0x41a>
 8007c08:	4653      	mov	r3, sl
 8007c0a:	f108 0201 	add.w	r2, r8, #1
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b8      	blx	r7
 8007c14:	3001      	adds	r0, #1
 8007c16:	d10c      	bne.n	8007c32 <_printf_float+0x412>
 8007c18:	e65d      	b.n	80078d6 <_printf_float+0xb6>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	465a      	mov	r2, fp
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	f43f ae56 	beq.w	80078d6 <_printf_float+0xb6>
 8007c2a:	f108 0801 	add.w	r8, r8, #1
 8007c2e:	45d0      	cmp	r8, sl
 8007c30:	dbf3      	blt.n	8007c1a <_printf_float+0x3fa>
 8007c32:	464b      	mov	r3, r9
 8007c34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c38:	e6df      	b.n	80079fa <_printf_float+0x1da>
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	f104 0b1a 	add.w	fp, r4, #26
 8007c42:	e7f4      	b.n	8007c2e <_printf_float+0x40e>
 8007c44:	2301      	movs	r3, #1
 8007c46:	4642      	mov	r2, r8
 8007c48:	e7e1      	b.n	8007c0e <_printf_float+0x3ee>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	464a      	mov	r2, r9
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b8      	blx	r7
 8007c54:	3001      	adds	r0, #1
 8007c56:	f43f ae3e 	beq.w	80078d6 <_printf_float+0xb6>
 8007c5a:	f108 0801 	add.w	r8, r8, #1
 8007c5e:	68e3      	ldr	r3, [r4, #12]
 8007c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c62:	1a5b      	subs	r3, r3, r1
 8007c64:	4543      	cmp	r3, r8
 8007c66:	dcf0      	bgt.n	8007c4a <_printf_float+0x42a>
 8007c68:	e6fc      	b.n	8007a64 <_printf_float+0x244>
 8007c6a:	f04f 0800 	mov.w	r8, #0
 8007c6e:	f104 0919 	add.w	r9, r4, #25
 8007c72:	e7f4      	b.n	8007c5e <_printf_float+0x43e>

08007c74 <_printf_common>:
 8007c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	4616      	mov	r6, r2
 8007c7a:	4698      	mov	r8, r3
 8007c7c:	688a      	ldr	r2, [r1, #8]
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c84:	4293      	cmp	r3, r2
 8007c86:	bfb8      	it	lt
 8007c88:	4613      	movlt	r3, r2
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c90:	4607      	mov	r7, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	b10a      	cbz	r2, 8007c9a <_printf_common+0x26>
 8007c96:	3301      	adds	r3, #1
 8007c98:	6033      	str	r3, [r6, #0]
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	0699      	lsls	r1, r3, #26
 8007c9e:	bf42      	ittt	mi
 8007ca0:	6833      	ldrmi	r3, [r6, #0]
 8007ca2:	3302      	addmi	r3, #2
 8007ca4:	6033      	strmi	r3, [r6, #0]
 8007ca6:	6825      	ldr	r5, [r4, #0]
 8007ca8:	f015 0506 	ands.w	r5, r5, #6
 8007cac:	d106      	bne.n	8007cbc <_printf_common+0x48>
 8007cae:	f104 0a19 	add.w	sl, r4, #25
 8007cb2:	68e3      	ldr	r3, [r4, #12]
 8007cb4:	6832      	ldr	r2, [r6, #0]
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	42ab      	cmp	r3, r5
 8007cba:	dc26      	bgt.n	8007d0a <_printf_common+0x96>
 8007cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cc0:	6822      	ldr	r2, [r4, #0]
 8007cc2:	3b00      	subs	r3, #0
 8007cc4:	bf18      	it	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	0692      	lsls	r2, r2, #26
 8007cca:	d42b      	bmi.n	8007d24 <_printf_common+0xb0>
 8007ccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	47c8      	blx	r9
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d01e      	beq.n	8007d18 <_printf_common+0xa4>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	f003 0306 	and.w	r3, r3, #6
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	bf02      	ittt	eq
 8007ce6:	68e5      	ldreq	r5, [r4, #12]
 8007ce8:	6833      	ldreq	r3, [r6, #0]
 8007cea:	1aed      	subeq	r5, r5, r3
 8007cec:	68a3      	ldr	r3, [r4, #8]
 8007cee:	bf0c      	ite	eq
 8007cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf4:	2500      	movne	r5, #0
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	bfc4      	itt	gt
 8007cfa:	1a9b      	subgt	r3, r3, r2
 8007cfc:	18ed      	addgt	r5, r5, r3
 8007cfe:	2600      	movs	r6, #0
 8007d00:	341a      	adds	r4, #26
 8007d02:	42b5      	cmp	r5, r6
 8007d04:	d11a      	bne.n	8007d3c <_printf_common+0xc8>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e008      	b.n	8007d1c <_printf_common+0xa8>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	4641      	mov	r1, r8
 8007d10:	4638      	mov	r0, r7
 8007d12:	47c8      	blx	r9
 8007d14:	3001      	adds	r0, #1
 8007d16:	d103      	bne.n	8007d20 <_printf_common+0xac>
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d20:	3501      	adds	r5, #1
 8007d22:	e7c6      	b.n	8007cb2 <_printf_common+0x3e>
 8007d24:	18e1      	adds	r1, r4, r3
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	2030      	movs	r0, #48	@ 0x30
 8007d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d2e:	4422      	add	r2, r4
 8007d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d38:	3302      	adds	r3, #2
 8007d3a:	e7c7      	b.n	8007ccc <_printf_common+0x58>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4622      	mov	r2, r4
 8007d40:	4641      	mov	r1, r8
 8007d42:	4638      	mov	r0, r7
 8007d44:	47c8      	blx	r9
 8007d46:	3001      	adds	r0, #1
 8007d48:	d0e6      	beq.n	8007d18 <_printf_common+0xa4>
 8007d4a:	3601      	adds	r6, #1
 8007d4c:	e7d9      	b.n	8007d02 <_printf_common+0x8e>
	...

08007d50 <_printf_i>:
 8007d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	7e0f      	ldrb	r7, [r1, #24]
 8007d56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d58:	2f78      	cmp	r7, #120	@ 0x78
 8007d5a:	4691      	mov	r9, r2
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	469a      	mov	sl, r3
 8007d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d66:	d807      	bhi.n	8007d78 <_printf_i+0x28>
 8007d68:	2f62      	cmp	r7, #98	@ 0x62
 8007d6a:	d80a      	bhi.n	8007d82 <_printf_i+0x32>
 8007d6c:	2f00      	cmp	r7, #0
 8007d6e:	f000 80d1 	beq.w	8007f14 <_printf_i+0x1c4>
 8007d72:	2f58      	cmp	r7, #88	@ 0x58
 8007d74:	f000 80b8 	beq.w	8007ee8 <_printf_i+0x198>
 8007d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d80:	e03a      	b.n	8007df8 <_printf_i+0xa8>
 8007d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d86:	2b15      	cmp	r3, #21
 8007d88:	d8f6      	bhi.n	8007d78 <_printf_i+0x28>
 8007d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8007d90 <_printf_i+0x40>)
 8007d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d90:	08007de9 	.word	0x08007de9
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007d79 	.word	0x08007d79
 8007d9c:	08007d79 	.word	0x08007d79
 8007da0:	08007d79 	.word	0x08007d79
 8007da4:	08007d79 	.word	0x08007d79
 8007da8:	08007dfd 	.word	0x08007dfd
 8007dac:	08007d79 	.word	0x08007d79
 8007db0:	08007d79 	.word	0x08007d79
 8007db4:	08007d79 	.word	0x08007d79
 8007db8:	08007d79 	.word	0x08007d79
 8007dbc:	08007efb 	.word	0x08007efb
 8007dc0:	08007e27 	.word	0x08007e27
 8007dc4:	08007eb5 	.word	0x08007eb5
 8007dc8:	08007d79 	.word	0x08007d79
 8007dcc:	08007d79 	.word	0x08007d79
 8007dd0:	08007f1d 	.word	0x08007f1d
 8007dd4:	08007d79 	.word	0x08007d79
 8007dd8:	08007e27 	.word	0x08007e27
 8007ddc:	08007d79 	.word	0x08007d79
 8007de0:	08007d79 	.word	0x08007d79
 8007de4:	08007ebd 	.word	0x08007ebd
 8007de8:	6833      	ldr	r3, [r6, #0]
 8007dea:	1d1a      	adds	r2, r3, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6032      	str	r2, [r6, #0]
 8007df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e09c      	b.n	8007f36 <_printf_i+0x1e6>
 8007dfc:	6833      	ldr	r3, [r6, #0]
 8007dfe:	6820      	ldr	r0, [r4, #0]
 8007e00:	1d19      	adds	r1, r3, #4
 8007e02:	6031      	str	r1, [r6, #0]
 8007e04:	0606      	lsls	r6, r0, #24
 8007e06:	d501      	bpl.n	8007e0c <_printf_i+0xbc>
 8007e08:	681d      	ldr	r5, [r3, #0]
 8007e0a:	e003      	b.n	8007e14 <_printf_i+0xc4>
 8007e0c:	0645      	lsls	r5, r0, #25
 8007e0e:	d5fb      	bpl.n	8007e08 <_printf_i+0xb8>
 8007e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	da03      	bge.n	8007e20 <_printf_i+0xd0>
 8007e18:	232d      	movs	r3, #45	@ 0x2d
 8007e1a:	426d      	negs	r5, r5
 8007e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e20:	4858      	ldr	r0, [pc, #352]	@ (8007f84 <_printf_i+0x234>)
 8007e22:	230a      	movs	r3, #10
 8007e24:	e011      	b.n	8007e4a <_printf_i+0xfa>
 8007e26:	6821      	ldr	r1, [r4, #0]
 8007e28:	6833      	ldr	r3, [r6, #0]
 8007e2a:	0608      	lsls	r0, r1, #24
 8007e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e30:	d402      	bmi.n	8007e38 <_printf_i+0xe8>
 8007e32:	0649      	lsls	r1, r1, #25
 8007e34:	bf48      	it	mi
 8007e36:	b2ad      	uxthmi	r5, r5
 8007e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e3a:	4852      	ldr	r0, [pc, #328]	@ (8007f84 <_printf_i+0x234>)
 8007e3c:	6033      	str	r3, [r6, #0]
 8007e3e:	bf14      	ite	ne
 8007e40:	230a      	movne	r3, #10
 8007e42:	2308      	moveq	r3, #8
 8007e44:	2100      	movs	r1, #0
 8007e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e4a:	6866      	ldr	r6, [r4, #4]
 8007e4c:	60a6      	str	r6, [r4, #8]
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	db05      	blt.n	8007e5e <_printf_i+0x10e>
 8007e52:	6821      	ldr	r1, [r4, #0]
 8007e54:	432e      	orrs	r6, r5
 8007e56:	f021 0104 	bic.w	r1, r1, #4
 8007e5a:	6021      	str	r1, [r4, #0]
 8007e5c:	d04b      	beq.n	8007ef6 <_printf_i+0x1a6>
 8007e5e:	4616      	mov	r6, r2
 8007e60:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e64:	fb03 5711 	mls	r7, r3, r1, r5
 8007e68:	5dc7      	ldrb	r7, [r0, r7]
 8007e6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e6e:	462f      	mov	r7, r5
 8007e70:	42bb      	cmp	r3, r7
 8007e72:	460d      	mov	r5, r1
 8007e74:	d9f4      	bls.n	8007e60 <_printf_i+0x110>
 8007e76:	2b08      	cmp	r3, #8
 8007e78:	d10b      	bne.n	8007e92 <_printf_i+0x142>
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	07df      	lsls	r7, r3, #31
 8007e7e:	d508      	bpl.n	8007e92 <_printf_i+0x142>
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	6861      	ldr	r1, [r4, #4]
 8007e84:	4299      	cmp	r1, r3
 8007e86:	bfde      	ittt	le
 8007e88:	2330      	movle	r3, #48	@ 0x30
 8007e8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e8e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007e92:	1b92      	subs	r2, r2, r6
 8007e94:	6122      	str	r2, [r4, #16]
 8007e96:	f8cd a000 	str.w	sl, [sp]
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	aa03      	add	r2, sp, #12
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	f7ff fee7 	bl	8007c74 <_printf_common>
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d14a      	bne.n	8007f40 <_printf_i+0x1f0>
 8007eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007eae:	b004      	add	sp, #16
 8007eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	f043 0320 	orr.w	r3, r3, #32
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	4832      	ldr	r0, [pc, #200]	@ (8007f88 <_printf_i+0x238>)
 8007ebe:	2778      	movs	r7, #120	@ 0x78
 8007ec0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	6831      	ldr	r1, [r6, #0]
 8007ec8:	061f      	lsls	r7, r3, #24
 8007eca:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ece:	d402      	bmi.n	8007ed6 <_printf_i+0x186>
 8007ed0:	065f      	lsls	r7, r3, #25
 8007ed2:	bf48      	it	mi
 8007ed4:	b2ad      	uxthmi	r5, r5
 8007ed6:	6031      	str	r1, [r6, #0]
 8007ed8:	07d9      	lsls	r1, r3, #31
 8007eda:	bf44      	itt	mi
 8007edc:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee0:	6023      	strmi	r3, [r4, #0]
 8007ee2:	b11d      	cbz	r5, 8007eec <_printf_i+0x19c>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	e7ad      	b.n	8007e44 <_printf_i+0xf4>
 8007ee8:	4826      	ldr	r0, [pc, #152]	@ (8007f84 <_printf_i+0x234>)
 8007eea:	e7e9      	b.n	8007ec0 <_printf_i+0x170>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	f023 0320 	bic.w	r3, r3, #32
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	e7f6      	b.n	8007ee4 <_printf_i+0x194>
 8007ef6:	4616      	mov	r6, r2
 8007ef8:	e7bd      	b.n	8007e76 <_printf_i+0x126>
 8007efa:	6833      	ldr	r3, [r6, #0]
 8007efc:	6825      	ldr	r5, [r4, #0]
 8007efe:	6961      	ldr	r1, [r4, #20]
 8007f00:	1d18      	adds	r0, r3, #4
 8007f02:	6030      	str	r0, [r6, #0]
 8007f04:	062e      	lsls	r6, r5, #24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	d501      	bpl.n	8007f0e <_printf_i+0x1be>
 8007f0a:	6019      	str	r1, [r3, #0]
 8007f0c:	e002      	b.n	8007f14 <_printf_i+0x1c4>
 8007f0e:	0668      	lsls	r0, r5, #25
 8007f10:	d5fb      	bpl.n	8007f0a <_printf_i+0x1ba>
 8007f12:	8019      	strh	r1, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	4616      	mov	r6, r2
 8007f1a:	e7bc      	b.n	8007e96 <_printf_i+0x146>
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	1d1a      	adds	r2, r3, #4
 8007f20:	6032      	str	r2, [r6, #0]
 8007f22:	681e      	ldr	r6, [r3, #0]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	2100      	movs	r1, #0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7f8 f979 	bl	8000220 <memchr>
 8007f2e:	b108      	cbz	r0, 8007f34 <_printf_i+0x1e4>
 8007f30:	1b80      	subs	r0, r0, r6
 8007f32:	6060      	str	r0, [r4, #4]
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f3e:	e7aa      	b.n	8007e96 <_printf_i+0x146>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	4632      	mov	r2, r6
 8007f44:	4649      	mov	r1, r9
 8007f46:	4640      	mov	r0, r8
 8007f48:	47d0      	blx	sl
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d0ad      	beq.n	8007eaa <_printf_i+0x15a>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	079b      	lsls	r3, r3, #30
 8007f52:	d413      	bmi.n	8007f7c <_printf_i+0x22c>
 8007f54:	68e0      	ldr	r0, [r4, #12]
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	bfb8      	it	lt
 8007f5c:	4618      	movlt	r0, r3
 8007f5e:	e7a6      	b.n	8007eae <_printf_i+0x15e>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4632      	mov	r2, r6
 8007f64:	4649      	mov	r1, r9
 8007f66:	4640      	mov	r0, r8
 8007f68:	47d0      	blx	sl
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d09d      	beq.n	8007eaa <_printf_i+0x15a>
 8007f6e:	3501      	adds	r5, #1
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	9903      	ldr	r1, [sp, #12]
 8007f74:	1a5b      	subs	r3, r3, r1
 8007f76:	42ab      	cmp	r3, r5
 8007f78:	dcf2      	bgt.n	8007f60 <_printf_i+0x210>
 8007f7a:	e7eb      	b.n	8007f54 <_printf_i+0x204>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	f104 0619 	add.w	r6, r4, #25
 8007f82:	e7f5      	b.n	8007f70 <_printf_i+0x220>
 8007f84:	0800bf46 	.word	0x0800bf46
 8007f88:	0800bf57 	.word	0x0800bf57

08007f8c <_scanf_float>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b087      	sub	sp, #28
 8007f92:	4691      	mov	r9, r2
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	688b      	ldr	r3, [r1, #8]
 8007f98:	1e5a      	subs	r2, r3, #1
 8007f9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f9e:	bf81      	itttt	hi
 8007fa0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007fa4:	eb03 0b05 	addhi.w	fp, r3, r5
 8007fa8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007fac:	608b      	strhi	r3, [r1, #8]
 8007fae:	680b      	ldr	r3, [r1, #0]
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	f04f 0500 	mov.w	r5, #0
 8007fb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007fba:	f842 3b1c 	str.w	r3, [r2], #28
 8007fbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fc2:	4680      	mov	r8, r0
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	bf98      	it	ls
 8007fc8:	f04f 0b00 	movls.w	fp, #0
 8007fcc:	9201      	str	r2, [sp, #4]
 8007fce:	4616      	mov	r6, r2
 8007fd0:	46aa      	mov	sl, r5
 8007fd2:	462f      	mov	r7, r5
 8007fd4:	9502      	str	r5, [sp, #8]
 8007fd6:	68a2      	ldr	r2, [r4, #8]
 8007fd8:	b15a      	cbz	r2, 8007ff2 <_scanf_float+0x66>
 8007fda:	f8d9 3000 	ldr.w	r3, [r9]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b4e      	cmp	r3, #78	@ 0x4e
 8007fe2:	d863      	bhi.n	80080ac <_scanf_float+0x120>
 8007fe4:	2b40      	cmp	r3, #64	@ 0x40
 8007fe6:	d83b      	bhi.n	8008060 <_scanf_float+0xd4>
 8007fe8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007fec:	b2c8      	uxtb	r0, r1
 8007fee:	280e      	cmp	r0, #14
 8007ff0:	d939      	bls.n	8008066 <_scanf_float+0xda>
 8007ff2:	b11f      	cbz	r7, 8007ffc <_scanf_float+0x70>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008000:	f1ba 0f01 	cmp.w	sl, #1
 8008004:	f200 8114 	bhi.w	8008230 <_scanf_float+0x2a4>
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	429e      	cmp	r6, r3
 800800c:	f200 8105 	bhi.w	800821a <_scanf_float+0x28e>
 8008010:	2001      	movs	r0, #1
 8008012:	b007      	add	sp, #28
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008018:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800801c:	2a0d      	cmp	r2, #13
 800801e:	d8e8      	bhi.n	8007ff2 <_scanf_float+0x66>
 8008020:	a101      	add	r1, pc, #4	@ (adr r1, 8008028 <_scanf_float+0x9c>)
 8008022:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008171 	.word	0x08008171
 800802c:	08007ff3 	.word	0x08007ff3
 8008030:	08007ff3 	.word	0x08007ff3
 8008034:	08007ff3 	.word	0x08007ff3
 8008038:	080081cd 	.word	0x080081cd
 800803c:	080081a7 	.word	0x080081a7
 8008040:	08007ff3 	.word	0x08007ff3
 8008044:	08007ff3 	.word	0x08007ff3
 8008048:	0800817f 	.word	0x0800817f
 800804c:	08007ff3 	.word	0x08007ff3
 8008050:	08007ff3 	.word	0x08007ff3
 8008054:	08007ff3 	.word	0x08007ff3
 8008058:	08007ff3 	.word	0x08007ff3
 800805c:	0800813b 	.word	0x0800813b
 8008060:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008064:	e7da      	b.n	800801c <_scanf_float+0x90>
 8008066:	290e      	cmp	r1, #14
 8008068:	d8c3      	bhi.n	8007ff2 <_scanf_float+0x66>
 800806a:	a001      	add	r0, pc, #4	@ (adr r0, 8008070 <_scanf_float+0xe4>)
 800806c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008070:	0800812b 	.word	0x0800812b
 8008074:	08007ff3 	.word	0x08007ff3
 8008078:	0800812b 	.word	0x0800812b
 800807c:	080081bb 	.word	0x080081bb
 8008080:	08007ff3 	.word	0x08007ff3
 8008084:	080080cd 	.word	0x080080cd
 8008088:	08008111 	.word	0x08008111
 800808c:	08008111 	.word	0x08008111
 8008090:	08008111 	.word	0x08008111
 8008094:	08008111 	.word	0x08008111
 8008098:	08008111 	.word	0x08008111
 800809c:	08008111 	.word	0x08008111
 80080a0:	08008111 	.word	0x08008111
 80080a4:	08008111 	.word	0x08008111
 80080a8:	08008111 	.word	0x08008111
 80080ac:	2b6e      	cmp	r3, #110	@ 0x6e
 80080ae:	d809      	bhi.n	80080c4 <_scanf_float+0x138>
 80080b0:	2b60      	cmp	r3, #96	@ 0x60
 80080b2:	d8b1      	bhi.n	8008018 <_scanf_float+0x8c>
 80080b4:	2b54      	cmp	r3, #84	@ 0x54
 80080b6:	d07b      	beq.n	80081b0 <_scanf_float+0x224>
 80080b8:	2b59      	cmp	r3, #89	@ 0x59
 80080ba:	d19a      	bne.n	8007ff2 <_scanf_float+0x66>
 80080bc:	2d07      	cmp	r5, #7
 80080be:	d198      	bne.n	8007ff2 <_scanf_float+0x66>
 80080c0:	2508      	movs	r5, #8
 80080c2:	e02f      	b.n	8008124 <_scanf_float+0x198>
 80080c4:	2b74      	cmp	r3, #116	@ 0x74
 80080c6:	d073      	beq.n	80081b0 <_scanf_float+0x224>
 80080c8:	2b79      	cmp	r3, #121	@ 0x79
 80080ca:	e7f6      	b.n	80080ba <_scanf_float+0x12e>
 80080cc:	6821      	ldr	r1, [r4, #0]
 80080ce:	05c8      	lsls	r0, r1, #23
 80080d0:	d51e      	bpl.n	8008110 <_scanf_float+0x184>
 80080d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80080d6:	6021      	str	r1, [r4, #0]
 80080d8:	3701      	adds	r7, #1
 80080da:	f1bb 0f00 	cmp.w	fp, #0
 80080de:	d003      	beq.n	80080e8 <_scanf_float+0x15c>
 80080e0:	3201      	adds	r2, #1
 80080e2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80080e6:	60a2      	str	r2, [r4, #8]
 80080e8:	68a3      	ldr	r3, [r4, #8]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	60a3      	str	r3, [r4, #8]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	3301      	adds	r3, #1
 80080f2:	6123      	str	r3, [r4, #16]
 80080f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f8c9 3004 	str.w	r3, [r9, #4]
 8008100:	f340 8082 	ble.w	8008208 <_scanf_float+0x27c>
 8008104:	f8d9 3000 	ldr.w	r3, [r9]
 8008108:	3301      	adds	r3, #1
 800810a:	f8c9 3000 	str.w	r3, [r9]
 800810e:	e762      	b.n	8007fd6 <_scanf_float+0x4a>
 8008110:	eb1a 0105 	adds.w	r1, sl, r5
 8008114:	f47f af6d 	bne.w	8007ff2 <_scanf_float+0x66>
 8008118:	6822      	ldr	r2, [r4, #0]
 800811a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800811e:	6022      	str	r2, [r4, #0]
 8008120:	460d      	mov	r5, r1
 8008122:	468a      	mov	sl, r1
 8008124:	f806 3b01 	strb.w	r3, [r6], #1
 8008128:	e7de      	b.n	80080e8 <_scanf_float+0x15c>
 800812a:	6822      	ldr	r2, [r4, #0]
 800812c:	0610      	lsls	r0, r2, #24
 800812e:	f57f af60 	bpl.w	8007ff2 <_scanf_float+0x66>
 8008132:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	e7f4      	b.n	8008124 <_scanf_float+0x198>
 800813a:	f1ba 0f00 	cmp.w	sl, #0
 800813e:	d10c      	bne.n	800815a <_scanf_float+0x1ce>
 8008140:	b977      	cbnz	r7, 8008160 <_scanf_float+0x1d4>
 8008142:	6822      	ldr	r2, [r4, #0]
 8008144:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008148:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800814c:	d108      	bne.n	8008160 <_scanf_float+0x1d4>
 800814e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008152:	6022      	str	r2, [r4, #0]
 8008154:	f04f 0a01 	mov.w	sl, #1
 8008158:	e7e4      	b.n	8008124 <_scanf_float+0x198>
 800815a:	f1ba 0f02 	cmp.w	sl, #2
 800815e:	d050      	beq.n	8008202 <_scanf_float+0x276>
 8008160:	2d01      	cmp	r5, #1
 8008162:	d002      	beq.n	800816a <_scanf_float+0x1de>
 8008164:	2d04      	cmp	r5, #4
 8008166:	f47f af44 	bne.w	8007ff2 <_scanf_float+0x66>
 800816a:	3501      	adds	r5, #1
 800816c:	b2ed      	uxtb	r5, r5
 800816e:	e7d9      	b.n	8008124 <_scanf_float+0x198>
 8008170:	f1ba 0f01 	cmp.w	sl, #1
 8008174:	f47f af3d 	bne.w	8007ff2 <_scanf_float+0x66>
 8008178:	f04f 0a02 	mov.w	sl, #2
 800817c:	e7d2      	b.n	8008124 <_scanf_float+0x198>
 800817e:	b975      	cbnz	r5, 800819e <_scanf_float+0x212>
 8008180:	2f00      	cmp	r7, #0
 8008182:	f47f af37 	bne.w	8007ff4 <_scanf_float+0x68>
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800818c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008190:	f040 8103 	bne.w	800839a <_scanf_float+0x40e>
 8008194:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	2501      	movs	r5, #1
 800819c:	e7c2      	b.n	8008124 <_scanf_float+0x198>
 800819e:	2d03      	cmp	r5, #3
 80081a0:	d0e3      	beq.n	800816a <_scanf_float+0x1de>
 80081a2:	2d05      	cmp	r5, #5
 80081a4:	e7df      	b.n	8008166 <_scanf_float+0x1da>
 80081a6:	2d02      	cmp	r5, #2
 80081a8:	f47f af23 	bne.w	8007ff2 <_scanf_float+0x66>
 80081ac:	2503      	movs	r5, #3
 80081ae:	e7b9      	b.n	8008124 <_scanf_float+0x198>
 80081b0:	2d06      	cmp	r5, #6
 80081b2:	f47f af1e 	bne.w	8007ff2 <_scanf_float+0x66>
 80081b6:	2507      	movs	r5, #7
 80081b8:	e7b4      	b.n	8008124 <_scanf_float+0x198>
 80081ba:	6822      	ldr	r2, [r4, #0]
 80081bc:	0591      	lsls	r1, r2, #22
 80081be:	f57f af18 	bpl.w	8007ff2 <_scanf_float+0x66>
 80081c2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	9702      	str	r7, [sp, #8]
 80081ca:	e7ab      	b.n	8008124 <_scanf_float+0x198>
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80081d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80081d6:	d005      	beq.n	80081e4 <_scanf_float+0x258>
 80081d8:	0550      	lsls	r0, r2, #21
 80081da:	f57f af0a 	bpl.w	8007ff2 <_scanf_float+0x66>
 80081de:	2f00      	cmp	r7, #0
 80081e0:	f000 80db 	beq.w	800839a <_scanf_float+0x40e>
 80081e4:	0591      	lsls	r1, r2, #22
 80081e6:	bf58      	it	pl
 80081e8:	9902      	ldrpl	r1, [sp, #8]
 80081ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081ee:	bf58      	it	pl
 80081f0:	1a79      	subpl	r1, r7, r1
 80081f2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80081f6:	bf58      	it	pl
 80081f8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	2700      	movs	r7, #0
 8008200:	e790      	b.n	8008124 <_scanf_float+0x198>
 8008202:	f04f 0a03 	mov.w	sl, #3
 8008206:	e78d      	b.n	8008124 <_scanf_float+0x198>
 8008208:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800820c:	4649      	mov	r1, r9
 800820e:	4640      	mov	r0, r8
 8008210:	4798      	blx	r3
 8008212:	2800      	cmp	r0, #0
 8008214:	f43f aedf 	beq.w	8007fd6 <_scanf_float+0x4a>
 8008218:	e6eb      	b.n	8007ff2 <_scanf_float+0x66>
 800821a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800821e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008222:	464a      	mov	r2, r9
 8008224:	4640      	mov	r0, r8
 8008226:	4798      	blx	r3
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	3b01      	subs	r3, #1
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	e6eb      	b.n	8008008 <_scanf_float+0x7c>
 8008230:	1e6b      	subs	r3, r5, #1
 8008232:	2b06      	cmp	r3, #6
 8008234:	d824      	bhi.n	8008280 <_scanf_float+0x2f4>
 8008236:	2d02      	cmp	r5, #2
 8008238:	d836      	bhi.n	80082a8 <_scanf_float+0x31c>
 800823a:	9b01      	ldr	r3, [sp, #4]
 800823c:	429e      	cmp	r6, r3
 800823e:	f67f aee7 	bls.w	8008010 <_scanf_float+0x84>
 8008242:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008246:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800824a:	464a      	mov	r2, r9
 800824c:	4640      	mov	r0, r8
 800824e:	4798      	blx	r3
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	3b01      	subs	r3, #1
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	e7f0      	b.n	800823a <_scanf_float+0x2ae>
 8008258:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800825c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008260:	464a      	mov	r2, r9
 8008262:	4640      	mov	r0, r8
 8008264:	4798      	blx	r3
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	3b01      	subs	r3, #1
 800826a:	6123      	str	r3, [r4, #16]
 800826c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008270:	fa5f fa8a 	uxtb.w	sl, sl
 8008274:	f1ba 0f02 	cmp.w	sl, #2
 8008278:	d1ee      	bne.n	8008258 <_scanf_float+0x2cc>
 800827a:	3d03      	subs	r5, #3
 800827c:	b2ed      	uxtb	r5, r5
 800827e:	1b76      	subs	r6, r6, r5
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	05da      	lsls	r2, r3, #23
 8008284:	d530      	bpl.n	80082e8 <_scanf_float+0x35c>
 8008286:	055b      	lsls	r3, r3, #21
 8008288:	d511      	bpl.n	80082ae <_scanf_float+0x322>
 800828a:	9b01      	ldr	r3, [sp, #4]
 800828c:	429e      	cmp	r6, r3
 800828e:	f67f aebf 	bls.w	8008010 <_scanf_float+0x84>
 8008292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800829a:	464a      	mov	r2, r9
 800829c:	4640      	mov	r0, r8
 800829e:	4798      	blx	r3
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	6123      	str	r3, [r4, #16]
 80082a6:	e7f0      	b.n	800828a <_scanf_float+0x2fe>
 80082a8:	46aa      	mov	sl, r5
 80082aa:	46b3      	mov	fp, r6
 80082ac:	e7de      	b.n	800826c <_scanf_float+0x2e0>
 80082ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	2965      	cmp	r1, #101	@ 0x65
 80082b6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80082ba:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	d00c      	beq.n	80082dc <_scanf_float+0x350>
 80082c2:	2945      	cmp	r1, #69	@ 0x45
 80082c4:	d00a      	beq.n	80082dc <_scanf_float+0x350>
 80082c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082ca:	464a      	mov	r2, r9
 80082cc:	4640      	mov	r0, r8
 80082ce:	4798      	blx	r3
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	1eb5      	subs	r5, r6, #2
 80082da:	6123      	str	r3, [r4, #16]
 80082dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082e0:	464a      	mov	r2, r9
 80082e2:	4640      	mov	r0, r8
 80082e4:	4798      	blx	r3
 80082e6:	462e      	mov	r6, r5
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	f012 0210 	ands.w	r2, r2, #16
 80082ee:	d001      	beq.n	80082f4 <_scanf_float+0x368>
 80082f0:	2000      	movs	r0, #0
 80082f2:	e68e      	b.n	8008012 <_scanf_float+0x86>
 80082f4:	7032      	strb	r2, [r6, #0]
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008300:	d125      	bne.n	800834e <_scanf_float+0x3c2>
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	429f      	cmp	r7, r3
 8008306:	d00a      	beq.n	800831e <_scanf_float+0x392>
 8008308:	1bda      	subs	r2, r3, r7
 800830a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800830e:	429e      	cmp	r6, r3
 8008310:	bf28      	it	cs
 8008312:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008316:	4922      	ldr	r1, [pc, #136]	@ (80083a0 <_scanf_float+0x414>)
 8008318:	4630      	mov	r0, r6
 800831a:	f000 f93d 	bl	8008598 <siprintf>
 800831e:	9901      	ldr	r1, [sp, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	4640      	mov	r0, r8
 8008324:	f002 fccc 	bl	800acc0 <_strtod_r>
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	6821      	ldr	r1, [r4, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f011 0f02 	tst.w	r1, #2
 8008332:	ec57 6b10 	vmov	r6, r7, d0
 8008336:	f103 0204 	add.w	r2, r3, #4
 800833a:	d015      	beq.n	8008368 <_scanf_float+0x3dc>
 800833c:	9903      	ldr	r1, [sp, #12]
 800833e:	600a      	str	r2, [r1, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	e9c3 6700 	strd	r6, r7, [r3]
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	3301      	adds	r3, #1
 800834a:	60e3      	str	r3, [r4, #12]
 800834c:	e7d0      	b.n	80082f0 <_scanf_float+0x364>
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0e4      	beq.n	800831e <_scanf_float+0x392>
 8008354:	9905      	ldr	r1, [sp, #20]
 8008356:	230a      	movs	r3, #10
 8008358:	3101      	adds	r1, #1
 800835a:	4640      	mov	r0, r8
 800835c:	f002 fd30 	bl	800adc0 <_strtol_r>
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	9e05      	ldr	r6, [sp, #20]
 8008364:	1ac2      	subs	r2, r0, r3
 8008366:	e7d0      	b.n	800830a <_scanf_float+0x37e>
 8008368:	f011 0f04 	tst.w	r1, #4
 800836c:	9903      	ldr	r1, [sp, #12]
 800836e:	600a      	str	r2, [r1, #0]
 8008370:	d1e6      	bne.n	8008340 <_scanf_float+0x3b4>
 8008372:	681d      	ldr	r5, [r3, #0]
 8008374:	4632      	mov	r2, r6
 8008376:	463b      	mov	r3, r7
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f8 fbfe 	bl	8000b7c <__aeabi_dcmpun>
 8008380:	b128      	cbz	r0, 800838e <_scanf_float+0x402>
 8008382:	4808      	ldr	r0, [pc, #32]	@ (80083a4 <_scanf_float+0x418>)
 8008384:	f000 fa90 	bl	80088a8 <nanf>
 8008388:	ed85 0a00 	vstr	s0, [r5]
 800838c:	e7db      	b.n	8008346 <_scanf_float+0x3ba>
 800838e:	4630      	mov	r0, r6
 8008390:	4639      	mov	r1, r7
 8008392:	f7f8 fc51 	bl	8000c38 <__aeabi_d2f>
 8008396:	6028      	str	r0, [r5, #0]
 8008398:	e7d5      	b.n	8008346 <_scanf_float+0x3ba>
 800839a:	2700      	movs	r7, #0
 800839c:	e62e      	b.n	8007ffc <_scanf_float+0x70>
 800839e:	bf00      	nop
 80083a0:	0800bf68 	.word	0x0800bf68
 80083a4:	0800c0a9 	.word	0x0800c0a9

080083a8 <std>:
 80083a8:	2300      	movs	r3, #0
 80083aa:	b510      	push	{r4, lr}
 80083ac:	4604      	mov	r4, r0
 80083ae:	e9c0 3300 	strd	r3, r3, [r0]
 80083b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083b6:	6083      	str	r3, [r0, #8]
 80083b8:	8181      	strh	r1, [r0, #12]
 80083ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80083bc:	81c2      	strh	r2, [r0, #14]
 80083be:	6183      	str	r3, [r0, #24]
 80083c0:	4619      	mov	r1, r3
 80083c2:	2208      	movs	r2, #8
 80083c4:	305c      	adds	r0, #92	@ 0x5c
 80083c6:	f000 f9e1 	bl	800878c <memset>
 80083ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008400 <std+0x58>)
 80083cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80083ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008404 <std+0x5c>)
 80083d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008408 <std+0x60>)
 80083d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083d6:	4b0d      	ldr	r3, [pc, #52]	@ (800840c <std+0x64>)
 80083d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80083da:	4b0d      	ldr	r3, [pc, #52]	@ (8008410 <std+0x68>)
 80083dc:	6224      	str	r4, [r4, #32]
 80083de:	429c      	cmp	r4, r3
 80083e0:	d006      	beq.n	80083f0 <std+0x48>
 80083e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083e6:	4294      	cmp	r4, r2
 80083e8:	d002      	beq.n	80083f0 <std+0x48>
 80083ea:	33d0      	adds	r3, #208	@ 0xd0
 80083ec:	429c      	cmp	r4, r3
 80083ee:	d105      	bne.n	80083fc <std+0x54>
 80083f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f8:	f000 ba44 	b.w	8008884 <__retarget_lock_init_recursive>
 80083fc:	bd10      	pop	{r4, pc}
 80083fe:	bf00      	nop
 8008400:	080085dd 	.word	0x080085dd
 8008404:	080085ff 	.word	0x080085ff
 8008408:	08008637 	.word	0x08008637
 800840c:	0800865b 	.word	0x0800865b
 8008410:	2000063c 	.word	0x2000063c

08008414 <stdio_exit_handler>:
 8008414:	4a02      	ldr	r2, [pc, #8]	@ (8008420 <stdio_exit_handler+0xc>)
 8008416:	4903      	ldr	r1, [pc, #12]	@ (8008424 <stdio_exit_handler+0x10>)
 8008418:	4803      	ldr	r0, [pc, #12]	@ (8008428 <stdio_exit_handler+0x14>)
 800841a:	f000 b869 	b.w	80084f0 <_fwalk_sglue>
 800841e:	bf00      	nop
 8008420:	20000024 	.word	0x20000024
 8008424:	0800b401 	.word	0x0800b401
 8008428:	20000034 	.word	0x20000034

0800842c <cleanup_stdio>:
 800842c:	6841      	ldr	r1, [r0, #4]
 800842e:	4b0c      	ldr	r3, [pc, #48]	@ (8008460 <cleanup_stdio+0x34>)
 8008430:	4299      	cmp	r1, r3
 8008432:	b510      	push	{r4, lr}
 8008434:	4604      	mov	r4, r0
 8008436:	d001      	beq.n	800843c <cleanup_stdio+0x10>
 8008438:	f002 ffe2 	bl	800b400 <_fflush_r>
 800843c:	68a1      	ldr	r1, [r4, #8]
 800843e:	4b09      	ldr	r3, [pc, #36]	@ (8008464 <cleanup_stdio+0x38>)
 8008440:	4299      	cmp	r1, r3
 8008442:	d002      	beq.n	800844a <cleanup_stdio+0x1e>
 8008444:	4620      	mov	r0, r4
 8008446:	f002 ffdb 	bl	800b400 <_fflush_r>
 800844a:	68e1      	ldr	r1, [r4, #12]
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <cleanup_stdio+0x3c>)
 800844e:	4299      	cmp	r1, r3
 8008450:	d004      	beq.n	800845c <cleanup_stdio+0x30>
 8008452:	4620      	mov	r0, r4
 8008454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008458:	f002 bfd2 	b.w	800b400 <_fflush_r>
 800845c:	bd10      	pop	{r4, pc}
 800845e:	bf00      	nop
 8008460:	2000063c 	.word	0x2000063c
 8008464:	200006a4 	.word	0x200006a4
 8008468:	2000070c 	.word	0x2000070c

0800846c <global_stdio_init.part.0>:
 800846c:	b510      	push	{r4, lr}
 800846e:	4b0b      	ldr	r3, [pc, #44]	@ (800849c <global_stdio_init.part.0+0x30>)
 8008470:	4c0b      	ldr	r4, [pc, #44]	@ (80084a0 <global_stdio_init.part.0+0x34>)
 8008472:	4a0c      	ldr	r2, [pc, #48]	@ (80084a4 <global_stdio_init.part.0+0x38>)
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	4620      	mov	r0, r4
 8008478:	2200      	movs	r2, #0
 800847a:	2104      	movs	r1, #4
 800847c:	f7ff ff94 	bl	80083a8 <std>
 8008480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008484:	2201      	movs	r2, #1
 8008486:	2109      	movs	r1, #9
 8008488:	f7ff ff8e 	bl	80083a8 <std>
 800848c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008490:	2202      	movs	r2, #2
 8008492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008496:	2112      	movs	r1, #18
 8008498:	f7ff bf86 	b.w	80083a8 <std>
 800849c:	20000774 	.word	0x20000774
 80084a0:	2000063c 	.word	0x2000063c
 80084a4:	08008415 	.word	0x08008415

080084a8 <__sfp_lock_acquire>:
 80084a8:	4801      	ldr	r0, [pc, #4]	@ (80084b0 <__sfp_lock_acquire+0x8>)
 80084aa:	f000 b9ec 	b.w	8008886 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	2000077d 	.word	0x2000077d

080084b4 <__sfp_lock_release>:
 80084b4:	4801      	ldr	r0, [pc, #4]	@ (80084bc <__sfp_lock_release+0x8>)
 80084b6:	f000 b9e7 	b.w	8008888 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	2000077d 	.word	0x2000077d

080084c0 <__sinit>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	4604      	mov	r4, r0
 80084c4:	f7ff fff0 	bl	80084a8 <__sfp_lock_acquire>
 80084c8:	6a23      	ldr	r3, [r4, #32]
 80084ca:	b11b      	cbz	r3, 80084d4 <__sinit+0x14>
 80084cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d0:	f7ff bff0 	b.w	80084b4 <__sfp_lock_release>
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <__sinit+0x28>)
 80084d6:	6223      	str	r3, [r4, #32]
 80084d8:	4b04      	ldr	r3, [pc, #16]	@ (80084ec <__sinit+0x2c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1f5      	bne.n	80084cc <__sinit+0xc>
 80084e0:	f7ff ffc4 	bl	800846c <global_stdio_init.part.0>
 80084e4:	e7f2      	b.n	80084cc <__sinit+0xc>
 80084e6:	bf00      	nop
 80084e8:	0800842d 	.word	0x0800842d
 80084ec:	20000774 	.word	0x20000774

080084f0 <_fwalk_sglue>:
 80084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f4:	4607      	mov	r7, r0
 80084f6:	4688      	mov	r8, r1
 80084f8:	4614      	mov	r4, r2
 80084fa:	2600      	movs	r6, #0
 80084fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008500:	f1b9 0901 	subs.w	r9, r9, #1
 8008504:	d505      	bpl.n	8008512 <_fwalk_sglue+0x22>
 8008506:	6824      	ldr	r4, [r4, #0]
 8008508:	2c00      	cmp	r4, #0
 800850a:	d1f7      	bne.n	80084fc <_fwalk_sglue+0xc>
 800850c:	4630      	mov	r0, r6
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d907      	bls.n	8008528 <_fwalk_sglue+0x38>
 8008518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800851c:	3301      	adds	r3, #1
 800851e:	d003      	beq.n	8008528 <_fwalk_sglue+0x38>
 8008520:	4629      	mov	r1, r5
 8008522:	4638      	mov	r0, r7
 8008524:	47c0      	blx	r8
 8008526:	4306      	orrs	r6, r0
 8008528:	3568      	adds	r5, #104	@ 0x68
 800852a:	e7e9      	b.n	8008500 <_fwalk_sglue+0x10>

0800852c <sniprintf>:
 800852c:	b40c      	push	{r2, r3}
 800852e:	b530      	push	{r4, r5, lr}
 8008530:	4b18      	ldr	r3, [pc, #96]	@ (8008594 <sniprintf+0x68>)
 8008532:	1e0c      	subs	r4, r1, #0
 8008534:	681d      	ldr	r5, [r3, #0]
 8008536:	b09d      	sub	sp, #116	@ 0x74
 8008538:	da08      	bge.n	800854c <sniprintf+0x20>
 800853a:	238b      	movs	r3, #139	@ 0x8b
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008542:	b01d      	add	sp, #116	@ 0x74
 8008544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008548:	b002      	add	sp, #8
 800854a:	4770      	bx	lr
 800854c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008550:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008554:	f04f 0300 	mov.w	r3, #0
 8008558:	931b      	str	r3, [sp, #108]	@ 0x6c
 800855a:	bf14      	ite	ne
 800855c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008560:	4623      	moveq	r3, r4
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	9307      	str	r3, [sp, #28]
 8008566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800856a:	9002      	str	r0, [sp, #8]
 800856c:	9006      	str	r0, [sp, #24]
 800856e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008572:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008574:	ab21      	add	r3, sp, #132	@ 0x84
 8008576:	a902      	add	r1, sp, #8
 8008578:	4628      	mov	r0, r5
 800857a:	9301      	str	r3, [sp, #4]
 800857c:	f002 fc7e 	bl	800ae7c <_svfiprintf_r>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	bfbc      	itt	lt
 8008584:	238b      	movlt	r3, #139	@ 0x8b
 8008586:	602b      	strlt	r3, [r5, #0]
 8008588:	2c00      	cmp	r4, #0
 800858a:	d0da      	beq.n	8008542 <sniprintf+0x16>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	e7d6      	b.n	8008542 <sniprintf+0x16>
 8008594:	20000030 	.word	0x20000030

08008598 <siprintf>:
 8008598:	b40e      	push	{r1, r2, r3}
 800859a:	b510      	push	{r4, lr}
 800859c:	b09d      	sub	sp, #116	@ 0x74
 800859e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80085a0:	9002      	str	r0, [sp, #8]
 80085a2:	9006      	str	r0, [sp, #24]
 80085a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80085a8:	480a      	ldr	r0, [pc, #40]	@ (80085d4 <siprintf+0x3c>)
 80085aa:	9107      	str	r1, [sp, #28]
 80085ac:	9104      	str	r1, [sp, #16]
 80085ae:	490a      	ldr	r1, [pc, #40]	@ (80085d8 <siprintf+0x40>)
 80085b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b4:	9105      	str	r1, [sp, #20]
 80085b6:	2400      	movs	r4, #0
 80085b8:	a902      	add	r1, sp, #8
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80085c0:	f002 fc5c 	bl	800ae7c <_svfiprintf_r>
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	701c      	strb	r4, [r3, #0]
 80085c8:	b01d      	add	sp, #116	@ 0x74
 80085ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ce:	b003      	add	sp, #12
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20000030 	.word	0x20000030
 80085d8:	ffff0208 	.word	0xffff0208

080085dc <__sread>:
 80085dc:	b510      	push	{r4, lr}
 80085de:	460c      	mov	r4, r1
 80085e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e4:	f000 f900 	bl	80087e8 <_read_r>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	bfab      	itete	ge
 80085ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085ee:	89a3      	ldrhlt	r3, [r4, #12]
 80085f0:	181b      	addge	r3, r3, r0
 80085f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085f6:	bfac      	ite	ge
 80085f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085fa:	81a3      	strhlt	r3, [r4, #12]
 80085fc:	bd10      	pop	{r4, pc}

080085fe <__swrite>:
 80085fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008602:	461f      	mov	r7, r3
 8008604:	898b      	ldrh	r3, [r1, #12]
 8008606:	05db      	lsls	r3, r3, #23
 8008608:	4605      	mov	r5, r0
 800860a:	460c      	mov	r4, r1
 800860c:	4616      	mov	r6, r2
 800860e:	d505      	bpl.n	800861c <__swrite+0x1e>
 8008610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008614:	2302      	movs	r3, #2
 8008616:	2200      	movs	r2, #0
 8008618:	f000 f8d4 	bl	80087c4 <_lseek_r>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008622:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	4632      	mov	r2, r6
 800862a:	463b      	mov	r3, r7
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008632:	f000 b8eb 	b.w	800880c <_write_r>

08008636 <__sseek>:
 8008636:	b510      	push	{r4, lr}
 8008638:	460c      	mov	r4, r1
 800863a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863e:	f000 f8c1 	bl	80087c4 <_lseek_r>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	bf15      	itete	ne
 8008648:	6560      	strne	r0, [r4, #84]	@ 0x54
 800864a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800864e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008652:	81a3      	strheq	r3, [r4, #12]
 8008654:	bf18      	it	ne
 8008656:	81a3      	strhne	r3, [r4, #12]
 8008658:	bd10      	pop	{r4, pc}

0800865a <__sclose>:
 800865a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865e:	f000 b8a1 	b.w	80087a4 <_close_r>

08008662 <__swbuf_r>:
 8008662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008664:	460e      	mov	r6, r1
 8008666:	4614      	mov	r4, r2
 8008668:	4605      	mov	r5, r0
 800866a:	b118      	cbz	r0, 8008674 <__swbuf_r+0x12>
 800866c:	6a03      	ldr	r3, [r0, #32]
 800866e:	b90b      	cbnz	r3, 8008674 <__swbuf_r+0x12>
 8008670:	f7ff ff26 	bl	80084c0 <__sinit>
 8008674:	69a3      	ldr	r3, [r4, #24]
 8008676:	60a3      	str	r3, [r4, #8]
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	071a      	lsls	r2, r3, #28
 800867c:	d501      	bpl.n	8008682 <__swbuf_r+0x20>
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	b943      	cbnz	r3, 8008694 <__swbuf_r+0x32>
 8008682:	4621      	mov	r1, r4
 8008684:	4628      	mov	r0, r5
 8008686:	f000 f82b 	bl	80086e0 <__swsetup_r>
 800868a:	b118      	cbz	r0, 8008694 <__swbuf_r+0x32>
 800868c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008690:	4638      	mov	r0, r7
 8008692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	6922      	ldr	r2, [r4, #16]
 8008698:	1a98      	subs	r0, r3, r2
 800869a:	6963      	ldr	r3, [r4, #20]
 800869c:	b2f6      	uxtb	r6, r6
 800869e:	4283      	cmp	r3, r0
 80086a0:	4637      	mov	r7, r6
 80086a2:	dc05      	bgt.n	80086b0 <__swbuf_r+0x4e>
 80086a4:	4621      	mov	r1, r4
 80086a6:	4628      	mov	r0, r5
 80086a8:	f002 feaa 	bl	800b400 <_fflush_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d1ed      	bne.n	800868c <__swbuf_r+0x2a>
 80086b0:	68a3      	ldr	r3, [r4, #8]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	60a3      	str	r3, [r4, #8]
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	6022      	str	r2, [r4, #0]
 80086bc:	701e      	strb	r6, [r3, #0]
 80086be:	6962      	ldr	r2, [r4, #20]
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d004      	beq.n	80086d0 <__swbuf_r+0x6e>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	07db      	lsls	r3, r3, #31
 80086ca:	d5e1      	bpl.n	8008690 <__swbuf_r+0x2e>
 80086cc:	2e0a      	cmp	r6, #10
 80086ce:	d1df      	bne.n	8008690 <__swbuf_r+0x2e>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f002 fe94 	bl	800b400 <_fflush_r>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d0d9      	beq.n	8008690 <__swbuf_r+0x2e>
 80086dc:	e7d6      	b.n	800868c <__swbuf_r+0x2a>
	...

080086e0 <__swsetup_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4b29      	ldr	r3, [pc, #164]	@ (8008788 <__swsetup_r+0xa8>)
 80086e4:	4605      	mov	r5, r0
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	460c      	mov	r4, r1
 80086ea:	b118      	cbz	r0, 80086f4 <__swsetup_r+0x14>
 80086ec:	6a03      	ldr	r3, [r0, #32]
 80086ee:	b90b      	cbnz	r3, 80086f4 <__swsetup_r+0x14>
 80086f0:	f7ff fee6 	bl	80084c0 <__sinit>
 80086f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086f8:	0719      	lsls	r1, r3, #28
 80086fa:	d422      	bmi.n	8008742 <__swsetup_r+0x62>
 80086fc:	06da      	lsls	r2, r3, #27
 80086fe:	d407      	bmi.n	8008710 <__swsetup_r+0x30>
 8008700:	2209      	movs	r2, #9
 8008702:	602a      	str	r2, [r5, #0]
 8008704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800870e:	e033      	b.n	8008778 <__swsetup_r+0x98>
 8008710:	0758      	lsls	r0, r3, #29
 8008712:	d512      	bpl.n	800873a <__swsetup_r+0x5a>
 8008714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008716:	b141      	cbz	r1, 800872a <__swsetup_r+0x4a>
 8008718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <__swsetup_r+0x46>
 8008720:	4628      	mov	r0, r5
 8008722:	f000 ff21 	bl	8009568 <_free_r>
 8008726:	2300      	movs	r3, #0
 8008728:	6363      	str	r3, [r4, #52]	@ 0x34
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	2300      	movs	r3, #0
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f043 0308 	orr.w	r3, r3, #8
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	b94b      	cbnz	r3, 800875a <__swsetup_r+0x7a>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800874c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008750:	d003      	beq.n	800875a <__swsetup_r+0x7a>
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f002 fea1 	bl	800b49c <__smakebuf_r>
 800875a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875e:	f013 0201 	ands.w	r2, r3, #1
 8008762:	d00a      	beq.n	800877a <__swsetup_r+0x9a>
 8008764:	2200      	movs	r2, #0
 8008766:	60a2      	str	r2, [r4, #8]
 8008768:	6962      	ldr	r2, [r4, #20]
 800876a:	4252      	negs	r2, r2
 800876c:	61a2      	str	r2, [r4, #24]
 800876e:	6922      	ldr	r2, [r4, #16]
 8008770:	b942      	cbnz	r2, 8008784 <__swsetup_r+0xa4>
 8008772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008776:	d1c5      	bne.n	8008704 <__swsetup_r+0x24>
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	0799      	lsls	r1, r3, #30
 800877c:	bf58      	it	pl
 800877e:	6962      	ldrpl	r2, [r4, #20]
 8008780:	60a2      	str	r2, [r4, #8]
 8008782:	e7f4      	b.n	800876e <__swsetup_r+0x8e>
 8008784:	2000      	movs	r0, #0
 8008786:	e7f7      	b.n	8008778 <__swsetup_r+0x98>
 8008788:	20000030 	.word	0x20000030

0800878c <memset>:
 800878c:	4402      	add	r2, r0
 800878e:	4603      	mov	r3, r0
 8008790:	4293      	cmp	r3, r2
 8008792:	d100      	bne.n	8008796 <memset+0xa>
 8008794:	4770      	bx	lr
 8008796:	f803 1b01 	strb.w	r1, [r3], #1
 800879a:	e7f9      	b.n	8008790 <memset+0x4>

0800879c <_localeconv_r>:
 800879c:	4800      	ldr	r0, [pc, #0]	@ (80087a0 <_localeconv_r+0x4>)
 800879e:	4770      	bx	lr
 80087a0:	20000170 	.word	0x20000170

080087a4 <_close_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d06      	ldr	r5, [pc, #24]	@ (80087c0 <_close_r+0x1c>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	602b      	str	r3, [r5, #0]
 80087b0:	f7fa fbb1 	bl	8002f16 <_close>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_close_r+0x1a>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	b103      	cbz	r3, 80087be <_close_r+0x1a>
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	20000778 	.word	0x20000778

080087c4 <_lseek_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4d07      	ldr	r5, [pc, #28]	@ (80087e4 <_lseek_r+0x20>)
 80087c8:	4604      	mov	r4, r0
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	602a      	str	r2, [r5, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	f7fa fbc6 	bl	8002f64 <_lseek>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_lseek_r+0x1e>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_lseek_r+0x1e>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20000778 	.word	0x20000778

080087e8 <_read_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	@ (8008808 <_read_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7fa fb54 	bl	8002ea4 <_read>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_read_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_read_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20000778 	.word	0x20000778

0800880c <_write_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	@ (800882c <_write_r+0x20>)
 8008810:	4604      	mov	r4, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7fa fb5f 	bl	8002ede <_write>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_write_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_write_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20000778 	.word	0x20000778

08008830 <__errno>:
 8008830:	4b01      	ldr	r3, [pc, #4]	@ (8008838 <__errno+0x8>)
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	20000030 	.word	0x20000030

0800883c <__libc_init_array>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	4d0d      	ldr	r5, [pc, #52]	@ (8008874 <__libc_init_array+0x38>)
 8008840:	4c0d      	ldr	r4, [pc, #52]	@ (8008878 <__libc_init_array+0x3c>)
 8008842:	1b64      	subs	r4, r4, r5
 8008844:	10a4      	asrs	r4, r4, #2
 8008846:	2600      	movs	r6, #0
 8008848:	42a6      	cmp	r6, r4
 800884a:	d109      	bne.n	8008860 <__libc_init_array+0x24>
 800884c:	4d0b      	ldr	r5, [pc, #44]	@ (800887c <__libc_init_array+0x40>)
 800884e:	4c0c      	ldr	r4, [pc, #48]	@ (8008880 <__libc_init_array+0x44>)
 8008850:	f003 fae4 	bl	800be1c <_init>
 8008854:	1b64      	subs	r4, r4, r5
 8008856:	10a4      	asrs	r4, r4, #2
 8008858:	2600      	movs	r6, #0
 800885a:	42a6      	cmp	r6, r4
 800885c:	d105      	bne.n	800886a <__libc_init_array+0x2e>
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	f855 3b04 	ldr.w	r3, [r5], #4
 8008864:	4798      	blx	r3
 8008866:	3601      	adds	r6, #1
 8008868:	e7ee      	b.n	8008848 <__libc_init_array+0xc>
 800886a:	f855 3b04 	ldr.w	r3, [r5], #4
 800886e:	4798      	blx	r3
 8008870:	3601      	adds	r6, #1
 8008872:	e7f2      	b.n	800885a <__libc_init_array+0x1e>
 8008874:	0800c364 	.word	0x0800c364
 8008878:	0800c364 	.word	0x0800c364
 800887c:	0800c364 	.word	0x0800c364
 8008880:	0800c368 	.word	0x0800c368

08008884 <__retarget_lock_init_recursive>:
 8008884:	4770      	bx	lr

08008886 <__retarget_lock_acquire_recursive>:
 8008886:	4770      	bx	lr

08008888 <__retarget_lock_release_recursive>:
 8008888:	4770      	bx	lr

0800888a <memcpy>:
 800888a:	440a      	add	r2, r1
 800888c:	4291      	cmp	r1, r2
 800888e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008892:	d100      	bne.n	8008896 <memcpy+0xc>
 8008894:	4770      	bx	lr
 8008896:	b510      	push	{r4, lr}
 8008898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800889c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a0:	4291      	cmp	r1, r2
 80088a2:	d1f9      	bne.n	8008898 <memcpy+0xe>
 80088a4:	bd10      	pop	{r4, pc}
	...

080088a8 <nanf>:
 80088a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80088b0 <nanf+0x8>
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	7fc00000 	.word	0x7fc00000

080088b4 <quorem>:
 80088b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	6903      	ldr	r3, [r0, #16]
 80088ba:	690c      	ldr	r4, [r1, #16]
 80088bc:	42a3      	cmp	r3, r4
 80088be:	4607      	mov	r7, r0
 80088c0:	db7e      	blt.n	80089c0 <quorem+0x10c>
 80088c2:	3c01      	subs	r4, #1
 80088c4:	f101 0814 	add.w	r8, r1, #20
 80088c8:	00a3      	lsls	r3, r4, #2
 80088ca:	f100 0514 	add.w	r5, r0, #20
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088de:	3301      	adds	r3, #1
 80088e0:	429a      	cmp	r2, r3
 80088e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80088ea:	d32e      	bcc.n	800894a <quorem+0x96>
 80088ec:	f04f 0a00 	mov.w	sl, #0
 80088f0:	46c4      	mov	ip, r8
 80088f2:	46ae      	mov	lr, r5
 80088f4:	46d3      	mov	fp, sl
 80088f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088fa:	b298      	uxth	r0, r3
 80088fc:	fb06 a000 	mla	r0, r6, r0, sl
 8008900:	0c02      	lsrs	r2, r0, #16
 8008902:	0c1b      	lsrs	r3, r3, #16
 8008904:	fb06 2303 	mla	r3, r6, r3, r2
 8008908:	f8de 2000 	ldr.w	r2, [lr]
 800890c:	b280      	uxth	r0, r0
 800890e:	b292      	uxth	r2, r2
 8008910:	1a12      	subs	r2, r2, r0
 8008912:	445a      	add	r2, fp
 8008914:	f8de 0000 	ldr.w	r0, [lr]
 8008918:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800891c:	b29b      	uxth	r3, r3
 800891e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008922:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008926:	b292      	uxth	r2, r2
 8008928:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800892c:	45e1      	cmp	r9, ip
 800892e:	f84e 2b04 	str.w	r2, [lr], #4
 8008932:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008936:	d2de      	bcs.n	80088f6 <quorem+0x42>
 8008938:	9b00      	ldr	r3, [sp, #0]
 800893a:	58eb      	ldr	r3, [r5, r3]
 800893c:	b92b      	cbnz	r3, 800894a <quorem+0x96>
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	3b04      	subs	r3, #4
 8008942:	429d      	cmp	r5, r3
 8008944:	461a      	mov	r2, r3
 8008946:	d32f      	bcc.n	80089a8 <quorem+0xf4>
 8008948:	613c      	str	r4, [r7, #16]
 800894a:	4638      	mov	r0, r7
 800894c:	f001 f9c8 	bl	8009ce0 <__mcmp>
 8008950:	2800      	cmp	r0, #0
 8008952:	db25      	blt.n	80089a0 <quorem+0xec>
 8008954:	4629      	mov	r1, r5
 8008956:	2000      	movs	r0, #0
 8008958:	f858 2b04 	ldr.w	r2, [r8], #4
 800895c:	f8d1 c000 	ldr.w	ip, [r1]
 8008960:	fa1f fe82 	uxth.w	lr, r2
 8008964:	fa1f f38c 	uxth.w	r3, ip
 8008968:	eba3 030e 	sub.w	r3, r3, lr
 800896c:	4403      	add	r3, r0
 800896e:	0c12      	lsrs	r2, r2, #16
 8008970:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008974:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008978:	b29b      	uxth	r3, r3
 800897a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800897e:	45c1      	cmp	r9, r8
 8008980:	f841 3b04 	str.w	r3, [r1], #4
 8008984:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008988:	d2e6      	bcs.n	8008958 <quorem+0xa4>
 800898a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800898e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008992:	b922      	cbnz	r2, 800899e <quorem+0xea>
 8008994:	3b04      	subs	r3, #4
 8008996:	429d      	cmp	r5, r3
 8008998:	461a      	mov	r2, r3
 800899a:	d30b      	bcc.n	80089b4 <quorem+0x100>
 800899c:	613c      	str	r4, [r7, #16]
 800899e:	3601      	adds	r6, #1
 80089a0:	4630      	mov	r0, r6
 80089a2:	b003      	add	sp, #12
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	6812      	ldr	r2, [r2, #0]
 80089aa:	3b04      	subs	r3, #4
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	d1cb      	bne.n	8008948 <quorem+0x94>
 80089b0:	3c01      	subs	r4, #1
 80089b2:	e7c6      	b.n	8008942 <quorem+0x8e>
 80089b4:	6812      	ldr	r2, [r2, #0]
 80089b6:	3b04      	subs	r3, #4
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d1ef      	bne.n	800899c <quorem+0xe8>
 80089bc:	3c01      	subs	r4, #1
 80089be:	e7ea      	b.n	8008996 <quorem+0xe2>
 80089c0:	2000      	movs	r0, #0
 80089c2:	e7ee      	b.n	80089a2 <quorem+0xee>
 80089c4:	0000      	movs	r0, r0
	...

080089c8 <_dtoa_r>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	69c7      	ldr	r7, [r0, #28]
 80089ce:	b097      	sub	sp, #92	@ 0x5c
 80089d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80089d4:	ec55 4b10 	vmov	r4, r5, d0
 80089d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80089da:	9107      	str	r1, [sp, #28]
 80089dc:	4681      	mov	r9, r0
 80089de:	920c      	str	r2, [sp, #48]	@ 0x30
 80089e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80089e2:	b97f      	cbnz	r7, 8008a04 <_dtoa_r+0x3c>
 80089e4:	2010      	movs	r0, #16
 80089e6:	f000 fe09 	bl	80095fc <malloc>
 80089ea:	4602      	mov	r2, r0
 80089ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80089f0:	b920      	cbnz	r0, 80089fc <_dtoa_r+0x34>
 80089f2:	4ba9      	ldr	r3, [pc, #676]	@ (8008c98 <_dtoa_r+0x2d0>)
 80089f4:	21ef      	movs	r1, #239	@ 0xef
 80089f6:	48a9      	ldr	r0, [pc, #676]	@ (8008c9c <_dtoa_r+0x2d4>)
 80089f8:	f002 fdf2 	bl	800b5e0 <__assert_func>
 80089fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a00:	6007      	str	r7, [r0, #0]
 8008a02:	60c7      	str	r7, [r0, #12]
 8008a04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a08:	6819      	ldr	r1, [r3, #0]
 8008a0a:	b159      	cbz	r1, 8008a24 <_dtoa_r+0x5c>
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	604a      	str	r2, [r1, #4]
 8008a10:	2301      	movs	r3, #1
 8008a12:	4093      	lsls	r3, r2
 8008a14:	608b      	str	r3, [r1, #8]
 8008a16:	4648      	mov	r0, r9
 8008a18:	f000 fee6 	bl	80097e8 <_Bfree>
 8008a1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	1e2b      	subs	r3, r5, #0
 8008a26:	bfb9      	ittee	lt
 8008a28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a2c:	9305      	strlt	r3, [sp, #20]
 8008a2e:	2300      	movge	r3, #0
 8008a30:	6033      	strge	r3, [r6, #0]
 8008a32:	9f05      	ldr	r7, [sp, #20]
 8008a34:	4b9a      	ldr	r3, [pc, #616]	@ (8008ca0 <_dtoa_r+0x2d8>)
 8008a36:	bfbc      	itt	lt
 8008a38:	2201      	movlt	r2, #1
 8008a3a:	6032      	strlt	r2, [r6, #0]
 8008a3c:	43bb      	bics	r3, r7
 8008a3e:	d112      	bne.n	8008a66 <_dtoa_r+0x9e>
 8008a40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a4c:	4323      	orrs	r3, r4
 8008a4e:	f000 855a 	beq.w	8009506 <_dtoa_r+0xb3e>
 8008a52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008cb4 <_dtoa_r+0x2ec>
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 855c 	beq.w	8009516 <_dtoa_r+0xb4e>
 8008a5e:	f10a 0303 	add.w	r3, sl, #3
 8008a62:	f000 bd56 	b.w	8009512 <_dtoa_r+0xb4a>
 8008a66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	ec51 0b17 	vmov	r0, r1, d7
 8008a70:	2300      	movs	r3, #0
 8008a72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008a76:	f7f8 f84f 	bl	8000b18 <__aeabi_dcmpeq>
 8008a7a:	4680      	mov	r8, r0
 8008a7c:	b158      	cbz	r0, 8008a96 <_dtoa_r+0xce>
 8008a7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a80:	2301      	movs	r3, #1
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a86:	b113      	cbz	r3, 8008a8e <_dtoa_r+0xc6>
 8008a88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a8a:	4b86      	ldr	r3, [pc, #536]	@ (8008ca4 <_dtoa_r+0x2dc>)
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008cb8 <_dtoa_r+0x2f0>
 8008a92:	f000 bd40 	b.w	8009516 <_dtoa_r+0xb4e>
 8008a96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008a9a:	aa14      	add	r2, sp, #80	@ 0x50
 8008a9c:	a915      	add	r1, sp, #84	@ 0x54
 8008a9e:	4648      	mov	r0, r9
 8008aa0:	f001 fa3e 	bl	8009f20 <__d2b>
 8008aa4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008aa8:	9002      	str	r0, [sp, #8]
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	d078      	beq.n	8008ba0 <_dtoa_r+0x1d8>
 8008aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008abc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ac0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ac4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ac8:	4619      	mov	r1, r3
 8008aca:	2200      	movs	r2, #0
 8008acc:	4b76      	ldr	r3, [pc, #472]	@ (8008ca8 <_dtoa_r+0x2e0>)
 8008ace:	f7f7 fc03 	bl	80002d8 <__aeabi_dsub>
 8008ad2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008c80 <_dtoa_r+0x2b8>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	f7f7 fdb6 	bl	8000648 <__aeabi_dmul>
 8008adc:	a36a      	add	r3, pc, #424	@ (adr r3, 8008c88 <_dtoa_r+0x2c0>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	f7f7 fbfb 	bl	80002dc <__adddf3>
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4630      	mov	r0, r6
 8008aea:	460d      	mov	r5, r1
 8008aec:	f7f7 fd42 	bl	8000574 <__aeabi_i2d>
 8008af0:	a367      	add	r3, pc, #412	@ (adr r3, 8008c90 <_dtoa_r+0x2c8>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fda7 	bl	8000648 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4620      	mov	r0, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7f7 fbeb 	bl	80002dc <__adddf3>
 8008b06:	4604      	mov	r4, r0
 8008b08:	460d      	mov	r5, r1
 8008b0a:	f7f8 f84d 	bl	8000ba8 <__aeabi_d2iz>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4607      	mov	r7, r0
 8008b12:	2300      	movs	r3, #0
 8008b14:	4620      	mov	r0, r4
 8008b16:	4629      	mov	r1, r5
 8008b18:	f7f8 f808 	bl	8000b2c <__aeabi_dcmplt>
 8008b1c:	b140      	cbz	r0, 8008b30 <_dtoa_r+0x168>
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7f7 fd28 	bl	8000574 <__aeabi_i2d>
 8008b24:	4622      	mov	r2, r4
 8008b26:	462b      	mov	r3, r5
 8008b28:	f7f7 fff6 	bl	8000b18 <__aeabi_dcmpeq>
 8008b2c:	b900      	cbnz	r0, 8008b30 <_dtoa_r+0x168>
 8008b2e:	3f01      	subs	r7, #1
 8008b30:	2f16      	cmp	r7, #22
 8008b32:	d852      	bhi.n	8008bda <_dtoa_r+0x212>
 8008b34:	4b5d      	ldr	r3, [pc, #372]	@ (8008cac <_dtoa_r+0x2e4>)
 8008b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b42:	f7f7 fff3 	bl	8000b2c <__aeabi_dcmplt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d049      	beq.n	8008bde <_dtoa_r+0x216>
 8008b4a:	3f01      	subs	r7, #1
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b52:	1b9b      	subs	r3, r3, r6
 8008b54:	1e5a      	subs	r2, r3, #1
 8008b56:	bf45      	ittet	mi
 8008b58:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b5c:	9300      	strmi	r3, [sp, #0]
 8008b5e:	2300      	movpl	r3, #0
 8008b60:	2300      	movmi	r3, #0
 8008b62:	9206      	str	r2, [sp, #24]
 8008b64:	bf54      	ite	pl
 8008b66:	9300      	strpl	r3, [sp, #0]
 8008b68:	9306      	strmi	r3, [sp, #24]
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	db39      	blt.n	8008be2 <_dtoa_r+0x21a>
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	970d      	str	r7, [sp, #52]	@ 0x34
 8008b72:	443b      	add	r3, r7
 8008b74:	9306      	str	r3, [sp, #24]
 8008b76:	2300      	movs	r3, #0
 8008b78:	9308      	str	r3, [sp, #32]
 8008b7a:	9b07      	ldr	r3, [sp, #28]
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	d863      	bhi.n	8008c48 <_dtoa_r+0x280>
 8008b80:	2b05      	cmp	r3, #5
 8008b82:	bfc4      	itt	gt
 8008b84:	3b04      	subgt	r3, #4
 8008b86:	9307      	strgt	r3, [sp, #28]
 8008b88:	9b07      	ldr	r3, [sp, #28]
 8008b8a:	f1a3 0302 	sub.w	r3, r3, #2
 8008b8e:	bfcc      	ite	gt
 8008b90:	2400      	movgt	r4, #0
 8008b92:	2401      	movle	r4, #1
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d863      	bhi.n	8008c60 <_dtoa_r+0x298>
 8008b98:	e8df f003 	tbb	[pc, r3]
 8008b9c:	2b375452 	.word	0x2b375452
 8008ba0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008ba4:	441e      	add	r6, r3
 8008ba6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	bfc1      	itttt	gt
 8008bae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008bb2:	409f      	lslgt	r7, r3
 8008bb4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008bb8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008bbc:	bfd6      	itet	le
 8008bbe:	f1c3 0320 	rsble	r3, r3, #32
 8008bc2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008bc6:	fa04 f003 	lslle.w	r0, r4, r3
 8008bca:	f7f7 fcc3 	bl	8000554 <__aeabi_ui2d>
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bd4:	3e01      	subs	r6, #1
 8008bd6:	9212      	str	r2, [sp, #72]	@ 0x48
 8008bd8:	e776      	b.n	8008ac8 <_dtoa_r+0x100>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e7b7      	b.n	8008b4e <_dtoa_r+0x186>
 8008bde:	9010      	str	r0, [sp, #64]	@ 0x40
 8008be0:	e7b6      	b.n	8008b50 <_dtoa_r+0x188>
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	1bdb      	subs	r3, r3, r7
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	427b      	negs	r3, r7
 8008bea:	9308      	str	r3, [sp, #32]
 8008bec:	2300      	movs	r3, #0
 8008bee:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bf0:	e7c3      	b.n	8008b7a <_dtoa_r+0x1b2>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bf8:	eb07 0b03 	add.w	fp, r7, r3
 8008bfc:	f10b 0301 	add.w	r3, fp, #1
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	9303      	str	r3, [sp, #12]
 8008c04:	bfb8      	it	lt
 8008c06:	2301      	movlt	r3, #1
 8008c08:	e006      	b.n	8008c18 <_dtoa_r+0x250>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dd28      	ble.n	8008c66 <_dtoa_r+0x29e>
 8008c14:	469b      	mov	fp, r3
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	2204      	movs	r2, #4
 8008c20:	f102 0514 	add.w	r5, r2, #20
 8008c24:	429d      	cmp	r5, r3
 8008c26:	d926      	bls.n	8008c76 <_dtoa_r+0x2ae>
 8008c28:	6041      	str	r1, [r0, #4]
 8008c2a:	4648      	mov	r0, r9
 8008c2c:	f000 fd9c 	bl	8009768 <_Balloc>
 8008c30:	4682      	mov	sl, r0
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d142      	bne.n	8008cbc <_dtoa_r+0x2f4>
 8008c36:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb0 <_dtoa_r+0x2e8>)
 8008c38:	4602      	mov	r2, r0
 8008c3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c3e:	e6da      	b.n	80089f6 <_dtoa_r+0x2e>
 8008c40:	2300      	movs	r3, #0
 8008c42:	e7e3      	b.n	8008c0c <_dtoa_r+0x244>
 8008c44:	2300      	movs	r3, #0
 8008c46:	e7d5      	b.n	8008bf4 <_dtoa_r+0x22c>
 8008c48:	2401      	movs	r4, #1
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9307      	str	r3, [sp, #28]
 8008c4e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008c50:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c5a:	2312      	movs	r3, #18
 8008c5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c5e:	e7db      	b.n	8008c18 <_dtoa_r+0x250>
 8008c60:	2301      	movs	r3, #1
 8008c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c64:	e7f4      	b.n	8008c50 <_dtoa_r+0x288>
 8008c66:	f04f 0b01 	mov.w	fp, #1
 8008c6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c6e:	465b      	mov	r3, fp
 8008c70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008c74:	e7d0      	b.n	8008c18 <_dtoa_r+0x250>
 8008c76:	3101      	adds	r1, #1
 8008c78:	0052      	lsls	r2, r2, #1
 8008c7a:	e7d1      	b.n	8008c20 <_dtoa_r+0x258>
 8008c7c:	f3af 8000 	nop.w
 8008c80:	636f4361 	.word	0x636f4361
 8008c84:	3fd287a7 	.word	0x3fd287a7
 8008c88:	8b60c8b3 	.word	0x8b60c8b3
 8008c8c:	3fc68a28 	.word	0x3fc68a28
 8008c90:	509f79fb 	.word	0x509f79fb
 8008c94:	3fd34413 	.word	0x3fd34413
 8008c98:	0800bf7a 	.word	0x0800bf7a
 8008c9c:	0800bf91 	.word	0x0800bf91
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	0800bf45 	.word	0x0800bf45
 8008ca8:	3ff80000 	.word	0x3ff80000
 8008cac:	0800c140 	.word	0x0800c140
 8008cb0:	0800bfe9 	.word	0x0800bfe9
 8008cb4:	0800bf76 	.word	0x0800bf76
 8008cb8:	0800bf44 	.word	0x0800bf44
 8008cbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008cc0:	6018      	str	r0, [r3, #0]
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	2b0e      	cmp	r3, #14
 8008cc6:	f200 80a1 	bhi.w	8008e0c <_dtoa_r+0x444>
 8008cca:	2c00      	cmp	r4, #0
 8008ccc:	f000 809e 	beq.w	8008e0c <_dtoa_r+0x444>
 8008cd0:	2f00      	cmp	r7, #0
 8008cd2:	dd33      	ble.n	8008d3c <_dtoa_r+0x374>
 8008cd4:	4b9c      	ldr	r3, [pc, #624]	@ (8008f48 <_dtoa_r+0x580>)
 8008cd6:	f007 020f 	and.w	r2, r7, #15
 8008cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cde:	ed93 7b00 	vldr	d7, [r3]
 8008ce2:	05f8      	lsls	r0, r7, #23
 8008ce4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008ce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cec:	d516      	bpl.n	8008d1c <_dtoa_r+0x354>
 8008cee:	4b97      	ldr	r3, [pc, #604]	@ (8008f4c <_dtoa_r+0x584>)
 8008cf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cf8:	f7f7 fdd0 	bl	800089c <__aeabi_ddiv>
 8008cfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d00:	f004 040f 	and.w	r4, r4, #15
 8008d04:	2603      	movs	r6, #3
 8008d06:	4d91      	ldr	r5, [pc, #580]	@ (8008f4c <_dtoa_r+0x584>)
 8008d08:	b954      	cbnz	r4, 8008d20 <_dtoa_r+0x358>
 8008d0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d12:	f7f7 fdc3 	bl	800089c <__aeabi_ddiv>
 8008d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d1a:	e028      	b.n	8008d6e <_dtoa_r+0x3a6>
 8008d1c:	2602      	movs	r6, #2
 8008d1e:	e7f2      	b.n	8008d06 <_dtoa_r+0x33e>
 8008d20:	07e1      	lsls	r1, r4, #31
 8008d22:	d508      	bpl.n	8008d36 <_dtoa_r+0x36e>
 8008d24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d2c:	f7f7 fc8c 	bl	8000648 <__aeabi_dmul>
 8008d30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d34:	3601      	adds	r6, #1
 8008d36:	1064      	asrs	r4, r4, #1
 8008d38:	3508      	adds	r5, #8
 8008d3a:	e7e5      	b.n	8008d08 <_dtoa_r+0x340>
 8008d3c:	f000 80af 	beq.w	8008e9e <_dtoa_r+0x4d6>
 8008d40:	427c      	negs	r4, r7
 8008d42:	4b81      	ldr	r3, [pc, #516]	@ (8008f48 <_dtoa_r+0x580>)
 8008d44:	4d81      	ldr	r5, [pc, #516]	@ (8008f4c <_dtoa_r+0x584>)
 8008d46:	f004 020f 	and.w	r2, r4, #15
 8008d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d56:	f7f7 fc77 	bl	8000648 <__aeabi_dmul>
 8008d5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d5e:	1124      	asrs	r4, r4, #4
 8008d60:	2300      	movs	r3, #0
 8008d62:	2602      	movs	r6, #2
 8008d64:	2c00      	cmp	r4, #0
 8008d66:	f040 808f 	bne.w	8008e88 <_dtoa_r+0x4c0>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1d3      	bne.n	8008d16 <_dtoa_r+0x34e>
 8008d6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 8094 	beq.w	8008ea2 <_dtoa_r+0x4da>
 8008d7a:	4b75      	ldr	r3, [pc, #468]	@ (8008f50 <_dtoa_r+0x588>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fed3 	bl	8000b2c <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f000 808b 	beq.w	8008ea2 <_dtoa_r+0x4da>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 8087 	beq.w	8008ea2 <_dtoa_r+0x4da>
 8008d94:	f1bb 0f00 	cmp.w	fp, #0
 8008d98:	dd34      	ble.n	8008e04 <_dtoa_r+0x43c>
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8008f54 <_dtoa_r+0x58c>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fc51 	bl	8000648 <__aeabi_dmul>
 8008da6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008daa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008dae:	3601      	adds	r6, #1
 8008db0:	465c      	mov	r4, fp
 8008db2:	4630      	mov	r0, r6
 8008db4:	f7f7 fbde 	bl	8000574 <__aeabi_i2d>
 8008db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dbc:	f7f7 fc44 	bl	8000648 <__aeabi_dmul>
 8008dc0:	4b65      	ldr	r3, [pc, #404]	@ (8008f58 <_dtoa_r+0x590>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f7f7 fa8a 	bl	80002dc <__adddf3>
 8008dc8:	4605      	mov	r5, r0
 8008dca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008dce:	2c00      	cmp	r4, #0
 8008dd0:	d16a      	bne.n	8008ea8 <_dtoa_r+0x4e0>
 8008dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dd6:	4b61      	ldr	r3, [pc, #388]	@ (8008f5c <_dtoa_r+0x594>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f7f7 fa7d 	bl	80002d8 <__aeabi_dsub>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008de6:	462a      	mov	r2, r5
 8008de8:	4633      	mov	r3, r6
 8008dea:	f7f7 febd 	bl	8000b68 <__aeabi_dcmpgt>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f040 8298 	bne.w	8009324 <_dtoa_r+0x95c>
 8008df4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008df8:	462a      	mov	r2, r5
 8008dfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008dfe:	f7f7 fe95 	bl	8000b2c <__aeabi_dcmplt>
 8008e02:	bb38      	cbnz	r0, 8008e54 <_dtoa_r+0x48c>
 8008e04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008e08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f2c0 8157 	blt.w	80090c2 <_dtoa_r+0x6fa>
 8008e14:	2f0e      	cmp	r7, #14
 8008e16:	f300 8154 	bgt.w	80090c2 <_dtoa_r+0x6fa>
 8008e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8008f48 <_dtoa_r+0x580>)
 8008e1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e20:	ed93 7b00 	vldr	d7, [r3]
 8008e24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	ed8d 7b00 	vstr	d7, [sp]
 8008e2c:	f280 80e5 	bge.w	8008ffa <_dtoa_r+0x632>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f300 80e1 	bgt.w	8008ffa <_dtoa_r+0x632>
 8008e38:	d10c      	bne.n	8008e54 <_dtoa_r+0x48c>
 8008e3a:	4b48      	ldr	r3, [pc, #288]	@ (8008f5c <_dtoa_r+0x594>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	ec51 0b17 	vmov	r0, r1, d7
 8008e42:	f7f7 fc01 	bl	8000648 <__aeabi_dmul>
 8008e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e4a:	f7f7 fe83 	bl	8000b54 <__aeabi_dcmpge>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	f000 8266 	beq.w	8009320 <_dtoa_r+0x958>
 8008e54:	2400      	movs	r4, #0
 8008e56:	4625      	mov	r5, r4
 8008e58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e5a:	4656      	mov	r6, sl
 8008e5c:	ea6f 0803 	mvn.w	r8, r3
 8008e60:	2700      	movs	r7, #0
 8008e62:	4621      	mov	r1, r4
 8008e64:	4648      	mov	r0, r9
 8008e66:	f000 fcbf 	bl	80097e8 <_Bfree>
 8008e6a:	2d00      	cmp	r5, #0
 8008e6c:	f000 80bd 	beq.w	8008fea <_dtoa_r+0x622>
 8008e70:	b12f      	cbz	r7, 8008e7e <_dtoa_r+0x4b6>
 8008e72:	42af      	cmp	r7, r5
 8008e74:	d003      	beq.n	8008e7e <_dtoa_r+0x4b6>
 8008e76:	4639      	mov	r1, r7
 8008e78:	4648      	mov	r0, r9
 8008e7a:	f000 fcb5 	bl	80097e8 <_Bfree>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4648      	mov	r0, r9
 8008e82:	f000 fcb1 	bl	80097e8 <_Bfree>
 8008e86:	e0b0      	b.n	8008fea <_dtoa_r+0x622>
 8008e88:	07e2      	lsls	r2, r4, #31
 8008e8a:	d505      	bpl.n	8008e98 <_dtoa_r+0x4d0>
 8008e8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e90:	f7f7 fbda 	bl	8000648 <__aeabi_dmul>
 8008e94:	3601      	adds	r6, #1
 8008e96:	2301      	movs	r3, #1
 8008e98:	1064      	asrs	r4, r4, #1
 8008e9a:	3508      	adds	r5, #8
 8008e9c:	e762      	b.n	8008d64 <_dtoa_r+0x39c>
 8008e9e:	2602      	movs	r6, #2
 8008ea0:	e765      	b.n	8008d6e <_dtoa_r+0x3a6>
 8008ea2:	9c03      	ldr	r4, [sp, #12]
 8008ea4:	46b8      	mov	r8, r7
 8008ea6:	e784      	b.n	8008db2 <_dtoa_r+0x3ea>
 8008ea8:	4b27      	ldr	r3, [pc, #156]	@ (8008f48 <_dtoa_r+0x580>)
 8008eaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008eac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008eb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008eb4:	4454      	add	r4, sl
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	d054      	beq.n	8008f64 <_dtoa_r+0x59c>
 8008eba:	4929      	ldr	r1, [pc, #164]	@ (8008f60 <_dtoa_r+0x598>)
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f7f7 fced 	bl	800089c <__aeabi_ddiv>
 8008ec2:	4633      	mov	r3, r6
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	f7f7 fa07 	bl	80002d8 <__aeabi_dsub>
 8008eca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ece:	4656      	mov	r6, sl
 8008ed0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ed4:	f7f7 fe68 	bl	8000ba8 <__aeabi_d2iz>
 8008ed8:	4605      	mov	r5, r0
 8008eda:	f7f7 fb4b 	bl	8000574 <__aeabi_i2d>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ee6:	f7f7 f9f7 	bl	80002d8 <__aeabi_dsub>
 8008eea:	3530      	adds	r5, #48	@ 0x30
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ef4:	f806 5b01 	strb.w	r5, [r6], #1
 8008ef8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008efc:	f7f7 fe16 	bl	8000b2c <__aeabi_dcmplt>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d172      	bne.n	8008fea <_dtoa_r+0x622>
 8008f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f08:	4911      	ldr	r1, [pc, #68]	@ (8008f50 <_dtoa_r+0x588>)
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f7f7 f9e4 	bl	80002d8 <__aeabi_dsub>
 8008f10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f14:	f7f7 fe0a 	bl	8000b2c <__aeabi_dcmplt>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f040 80b4 	bne.w	8009086 <_dtoa_r+0x6be>
 8008f1e:	42a6      	cmp	r6, r4
 8008f20:	f43f af70 	beq.w	8008e04 <_dtoa_r+0x43c>
 8008f24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f28:	4b0a      	ldr	r3, [pc, #40]	@ (8008f54 <_dtoa_r+0x58c>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f7f7 fb8c 	bl	8000648 <__aeabi_dmul>
 8008f30:	4b08      	ldr	r3, [pc, #32]	@ (8008f54 <_dtoa_r+0x58c>)
 8008f32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f36:	2200      	movs	r2, #0
 8008f38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f3c:	f7f7 fb84 	bl	8000648 <__aeabi_dmul>
 8008f40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f44:	e7c4      	b.n	8008ed0 <_dtoa_r+0x508>
 8008f46:	bf00      	nop
 8008f48:	0800c140 	.word	0x0800c140
 8008f4c:	0800c118 	.word	0x0800c118
 8008f50:	3ff00000 	.word	0x3ff00000
 8008f54:	40240000 	.word	0x40240000
 8008f58:	401c0000 	.word	0x401c0000
 8008f5c:	40140000 	.word	0x40140000
 8008f60:	3fe00000 	.word	0x3fe00000
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	f7f7 fb6e 	bl	8000648 <__aeabi_dmul>
 8008f6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f72:	4656      	mov	r6, sl
 8008f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f78:	f7f7 fe16 	bl	8000ba8 <__aeabi_d2iz>
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	f7f7 faf9 	bl	8000574 <__aeabi_i2d>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f8a:	f7f7 f9a5 	bl	80002d8 <__aeabi_dsub>
 8008f8e:	3530      	adds	r5, #48	@ 0x30
 8008f90:	f806 5b01 	strb.w	r5, [r6], #1
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	42a6      	cmp	r6, r4
 8008f9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f9e:	f04f 0200 	mov.w	r2, #0
 8008fa2:	d124      	bne.n	8008fee <_dtoa_r+0x626>
 8008fa4:	4baf      	ldr	r3, [pc, #700]	@ (8009264 <_dtoa_r+0x89c>)
 8008fa6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008faa:	f7f7 f997 	bl	80002dc <__adddf3>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fb6:	f7f7 fdd7 	bl	8000b68 <__aeabi_dcmpgt>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d163      	bne.n	8009086 <_dtoa_r+0x6be>
 8008fbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fc2:	49a8      	ldr	r1, [pc, #672]	@ (8009264 <_dtoa_r+0x89c>)
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f7f7 f987 	bl	80002d8 <__aeabi_dsub>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd2:	f7f7 fdab 	bl	8000b2c <__aeabi_dcmplt>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f43f af14 	beq.w	8008e04 <_dtoa_r+0x43c>
 8008fdc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008fde:	1e73      	subs	r3, r6, #1
 8008fe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fe2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fe6:	2b30      	cmp	r3, #48	@ 0x30
 8008fe8:	d0f8      	beq.n	8008fdc <_dtoa_r+0x614>
 8008fea:	4647      	mov	r7, r8
 8008fec:	e03b      	b.n	8009066 <_dtoa_r+0x69e>
 8008fee:	4b9e      	ldr	r3, [pc, #632]	@ (8009268 <_dtoa_r+0x8a0>)
 8008ff0:	f7f7 fb2a 	bl	8000648 <__aeabi_dmul>
 8008ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ff8:	e7bc      	b.n	8008f74 <_dtoa_r+0x5ac>
 8008ffa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ffe:	4656      	mov	r6, sl
 8009000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009004:	4620      	mov	r0, r4
 8009006:	4629      	mov	r1, r5
 8009008:	f7f7 fc48 	bl	800089c <__aeabi_ddiv>
 800900c:	f7f7 fdcc 	bl	8000ba8 <__aeabi_d2iz>
 8009010:	4680      	mov	r8, r0
 8009012:	f7f7 faaf 	bl	8000574 <__aeabi_i2d>
 8009016:	e9dd 2300 	ldrd	r2, r3, [sp]
 800901a:	f7f7 fb15 	bl	8000648 <__aeabi_dmul>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4620      	mov	r0, r4
 8009024:	4629      	mov	r1, r5
 8009026:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800902a:	f7f7 f955 	bl	80002d8 <__aeabi_dsub>
 800902e:	f806 4b01 	strb.w	r4, [r6], #1
 8009032:	9d03      	ldr	r5, [sp, #12]
 8009034:	eba6 040a 	sub.w	r4, r6, sl
 8009038:	42a5      	cmp	r5, r4
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	d133      	bne.n	80090a8 <_dtoa_r+0x6e0>
 8009040:	f7f7 f94c 	bl	80002dc <__adddf3>
 8009044:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	f7f7 fd8c 	bl	8000b68 <__aeabi_dcmpgt>
 8009050:	b9c0      	cbnz	r0, 8009084 <_dtoa_r+0x6bc>
 8009052:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 fd5d 	bl	8000b18 <__aeabi_dcmpeq>
 800905e:	b110      	cbz	r0, 8009066 <_dtoa_r+0x69e>
 8009060:	f018 0f01 	tst.w	r8, #1
 8009064:	d10e      	bne.n	8009084 <_dtoa_r+0x6bc>
 8009066:	9902      	ldr	r1, [sp, #8]
 8009068:	4648      	mov	r0, r9
 800906a:	f000 fbbd 	bl	80097e8 <_Bfree>
 800906e:	2300      	movs	r3, #0
 8009070:	7033      	strb	r3, [r6, #0]
 8009072:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009074:	3701      	adds	r7, #1
 8009076:	601f      	str	r7, [r3, #0]
 8009078:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 824b 	beq.w	8009516 <_dtoa_r+0xb4e>
 8009080:	601e      	str	r6, [r3, #0]
 8009082:	e248      	b.n	8009516 <_dtoa_r+0xb4e>
 8009084:	46b8      	mov	r8, r7
 8009086:	4633      	mov	r3, r6
 8009088:	461e      	mov	r6, r3
 800908a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800908e:	2a39      	cmp	r2, #57	@ 0x39
 8009090:	d106      	bne.n	80090a0 <_dtoa_r+0x6d8>
 8009092:	459a      	cmp	sl, r3
 8009094:	d1f8      	bne.n	8009088 <_dtoa_r+0x6c0>
 8009096:	2230      	movs	r2, #48	@ 0x30
 8009098:	f108 0801 	add.w	r8, r8, #1
 800909c:	f88a 2000 	strb.w	r2, [sl]
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	3201      	adds	r2, #1
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	e7a0      	b.n	8008fea <_dtoa_r+0x622>
 80090a8:	4b6f      	ldr	r3, [pc, #444]	@ (8009268 <_dtoa_r+0x8a0>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f7f7 facc 	bl	8000648 <__aeabi_dmul>
 80090b0:	2200      	movs	r2, #0
 80090b2:	2300      	movs	r3, #0
 80090b4:	4604      	mov	r4, r0
 80090b6:	460d      	mov	r5, r1
 80090b8:	f7f7 fd2e 	bl	8000b18 <__aeabi_dcmpeq>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d09f      	beq.n	8009000 <_dtoa_r+0x638>
 80090c0:	e7d1      	b.n	8009066 <_dtoa_r+0x69e>
 80090c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090c4:	2a00      	cmp	r2, #0
 80090c6:	f000 80ea 	beq.w	800929e <_dtoa_r+0x8d6>
 80090ca:	9a07      	ldr	r2, [sp, #28]
 80090cc:	2a01      	cmp	r2, #1
 80090ce:	f300 80cd 	bgt.w	800926c <_dtoa_r+0x8a4>
 80090d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	f000 80c1 	beq.w	800925c <_dtoa_r+0x894>
 80090da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090de:	9c08      	ldr	r4, [sp, #32]
 80090e0:	9e00      	ldr	r6, [sp, #0]
 80090e2:	9a00      	ldr	r2, [sp, #0]
 80090e4:	441a      	add	r2, r3
 80090e6:	9200      	str	r2, [sp, #0]
 80090e8:	9a06      	ldr	r2, [sp, #24]
 80090ea:	2101      	movs	r1, #1
 80090ec:	441a      	add	r2, r3
 80090ee:	4648      	mov	r0, r9
 80090f0:	9206      	str	r2, [sp, #24]
 80090f2:	f000 fc77 	bl	80099e4 <__i2b>
 80090f6:	4605      	mov	r5, r0
 80090f8:	b166      	cbz	r6, 8009114 <_dtoa_r+0x74c>
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	dd09      	ble.n	8009114 <_dtoa_r+0x74c>
 8009100:	42b3      	cmp	r3, r6
 8009102:	9a00      	ldr	r2, [sp, #0]
 8009104:	bfa8      	it	ge
 8009106:	4633      	movge	r3, r6
 8009108:	1ad2      	subs	r2, r2, r3
 800910a:	9200      	str	r2, [sp, #0]
 800910c:	9a06      	ldr	r2, [sp, #24]
 800910e:	1af6      	subs	r6, r6, r3
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	9306      	str	r3, [sp, #24]
 8009114:	9b08      	ldr	r3, [sp, #32]
 8009116:	b30b      	cbz	r3, 800915c <_dtoa_r+0x794>
 8009118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80c6 	beq.w	80092ac <_dtoa_r+0x8e4>
 8009120:	2c00      	cmp	r4, #0
 8009122:	f000 80c0 	beq.w	80092a6 <_dtoa_r+0x8de>
 8009126:	4629      	mov	r1, r5
 8009128:	4622      	mov	r2, r4
 800912a:	4648      	mov	r0, r9
 800912c:	f000 fd12 	bl	8009b54 <__pow5mult>
 8009130:	9a02      	ldr	r2, [sp, #8]
 8009132:	4601      	mov	r1, r0
 8009134:	4605      	mov	r5, r0
 8009136:	4648      	mov	r0, r9
 8009138:	f000 fc6a 	bl	8009a10 <__multiply>
 800913c:	9902      	ldr	r1, [sp, #8]
 800913e:	4680      	mov	r8, r0
 8009140:	4648      	mov	r0, r9
 8009142:	f000 fb51 	bl	80097e8 <_Bfree>
 8009146:	9b08      	ldr	r3, [sp, #32]
 8009148:	1b1b      	subs	r3, r3, r4
 800914a:	9308      	str	r3, [sp, #32]
 800914c:	f000 80b1 	beq.w	80092b2 <_dtoa_r+0x8ea>
 8009150:	9a08      	ldr	r2, [sp, #32]
 8009152:	4641      	mov	r1, r8
 8009154:	4648      	mov	r0, r9
 8009156:	f000 fcfd 	bl	8009b54 <__pow5mult>
 800915a:	9002      	str	r0, [sp, #8]
 800915c:	2101      	movs	r1, #1
 800915e:	4648      	mov	r0, r9
 8009160:	f000 fc40 	bl	80099e4 <__i2b>
 8009164:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009166:	4604      	mov	r4, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 81d8 	beq.w	800951e <_dtoa_r+0xb56>
 800916e:	461a      	mov	r2, r3
 8009170:	4601      	mov	r1, r0
 8009172:	4648      	mov	r0, r9
 8009174:	f000 fcee 	bl	8009b54 <__pow5mult>
 8009178:	9b07      	ldr	r3, [sp, #28]
 800917a:	2b01      	cmp	r3, #1
 800917c:	4604      	mov	r4, r0
 800917e:	f300 809f 	bgt.w	80092c0 <_dtoa_r+0x8f8>
 8009182:	9b04      	ldr	r3, [sp, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f040 8097 	bne.w	80092b8 <_dtoa_r+0x8f0>
 800918a:	9b05      	ldr	r3, [sp, #20]
 800918c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009190:	2b00      	cmp	r3, #0
 8009192:	f040 8093 	bne.w	80092bc <_dtoa_r+0x8f4>
 8009196:	9b05      	ldr	r3, [sp, #20]
 8009198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800919c:	0d1b      	lsrs	r3, r3, #20
 800919e:	051b      	lsls	r3, r3, #20
 80091a0:	b133      	cbz	r3, 80091b0 <_dtoa_r+0x7e8>
 80091a2:	9b00      	ldr	r3, [sp, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	9b06      	ldr	r3, [sp, #24]
 80091aa:	3301      	adds	r3, #1
 80091ac:	9306      	str	r3, [sp, #24]
 80091ae:	2301      	movs	r3, #1
 80091b0:	9308      	str	r3, [sp, #32]
 80091b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 81b8 	beq.w	800952a <_dtoa_r+0xb62>
 80091ba:	6923      	ldr	r3, [r4, #16]
 80091bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091c0:	6918      	ldr	r0, [r3, #16]
 80091c2:	f000 fbc3 	bl	800994c <__hi0bits>
 80091c6:	f1c0 0020 	rsb	r0, r0, #32
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	4418      	add	r0, r3
 80091ce:	f010 001f 	ands.w	r0, r0, #31
 80091d2:	f000 8082 	beq.w	80092da <_dtoa_r+0x912>
 80091d6:	f1c0 0320 	rsb	r3, r0, #32
 80091da:	2b04      	cmp	r3, #4
 80091dc:	dd73      	ble.n	80092c6 <_dtoa_r+0x8fe>
 80091de:	9b00      	ldr	r3, [sp, #0]
 80091e0:	f1c0 001c 	rsb	r0, r0, #28
 80091e4:	4403      	add	r3, r0
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	9b06      	ldr	r3, [sp, #24]
 80091ea:	4403      	add	r3, r0
 80091ec:	4406      	add	r6, r0
 80091ee:	9306      	str	r3, [sp, #24]
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dd05      	ble.n	8009202 <_dtoa_r+0x83a>
 80091f6:	9902      	ldr	r1, [sp, #8]
 80091f8:	461a      	mov	r2, r3
 80091fa:	4648      	mov	r0, r9
 80091fc:	f000 fd04 	bl	8009c08 <__lshift>
 8009200:	9002      	str	r0, [sp, #8]
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd05      	ble.n	8009214 <_dtoa_r+0x84c>
 8009208:	4621      	mov	r1, r4
 800920a:	461a      	mov	r2, r3
 800920c:	4648      	mov	r0, r9
 800920e:	f000 fcfb 	bl	8009c08 <__lshift>
 8009212:	4604      	mov	r4, r0
 8009214:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d061      	beq.n	80092de <_dtoa_r+0x916>
 800921a:	9802      	ldr	r0, [sp, #8]
 800921c:	4621      	mov	r1, r4
 800921e:	f000 fd5f 	bl	8009ce0 <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	da5b      	bge.n	80092de <_dtoa_r+0x916>
 8009226:	2300      	movs	r3, #0
 8009228:	9902      	ldr	r1, [sp, #8]
 800922a:	220a      	movs	r2, #10
 800922c:	4648      	mov	r0, r9
 800922e:	f000 fafd 	bl	800982c <__multadd>
 8009232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009234:	9002      	str	r0, [sp, #8]
 8009236:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 8177 	beq.w	800952e <_dtoa_r+0xb66>
 8009240:	4629      	mov	r1, r5
 8009242:	2300      	movs	r3, #0
 8009244:	220a      	movs	r2, #10
 8009246:	4648      	mov	r0, r9
 8009248:	f000 faf0 	bl	800982c <__multadd>
 800924c:	f1bb 0f00 	cmp.w	fp, #0
 8009250:	4605      	mov	r5, r0
 8009252:	dc6f      	bgt.n	8009334 <_dtoa_r+0x96c>
 8009254:	9b07      	ldr	r3, [sp, #28]
 8009256:	2b02      	cmp	r3, #2
 8009258:	dc49      	bgt.n	80092ee <_dtoa_r+0x926>
 800925a:	e06b      	b.n	8009334 <_dtoa_r+0x96c>
 800925c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800925e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009262:	e73c      	b.n	80090de <_dtoa_r+0x716>
 8009264:	3fe00000 	.word	0x3fe00000
 8009268:	40240000 	.word	0x40240000
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	1e5c      	subs	r4, r3, #1
 8009270:	9b08      	ldr	r3, [sp, #32]
 8009272:	42a3      	cmp	r3, r4
 8009274:	db09      	blt.n	800928a <_dtoa_r+0x8c2>
 8009276:	1b1c      	subs	r4, r3, r4
 8009278:	9b03      	ldr	r3, [sp, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f6bf af30 	bge.w	80090e0 <_dtoa_r+0x718>
 8009280:	9b00      	ldr	r3, [sp, #0]
 8009282:	9a03      	ldr	r2, [sp, #12]
 8009284:	1a9e      	subs	r6, r3, r2
 8009286:	2300      	movs	r3, #0
 8009288:	e72b      	b.n	80090e2 <_dtoa_r+0x71a>
 800928a:	9b08      	ldr	r3, [sp, #32]
 800928c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800928e:	9408      	str	r4, [sp, #32]
 8009290:	1ae3      	subs	r3, r4, r3
 8009292:	441a      	add	r2, r3
 8009294:	9e00      	ldr	r6, [sp, #0]
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	920d      	str	r2, [sp, #52]	@ 0x34
 800929a:	2400      	movs	r4, #0
 800929c:	e721      	b.n	80090e2 <_dtoa_r+0x71a>
 800929e:	9c08      	ldr	r4, [sp, #32]
 80092a0:	9e00      	ldr	r6, [sp, #0]
 80092a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80092a4:	e728      	b.n	80090f8 <_dtoa_r+0x730>
 80092a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80092aa:	e751      	b.n	8009150 <_dtoa_r+0x788>
 80092ac:	9a08      	ldr	r2, [sp, #32]
 80092ae:	9902      	ldr	r1, [sp, #8]
 80092b0:	e750      	b.n	8009154 <_dtoa_r+0x78c>
 80092b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80092b6:	e751      	b.n	800915c <_dtoa_r+0x794>
 80092b8:	2300      	movs	r3, #0
 80092ba:	e779      	b.n	80091b0 <_dtoa_r+0x7e8>
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	e777      	b.n	80091b0 <_dtoa_r+0x7e8>
 80092c0:	2300      	movs	r3, #0
 80092c2:	9308      	str	r3, [sp, #32]
 80092c4:	e779      	b.n	80091ba <_dtoa_r+0x7f2>
 80092c6:	d093      	beq.n	80091f0 <_dtoa_r+0x828>
 80092c8:	9a00      	ldr	r2, [sp, #0]
 80092ca:	331c      	adds	r3, #28
 80092cc:	441a      	add	r2, r3
 80092ce:	9200      	str	r2, [sp, #0]
 80092d0:	9a06      	ldr	r2, [sp, #24]
 80092d2:	441a      	add	r2, r3
 80092d4:	441e      	add	r6, r3
 80092d6:	9206      	str	r2, [sp, #24]
 80092d8:	e78a      	b.n	80091f0 <_dtoa_r+0x828>
 80092da:	4603      	mov	r3, r0
 80092dc:	e7f4      	b.n	80092c8 <_dtoa_r+0x900>
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	46b8      	mov	r8, r7
 80092e4:	dc20      	bgt.n	8009328 <_dtoa_r+0x960>
 80092e6:	469b      	mov	fp, r3
 80092e8:	9b07      	ldr	r3, [sp, #28]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	dd1e      	ble.n	800932c <_dtoa_r+0x964>
 80092ee:	f1bb 0f00 	cmp.w	fp, #0
 80092f2:	f47f adb1 	bne.w	8008e58 <_dtoa_r+0x490>
 80092f6:	4621      	mov	r1, r4
 80092f8:	465b      	mov	r3, fp
 80092fa:	2205      	movs	r2, #5
 80092fc:	4648      	mov	r0, r9
 80092fe:	f000 fa95 	bl	800982c <__multadd>
 8009302:	4601      	mov	r1, r0
 8009304:	4604      	mov	r4, r0
 8009306:	9802      	ldr	r0, [sp, #8]
 8009308:	f000 fcea 	bl	8009ce0 <__mcmp>
 800930c:	2800      	cmp	r0, #0
 800930e:	f77f ada3 	ble.w	8008e58 <_dtoa_r+0x490>
 8009312:	4656      	mov	r6, sl
 8009314:	2331      	movs	r3, #49	@ 0x31
 8009316:	f806 3b01 	strb.w	r3, [r6], #1
 800931a:	f108 0801 	add.w	r8, r8, #1
 800931e:	e59f      	b.n	8008e60 <_dtoa_r+0x498>
 8009320:	9c03      	ldr	r4, [sp, #12]
 8009322:	46b8      	mov	r8, r7
 8009324:	4625      	mov	r5, r4
 8009326:	e7f4      	b.n	8009312 <_dtoa_r+0x94a>
 8009328:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800932c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8101 	beq.w	8009536 <_dtoa_r+0xb6e>
 8009334:	2e00      	cmp	r6, #0
 8009336:	dd05      	ble.n	8009344 <_dtoa_r+0x97c>
 8009338:	4629      	mov	r1, r5
 800933a:	4632      	mov	r2, r6
 800933c:	4648      	mov	r0, r9
 800933e:	f000 fc63 	bl	8009c08 <__lshift>
 8009342:	4605      	mov	r5, r0
 8009344:	9b08      	ldr	r3, [sp, #32]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d05c      	beq.n	8009404 <_dtoa_r+0xa3c>
 800934a:	6869      	ldr	r1, [r5, #4]
 800934c:	4648      	mov	r0, r9
 800934e:	f000 fa0b 	bl	8009768 <_Balloc>
 8009352:	4606      	mov	r6, r0
 8009354:	b928      	cbnz	r0, 8009362 <_dtoa_r+0x99a>
 8009356:	4b82      	ldr	r3, [pc, #520]	@ (8009560 <_dtoa_r+0xb98>)
 8009358:	4602      	mov	r2, r0
 800935a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800935e:	f7ff bb4a 	b.w	80089f6 <_dtoa_r+0x2e>
 8009362:	692a      	ldr	r2, [r5, #16]
 8009364:	3202      	adds	r2, #2
 8009366:	0092      	lsls	r2, r2, #2
 8009368:	f105 010c 	add.w	r1, r5, #12
 800936c:	300c      	adds	r0, #12
 800936e:	f7ff fa8c 	bl	800888a <memcpy>
 8009372:	2201      	movs	r2, #1
 8009374:	4631      	mov	r1, r6
 8009376:	4648      	mov	r0, r9
 8009378:	f000 fc46 	bl	8009c08 <__lshift>
 800937c:	f10a 0301 	add.w	r3, sl, #1
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	eb0a 030b 	add.w	r3, sl, fp
 8009386:	9308      	str	r3, [sp, #32]
 8009388:	9b04      	ldr	r3, [sp, #16]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	462f      	mov	r7, r5
 8009390:	9306      	str	r3, [sp, #24]
 8009392:	4605      	mov	r5, r0
 8009394:	9b00      	ldr	r3, [sp, #0]
 8009396:	9802      	ldr	r0, [sp, #8]
 8009398:	4621      	mov	r1, r4
 800939a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800939e:	f7ff fa89 	bl	80088b4 <quorem>
 80093a2:	4603      	mov	r3, r0
 80093a4:	3330      	adds	r3, #48	@ 0x30
 80093a6:	9003      	str	r0, [sp, #12]
 80093a8:	4639      	mov	r1, r7
 80093aa:	9802      	ldr	r0, [sp, #8]
 80093ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ae:	f000 fc97 	bl	8009ce0 <__mcmp>
 80093b2:	462a      	mov	r2, r5
 80093b4:	9004      	str	r0, [sp, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	4648      	mov	r0, r9
 80093ba:	f000 fcad 	bl	8009d18 <__mdiff>
 80093be:	68c2      	ldr	r2, [r0, #12]
 80093c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c2:	4606      	mov	r6, r0
 80093c4:	bb02      	cbnz	r2, 8009408 <_dtoa_r+0xa40>
 80093c6:	4601      	mov	r1, r0
 80093c8:	9802      	ldr	r0, [sp, #8]
 80093ca:	f000 fc89 	bl	8009ce0 <__mcmp>
 80093ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d0:	4602      	mov	r2, r0
 80093d2:	4631      	mov	r1, r6
 80093d4:	4648      	mov	r0, r9
 80093d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80093d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093da:	f000 fa05 	bl	80097e8 <_Bfree>
 80093de:	9b07      	ldr	r3, [sp, #28]
 80093e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80093e2:	9e00      	ldr	r6, [sp, #0]
 80093e4:	ea42 0103 	orr.w	r1, r2, r3
 80093e8:	9b06      	ldr	r3, [sp, #24]
 80093ea:	4319      	orrs	r1, r3
 80093ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ee:	d10d      	bne.n	800940c <_dtoa_r+0xa44>
 80093f0:	2b39      	cmp	r3, #57	@ 0x39
 80093f2:	d027      	beq.n	8009444 <_dtoa_r+0xa7c>
 80093f4:	9a04      	ldr	r2, [sp, #16]
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	dd01      	ble.n	80093fe <_dtoa_r+0xa36>
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	3331      	adds	r3, #49	@ 0x31
 80093fe:	f88b 3000 	strb.w	r3, [fp]
 8009402:	e52e      	b.n	8008e62 <_dtoa_r+0x49a>
 8009404:	4628      	mov	r0, r5
 8009406:	e7b9      	b.n	800937c <_dtoa_r+0x9b4>
 8009408:	2201      	movs	r2, #1
 800940a:	e7e2      	b.n	80093d2 <_dtoa_r+0xa0a>
 800940c:	9904      	ldr	r1, [sp, #16]
 800940e:	2900      	cmp	r1, #0
 8009410:	db04      	blt.n	800941c <_dtoa_r+0xa54>
 8009412:	9807      	ldr	r0, [sp, #28]
 8009414:	4301      	orrs	r1, r0
 8009416:	9806      	ldr	r0, [sp, #24]
 8009418:	4301      	orrs	r1, r0
 800941a:	d120      	bne.n	800945e <_dtoa_r+0xa96>
 800941c:	2a00      	cmp	r2, #0
 800941e:	ddee      	ble.n	80093fe <_dtoa_r+0xa36>
 8009420:	9902      	ldr	r1, [sp, #8]
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	2201      	movs	r2, #1
 8009426:	4648      	mov	r0, r9
 8009428:	f000 fbee 	bl	8009c08 <__lshift>
 800942c:	4621      	mov	r1, r4
 800942e:	9002      	str	r0, [sp, #8]
 8009430:	f000 fc56 	bl	8009ce0 <__mcmp>
 8009434:	2800      	cmp	r0, #0
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	dc02      	bgt.n	8009440 <_dtoa_r+0xa78>
 800943a:	d1e0      	bne.n	80093fe <_dtoa_r+0xa36>
 800943c:	07da      	lsls	r2, r3, #31
 800943e:	d5de      	bpl.n	80093fe <_dtoa_r+0xa36>
 8009440:	2b39      	cmp	r3, #57	@ 0x39
 8009442:	d1da      	bne.n	80093fa <_dtoa_r+0xa32>
 8009444:	2339      	movs	r3, #57	@ 0x39
 8009446:	f88b 3000 	strb.w	r3, [fp]
 800944a:	4633      	mov	r3, r6
 800944c:	461e      	mov	r6, r3
 800944e:	3b01      	subs	r3, #1
 8009450:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009454:	2a39      	cmp	r2, #57	@ 0x39
 8009456:	d04e      	beq.n	80094f6 <_dtoa_r+0xb2e>
 8009458:	3201      	adds	r2, #1
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	e501      	b.n	8008e62 <_dtoa_r+0x49a>
 800945e:	2a00      	cmp	r2, #0
 8009460:	dd03      	ble.n	800946a <_dtoa_r+0xaa2>
 8009462:	2b39      	cmp	r3, #57	@ 0x39
 8009464:	d0ee      	beq.n	8009444 <_dtoa_r+0xa7c>
 8009466:	3301      	adds	r3, #1
 8009468:	e7c9      	b.n	80093fe <_dtoa_r+0xa36>
 800946a:	9a00      	ldr	r2, [sp, #0]
 800946c:	9908      	ldr	r1, [sp, #32]
 800946e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009472:	428a      	cmp	r2, r1
 8009474:	d028      	beq.n	80094c8 <_dtoa_r+0xb00>
 8009476:	9902      	ldr	r1, [sp, #8]
 8009478:	2300      	movs	r3, #0
 800947a:	220a      	movs	r2, #10
 800947c:	4648      	mov	r0, r9
 800947e:	f000 f9d5 	bl	800982c <__multadd>
 8009482:	42af      	cmp	r7, r5
 8009484:	9002      	str	r0, [sp, #8]
 8009486:	f04f 0300 	mov.w	r3, #0
 800948a:	f04f 020a 	mov.w	r2, #10
 800948e:	4639      	mov	r1, r7
 8009490:	4648      	mov	r0, r9
 8009492:	d107      	bne.n	80094a4 <_dtoa_r+0xadc>
 8009494:	f000 f9ca 	bl	800982c <__multadd>
 8009498:	4607      	mov	r7, r0
 800949a:	4605      	mov	r5, r0
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	e777      	b.n	8009394 <_dtoa_r+0x9cc>
 80094a4:	f000 f9c2 	bl	800982c <__multadd>
 80094a8:	4629      	mov	r1, r5
 80094aa:	4607      	mov	r7, r0
 80094ac:	2300      	movs	r3, #0
 80094ae:	220a      	movs	r2, #10
 80094b0:	4648      	mov	r0, r9
 80094b2:	f000 f9bb 	bl	800982c <__multadd>
 80094b6:	4605      	mov	r5, r0
 80094b8:	e7f0      	b.n	800949c <_dtoa_r+0xad4>
 80094ba:	f1bb 0f00 	cmp.w	fp, #0
 80094be:	bfcc      	ite	gt
 80094c0:	465e      	movgt	r6, fp
 80094c2:	2601      	movle	r6, #1
 80094c4:	4456      	add	r6, sl
 80094c6:	2700      	movs	r7, #0
 80094c8:	9902      	ldr	r1, [sp, #8]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	2201      	movs	r2, #1
 80094ce:	4648      	mov	r0, r9
 80094d0:	f000 fb9a 	bl	8009c08 <__lshift>
 80094d4:	4621      	mov	r1, r4
 80094d6:	9002      	str	r0, [sp, #8]
 80094d8:	f000 fc02 	bl	8009ce0 <__mcmp>
 80094dc:	2800      	cmp	r0, #0
 80094de:	dcb4      	bgt.n	800944a <_dtoa_r+0xa82>
 80094e0:	d102      	bne.n	80094e8 <_dtoa_r+0xb20>
 80094e2:	9b00      	ldr	r3, [sp, #0]
 80094e4:	07db      	lsls	r3, r3, #31
 80094e6:	d4b0      	bmi.n	800944a <_dtoa_r+0xa82>
 80094e8:	4633      	mov	r3, r6
 80094ea:	461e      	mov	r6, r3
 80094ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094f0:	2a30      	cmp	r2, #48	@ 0x30
 80094f2:	d0fa      	beq.n	80094ea <_dtoa_r+0xb22>
 80094f4:	e4b5      	b.n	8008e62 <_dtoa_r+0x49a>
 80094f6:	459a      	cmp	sl, r3
 80094f8:	d1a8      	bne.n	800944c <_dtoa_r+0xa84>
 80094fa:	2331      	movs	r3, #49	@ 0x31
 80094fc:	f108 0801 	add.w	r8, r8, #1
 8009500:	f88a 3000 	strb.w	r3, [sl]
 8009504:	e4ad      	b.n	8008e62 <_dtoa_r+0x49a>
 8009506:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009508:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009564 <_dtoa_r+0xb9c>
 800950c:	b11b      	cbz	r3, 8009516 <_dtoa_r+0xb4e>
 800950e:	f10a 0308 	add.w	r3, sl, #8
 8009512:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	4650      	mov	r0, sl
 8009518:	b017      	add	sp, #92	@ 0x5c
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951e:	9b07      	ldr	r3, [sp, #28]
 8009520:	2b01      	cmp	r3, #1
 8009522:	f77f ae2e 	ble.w	8009182 <_dtoa_r+0x7ba>
 8009526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009528:	9308      	str	r3, [sp, #32]
 800952a:	2001      	movs	r0, #1
 800952c:	e64d      	b.n	80091ca <_dtoa_r+0x802>
 800952e:	f1bb 0f00 	cmp.w	fp, #0
 8009532:	f77f aed9 	ble.w	80092e8 <_dtoa_r+0x920>
 8009536:	4656      	mov	r6, sl
 8009538:	9802      	ldr	r0, [sp, #8]
 800953a:	4621      	mov	r1, r4
 800953c:	f7ff f9ba 	bl	80088b4 <quorem>
 8009540:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009544:	f806 3b01 	strb.w	r3, [r6], #1
 8009548:	eba6 020a 	sub.w	r2, r6, sl
 800954c:	4593      	cmp	fp, r2
 800954e:	ddb4      	ble.n	80094ba <_dtoa_r+0xaf2>
 8009550:	9902      	ldr	r1, [sp, #8]
 8009552:	2300      	movs	r3, #0
 8009554:	220a      	movs	r2, #10
 8009556:	4648      	mov	r0, r9
 8009558:	f000 f968 	bl	800982c <__multadd>
 800955c:	9002      	str	r0, [sp, #8]
 800955e:	e7eb      	b.n	8009538 <_dtoa_r+0xb70>
 8009560:	0800bfe9 	.word	0x0800bfe9
 8009564:	0800bf6d 	.word	0x0800bf6d

08009568 <_free_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4605      	mov	r5, r0
 800956c:	2900      	cmp	r1, #0
 800956e:	d041      	beq.n	80095f4 <_free_r+0x8c>
 8009570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009574:	1f0c      	subs	r4, r1, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	18e4      	addlt	r4, r4, r3
 800957c:	f000 f8e8 	bl	8009750 <__malloc_lock>
 8009580:	4a1d      	ldr	r2, [pc, #116]	@ (80095f8 <_free_r+0x90>)
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	b933      	cbnz	r3, 8009594 <_free_r+0x2c>
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	6014      	str	r4, [r2, #0]
 800958a:	4628      	mov	r0, r5
 800958c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009590:	f000 b8e4 	b.w	800975c <__malloc_unlock>
 8009594:	42a3      	cmp	r3, r4
 8009596:	d908      	bls.n	80095aa <_free_r+0x42>
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	1821      	adds	r1, r4, r0
 800959c:	428b      	cmp	r3, r1
 800959e:	bf01      	itttt	eq
 80095a0:	6819      	ldreq	r1, [r3, #0]
 80095a2:	685b      	ldreq	r3, [r3, #4]
 80095a4:	1809      	addeq	r1, r1, r0
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	e7ed      	b.n	8009586 <_free_r+0x1e>
 80095aa:	461a      	mov	r2, r3
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	b10b      	cbz	r3, 80095b4 <_free_r+0x4c>
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	d9fa      	bls.n	80095aa <_free_r+0x42>
 80095b4:	6811      	ldr	r1, [r2, #0]
 80095b6:	1850      	adds	r0, r2, r1
 80095b8:	42a0      	cmp	r0, r4
 80095ba:	d10b      	bne.n	80095d4 <_free_r+0x6c>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	4401      	add	r1, r0
 80095c0:	1850      	adds	r0, r2, r1
 80095c2:	4283      	cmp	r3, r0
 80095c4:	6011      	str	r1, [r2, #0]
 80095c6:	d1e0      	bne.n	800958a <_free_r+0x22>
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	6053      	str	r3, [r2, #4]
 80095ce:	4408      	add	r0, r1
 80095d0:	6010      	str	r0, [r2, #0]
 80095d2:	e7da      	b.n	800958a <_free_r+0x22>
 80095d4:	d902      	bls.n	80095dc <_free_r+0x74>
 80095d6:	230c      	movs	r3, #12
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	e7d6      	b.n	800958a <_free_r+0x22>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	1821      	adds	r1, r4, r0
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf04      	itt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	6063      	str	r3, [r4, #4]
 80095ea:	bf04      	itt	eq
 80095ec:	1809      	addeq	r1, r1, r0
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	6054      	str	r4, [r2, #4]
 80095f2:	e7ca      	b.n	800958a <_free_r+0x22>
 80095f4:	bd38      	pop	{r3, r4, r5, pc}
 80095f6:	bf00      	nop
 80095f8:	20000784 	.word	0x20000784

080095fc <malloc>:
 80095fc:	4b02      	ldr	r3, [pc, #8]	@ (8009608 <malloc+0xc>)
 80095fe:	4601      	mov	r1, r0
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	f000 b825 	b.w	8009650 <_malloc_r>
 8009606:	bf00      	nop
 8009608:	20000030 	.word	0x20000030

0800960c <sbrk_aligned>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	4e0f      	ldr	r6, [pc, #60]	@ (800964c <sbrk_aligned+0x40>)
 8009610:	460c      	mov	r4, r1
 8009612:	6831      	ldr	r1, [r6, #0]
 8009614:	4605      	mov	r5, r0
 8009616:	b911      	cbnz	r1, 800961e <sbrk_aligned+0x12>
 8009618:	f001 ffca 	bl	800b5b0 <_sbrk_r>
 800961c:	6030      	str	r0, [r6, #0]
 800961e:	4621      	mov	r1, r4
 8009620:	4628      	mov	r0, r5
 8009622:	f001 ffc5 	bl	800b5b0 <_sbrk_r>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d103      	bne.n	8009632 <sbrk_aligned+0x26>
 800962a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800962e:	4620      	mov	r0, r4
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	1cc4      	adds	r4, r0, #3
 8009634:	f024 0403 	bic.w	r4, r4, #3
 8009638:	42a0      	cmp	r0, r4
 800963a:	d0f8      	beq.n	800962e <sbrk_aligned+0x22>
 800963c:	1a21      	subs	r1, r4, r0
 800963e:	4628      	mov	r0, r5
 8009640:	f001 ffb6 	bl	800b5b0 <_sbrk_r>
 8009644:	3001      	adds	r0, #1
 8009646:	d1f2      	bne.n	800962e <sbrk_aligned+0x22>
 8009648:	e7ef      	b.n	800962a <sbrk_aligned+0x1e>
 800964a:	bf00      	nop
 800964c:	20000780 	.word	0x20000780

08009650 <_malloc_r>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	1ccd      	adds	r5, r1, #3
 8009656:	f025 0503 	bic.w	r5, r5, #3
 800965a:	3508      	adds	r5, #8
 800965c:	2d0c      	cmp	r5, #12
 800965e:	bf38      	it	cc
 8009660:	250c      	movcc	r5, #12
 8009662:	2d00      	cmp	r5, #0
 8009664:	4606      	mov	r6, r0
 8009666:	db01      	blt.n	800966c <_malloc_r+0x1c>
 8009668:	42a9      	cmp	r1, r5
 800966a:	d904      	bls.n	8009676 <_malloc_r+0x26>
 800966c:	230c      	movs	r3, #12
 800966e:	6033      	str	r3, [r6, #0]
 8009670:	2000      	movs	r0, #0
 8009672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800974c <_malloc_r+0xfc>
 800967a:	f000 f869 	bl	8009750 <__malloc_lock>
 800967e:	f8d8 3000 	ldr.w	r3, [r8]
 8009682:	461c      	mov	r4, r3
 8009684:	bb44      	cbnz	r4, 80096d8 <_malloc_r+0x88>
 8009686:	4629      	mov	r1, r5
 8009688:	4630      	mov	r0, r6
 800968a:	f7ff ffbf 	bl	800960c <sbrk_aligned>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	4604      	mov	r4, r0
 8009692:	d158      	bne.n	8009746 <_malloc_r+0xf6>
 8009694:	f8d8 4000 	ldr.w	r4, [r8]
 8009698:	4627      	mov	r7, r4
 800969a:	2f00      	cmp	r7, #0
 800969c:	d143      	bne.n	8009726 <_malloc_r+0xd6>
 800969e:	2c00      	cmp	r4, #0
 80096a0:	d04b      	beq.n	800973a <_malloc_r+0xea>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	4639      	mov	r1, r7
 80096a6:	4630      	mov	r0, r6
 80096a8:	eb04 0903 	add.w	r9, r4, r3
 80096ac:	f001 ff80 	bl	800b5b0 <_sbrk_r>
 80096b0:	4581      	cmp	r9, r0
 80096b2:	d142      	bne.n	800973a <_malloc_r+0xea>
 80096b4:	6821      	ldr	r1, [r4, #0]
 80096b6:	1a6d      	subs	r5, r5, r1
 80096b8:	4629      	mov	r1, r5
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7ff ffa6 	bl	800960c <sbrk_aligned>
 80096c0:	3001      	adds	r0, #1
 80096c2:	d03a      	beq.n	800973a <_malloc_r+0xea>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	442b      	add	r3, r5
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	f8d8 3000 	ldr.w	r3, [r8]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	bb62      	cbnz	r2, 800972c <_malloc_r+0xdc>
 80096d2:	f8c8 7000 	str.w	r7, [r8]
 80096d6:	e00f      	b.n	80096f8 <_malloc_r+0xa8>
 80096d8:	6822      	ldr	r2, [r4, #0]
 80096da:	1b52      	subs	r2, r2, r5
 80096dc:	d420      	bmi.n	8009720 <_malloc_r+0xd0>
 80096de:	2a0b      	cmp	r2, #11
 80096e0:	d917      	bls.n	8009712 <_malloc_r+0xc2>
 80096e2:	1961      	adds	r1, r4, r5
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	6025      	str	r5, [r4, #0]
 80096e8:	bf18      	it	ne
 80096ea:	6059      	strne	r1, [r3, #4]
 80096ec:	6863      	ldr	r3, [r4, #4]
 80096ee:	bf08      	it	eq
 80096f0:	f8c8 1000 	streq.w	r1, [r8]
 80096f4:	5162      	str	r2, [r4, r5]
 80096f6:	604b      	str	r3, [r1, #4]
 80096f8:	4630      	mov	r0, r6
 80096fa:	f000 f82f 	bl	800975c <__malloc_unlock>
 80096fe:	f104 000b 	add.w	r0, r4, #11
 8009702:	1d23      	adds	r3, r4, #4
 8009704:	f020 0007 	bic.w	r0, r0, #7
 8009708:	1ac2      	subs	r2, r0, r3
 800970a:	bf1c      	itt	ne
 800970c:	1a1b      	subne	r3, r3, r0
 800970e:	50a3      	strne	r3, [r4, r2]
 8009710:	e7af      	b.n	8009672 <_malloc_r+0x22>
 8009712:	6862      	ldr	r2, [r4, #4]
 8009714:	42a3      	cmp	r3, r4
 8009716:	bf0c      	ite	eq
 8009718:	f8c8 2000 	streq.w	r2, [r8]
 800971c:	605a      	strne	r2, [r3, #4]
 800971e:	e7eb      	b.n	80096f8 <_malloc_r+0xa8>
 8009720:	4623      	mov	r3, r4
 8009722:	6864      	ldr	r4, [r4, #4]
 8009724:	e7ae      	b.n	8009684 <_malloc_r+0x34>
 8009726:	463c      	mov	r4, r7
 8009728:	687f      	ldr	r7, [r7, #4]
 800972a:	e7b6      	b.n	800969a <_malloc_r+0x4a>
 800972c:	461a      	mov	r2, r3
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	42a3      	cmp	r3, r4
 8009732:	d1fb      	bne.n	800972c <_malloc_r+0xdc>
 8009734:	2300      	movs	r3, #0
 8009736:	6053      	str	r3, [r2, #4]
 8009738:	e7de      	b.n	80096f8 <_malloc_r+0xa8>
 800973a:	230c      	movs	r3, #12
 800973c:	6033      	str	r3, [r6, #0]
 800973e:	4630      	mov	r0, r6
 8009740:	f000 f80c 	bl	800975c <__malloc_unlock>
 8009744:	e794      	b.n	8009670 <_malloc_r+0x20>
 8009746:	6005      	str	r5, [r0, #0]
 8009748:	e7d6      	b.n	80096f8 <_malloc_r+0xa8>
 800974a:	bf00      	nop
 800974c:	20000784 	.word	0x20000784

08009750 <__malloc_lock>:
 8009750:	4801      	ldr	r0, [pc, #4]	@ (8009758 <__malloc_lock+0x8>)
 8009752:	f7ff b898 	b.w	8008886 <__retarget_lock_acquire_recursive>
 8009756:	bf00      	nop
 8009758:	2000077c 	.word	0x2000077c

0800975c <__malloc_unlock>:
 800975c:	4801      	ldr	r0, [pc, #4]	@ (8009764 <__malloc_unlock+0x8>)
 800975e:	f7ff b893 	b.w	8008888 <__retarget_lock_release_recursive>
 8009762:	bf00      	nop
 8009764:	2000077c 	.word	0x2000077c

08009768 <_Balloc>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	69c6      	ldr	r6, [r0, #28]
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	b976      	cbnz	r6, 8009790 <_Balloc+0x28>
 8009772:	2010      	movs	r0, #16
 8009774:	f7ff ff42 	bl	80095fc <malloc>
 8009778:	4602      	mov	r2, r0
 800977a:	61e0      	str	r0, [r4, #28]
 800977c:	b920      	cbnz	r0, 8009788 <_Balloc+0x20>
 800977e:	4b18      	ldr	r3, [pc, #96]	@ (80097e0 <_Balloc+0x78>)
 8009780:	4818      	ldr	r0, [pc, #96]	@ (80097e4 <_Balloc+0x7c>)
 8009782:	216b      	movs	r1, #107	@ 0x6b
 8009784:	f001 ff2c 	bl	800b5e0 <__assert_func>
 8009788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800978c:	6006      	str	r6, [r0, #0]
 800978e:	60c6      	str	r6, [r0, #12]
 8009790:	69e6      	ldr	r6, [r4, #28]
 8009792:	68f3      	ldr	r3, [r6, #12]
 8009794:	b183      	cbz	r3, 80097b8 <_Balloc+0x50>
 8009796:	69e3      	ldr	r3, [r4, #28]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800979e:	b9b8      	cbnz	r0, 80097d0 <_Balloc+0x68>
 80097a0:	2101      	movs	r1, #1
 80097a2:	fa01 f605 	lsl.w	r6, r1, r5
 80097a6:	1d72      	adds	r2, r6, #5
 80097a8:	0092      	lsls	r2, r2, #2
 80097aa:	4620      	mov	r0, r4
 80097ac:	f001 ff36 	bl	800b61c <_calloc_r>
 80097b0:	b160      	cbz	r0, 80097cc <_Balloc+0x64>
 80097b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097b6:	e00e      	b.n	80097d6 <_Balloc+0x6e>
 80097b8:	2221      	movs	r2, #33	@ 0x21
 80097ba:	2104      	movs	r1, #4
 80097bc:	4620      	mov	r0, r4
 80097be:	f001 ff2d 	bl	800b61c <_calloc_r>
 80097c2:	69e3      	ldr	r3, [r4, #28]
 80097c4:	60f0      	str	r0, [r6, #12]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e4      	bne.n	8009796 <_Balloc+0x2e>
 80097cc:	2000      	movs	r0, #0
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	6802      	ldr	r2, [r0, #0]
 80097d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097d6:	2300      	movs	r3, #0
 80097d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097dc:	e7f7      	b.n	80097ce <_Balloc+0x66>
 80097de:	bf00      	nop
 80097e0:	0800bf7a 	.word	0x0800bf7a
 80097e4:	0800bffa 	.word	0x0800bffa

080097e8 <_Bfree>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	69c6      	ldr	r6, [r0, #28]
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b976      	cbnz	r6, 8009810 <_Bfree+0x28>
 80097f2:	2010      	movs	r0, #16
 80097f4:	f7ff ff02 	bl	80095fc <malloc>
 80097f8:	4602      	mov	r2, r0
 80097fa:	61e8      	str	r0, [r5, #28]
 80097fc:	b920      	cbnz	r0, 8009808 <_Bfree+0x20>
 80097fe:	4b09      	ldr	r3, [pc, #36]	@ (8009824 <_Bfree+0x3c>)
 8009800:	4809      	ldr	r0, [pc, #36]	@ (8009828 <_Bfree+0x40>)
 8009802:	218f      	movs	r1, #143	@ 0x8f
 8009804:	f001 feec 	bl	800b5e0 <__assert_func>
 8009808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800980c:	6006      	str	r6, [r0, #0]
 800980e:	60c6      	str	r6, [r0, #12]
 8009810:	b13c      	cbz	r4, 8009822 <_Bfree+0x3a>
 8009812:	69eb      	ldr	r3, [r5, #28]
 8009814:	6862      	ldr	r2, [r4, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800981c:	6021      	str	r1, [r4, #0]
 800981e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	0800bf7a 	.word	0x0800bf7a
 8009828:	0800bffa 	.word	0x0800bffa

0800982c <__multadd>:
 800982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	690d      	ldr	r5, [r1, #16]
 8009832:	4607      	mov	r7, r0
 8009834:	460c      	mov	r4, r1
 8009836:	461e      	mov	r6, r3
 8009838:	f101 0c14 	add.w	ip, r1, #20
 800983c:	2000      	movs	r0, #0
 800983e:	f8dc 3000 	ldr.w	r3, [ip]
 8009842:	b299      	uxth	r1, r3
 8009844:	fb02 6101 	mla	r1, r2, r1, r6
 8009848:	0c1e      	lsrs	r6, r3, #16
 800984a:	0c0b      	lsrs	r3, r1, #16
 800984c:	fb02 3306 	mla	r3, r2, r6, r3
 8009850:	b289      	uxth	r1, r1
 8009852:	3001      	adds	r0, #1
 8009854:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009858:	4285      	cmp	r5, r0
 800985a:	f84c 1b04 	str.w	r1, [ip], #4
 800985e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009862:	dcec      	bgt.n	800983e <__multadd+0x12>
 8009864:	b30e      	cbz	r6, 80098aa <__multadd+0x7e>
 8009866:	68a3      	ldr	r3, [r4, #8]
 8009868:	42ab      	cmp	r3, r5
 800986a:	dc19      	bgt.n	80098a0 <__multadd+0x74>
 800986c:	6861      	ldr	r1, [r4, #4]
 800986e:	4638      	mov	r0, r7
 8009870:	3101      	adds	r1, #1
 8009872:	f7ff ff79 	bl	8009768 <_Balloc>
 8009876:	4680      	mov	r8, r0
 8009878:	b928      	cbnz	r0, 8009886 <__multadd+0x5a>
 800987a:	4602      	mov	r2, r0
 800987c:	4b0c      	ldr	r3, [pc, #48]	@ (80098b0 <__multadd+0x84>)
 800987e:	480d      	ldr	r0, [pc, #52]	@ (80098b4 <__multadd+0x88>)
 8009880:	21ba      	movs	r1, #186	@ 0xba
 8009882:	f001 fead 	bl	800b5e0 <__assert_func>
 8009886:	6922      	ldr	r2, [r4, #16]
 8009888:	3202      	adds	r2, #2
 800988a:	f104 010c 	add.w	r1, r4, #12
 800988e:	0092      	lsls	r2, r2, #2
 8009890:	300c      	adds	r0, #12
 8009892:	f7fe fffa 	bl	800888a <memcpy>
 8009896:	4621      	mov	r1, r4
 8009898:	4638      	mov	r0, r7
 800989a:	f7ff ffa5 	bl	80097e8 <_Bfree>
 800989e:	4644      	mov	r4, r8
 80098a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098a4:	3501      	adds	r5, #1
 80098a6:	615e      	str	r6, [r3, #20]
 80098a8:	6125      	str	r5, [r4, #16]
 80098aa:	4620      	mov	r0, r4
 80098ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b0:	0800bfe9 	.word	0x0800bfe9
 80098b4:	0800bffa 	.word	0x0800bffa

080098b8 <__s2b>:
 80098b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	460c      	mov	r4, r1
 80098be:	4615      	mov	r5, r2
 80098c0:	461f      	mov	r7, r3
 80098c2:	2209      	movs	r2, #9
 80098c4:	3308      	adds	r3, #8
 80098c6:	4606      	mov	r6, r0
 80098c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80098cc:	2100      	movs	r1, #0
 80098ce:	2201      	movs	r2, #1
 80098d0:	429a      	cmp	r2, r3
 80098d2:	db09      	blt.n	80098e8 <__s2b+0x30>
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7ff ff47 	bl	8009768 <_Balloc>
 80098da:	b940      	cbnz	r0, 80098ee <__s2b+0x36>
 80098dc:	4602      	mov	r2, r0
 80098de:	4b19      	ldr	r3, [pc, #100]	@ (8009944 <__s2b+0x8c>)
 80098e0:	4819      	ldr	r0, [pc, #100]	@ (8009948 <__s2b+0x90>)
 80098e2:	21d3      	movs	r1, #211	@ 0xd3
 80098e4:	f001 fe7c 	bl	800b5e0 <__assert_func>
 80098e8:	0052      	lsls	r2, r2, #1
 80098ea:	3101      	adds	r1, #1
 80098ec:	e7f0      	b.n	80098d0 <__s2b+0x18>
 80098ee:	9b08      	ldr	r3, [sp, #32]
 80098f0:	6143      	str	r3, [r0, #20]
 80098f2:	2d09      	cmp	r5, #9
 80098f4:	f04f 0301 	mov.w	r3, #1
 80098f8:	6103      	str	r3, [r0, #16]
 80098fa:	dd16      	ble.n	800992a <__s2b+0x72>
 80098fc:	f104 0909 	add.w	r9, r4, #9
 8009900:	46c8      	mov	r8, r9
 8009902:	442c      	add	r4, r5
 8009904:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009908:	4601      	mov	r1, r0
 800990a:	3b30      	subs	r3, #48	@ 0x30
 800990c:	220a      	movs	r2, #10
 800990e:	4630      	mov	r0, r6
 8009910:	f7ff ff8c 	bl	800982c <__multadd>
 8009914:	45a0      	cmp	r8, r4
 8009916:	d1f5      	bne.n	8009904 <__s2b+0x4c>
 8009918:	f1a5 0408 	sub.w	r4, r5, #8
 800991c:	444c      	add	r4, r9
 800991e:	1b2d      	subs	r5, r5, r4
 8009920:	1963      	adds	r3, r4, r5
 8009922:	42bb      	cmp	r3, r7
 8009924:	db04      	blt.n	8009930 <__s2b+0x78>
 8009926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992a:	340a      	adds	r4, #10
 800992c:	2509      	movs	r5, #9
 800992e:	e7f6      	b.n	800991e <__s2b+0x66>
 8009930:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009934:	4601      	mov	r1, r0
 8009936:	3b30      	subs	r3, #48	@ 0x30
 8009938:	220a      	movs	r2, #10
 800993a:	4630      	mov	r0, r6
 800993c:	f7ff ff76 	bl	800982c <__multadd>
 8009940:	e7ee      	b.n	8009920 <__s2b+0x68>
 8009942:	bf00      	nop
 8009944:	0800bfe9 	.word	0x0800bfe9
 8009948:	0800bffa 	.word	0x0800bffa

0800994c <__hi0bits>:
 800994c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009950:	4603      	mov	r3, r0
 8009952:	bf36      	itet	cc
 8009954:	0403      	lslcc	r3, r0, #16
 8009956:	2000      	movcs	r0, #0
 8009958:	2010      	movcc	r0, #16
 800995a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800995e:	bf3c      	itt	cc
 8009960:	021b      	lslcc	r3, r3, #8
 8009962:	3008      	addcc	r0, #8
 8009964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009968:	bf3c      	itt	cc
 800996a:	011b      	lslcc	r3, r3, #4
 800996c:	3004      	addcc	r0, #4
 800996e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009972:	bf3c      	itt	cc
 8009974:	009b      	lslcc	r3, r3, #2
 8009976:	3002      	addcc	r0, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	db05      	blt.n	8009988 <__hi0bits+0x3c>
 800997c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009980:	f100 0001 	add.w	r0, r0, #1
 8009984:	bf08      	it	eq
 8009986:	2020      	moveq	r0, #32
 8009988:	4770      	bx	lr

0800998a <__lo0bits>:
 800998a:	6803      	ldr	r3, [r0, #0]
 800998c:	4602      	mov	r2, r0
 800998e:	f013 0007 	ands.w	r0, r3, #7
 8009992:	d00b      	beq.n	80099ac <__lo0bits+0x22>
 8009994:	07d9      	lsls	r1, r3, #31
 8009996:	d421      	bmi.n	80099dc <__lo0bits+0x52>
 8009998:	0798      	lsls	r0, r3, #30
 800999a:	bf49      	itett	mi
 800999c:	085b      	lsrmi	r3, r3, #1
 800999e:	089b      	lsrpl	r3, r3, #2
 80099a0:	2001      	movmi	r0, #1
 80099a2:	6013      	strmi	r3, [r2, #0]
 80099a4:	bf5c      	itt	pl
 80099a6:	6013      	strpl	r3, [r2, #0]
 80099a8:	2002      	movpl	r0, #2
 80099aa:	4770      	bx	lr
 80099ac:	b299      	uxth	r1, r3
 80099ae:	b909      	cbnz	r1, 80099b4 <__lo0bits+0x2a>
 80099b0:	0c1b      	lsrs	r3, r3, #16
 80099b2:	2010      	movs	r0, #16
 80099b4:	b2d9      	uxtb	r1, r3
 80099b6:	b909      	cbnz	r1, 80099bc <__lo0bits+0x32>
 80099b8:	3008      	adds	r0, #8
 80099ba:	0a1b      	lsrs	r3, r3, #8
 80099bc:	0719      	lsls	r1, r3, #28
 80099be:	bf04      	itt	eq
 80099c0:	091b      	lsreq	r3, r3, #4
 80099c2:	3004      	addeq	r0, #4
 80099c4:	0799      	lsls	r1, r3, #30
 80099c6:	bf04      	itt	eq
 80099c8:	089b      	lsreq	r3, r3, #2
 80099ca:	3002      	addeq	r0, #2
 80099cc:	07d9      	lsls	r1, r3, #31
 80099ce:	d403      	bmi.n	80099d8 <__lo0bits+0x4e>
 80099d0:	085b      	lsrs	r3, r3, #1
 80099d2:	f100 0001 	add.w	r0, r0, #1
 80099d6:	d003      	beq.n	80099e0 <__lo0bits+0x56>
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	4770      	bx	lr
 80099dc:	2000      	movs	r0, #0
 80099de:	4770      	bx	lr
 80099e0:	2020      	movs	r0, #32
 80099e2:	4770      	bx	lr

080099e4 <__i2b>:
 80099e4:	b510      	push	{r4, lr}
 80099e6:	460c      	mov	r4, r1
 80099e8:	2101      	movs	r1, #1
 80099ea:	f7ff febd 	bl	8009768 <_Balloc>
 80099ee:	4602      	mov	r2, r0
 80099f0:	b928      	cbnz	r0, 80099fe <__i2b+0x1a>
 80099f2:	4b05      	ldr	r3, [pc, #20]	@ (8009a08 <__i2b+0x24>)
 80099f4:	4805      	ldr	r0, [pc, #20]	@ (8009a0c <__i2b+0x28>)
 80099f6:	f240 1145 	movw	r1, #325	@ 0x145
 80099fa:	f001 fdf1 	bl	800b5e0 <__assert_func>
 80099fe:	2301      	movs	r3, #1
 8009a00:	6144      	str	r4, [r0, #20]
 8009a02:	6103      	str	r3, [r0, #16]
 8009a04:	bd10      	pop	{r4, pc}
 8009a06:	bf00      	nop
 8009a08:	0800bfe9 	.word	0x0800bfe9
 8009a0c:	0800bffa 	.word	0x0800bffa

08009a10 <__multiply>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	4617      	mov	r7, r2
 8009a16:	690a      	ldr	r2, [r1, #16]
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	bfa8      	it	ge
 8009a1e:	463b      	movge	r3, r7
 8009a20:	4689      	mov	r9, r1
 8009a22:	bfa4      	itt	ge
 8009a24:	460f      	movge	r7, r1
 8009a26:	4699      	movge	r9, r3
 8009a28:	693d      	ldr	r5, [r7, #16]
 8009a2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	eb05 060a 	add.w	r6, r5, sl
 8009a36:	42b3      	cmp	r3, r6
 8009a38:	b085      	sub	sp, #20
 8009a3a:	bfb8      	it	lt
 8009a3c:	3101      	addlt	r1, #1
 8009a3e:	f7ff fe93 	bl	8009768 <_Balloc>
 8009a42:	b930      	cbnz	r0, 8009a52 <__multiply+0x42>
 8009a44:	4602      	mov	r2, r0
 8009a46:	4b41      	ldr	r3, [pc, #260]	@ (8009b4c <__multiply+0x13c>)
 8009a48:	4841      	ldr	r0, [pc, #260]	@ (8009b50 <__multiply+0x140>)
 8009a4a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a4e:	f001 fdc7 	bl	800b5e0 <__assert_func>
 8009a52:	f100 0414 	add.w	r4, r0, #20
 8009a56:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009a5a:	4623      	mov	r3, r4
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4573      	cmp	r3, lr
 8009a60:	d320      	bcc.n	8009aa4 <__multiply+0x94>
 8009a62:	f107 0814 	add.w	r8, r7, #20
 8009a66:	f109 0114 	add.w	r1, r9, #20
 8009a6a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009a6e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009a72:	9302      	str	r3, [sp, #8]
 8009a74:	1beb      	subs	r3, r5, r7
 8009a76:	3b15      	subs	r3, #21
 8009a78:	f023 0303 	bic.w	r3, r3, #3
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	3715      	adds	r7, #21
 8009a80:	42bd      	cmp	r5, r7
 8009a82:	bf38      	it	cc
 8009a84:	2304      	movcc	r3, #4
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	9b02      	ldr	r3, [sp, #8]
 8009a8a:	9103      	str	r1, [sp, #12]
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	d80c      	bhi.n	8009aaa <__multiply+0x9a>
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	dd03      	ble.n	8009a9c <__multiply+0x8c>
 8009a94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d055      	beq.n	8009b48 <__multiply+0x138>
 8009a9c:	6106      	str	r6, [r0, #16]
 8009a9e:	b005      	add	sp, #20
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	f843 2b04 	str.w	r2, [r3], #4
 8009aa8:	e7d9      	b.n	8009a5e <__multiply+0x4e>
 8009aaa:	f8b1 a000 	ldrh.w	sl, [r1]
 8009aae:	f1ba 0f00 	cmp.w	sl, #0
 8009ab2:	d01f      	beq.n	8009af4 <__multiply+0xe4>
 8009ab4:	46c4      	mov	ip, r8
 8009ab6:	46a1      	mov	r9, r4
 8009ab8:	2700      	movs	r7, #0
 8009aba:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009abe:	f8d9 3000 	ldr.w	r3, [r9]
 8009ac2:	fa1f fb82 	uxth.w	fp, r2
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009acc:	443b      	add	r3, r7
 8009ace:	f8d9 7000 	ldr.w	r7, [r9]
 8009ad2:	0c12      	lsrs	r2, r2, #16
 8009ad4:	0c3f      	lsrs	r7, r7, #16
 8009ad6:	fb0a 7202 	mla	r2, sl, r2, r7
 8009ada:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae4:	4565      	cmp	r5, ip
 8009ae6:	f849 3b04 	str.w	r3, [r9], #4
 8009aea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009aee:	d8e4      	bhi.n	8009aba <__multiply+0xaa>
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	50e7      	str	r7, [r4, r3]
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009afa:	3104      	adds	r1, #4
 8009afc:	f1b9 0f00 	cmp.w	r9, #0
 8009b00:	d020      	beq.n	8009b44 <__multiply+0x134>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	4647      	mov	r7, r8
 8009b06:	46a4      	mov	ip, r4
 8009b08:	f04f 0a00 	mov.w	sl, #0
 8009b0c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009b10:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009b14:	fb09 220b 	mla	r2, r9, fp, r2
 8009b18:	4452      	add	r2, sl
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b20:	f84c 3b04 	str.w	r3, [ip], #4
 8009b24:	f857 3b04 	ldr.w	r3, [r7], #4
 8009b28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b2c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009b30:	fb09 330a 	mla	r3, r9, sl, r3
 8009b34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009b38:	42bd      	cmp	r5, r7
 8009b3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b3e:	d8e5      	bhi.n	8009b0c <__multiply+0xfc>
 8009b40:	9a01      	ldr	r2, [sp, #4]
 8009b42:	50a3      	str	r3, [r4, r2]
 8009b44:	3404      	adds	r4, #4
 8009b46:	e79f      	b.n	8009a88 <__multiply+0x78>
 8009b48:	3e01      	subs	r6, #1
 8009b4a:	e7a1      	b.n	8009a90 <__multiply+0x80>
 8009b4c:	0800bfe9 	.word	0x0800bfe9
 8009b50:	0800bffa 	.word	0x0800bffa

08009b54 <__pow5mult>:
 8009b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b58:	4615      	mov	r5, r2
 8009b5a:	f012 0203 	ands.w	r2, r2, #3
 8009b5e:	4607      	mov	r7, r0
 8009b60:	460e      	mov	r6, r1
 8009b62:	d007      	beq.n	8009b74 <__pow5mult+0x20>
 8009b64:	4c25      	ldr	r4, [pc, #148]	@ (8009bfc <__pow5mult+0xa8>)
 8009b66:	3a01      	subs	r2, #1
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b6e:	f7ff fe5d 	bl	800982c <__multadd>
 8009b72:	4606      	mov	r6, r0
 8009b74:	10ad      	asrs	r5, r5, #2
 8009b76:	d03d      	beq.n	8009bf4 <__pow5mult+0xa0>
 8009b78:	69fc      	ldr	r4, [r7, #28]
 8009b7a:	b97c      	cbnz	r4, 8009b9c <__pow5mult+0x48>
 8009b7c:	2010      	movs	r0, #16
 8009b7e:	f7ff fd3d 	bl	80095fc <malloc>
 8009b82:	4602      	mov	r2, r0
 8009b84:	61f8      	str	r0, [r7, #28]
 8009b86:	b928      	cbnz	r0, 8009b94 <__pow5mult+0x40>
 8009b88:	4b1d      	ldr	r3, [pc, #116]	@ (8009c00 <__pow5mult+0xac>)
 8009b8a:	481e      	ldr	r0, [pc, #120]	@ (8009c04 <__pow5mult+0xb0>)
 8009b8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b90:	f001 fd26 	bl	800b5e0 <__assert_func>
 8009b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b98:	6004      	str	r4, [r0, #0]
 8009b9a:	60c4      	str	r4, [r0, #12]
 8009b9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ba4:	b94c      	cbnz	r4, 8009bba <__pow5mult+0x66>
 8009ba6:	f240 2171 	movw	r1, #625	@ 0x271
 8009baa:	4638      	mov	r0, r7
 8009bac:	f7ff ff1a 	bl	80099e4 <__i2b>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	6003      	str	r3, [r0, #0]
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	07eb      	lsls	r3, r5, #31
 8009bc0:	d50a      	bpl.n	8009bd8 <__pow5mult+0x84>
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f7ff ff22 	bl	8009a10 <__multiply>
 8009bcc:	4631      	mov	r1, r6
 8009bce:	4680      	mov	r8, r0
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f7ff fe09 	bl	80097e8 <_Bfree>
 8009bd6:	4646      	mov	r6, r8
 8009bd8:	106d      	asrs	r5, r5, #1
 8009bda:	d00b      	beq.n	8009bf4 <__pow5mult+0xa0>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	b938      	cbnz	r0, 8009bf0 <__pow5mult+0x9c>
 8009be0:	4622      	mov	r2, r4
 8009be2:	4621      	mov	r1, r4
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7ff ff13 	bl	8009a10 <__multiply>
 8009bea:	6020      	str	r0, [r4, #0]
 8009bec:	f8c0 9000 	str.w	r9, [r0]
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	e7e4      	b.n	8009bbe <__pow5mult+0x6a>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0800c10c 	.word	0x0800c10c
 8009c00:	0800bf7a 	.word	0x0800bf7a
 8009c04:	0800bffa 	.word	0x0800bffa

08009c08 <__lshift>:
 8009c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	6849      	ldr	r1, [r1, #4]
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	4607      	mov	r7, r0
 8009c1a:	4691      	mov	r9, r2
 8009c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c20:	f108 0601 	add.w	r6, r8, #1
 8009c24:	42b3      	cmp	r3, r6
 8009c26:	db0b      	blt.n	8009c40 <__lshift+0x38>
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff fd9d 	bl	8009768 <_Balloc>
 8009c2e:	4605      	mov	r5, r0
 8009c30:	b948      	cbnz	r0, 8009c46 <__lshift+0x3e>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4b28      	ldr	r3, [pc, #160]	@ (8009cd8 <__lshift+0xd0>)
 8009c36:	4829      	ldr	r0, [pc, #164]	@ (8009cdc <__lshift+0xd4>)
 8009c38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c3c:	f001 fcd0 	bl	800b5e0 <__assert_func>
 8009c40:	3101      	adds	r1, #1
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	e7ee      	b.n	8009c24 <__lshift+0x1c>
 8009c46:	2300      	movs	r3, #0
 8009c48:	f100 0114 	add.w	r1, r0, #20
 8009c4c:	f100 0210 	add.w	r2, r0, #16
 8009c50:	4618      	mov	r0, r3
 8009c52:	4553      	cmp	r3, sl
 8009c54:	db33      	blt.n	8009cbe <__lshift+0xb6>
 8009c56:	6920      	ldr	r0, [r4, #16]
 8009c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c5c:	f104 0314 	add.w	r3, r4, #20
 8009c60:	f019 091f 	ands.w	r9, r9, #31
 8009c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c6c:	d02b      	beq.n	8009cc6 <__lshift+0xbe>
 8009c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c72:	468a      	mov	sl, r1
 8009c74:	2200      	movs	r2, #0
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	fa00 f009 	lsl.w	r0, r0, r9
 8009c7c:	4310      	orrs	r0, r2
 8009c7e:	f84a 0b04 	str.w	r0, [sl], #4
 8009c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c86:	459c      	cmp	ip, r3
 8009c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c8c:	d8f3      	bhi.n	8009c76 <__lshift+0x6e>
 8009c8e:	ebac 0304 	sub.w	r3, ip, r4
 8009c92:	3b15      	subs	r3, #21
 8009c94:	f023 0303 	bic.w	r3, r3, #3
 8009c98:	3304      	adds	r3, #4
 8009c9a:	f104 0015 	add.w	r0, r4, #21
 8009c9e:	4560      	cmp	r0, ip
 8009ca0:	bf88      	it	hi
 8009ca2:	2304      	movhi	r3, #4
 8009ca4:	50ca      	str	r2, [r1, r3]
 8009ca6:	b10a      	cbz	r2, 8009cac <__lshift+0xa4>
 8009ca8:	f108 0602 	add.w	r6, r8, #2
 8009cac:	3e01      	subs	r6, #1
 8009cae:	4638      	mov	r0, r7
 8009cb0:	612e      	str	r6, [r5, #16]
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	f7ff fd98 	bl	80097e8 <_Bfree>
 8009cb8:	4628      	mov	r0, r5
 8009cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	e7c5      	b.n	8009c52 <__lshift+0x4a>
 8009cc6:	3904      	subs	r1, #4
 8009cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ccc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cd0:	459c      	cmp	ip, r3
 8009cd2:	d8f9      	bhi.n	8009cc8 <__lshift+0xc0>
 8009cd4:	e7ea      	b.n	8009cac <__lshift+0xa4>
 8009cd6:	bf00      	nop
 8009cd8:	0800bfe9 	.word	0x0800bfe9
 8009cdc:	0800bffa 	.word	0x0800bffa

08009ce0 <__mcmp>:
 8009ce0:	690a      	ldr	r2, [r1, #16]
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	6900      	ldr	r0, [r0, #16]
 8009ce6:	1a80      	subs	r0, r0, r2
 8009ce8:	b530      	push	{r4, r5, lr}
 8009cea:	d10e      	bne.n	8009d0a <__mcmp+0x2a>
 8009cec:	3314      	adds	r3, #20
 8009cee:	3114      	adds	r1, #20
 8009cf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009cf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d00:	4295      	cmp	r5, r2
 8009d02:	d003      	beq.n	8009d0c <__mcmp+0x2c>
 8009d04:	d205      	bcs.n	8009d12 <__mcmp+0x32>
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d0a:	bd30      	pop	{r4, r5, pc}
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	d3f3      	bcc.n	8009cf8 <__mcmp+0x18>
 8009d10:	e7fb      	b.n	8009d0a <__mcmp+0x2a>
 8009d12:	2001      	movs	r0, #1
 8009d14:	e7f9      	b.n	8009d0a <__mcmp+0x2a>
	...

08009d18 <__mdiff>:
 8009d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1c:	4689      	mov	r9, r1
 8009d1e:	4606      	mov	r6, r0
 8009d20:	4611      	mov	r1, r2
 8009d22:	4648      	mov	r0, r9
 8009d24:	4614      	mov	r4, r2
 8009d26:	f7ff ffdb 	bl	8009ce0 <__mcmp>
 8009d2a:	1e05      	subs	r5, r0, #0
 8009d2c:	d112      	bne.n	8009d54 <__mdiff+0x3c>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff fd19 	bl	8009768 <_Balloc>
 8009d36:	4602      	mov	r2, r0
 8009d38:	b928      	cbnz	r0, 8009d46 <__mdiff+0x2e>
 8009d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8009e38 <__mdiff+0x120>)
 8009d3c:	f240 2137 	movw	r1, #567	@ 0x237
 8009d40:	483e      	ldr	r0, [pc, #248]	@ (8009e3c <__mdiff+0x124>)
 8009d42:	f001 fc4d 	bl	800b5e0 <__assert_func>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	b003      	add	sp, #12
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	bfbc      	itt	lt
 8009d56:	464b      	movlt	r3, r9
 8009d58:	46a1      	movlt	r9, r4
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d60:	bfba      	itte	lt
 8009d62:	461c      	movlt	r4, r3
 8009d64:	2501      	movlt	r5, #1
 8009d66:	2500      	movge	r5, #0
 8009d68:	f7ff fcfe 	bl	8009768 <_Balloc>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	b918      	cbnz	r0, 8009d78 <__mdiff+0x60>
 8009d70:	4b31      	ldr	r3, [pc, #196]	@ (8009e38 <__mdiff+0x120>)
 8009d72:	f240 2145 	movw	r1, #581	@ 0x245
 8009d76:	e7e3      	b.n	8009d40 <__mdiff+0x28>
 8009d78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d7c:	6926      	ldr	r6, [r4, #16]
 8009d7e:	60c5      	str	r5, [r0, #12]
 8009d80:	f109 0310 	add.w	r3, r9, #16
 8009d84:	f109 0514 	add.w	r5, r9, #20
 8009d88:	f104 0e14 	add.w	lr, r4, #20
 8009d8c:	f100 0b14 	add.w	fp, r0, #20
 8009d90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	46d9      	mov	r9, fp
 8009d9c:	f04f 0c00 	mov.w	ip, #0
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009da6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009daa:	9301      	str	r3, [sp, #4]
 8009dac:	fa1f f38a 	uxth.w	r3, sl
 8009db0:	4619      	mov	r1, r3
 8009db2:	b283      	uxth	r3, r0
 8009db4:	1acb      	subs	r3, r1, r3
 8009db6:	0c00      	lsrs	r0, r0, #16
 8009db8:	4463      	add	r3, ip
 8009dba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009dbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009dc8:	4576      	cmp	r6, lr
 8009dca:	f849 3b04 	str.w	r3, [r9], #4
 8009dce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dd2:	d8e5      	bhi.n	8009da0 <__mdiff+0x88>
 8009dd4:	1b33      	subs	r3, r6, r4
 8009dd6:	3b15      	subs	r3, #21
 8009dd8:	f023 0303 	bic.w	r3, r3, #3
 8009ddc:	3415      	adds	r4, #21
 8009dde:	3304      	adds	r3, #4
 8009de0:	42a6      	cmp	r6, r4
 8009de2:	bf38      	it	cc
 8009de4:	2304      	movcc	r3, #4
 8009de6:	441d      	add	r5, r3
 8009de8:	445b      	add	r3, fp
 8009dea:	461e      	mov	r6, r3
 8009dec:	462c      	mov	r4, r5
 8009dee:	4544      	cmp	r4, r8
 8009df0:	d30e      	bcc.n	8009e10 <__mdiff+0xf8>
 8009df2:	f108 0103 	add.w	r1, r8, #3
 8009df6:	1b49      	subs	r1, r1, r5
 8009df8:	f021 0103 	bic.w	r1, r1, #3
 8009dfc:	3d03      	subs	r5, #3
 8009dfe:	45a8      	cmp	r8, r5
 8009e00:	bf38      	it	cc
 8009e02:	2100      	movcc	r1, #0
 8009e04:	440b      	add	r3, r1
 8009e06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e0a:	b191      	cbz	r1, 8009e32 <__mdiff+0x11a>
 8009e0c:	6117      	str	r7, [r2, #16]
 8009e0e:	e79d      	b.n	8009d4c <__mdiff+0x34>
 8009e10:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e14:	46e6      	mov	lr, ip
 8009e16:	0c08      	lsrs	r0, r1, #16
 8009e18:	fa1c fc81 	uxtah	ip, ip, r1
 8009e1c:	4471      	add	r1, lr
 8009e1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e22:	b289      	uxth	r1, r1
 8009e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e28:	f846 1b04 	str.w	r1, [r6], #4
 8009e2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e30:	e7dd      	b.n	8009dee <__mdiff+0xd6>
 8009e32:	3f01      	subs	r7, #1
 8009e34:	e7e7      	b.n	8009e06 <__mdiff+0xee>
 8009e36:	bf00      	nop
 8009e38:	0800bfe9 	.word	0x0800bfe9
 8009e3c:	0800bffa 	.word	0x0800bffa

08009e40 <__ulp>:
 8009e40:	b082      	sub	sp, #8
 8009e42:	ed8d 0b00 	vstr	d0, [sp]
 8009e46:	9a01      	ldr	r2, [sp, #4]
 8009e48:	4b0f      	ldr	r3, [pc, #60]	@ (8009e88 <__ulp+0x48>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dc08      	bgt.n	8009e66 <__ulp+0x26>
 8009e54:	425b      	negs	r3, r3
 8009e56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009e5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e5e:	da04      	bge.n	8009e6a <__ulp+0x2a>
 8009e60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009e64:	4113      	asrs	r3, r2
 8009e66:	2200      	movs	r2, #0
 8009e68:	e008      	b.n	8009e7c <__ulp+0x3c>
 8009e6a:	f1a2 0314 	sub.w	r3, r2, #20
 8009e6e:	2b1e      	cmp	r3, #30
 8009e70:	bfda      	itte	le
 8009e72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e76:	40da      	lsrle	r2, r3
 8009e78:	2201      	movgt	r2, #1
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	ec41 0b10 	vmov	d0, r0, r1
 8009e84:	b002      	add	sp, #8
 8009e86:	4770      	bx	lr
 8009e88:	7ff00000 	.word	0x7ff00000

08009e8c <__b2d>:
 8009e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e90:	6906      	ldr	r6, [r0, #16]
 8009e92:	f100 0814 	add.w	r8, r0, #20
 8009e96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e9a:	1f37      	subs	r7, r6, #4
 8009e9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	f7ff fd53 	bl	800994c <__hi0bits>
 8009ea6:	f1c0 0320 	rsb	r3, r0, #32
 8009eaa:	280a      	cmp	r0, #10
 8009eac:	600b      	str	r3, [r1, #0]
 8009eae:	491b      	ldr	r1, [pc, #108]	@ (8009f1c <__b2d+0x90>)
 8009eb0:	dc15      	bgt.n	8009ede <__b2d+0x52>
 8009eb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8009eb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8009eba:	45b8      	cmp	r8, r7
 8009ebc:	ea43 0501 	orr.w	r5, r3, r1
 8009ec0:	bf34      	ite	cc
 8009ec2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ec6:	2300      	movcs	r3, #0
 8009ec8:	3015      	adds	r0, #21
 8009eca:	fa02 f000 	lsl.w	r0, r2, r0
 8009ece:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ed2:	4303      	orrs	r3, r0
 8009ed4:	461c      	mov	r4, r3
 8009ed6:	ec45 4b10 	vmov	d0, r4, r5
 8009eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ede:	45b8      	cmp	r8, r7
 8009ee0:	bf3a      	itte	cc
 8009ee2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ee6:	f1a6 0708 	subcc.w	r7, r6, #8
 8009eea:	2300      	movcs	r3, #0
 8009eec:	380b      	subs	r0, #11
 8009eee:	d012      	beq.n	8009f16 <__b2d+0x8a>
 8009ef0:	f1c0 0120 	rsb	r1, r0, #32
 8009ef4:	fa23 f401 	lsr.w	r4, r3, r1
 8009ef8:	4082      	lsls	r2, r0
 8009efa:	4322      	orrs	r2, r4
 8009efc:	4547      	cmp	r7, r8
 8009efe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f02:	bf8c      	ite	hi
 8009f04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f08:	2200      	movls	r2, #0
 8009f0a:	4083      	lsls	r3, r0
 8009f0c:	40ca      	lsrs	r2, r1
 8009f0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f12:	4313      	orrs	r3, r2
 8009f14:	e7de      	b.n	8009ed4 <__b2d+0x48>
 8009f16:	ea42 0501 	orr.w	r5, r2, r1
 8009f1a:	e7db      	b.n	8009ed4 <__b2d+0x48>
 8009f1c:	3ff00000 	.word	0x3ff00000

08009f20 <__d2b>:
 8009f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f24:	460f      	mov	r7, r1
 8009f26:	2101      	movs	r1, #1
 8009f28:	ec59 8b10 	vmov	r8, r9, d0
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	f7ff fc1b 	bl	8009768 <_Balloc>
 8009f32:	4604      	mov	r4, r0
 8009f34:	b930      	cbnz	r0, 8009f44 <__d2b+0x24>
 8009f36:	4602      	mov	r2, r0
 8009f38:	4b23      	ldr	r3, [pc, #140]	@ (8009fc8 <__d2b+0xa8>)
 8009f3a:	4824      	ldr	r0, [pc, #144]	@ (8009fcc <__d2b+0xac>)
 8009f3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f40:	f001 fb4e 	bl	800b5e0 <__assert_func>
 8009f44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f4c:	b10d      	cbz	r5, 8009f52 <__d2b+0x32>
 8009f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f52:	9301      	str	r3, [sp, #4]
 8009f54:	f1b8 0300 	subs.w	r3, r8, #0
 8009f58:	d023      	beq.n	8009fa2 <__d2b+0x82>
 8009f5a:	4668      	mov	r0, sp
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	f7ff fd14 	bl	800998a <__lo0bits>
 8009f62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f66:	b1d0      	cbz	r0, 8009f9e <__d2b+0x7e>
 8009f68:	f1c0 0320 	rsb	r3, r0, #32
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	430b      	orrs	r3, r1
 8009f72:	40c2      	lsrs	r2, r0
 8009f74:	6163      	str	r3, [r4, #20]
 8009f76:	9201      	str	r2, [sp, #4]
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	61a3      	str	r3, [r4, #24]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bf0c      	ite	eq
 8009f80:	2201      	moveq	r2, #1
 8009f82:	2202      	movne	r2, #2
 8009f84:	6122      	str	r2, [r4, #16]
 8009f86:	b1a5      	cbz	r5, 8009fb2 <__d2b+0x92>
 8009f88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f8c:	4405      	add	r5, r0
 8009f8e:	603d      	str	r5, [r7, #0]
 8009f90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f94:	6030      	str	r0, [r6, #0]
 8009f96:	4620      	mov	r0, r4
 8009f98:	b003      	add	sp, #12
 8009f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f9e:	6161      	str	r1, [r4, #20]
 8009fa0:	e7ea      	b.n	8009f78 <__d2b+0x58>
 8009fa2:	a801      	add	r0, sp, #4
 8009fa4:	f7ff fcf1 	bl	800998a <__lo0bits>
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	6163      	str	r3, [r4, #20]
 8009fac:	3020      	adds	r0, #32
 8009fae:	2201      	movs	r2, #1
 8009fb0:	e7e8      	b.n	8009f84 <__d2b+0x64>
 8009fb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fba:	6038      	str	r0, [r7, #0]
 8009fbc:	6918      	ldr	r0, [r3, #16]
 8009fbe:	f7ff fcc5 	bl	800994c <__hi0bits>
 8009fc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fc6:	e7e5      	b.n	8009f94 <__d2b+0x74>
 8009fc8:	0800bfe9 	.word	0x0800bfe9
 8009fcc:	0800bffa 	.word	0x0800bffa

08009fd0 <__ratio>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	e9cd 1000 	strd	r1, r0, [sp]
 8009fda:	a902      	add	r1, sp, #8
 8009fdc:	f7ff ff56 	bl	8009e8c <__b2d>
 8009fe0:	9800      	ldr	r0, [sp, #0]
 8009fe2:	a903      	add	r1, sp, #12
 8009fe4:	ec55 4b10 	vmov	r4, r5, d0
 8009fe8:	f7ff ff50 	bl	8009e8c <__b2d>
 8009fec:	9b01      	ldr	r3, [sp, #4]
 8009fee:	6919      	ldr	r1, [r3, #16]
 8009ff0:	9b00      	ldr	r3, [sp, #0]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	1ac9      	subs	r1, r1, r3
 8009ff6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009ffa:	1a9b      	subs	r3, r3, r2
 8009ffc:	ec5b ab10 	vmov	sl, fp, d0
 800a000:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a004:	2b00      	cmp	r3, #0
 800a006:	bfce      	itee	gt
 800a008:	462a      	movgt	r2, r5
 800a00a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a00e:	465a      	movle	r2, fp
 800a010:	462f      	mov	r7, r5
 800a012:	46d9      	mov	r9, fp
 800a014:	bfcc      	ite	gt
 800a016:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a01a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a01e:	464b      	mov	r3, r9
 800a020:	4652      	mov	r2, sl
 800a022:	4620      	mov	r0, r4
 800a024:	4639      	mov	r1, r7
 800a026:	f7f6 fc39 	bl	800089c <__aeabi_ddiv>
 800a02a:	ec41 0b10 	vmov	d0, r0, r1
 800a02e:	b005      	add	sp, #20
 800a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a034 <__copybits>:
 800a034:	3901      	subs	r1, #1
 800a036:	b570      	push	{r4, r5, r6, lr}
 800a038:	1149      	asrs	r1, r1, #5
 800a03a:	6914      	ldr	r4, [r2, #16]
 800a03c:	3101      	adds	r1, #1
 800a03e:	f102 0314 	add.w	r3, r2, #20
 800a042:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a046:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a04a:	1f05      	subs	r5, r0, #4
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d30c      	bcc.n	800a06a <__copybits+0x36>
 800a050:	1aa3      	subs	r3, r4, r2
 800a052:	3b11      	subs	r3, #17
 800a054:	f023 0303 	bic.w	r3, r3, #3
 800a058:	3211      	adds	r2, #17
 800a05a:	42a2      	cmp	r2, r4
 800a05c:	bf88      	it	hi
 800a05e:	2300      	movhi	r3, #0
 800a060:	4418      	add	r0, r3
 800a062:	2300      	movs	r3, #0
 800a064:	4288      	cmp	r0, r1
 800a066:	d305      	bcc.n	800a074 <__copybits+0x40>
 800a068:	bd70      	pop	{r4, r5, r6, pc}
 800a06a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a06e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a072:	e7eb      	b.n	800a04c <__copybits+0x18>
 800a074:	f840 3b04 	str.w	r3, [r0], #4
 800a078:	e7f4      	b.n	800a064 <__copybits+0x30>

0800a07a <__any_on>:
 800a07a:	f100 0214 	add.w	r2, r0, #20
 800a07e:	6900      	ldr	r0, [r0, #16]
 800a080:	114b      	asrs	r3, r1, #5
 800a082:	4298      	cmp	r0, r3
 800a084:	b510      	push	{r4, lr}
 800a086:	db11      	blt.n	800a0ac <__any_on+0x32>
 800a088:	dd0a      	ble.n	800a0a0 <__any_on+0x26>
 800a08a:	f011 011f 	ands.w	r1, r1, #31
 800a08e:	d007      	beq.n	800a0a0 <__any_on+0x26>
 800a090:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a094:	fa24 f001 	lsr.w	r0, r4, r1
 800a098:	fa00 f101 	lsl.w	r1, r0, r1
 800a09c:	428c      	cmp	r4, r1
 800a09e:	d10b      	bne.n	800a0b8 <__any_on+0x3e>
 800a0a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d803      	bhi.n	800a0b0 <__any_on+0x36>
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	bd10      	pop	{r4, pc}
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	e7f7      	b.n	800a0a0 <__any_on+0x26>
 800a0b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d0f5      	beq.n	800a0a4 <__any_on+0x2a>
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	e7f6      	b.n	800a0aa <__any_on+0x30>

0800a0bc <sulp>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4604      	mov	r4, r0
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	ec45 4b10 	vmov	d0, r4, r5
 800a0c6:	4616      	mov	r6, r2
 800a0c8:	f7ff feba 	bl	8009e40 <__ulp>
 800a0cc:	ec51 0b10 	vmov	r0, r1, d0
 800a0d0:	b17e      	cbz	r6, 800a0f2 <sulp+0x36>
 800a0d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a0d6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	dd09      	ble.n	800a0f2 <sulp+0x36>
 800a0de:	051b      	lsls	r3, r3, #20
 800a0e0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a0e4:	2400      	movs	r4, #0
 800a0e6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	f7f6 faab 	bl	8000648 <__aeabi_dmul>
 800a0f2:	ec41 0b10 	vmov	d0, r0, r1
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}

0800a0f8 <_strtod_l>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	b09f      	sub	sp, #124	@ 0x7c
 800a0fe:	460c      	mov	r4, r1
 800a100:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a102:	2200      	movs	r2, #0
 800a104:	921a      	str	r2, [sp, #104]	@ 0x68
 800a106:	9005      	str	r0, [sp, #20]
 800a108:	f04f 0a00 	mov.w	sl, #0
 800a10c:	f04f 0b00 	mov.w	fp, #0
 800a110:	460a      	mov	r2, r1
 800a112:	9219      	str	r2, [sp, #100]	@ 0x64
 800a114:	7811      	ldrb	r1, [r2, #0]
 800a116:	292b      	cmp	r1, #43	@ 0x2b
 800a118:	d04a      	beq.n	800a1b0 <_strtod_l+0xb8>
 800a11a:	d838      	bhi.n	800a18e <_strtod_l+0x96>
 800a11c:	290d      	cmp	r1, #13
 800a11e:	d832      	bhi.n	800a186 <_strtod_l+0x8e>
 800a120:	2908      	cmp	r1, #8
 800a122:	d832      	bhi.n	800a18a <_strtod_l+0x92>
 800a124:	2900      	cmp	r1, #0
 800a126:	d03b      	beq.n	800a1a0 <_strtod_l+0xa8>
 800a128:	2200      	movs	r2, #0
 800a12a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a12c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a12e:	782a      	ldrb	r2, [r5, #0]
 800a130:	2a30      	cmp	r2, #48	@ 0x30
 800a132:	f040 80b2 	bne.w	800a29a <_strtod_l+0x1a2>
 800a136:	786a      	ldrb	r2, [r5, #1]
 800a138:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a13c:	2a58      	cmp	r2, #88	@ 0x58
 800a13e:	d16e      	bne.n	800a21e <_strtod_l+0x126>
 800a140:	9302      	str	r3, [sp, #8]
 800a142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	ab1a      	add	r3, sp, #104	@ 0x68
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	4a8f      	ldr	r2, [pc, #572]	@ (800a388 <_strtod_l+0x290>)
 800a14c:	9805      	ldr	r0, [sp, #20]
 800a14e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a150:	a919      	add	r1, sp, #100	@ 0x64
 800a152:	f001 fadf 	bl	800b714 <__gethex>
 800a156:	f010 060f 	ands.w	r6, r0, #15
 800a15a:	4604      	mov	r4, r0
 800a15c:	d005      	beq.n	800a16a <_strtod_l+0x72>
 800a15e:	2e06      	cmp	r6, #6
 800a160:	d128      	bne.n	800a1b4 <_strtod_l+0xbc>
 800a162:	3501      	adds	r5, #1
 800a164:	2300      	movs	r3, #0
 800a166:	9519      	str	r5, [sp, #100]	@ 0x64
 800a168:	930e      	str	r3, [sp, #56]	@ 0x38
 800a16a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f040 858e 	bne.w	800ac8e <_strtod_l+0xb96>
 800a172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a174:	b1cb      	cbz	r3, 800a1aa <_strtod_l+0xb2>
 800a176:	4652      	mov	r2, sl
 800a178:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a17c:	ec43 2b10 	vmov	d0, r2, r3
 800a180:	b01f      	add	sp, #124	@ 0x7c
 800a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a186:	2920      	cmp	r1, #32
 800a188:	d1ce      	bne.n	800a128 <_strtod_l+0x30>
 800a18a:	3201      	adds	r2, #1
 800a18c:	e7c1      	b.n	800a112 <_strtod_l+0x1a>
 800a18e:	292d      	cmp	r1, #45	@ 0x2d
 800a190:	d1ca      	bne.n	800a128 <_strtod_l+0x30>
 800a192:	2101      	movs	r1, #1
 800a194:	910e      	str	r1, [sp, #56]	@ 0x38
 800a196:	1c51      	adds	r1, r2, #1
 800a198:	9119      	str	r1, [sp, #100]	@ 0x64
 800a19a:	7852      	ldrb	r2, [r2, #1]
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d1c5      	bne.n	800a12c <_strtod_l+0x34>
 800a1a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1a2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f040 8570 	bne.w	800ac8a <_strtod_l+0xb92>
 800a1aa:	4652      	mov	r2, sl
 800a1ac:	465b      	mov	r3, fp
 800a1ae:	e7e5      	b.n	800a17c <_strtod_l+0x84>
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	e7ef      	b.n	800a194 <_strtod_l+0x9c>
 800a1b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a1b6:	b13a      	cbz	r2, 800a1c8 <_strtod_l+0xd0>
 800a1b8:	2135      	movs	r1, #53	@ 0x35
 800a1ba:	a81c      	add	r0, sp, #112	@ 0x70
 800a1bc:	f7ff ff3a 	bl	800a034 <__copybits>
 800a1c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1c2:	9805      	ldr	r0, [sp, #20]
 800a1c4:	f7ff fb10 	bl	80097e8 <_Bfree>
 800a1c8:	3e01      	subs	r6, #1
 800a1ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a1cc:	2e04      	cmp	r6, #4
 800a1ce:	d806      	bhi.n	800a1de <_strtod_l+0xe6>
 800a1d0:	e8df f006 	tbb	[pc, r6]
 800a1d4:	201d0314 	.word	0x201d0314
 800a1d8:	14          	.byte	0x14
 800a1d9:	00          	.byte	0x00
 800a1da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a1de:	05e1      	lsls	r1, r4, #23
 800a1e0:	bf48      	it	mi
 800a1e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a1e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1ea:	0d1b      	lsrs	r3, r3, #20
 800a1ec:	051b      	lsls	r3, r3, #20
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1bb      	bne.n	800a16a <_strtod_l+0x72>
 800a1f2:	f7fe fb1d 	bl	8008830 <__errno>
 800a1f6:	2322      	movs	r3, #34	@ 0x22
 800a1f8:	6003      	str	r3, [r0, #0]
 800a1fa:	e7b6      	b.n	800a16a <_strtod_l+0x72>
 800a1fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a200:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a204:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a208:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a20c:	e7e7      	b.n	800a1de <_strtod_l+0xe6>
 800a20e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a390 <_strtod_l+0x298>
 800a212:	e7e4      	b.n	800a1de <_strtod_l+0xe6>
 800a214:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a218:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a21c:	e7df      	b.n	800a1de <_strtod_l+0xe6>
 800a21e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	9219      	str	r2, [sp, #100]	@ 0x64
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b30      	cmp	r3, #48	@ 0x30
 800a228:	d0f9      	beq.n	800a21e <_strtod_l+0x126>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d09d      	beq.n	800a16a <_strtod_l+0x72>
 800a22e:	2301      	movs	r3, #1
 800a230:	2700      	movs	r7, #0
 800a232:	9308      	str	r3, [sp, #32]
 800a234:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a236:	930c      	str	r3, [sp, #48]	@ 0x30
 800a238:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a23a:	46b9      	mov	r9, r7
 800a23c:	220a      	movs	r2, #10
 800a23e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a240:	7805      	ldrb	r5, [r0, #0]
 800a242:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a246:	b2d9      	uxtb	r1, r3
 800a248:	2909      	cmp	r1, #9
 800a24a:	d928      	bls.n	800a29e <_strtod_l+0x1a6>
 800a24c:	494f      	ldr	r1, [pc, #316]	@ (800a38c <_strtod_l+0x294>)
 800a24e:	2201      	movs	r2, #1
 800a250:	f001 f97a 	bl	800b548 <strncmp>
 800a254:	2800      	cmp	r0, #0
 800a256:	d032      	beq.n	800a2be <_strtod_l+0x1c6>
 800a258:	2000      	movs	r0, #0
 800a25a:	462a      	mov	r2, r5
 800a25c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a25e:	464d      	mov	r5, r9
 800a260:	4603      	mov	r3, r0
 800a262:	2a65      	cmp	r2, #101	@ 0x65
 800a264:	d001      	beq.n	800a26a <_strtod_l+0x172>
 800a266:	2a45      	cmp	r2, #69	@ 0x45
 800a268:	d114      	bne.n	800a294 <_strtod_l+0x19c>
 800a26a:	b91d      	cbnz	r5, 800a274 <_strtod_l+0x17c>
 800a26c:	9a08      	ldr	r2, [sp, #32]
 800a26e:	4302      	orrs	r2, r0
 800a270:	d096      	beq.n	800a1a0 <_strtod_l+0xa8>
 800a272:	2500      	movs	r5, #0
 800a274:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a276:	1c62      	adds	r2, r4, #1
 800a278:	9219      	str	r2, [sp, #100]	@ 0x64
 800a27a:	7862      	ldrb	r2, [r4, #1]
 800a27c:	2a2b      	cmp	r2, #43	@ 0x2b
 800a27e:	d07a      	beq.n	800a376 <_strtod_l+0x27e>
 800a280:	2a2d      	cmp	r2, #45	@ 0x2d
 800a282:	d07e      	beq.n	800a382 <_strtod_l+0x28a>
 800a284:	f04f 0c00 	mov.w	ip, #0
 800a288:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a28c:	2909      	cmp	r1, #9
 800a28e:	f240 8085 	bls.w	800a39c <_strtod_l+0x2a4>
 800a292:	9419      	str	r4, [sp, #100]	@ 0x64
 800a294:	f04f 0800 	mov.w	r8, #0
 800a298:	e0a5      	b.n	800a3e6 <_strtod_l+0x2ee>
 800a29a:	2300      	movs	r3, #0
 800a29c:	e7c8      	b.n	800a230 <_strtod_l+0x138>
 800a29e:	f1b9 0f08 	cmp.w	r9, #8
 800a2a2:	bfd8      	it	le
 800a2a4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a2a6:	f100 0001 	add.w	r0, r0, #1
 800a2aa:	bfda      	itte	le
 800a2ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800a2b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a2b2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a2b6:	f109 0901 	add.w	r9, r9, #1
 800a2ba:	9019      	str	r0, [sp, #100]	@ 0x64
 800a2bc:	e7bf      	b.n	800a23e <_strtod_l+0x146>
 800a2be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2c4:	785a      	ldrb	r2, [r3, #1]
 800a2c6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ca:	d03b      	beq.n	800a344 <_strtod_l+0x24c>
 800a2cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2ce:	464d      	mov	r5, r9
 800a2d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a2d4:	2b09      	cmp	r3, #9
 800a2d6:	d912      	bls.n	800a2fe <_strtod_l+0x206>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e7c2      	b.n	800a262 <_strtod_l+0x16a>
 800a2dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2e2:	785a      	ldrb	r2, [r3, #1]
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	2a30      	cmp	r2, #48	@ 0x30
 800a2e8:	d0f8      	beq.n	800a2dc <_strtod_l+0x1e4>
 800a2ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	f200 84d2 	bhi.w	800ac98 <_strtod_l+0xba0>
 800a2f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2f6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	3a30      	subs	r2, #48	@ 0x30
 800a300:	f100 0301 	add.w	r3, r0, #1
 800a304:	d018      	beq.n	800a338 <_strtod_l+0x240>
 800a306:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a308:	4419      	add	r1, r3
 800a30a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a30c:	462e      	mov	r6, r5
 800a30e:	f04f 0e0a 	mov.w	lr, #10
 800a312:	1c71      	adds	r1, r6, #1
 800a314:	eba1 0c05 	sub.w	ip, r1, r5
 800a318:	4563      	cmp	r3, ip
 800a31a:	dc15      	bgt.n	800a348 <_strtod_l+0x250>
 800a31c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a320:	182b      	adds	r3, r5, r0
 800a322:	2b08      	cmp	r3, #8
 800a324:	f105 0501 	add.w	r5, r5, #1
 800a328:	4405      	add	r5, r0
 800a32a:	dc1a      	bgt.n	800a362 <_strtod_l+0x26a>
 800a32c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a32e:	230a      	movs	r3, #10
 800a330:	fb03 2301 	mla	r3, r3, r1, r2
 800a334:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a336:	2300      	movs	r3, #0
 800a338:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a33a:	1c51      	adds	r1, r2, #1
 800a33c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a33e:	7852      	ldrb	r2, [r2, #1]
 800a340:	4618      	mov	r0, r3
 800a342:	e7c5      	b.n	800a2d0 <_strtod_l+0x1d8>
 800a344:	4648      	mov	r0, r9
 800a346:	e7ce      	b.n	800a2e6 <_strtod_l+0x1ee>
 800a348:	2e08      	cmp	r6, #8
 800a34a:	dc05      	bgt.n	800a358 <_strtod_l+0x260>
 800a34c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a34e:	fb0e f606 	mul.w	r6, lr, r6
 800a352:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a354:	460e      	mov	r6, r1
 800a356:	e7dc      	b.n	800a312 <_strtod_l+0x21a>
 800a358:	2910      	cmp	r1, #16
 800a35a:	bfd8      	it	le
 800a35c:	fb0e f707 	mulle.w	r7, lr, r7
 800a360:	e7f8      	b.n	800a354 <_strtod_l+0x25c>
 800a362:	2b0f      	cmp	r3, #15
 800a364:	bfdc      	itt	le
 800a366:	230a      	movle	r3, #10
 800a368:	fb03 2707 	mlale	r7, r3, r7, r2
 800a36c:	e7e3      	b.n	800a336 <_strtod_l+0x23e>
 800a36e:	2300      	movs	r3, #0
 800a370:	930a      	str	r3, [sp, #40]	@ 0x28
 800a372:	2301      	movs	r3, #1
 800a374:	e77a      	b.n	800a26c <_strtod_l+0x174>
 800a376:	f04f 0c00 	mov.w	ip, #0
 800a37a:	1ca2      	adds	r2, r4, #2
 800a37c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a37e:	78a2      	ldrb	r2, [r4, #2]
 800a380:	e782      	b.n	800a288 <_strtod_l+0x190>
 800a382:	f04f 0c01 	mov.w	ip, #1
 800a386:	e7f8      	b.n	800a37a <_strtod_l+0x282>
 800a388:	0800c21c 	.word	0x0800c21c
 800a38c:	0800c053 	.word	0x0800c053
 800a390:	7ff00000 	.word	0x7ff00000
 800a394:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a396:	1c51      	adds	r1, r2, #1
 800a398:	9119      	str	r1, [sp, #100]	@ 0x64
 800a39a:	7852      	ldrb	r2, [r2, #1]
 800a39c:	2a30      	cmp	r2, #48	@ 0x30
 800a39e:	d0f9      	beq.n	800a394 <_strtod_l+0x29c>
 800a3a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a3a4:	2908      	cmp	r1, #8
 800a3a6:	f63f af75 	bhi.w	800a294 <_strtod_l+0x19c>
 800a3aa:	3a30      	subs	r2, #48	@ 0x30
 800a3ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a3b2:	f04f 080a 	mov.w	r8, #10
 800a3b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3b8:	1c56      	adds	r6, r2, #1
 800a3ba:	9619      	str	r6, [sp, #100]	@ 0x64
 800a3bc:	7852      	ldrb	r2, [r2, #1]
 800a3be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a3c2:	f1be 0f09 	cmp.w	lr, #9
 800a3c6:	d939      	bls.n	800a43c <_strtod_l+0x344>
 800a3c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a3ca:	1a76      	subs	r6, r6, r1
 800a3cc:	2e08      	cmp	r6, #8
 800a3ce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a3d2:	dc03      	bgt.n	800a3dc <_strtod_l+0x2e4>
 800a3d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3d6:	4588      	cmp	r8, r1
 800a3d8:	bfa8      	it	ge
 800a3da:	4688      	movge	r8, r1
 800a3dc:	f1bc 0f00 	cmp.w	ip, #0
 800a3e0:	d001      	beq.n	800a3e6 <_strtod_l+0x2ee>
 800a3e2:	f1c8 0800 	rsb	r8, r8, #0
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	d14e      	bne.n	800a488 <_strtod_l+0x390>
 800a3ea:	9908      	ldr	r1, [sp, #32]
 800a3ec:	4308      	orrs	r0, r1
 800a3ee:	f47f aebc 	bne.w	800a16a <_strtod_l+0x72>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f47f aed4 	bne.w	800a1a0 <_strtod_l+0xa8>
 800a3f8:	2a69      	cmp	r2, #105	@ 0x69
 800a3fa:	d028      	beq.n	800a44e <_strtod_l+0x356>
 800a3fc:	dc25      	bgt.n	800a44a <_strtod_l+0x352>
 800a3fe:	2a49      	cmp	r2, #73	@ 0x49
 800a400:	d025      	beq.n	800a44e <_strtod_l+0x356>
 800a402:	2a4e      	cmp	r2, #78	@ 0x4e
 800a404:	f47f aecc 	bne.w	800a1a0 <_strtod_l+0xa8>
 800a408:	499a      	ldr	r1, [pc, #616]	@ (800a674 <_strtod_l+0x57c>)
 800a40a:	a819      	add	r0, sp, #100	@ 0x64
 800a40c:	f001 fba4 	bl	800bb58 <__match>
 800a410:	2800      	cmp	r0, #0
 800a412:	f43f aec5 	beq.w	800a1a0 <_strtod_l+0xa8>
 800a416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b28      	cmp	r3, #40	@ 0x28
 800a41c:	d12e      	bne.n	800a47c <_strtod_l+0x384>
 800a41e:	4996      	ldr	r1, [pc, #600]	@ (800a678 <_strtod_l+0x580>)
 800a420:	aa1c      	add	r2, sp, #112	@ 0x70
 800a422:	a819      	add	r0, sp, #100	@ 0x64
 800a424:	f001 fbac 	bl	800bb80 <__hexnan>
 800a428:	2805      	cmp	r0, #5
 800a42a:	d127      	bne.n	800a47c <_strtod_l+0x384>
 800a42c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a42e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a432:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a436:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a43a:	e696      	b.n	800a16a <_strtod_l+0x72>
 800a43c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a43e:	fb08 2101 	mla	r1, r8, r1, r2
 800a442:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a446:	9209      	str	r2, [sp, #36]	@ 0x24
 800a448:	e7b5      	b.n	800a3b6 <_strtod_l+0x2be>
 800a44a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a44c:	e7da      	b.n	800a404 <_strtod_l+0x30c>
 800a44e:	498b      	ldr	r1, [pc, #556]	@ (800a67c <_strtod_l+0x584>)
 800a450:	a819      	add	r0, sp, #100	@ 0x64
 800a452:	f001 fb81 	bl	800bb58 <__match>
 800a456:	2800      	cmp	r0, #0
 800a458:	f43f aea2 	beq.w	800a1a0 <_strtod_l+0xa8>
 800a45c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a45e:	4988      	ldr	r1, [pc, #544]	@ (800a680 <_strtod_l+0x588>)
 800a460:	3b01      	subs	r3, #1
 800a462:	a819      	add	r0, sp, #100	@ 0x64
 800a464:	9319      	str	r3, [sp, #100]	@ 0x64
 800a466:	f001 fb77 	bl	800bb58 <__match>
 800a46a:	b910      	cbnz	r0, 800a472 <_strtod_l+0x37a>
 800a46c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a46e:	3301      	adds	r3, #1
 800a470:	9319      	str	r3, [sp, #100]	@ 0x64
 800a472:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a690 <_strtod_l+0x598>
 800a476:	f04f 0a00 	mov.w	sl, #0
 800a47a:	e676      	b.n	800a16a <_strtod_l+0x72>
 800a47c:	4881      	ldr	r0, [pc, #516]	@ (800a684 <_strtod_l+0x58c>)
 800a47e:	f001 f8a7 	bl	800b5d0 <nan>
 800a482:	ec5b ab10 	vmov	sl, fp, d0
 800a486:	e670      	b.n	800a16a <_strtod_l+0x72>
 800a488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a48a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a48c:	eba8 0303 	sub.w	r3, r8, r3
 800a490:	f1b9 0f00 	cmp.w	r9, #0
 800a494:	bf08      	it	eq
 800a496:	46a9      	moveq	r9, r5
 800a498:	2d10      	cmp	r5, #16
 800a49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a49c:	462c      	mov	r4, r5
 800a49e:	bfa8      	it	ge
 800a4a0:	2410      	movge	r4, #16
 800a4a2:	f7f6 f857 	bl	8000554 <__aeabi_ui2d>
 800a4a6:	2d09      	cmp	r5, #9
 800a4a8:	4682      	mov	sl, r0
 800a4aa:	468b      	mov	fp, r1
 800a4ac:	dc13      	bgt.n	800a4d6 <_strtod_l+0x3de>
 800a4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f43f ae5a 	beq.w	800a16a <_strtod_l+0x72>
 800a4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4b8:	dd78      	ble.n	800a5ac <_strtod_l+0x4b4>
 800a4ba:	2b16      	cmp	r3, #22
 800a4bc:	dc5f      	bgt.n	800a57e <_strtod_l+0x486>
 800a4be:	4972      	ldr	r1, [pc, #456]	@ (800a688 <_strtod_l+0x590>)
 800a4c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	465b      	mov	r3, fp
 800a4cc:	f7f6 f8bc 	bl	8000648 <__aeabi_dmul>
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	468b      	mov	fp, r1
 800a4d4:	e649      	b.n	800a16a <_strtod_l+0x72>
 800a4d6:	4b6c      	ldr	r3, [pc, #432]	@ (800a688 <_strtod_l+0x590>)
 800a4d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a4e0:	f7f6 f8b2 	bl	8000648 <__aeabi_dmul>
 800a4e4:	4682      	mov	sl, r0
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	468b      	mov	fp, r1
 800a4ea:	f7f6 f833 	bl	8000554 <__aeabi_ui2d>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	4659      	mov	r1, fp
 800a4f6:	f7f5 fef1 	bl	80002dc <__adddf3>
 800a4fa:	2d0f      	cmp	r5, #15
 800a4fc:	4682      	mov	sl, r0
 800a4fe:	468b      	mov	fp, r1
 800a500:	ddd5      	ble.n	800a4ae <_strtod_l+0x3b6>
 800a502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a504:	1b2c      	subs	r4, r5, r4
 800a506:	441c      	add	r4, r3
 800a508:	2c00      	cmp	r4, #0
 800a50a:	f340 8093 	ble.w	800a634 <_strtod_l+0x53c>
 800a50e:	f014 030f 	ands.w	r3, r4, #15
 800a512:	d00a      	beq.n	800a52a <_strtod_l+0x432>
 800a514:	495c      	ldr	r1, [pc, #368]	@ (800a688 <_strtod_l+0x590>)
 800a516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a51a:	4652      	mov	r2, sl
 800a51c:	465b      	mov	r3, fp
 800a51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a522:	f7f6 f891 	bl	8000648 <__aeabi_dmul>
 800a526:	4682      	mov	sl, r0
 800a528:	468b      	mov	fp, r1
 800a52a:	f034 040f 	bics.w	r4, r4, #15
 800a52e:	d073      	beq.n	800a618 <_strtod_l+0x520>
 800a530:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a534:	dd49      	ble.n	800a5ca <_strtod_l+0x4d2>
 800a536:	2400      	movs	r4, #0
 800a538:	46a0      	mov	r8, r4
 800a53a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a53c:	46a1      	mov	r9, r4
 800a53e:	9a05      	ldr	r2, [sp, #20]
 800a540:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a690 <_strtod_l+0x598>
 800a544:	2322      	movs	r3, #34	@ 0x22
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	f04f 0a00 	mov.w	sl, #0
 800a54c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f43f ae0b 	beq.w	800a16a <_strtod_l+0x72>
 800a554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a556:	9805      	ldr	r0, [sp, #20]
 800a558:	f7ff f946 	bl	80097e8 <_Bfree>
 800a55c:	9805      	ldr	r0, [sp, #20]
 800a55e:	4649      	mov	r1, r9
 800a560:	f7ff f942 	bl	80097e8 <_Bfree>
 800a564:	9805      	ldr	r0, [sp, #20]
 800a566:	4641      	mov	r1, r8
 800a568:	f7ff f93e 	bl	80097e8 <_Bfree>
 800a56c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a56e:	9805      	ldr	r0, [sp, #20]
 800a570:	f7ff f93a 	bl	80097e8 <_Bfree>
 800a574:	9805      	ldr	r0, [sp, #20]
 800a576:	4621      	mov	r1, r4
 800a578:	f7ff f936 	bl	80097e8 <_Bfree>
 800a57c:	e5f5      	b.n	800a16a <_strtod_l+0x72>
 800a57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a580:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a584:	4293      	cmp	r3, r2
 800a586:	dbbc      	blt.n	800a502 <_strtod_l+0x40a>
 800a588:	4c3f      	ldr	r4, [pc, #252]	@ (800a688 <_strtod_l+0x590>)
 800a58a:	f1c5 050f 	rsb	r5, r5, #15
 800a58e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a592:	4652      	mov	r2, sl
 800a594:	465b      	mov	r3, fp
 800a596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a59a:	f7f6 f855 	bl	8000648 <__aeabi_dmul>
 800a59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a0:	1b5d      	subs	r5, r3, r5
 800a5a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5aa:	e78f      	b.n	800a4cc <_strtod_l+0x3d4>
 800a5ac:	3316      	adds	r3, #22
 800a5ae:	dba8      	blt.n	800a502 <_strtod_l+0x40a>
 800a5b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b2:	eba3 0808 	sub.w	r8, r3, r8
 800a5b6:	4b34      	ldr	r3, [pc, #208]	@ (800a688 <_strtod_l+0x590>)
 800a5b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a5bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	4659      	mov	r1, fp
 800a5c4:	f7f6 f96a 	bl	800089c <__aeabi_ddiv>
 800a5c8:	e782      	b.n	800a4d0 <_strtod_l+0x3d8>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	4f2f      	ldr	r7, [pc, #188]	@ (800a68c <_strtod_l+0x594>)
 800a5ce:	1124      	asrs	r4, r4, #4
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	4659      	mov	r1, fp
 800a5d4:	461e      	mov	r6, r3
 800a5d6:	2c01      	cmp	r4, #1
 800a5d8:	dc21      	bgt.n	800a61e <_strtod_l+0x526>
 800a5da:	b10b      	cbz	r3, 800a5e0 <_strtod_l+0x4e8>
 800a5dc:	4682      	mov	sl, r0
 800a5de:	468b      	mov	fp, r1
 800a5e0:	492a      	ldr	r1, [pc, #168]	@ (800a68c <_strtod_l+0x594>)
 800a5e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a5e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a5ea:	4652      	mov	r2, sl
 800a5ec:	465b      	mov	r3, fp
 800a5ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5f2:	f7f6 f829 	bl	8000648 <__aeabi_dmul>
 800a5f6:	4b26      	ldr	r3, [pc, #152]	@ (800a690 <_strtod_l+0x598>)
 800a5f8:	460a      	mov	r2, r1
 800a5fa:	400b      	ands	r3, r1
 800a5fc:	4925      	ldr	r1, [pc, #148]	@ (800a694 <_strtod_l+0x59c>)
 800a5fe:	428b      	cmp	r3, r1
 800a600:	4682      	mov	sl, r0
 800a602:	d898      	bhi.n	800a536 <_strtod_l+0x43e>
 800a604:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a608:	428b      	cmp	r3, r1
 800a60a:	bf86      	itte	hi
 800a60c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a698 <_strtod_l+0x5a0>
 800a610:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a614:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a618:	2300      	movs	r3, #0
 800a61a:	9308      	str	r3, [sp, #32]
 800a61c:	e076      	b.n	800a70c <_strtod_l+0x614>
 800a61e:	07e2      	lsls	r2, r4, #31
 800a620:	d504      	bpl.n	800a62c <_strtod_l+0x534>
 800a622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a626:	f7f6 f80f 	bl	8000648 <__aeabi_dmul>
 800a62a:	2301      	movs	r3, #1
 800a62c:	3601      	adds	r6, #1
 800a62e:	1064      	asrs	r4, r4, #1
 800a630:	3708      	adds	r7, #8
 800a632:	e7d0      	b.n	800a5d6 <_strtod_l+0x4de>
 800a634:	d0f0      	beq.n	800a618 <_strtod_l+0x520>
 800a636:	4264      	negs	r4, r4
 800a638:	f014 020f 	ands.w	r2, r4, #15
 800a63c:	d00a      	beq.n	800a654 <_strtod_l+0x55c>
 800a63e:	4b12      	ldr	r3, [pc, #72]	@ (800a688 <_strtod_l+0x590>)
 800a640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a644:	4650      	mov	r0, sl
 800a646:	4659      	mov	r1, fp
 800a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64c:	f7f6 f926 	bl	800089c <__aeabi_ddiv>
 800a650:	4682      	mov	sl, r0
 800a652:	468b      	mov	fp, r1
 800a654:	1124      	asrs	r4, r4, #4
 800a656:	d0df      	beq.n	800a618 <_strtod_l+0x520>
 800a658:	2c1f      	cmp	r4, #31
 800a65a:	dd1f      	ble.n	800a69c <_strtod_l+0x5a4>
 800a65c:	2400      	movs	r4, #0
 800a65e:	46a0      	mov	r8, r4
 800a660:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a662:	46a1      	mov	r9, r4
 800a664:	9a05      	ldr	r2, [sp, #20]
 800a666:	2322      	movs	r3, #34	@ 0x22
 800a668:	f04f 0a00 	mov.w	sl, #0
 800a66c:	f04f 0b00 	mov.w	fp, #0
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	e76b      	b.n	800a54c <_strtod_l+0x454>
 800a674:	0800bf41 	.word	0x0800bf41
 800a678:	0800c208 	.word	0x0800c208
 800a67c:	0800bf39 	.word	0x0800bf39
 800a680:	0800bf70 	.word	0x0800bf70
 800a684:	0800c0a9 	.word	0x0800c0a9
 800a688:	0800c140 	.word	0x0800c140
 800a68c:	0800c118 	.word	0x0800c118
 800a690:	7ff00000 	.word	0x7ff00000
 800a694:	7ca00000 	.word	0x7ca00000
 800a698:	7fefffff 	.word	0x7fefffff
 800a69c:	f014 0310 	ands.w	r3, r4, #16
 800a6a0:	bf18      	it	ne
 800a6a2:	236a      	movne	r3, #106	@ 0x6a
 800a6a4:	4ea9      	ldr	r6, [pc, #676]	@ (800a94c <_strtod_l+0x854>)
 800a6a6:	9308      	str	r3, [sp, #32]
 800a6a8:	4650      	mov	r0, sl
 800a6aa:	4659      	mov	r1, fp
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	07e7      	lsls	r7, r4, #31
 800a6b0:	d504      	bpl.n	800a6bc <_strtod_l+0x5c4>
 800a6b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6b6:	f7f5 ffc7 	bl	8000648 <__aeabi_dmul>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	1064      	asrs	r4, r4, #1
 800a6be:	f106 0608 	add.w	r6, r6, #8
 800a6c2:	d1f4      	bne.n	800a6ae <_strtod_l+0x5b6>
 800a6c4:	b10b      	cbz	r3, 800a6ca <_strtod_l+0x5d2>
 800a6c6:	4682      	mov	sl, r0
 800a6c8:	468b      	mov	fp, r1
 800a6ca:	9b08      	ldr	r3, [sp, #32]
 800a6cc:	b1b3      	cbz	r3, 800a6fc <_strtod_l+0x604>
 800a6ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a6d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	4659      	mov	r1, fp
 800a6da:	dd0f      	ble.n	800a6fc <_strtod_l+0x604>
 800a6dc:	2b1f      	cmp	r3, #31
 800a6de:	dd56      	ble.n	800a78e <_strtod_l+0x696>
 800a6e0:	2b34      	cmp	r3, #52	@ 0x34
 800a6e2:	bfde      	ittt	le
 800a6e4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a6e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a6ec:	4093      	lslle	r3, r2
 800a6ee:	f04f 0a00 	mov.w	sl, #0
 800a6f2:	bfcc      	ite	gt
 800a6f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a6f8:	ea03 0b01 	andle.w	fp, r3, r1
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2300      	movs	r3, #0
 800a700:	4650      	mov	r0, sl
 800a702:	4659      	mov	r1, fp
 800a704:	f7f6 fa08 	bl	8000b18 <__aeabi_dcmpeq>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d1a7      	bne.n	800a65c <_strtod_l+0x564>
 800a70c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a712:	9805      	ldr	r0, [sp, #20]
 800a714:	462b      	mov	r3, r5
 800a716:	464a      	mov	r2, r9
 800a718:	f7ff f8ce 	bl	80098b8 <__s2b>
 800a71c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a71e:	2800      	cmp	r0, #0
 800a720:	f43f af09 	beq.w	800a536 <_strtod_l+0x43e>
 800a724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a728:	2a00      	cmp	r2, #0
 800a72a:	eba3 0308 	sub.w	r3, r3, r8
 800a72e:	bfa8      	it	ge
 800a730:	2300      	movge	r3, #0
 800a732:	9312      	str	r3, [sp, #72]	@ 0x48
 800a734:	2400      	movs	r4, #0
 800a736:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a73a:	9316      	str	r3, [sp, #88]	@ 0x58
 800a73c:	46a0      	mov	r8, r4
 800a73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a740:	9805      	ldr	r0, [sp, #20]
 800a742:	6859      	ldr	r1, [r3, #4]
 800a744:	f7ff f810 	bl	8009768 <_Balloc>
 800a748:	4681      	mov	r9, r0
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f43f aef7 	beq.w	800a53e <_strtod_l+0x446>
 800a750:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a752:	691a      	ldr	r2, [r3, #16]
 800a754:	3202      	adds	r2, #2
 800a756:	f103 010c 	add.w	r1, r3, #12
 800a75a:	0092      	lsls	r2, r2, #2
 800a75c:	300c      	adds	r0, #12
 800a75e:	f7fe f894 	bl	800888a <memcpy>
 800a762:	ec4b ab10 	vmov	d0, sl, fp
 800a766:	9805      	ldr	r0, [sp, #20]
 800a768:	aa1c      	add	r2, sp, #112	@ 0x70
 800a76a:	a91b      	add	r1, sp, #108	@ 0x6c
 800a76c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a770:	f7ff fbd6 	bl	8009f20 <__d2b>
 800a774:	901a      	str	r0, [sp, #104]	@ 0x68
 800a776:	2800      	cmp	r0, #0
 800a778:	f43f aee1 	beq.w	800a53e <_strtod_l+0x446>
 800a77c:	9805      	ldr	r0, [sp, #20]
 800a77e:	2101      	movs	r1, #1
 800a780:	f7ff f930 	bl	80099e4 <__i2b>
 800a784:	4680      	mov	r8, r0
 800a786:	b948      	cbnz	r0, 800a79c <_strtod_l+0x6a4>
 800a788:	f04f 0800 	mov.w	r8, #0
 800a78c:	e6d7      	b.n	800a53e <_strtod_l+0x446>
 800a78e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a792:	fa02 f303 	lsl.w	r3, r2, r3
 800a796:	ea03 0a0a 	and.w	sl, r3, sl
 800a79a:	e7af      	b.n	800a6fc <_strtod_l+0x604>
 800a79c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a79e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7a0:	2d00      	cmp	r5, #0
 800a7a2:	bfab      	itete	ge
 800a7a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a7a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a7a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a7aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a7ac:	bfac      	ite	ge
 800a7ae:	18ef      	addge	r7, r5, r3
 800a7b0:	1b5e      	sublt	r6, r3, r5
 800a7b2:	9b08      	ldr	r3, [sp, #32]
 800a7b4:	1aed      	subs	r5, r5, r3
 800a7b6:	4415      	add	r5, r2
 800a7b8:	4b65      	ldr	r3, [pc, #404]	@ (800a950 <_strtod_l+0x858>)
 800a7ba:	3d01      	subs	r5, #1
 800a7bc:	429d      	cmp	r5, r3
 800a7be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a7c2:	da50      	bge.n	800a866 <_strtod_l+0x76e>
 800a7c4:	1b5b      	subs	r3, r3, r5
 800a7c6:	2b1f      	cmp	r3, #31
 800a7c8:	eba2 0203 	sub.w	r2, r2, r3
 800a7cc:	f04f 0101 	mov.w	r1, #1
 800a7d0:	dc3d      	bgt.n	800a84e <_strtod_l+0x756>
 800a7d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7dc:	18bd      	adds	r5, r7, r2
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	42af      	cmp	r7, r5
 800a7e2:	4416      	add	r6, r2
 800a7e4:	441e      	add	r6, r3
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	bfa8      	it	ge
 800a7ea:	462b      	movge	r3, r5
 800a7ec:	42b3      	cmp	r3, r6
 800a7ee:	bfa8      	it	ge
 800a7f0:	4633      	movge	r3, r6
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	bfc2      	ittt	gt
 800a7f6:	1aed      	subgt	r5, r5, r3
 800a7f8:	1af6      	subgt	r6, r6, r3
 800a7fa:	1aff      	subgt	r7, r7, r3
 800a7fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dd16      	ble.n	800a830 <_strtod_l+0x738>
 800a802:	4641      	mov	r1, r8
 800a804:	9805      	ldr	r0, [sp, #20]
 800a806:	461a      	mov	r2, r3
 800a808:	f7ff f9a4 	bl	8009b54 <__pow5mult>
 800a80c:	4680      	mov	r8, r0
 800a80e:	2800      	cmp	r0, #0
 800a810:	d0ba      	beq.n	800a788 <_strtod_l+0x690>
 800a812:	4601      	mov	r1, r0
 800a814:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a816:	9805      	ldr	r0, [sp, #20]
 800a818:	f7ff f8fa 	bl	8009a10 <__multiply>
 800a81c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a81e:	2800      	cmp	r0, #0
 800a820:	f43f ae8d 	beq.w	800a53e <_strtod_l+0x446>
 800a824:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a826:	9805      	ldr	r0, [sp, #20]
 800a828:	f7fe ffde 	bl	80097e8 <_Bfree>
 800a82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a82e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a830:	2d00      	cmp	r5, #0
 800a832:	dc1d      	bgt.n	800a870 <_strtod_l+0x778>
 800a834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a836:	2b00      	cmp	r3, #0
 800a838:	dd23      	ble.n	800a882 <_strtod_l+0x78a>
 800a83a:	4649      	mov	r1, r9
 800a83c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a83e:	9805      	ldr	r0, [sp, #20]
 800a840:	f7ff f988 	bl	8009b54 <__pow5mult>
 800a844:	4681      	mov	r9, r0
 800a846:	b9e0      	cbnz	r0, 800a882 <_strtod_l+0x78a>
 800a848:	f04f 0900 	mov.w	r9, #0
 800a84c:	e677      	b.n	800a53e <_strtod_l+0x446>
 800a84e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a852:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a856:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a85a:	35e2      	adds	r5, #226	@ 0xe2
 800a85c:	fa01 f305 	lsl.w	r3, r1, r5
 800a860:	9310      	str	r3, [sp, #64]	@ 0x40
 800a862:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a864:	e7ba      	b.n	800a7dc <_strtod_l+0x6e4>
 800a866:	2300      	movs	r3, #0
 800a868:	9310      	str	r3, [sp, #64]	@ 0x40
 800a86a:	2301      	movs	r3, #1
 800a86c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a86e:	e7b5      	b.n	800a7dc <_strtod_l+0x6e4>
 800a870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a872:	9805      	ldr	r0, [sp, #20]
 800a874:	462a      	mov	r2, r5
 800a876:	f7ff f9c7 	bl	8009c08 <__lshift>
 800a87a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d1d9      	bne.n	800a834 <_strtod_l+0x73c>
 800a880:	e65d      	b.n	800a53e <_strtod_l+0x446>
 800a882:	2e00      	cmp	r6, #0
 800a884:	dd07      	ble.n	800a896 <_strtod_l+0x79e>
 800a886:	4649      	mov	r1, r9
 800a888:	9805      	ldr	r0, [sp, #20]
 800a88a:	4632      	mov	r2, r6
 800a88c:	f7ff f9bc 	bl	8009c08 <__lshift>
 800a890:	4681      	mov	r9, r0
 800a892:	2800      	cmp	r0, #0
 800a894:	d0d8      	beq.n	800a848 <_strtod_l+0x750>
 800a896:	2f00      	cmp	r7, #0
 800a898:	dd08      	ble.n	800a8ac <_strtod_l+0x7b4>
 800a89a:	4641      	mov	r1, r8
 800a89c:	9805      	ldr	r0, [sp, #20]
 800a89e:	463a      	mov	r2, r7
 800a8a0:	f7ff f9b2 	bl	8009c08 <__lshift>
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f ae49 	beq.w	800a53e <_strtod_l+0x446>
 800a8ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8ae:	9805      	ldr	r0, [sp, #20]
 800a8b0:	464a      	mov	r2, r9
 800a8b2:	f7ff fa31 	bl	8009d18 <__mdiff>
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f43f ae40 	beq.w	800a53e <_strtod_l+0x446>
 800a8be:	68c3      	ldr	r3, [r0, #12]
 800a8c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60c3      	str	r3, [r0, #12]
 800a8c6:	4641      	mov	r1, r8
 800a8c8:	f7ff fa0a 	bl	8009ce0 <__mcmp>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	da45      	bge.n	800a95c <_strtod_l+0x864>
 800a8d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8d2:	ea53 030a 	orrs.w	r3, r3, sl
 800a8d6:	d16b      	bne.n	800a9b0 <_strtod_l+0x8b8>
 800a8d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d167      	bne.n	800a9b0 <_strtod_l+0x8b8>
 800a8e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8e4:	0d1b      	lsrs	r3, r3, #20
 800a8e6:	051b      	lsls	r3, r3, #20
 800a8e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8ec:	d960      	bls.n	800a9b0 <_strtod_l+0x8b8>
 800a8ee:	6963      	ldr	r3, [r4, #20]
 800a8f0:	b913      	cbnz	r3, 800a8f8 <_strtod_l+0x800>
 800a8f2:	6923      	ldr	r3, [r4, #16]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	dd5b      	ble.n	800a9b0 <_strtod_l+0x8b8>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	9805      	ldr	r0, [sp, #20]
 800a8fe:	f7ff f983 	bl	8009c08 <__lshift>
 800a902:	4641      	mov	r1, r8
 800a904:	4604      	mov	r4, r0
 800a906:	f7ff f9eb 	bl	8009ce0 <__mcmp>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	dd50      	ble.n	800a9b0 <_strtod_l+0x8b8>
 800a90e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a912:	9a08      	ldr	r2, [sp, #32]
 800a914:	0d1b      	lsrs	r3, r3, #20
 800a916:	051b      	lsls	r3, r3, #20
 800a918:	2a00      	cmp	r2, #0
 800a91a:	d06a      	beq.n	800a9f2 <_strtod_l+0x8fa>
 800a91c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a920:	d867      	bhi.n	800a9f2 <_strtod_l+0x8fa>
 800a922:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a926:	f67f ae9d 	bls.w	800a664 <_strtod_l+0x56c>
 800a92a:	4b0a      	ldr	r3, [pc, #40]	@ (800a954 <_strtod_l+0x85c>)
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	2200      	movs	r2, #0
 800a932:	f7f5 fe89 	bl	8000648 <__aeabi_dmul>
 800a936:	4b08      	ldr	r3, [pc, #32]	@ (800a958 <_strtod_l+0x860>)
 800a938:	400b      	ands	r3, r1
 800a93a:	4682      	mov	sl, r0
 800a93c:	468b      	mov	fp, r1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f47f ae08 	bne.w	800a554 <_strtod_l+0x45c>
 800a944:	9a05      	ldr	r2, [sp, #20]
 800a946:	2322      	movs	r3, #34	@ 0x22
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	e603      	b.n	800a554 <_strtod_l+0x45c>
 800a94c:	0800c230 	.word	0x0800c230
 800a950:	fffffc02 	.word	0xfffffc02
 800a954:	39500000 	.word	0x39500000
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a960:	d165      	bne.n	800aa2e <_strtod_l+0x936>
 800a962:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a968:	b35a      	cbz	r2, 800a9c2 <_strtod_l+0x8ca>
 800a96a:	4a9f      	ldr	r2, [pc, #636]	@ (800abe8 <_strtod_l+0xaf0>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d12b      	bne.n	800a9c8 <_strtod_l+0x8d0>
 800a970:	9b08      	ldr	r3, [sp, #32]
 800a972:	4651      	mov	r1, sl
 800a974:	b303      	cbz	r3, 800a9b8 <_strtod_l+0x8c0>
 800a976:	4b9d      	ldr	r3, [pc, #628]	@ (800abec <_strtod_l+0xaf4>)
 800a978:	465a      	mov	r2, fp
 800a97a:	4013      	ands	r3, r2
 800a97c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a980:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a984:	d81b      	bhi.n	800a9be <_strtod_l+0x8c6>
 800a986:	0d1b      	lsrs	r3, r3, #20
 800a988:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a98c:	fa02 f303 	lsl.w	r3, r2, r3
 800a990:	4299      	cmp	r1, r3
 800a992:	d119      	bne.n	800a9c8 <_strtod_l+0x8d0>
 800a994:	4b96      	ldr	r3, [pc, #600]	@ (800abf0 <_strtod_l+0xaf8>)
 800a996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a998:	429a      	cmp	r2, r3
 800a99a:	d102      	bne.n	800a9a2 <_strtod_l+0x8aa>
 800a99c:	3101      	adds	r1, #1
 800a99e:	f43f adce 	beq.w	800a53e <_strtod_l+0x446>
 800a9a2:	4b92      	ldr	r3, [pc, #584]	@ (800abec <_strtod_l+0xaf4>)
 800a9a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9a6:	401a      	ands	r2, r3
 800a9a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a9ac:	f04f 0a00 	mov.w	sl, #0
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1b9      	bne.n	800a92a <_strtod_l+0x832>
 800a9b6:	e5cd      	b.n	800a554 <_strtod_l+0x45c>
 800a9b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a9bc:	e7e8      	b.n	800a990 <_strtod_l+0x898>
 800a9be:	4613      	mov	r3, r2
 800a9c0:	e7e6      	b.n	800a990 <_strtod_l+0x898>
 800a9c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a9c6:	d0a2      	beq.n	800a90e <_strtod_l+0x816>
 800a9c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a9ca:	b1db      	cbz	r3, 800aa04 <_strtod_l+0x90c>
 800a9cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9ce:	4213      	tst	r3, r2
 800a9d0:	d0ee      	beq.n	800a9b0 <_strtod_l+0x8b8>
 800a9d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9d4:	9a08      	ldr	r2, [sp, #32]
 800a9d6:	4650      	mov	r0, sl
 800a9d8:	4659      	mov	r1, fp
 800a9da:	b1bb      	cbz	r3, 800aa0c <_strtod_l+0x914>
 800a9dc:	f7ff fb6e 	bl	800a0bc <sulp>
 800a9e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9e4:	ec53 2b10 	vmov	r2, r3, d0
 800a9e8:	f7f5 fc78 	bl	80002dc <__adddf3>
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	468b      	mov	fp, r1
 800a9f0:	e7de      	b.n	800a9b0 <_strtod_l+0x8b8>
 800a9f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a9f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a9fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a9fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aa02:	e7d5      	b.n	800a9b0 <_strtod_l+0x8b8>
 800aa04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa06:	ea13 0f0a 	tst.w	r3, sl
 800aa0a:	e7e1      	b.n	800a9d0 <_strtod_l+0x8d8>
 800aa0c:	f7ff fb56 	bl	800a0bc <sulp>
 800aa10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa14:	ec53 2b10 	vmov	r2, r3, d0
 800aa18:	f7f5 fc5e 	bl	80002d8 <__aeabi_dsub>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4682      	mov	sl, r0
 800aa22:	468b      	mov	fp, r1
 800aa24:	f7f6 f878 	bl	8000b18 <__aeabi_dcmpeq>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d0c1      	beq.n	800a9b0 <_strtod_l+0x8b8>
 800aa2c:	e61a      	b.n	800a664 <_strtod_l+0x56c>
 800aa2e:	4641      	mov	r1, r8
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7ff facd 	bl	8009fd0 <__ratio>
 800aa36:	ec57 6b10 	vmov	r6, r7, d0
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa40:	4630      	mov	r0, r6
 800aa42:	4639      	mov	r1, r7
 800aa44:	f7f6 f87c 	bl	8000b40 <__aeabi_dcmple>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d06f      	beq.n	800ab2c <_strtod_l+0xa34>
 800aa4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d17a      	bne.n	800ab48 <_strtod_l+0xa50>
 800aa52:	f1ba 0f00 	cmp.w	sl, #0
 800aa56:	d158      	bne.n	800ab0a <_strtod_l+0xa12>
 800aa58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d15a      	bne.n	800ab18 <_strtod_l+0xa20>
 800aa62:	4b64      	ldr	r3, [pc, #400]	@ (800abf4 <_strtod_l+0xafc>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	4630      	mov	r0, r6
 800aa68:	4639      	mov	r1, r7
 800aa6a:	f7f6 f85f 	bl	8000b2c <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d159      	bne.n	800ab26 <_strtod_l+0xa2e>
 800aa72:	4630      	mov	r0, r6
 800aa74:	4639      	mov	r1, r7
 800aa76:	4b60      	ldr	r3, [pc, #384]	@ (800abf8 <_strtod_l+0xb00>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f7f5 fde5 	bl	8000648 <__aeabi_dmul>
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa86:	9606      	str	r6, [sp, #24]
 800aa88:	9307      	str	r3, [sp, #28]
 800aa8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa8e:	4d57      	ldr	r5, [pc, #348]	@ (800abec <_strtod_l+0xaf4>)
 800aa90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa96:	401d      	ands	r5, r3
 800aa98:	4b58      	ldr	r3, [pc, #352]	@ (800abfc <_strtod_l+0xb04>)
 800aa9a:	429d      	cmp	r5, r3
 800aa9c:	f040 80b2 	bne.w	800ac04 <_strtod_l+0xb0c>
 800aaa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaa2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aaa6:	ec4b ab10 	vmov	d0, sl, fp
 800aaaa:	f7ff f9c9 	bl	8009e40 <__ulp>
 800aaae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aab2:	ec51 0b10 	vmov	r0, r1, d0
 800aab6:	f7f5 fdc7 	bl	8000648 <__aeabi_dmul>
 800aaba:	4652      	mov	r2, sl
 800aabc:	465b      	mov	r3, fp
 800aabe:	f7f5 fc0d 	bl	80002dc <__adddf3>
 800aac2:	460b      	mov	r3, r1
 800aac4:	4949      	ldr	r1, [pc, #292]	@ (800abec <_strtod_l+0xaf4>)
 800aac6:	4a4e      	ldr	r2, [pc, #312]	@ (800ac00 <_strtod_l+0xb08>)
 800aac8:	4019      	ands	r1, r3
 800aaca:	4291      	cmp	r1, r2
 800aacc:	4682      	mov	sl, r0
 800aace:	d942      	bls.n	800ab56 <_strtod_l+0xa5e>
 800aad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aad2:	4b47      	ldr	r3, [pc, #284]	@ (800abf0 <_strtod_l+0xaf8>)
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d103      	bne.n	800aae0 <_strtod_l+0x9e8>
 800aad8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aada:	3301      	adds	r3, #1
 800aadc:	f43f ad2f 	beq.w	800a53e <_strtod_l+0x446>
 800aae0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800abf0 <_strtod_l+0xaf8>
 800aae4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaea:	9805      	ldr	r0, [sp, #20]
 800aaec:	f7fe fe7c 	bl	80097e8 <_Bfree>
 800aaf0:	9805      	ldr	r0, [sp, #20]
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	f7fe fe78 	bl	80097e8 <_Bfree>
 800aaf8:	9805      	ldr	r0, [sp, #20]
 800aafa:	4641      	mov	r1, r8
 800aafc:	f7fe fe74 	bl	80097e8 <_Bfree>
 800ab00:	9805      	ldr	r0, [sp, #20]
 800ab02:	4621      	mov	r1, r4
 800ab04:	f7fe fe70 	bl	80097e8 <_Bfree>
 800ab08:	e619      	b.n	800a73e <_strtod_l+0x646>
 800ab0a:	f1ba 0f01 	cmp.w	sl, #1
 800ab0e:	d103      	bne.n	800ab18 <_strtod_l+0xa20>
 800ab10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f43f ada6 	beq.w	800a664 <_strtod_l+0x56c>
 800ab18:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800abc8 <_strtod_l+0xad0>
 800ab1c:	4f35      	ldr	r7, [pc, #212]	@ (800abf4 <_strtod_l+0xafc>)
 800ab1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab22:	2600      	movs	r6, #0
 800ab24:	e7b1      	b.n	800aa8a <_strtod_l+0x992>
 800ab26:	4f34      	ldr	r7, [pc, #208]	@ (800abf8 <_strtod_l+0xb00>)
 800ab28:	2600      	movs	r6, #0
 800ab2a:	e7aa      	b.n	800aa82 <_strtod_l+0x98a>
 800ab2c:	4b32      	ldr	r3, [pc, #200]	@ (800abf8 <_strtod_l+0xb00>)
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	2200      	movs	r2, #0
 800ab34:	f7f5 fd88 	bl	8000648 <__aeabi_dmul>
 800ab38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d09f      	beq.n	800aa82 <_strtod_l+0x98a>
 800ab42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab46:	e7a0      	b.n	800aa8a <_strtod_l+0x992>
 800ab48:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800abd0 <_strtod_l+0xad8>
 800ab4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab50:	ec57 6b17 	vmov	r6, r7, d7
 800ab54:	e799      	b.n	800aa8a <_strtod_l+0x992>
 800ab56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ab5a:	9b08      	ldr	r3, [sp, #32]
 800ab5c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1c1      	bne.n	800aae8 <_strtod_l+0x9f0>
 800ab64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab68:	0d1b      	lsrs	r3, r3, #20
 800ab6a:	051b      	lsls	r3, r3, #20
 800ab6c:	429d      	cmp	r5, r3
 800ab6e:	d1bb      	bne.n	800aae8 <_strtod_l+0x9f0>
 800ab70:	4630      	mov	r0, r6
 800ab72:	4639      	mov	r1, r7
 800ab74:	f7f6 f8c8 	bl	8000d08 <__aeabi_d2lz>
 800ab78:	f7f5 fd38 	bl	80005ec <__aeabi_l2d>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 fba8 	bl	80002d8 <__aeabi_dsub>
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab90:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab96:	ea46 060a 	orr.w	r6, r6, sl
 800ab9a:	431e      	orrs	r6, r3
 800ab9c:	d06f      	beq.n	800ac7e <_strtod_l+0xb86>
 800ab9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800abd8 <_strtod_l+0xae0>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 ffc2 	bl	8000b2c <__aeabi_dcmplt>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	f47f acd3 	bne.w	800a554 <_strtod_l+0x45c>
 800abae:	a30c      	add	r3, pc, #48	@ (adr r3, 800abe0 <_strtod_l+0xae8>)
 800abb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abb8:	f7f5 ffd6 	bl	8000b68 <__aeabi_dcmpgt>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d093      	beq.n	800aae8 <_strtod_l+0x9f0>
 800abc0:	e4c8      	b.n	800a554 <_strtod_l+0x45c>
 800abc2:	bf00      	nop
 800abc4:	f3af 8000 	nop.w
 800abc8:	00000000 	.word	0x00000000
 800abcc:	bff00000 	.word	0xbff00000
 800abd0:	00000000 	.word	0x00000000
 800abd4:	3ff00000 	.word	0x3ff00000
 800abd8:	94a03595 	.word	0x94a03595
 800abdc:	3fdfffff 	.word	0x3fdfffff
 800abe0:	35afe535 	.word	0x35afe535
 800abe4:	3fe00000 	.word	0x3fe00000
 800abe8:	000fffff 	.word	0x000fffff
 800abec:	7ff00000 	.word	0x7ff00000
 800abf0:	7fefffff 	.word	0x7fefffff
 800abf4:	3ff00000 	.word	0x3ff00000
 800abf8:	3fe00000 	.word	0x3fe00000
 800abfc:	7fe00000 	.word	0x7fe00000
 800ac00:	7c9fffff 	.word	0x7c9fffff
 800ac04:	9b08      	ldr	r3, [sp, #32]
 800ac06:	b323      	cbz	r3, 800ac52 <_strtod_l+0xb5a>
 800ac08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac0c:	d821      	bhi.n	800ac52 <_strtod_l+0xb5a>
 800ac0e:	a328      	add	r3, pc, #160	@ (adr r3, 800acb0 <_strtod_l+0xbb8>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f7f5 ff92 	bl	8000b40 <__aeabi_dcmple>
 800ac1c:	b1a0      	cbz	r0, 800ac48 <_strtod_l+0xb50>
 800ac1e:	4639      	mov	r1, r7
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7f5 ffe9 	bl	8000bf8 <__aeabi_d2uiz>
 800ac26:	2801      	cmp	r0, #1
 800ac28:	bf38      	it	cc
 800ac2a:	2001      	movcc	r0, #1
 800ac2c:	f7f5 fc92 	bl	8000554 <__aeabi_ui2d>
 800ac30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac32:	4606      	mov	r6, r0
 800ac34:	460f      	mov	r7, r1
 800ac36:	b9fb      	cbnz	r3, 800ac78 <_strtod_l+0xb80>
 800ac38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac3c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac3e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ac4e:	1b5b      	subs	r3, r3, r5
 800ac50:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ac56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ac5a:	f7ff f8f1 	bl	8009e40 <__ulp>
 800ac5e:	4650      	mov	r0, sl
 800ac60:	ec53 2b10 	vmov	r2, r3, d0
 800ac64:	4659      	mov	r1, fp
 800ac66:	f7f5 fcef 	bl	8000648 <__aeabi_dmul>
 800ac6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ac6e:	f7f5 fb35 	bl	80002dc <__adddf3>
 800ac72:	4682      	mov	sl, r0
 800ac74:	468b      	mov	fp, r1
 800ac76:	e770      	b.n	800ab5a <_strtod_l+0xa62>
 800ac78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac7c:	e7e0      	b.n	800ac40 <_strtod_l+0xb48>
 800ac7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800acb8 <_strtod_l+0xbc0>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f7f5 ff52 	bl	8000b2c <__aeabi_dcmplt>
 800ac88:	e798      	b.n	800abbc <_strtod_l+0xac4>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	f7ff ba6d 	b.w	800a172 <_strtod_l+0x7a>
 800ac98:	2a65      	cmp	r2, #101	@ 0x65
 800ac9a:	f43f ab68 	beq.w	800a36e <_strtod_l+0x276>
 800ac9e:	2a45      	cmp	r2, #69	@ 0x45
 800aca0:	f43f ab65 	beq.w	800a36e <_strtod_l+0x276>
 800aca4:	2301      	movs	r3, #1
 800aca6:	f7ff bba0 	b.w	800a3ea <_strtod_l+0x2f2>
 800acaa:	bf00      	nop
 800acac:	f3af 8000 	nop.w
 800acb0:	ffc00000 	.word	0xffc00000
 800acb4:	41dfffff 	.word	0x41dfffff
 800acb8:	94a03595 	.word	0x94a03595
 800acbc:	3fcfffff 	.word	0x3fcfffff

0800acc0 <_strtod_r>:
 800acc0:	4b01      	ldr	r3, [pc, #4]	@ (800acc8 <_strtod_r+0x8>)
 800acc2:	f7ff ba19 	b.w	800a0f8 <_strtod_l>
 800acc6:	bf00      	nop
 800acc8:	20000080 	.word	0x20000080

0800accc <_strtol_l.isra.0>:
 800accc:	2b24      	cmp	r3, #36	@ 0x24
 800acce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd2:	4686      	mov	lr, r0
 800acd4:	4690      	mov	r8, r2
 800acd6:	d801      	bhi.n	800acdc <_strtol_l.isra.0+0x10>
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d106      	bne.n	800acea <_strtol_l.isra.0+0x1e>
 800acdc:	f7fd fda8 	bl	8008830 <__errno>
 800ace0:	2316      	movs	r3, #22
 800ace2:	6003      	str	r3, [r0, #0]
 800ace4:	2000      	movs	r0, #0
 800ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acea:	4834      	ldr	r0, [pc, #208]	@ (800adbc <_strtol_l.isra.0+0xf0>)
 800acec:	460d      	mov	r5, r1
 800acee:	462a      	mov	r2, r5
 800acf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acf4:	5d06      	ldrb	r6, [r0, r4]
 800acf6:	f016 0608 	ands.w	r6, r6, #8
 800acfa:	d1f8      	bne.n	800acee <_strtol_l.isra.0+0x22>
 800acfc:	2c2d      	cmp	r4, #45	@ 0x2d
 800acfe:	d110      	bne.n	800ad22 <_strtol_l.isra.0+0x56>
 800ad00:	782c      	ldrb	r4, [r5, #0]
 800ad02:	2601      	movs	r6, #1
 800ad04:	1c95      	adds	r5, r2, #2
 800ad06:	f033 0210 	bics.w	r2, r3, #16
 800ad0a:	d115      	bne.n	800ad38 <_strtol_l.isra.0+0x6c>
 800ad0c:	2c30      	cmp	r4, #48	@ 0x30
 800ad0e:	d10d      	bne.n	800ad2c <_strtol_l.isra.0+0x60>
 800ad10:	782a      	ldrb	r2, [r5, #0]
 800ad12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad16:	2a58      	cmp	r2, #88	@ 0x58
 800ad18:	d108      	bne.n	800ad2c <_strtol_l.isra.0+0x60>
 800ad1a:	786c      	ldrb	r4, [r5, #1]
 800ad1c:	3502      	adds	r5, #2
 800ad1e:	2310      	movs	r3, #16
 800ad20:	e00a      	b.n	800ad38 <_strtol_l.isra.0+0x6c>
 800ad22:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad24:	bf04      	itt	eq
 800ad26:	782c      	ldrbeq	r4, [r5, #0]
 800ad28:	1c95      	addeq	r5, r2, #2
 800ad2a:	e7ec      	b.n	800ad06 <_strtol_l.isra.0+0x3a>
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1f6      	bne.n	800ad1e <_strtol_l.isra.0+0x52>
 800ad30:	2c30      	cmp	r4, #48	@ 0x30
 800ad32:	bf14      	ite	ne
 800ad34:	230a      	movne	r3, #10
 800ad36:	2308      	moveq	r3, #8
 800ad38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ad3c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ad40:	2200      	movs	r2, #0
 800ad42:	fbbc f9f3 	udiv	r9, ip, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	fb03 ca19 	mls	sl, r3, r9, ip
 800ad4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ad50:	2f09      	cmp	r7, #9
 800ad52:	d80f      	bhi.n	800ad74 <_strtol_l.isra.0+0xa8>
 800ad54:	463c      	mov	r4, r7
 800ad56:	42a3      	cmp	r3, r4
 800ad58:	dd1b      	ble.n	800ad92 <_strtol_l.isra.0+0xc6>
 800ad5a:	1c57      	adds	r7, r2, #1
 800ad5c:	d007      	beq.n	800ad6e <_strtol_l.isra.0+0xa2>
 800ad5e:	4581      	cmp	r9, r0
 800ad60:	d314      	bcc.n	800ad8c <_strtol_l.isra.0+0xc0>
 800ad62:	d101      	bne.n	800ad68 <_strtol_l.isra.0+0x9c>
 800ad64:	45a2      	cmp	sl, r4
 800ad66:	db11      	blt.n	800ad8c <_strtol_l.isra.0+0xc0>
 800ad68:	fb00 4003 	mla	r0, r0, r3, r4
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad72:	e7eb      	b.n	800ad4c <_strtol_l.isra.0+0x80>
 800ad74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad78:	2f19      	cmp	r7, #25
 800ad7a:	d801      	bhi.n	800ad80 <_strtol_l.isra.0+0xb4>
 800ad7c:	3c37      	subs	r4, #55	@ 0x37
 800ad7e:	e7ea      	b.n	800ad56 <_strtol_l.isra.0+0x8a>
 800ad80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad84:	2f19      	cmp	r7, #25
 800ad86:	d804      	bhi.n	800ad92 <_strtol_l.isra.0+0xc6>
 800ad88:	3c57      	subs	r4, #87	@ 0x57
 800ad8a:	e7e4      	b.n	800ad56 <_strtol_l.isra.0+0x8a>
 800ad8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad90:	e7ed      	b.n	800ad6e <_strtol_l.isra.0+0xa2>
 800ad92:	1c53      	adds	r3, r2, #1
 800ad94:	d108      	bne.n	800ada8 <_strtol_l.isra.0+0xdc>
 800ad96:	2322      	movs	r3, #34	@ 0x22
 800ad98:	f8ce 3000 	str.w	r3, [lr]
 800ad9c:	4660      	mov	r0, ip
 800ad9e:	f1b8 0f00 	cmp.w	r8, #0
 800ada2:	d0a0      	beq.n	800ace6 <_strtol_l.isra.0+0x1a>
 800ada4:	1e69      	subs	r1, r5, #1
 800ada6:	e006      	b.n	800adb6 <_strtol_l.isra.0+0xea>
 800ada8:	b106      	cbz	r6, 800adac <_strtol_l.isra.0+0xe0>
 800adaa:	4240      	negs	r0, r0
 800adac:	f1b8 0f00 	cmp.w	r8, #0
 800adb0:	d099      	beq.n	800ace6 <_strtol_l.isra.0+0x1a>
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	d1f6      	bne.n	800ada4 <_strtol_l.isra.0+0xd8>
 800adb6:	f8c8 1000 	str.w	r1, [r8]
 800adba:	e794      	b.n	800ace6 <_strtol_l.isra.0+0x1a>
 800adbc:	0800c259 	.word	0x0800c259

0800adc0 <_strtol_r>:
 800adc0:	f7ff bf84 	b.w	800accc <_strtol_l.isra.0>

0800adc4 <__ssputs_r>:
 800adc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc8:	688e      	ldr	r6, [r1, #8]
 800adca:	461f      	mov	r7, r3
 800adcc:	42be      	cmp	r6, r7
 800adce:	680b      	ldr	r3, [r1, #0]
 800add0:	4682      	mov	sl, r0
 800add2:	460c      	mov	r4, r1
 800add4:	4690      	mov	r8, r2
 800add6:	d82d      	bhi.n	800ae34 <__ssputs_r+0x70>
 800add8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800addc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ade0:	d026      	beq.n	800ae30 <__ssputs_r+0x6c>
 800ade2:	6965      	ldr	r5, [r4, #20]
 800ade4:	6909      	ldr	r1, [r1, #16]
 800ade6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adea:	eba3 0901 	sub.w	r9, r3, r1
 800adee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf2:	1c7b      	adds	r3, r7, #1
 800adf4:	444b      	add	r3, r9
 800adf6:	106d      	asrs	r5, r5, #1
 800adf8:	429d      	cmp	r5, r3
 800adfa:	bf38      	it	cc
 800adfc:	461d      	movcc	r5, r3
 800adfe:	0553      	lsls	r3, r2, #21
 800ae00:	d527      	bpl.n	800ae52 <__ssputs_r+0x8e>
 800ae02:	4629      	mov	r1, r5
 800ae04:	f7fe fc24 	bl	8009650 <_malloc_r>
 800ae08:	4606      	mov	r6, r0
 800ae0a:	b360      	cbz	r0, 800ae66 <__ssputs_r+0xa2>
 800ae0c:	6921      	ldr	r1, [r4, #16]
 800ae0e:	464a      	mov	r2, r9
 800ae10:	f7fd fd3b 	bl	800888a <memcpy>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	6126      	str	r6, [r4, #16]
 800ae22:	6165      	str	r5, [r4, #20]
 800ae24:	444e      	add	r6, r9
 800ae26:	eba5 0509 	sub.w	r5, r5, r9
 800ae2a:	6026      	str	r6, [r4, #0]
 800ae2c:	60a5      	str	r5, [r4, #8]
 800ae2e:	463e      	mov	r6, r7
 800ae30:	42be      	cmp	r6, r7
 800ae32:	d900      	bls.n	800ae36 <__ssputs_r+0x72>
 800ae34:	463e      	mov	r6, r7
 800ae36:	6820      	ldr	r0, [r4, #0]
 800ae38:	4632      	mov	r2, r6
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	f000 fb6a 	bl	800b514 <memmove>
 800ae40:	68a3      	ldr	r3, [r4, #8]
 800ae42:	1b9b      	subs	r3, r3, r6
 800ae44:	60a3      	str	r3, [r4, #8]
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	4433      	add	r3, r6
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae52:	462a      	mov	r2, r5
 800ae54:	f000 ff41 	bl	800bcda <_realloc_r>
 800ae58:	4606      	mov	r6, r0
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d1e0      	bne.n	800ae20 <__ssputs_r+0x5c>
 800ae5e:	6921      	ldr	r1, [r4, #16]
 800ae60:	4650      	mov	r0, sl
 800ae62:	f7fe fb81 	bl	8009568 <_free_r>
 800ae66:	230c      	movs	r3, #12
 800ae68:	f8ca 3000 	str.w	r3, [sl]
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae78:	e7e9      	b.n	800ae4e <__ssputs_r+0x8a>
	...

0800ae7c <_svfiprintf_r>:
 800ae7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae80:	4698      	mov	r8, r3
 800ae82:	898b      	ldrh	r3, [r1, #12]
 800ae84:	061b      	lsls	r3, r3, #24
 800ae86:	b09d      	sub	sp, #116	@ 0x74
 800ae88:	4607      	mov	r7, r0
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	4614      	mov	r4, r2
 800ae8e:	d510      	bpl.n	800aeb2 <_svfiprintf_r+0x36>
 800ae90:	690b      	ldr	r3, [r1, #16]
 800ae92:	b973      	cbnz	r3, 800aeb2 <_svfiprintf_r+0x36>
 800ae94:	2140      	movs	r1, #64	@ 0x40
 800ae96:	f7fe fbdb 	bl	8009650 <_malloc_r>
 800ae9a:	6028      	str	r0, [r5, #0]
 800ae9c:	6128      	str	r0, [r5, #16]
 800ae9e:	b930      	cbnz	r0, 800aeae <_svfiprintf_r+0x32>
 800aea0:	230c      	movs	r3, #12
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aea8:	b01d      	add	sp, #116	@ 0x74
 800aeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeae:	2340      	movs	r3, #64	@ 0x40
 800aeb0:	616b      	str	r3, [r5, #20]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb6:	2320      	movs	r3, #32
 800aeb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec0:	2330      	movs	r3, #48	@ 0x30
 800aec2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b060 <_svfiprintf_r+0x1e4>
 800aec6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeca:	f04f 0901 	mov.w	r9, #1
 800aece:	4623      	mov	r3, r4
 800aed0:	469a      	mov	sl, r3
 800aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed6:	b10a      	cbz	r2, 800aedc <_svfiprintf_r+0x60>
 800aed8:	2a25      	cmp	r2, #37	@ 0x25
 800aeda:	d1f9      	bne.n	800aed0 <_svfiprintf_r+0x54>
 800aedc:	ebba 0b04 	subs.w	fp, sl, r4
 800aee0:	d00b      	beq.n	800aefa <_svfiprintf_r+0x7e>
 800aee2:	465b      	mov	r3, fp
 800aee4:	4622      	mov	r2, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	4638      	mov	r0, r7
 800aeea:	f7ff ff6b 	bl	800adc4 <__ssputs_r>
 800aeee:	3001      	adds	r0, #1
 800aef0:	f000 80a7 	beq.w	800b042 <_svfiprintf_r+0x1c6>
 800aef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aef6:	445a      	add	r2, fp
 800aef8:	9209      	str	r2, [sp, #36]	@ 0x24
 800aefa:	f89a 3000 	ldrb.w	r3, [sl]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 809f 	beq.w	800b042 <_svfiprintf_r+0x1c6>
 800af04:	2300      	movs	r3, #0
 800af06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af0e:	f10a 0a01 	add.w	sl, sl, #1
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	9307      	str	r3, [sp, #28]
 800af16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af1c:	4654      	mov	r4, sl
 800af1e:	2205      	movs	r2, #5
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	484e      	ldr	r0, [pc, #312]	@ (800b060 <_svfiprintf_r+0x1e4>)
 800af26:	f7f5 f97b 	bl	8000220 <memchr>
 800af2a:	9a04      	ldr	r2, [sp, #16]
 800af2c:	b9d8      	cbnz	r0, 800af66 <_svfiprintf_r+0xea>
 800af2e:	06d0      	lsls	r0, r2, #27
 800af30:	bf44      	itt	mi
 800af32:	2320      	movmi	r3, #32
 800af34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af38:	0711      	lsls	r1, r2, #28
 800af3a:	bf44      	itt	mi
 800af3c:	232b      	movmi	r3, #43	@ 0x2b
 800af3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af42:	f89a 3000 	ldrb.w	r3, [sl]
 800af46:	2b2a      	cmp	r3, #42	@ 0x2a
 800af48:	d015      	beq.n	800af76 <_svfiprintf_r+0xfa>
 800af4a:	9a07      	ldr	r2, [sp, #28]
 800af4c:	4654      	mov	r4, sl
 800af4e:	2000      	movs	r0, #0
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4621      	mov	r1, r4
 800af56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5a:	3b30      	subs	r3, #48	@ 0x30
 800af5c:	2b09      	cmp	r3, #9
 800af5e:	d94b      	bls.n	800aff8 <_svfiprintf_r+0x17c>
 800af60:	b1b0      	cbz	r0, 800af90 <_svfiprintf_r+0x114>
 800af62:	9207      	str	r2, [sp, #28]
 800af64:	e014      	b.n	800af90 <_svfiprintf_r+0x114>
 800af66:	eba0 0308 	sub.w	r3, r0, r8
 800af6a:	fa09 f303 	lsl.w	r3, r9, r3
 800af6e:	4313      	orrs	r3, r2
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	46a2      	mov	sl, r4
 800af74:	e7d2      	b.n	800af1c <_svfiprintf_r+0xa0>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	1d19      	adds	r1, r3, #4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	9103      	str	r1, [sp, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	bfbb      	ittet	lt
 800af82:	425b      	neglt	r3, r3
 800af84:	f042 0202 	orrlt.w	r2, r2, #2
 800af88:	9307      	strge	r3, [sp, #28]
 800af8a:	9307      	strlt	r3, [sp, #28]
 800af8c:	bfb8      	it	lt
 800af8e:	9204      	strlt	r2, [sp, #16]
 800af90:	7823      	ldrb	r3, [r4, #0]
 800af92:	2b2e      	cmp	r3, #46	@ 0x2e
 800af94:	d10a      	bne.n	800afac <_svfiprintf_r+0x130>
 800af96:	7863      	ldrb	r3, [r4, #1]
 800af98:	2b2a      	cmp	r3, #42	@ 0x2a
 800af9a:	d132      	bne.n	800b002 <_svfiprintf_r+0x186>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	1d1a      	adds	r2, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	9203      	str	r2, [sp, #12]
 800afa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afa8:	3402      	adds	r4, #2
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b070 <_svfiprintf_r+0x1f4>
 800afb0:	7821      	ldrb	r1, [r4, #0]
 800afb2:	2203      	movs	r2, #3
 800afb4:	4650      	mov	r0, sl
 800afb6:	f7f5 f933 	bl	8000220 <memchr>
 800afba:	b138      	cbz	r0, 800afcc <_svfiprintf_r+0x150>
 800afbc:	9b04      	ldr	r3, [sp, #16]
 800afbe:	eba0 000a 	sub.w	r0, r0, sl
 800afc2:	2240      	movs	r2, #64	@ 0x40
 800afc4:	4082      	lsls	r2, r0
 800afc6:	4313      	orrs	r3, r2
 800afc8:	3401      	adds	r4, #1
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd0:	4824      	ldr	r0, [pc, #144]	@ (800b064 <_svfiprintf_r+0x1e8>)
 800afd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afd6:	2206      	movs	r2, #6
 800afd8:	f7f5 f922 	bl	8000220 <memchr>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d036      	beq.n	800b04e <_svfiprintf_r+0x1d2>
 800afe0:	4b21      	ldr	r3, [pc, #132]	@ (800b068 <_svfiprintf_r+0x1ec>)
 800afe2:	bb1b      	cbnz	r3, 800b02c <_svfiprintf_r+0x1b0>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	3307      	adds	r3, #7
 800afe8:	f023 0307 	bic.w	r3, r3, #7
 800afec:	3308      	adds	r3, #8
 800afee:	9303      	str	r3, [sp, #12]
 800aff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff2:	4433      	add	r3, r6
 800aff4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff6:	e76a      	b.n	800aece <_svfiprintf_r+0x52>
 800aff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800affc:	460c      	mov	r4, r1
 800affe:	2001      	movs	r0, #1
 800b000:	e7a8      	b.n	800af54 <_svfiprintf_r+0xd8>
 800b002:	2300      	movs	r3, #0
 800b004:	3401      	adds	r4, #1
 800b006:	9305      	str	r3, [sp, #20]
 800b008:	4619      	mov	r1, r3
 800b00a:	f04f 0c0a 	mov.w	ip, #10
 800b00e:	4620      	mov	r0, r4
 800b010:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b014:	3a30      	subs	r2, #48	@ 0x30
 800b016:	2a09      	cmp	r2, #9
 800b018:	d903      	bls.n	800b022 <_svfiprintf_r+0x1a6>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d0c6      	beq.n	800afac <_svfiprintf_r+0x130>
 800b01e:	9105      	str	r1, [sp, #20]
 800b020:	e7c4      	b.n	800afac <_svfiprintf_r+0x130>
 800b022:	fb0c 2101 	mla	r1, ip, r1, r2
 800b026:	4604      	mov	r4, r0
 800b028:	2301      	movs	r3, #1
 800b02a:	e7f0      	b.n	800b00e <_svfiprintf_r+0x192>
 800b02c:	ab03      	add	r3, sp, #12
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	462a      	mov	r2, r5
 800b032:	4b0e      	ldr	r3, [pc, #56]	@ (800b06c <_svfiprintf_r+0x1f0>)
 800b034:	a904      	add	r1, sp, #16
 800b036:	4638      	mov	r0, r7
 800b038:	f7fc fbf2 	bl	8007820 <_printf_float>
 800b03c:	1c42      	adds	r2, r0, #1
 800b03e:	4606      	mov	r6, r0
 800b040:	d1d6      	bne.n	800aff0 <_svfiprintf_r+0x174>
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	065b      	lsls	r3, r3, #25
 800b046:	f53f af2d 	bmi.w	800aea4 <_svfiprintf_r+0x28>
 800b04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b04c:	e72c      	b.n	800aea8 <_svfiprintf_r+0x2c>
 800b04e:	ab03      	add	r3, sp, #12
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	462a      	mov	r2, r5
 800b054:	4b05      	ldr	r3, [pc, #20]	@ (800b06c <_svfiprintf_r+0x1f0>)
 800b056:	a904      	add	r1, sp, #16
 800b058:	4638      	mov	r0, r7
 800b05a:	f7fc fe79 	bl	8007d50 <_printf_i>
 800b05e:	e7ed      	b.n	800b03c <_svfiprintf_r+0x1c0>
 800b060:	0800c055 	.word	0x0800c055
 800b064:	0800c05f 	.word	0x0800c05f
 800b068:	08007821 	.word	0x08007821
 800b06c:	0800adc5 	.word	0x0800adc5
 800b070:	0800c05b 	.word	0x0800c05b

0800b074 <__sfputc_r>:
 800b074:	6893      	ldr	r3, [r2, #8]
 800b076:	3b01      	subs	r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	b410      	push	{r4}
 800b07c:	6093      	str	r3, [r2, #8]
 800b07e:	da08      	bge.n	800b092 <__sfputc_r+0x1e>
 800b080:	6994      	ldr	r4, [r2, #24]
 800b082:	42a3      	cmp	r3, r4
 800b084:	db01      	blt.n	800b08a <__sfputc_r+0x16>
 800b086:	290a      	cmp	r1, #10
 800b088:	d103      	bne.n	800b092 <__sfputc_r+0x1e>
 800b08a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b08e:	f7fd bae8 	b.w	8008662 <__swbuf_r>
 800b092:	6813      	ldr	r3, [r2, #0]
 800b094:	1c58      	adds	r0, r3, #1
 800b096:	6010      	str	r0, [r2, #0]
 800b098:	7019      	strb	r1, [r3, #0]
 800b09a:	4608      	mov	r0, r1
 800b09c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a0:	4770      	bx	lr

0800b0a2 <__sfputs_r>:
 800b0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	460f      	mov	r7, r1
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	18d5      	adds	r5, r2, r3
 800b0ac:	42ac      	cmp	r4, r5
 800b0ae:	d101      	bne.n	800b0b4 <__sfputs_r+0x12>
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e007      	b.n	800b0c4 <__sfputs_r+0x22>
 800b0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b8:	463a      	mov	r2, r7
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7ff ffda 	bl	800b074 <__sfputc_r>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d1f3      	bne.n	800b0ac <__sfputs_r+0xa>
 800b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0c8 <_vfiprintf_r>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	b09d      	sub	sp, #116	@ 0x74
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	4698      	mov	r8, r3
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	b118      	cbz	r0, 800b0e0 <_vfiprintf_r+0x18>
 800b0d8:	6a03      	ldr	r3, [r0, #32]
 800b0da:	b90b      	cbnz	r3, 800b0e0 <_vfiprintf_r+0x18>
 800b0dc:	f7fd f9f0 	bl	80084c0 <__sinit>
 800b0e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0e2:	07d9      	lsls	r1, r3, #31
 800b0e4:	d405      	bmi.n	800b0f2 <_vfiprintf_r+0x2a>
 800b0e6:	89ab      	ldrh	r3, [r5, #12]
 800b0e8:	059a      	lsls	r2, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_vfiprintf_r+0x2a>
 800b0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ee:	f7fd fbca 	bl	8008886 <__retarget_lock_acquire_recursive>
 800b0f2:	89ab      	ldrh	r3, [r5, #12]
 800b0f4:	071b      	lsls	r3, r3, #28
 800b0f6:	d501      	bpl.n	800b0fc <_vfiprintf_r+0x34>
 800b0f8:	692b      	ldr	r3, [r5, #16]
 800b0fa:	b99b      	cbnz	r3, 800b124 <_vfiprintf_r+0x5c>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7fd faee 	bl	80086e0 <__swsetup_r>
 800b104:	b170      	cbz	r0, 800b124 <_vfiprintf_r+0x5c>
 800b106:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b108:	07dc      	lsls	r4, r3, #31
 800b10a:	d504      	bpl.n	800b116 <_vfiprintf_r+0x4e>
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b110:	b01d      	add	sp, #116	@ 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	0598      	lsls	r0, r3, #22
 800b11a:	d4f7      	bmi.n	800b10c <_vfiprintf_r+0x44>
 800b11c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b11e:	f7fd fbb3 	bl	8008888 <__retarget_lock_release_recursive>
 800b122:	e7f3      	b.n	800b10c <_vfiprintf_r+0x44>
 800b124:	2300      	movs	r3, #0
 800b126:	9309      	str	r3, [sp, #36]	@ 0x24
 800b128:	2320      	movs	r3, #32
 800b12a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b132:	2330      	movs	r3, #48	@ 0x30
 800b134:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2e4 <_vfiprintf_r+0x21c>
 800b138:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b13c:	f04f 0901 	mov.w	r9, #1
 800b140:	4623      	mov	r3, r4
 800b142:	469a      	mov	sl, r3
 800b144:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b148:	b10a      	cbz	r2, 800b14e <_vfiprintf_r+0x86>
 800b14a:	2a25      	cmp	r2, #37	@ 0x25
 800b14c:	d1f9      	bne.n	800b142 <_vfiprintf_r+0x7a>
 800b14e:	ebba 0b04 	subs.w	fp, sl, r4
 800b152:	d00b      	beq.n	800b16c <_vfiprintf_r+0xa4>
 800b154:	465b      	mov	r3, fp
 800b156:	4622      	mov	r2, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ffa1 	bl	800b0a2 <__sfputs_r>
 800b160:	3001      	adds	r0, #1
 800b162:	f000 80a7 	beq.w	800b2b4 <_vfiprintf_r+0x1ec>
 800b166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b168:	445a      	add	r2, fp
 800b16a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b16c:	f89a 3000 	ldrb.w	r3, [sl]
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 809f 	beq.w	800b2b4 <_vfiprintf_r+0x1ec>
 800b176:	2300      	movs	r3, #0
 800b178:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b17c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b180:	f10a 0a01 	add.w	sl, sl, #1
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	9307      	str	r3, [sp, #28]
 800b188:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b18c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b18e:	4654      	mov	r4, sl
 800b190:	2205      	movs	r2, #5
 800b192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b196:	4853      	ldr	r0, [pc, #332]	@ (800b2e4 <_vfiprintf_r+0x21c>)
 800b198:	f7f5 f842 	bl	8000220 <memchr>
 800b19c:	9a04      	ldr	r2, [sp, #16]
 800b19e:	b9d8      	cbnz	r0, 800b1d8 <_vfiprintf_r+0x110>
 800b1a0:	06d1      	lsls	r1, r2, #27
 800b1a2:	bf44      	itt	mi
 800b1a4:	2320      	movmi	r3, #32
 800b1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1aa:	0713      	lsls	r3, r2, #28
 800b1ac:	bf44      	itt	mi
 800b1ae:	232b      	movmi	r3, #43	@ 0x2b
 800b1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ba:	d015      	beq.n	800b1e8 <_vfiprintf_r+0x120>
 800b1bc:	9a07      	ldr	r2, [sp, #28]
 800b1be:	4654      	mov	r4, sl
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f04f 0c0a 	mov.w	ip, #10
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1cc:	3b30      	subs	r3, #48	@ 0x30
 800b1ce:	2b09      	cmp	r3, #9
 800b1d0:	d94b      	bls.n	800b26a <_vfiprintf_r+0x1a2>
 800b1d2:	b1b0      	cbz	r0, 800b202 <_vfiprintf_r+0x13a>
 800b1d4:	9207      	str	r2, [sp, #28]
 800b1d6:	e014      	b.n	800b202 <_vfiprintf_r+0x13a>
 800b1d8:	eba0 0308 	sub.w	r3, r0, r8
 800b1dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	46a2      	mov	sl, r4
 800b1e6:	e7d2      	b.n	800b18e <_vfiprintf_r+0xc6>
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	1d19      	adds	r1, r3, #4
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	9103      	str	r1, [sp, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bfbb      	ittet	lt
 800b1f4:	425b      	neglt	r3, r3
 800b1f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b1fa:	9307      	strge	r3, [sp, #28]
 800b1fc:	9307      	strlt	r3, [sp, #28]
 800b1fe:	bfb8      	it	lt
 800b200:	9204      	strlt	r2, [sp, #16]
 800b202:	7823      	ldrb	r3, [r4, #0]
 800b204:	2b2e      	cmp	r3, #46	@ 0x2e
 800b206:	d10a      	bne.n	800b21e <_vfiprintf_r+0x156>
 800b208:	7863      	ldrb	r3, [r4, #1]
 800b20a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b20c:	d132      	bne.n	800b274 <_vfiprintf_r+0x1ac>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	1d1a      	adds	r2, r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	9203      	str	r2, [sp, #12]
 800b216:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b21a:	3402      	adds	r4, #2
 800b21c:	9305      	str	r3, [sp, #20]
 800b21e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2f4 <_vfiprintf_r+0x22c>
 800b222:	7821      	ldrb	r1, [r4, #0]
 800b224:	2203      	movs	r2, #3
 800b226:	4650      	mov	r0, sl
 800b228:	f7f4 fffa 	bl	8000220 <memchr>
 800b22c:	b138      	cbz	r0, 800b23e <_vfiprintf_r+0x176>
 800b22e:	9b04      	ldr	r3, [sp, #16]
 800b230:	eba0 000a 	sub.w	r0, r0, sl
 800b234:	2240      	movs	r2, #64	@ 0x40
 800b236:	4082      	lsls	r2, r0
 800b238:	4313      	orrs	r3, r2
 800b23a:	3401      	adds	r4, #1
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b242:	4829      	ldr	r0, [pc, #164]	@ (800b2e8 <_vfiprintf_r+0x220>)
 800b244:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b248:	2206      	movs	r2, #6
 800b24a:	f7f4 ffe9 	bl	8000220 <memchr>
 800b24e:	2800      	cmp	r0, #0
 800b250:	d03f      	beq.n	800b2d2 <_vfiprintf_r+0x20a>
 800b252:	4b26      	ldr	r3, [pc, #152]	@ (800b2ec <_vfiprintf_r+0x224>)
 800b254:	bb1b      	cbnz	r3, 800b29e <_vfiprintf_r+0x1d6>
 800b256:	9b03      	ldr	r3, [sp, #12]
 800b258:	3307      	adds	r3, #7
 800b25a:	f023 0307 	bic.w	r3, r3, #7
 800b25e:	3308      	adds	r3, #8
 800b260:	9303      	str	r3, [sp, #12]
 800b262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b264:	443b      	add	r3, r7
 800b266:	9309      	str	r3, [sp, #36]	@ 0x24
 800b268:	e76a      	b.n	800b140 <_vfiprintf_r+0x78>
 800b26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b26e:	460c      	mov	r4, r1
 800b270:	2001      	movs	r0, #1
 800b272:	e7a8      	b.n	800b1c6 <_vfiprintf_r+0xfe>
 800b274:	2300      	movs	r3, #0
 800b276:	3401      	adds	r4, #1
 800b278:	9305      	str	r3, [sp, #20]
 800b27a:	4619      	mov	r1, r3
 800b27c:	f04f 0c0a 	mov.w	ip, #10
 800b280:	4620      	mov	r0, r4
 800b282:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b286:	3a30      	subs	r2, #48	@ 0x30
 800b288:	2a09      	cmp	r2, #9
 800b28a:	d903      	bls.n	800b294 <_vfiprintf_r+0x1cc>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0c6      	beq.n	800b21e <_vfiprintf_r+0x156>
 800b290:	9105      	str	r1, [sp, #20]
 800b292:	e7c4      	b.n	800b21e <_vfiprintf_r+0x156>
 800b294:	fb0c 2101 	mla	r1, ip, r1, r2
 800b298:	4604      	mov	r4, r0
 800b29a:	2301      	movs	r3, #1
 800b29c:	e7f0      	b.n	800b280 <_vfiprintf_r+0x1b8>
 800b29e:	ab03      	add	r3, sp, #12
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	4b12      	ldr	r3, [pc, #72]	@ (800b2f0 <_vfiprintf_r+0x228>)
 800b2a6:	a904      	add	r1, sp, #16
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7fc fab9 	bl	8007820 <_printf_float>
 800b2ae:	4607      	mov	r7, r0
 800b2b0:	1c78      	adds	r0, r7, #1
 800b2b2:	d1d6      	bne.n	800b262 <_vfiprintf_r+0x19a>
 800b2b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2b6:	07d9      	lsls	r1, r3, #31
 800b2b8:	d405      	bmi.n	800b2c6 <_vfiprintf_r+0x1fe>
 800b2ba:	89ab      	ldrh	r3, [r5, #12]
 800b2bc:	059a      	lsls	r2, r3, #22
 800b2be:	d402      	bmi.n	800b2c6 <_vfiprintf_r+0x1fe>
 800b2c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2c2:	f7fd fae1 	bl	8008888 <__retarget_lock_release_recursive>
 800b2c6:	89ab      	ldrh	r3, [r5, #12]
 800b2c8:	065b      	lsls	r3, r3, #25
 800b2ca:	f53f af1f 	bmi.w	800b10c <_vfiprintf_r+0x44>
 800b2ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2d0:	e71e      	b.n	800b110 <_vfiprintf_r+0x48>
 800b2d2:	ab03      	add	r3, sp, #12
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	462a      	mov	r2, r5
 800b2d8:	4b05      	ldr	r3, [pc, #20]	@ (800b2f0 <_vfiprintf_r+0x228>)
 800b2da:	a904      	add	r1, sp, #16
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7fc fd37 	bl	8007d50 <_printf_i>
 800b2e2:	e7e4      	b.n	800b2ae <_vfiprintf_r+0x1e6>
 800b2e4:	0800c055 	.word	0x0800c055
 800b2e8:	0800c05f 	.word	0x0800c05f
 800b2ec:	08007821 	.word	0x08007821
 800b2f0:	0800b0a3 	.word	0x0800b0a3
 800b2f4:	0800c05b 	.word	0x0800c05b

0800b2f8 <__sflush_r>:
 800b2f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b300:	0716      	lsls	r6, r2, #28
 800b302:	4605      	mov	r5, r0
 800b304:	460c      	mov	r4, r1
 800b306:	d454      	bmi.n	800b3b2 <__sflush_r+0xba>
 800b308:	684b      	ldr	r3, [r1, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dc02      	bgt.n	800b314 <__sflush_r+0x1c>
 800b30e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b310:	2b00      	cmp	r3, #0
 800b312:	dd48      	ble.n	800b3a6 <__sflush_r+0xae>
 800b314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b316:	2e00      	cmp	r6, #0
 800b318:	d045      	beq.n	800b3a6 <__sflush_r+0xae>
 800b31a:	2300      	movs	r3, #0
 800b31c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b320:	682f      	ldr	r7, [r5, #0]
 800b322:	6a21      	ldr	r1, [r4, #32]
 800b324:	602b      	str	r3, [r5, #0]
 800b326:	d030      	beq.n	800b38a <__sflush_r+0x92>
 800b328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	0759      	lsls	r1, r3, #29
 800b32e:	d505      	bpl.n	800b33c <__sflush_r+0x44>
 800b330:	6863      	ldr	r3, [r4, #4]
 800b332:	1ad2      	subs	r2, r2, r3
 800b334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b336:	b10b      	cbz	r3, 800b33c <__sflush_r+0x44>
 800b338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b33a:	1ad2      	subs	r2, r2, r3
 800b33c:	2300      	movs	r3, #0
 800b33e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b340:	6a21      	ldr	r1, [r4, #32]
 800b342:	4628      	mov	r0, r5
 800b344:	47b0      	blx	r6
 800b346:	1c43      	adds	r3, r0, #1
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	d106      	bne.n	800b35a <__sflush_r+0x62>
 800b34c:	6829      	ldr	r1, [r5, #0]
 800b34e:	291d      	cmp	r1, #29
 800b350:	d82b      	bhi.n	800b3aa <__sflush_r+0xb2>
 800b352:	4a2a      	ldr	r2, [pc, #168]	@ (800b3fc <__sflush_r+0x104>)
 800b354:	40ca      	lsrs	r2, r1
 800b356:	07d6      	lsls	r6, r2, #31
 800b358:	d527      	bpl.n	800b3aa <__sflush_r+0xb2>
 800b35a:	2200      	movs	r2, #0
 800b35c:	6062      	str	r2, [r4, #4]
 800b35e:	04d9      	lsls	r1, r3, #19
 800b360:	6922      	ldr	r2, [r4, #16]
 800b362:	6022      	str	r2, [r4, #0]
 800b364:	d504      	bpl.n	800b370 <__sflush_r+0x78>
 800b366:	1c42      	adds	r2, r0, #1
 800b368:	d101      	bne.n	800b36e <__sflush_r+0x76>
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	b903      	cbnz	r3, 800b370 <__sflush_r+0x78>
 800b36e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b372:	602f      	str	r7, [r5, #0]
 800b374:	b1b9      	cbz	r1, 800b3a6 <__sflush_r+0xae>
 800b376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b37a:	4299      	cmp	r1, r3
 800b37c:	d002      	beq.n	800b384 <__sflush_r+0x8c>
 800b37e:	4628      	mov	r0, r5
 800b380:	f7fe f8f2 	bl	8009568 <_free_r>
 800b384:	2300      	movs	r3, #0
 800b386:	6363      	str	r3, [r4, #52]	@ 0x34
 800b388:	e00d      	b.n	800b3a6 <__sflush_r+0xae>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b0      	blx	r6
 800b390:	4602      	mov	r2, r0
 800b392:	1c50      	adds	r0, r2, #1
 800b394:	d1c9      	bne.n	800b32a <__sflush_r+0x32>
 800b396:	682b      	ldr	r3, [r5, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d0c6      	beq.n	800b32a <__sflush_r+0x32>
 800b39c:	2b1d      	cmp	r3, #29
 800b39e:	d001      	beq.n	800b3a4 <__sflush_r+0xac>
 800b3a0:	2b16      	cmp	r3, #22
 800b3a2:	d11e      	bne.n	800b3e2 <__sflush_r+0xea>
 800b3a4:	602f      	str	r7, [r5, #0]
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	e022      	b.n	800b3f0 <__sflush_r+0xf8>
 800b3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ae:	b21b      	sxth	r3, r3
 800b3b0:	e01b      	b.n	800b3ea <__sflush_r+0xf2>
 800b3b2:	690f      	ldr	r7, [r1, #16]
 800b3b4:	2f00      	cmp	r7, #0
 800b3b6:	d0f6      	beq.n	800b3a6 <__sflush_r+0xae>
 800b3b8:	0793      	lsls	r3, r2, #30
 800b3ba:	680e      	ldr	r6, [r1, #0]
 800b3bc:	bf08      	it	eq
 800b3be:	694b      	ldreq	r3, [r1, #20]
 800b3c0:	600f      	str	r7, [r1, #0]
 800b3c2:	bf18      	it	ne
 800b3c4:	2300      	movne	r3, #0
 800b3c6:	eba6 0807 	sub.w	r8, r6, r7
 800b3ca:	608b      	str	r3, [r1, #8]
 800b3cc:	f1b8 0f00 	cmp.w	r8, #0
 800b3d0:	dde9      	ble.n	800b3a6 <__sflush_r+0xae>
 800b3d2:	6a21      	ldr	r1, [r4, #32]
 800b3d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3d6:	4643      	mov	r3, r8
 800b3d8:	463a      	mov	r2, r7
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b0      	blx	r6
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	dc08      	bgt.n	800b3f4 <__sflush_r+0xfc>
 800b3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ea:	81a3      	strh	r3, [r4, #12]
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f4:	4407      	add	r7, r0
 800b3f6:	eba8 0800 	sub.w	r8, r8, r0
 800b3fa:	e7e7      	b.n	800b3cc <__sflush_r+0xd4>
 800b3fc:	20400001 	.word	0x20400001

0800b400 <_fflush_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	690b      	ldr	r3, [r1, #16]
 800b404:	4605      	mov	r5, r0
 800b406:	460c      	mov	r4, r1
 800b408:	b913      	cbnz	r3, 800b410 <_fflush_r+0x10>
 800b40a:	2500      	movs	r5, #0
 800b40c:	4628      	mov	r0, r5
 800b40e:	bd38      	pop	{r3, r4, r5, pc}
 800b410:	b118      	cbz	r0, 800b41a <_fflush_r+0x1a>
 800b412:	6a03      	ldr	r3, [r0, #32]
 800b414:	b90b      	cbnz	r3, 800b41a <_fflush_r+0x1a>
 800b416:	f7fd f853 	bl	80084c0 <__sinit>
 800b41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d0f3      	beq.n	800b40a <_fflush_r+0xa>
 800b422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b424:	07d0      	lsls	r0, r2, #31
 800b426:	d404      	bmi.n	800b432 <_fflush_r+0x32>
 800b428:	0599      	lsls	r1, r3, #22
 800b42a:	d402      	bmi.n	800b432 <_fflush_r+0x32>
 800b42c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b42e:	f7fd fa2a 	bl	8008886 <__retarget_lock_acquire_recursive>
 800b432:	4628      	mov	r0, r5
 800b434:	4621      	mov	r1, r4
 800b436:	f7ff ff5f 	bl	800b2f8 <__sflush_r>
 800b43a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b43c:	07da      	lsls	r2, r3, #31
 800b43e:	4605      	mov	r5, r0
 800b440:	d4e4      	bmi.n	800b40c <_fflush_r+0xc>
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	059b      	lsls	r3, r3, #22
 800b446:	d4e1      	bmi.n	800b40c <_fflush_r+0xc>
 800b448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b44a:	f7fd fa1d 	bl	8008888 <__retarget_lock_release_recursive>
 800b44e:	e7dd      	b.n	800b40c <_fflush_r+0xc>

0800b450 <__swhatbuf_r>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	460c      	mov	r4, r1
 800b454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b458:	2900      	cmp	r1, #0
 800b45a:	b096      	sub	sp, #88	@ 0x58
 800b45c:	4615      	mov	r5, r2
 800b45e:	461e      	mov	r6, r3
 800b460:	da0d      	bge.n	800b47e <__swhatbuf_r+0x2e>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b468:	f04f 0100 	mov.w	r1, #0
 800b46c:	bf14      	ite	ne
 800b46e:	2340      	movne	r3, #64	@ 0x40
 800b470:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b474:	2000      	movs	r0, #0
 800b476:	6031      	str	r1, [r6, #0]
 800b478:	602b      	str	r3, [r5, #0]
 800b47a:	b016      	add	sp, #88	@ 0x58
 800b47c:	bd70      	pop	{r4, r5, r6, pc}
 800b47e:	466a      	mov	r2, sp
 800b480:	f000 f874 	bl	800b56c <_fstat_r>
 800b484:	2800      	cmp	r0, #0
 800b486:	dbec      	blt.n	800b462 <__swhatbuf_r+0x12>
 800b488:	9901      	ldr	r1, [sp, #4]
 800b48a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b48e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b492:	4259      	negs	r1, r3
 800b494:	4159      	adcs	r1, r3
 800b496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b49a:	e7eb      	b.n	800b474 <__swhatbuf_r+0x24>

0800b49c <__smakebuf_r>:
 800b49c:	898b      	ldrh	r3, [r1, #12]
 800b49e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a0:	079d      	lsls	r5, r3, #30
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	d507      	bpl.n	800b4b8 <__smakebuf_r+0x1c>
 800b4a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	6123      	str	r3, [r4, #16]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	6163      	str	r3, [r4, #20]
 800b4b4:	b003      	add	sp, #12
 800b4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b8:	ab01      	add	r3, sp, #4
 800b4ba:	466a      	mov	r2, sp
 800b4bc:	f7ff ffc8 	bl	800b450 <__swhatbuf_r>
 800b4c0:	9f00      	ldr	r7, [sp, #0]
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7fe f8c2 	bl	8009650 <_malloc_r>
 800b4cc:	b948      	cbnz	r0, 800b4e2 <__smakebuf_r+0x46>
 800b4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d2:	059a      	lsls	r2, r3, #22
 800b4d4:	d4ee      	bmi.n	800b4b4 <__smakebuf_r+0x18>
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	f043 0302 	orr.w	r3, r3, #2
 800b4de:	81a3      	strh	r3, [r4, #12]
 800b4e0:	e7e2      	b.n	800b4a8 <__smakebuf_r+0xc>
 800b4e2:	89a3      	ldrh	r3, [r4, #12]
 800b4e4:	6020      	str	r0, [r4, #0]
 800b4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ea:	81a3      	strh	r3, [r4, #12]
 800b4ec:	9b01      	ldr	r3, [sp, #4]
 800b4ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4f2:	b15b      	cbz	r3, 800b50c <__smakebuf_r+0x70>
 800b4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f000 f849 	bl	800b590 <_isatty_r>
 800b4fe:	b128      	cbz	r0, 800b50c <__smakebuf_r+0x70>
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	f023 0303 	bic.w	r3, r3, #3
 800b506:	f043 0301 	orr.w	r3, r3, #1
 800b50a:	81a3      	strh	r3, [r4, #12]
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	431d      	orrs	r5, r3
 800b510:	81a5      	strh	r5, [r4, #12]
 800b512:	e7cf      	b.n	800b4b4 <__smakebuf_r+0x18>

0800b514 <memmove>:
 800b514:	4288      	cmp	r0, r1
 800b516:	b510      	push	{r4, lr}
 800b518:	eb01 0402 	add.w	r4, r1, r2
 800b51c:	d902      	bls.n	800b524 <memmove+0x10>
 800b51e:	4284      	cmp	r4, r0
 800b520:	4623      	mov	r3, r4
 800b522:	d807      	bhi.n	800b534 <memmove+0x20>
 800b524:	1e43      	subs	r3, r0, #1
 800b526:	42a1      	cmp	r1, r4
 800b528:	d008      	beq.n	800b53c <memmove+0x28>
 800b52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b532:	e7f8      	b.n	800b526 <memmove+0x12>
 800b534:	4402      	add	r2, r0
 800b536:	4601      	mov	r1, r0
 800b538:	428a      	cmp	r2, r1
 800b53a:	d100      	bne.n	800b53e <memmove+0x2a>
 800b53c:	bd10      	pop	{r4, pc}
 800b53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b546:	e7f7      	b.n	800b538 <memmove+0x24>

0800b548 <strncmp>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	b16a      	cbz	r2, 800b568 <strncmp+0x20>
 800b54c:	3901      	subs	r1, #1
 800b54e:	1884      	adds	r4, r0, r2
 800b550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b554:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b558:	429a      	cmp	r2, r3
 800b55a:	d103      	bne.n	800b564 <strncmp+0x1c>
 800b55c:	42a0      	cmp	r0, r4
 800b55e:	d001      	beq.n	800b564 <strncmp+0x1c>
 800b560:	2a00      	cmp	r2, #0
 800b562:	d1f5      	bne.n	800b550 <strncmp+0x8>
 800b564:	1ad0      	subs	r0, r2, r3
 800b566:	bd10      	pop	{r4, pc}
 800b568:	4610      	mov	r0, r2
 800b56a:	e7fc      	b.n	800b566 <strncmp+0x1e>

0800b56c <_fstat_r>:
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	4d07      	ldr	r5, [pc, #28]	@ (800b58c <_fstat_r+0x20>)
 800b570:	2300      	movs	r3, #0
 800b572:	4604      	mov	r4, r0
 800b574:	4608      	mov	r0, r1
 800b576:	4611      	mov	r1, r2
 800b578:	602b      	str	r3, [r5, #0]
 800b57a:	f7f7 fcd8 	bl	8002f2e <_fstat>
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	d102      	bne.n	800b588 <_fstat_r+0x1c>
 800b582:	682b      	ldr	r3, [r5, #0]
 800b584:	b103      	cbz	r3, 800b588 <_fstat_r+0x1c>
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	bd38      	pop	{r3, r4, r5, pc}
 800b58a:	bf00      	nop
 800b58c:	20000778 	.word	0x20000778

0800b590 <_isatty_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d06      	ldr	r5, [pc, #24]	@ (800b5ac <_isatty_r+0x1c>)
 800b594:	2300      	movs	r3, #0
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	f7f7 fcd7 	bl	8002f4e <_isatty>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_isatty_r+0x1a>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_isatty_r+0x1a>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	20000778 	.word	0x20000778

0800b5b0 <_sbrk_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	4d06      	ldr	r5, [pc, #24]	@ (800b5cc <_sbrk_r+0x1c>)
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	602b      	str	r3, [r5, #0]
 800b5bc:	f7f7 fce0 	bl	8002f80 <_sbrk>
 800b5c0:	1c43      	adds	r3, r0, #1
 800b5c2:	d102      	bne.n	800b5ca <_sbrk_r+0x1a>
 800b5c4:	682b      	ldr	r3, [r5, #0]
 800b5c6:	b103      	cbz	r3, 800b5ca <_sbrk_r+0x1a>
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	bd38      	pop	{r3, r4, r5, pc}
 800b5cc:	20000778 	.word	0x20000778

0800b5d0 <nan>:
 800b5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b5d8 <nan+0x8>
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	7ff80000 	.word	0x7ff80000

0800b5e0 <__assert_func>:
 800b5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5e2:	4614      	mov	r4, r2
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	4b09      	ldr	r3, [pc, #36]	@ (800b60c <__assert_func+0x2c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	68d8      	ldr	r0, [r3, #12]
 800b5ee:	b14c      	cbz	r4, 800b604 <__assert_func+0x24>
 800b5f0:	4b07      	ldr	r3, [pc, #28]	@ (800b610 <__assert_func+0x30>)
 800b5f2:	9100      	str	r1, [sp, #0]
 800b5f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5f8:	4906      	ldr	r1, [pc, #24]	@ (800b614 <__assert_func+0x34>)
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	f000 fba8 	bl	800bd50 <fiprintf>
 800b600:	f000 fbb8 	bl	800bd74 <abort>
 800b604:	4b04      	ldr	r3, [pc, #16]	@ (800b618 <__assert_func+0x38>)
 800b606:	461c      	mov	r4, r3
 800b608:	e7f3      	b.n	800b5f2 <__assert_func+0x12>
 800b60a:	bf00      	nop
 800b60c:	20000030 	.word	0x20000030
 800b610:	0800c06e 	.word	0x0800c06e
 800b614:	0800c07b 	.word	0x0800c07b
 800b618:	0800c0a9 	.word	0x0800c0a9

0800b61c <_calloc_r>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	fba1 5402 	umull	r5, r4, r1, r2
 800b622:	b934      	cbnz	r4, 800b632 <_calloc_r+0x16>
 800b624:	4629      	mov	r1, r5
 800b626:	f7fe f813 	bl	8009650 <_malloc_r>
 800b62a:	4606      	mov	r6, r0
 800b62c:	b928      	cbnz	r0, 800b63a <_calloc_r+0x1e>
 800b62e:	4630      	mov	r0, r6
 800b630:	bd70      	pop	{r4, r5, r6, pc}
 800b632:	220c      	movs	r2, #12
 800b634:	6002      	str	r2, [r0, #0]
 800b636:	2600      	movs	r6, #0
 800b638:	e7f9      	b.n	800b62e <_calloc_r+0x12>
 800b63a:	462a      	mov	r2, r5
 800b63c:	4621      	mov	r1, r4
 800b63e:	f7fd f8a5 	bl	800878c <memset>
 800b642:	e7f4      	b.n	800b62e <_calloc_r+0x12>

0800b644 <rshift>:
 800b644:	6903      	ldr	r3, [r0, #16]
 800b646:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b64a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b64e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b652:	f100 0414 	add.w	r4, r0, #20
 800b656:	dd45      	ble.n	800b6e4 <rshift+0xa0>
 800b658:	f011 011f 	ands.w	r1, r1, #31
 800b65c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b664:	d10c      	bne.n	800b680 <rshift+0x3c>
 800b666:	f100 0710 	add.w	r7, r0, #16
 800b66a:	4629      	mov	r1, r5
 800b66c:	42b1      	cmp	r1, r6
 800b66e:	d334      	bcc.n	800b6da <rshift+0x96>
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	1eea      	subs	r2, r5, #3
 800b676:	4296      	cmp	r6, r2
 800b678:	bf38      	it	cc
 800b67a:	2300      	movcc	r3, #0
 800b67c:	4423      	add	r3, r4
 800b67e:	e015      	b.n	800b6ac <rshift+0x68>
 800b680:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b684:	f1c1 0820 	rsb	r8, r1, #32
 800b688:	40cf      	lsrs	r7, r1
 800b68a:	f105 0e04 	add.w	lr, r5, #4
 800b68e:	46a1      	mov	r9, r4
 800b690:	4576      	cmp	r6, lr
 800b692:	46f4      	mov	ip, lr
 800b694:	d815      	bhi.n	800b6c2 <rshift+0x7e>
 800b696:	1a9a      	subs	r2, r3, r2
 800b698:	0092      	lsls	r2, r2, #2
 800b69a:	3a04      	subs	r2, #4
 800b69c:	3501      	adds	r5, #1
 800b69e:	42ae      	cmp	r6, r5
 800b6a0:	bf38      	it	cc
 800b6a2:	2200      	movcc	r2, #0
 800b6a4:	18a3      	adds	r3, r4, r2
 800b6a6:	50a7      	str	r7, [r4, r2]
 800b6a8:	b107      	cbz	r7, 800b6ac <rshift+0x68>
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	1b1a      	subs	r2, r3, r4
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b6b4:	bf08      	it	eq
 800b6b6:	2300      	moveq	r3, #0
 800b6b8:	6102      	str	r2, [r0, #16]
 800b6ba:	bf08      	it	eq
 800b6bc:	6143      	streq	r3, [r0, #20]
 800b6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c2:	f8dc c000 	ldr.w	ip, [ip]
 800b6c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6ca:	ea4c 0707 	orr.w	r7, ip, r7
 800b6ce:	f849 7b04 	str.w	r7, [r9], #4
 800b6d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6d6:	40cf      	lsrs	r7, r1
 800b6d8:	e7da      	b.n	800b690 <rshift+0x4c>
 800b6da:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6de:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6e2:	e7c3      	b.n	800b66c <rshift+0x28>
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	e7e1      	b.n	800b6ac <rshift+0x68>

0800b6e8 <__hexdig_fun>:
 800b6e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b6ec:	2b09      	cmp	r3, #9
 800b6ee:	d802      	bhi.n	800b6f6 <__hexdig_fun+0xe>
 800b6f0:	3820      	subs	r0, #32
 800b6f2:	b2c0      	uxtb	r0, r0
 800b6f4:	4770      	bx	lr
 800b6f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	d801      	bhi.n	800b702 <__hexdig_fun+0x1a>
 800b6fe:	3847      	subs	r0, #71	@ 0x47
 800b700:	e7f7      	b.n	800b6f2 <__hexdig_fun+0xa>
 800b702:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b706:	2b05      	cmp	r3, #5
 800b708:	d801      	bhi.n	800b70e <__hexdig_fun+0x26>
 800b70a:	3827      	subs	r0, #39	@ 0x27
 800b70c:	e7f1      	b.n	800b6f2 <__hexdig_fun+0xa>
 800b70e:	2000      	movs	r0, #0
 800b710:	4770      	bx	lr
	...

0800b714 <__gethex>:
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	b085      	sub	sp, #20
 800b71a:	468a      	mov	sl, r1
 800b71c:	9302      	str	r3, [sp, #8]
 800b71e:	680b      	ldr	r3, [r1, #0]
 800b720:	9001      	str	r0, [sp, #4]
 800b722:	4690      	mov	r8, r2
 800b724:	1c9c      	adds	r4, r3, #2
 800b726:	46a1      	mov	r9, r4
 800b728:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b72c:	2830      	cmp	r0, #48	@ 0x30
 800b72e:	d0fa      	beq.n	800b726 <__gethex+0x12>
 800b730:	eba9 0303 	sub.w	r3, r9, r3
 800b734:	f1a3 0b02 	sub.w	fp, r3, #2
 800b738:	f7ff ffd6 	bl	800b6e8 <__hexdig_fun>
 800b73c:	4605      	mov	r5, r0
 800b73e:	2800      	cmp	r0, #0
 800b740:	d168      	bne.n	800b814 <__gethex+0x100>
 800b742:	49a0      	ldr	r1, [pc, #640]	@ (800b9c4 <__gethex+0x2b0>)
 800b744:	2201      	movs	r2, #1
 800b746:	4648      	mov	r0, r9
 800b748:	f7ff fefe 	bl	800b548 <strncmp>
 800b74c:	4607      	mov	r7, r0
 800b74e:	2800      	cmp	r0, #0
 800b750:	d167      	bne.n	800b822 <__gethex+0x10e>
 800b752:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b756:	4626      	mov	r6, r4
 800b758:	f7ff ffc6 	bl	800b6e8 <__hexdig_fun>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d062      	beq.n	800b826 <__gethex+0x112>
 800b760:	4623      	mov	r3, r4
 800b762:	7818      	ldrb	r0, [r3, #0]
 800b764:	2830      	cmp	r0, #48	@ 0x30
 800b766:	4699      	mov	r9, r3
 800b768:	f103 0301 	add.w	r3, r3, #1
 800b76c:	d0f9      	beq.n	800b762 <__gethex+0x4e>
 800b76e:	f7ff ffbb 	bl	800b6e8 <__hexdig_fun>
 800b772:	fab0 f580 	clz	r5, r0
 800b776:	096d      	lsrs	r5, r5, #5
 800b778:	f04f 0b01 	mov.w	fp, #1
 800b77c:	464a      	mov	r2, r9
 800b77e:	4616      	mov	r6, r2
 800b780:	3201      	adds	r2, #1
 800b782:	7830      	ldrb	r0, [r6, #0]
 800b784:	f7ff ffb0 	bl	800b6e8 <__hexdig_fun>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d1f8      	bne.n	800b77e <__gethex+0x6a>
 800b78c:	498d      	ldr	r1, [pc, #564]	@ (800b9c4 <__gethex+0x2b0>)
 800b78e:	2201      	movs	r2, #1
 800b790:	4630      	mov	r0, r6
 800b792:	f7ff fed9 	bl	800b548 <strncmp>
 800b796:	2800      	cmp	r0, #0
 800b798:	d13f      	bne.n	800b81a <__gethex+0x106>
 800b79a:	b944      	cbnz	r4, 800b7ae <__gethex+0x9a>
 800b79c:	1c74      	adds	r4, r6, #1
 800b79e:	4622      	mov	r2, r4
 800b7a0:	4616      	mov	r6, r2
 800b7a2:	3201      	adds	r2, #1
 800b7a4:	7830      	ldrb	r0, [r6, #0]
 800b7a6:	f7ff ff9f 	bl	800b6e8 <__hexdig_fun>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d1f8      	bne.n	800b7a0 <__gethex+0x8c>
 800b7ae:	1ba4      	subs	r4, r4, r6
 800b7b0:	00a7      	lsls	r7, r4, #2
 800b7b2:	7833      	ldrb	r3, [r6, #0]
 800b7b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b7b8:	2b50      	cmp	r3, #80	@ 0x50
 800b7ba:	d13e      	bne.n	800b83a <__gethex+0x126>
 800b7bc:	7873      	ldrb	r3, [r6, #1]
 800b7be:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7c0:	d033      	beq.n	800b82a <__gethex+0x116>
 800b7c2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b7c4:	d034      	beq.n	800b830 <__gethex+0x11c>
 800b7c6:	1c71      	adds	r1, r6, #1
 800b7c8:	2400      	movs	r4, #0
 800b7ca:	7808      	ldrb	r0, [r1, #0]
 800b7cc:	f7ff ff8c 	bl	800b6e8 <__hexdig_fun>
 800b7d0:	1e43      	subs	r3, r0, #1
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b18      	cmp	r3, #24
 800b7d6:	d830      	bhi.n	800b83a <__gethex+0x126>
 800b7d8:	f1a0 0210 	sub.w	r2, r0, #16
 800b7dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7e0:	f7ff ff82 	bl	800b6e8 <__hexdig_fun>
 800b7e4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b7e8:	fa5f fc8c 	uxtb.w	ip, ip
 800b7ec:	f1bc 0f18 	cmp.w	ip, #24
 800b7f0:	f04f 030a 	mov.w	r3, #10
 800b7f4:	d91e      	bls.n	800b834 <__gethex+0x120>
 800b7f6:	b104      	cbz	r4, 800b7fa <__gethex+0xe6>
 800b7f8:	4252      	negs	r2, r2
 800b7fa:	4417      	add	r7, r2
 800b7fc:	f8ca 1000 	str.w	r1, [sl]
 800b800:	b1ed      	cbz	r5, 800b83e <__gethex+0x12a>
 800b802:	f1bb 0f00 	cmp.w	fp, #0
 800b806:	bf0c      	ite	eq
 800b808:	2506      	moveq	r5, #6
 800b80a:	2500      	movne	r5, #0
 800b80c:	4628      	mov	r0, r5
 800b80e:	b005      	add	sp, #20
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	2500      	movs	r5, #0
 800b816:	462c      	mov	r4, r5
 800b818:	e7b0      	b.n	800b77c <__gethex+0x68>
 800b81a:	2c00      	cmp	r4, #0
 800b81c:	d1c7      	bne.n	800b7ae <__gethex+0x9a>
 800b81e:	4627      	mov	r7, r4
 800b820:	e7c7      	b.n	800b7b2 <__gethex+0x9e>
 800b822:	464e      	mov	r6, r9
 800b824:	462f      	mov	r7, r5
 800b826:	2501      	movs	r5, #1
 800b828:	e7c3      	b.n	800b7b2 <__gethex+0x9e>
 800b82a:	2400      	movs	r4, #0
 800b82c:	1cb1      	adds	r1, r6, #2
 800b82e:	e7cc      	b.n	800b7ca <__gethex+0xb6>
 800b830:	2401      	movs	r4, #1
 800b832:	e7fb      	b.n	800b82c <__gethex+0x118>
 800b834:	fb03 0002 	mla	r0, r3, r2, r0
 800b838:	e7ce      	b.n	800b7d8 <__gethex+0xc4>
 800b83a:	4631      	mov	r1, r6
 800b83c:	e7de      	b.n	800b7fc <__gethex+0xe8>
 800b83e:	eba6 0309 	sub.w	r3, r6, r9
 800b842:	3b01      	subs	r3, #1
 800b844:	4629      	mov	r1, r5
 800b846:	2b07      	cmp	r3, #7
 800b848:	dc0a      	bgt.n	800b860 <__gethex+0x14c>
 800b84a:	9801      	ldr	r0, [sp, #4]
 800b84c:	f7fd ff8c 	bl	8009768 <_Balloc>
 800b850:	4604      	mov	r4, r0
 800b852:	b940      	cbnz	r0, 800b866 <__gethex+0x152>
 800b854:	4b5c      	ldr	r3, [pc, #368]	@ (800b9c8 <__gethex+0x2b4>)
 800b856:	4602      	mov	r2, r0
 800b858:	21e4      	movs	r1, #228	@ 0xe4
 800b85a:	485c      	ldr	r0, [pc, #368]	@ (800b9cc <__gethex+0x2b8>)
 800b85c:	f7ff fec0 	bl	800b5e0 <__assert_func>
 800b860:	3101      	adds	r1, #1
 800b862:	105b      	asrs	r3, r3, #1
 800b864:	e7ef      	b.n	800b846 <__gethex+0x132>
 800b866:	f100 0a14 	add.w	sl, r0, #20
 800b86a:	2300      	movs	r3, #0
 800b86c:	4655      	mov	r5, sl
 800b86e:	469b      	mov	fp, r3
 800b870:	45b1      	cmp	r9, r6
 800b872:	d337      	bcc.n	800b8e4 <__gethex+0x1d0>
 800b874:	f845 bb04 	str.w	fp, [r5], #4
 800b878:	eba5 050a 	sub.w	r5, r5, sl
 800b87c:	10ad      	asrs	r5, r5, #2
 800b87e:	6125      	str	r5, [r4, #16]
 800b880:	4658      	mov	r0, fp
 800b882:	f7fe f863 	bl	800994c <__hi0bits>
 800b886:	016d      	lsls	r5, r5, #5
 800b888:	f8d8 6000 	ldr.w	r6, [r8]
 800b88c:	1a2d      	subs	r5, r5, r0
 800b88e:	42b5      	cmp	r5, r6
 800b890:	dd54      	ble.n	800b93c <__gethex+0x228>
 800b892:	1bad      	subs	r5, r5, r6
 800b894:	4629      	mov	r1, r5
 800b896:	4620      	mov	r0, r4
 800b898:	f7fe fbef 	bl	800a07a <__any_on>
 800b89c:	4681      	mov	r9, r0
 800b89e:	b178      	cbz	r0, 800b8c0 <__gethex+0x1ac>
 800b8a0:	1e6b      	subs	r3, r5, #1
 800b8a2:	1159      	asrs	r1, r3, #5
 800b8a4:	f003 021f 	and.w	r2, r3, #31
 800b8a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b8ac:	f04f 0901 	mov.w	r9, #1
 800b8b0:	fa09 f202 	lsl.w	r2, r9, r2
 800b8b4:	420a      	tst	r2, r1
 800b8b6:	d003      	beq.n	800b8c0 <__gethex+0x1ac>
 800b8b8:	454b      	cmp	r3, r9
 800b8ba:	dc36      	bgt.n	800b92a <__gethex+0x216>
 800b8bc:	f04f 0902 	mov.w	r9, #2
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f7ff febe 	bl	800b644 <rshift>
 800b8c8:	442f      	add	r7, r5
 800b8ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ce:	42bb      	cmp	r3, r7
 800b8d0:	da42      	bge.n	800b958 <__gethex+0x244>
 800b8d2:	9801      	ldr	r0, [sp, #4]
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f7fd ff87 	bl	80097e8 <_Bfree>
 800b8da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8dc:	2300      	movs	r3, #0
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	25a3      	movs	r5, #163	@ 0xa3
 800b8e2:	e793      	b.n	800b80c <__gethex+0xf8>
 800b8e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b8e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b8ea:	d012      	beq.n	800b912 <__gethex+0x1fe>
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d104      	bne.n	800b8fa <__gethex+0x1e6>
 800b8f0:	f845 bb04 	str.w	fp, [r5], #4
 800b8f4:	f04f 0b00 	mov.w	fp, #0
 800b8f8:	465b      	mov	r3, fp
 800b8fa:	7830      	ldrb	r0, [r6, #0]
 800b8fc:	9303      	str	r3, [sp, #12]
 800b8fe:	f7ff fef3 	bl	800b6e8 <__hexdig_fun>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	f000 000f 	and.w	r0, r0, #15
 800b908:	4098      	lsls	r0, r3
 800b90a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b90e:	3304      	adds	r3, #4
 800b910:	e7ae      	b.n	800b870 <__gethex+0x15c>
 800b912:	45b1      	cmp	r9, r6
 800b914:	d8ea      	bhi.n	800b8ec <__gethex+0x1d8>
 800b916:	492b      	ldr	r1, [pc, #172]	@ (800b9c4 <__gethex+0x2b0>)
 800b918:	9303      	str	r3, [sp, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff fe13 	bl	800b548 <strncmp>
 800b922:	9b03      	ldr	r3, [sp, #12]
 800b924:	2800      	cmp	r0, #0
 800b926:	d1e1      	bne.n	800b8ec <__gethex+0x1d8>
 800b928:	e7a2      	b.n	800b870 <__gethex+0x15c>
 800b92a:	1ea9      	subs	r1, r5, #2
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7fe fba4 	bl	800a07a <__any_on>
 800b932:	2800      	cmp	r0, #0
 800b934:	d0c2      	beq.n	800b8bc <__gethex+0x1a8>
 800b936:	f04f 0903 	mov.w	r9, #3
 800b93a:	e7c1      	b.n	800b8c0 <__gethex+0x1ac>
 800b93c:	da09      	bge.n	800b952 <__gethex+0x23e>
 800b93e:	1b75      	subs	r5, r6, r5
 800b940:	4621      	mov	r1, r4
 800b942:	9801      	ldr	r0, [sp, #4]
 800b944:	462a      	mov	r2, r5
 800b946:	f7fe f95f 	bl	8009c08 <__lshift>
 800b94a:	1b7f      	subs	r7, r7, r5
 800b94c:	4604      	mov	r4, r0
 800b94e:	f100 0a14 	add.w	sl, r0, #20
 800b952:	f04f 0900 	mov.w	r9, #0
 800b956:	e7b8      	b.n	800b8ca <__gethex+0x1b6>
 800b958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b95c:	42bd      	cmp	r5, r7
 800b95e:	dd6f      	ble.n	800ba40 <__gethex+0x32c>
 800b960:	1bed      	subs	r5, r5, r7
 800b962:	42ae      	cmp	r6, r5
 800b964:	dc34      	bgt.n	800b9d0 <__gethex+0x2bc>
 800b966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d022      	beq.n	800b9b4 <__gethex+0x2a0>
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d024      	beq.n	800b9bc <__gethex+0x2a8>
 800b972:	2b01      	cmp	r3, #1
 800b974:	d115      	bne.n	800b9a2 <__gethex+0x28e>
 800b976:	42ae      	cmp	r6, r5
 800b978:	d113      	bne.n	800b9a2 <__gethex+0x28e>
 800b97a:	2e01      	cmp	r6, #1
 800b97c:	d10b      	bne.n	800b996 <__gethex+0x282>
 800b97e:	9a02      	ldr	r2, [sp, #8]
 800b980:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	2301      	movs	r3, #1
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	f8ca 3000 	str.w	r3, [sl]
 800b98e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b990:	2562      	movs	r5, #98	@ 0x62
 800b992:	601c      	str	r4, [r3, #0]
 800b994:	e73a      	b.n	800b80c <__gethex+0xf8>
 800b996:	1e71      	subs	r1, r6, #1
 800b998:	4620      	mov	r0, r4
 800b99a:	f7fe fb6e 	bl	800a07a <__any_on>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d1ed      	bne.n	800b97e <__gethex+0x26a>
 800b9a2:	9801      	ldr	r0, [sp, #4]
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	f7fd ff1f 	bl	80097e8 <_Bfree>
 800b9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	2550      	movs	r5, #80	@ 0x50
 800b9b2:	e72b      	b.n	800b80c <__gethex+0xf8>
 800b9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1f3      	bne.n	800b9a2 <__gethex+0x28e>
 800b9ba:	e7e0      	b.n	800b97e <__gethex+0x26a>
 800b9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1dd      	bne.n	800b97e <__gethex+0x26a>
 800b9c2:	e7ee      	b.n	800b9a2 <__gethex+0x28e>
 800b9c4:	0800c053 	.word	0x0800c053
 800b9c8:	0800bfe9 	.word	0x0800bfe9
 800b9cc:	0800c0aa 	.word	0x0800c0aa
 800b9d0:	1e6f      	subs	r7, r5, #1
 800b9d2:	f1b9 0f00 	cmp.w	r9, #0
 800b9d6:	d130      	bne.n	800ba3a <__gethex+0x326>
 800b9d8:	b127      	cbz	r7, 800b9e4 <__gethex+0x2d0>
 800b9da:	4639      	mov	r1, r7
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7fe fb4c 	bl	800a07a <__any_on>
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	117a      	asrs	r2, r7, #5
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9ec:	f007 071f 	and.w	r7, r7, #31
 800b9f0:	40bb      	lsls	r3, r7
 800b9f2:	4213      	tst	r3, r2
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	bf18      	it	ne
 800b9fa:	f049 0902 	orrne.w	r9, r9, #2
 800b9fe:	f7ff fe21 	bl	800b644 <rshift>
 800ba02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ba06:	1b76      	subs	r6, r6, r5
 800ba08:	2502      	movs	r5, #2
 800ba0a:	f1b9 0f00 	cmp.w	r9, #0
 800ba0e:	d047      	beq.n	800baa0 <__gethex+0x38c>
 800ba10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d015      	beq.n	800ba44 <__gethex+0x330>
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d017      	beq.n	800ba4c <__gethex+0x338>
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d109      	bne.n	800ba34 <__gethex+0x320>
 800ba20:	f019 0f02 	tst.w	r9, #2
 800ba24:	d006      	beq.n	800ba34 <__gethex+0x320>
 800ba26:	f8da 3000 	ldr.w	r3, [sl]
 800ba2a:	ea49 0903 	orr.w	r9, r9, r3
 800ba2e:	f019 0f01 	tst.w	r9, #1
 800ba32:	d10e      	bne.n	800ba52 <__gethex+0x33e>
 800ba34:	f045 0510 	orr.w	r5, r5, #16
 800ba38:	e032      	b.n	800baa0 <__gethex+0x38c>
 800ba3a:	f04f 0901 	mov.w	r9, #1
 800ba3e:	e7d1      	b.n	800b9e4 <__gethex+0x2d0>
 800ba40:	2501      	movs	r5, #1
 800ba42:	e7e2      	b.n	800ba0a <__gethex+0x2f6>
 800ba44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba46:	f1c3 0301 	rsb	r3, r3, #1
 800ba4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0f0      	beq.n	800ba34 <__gethex+0x320>
 800ba52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba56:	f104 0314 	add.w	r3, r4, #20
 800ba5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba62:	f04f 0c00 	mov.w	ip, #0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800ba70:	d01b      	beq.n	800baaa <__gethex+0x396>
 800ba72:	3201      	adds	r2, #1
 800ba74:	6002      	str	r2, [r0, #0]
 800ba76:	2d02      	cmp	r5, #2
 800ba78:	f104 0314 	add.w	r3, r4, #20
 800ba7c:	d13c      	bne.n	800baf8 <__gethex+0x3e4>
 800ba7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ba82:	3a01      	subs	r2, #1
 800ba84:	42b2      	cmp	r2, r6
 800ba86:	d109      	bne.n	800ba9c <__gethex+0x388>
 800ba88:	1171      	asrs	r1, r6, #5
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba90:	f006 061f 	and.w	r6, r6, #31
 800ba94:	fa02 f606 	lsl.w	r6, r2, r6
 800ba98:	421e      	tst	r6, r3
 800ba9a:	d13a      	bne.n	800bb12 <__gethex+0x3fe>
 800ba9c:	f045 0520 	orr.w	r5, r5, #32
 800baa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baa2:	601c      	str	r4, [r3, #0]
 800baa4:	9b02      	ldr	r3, [sp, #8]
 800baa6:	601f      	str	r7, [r3, #0]
 800baa8:	e6b0      	b.n	800b80c <__gethex+0xf8>
 800baaa:	4299      	cmp	r1, r3
 800baac:	f843 cc04 	str.w	ip, [r3, #-4]
 800bab0:	d8d9      	bhi.n	800ba66 <__gethex+0x352>
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	459b      	cmp	fp, r3
 800bab6:	db17      	blt.n	800bae8 <__gethex+0x3d4>
 800bab8:	6861      	ldr	r1, [r4, #4]
 800baba:	9801      	ldr	r0, [sp, #4]
 800babc:	3101      	adds	r1, #1
 800babe:	f7fd fe53 	bl	8009768 <_Balloc>
 800bac2:	4681      	mov	r9, r0
 800bac4:	b918      	cbnz	r0, 800bace <__gethex+0x3ba>
 800bac6:	4b1a      	ldr	r3, [pc, #104]	@ (800bb30 <__gethex+0x41c>)
 800bac8:	4602      	mov	r2, r0
 800baca:	2184      	movs	r1, #132	@ 0x84
 800bacc:	e6c5      	b.n	800b85a <__gethex+0x146>
 800bace:	6922      	ldr	r2, [r4, #16]
 800bad0:	3202      	adds	r2, #2
 800bad2:	f104 010c 	add.w	r1, r4, #12
 800bad6:	0092      	lsls	r2, r2, #2
 800bad8:	300c      	adds	r0, #12
 800bada:	f7fc fed6 	bl	800888a <memcpy>
 800bade:	4621      	mov	r1, r4
 800bae0:	9801      	ldr	r0, [sp, #4]
 800bae2:	f7fd fe81 	bl	80097e8 <_Bfree>
 800bae6:	464c      	mov	r4, r9
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baf0:	6122      	str	r2, [r4, #16]
 800baf2:	2201      	movs	r2, #1
 800baf4:	615a      	str	r2, [r3, #20]
 800baf6:	e7be      	b.n	800ba76 <__gethex+0x362>
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	455a      	cmp	r2, fp
 800bafc:	dd0b      	ble.n	800bb16 <__gethex+0x402>
 800bafe:	2101      	movs	r1, #1
 800bb00:	4620      	mov	r0, r4
 800bb02:	f7ff fd9f 	bl	800b644 <rshift>
 800bb06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb0a:	3701      	adds	r7, #1
 800bb0c:	42bb      	cmp	r3, r7
 800bb0e:	f6ff aee0 	blt.w	800b8d2 <__gethex+0x1be>
 800bb12:	2501      	movs	r5, #1
 800bb14:	e7c2      	b.n	800ba9c <__gethex+0x388>
 800bb16:	f016 061f 	ands.w	r6, r6, #31
 800bb1a:	d0fa      	beq.n	800bb12 <__gethex+0x3fe>
 800bb1c:	4453      	add	r3, sl
 800bb1e:	f1c6 0620 	rsb	r6, r6, #32
 800bb22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb26:	f7fd ff11 	bl	800994c <__hi0bits>
 800bb2a:	42b0      	cmp	r0, r6
 800bb2c:	dbe7      	blt.n	800bafe <__gethex+0x3ea>
 800bb2e:	e7f0      	b.n	800bb12 <__gethex+0x3fe>
 800bb30:	0800bfe9 	.word	0x0800bfe9

0800bb34 <L_shift>:
 800bb34:	f1c2 0208 	rsb	r2, r2, #8
 800bb38:	0092      	lsls	r2, r2, #2
 800bb3a:	b570      	push	{r4, r5, r6, lr}
 800bb3c:	f1c2 0620 	rsb	r6, r2, #32
 800bb40:	6843      	ldr	r3, [r0, #4]
 800bb42:	6804      	ldr	r4, [r0, #0]
 800bb44:	fa03 f506 	lsl.w	r5, r3, r6
 800bb48:	432c      	orrs	r4, r5
 800bb4a:	40d3      	lsrs	r3, r2
 800bb4c:	6004      	str	r4, [r0, #0]
 800bb4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb52:	4288      	cmp	r0, r1
 800bb54:	d3f4      	bcc.n	800bb40 <L_shift+0xc>
 800bb56:	bd70      	pop	{r4, r5, r6, pc}

0800bb58 <__match>:
 800bb58:	b530      	push	{r4, r5, lr}
 800bb5a:	6803      	ldr	r3, [r0, #0]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb62:	b914      	cbnz	r4, 800bb6a <__match+0x12>
 800bb64:	6003      	str	r3, [r0, #0]
 800bb66:	2001      	movs	r0, #1
 800bb68:	bd30      	pop	{r4, r5, pc}
 800bb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bb72:	2d19      	cmp	r5, #25
 800bb74:	bf98      	it	ls
 800bb76:	3220      	addls	r2, #32
 800bb78:	42a2      	cmp	r2, r4
 800bb7a:	d0f0      	beq.n	800bb5e <__match+0x6>
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	e7f3      	b.n	800bb68 <__match+0x10>

0800bb80 <__hexnan>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	680b      	ldr	r3, [r1, #0]
 800bb86:	6801      	ldr	r1, [r0, #0]
 800bb88:	115e      	asrs	r6, r3, #5
 800bb8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb8e:	f013 031f 	ands.w	r3, r3, #31
 800bb92:	b087      	sub	sp, #28
 800bb94:	bf18      	it	ne
 800bb96:	3604      	addne	r6, #4
 800bb98:	2500      	movs	r5, #0
 800bb9a:	1f37      	subs	r7, r6, #4
 800bb9c:	4682      	mov	sl, r0
 800bb9e:	4690      	mov	r8, r2
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bba6:	46b9      	mov	r9, r7
 800bba8:	463c      	mov	r4, r7
 800bbaa:	9502      	str	r5, [sp, #8]
 800bbac:	46ab      	mov	fp, r5
 800bbae:	784a      	ldrb	r2, [r1, #1]
 800bbb0:	1c4b      	adds	r3, r1, #1
 800bbb2:	9303      	str	r3, [sp, #12]
 800bbb4:	b342      	cbz	r2, 800bc08 <__hexnan+0x88>
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	9105      	str	r1, [sp, #20]
 800bbba:	9204      	str	r2, [sp, #16]
 800bbbc:	f7ff fd94 	bl	800b6e8 <__hexdig_fun>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d151      	bne.n	800bc68 <__hexnan+0xe8>
 800bbc4:	9a04      	ldr	r2, [sp, #16]
 800bbc6:	9905      	ldr	r1, [sp, #20]
 800bbc8:	2a20      	cmp	r2, #32
 800bbca:	d818      	bhi.n	800bbfe <__hexnan+0x7e>
 800bbcc:	9b02      	ldr	r3, [sp, #8]
 800bbce:	459b      	cmp	fp, r3
 800bbd0:	dd13      	ble.n	800bbfa <__hexnan+0x7a>
 800bbd2:	454c      	cmp	r4, r9
 800bbd4:	d206      	bcs.n	800bbe4 <__hexnan+0x64>
 800bbd6:	2d07      	cmp	r5, #7
 800bbd8:	dc04      	bgt.n	800bbe4 <__hexnan+0x64>
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4649      	mov	r1, r9
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff ffa8 	bl	800bb34 <L_shift>
 800bbe4:	4544      	cmp	r4, r8
 800bbe6:	d952      	bls.n	800bc8e <__hexnan+0x10e>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f1a4 0904 	sub.w	r9, r4, #4
 800bbee:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbf2:	f8cd b008 	str.w	fp, [sp, #8]
 800bbf6:	464c      	mov	r4, r9
 800bbf8:	461d      	mov	r5, r3
 800bbfa:	9903      	ldr	r1, [sp, #12]
 800bbfc:	e7d7      	b.n	800bbae <__hexnan+0x2e>
 800bbfe:	2a29      	cmp	r2, #41	@ 0x29
 800bc00:	d157      	bne.n	800bcb2 <__hexnan+0x132>
 800bc02:	3102      	adds	r1, #2
 800bc04:	f8ca 1000 	str.w	r1, [sl]
 800bc08:	f1bb 0f00 	cmp.w	fp, #0
 800bc0c:	d051      	beq.n	800bcb2 <__hexnan+0x132>
 800bc0e:	454c      	cmp	r4, r9
 800bc10:	d206      	bcs.n	800bc20 <__hexnan+0xa0>
 800bc12:	2d07      	cmp	r5, #7
 800bc14:	dc04      	bgt.n	800bc20 <__hexnan+0xa0>
 800bc16:	462a      	mov	r2, r5
 800bc18:	4649      	mov	r1, r9
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f7ff ff8a 	bl	800bb34 <L_shift>
 800bc20:	4544      	cmp	r4, r8
 800bc22:	d936      	bls.n	800bc92 <__hexnan+0x112>
 800bc24:	f1a8 0204 	sub.w	r2, r8, #4
 800bc28:	4623      	mov	r3, r4
 800bc2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc32:	429f      	cmp	r7, r3
 800bc34:	d2f9      	bcs.n	800bc2a <__hexnan+0xaa>
 800bc36:	1b3b      	subs	r3, r7, r4
 800bc38:	f023 0303 	bic.w	r3, r3, #3
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	3401      	adds	r4, #1
 800bc40:	3e03      	subs	r6, #3
 800bc42:	42b4      	cmp	r4, r6
 800bc44:	bf88      	it	hi
 800bc46:	2304      	movhi	r3, #4
 800bc48:	4443      	add	r3, r8
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f843 2b04 	str.w	r2, [r3], #4
 800bc50:	429f      	cmp	r7, r3
 800bc52:	d2fb      	bcs.n	800bc4c <__hexnan+0xcc>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	b91b      	cbnz	r3, 800bc60 <__hexnan+0xe0>
 800bc58:	4547      	cmp	r7, r8
 800bc5a:	d128      	bne.n	800bcae <__hexnan+0x12e>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	2005      	movs	r0, #5
 800bc62:	b007      	add	sp, #28
 800bc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc68:	3501      	adds	r5, #1
 800bc6a:	2d08      	cmp	r5, #8
 800bc6c:	f10b 0b01 	add.w	fp, fp, #1
 800bc70:	dd06      	ble.n	800bc80 <__hexnan+0x100>
 800bc72:	4544      	cmp	r4, r8
 800bc74:	d9c1      	bls.n	800bbfa <__hexnan+0x7a>
 800bc76:	2300      	movs	r3, #0
 800bc78:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc7c:	2501      	movs	r5, #1
 800bc7e:	3c04      	subs	r4, #4
 800bc80:	6822      	ldr	r2, [r4, #0]
 800bc82:	f000 000f 	and.w	r0, r0, #15
 800bc86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc8a:	6020      	str	r0, [r4, #0]
 800bc8c:	e7b5      	b.n	800bbfa <__hexnan+0x7a>
 800bc8e:	2508      	movs	r5, #8
 800bc90:	e7b3      	b.n	800bbfa <__hexnan+0x7a>
 800bc92:	9b01      	ldr	r3, [sp, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0dd      	beq.n	800bc54 <__hexnan+0xd4>
 800bc98:	f1c3 0320 	rsb	r3, r3, #32
 800bc9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bca0:	40da      	lsrs	r2, r3
 800bca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bca6:	4013      	ands	r3, r2
 800bca8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bcac:	e7d2      	b.n	800bc54 <__hexnan+0xd4>
 800bcae:	3f04      	subs	r7, #4
 800bcb0:	e7d0      	b.n	800bc54 <__hexnan+0xd4>
 800bcb2:	2004      	movs	r0, #4
 800bcb4:	e7d5      	b.n	800bc62 <__hexnan+0xe2>

0800bcb6 <__ascii_mbtowc>:
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	b901      	cbnz	r1, 800bcbc <__ascii_mbtowc+0x6>
 800bcba:	a901      	add	r1, sp, #4
 800bcbc:	b142      	cbz	r2, 800bcd0 <__ascii_mbtowc+0x1a>
 800bcbe:	b14b      	cbz	r3, 800bcd4 <__ascii_mbtowc+0x1e>
 800bcc0:	7813      	ldrb	r3, [r2, #0]
 800bcc2:	600b      	str	r3, [r1, #0]
 800bcc4:	7812      	ldrb	r2, [r2, #0]
 800bcc6:	1e10      	subs	r0, r2, #0
 800bcc8:	bf18      	it	ne
 800bcca:	2001      	movne	r0, #1
 800bccc:	b002      	add	sp, #8
 800bcce:	4770      	bx	lr
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	e7fb      	b.n	800bccc <__ascii_mbtowc+0x16>
 800bcd4:	f06f 0001 	mvn.w	r0, #1
 800bcd8:	e7f8      	b.n	800bccc <__ascii_mbtowc+0x16>

0800bcda <_realloc_r>:
 800bcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcde:	4607      	mov	r7, r0
 800bce0:	4614      	mov	r4, r2
 800bce2:	460d      	mov	r5, r1
 800bce4:	b921      	cbnz	r1, 800bcf0 <_realloc_r+0x16>
 800bce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcea:	4611      	mov	r1, r2
 800bcec:	f7fd bcb0 	b.w	8009650 <_malloc_r>
 800bcf0:	b92a      	cbnz	r2, 800bcfe <_realloc_r+0x24>
 800bcf2:	f7fd fc39 	bl	8009568 <_free_r>
 800bcf6:	4625      	mov	r5, r4
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfe:	f000 f840 	bl	800bd82 <_malloc_usable_size_r>
 800bd02:	4284      	cmp	r4, r0
 800bd04:	4606      	mov	r6, r0
 800bd06:	d802      	bhi.n	800bd0e <_realloc_r+0x34>
 800bd08:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd0c:	d8f4      	bhi.n	800bcf8 <_realloc_r+0x1e>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4638      	mov	r0, r7
 800bd12:	f7fd fc9d 	bl	8009650 <_malloc_r>
 800bd16:	4680      	mov	r8, r0
 800bd18:	b908      	cbnz	r0, 800bd1e <_realloc_r+0x44>
 800bd1a:	4645      	mov	r5, r8
 800bd1c:	e7ec      	b.n	800bcf8 <_realloc_r+0x1e>
 800bd1e:	42b4      	cmp	r4, r6
 800bd20:	4622      	mov	r2, r4
 800bd22:	4629      	mov	r1, r5
 800bd24:	bf28      	it	cs
 800bd26:	4632      	movcs	r2, r6
 800bd28:	f7fc fdaf 	bl	800888a <memcpy>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4638      	mov	r0, r7
 800bd30:	f7fd fc1a 	bl	8009568 <_free_r>
 800bd34:	e7f1      	b.n	800bd1a <_realloc_r+0x40>

0800bd36 <__ascii_wctomb>:
 800bd36:	4603      	mov	r3, r0
 800bd38:	4608      	mov	r0, r1
 800bd3a:	b141      	cbz	r1, 800bd4e <__ascii_wctomb+0x18>
 800bd3c:	2aff      	cmp	r2, #255	@ 0xff
 800bd3e:	d904      	bls.n	800bd4a <__ascii_wctomb+0x14>
 800bd40:	228a      	movs	r2, #138	@ 0x8a
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd48:	4770      	bx	lr
 800bd4a:	700a      	strb	r2, [r1, #0]
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	4770      	bx	lr

0800bd50 <fiprintf>:
 800bd50:	b40e      	push	{r1, r2, r3}
 800bd52:	b503      	push	{r0, r1, lr}
 800bd54:	4601      	mov	r1, r0
 800bd56:	ab03      	add	r3, sp, #12
 800bd58:	4805      	ldr	r0, [pc, #20]	@ (800bd70 <fiprintf+0x20>)
 800bd5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5e:	6800      	ldr	r0, [r0, #0]
 800bd60:	9301      	str	r3, [sp, #4]
 800bd62:	f7ff f9b1 	bl	800b0c8 <_vfiprintf_r>
 800bd66:	b002      	add	sp, #8
 800bd68:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd6c:	b003      	add	sp, #12
 800bd6e:	4770      	bx	lr
 800bd70:	20000030 	.word	0x20000030

0800bd74 <abort>:
 800bd74:	b508      	push	{r3, lr}
 800bd76:	2006      	movs	r0, #6
 800bd78:	f000 f834 	bl	800bde4 <raise>
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f7f7 f886 	bl	8002e8e <_exit>

0800bd82 <_malloc_usable_size_r>:
 800bd82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd86:	1f18      	subs	r0, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	bfbc      	itt	lt
 800bd8c:	580b      	ldrlt	r3, [r1, r0]
 800bd8e:	18c0      	addlt	r0, r0, r3
 800bd90:	4770      	bx	lr

0800bd92 <_raise_r>:
 800bd92:	291f      	cmp	r1, #31
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4605      	mov	r5, r0
 800bd98:	460c      	mov	r4, r1
 800bd9a:	d904      	bls.n	800bda6 <_raise_r+0x14>
 800bd9c:	2316      	movs	r3, #22
 800bd9e:	6003      	str	r3, [r0, #0]
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bda4:	bd38      	pop	{r3, r4, r5, pc}
 800bda6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bda8:	b112      	cbz	r2, 800bdb0 <_raise_r+0x1e>
 800bdaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdae:	b94b      	cbnz	r3, 800bdc4 <_raise_r+0x32>
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f000 f831 	bl	800be18 <_getpid_r>
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	4601      	mov	r1, r0
 800bdba:	4628      	mov	r0, r5
 800bdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc0:	f000 b818 	b.w	800bdf4 <_kill_r>
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d00a      	beq.n	800bdde <_raise_r+0x4c>
 800bdc8:	1c59      	adds	r1, r3, #1
 800bdca:	d103      	bne.n	800bdd4 <_raise_r+0x42>
 800bdcc:	2316      	movs	r3, #22
 800bdce:	6003      	str	r3, [r0, #0]
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	e7e7      	b.n	800bda4 <_raise_r+0x12>
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bdda:	4620      	mov	r0, r4
 800bddc:	4798      	blx	r3
 800bdde:	2000      	movs	r0, #0
 800bde0:	e7e0      	b.n	800bda4 <_raise_r+0x12>
	...

0800bde4 <raise>:
 800bde4:	4b02      	ldr	r3, [pc, #8]	@ (800bdf0 <raise+0xc>)
 800bde6:	4601      	mov	r1, r0
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	f7ff bfd2 	b.w	800bd92 <_raise_r>
 800bdee:	bf00      	nop
 800bdf0:	20000030 	.word	0x20000030

0800bdf4 <_kill_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d07      	ldr	r5, [pc, #28]	@ (800be14 <_kill_r+0x20>)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	4611      	mov	r1, r2
 800be00:	602b      	str	r3, [r5, #0]
 800be02:	f7f7 f834 	bl	8002e6e <_kill>
 800be06:	1c43      	adds	r3, r0, #1
 800be08:	d102      	bne.n	800be10 <_kill_r+0x1c>
 800be0a:	682b      	ldr	r3, [r5, #0]
 800be0c:	b103      	cbz	r3, 800be10 <_kill_r+0x1c>
 800be0e:	6023      	str	r3, [r4, #0]
 800be10:	bd38      	pop	{r3, r4, r5, pc}
 800be12:	bf00      	nop
 800be14:	20000778 	.word	0x20000778

0800be18 <_getpid_r>:
 800be18:	f7f7 b821 	b.w	8002e5e <_getpid>

0800be1c <_init>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	bf00      	nop
 800be20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be22:	bc08      	pop	{r3}
 800be24:	469e      	mov	lr, r3
 800be26:	4770      	bx	lr

0800be28 <_fini>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	bf00      	nop
 800be2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be2e:	bc08      	pop	{r3}
 800be30:	469e      	mov	lr, r3
 800be32:	4770      	bx	lr
