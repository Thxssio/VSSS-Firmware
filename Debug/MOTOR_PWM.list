
MOTOR_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004514  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080046ec  080046ec  000056ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046fc  080046fc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080046fc  080046fc  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046fc  080046fc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004704  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000010  08004710  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004710  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0d7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a84  00000000  00000000  00011113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00012b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d1  00000000  00000000  00013850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5bf  00000000  00000000  00014221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c713  00000000  00000000  000317e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf88e  00000000  00000000  0003def3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd781  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f4  00000000  00000000  000fd7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00100fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080046d4 	.word	0x080046d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080046d4 	.word	0x080046d4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000b94:	f7ff ff8c 	bl	8000ab0 <__aeabi_dcmpgt>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8000baa:	e011      	b.n	8000bd0 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000bb8:	f7ff ff5c 	bl	8000a74 <__aeabi_dcmplt>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <PID_Init+0x60>
}
 8000bc2:	e005      	b.n	8000bd0 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6278      	str	r0, [r7, #36]	@ 0x24
 8000be0:	6239      	str	r1, [r7, #32]
 8000be2:	61fa      	str	r2, [r7, #28]
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	ed87 0b04 	vstr	d0, [r7, #16]
 8000bea:	ed87 1b02 	vstr	d1, [r7, #8]
 8000bee:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	69fa      	ldr	r2, [r7, #28]
 8000bf6:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfa:	6a3a      	ldr	r2, [r7, #32]
 8000bfc:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c06:	2200      	movs	r2, #0
 8000c08:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8000c0a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8000c60 <PID+0x88>
 8000c0e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8000c68 <PID+0x90>
 8000c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c14:	f000 f956 	bl	8000ec4 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	2264      	movs	r2, #100	@ 0x64
 8000c1c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8000c1e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000c22:	4619      	mov	r1, r3
 8000c24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c26:	f000 fa63 	bl	80010f0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8000c2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000c2e:	4619      	mov	r1, r3
 8000c30:	ed97 2b00 	vldr	d2, [r7]
 8000c34:	ed97 1b02 	vldr	d1, [r7, #8]
 8000c38:	ed97 0b04 	vldr	d0, [r7, #16]
 8000c3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c3e:	f000 f9af 	bl	8000fa0 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8000c42:	f001 f9eb 	bl	800201c <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	1ad2      	subs	r2, r2, r3
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	605a      	str	r2, [r3, #4]

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	f3af 8000 	nop.w
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406fe000 	.word	0x406fe000
	...

08000c70 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	@ 0x30
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	6278      	str	r0, [r7, #36]	@ 0x24
 8000c78:	6239      	str	r1, [r7, #32]
 8000c7a:	61fa      	str	r2, [r7, #28]
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	ed87 0b04 	vstr	d0, [r7, #16]
 8000c82:	ed87 1b02 	vstr	d1, [r7, #8]
 8000c86:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 8000c8a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	2301      	movs	r3, #1
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	ed97 2b00 	vldr	d2, [r7]
 8000c98:	ed97 1b02 	vldr	d1, [r7, #8]
 8000c9c:	ed97 0b04 	vldr	d0, [r7, #16]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	6a39      	ldr	r1, [r7, #32]
 8000ca6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ca8:	f7ff ff96 	bl	8000bd8 <PID>
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	@ 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	785b      	ldrb	r3, [r3, #1]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <PID_Compute+0x14>
	{
		return _FALSE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e0db      	b.n	8000e80 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8000cc8:	f001 f9a8 	bl	800201c <HAL_GetTick>
 8000ccc:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	f0c0 80cd 	bcc.w	8000e7e <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000cfc:	f7ff fa90 	bl	8000220 <__aeabi_dsub>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000d0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d12:	f7ff fa85 	bl	8000220 <__aeabi_dsub>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8000d2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d2e:	f7ff fc2f 	bl	8000590 <__aeabi_dmul>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4620      	mov	r0, r4
 8000d38:	4629      	mov	r1, r5
 8000d3a:	f7ff fa73 	bl	8000224 <__adddf3>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d114      	bne.n	8000d7a <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8000d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d60:	f7ff fc16 	bl	8000590 <__aeabi_dmul>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	f7ff fa58 	bl	8000220 <__aeabi_dsub>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000d86:	f7ff fe93 	bl	8000ab0 <__aeabi_dcmpgt>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8000d9c:	e010      	b.n	8000dc0 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000daa:	f7ff fe63 	bl	8000a74 <__aeabi_dcmplt>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00b      	beq.n	8000de0 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000dce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000dd2:	f7ff fbdd 	bl	8000590 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000dde:	e005      	b.n	8000dec <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8000df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dfc:	f7ff fbc8 	bl	8000590 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4620      	mov	r0, r4
 8000e06:	4629      	mov	r1, r5
 8000e08:	f7ff fa0a 	bl	8000220 <__aeabi_dsub>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000e14:	f7ff fa06 	bl	8000224 <__adddf3>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000e2a:	f7ff fe41 	bl	8000ab0 <__aeabi_dcmpgt>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000e3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000e3e:	e00e      	b.n	8000e5e <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000e46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000e4a:	f7ff fe13 	bl	8000a74 <__aeabi_dcmplt>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000e5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000e66:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e70:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e78:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8000e7e:	2300      	movs	r3, #0
	}

}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3730      	adds	r7, #48	@ 0x30
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}

08000e88 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	bf0c      	ite	eq
 8000e9a:	2301      	moveq	r3, #1
 8000e9c:	2300      	movne	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <PID_SetMode+0x2e>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fe57 	bl	8000b64 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	705a      	strb	r2, [r3, #1]

}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6178      	str	r0, [r7, #20]
 8000ecc:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ed0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8000ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ed8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000edc:	f7ff fdde 	bl	8000a9c <__aeabi_dcmpge>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d158      	bne.n	8000f98 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8000ee6:	6979      	ldr	r1, [r7, #20]
 8000ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000eec:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8000ef0:	6979      	ldr	r1, [r7, #20]
 8000ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ef6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d04b      	beq.n	8000f9a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000f10:	f7ff fdce 	bl	8000ab0 <__aeabi_dcmpgt>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000f24:	e9c1 2300 	strd	r2, r3, [r1]
 8000f28:	e012      	b.n	8000f50 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000f38:	f7ff fd9c 	bl	8000a74 <__aeabi_dcmplt>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000f4c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000f5c:	f7ff fda8 	bl	8000ab0 <__aeabi_dcmpgt>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000f6c:	6979      	ldr	r1, [r7, #20]
 8000f6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8000f72:	e012      	b.n	8000f9a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000f80:	f7ff fd78 	bl	8000a74 <__aeabi_dcmplt>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000f90:	6979      	ldr	r1, [r7, #20]
 8000f92:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8000f96:	e000      	b.n	8000f9a <PID_SetOutputLimits+0xd6>
		return;
 8000f98:	bf00      	nop
		}
		else { }

	}

}
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	61f8      	str	r0, [r7, #28]
 8000fa8:	ed87 0b04 	vstr	d0, [r7, #16]
 8000fac:	ed87 1b02 	vstr	d1, [r7, #8]
 8000fb0:	ed87 2b00 	vstr	d2, [r7]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fc4:	f7ff fd56 	bl	8000a74 <__aeabi_dcmplt>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 8089 	bne.w	80010e2 <PID_SetTunings2+0x142>
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fdc:	f7ff fd4a 	bl	8000a74 <__aeabi_dcmplt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d17d      	bne.n	80010e2 <PID_SetTunings2+0x142>
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ff2:	f7ff fd3f 	bl	8000a74 <__aeabi_dcmplt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d172      	bne.n	80010e2 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	7efa      	ldrb	r2, [r7, #27]
 8001000:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001002:	7efb      	ldrb	r3, [r7, #27]
 8001004:	2b01      	cmp	r3, #1
 8001006:	bf0c      	ite	eq
 8001008:	2301      	moveq	r3, #1
 800100a:	2300      	movne	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001014:	69f9      	ldr	r1, [r7, #28]
 8001016:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800101e:	69f9      	ldr	r1, [r7, #28]
 8001020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001024:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001028:	69f9      	ldr	r1, [r7, #28]
 800102a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800102e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa30 	bl	800049c <__aeabi_ui2d>
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <PID_SetTunings2+0x14c>)
 8001042:	f7ff fbcf 	bl	80007e4 <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800104e:	69f9      	ldr	r1, [r7, #28]
 8001050:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001054:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001058:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800105c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001060:	f7ff fa96 	bl	8000590 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	69f9      	ldr	r1, [r7, #28]
 800106a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800106e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001072:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001076:	f7ff fbb5 	bl	80007e4 <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	69f9      	ldr	r1, [r7, #28]
 8001080:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d12b      	bne.n	80010e4 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	f04f 0100 	mov.w	r1, #0
 800109a:	f7ff f8c1 	bl	8000220 <__aeabi_dsub>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	69f9      	ldr	r1, [r7, #28]
 80010a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	f04f 0100 	mov.w	r1, #0
 80010b6:	f7ff f8b3 	bl	8000220 <__aeabi_dsub>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	69f9      	ldr	r1, [r7, #28]
 80010c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	f04f 0100 	mov.w	r1, #0
 80010d2:	f7ff f8a5 	bl	8000220 <__aeabi_dsub>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	69f9      	ldr	r1, [r7, #28]
 80010dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 80010e0:	e000      	b.n	80010e4 <PID_SetTunings2+0x144>
		return;
 80010e2:	bf00      	nop

	}

}
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	408f4000 	.word	0x408f4000

080010f0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	785b      	ldrb	r3, [r3, #1]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d02e      	beq.n	8001162 <PID_SetControllerDirection+0x72>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	78db      	ldrb	r3, [r3, #3]
 8001108:	78fa      	ldrb	r2, [r7, #3]
 800110a:	429a      	cmp	r2, r3
 800110c:	d029      	beq.n	8001162 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	f04f 0100 	mov.w	r1, #0
 800111c:	f7ff f880 	bl	8000220 <__aeabi_dsub>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	f04f 0100 	mov.w	r1, #0
 8001138:	f7ff f872 	bl	8000220 <__aeabi_dsub>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800114c:	f04f 0000 	mov.w	r0, #0
 8001150:	f04f 0100 	mov.w	r1, #0
 8001154:	f7ff f864 	bl	8000220 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	70da      	strb	r2, [r3, #3]

}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	dd2e      	ble.n	80011de <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff f99b 	bl	80004bc <__aeabi_i2d>
 8001186:	4604      	mov	r4, r0
 8001188:	460d      	mov	r5, r1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f984 	bl	800049c <__aeabi_ui2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	f7ff fb22 	bl	80007e4 <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80011ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011b2:	f7ff f9ed 	bl	8000590 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80011c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ca:	f7ff fb0b 	bl	80007e4 <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	609a      	str	r2, [r3, #8]

	}

}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011e8 <Motor_Control>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Motor_Control(uint32_t pwm_left, uint8_t dir_left,
                   uint32_t pwm_right, uint8_t dir_right)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	72fb      	strb	r3, [r7, #11]
 80011f8:	4613      	mov	r3, r2
 80011fa:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
  */

  // Motor Esquerdo
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 80011fc:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <Motor_Control+0x7c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (GPIO_PinState)(dir_left));
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	461a      	mov	r2, r3
 8001208:	2102      	movs	r1, #2
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f001 f999 	bl	8002544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (GPIO_PinState)(!dir_left));
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	2b00      	cmp	r3, #0
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	2104      	movs	r1, #4
 8001222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001226:	f001 f98d 	bl	8002544 <HAL_GPIO_WritePin>

  // Motor Direito
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <Motor_Control+0x80>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  (GPIO_PinState)(dir_right));
 8001232:	7abb      	ldrb	r3, [r7, #10]
 8001234:	461a      	mov	r2, r3
 8001236:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f001 f981 	bl	8002544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (GPIO_PinState)(!dir_right));
 8001242:	7abb      	ldrb	r3, [r7, #10]
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001258:	f001 f974 	bl	8002544 <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000078 	.word	0x20000078
 8001268:	2000002c 	.word	0x2000002c

0800126c <Calculate_RPM>:

void Calculate_RPM(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8001272:	f000 fed3 	bl	800201c <HAL_GetTick>
 8001276:	6178      	str	r0, [r7, #20]
    uint32_t delta_time = now - last_time;
 8001278:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <Calculate_RPM+0xdc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	613b      	str	r3, [r7, #16]
    if (delta_time == 0) return;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05a      	beq.n	800133e <Calculate_RPM+0xd2>

    int16_t current_left_encoder  = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <Calculate_RPM+0xe0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128e:	81fb      	strh	r3, [r7, #14]
    int16_t current_right_encoder = (int16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <Calculate_RPM+0xe4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	81bb      	strh	r3, [r7, #12]

    int16_t delta_left  = current_left_encoder  - last_left_encoder;
 8001298:	89fa      	ldrh	r2, [r7, #14]
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <Calculate_RPM+0xe8>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	817b      	strh	r3, [r7, #10]
    int16_t delta_right = current_right_encoder - last_right_encoder;
 80012a8:	89ba      	ldrh	r2, [r7, #12]
 80012aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <Calculate_RPM+0xec>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	813b      	strh	r3, [r7, #8]

    float dt_min = ((float)delta_time) / 60000.0f;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800135c <Calculate_RPM+0xf0>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	edc7 7a01 	vstr	s15, [r7, #4]
    left_rpm  = (delta_left  / (float)ENCODER_PULSES_PER_REV) / dt_min;
 80012ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012da:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001360 <Calculate_RPM+0xf4>
 80012de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012ea:	ee16 0a90 	vmov	r0, s13
 80012ee:	f7ff f8f7 	bl	80004e0 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	491b      	ldr	r1, [pc, #108]	@ (8001364 <Calculate_RPM+0xf8>)
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]
    right_rpm = (delta_right / (float)ENCODER_PULSES_PER_REV) / dt_min;
 80012fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001360 <Calculate_RPM+0xf4>
 800130c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001310:	edd7 7a01 	vldr	s15, [r7, #4]
 8001314:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001318:	ee16 0a90 	vmov	r0, s13
 800131c:	f7ff f8e0 	bl	80004e0 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4910      	ldr	r1, [pc, #64]	@ (8001368 <Calculate_RPM+0xfc>)
 8001326:	e9c1 2300 	strd	r2, r3, [r1]

    last_left_encoder  = current_left_encoder;
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <Calculate_RPM+0xe8>)
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	8013      	strh	r3, [r2, #0]
    last_right_encoder = current_right_encoder;
 8001330:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <Calculate_RPM+0xec>)
 8001332:	89bb      	ldrh	r3, [r7, #12]
 8001334:	8013      	strh	r3, [r2, #0]
    last_time          = now;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <Calculate_RPM+0xdc>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	e000      	b.n	8001340 <Calculate_RPM+0xd4>
    if (delta_time == 0) return;
 800133e:	bf00      	nop
}
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000028c 	.word	0x2000028c
 800134c:	200000c4 	.word	0x200000c4
 8001350:	20000110 	.word	0x20000110
 8001354:	20000288 	.word	0x20000288
 8001358:	2000028a 	.word	0x2000028a
 800135c:	476a6000 	.word	0x476a6000
 8001360:	452be000 	.word	0x452be000
 8001364:	20000240 	.word	0x20000240
 8001368:	20000248 	.word	0x20000248
 800136c:	00000000 	.word	0x00000000

08001370 <Set_Motor_Speeds>:


void Set_Motor_Speeds(float vL, float vR) {
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
 800137a:	edc7 0a00 	vstr	s1, [r7]
    Calculate_RPM();
 800137e:	f7ff ff75 	bl	800126c <Calculate_RPM>

    float target_rpm_left  = (vL * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f8ac 	bl	80004e0 <__aeabi_f2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b80      	ldr	r3, [pc, #512]	@ (8001590 <Set_Motor_Speeds+0x220>)
 800138e:	f7ff f8ff 	bl	8000590 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	a377      	add	r3, pc, #476	@ (adr r3, 8001578 <Set_Motor_Speeds+0x208>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff fa20 	bl	80007e4 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fb8a 	bl	8000ac4 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	61fb      	str	r3, [r7, #28]
    float target_rpm_right = (vR * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f7ff f893 	bl	80004e0 <__aeabi_f2d>
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b74      	ldr	r3, [pc, #464]	@ (8001590 <Set_Motor_Speeds+0x220>)
 80013c0:	f7ff f8e6 	bl	8000590 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8001578 <Set_Motor_Speeds+0x208>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff fa07 	bl	80007e4 <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fb71 	bl	8000ac4 <__aeabi_d2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]

    setpoint_left_rpm = target_rpm_left;
 80013e6:	69f8      	ldr	r0, [r7, #28]
 80013e8:	f7ff f87a 	bl	80004e0 <__aeabi_f2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4968      	ldr	r1, [pc, #416]	@ (8001594 <Set_Motor_Speeds+0x224>)
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 80013f6:	69b8      	ldr	r0, [r7, #24]
 80013f8:	f7ff f872 	bl	80004e0 <__aeabi_f2d>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4965      	ldr	r1, [pc, #404]	@ (8001598 <Set_Motor_Speeds+0x228>)
 8001402:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft = left_rpm;
 8001406:	4b65      	ldr	r3, [pc, #404]	@ (800159c <Set_Motor_Speeds+0x22c>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	4964      	ldr	r1, [pc, #400]	@ (80015a0 <Set_Motor_Speeds+0x230>)
 800140e:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_rpm;
 8001412:	4b64      	ldr	r3, [pc, #400]	@ (80015a4 <Set_Motor_Speeds+0x234>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	4963      	ldr	r1, [pc, #396]	@ (80015a8 <Set_Motor_Speeds+0x238>)
 800141a:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 800141e:	4863      	ldr	r0, [pc, #396]	@ (80015ac <Set_Motor_Speeds+0x23c>)
 8001420:	f7ff fc48 	bl	8000cb4 <PID_Compute>
    PID_Compute(&pidRight);
 8001424:	4862      	ldr	r0, [pc, #392]	@ (80015b0 <Set_Motor_Speeds+0x240>)
 8001426:	f7ff fc45 	bl	8000cb4 <PID_Compute>

    float pwm_left  = fabs(outputLeft);
 800142a:	4b62      	ldr	r3, [pc, #392]	@ (80015b4 <Set_Motor_Speeds+0x244>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb46 	bl	8000ac4 <__aeabi_d2f>
 8001438:	ee07 0a90 	vmov	s15, r0
 800143c:	eef0 7ae7 	vabs.f32	s15, s15
 8001440:	edc7 7a05 	vstr	s15, [r7, #20]
    float pwm_right = fabs(outputRight);
 8001444:	4b5c      	ldr	r3, [pc, #368]	@ (80015b8 <Set_Motor_Speeds+0x248>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb39 	bl	8000ac4 <__aeabi_d2f>
 8001452:	ee07 0a90 	vmov	s15, r0
 8001456:	eef0 7ae7 	vabs.f32	s15, s15
 800145a:	edc7 7a04 	vstr	s15, [r7, #16]

    pwm_left  = fmax(pwm_left, PWM_MIN);
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff f83e 	bl	80004e0 <__aeabi_f2d>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8001580 <Set_Motor_Speeds+0x210>
 800146c:	ec43 2b10 	vmov	d0, r2, r3
 8001470:	f003 f8b2 	bl	80045d8 <fmax>
 8001474:	ec53 2b10 	vmov	r2, r3, d0
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fb22 	bl	8000ac4 <__aeabi_d2f>
 8001480:	4603      	mov	r3, r0
 8001482:	617b      	str	r3, [r7, #20]
    pwm_right = fmax(pwm_right, PWM_MIN);
 8001484:	6938      	ldr	r0, [r7, #16]
 8001486:	f7ff f82b 	bl	80004e0 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001580 <Set_Motor_Speeds+0x210>
 8001492:	ec43 2b10 	vmov	d0, r2, r3
 8001496:	f003 f89f 	bl	80045d8 <fmax>
 800149a:	ec53 2b10 	vmov	r2, r3, d0
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fb0f 	bl	8000ac4 <__aeabi_d2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	613b      	str	r3, [r7, #16]

    pwm_left  = fmin(pwm_left, PWM_MAX);
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff f818 	bl	80004e0 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8001588 <Set_Motor_Speeds+0x218>
 80014b8:	ec43 2b10 	vmov	d0, r2, r3
 80014bc:	f003 f8b6 	bl	800462c <fmin>
 80014c0:	ec53 2b10 	vmov	r2, r3, d0
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fafc 	bl	8000ac4 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	617b      	str	r3, [r7, #20]
    pwm_right = fmin(pwm_right, PWM_MAX);
 80014d0:	6938      	ldr	r0, [r7, #16]
 80014d2:	f7ff f805 	bl	80004e0 <__aeabi_f2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001588 <Set_Motor_Speeds+0x218>
 80014de:	ec43 2b10 	vmov	d0, r2, r3
 80014e2:	f003 f8a3 	bl	800462c <fmin>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fae9 	bl	8000ac4 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]

    uint8_t dir_left  = (outputLeft >= 0) ? 0 : 1;
 80014f6:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <Set_Motor_Speeds+0x244>)
 80014f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fc:	2301      	movs	r3, #1
 80014fe:	461c      	mov	r4, r3
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	f7ff fac8 	bl	8000a9c <__aeabi_dcmpge>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <Set_Motor_Speeds+0x1a6>
 8001512:	2300      	movs	r3, #0
 8001514:	461c      	mov	r4, r3
 8001516:	b2e3      	uxtb	r3, r4
 8001518:	f083 0301 	eor.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	73fb      	strb	r3, [r7, #15]
    uint8_t dir_right = (outputRight >= 0) ? 0 : 1;
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <Set_Motor_Speeds+0x248>)
 8001522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001526:	2301      	movs	r3, #1
 8001528:	461c      	mov	r4, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	f7ff fab3 	bl	8000a9c <__aeabi_dcmpge>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <Set_Motor_Speeds+0x1d0>
 800153c:	2300      	movs	r3, #0
 800153e:	461c      	mov	r4, r3
 8001540:	b2e3      	uxtb	r3, r4
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73bb      	strb	r3, [r7, #14]

    Motor_Control((uint32_t)pwm_left, dir_left, (uint32_t)pwm_right, dir_right);
 800154a:	edd7 7a05 	vldr	s15, [r7, #20]
 800154e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001552:	edd7 7a04 	vldr	s15, [r7, #16]
 8001556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	7bf9      	ldrb	r1, [r7, #15]
 800155e:	ee17 2a90 	vmov	r2, s15
 8001562:	ee17 0a10 	vmov	r0, s14
 8001566:	f7ff fe3f 	bl	80011e8 <Motor_Control>
}
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	@ 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	5b22baa6 	.word	0x5b22baa6
 800157c:	3fd8209f 	.word	0x3fd8209f
 8001580:	00000000 	.word	0x00000000
 8001584:	40590000 	.word	0x40590000
 8001588:	00000000 	.word	0x00000000
 800158c:	409a8c00 	.word	0x409a8c00
 8001590:	404e0000 	.word	0x404e0000
 8001594:	20000250 	.word	0x20000250
 8001598:	20000258 	.word	0x20000258
 800159c:	20000240 	.word	0x20000240
 80015a0:	20000270 	.word	0x20000270
 80015a4:	20000248 	.word	0x20000248
 80015a8:	20000278 	.word	0x20000278
 80015ac:	20000160 	.word	0x20000160
 80015b0:	200001d0 	.word	0x200001d0
 80015b4:	20000260 	.word	0x20000260
 80015b8:	20000268 	.word	0x20000268
 80015bc:	00000000 	.word	0x00000000

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f000 fcc4 	bl	8001f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 f8af 	bl	800172c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f000 fac9 	bl	8001b64 <MX_GPIO_Init>
  MX_TIM1_Init();
 80015d2:	f000 f8f5 	bl	80017c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015d6:	f000 f9a3 	bl	8001920 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015da:	f000 fa17 	bl	8001a0c <MX_TIM3_Init>
  MX_TIM4_Init();
 80015de:	f000 fa6b 	bl	8001ab8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015e2:	213c      	movs	r1, #60	@ 0x3c
 80015e4:	4840      	ldr	r0, [pc, #256]	@ (80016e8 <main+0x128>)
 80015e6:	f001 ffcd 	bl	8003584 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80015ea:	213c      	movs	r1, #60	@ 0x3c
 80015ec:	483f      	ldr	r0, [pc, #252]	@ (80016ec <main+0x12c>)
 80015ee:	f001 ffc9 	bl	8003584 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015f2:	2100      	movs	r1, #0
 80015f4:	483e      	ldr	r0, [pc, #248]	@ (80016f0 <main+0x130>)
 80015f6:	f001 fe1f 	bl	8003238 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015fa:	2100      	movs	r1, #0
 80015fc:	483d      	ldr	r0, [pc, #244]	@ (80016f4 <main+0x134>)
 80015fe:	f001 fe1b 	bl	8003238 <HAL_TIM_PWM_Start>

  last_time          = HAL_GetTick();
 8001602:	f000 fd0b 	bl	800201c <HAL_GetTick>
 8001606:	4603      	mov	r3, r0
 8001608:	4a3b      	ldr	r2, [pc, #236]	@ (80016f8 <main+0x138>)
 800160a:	6013      	str	r3, [r2, #0]
  last_left_encoder  = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 800160c:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <main+0x128>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <main+0x13c>)
 8001616:	801a      	strh	r2, [r3, #0]
  last_right_encoder = (int16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8001618:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <main+0x12c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	b21a      	sxth	r2, r3
 8001620:	4b37      	ldr	r3, [pc, #220]	@ (8001700 <main+0x140>)
 8001622:	801a      	strh	r2, [r3, #0]

  PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 12.38, 100.0, 0.0, _PID_CD_DIRECT);
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	ed9f 2b25 	vldr	d2, [pc, #148]	@ 80016c0 <main+0x100>
 800162c:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 80016c8 <main+0x108>
 8001630:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 80016d0 <main+0x110>
 8001634:	4b33      	ldr	r3, [pc, #204]	@ (8001704 <main+0x144>)
 8001636:	4a34      	ldr	r2, [pc, #208]	@ (8001708 <main+0x148>)
 8001638:	4934      	ldr	r1, [pc, #208]	@ (800170c <main+0x14c>)
 800163a:	4835      	ldr	r0, [pc, #212]	@ (8001710 <main+0x150>)
 800163c:	f7ff fb18 	bl	8000c70 <PID2>
  PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 12.38, 100.0, 0.0, _PID_CD_DIRECT);
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 80016c0 <main+0x100>
 8001648:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 80016c8 <main+0x108>
 800164c:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 80016d0 <main+0x110>
 8001650:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <main+0x154>)
 8001652:	4a31      	ldr	r2, [pc, #196]	@ (8001718 <main+0x158>)
 8001654:	4931      	ldr	r1, [pc, #196]	@ (800171c <main+0x15c>)
 8001656:	4832      	ldr	r0, [pc, #200]	@ (8001720 <main+0x160>)
 8001658:	f7ff fb0a 	bl	8000c70 <PID2>

  PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 800165c:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 80016d8 <main+0x118>
 8001660:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 80016e0 <main+0x120>
 8001664:	482a      	ldr	r0, [pc, #168]	@ (8001710 <main+0x150>)
 8001666:	f7ff fc2d 	bl	8000ec4 <PID_SetOutputLimits>
  PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 800166a:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 80016d8 <main+0x118>
 800166e:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80016e0 <main+0x120>
 8001672:	482b      	ldr	r0, [pc, #172]	@ (8001720 <main+0x160>)
 8001674:	f7ff fc26 	bl	8000ec4 <PID_SetOutputLimits>

  PID_SetSampleTime(&pidLeft, 10);
 8001678:	210a      	movs	r1, #10
 800167a:	4825      	ldr	r0, [pc, #148]	@ (8001710 <main+0x150>)
 800167c:	f7ff fd78 	bl	8001170 <PID_SetSampleTime>
  PID_SetSampleTime(&pidRight, 10);
 8001680:	210a      	movs	r1, #10
 8001682:	4827      	ldr	r0, [pc, #156]	@ (8001720 <main+0x160>)
 8001684:	f7ff fd74 	bl	8001170 <PID_SetSampleTime>

  PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8001688:	2101      	movs	r1, #1
 800168a:	4821      	ldr	r0, [pc, #132]	@ (8001710 <main+0x150>)
 800168c:	f7ff fbfc 	bl	8000e88 <PID_SetMode>
  PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001690:	2101      	movs	r1, #1
 8001692:	4823      	ldr	r0, [pc, #140]	@ (8001720 <main+0x160>)
 8001694:	f7ff fbf8 	bl	8000e88 <PID_SetMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Set_Motor_Speeds(vL, vR);
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <main+0x164>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <main+0x168>)
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	eef0 0a47 	vmov.f32	s1, s14
 80016a8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ac:	f7ff fe60 	bl	8001370 <Set_Motor_Speeds>
	  HAL_Delay(10);
 80016b0:	200a      	movs	r0, #10
 80016b2:	f000 fcbf 	bl	8002034 <HAL_Delay>
	  Set_Motor_Speeds(vL, vR);
 80016b6:	bf00      	nop
 80016b8:	e7ee      	b.n	8001698 <main+0xd8>
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w
	...
 80016cc:	40590000 	.word	0x40590000
 80016d0:	5c28f5c3 	.word	0x5c28f5c3
 80016d4:	4028c28f 	.word	0x4028c28f
 80016d8:	00000000 	.word	0x00000000
 80016dc:	409a8c00 	.word	0x409a8c00
 80016e0:	00000000 	.word	0x00000000
 80016e4:	c09a8c00 	.word	0xc09a8c00
 80016e8:	200000c4 	.word	0x200000c4
 80016ec:	20000110 	.word	0x20000110
 80016f0:	2000002c 	.word	0x2000002c
 80016f4:	20000078 	.word	0x20000078
 80016f8:	2000028c 	.word	0x2000028c
 80016fc:	20000288 	.word	0x20000288
 8001700:	2000028a 	.word	0x2000028a
 8001704:	20000250 	.word	0x20000250
 8001708:	20000260 	.word	0x20000260
 800170c:	20000270 	.word	0x20000270
 8001710:	20000160 	.word	0x20000160
 8001714:	20000258 	.word	0x20000258
 8001718:	20000268 	.word	0x20000268
 800171c:	20000278 	.word	0x20000278
 8001720:	200001d0 	.word	0x200001d0
 8001724:	20000280 	.word	0x20000280
 8001728:	20000284 	.word	0x20000284

0800172c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b094      	sub	sp, #80	@ 0x50
 8001730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	2238      	movs	r2, #56	@ 0x38
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f002 ff20 	bl	8004580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 ff10 	bl	8002574 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800175c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175e:	2302      	movs	r3, #2
 8001760:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001762:	2303      	movs	r3, #3
 8001764:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001766:	2302      	movs	r3, #2
 8001768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800176a:	2355      	movs	r3, #85	@ 0x55
 800176c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800176e:	2302      	movs	r3, #2
 8001770:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001776:	2302      	movs	r3, #2
 8001778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177a:	f107 0318 	add.w	r3, r7, #24
 800177e:	4618      	mov	r0, r3
 8001780:	f000 ffac 	bl	80026dc <HAL_RCC_OscConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800178a:	f000 fa4d 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178e:	230f      	movs	r3, #15
 8001790:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001792:	2303      	movs	r3, #3
 8001794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2104      	movs	r1, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 faaa 	bl	8002d00 <HAL_RCC_ClockConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017b2:	f000 fa39 	bl	8001c28 <Error_Handler>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3750      	adds	r7, #80	@ 0x50
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09c      	sub	sp, #112	@ 0x70
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	615a      	str	r2, [r3, #20]
 80017f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2234      	movs	r2, #52	@ 0x34
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fec0 	bl	8004580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001800:	4b45      	ldr	r3, [pc, #276]	@ (8001918 <MX_TIM1_Init+0x158>)
 8001802:	4a46      	ldr	r2, [pc, #280]	@ (800191c <MX_TIM1_Init+0x15c>)
 8001804:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001806:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <MX_TIM1_Init+0x158>)
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b42      	ldr	r3, [pc, #264]	@ (8001918 <MX_TIM1_Init+0x158>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8001812:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <MX_TIM1_Init+0x158>)
 8001814:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001818:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b3f      	ldr	r3, [pc, #252]	@ (8001918 <MX_TIM1_Init+0x158>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001820:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <MX_TIM1_Init+0x158>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b3c      	ldr	r3, [pc, #240]	@ (8001918 <MX_TIM1_Init+0x158>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800182c:	483a      	ldr	r0, [pc, #232]	@ (8001918 <MX_TIM1_Init+0x158>)
 800182e:	f001 fc4b 	bl	80030c8 <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001838:	f000 f9f6 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001840:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001842:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001846:	4619      	mov	r1, r3
 8001848:	4833      	ldr	r0, [pc, #204]	@ (8001918 <MX_TIM1_Init+0x158>)
 800184a:	f002 f83d 	bl	80038c8 <HAL_TIM_ConfigClockSource>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001854:	f000 f9e8 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001858:	482f      	ldr	r0, [pc, #188]	@ (8001918 <MX_TIM1_Init+0x158>)
 800185a:	f001 fc8c 	bl	8003176 <HAL_TIM_PWM_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001864:	f000 f9e0 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001874:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001878:	4619      	mov	r1, r3
 800187a:	4827      	ldr	r0, [pc, #156]	@ (8001918 <MX_TIM1_Init+0x158>)
 800187c:	f002 fd72 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001886:	f000 f9cf 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188a:	2360      	movs	r3, #96	@ 0x60
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001892:	2300      	movs	r3, #0
 8001894:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001896:	2300      	movs	r3, #0
 8001898:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	481a      	ldr	r0, [pc, #104]	@ (8001918 <MX_TIM1_Init+0x158>)
 80018b0:	f001 fef6 	bl	80036a0 <HAL_TIM_PWM_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018ba:	f000 f9b5 	bl	8001c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4807      	ldr	r0, [pc, #28]	@ (8001918 <MX_TIM1_Init+0x158>)
 80018fc:	f002 fdb4 	bl	8004468 <HAL_TIMEx_ConfigBreakDeadTime>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001906:	f000 f98f 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800190a:	4803      	ldr	r0, [pc, #12]	@ (8001918 <MX_TIM1_Init+0x158>)
 800190c:	f000 fa5c 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001910:	bf00      	nop
 8001912:	3770      	adds	r7, #112	@ 0x70
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	2000002c 	.word	0x2000002c
 800191c:	40012c00 	.word	0x40012c00

08001920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08e      	sub	sp, #56	@ 0x38
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001940:	463b      	mov	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 8001954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001958:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800195a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 8001968:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800196c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800197a:	4823      	ldr	r0, [pc, #140]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 800197c:	f001 fba4 	bl	80030c8 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001986:	f000 f94f 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001990:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001994:	4619      	mov	r1, r3
 8001996:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 8001998:	f001 ff96 	bl	80038c8 <HAL_TIM_ConfigClockSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019a2:	f000 f941 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a6:	4818      	ldr	r0, [pc, #96]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 80019a8:	f001 fbe5 	bl	8003176 <HAL_TIM_PWM_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019b2:	f000 f939 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4810      	ldr	r0, [pc, #64]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 80019c6:	f002 fccd 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019d0:	f000 f92a 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d4:	2360      	movs	r3, #96	@ 0x60
 80019d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 80019ec:	f001 fe58 	bl	80036a0 <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019f6:	f000 f917 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019fa:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <MX_TIM2_Init+0xe8>)
 80019fc:	f000 f9e4 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3738      	adds	r7, #56	@ 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000078 	.word	0x20000078

08001a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	@ 0x30
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2224      	movs	r2, #36	@ 0x24
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fdb0 	bl	8004580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a2c:	4a21      	ldr	r2, [pc, #132]	@ (8001ab4 <MX_TIM3_Init+0xa8>)
 8001a2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a50:	2303      	movs	r3, #3
 8001a52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a7c:	f001 fcdc 	bl	8003438 <HAL_TIM_Encoder_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a86:	f000 f8cf 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	@ (8001ab0 <MX_TIM3_Init+0xa4>)
 8001a98:	f002 fc64 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001aa2:	f000 f8c1 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	3730      	adds	r7, #48	@ 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200000c4 	.word	0x200000c4
 8001ab4:	40000400 	.word	0x40000400

08001ab8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	@ 0x30
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	2224      	movs	r2, #36	@ 0x24
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fd5a 	bl	8004580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001ad8:	4a21      	ldr	r2, [pc, #132]	@ (8001b60 <MX_TIM4_Init+0xa8>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001afc:	2303      	movs	r3, #3
 8001afe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001b28:	f001 fc86 	bl	8003438 <HAL_TIM_Encoder_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b32:	f000 f879 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	@ (8001b5c <MX_TIM4_Init+0xa4>)
 8001b44:	f002 fc0e 	bl	8004364 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b4e:	f000 f86b 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	3730      	adds	r7, #48	@ 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000110 	.word	0x20000110
 8001b60:	40000800 	.word	0x40000800

08001b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7a:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	4a28      	ldr	r2, [pc, #160]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b86:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	4a22      	ldr	r2, [pc, #136]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9e:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_GPIO_Init+0xbc>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f240 6106 	movw	r1, #1542	@ 0x606
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bcc:	f000 fcba 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2140      	movs	r1, #64	@ 0x40
 8001bd4:	4813      	ldr	r0, [pc, #76]	@ (8001c24 <MX_GPIO_Init+0xc0>)
 8001bd6:	f000 fcb5 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10;
 8001bda:	f240 6306 	movw	r3, #1542	@ 0x606
 8001bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf6:	f000 fb23 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bfa:	2340      	movs	r3, #64	@ 0x40
 8001bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <MX_GPIO_Init+0xc0>)
 8001c12:	f000 fb15 	bl	8002240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c16:	bf00      	nop
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000800 	.word	0x48000800

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <Error_Handler+0x8>

08001c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_MspInit+0x44>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c6a:	f000 fd27 	bl	80026bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a13      	ldr	r2, [pc, #76]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <HAL_TIM_Base_MspInit+0x60>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <HAL_TIM_Base_MspInit+0x60>)
 8001c94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <HAL_TIM_Base_MspInit+0x60>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ca6:	e010      	b.n	8001cca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb0:	d10b      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_TIM_Base_MspInit+0x60>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	4a09      	ldr	r2, [pc, #36]	@ (8001cdc <HAL_TIM_Base_MspInit+0x60>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_TIM_Base_MspInit+0x60>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	@ 0x30
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <HAL_TIM_Encoder_MspInit+0xdc>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d129      	bne.n	8001d56 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d02:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d06:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	4a28      	ldr	r2, [pc, #160]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d32:	2350      	movs	r3, #80	@ 0x50
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d42:	2302      	movs	r3, #2
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d50:	f000 fa76 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d54:	e02e      	b.n	8001db4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d129      	bne.n	8001db4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	4a10      	ldr	r2, [pc, #64]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d90:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001da2:	230a      	movs	r3, #10
 8001da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db0:	f000 fa46 	bl	8002240 <HAL_GPIO_Init>
}
 8001db4:	bf00      	nop
 8001db6:	3730      	adds	r7, #48	@ 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40000800 	.word	0x40000800

08001dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <HAL_TIM_MspPostInit+0xac>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d11e      	bne.n	8001e28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <HAL_TIM_MspPostInit+0xb0>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	4a22      	ldr	r2, [pc, #136]	@ (8001e78 <HAL_TIM_MspPostInit+0xb0>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df6:	4b20      	ldr	r3, [pc, #128]	@ (8001e78 <HAL_TIM_MspPostInit+0xb0>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e14:	2306      	movs	r3, #6
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e22:	f000 fa0d 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e26:	e021      	b.n	8001e6c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e30:	d11c      	bne.n	8001e6c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_TIM_MspPostInit+0xb0>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_TIM_MspPostInit+0xb0>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_TIM_MspPostInit+0xb0>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e68:	f000 f9ea 	bl	8002240 <HAL_GPIO_Init>
}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	@ 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	40021000 	.word	0x40021000

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x4>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f000 f891 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f00:	480d      	ldr	r0, [pc, #52]	@ (8001f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f04:	f7ff ffea 	bl	8001edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f08:	480c      	ldr	r0, [pc, #48]	@ (8001f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0a:	490d      	ldr	r1, [pc, #52]	@ (8001f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <LoopForever+0xe>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f20:	4c0a      	ldr	r4, [pc, #40]	@ (8001f4c <LoopForever+0x16>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f002 fb2f 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f32:	f7ff fb45 	bl	80015c0 <main>

08001f36 <LoopForever>:

LoopForever:
    b LoopForever
 8001f36:	e7fe      	b.n	8001f36 <LoopForever>
  ldr   r0, =_estack
 8001f38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f44:	08004704 	.word	0x08004704
  ldr r2, =_sbss
 8001f48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f4c:	20000294 	.word	0x20000294

08001f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC1_2_IRQHandler>

08001f52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 f93d 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f80e 	bl	8001f84 <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	e001      	b.n	8001f78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f74:	f7ff fe5e 	bl	8001c34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f78:	79fb      	ldrb	r3, [r7, #7]

}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_InitTick+0x68>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d022      	beq.n	8001fde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_InitTick+0x6c>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <HAL_InitTick+0x68>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f93a 	bl	8002226 <HAL_SYSTICK_Config>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	d809      	bhi.n	8001fd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fc6:	f000 f914 	bl	80021f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <HAL_InitTick+0x70>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e007      	b.n	8001fe2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e004      	b.n	8001fe2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e001      	b.n	8001fe2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000008 	.word	0x20000008
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_IncTick+0x1c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_IncTick+0x20>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4413      	add	r3, r2
 8002006:	4a03      	ldr	r2, [pc, #12]	@ (8002014 <HAL_IncTick+0x1c>)
 8002008:	6013      	str	r3, [r2, #0]
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	20000290 	.word	0x20000290
 8002018:	20000008 	.word	0x20000008

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000290 	.word	0x20000290

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800204c:	d004      	beq.n	8002058 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_Delay+0x40>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002058:	bf00      	nop
 800205a:	f7ff ffdf 	bl	800201c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	429a      	cmp	r2, r3
 8002068:	d8f7      	bhi.n	800205a <HAL_Delay+0x26>
  {
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000008 	.word	0x20000008

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	@ (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	@ (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	@ 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021bc:	f7ff ff8e 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff47 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff5e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff90 	bl	8002130 <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5f 	bl	80020dc <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffb2 	bl	8002198 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800224e:	e15a      	b.n	8002506 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 814c 	beq.w	8002500 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d005      	beq.n	8002280 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800227c:	2b02      	cmp	r3, #2
 800227e:	d130      	bne.n	80022e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0201 	and.w	r2, r3, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d017      	beq.n	800231e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d123      	bne.n	8002372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80a6 	beq.w	8002500 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002524 <HAL_GPIO_Init+0x2e4>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002524 <HAL_GPIO_Init+0x2e4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c0:	4b58      	ldr	r3, [pc, #352]	@ (8002524 <HAL_GPIO_Init+0x2e4>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023cc:	4a56      	ldr	r2, [pc, #344]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023f6:	d01f      	beq.n	8002438 <HAL_GPIO_Init+0x1f8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a4c      	ldr	r2, [pc, #304]	@ (800252c <HAL_GPIO_Init+0x2ec>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d019      	beq.n	8002434 <HAL_GPIO_Init+0x1f4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a4b      	ldr	r2, [pc, #300]	@ (8002530 <HAL_GPIO_Init+0x2f0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_GPIO_Init+0x1f0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a4a      	ldr	r2, [pc, #296]	@ (8002534 <HAL_GPIO_Init+0x2f4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00d      	beq.n	800242c <HAL_GPIO_Init+0x1ec>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a49      	ldr	r2, [pc, #292]	@ (8002538 <HAL_GPIO_Init+0x2f8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d007      	beq.n	8002428 <HAL_GPIO_Init+0x1e8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a48      	ldr	r2, [pc, #288]	@ (800253c <HAL_GPIO_Init+0x2fc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_GPIO_Init+0x1e4>
 8002420:	2305      	movs	r3, #5
 8002422:	e00a      	b.n	800243a <HAL_GPIO_Init+0x1fa>
 8002424:	2306      	movs	r3, #6
 8002426:	e008      	b.n	800243a <HAL_GPIO_Init+0x1fa>
 8002428:	2304      	movs	r3, #4
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x1fa>
 800242c:	2303      	movs	r3, #3
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x1fa>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x1fa>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x1fa>
 8002438:	2300      	movs	r3, #0
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244a:	4937      	ldr	r1, [pc, #220]	@ (8002528 <HAL_GPIO_Init+0x2e8>)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002458:	4b39      	ldr	r3, [pc, #228]	@ (8002540 <HAL_GPIO_Init+0x300>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800247c:	4a30      	ldr	r2, [pc, #192]	@ (8002540 <HAL_GPIO_Init+0x300>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_GPIO_Init+0x300>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a6:	4a26      	ldr	r2, [pc, #152]	@ (8002540 <HAL_GPIO_Init+0x300>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80024ac:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_GPIO_Init+0x300>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <HAL_GPIO_Init+0x300>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_GPIO_Init+0x300>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024fa:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_GPIO_Init+0x300>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	f47f ae9d 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000
 800252c:	48000400 	.word	0x48000400
 8002530:	48000800 	.word	0x48000800
 8002534:	48000c00 	.word	0x48000c00
 8002538:	48001000 	.word	0x48001000
 800253c:	48001400 	.word	0x48001400
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002560:	e002      	b.n	8002568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d141      	bne.n	8002606 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002582:	4b4b      	ldr	r3, [pc, #300]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258e:	d131      	bne.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002590:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002596:	4a46      	ldr	r2, [pc, #280]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800259c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a0:	4b43      	ldr	r3, [pc, #268]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025a8:	4a41      	ldr	r2, [pc, #260]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025b0:	4b40      	ldr	r3, [pc, #256]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2232      	movs	r2, #50	@ 0x32
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	4a3f      	ldr	r2, [pc, #252]	@ (80026b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	3301      	adds	r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c6:	e002      	b.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ce:	4b38      	ldr	r3, [pc, #224]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025da:	d102      	bne.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f2      	bne.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e2:	4b33      	ldr	r3, [pc, #204]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ee:	d158      	bne.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e057      	b.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025f4:	4b2e      	ldr	r3, [pc, #184]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025fa:	4a2d      	ldr	r2, [pc, #180]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002600:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002604:	e04d      	b.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800260c:	d141      	bne.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800261a:	d131      	bne.n	8002680 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800261c:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002622:	4a23      	ldr	r2, [pc, #140]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002628:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800262c:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002634:	4a1e      	ldr	r2, [pc, #120]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2232      	movs	r2, #50	@ 0x32
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	4a1c      	ldr	r2, [pc, #112]	@ (80026b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	0c9b      	lsrs	r3, r3, #18
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002652:	e002      	b.n	800265a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3b01      	subs	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002666:	d102      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f2      	bne.n	8002654 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266e:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800267a:	d112      	bne.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e011      	b.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002686:	4a0a      	ldr	r2, [pc, #40]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002690:	e007      	b.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002692:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40007000 	.word	0x40007000
 80026b4:	20000000 	.word	0x20000000
 80026b8:	431bde83 	.word	0x431bde83

080026bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a04      	ldr	r2, [pc, #16]	@ (80026d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80026c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ca:	6093      	str	r3, [r2, #8]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e2fe      	b.n	8002cec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fa:	4b97      	ldr	r3, [pc, #604]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002704:	4b94      	ldr	r3, [pc, #592]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d102      	bne.n	800271a <HAL_RCC_OscConfig+0x3e>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d002      	beq.n	8002720 <HAL_RCC_OscConfig+0x44>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b8d      	ldr	r3, [pc, #564]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d157      	bne.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e2d9      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x74>
 8002742:	4b85      	ldr	r3, [pc, #532]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a84      	ldr	r2, [pc, #528]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b7f      	ldr	r3, [pc, #508]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7e      	ldr	r2, [pc, #504]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b7c      	ldr	r3, [pc, #496]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7b      	ldr	r2, [pc, #492]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002774:	4b78      	ldr	r3, [pc, #480]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a77      	ldr	r2, [pc, #476]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b75      	ldr	r3, [pc, #468]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a74      	ldr	r2, [pc, #464]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff fc42 	bl	800201c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff fc3e 	bl	800201c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e29e      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xc0>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7ff fc2e 	bl	800201c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff fc2a 	bl	800201c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	@ 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e28a      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d6:	4b60      	ldr	r3, [pc, #384]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d075      	beq.n	80028de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f2:	4b59      	ldr	r3, [pc, #356]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027fc:	4b56      	ldr	r3, [pc, #344]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d102      	bne.n	8002812 <HAL_RCC_OscConfig+0x136>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d002      	beq.n	8002818 <HAL_RCC_OscConfig+0x13c>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d11f      	bne.n	8002858 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002818:	4b4f      	ldr	r3, [pc, #316]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_OscConfig+0x154>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e25d      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002830:	4b49      	ldr	r3, [pc, #292]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	4946      	ldr	r1, [pc, #280]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002844:	4b45      	ldr	r3, [pc, #276]	@ (800295c <HAL_RCC_OscConfig+0x280>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fb9b 	bl	8001f84 <HAL_InitTick>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d043      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e249      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d023      	beq.n	80028a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002860:	4b3d      	ldr	r3, [pc, #244]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3c      	ldr	r2, [pc, #240]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff fbd6 	bl	800201c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002874:	f7ff fbd2 	bl	800201c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e232      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002886:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	061b      	lsls	r3, r3, #24
 80028a0:	492d      	ldr	r1, [pc, #180]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
 80028a6:	e01a      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff fbb2 	bl	800201c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028bc:	f7ff fbae 	bl	800201c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e20e      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x1e0>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d041      	beq.n	800296e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01c      	beq.n	800292c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f8:	4a17      	ldr	r2, [pc, #92]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7ff fb8b 	bl	800201c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7ff fb87 	bl	800201c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1e7      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291c:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 800291e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0ef      	beq.n	800290a <HAL_RCC_OscConfig+0x22e>
 800292a:	e020      	b.n	800296e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002932:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <HAL_RCC_OscConfig+0x27c>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7ff fb6e 	bl	800201c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002942:	e00d      	b.n	8002960 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7ff fb6a 	bl	800201c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d906      	bls.n	8002960 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1ca      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002960:	4b8c      	ldr	r3, [pc, #560]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1ea      	bne.n	8002944 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80a6 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002980:	4b84      	ldr	r3, [pc, #528]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_OscConfig+0x2b4>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x2b6>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b7f      	ldr	r3, [pc, #508]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b79      	ldr	r3, [pc, #484]	@ (8002b98 <HAL_RCC_OscConfig+0x4bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d118      	bne.n	80029f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029be:	4b76      	ldr	r3, [pc, #472]	@ (8002b98 <HAL_RCC_OscConfig+0x4bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a75      	ldr	r2, [pc, #468]	@ (8002b98 <HAL_RCC_OscConfig+0x4bc>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7ff fb27 	bl	800201c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7ff fb23 	bl	800201c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e183      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b98 <HAL_RCC_OscConfig+0x4bc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d108      	bne.n	8002a0a <HAL_RCC_OscConfig+0x32e>
 80029f8:	4b66      	ldr	r3, [pc, #408]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	4a65      	ldr	r2, [pc, #404]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a08:	e024      	b.n	8002a54 <HAL_RCC_OscConfig+0x378>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d110      	bne.n	8002a34 <HAL_RCC_OscConfig+0x358>
 8002a12:	4b60      	ldr	r3, [pc, #384]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a18:	4a5e      	ldr	r2, [pc, #376]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a22:	4b5c      	ldr	r3, [pc, #368]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a28:	4a5a      	ldr	r2, [pc, #360]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a32:	e00f      	b.n	8002a54 <HAL_RCC_OscConfig+0x378>
 8002a34:	4b57      	ldr	r3, [pc, #348]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	4a56      	ldr	r2, [pc, #344]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a44:	4b53      	ldr	r3, [pc, #332]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	4a52      	ldr	r2, [pc, #328]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d016      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7ff fade 	bl	800201c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7ff fada 	bl	800201c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e138      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7a:	4b46      	ldr	r3, [pc, #280]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ed      	beq.n	8002a64 <HAL_RCC_OscConfig+0x388>
 8002a88:	e015      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7ff fac7 	bl	800201c <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7ff fac3 	bl	800201c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e121      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ed      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ab6:	7ffb      	ldrb	r3, [r7, #31]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b35      	ldr	r3, [pc, #212]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac0:	4a34      	ldr	r2, [pc, #208]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d03c      	beq.n	8002b4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002adc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff fa96 	bl	800201c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af4:	f7ff fa92 	bl	800201c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0f2      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b06:	4b23      	ldr	r3, [pc, #140]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ef      	beq.n	8002af4 <HAL_RCC_OscConfig+0x418>
 8002b14:	e01b      	b.n	8002b4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b16:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7ff fa79 	bl	800201c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b2e:	f7ff fa75 	bl	800201c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0d5      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b40:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1ef      	bne.n	8002b2e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80c9 	beq.w	8002cea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b58:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	f000 8083 	beq.w	8002c6c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d15e      	bne.n	8002c2c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <HAL_RCC_OscConfig+0x4b8>)
 8002b74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fa4f 	bl	800201c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b80:	e00c      	b.n	8002b9c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7ff fa4b 	bl	800201c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d905      	bls.n	8002b9c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0ab      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	4b55      	ldr	r3, [pc, #340]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ec      	bne.n	8002b82 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba8:	4b52      	ldr	r3, [pc, #328]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4b52      	ldr	r3, [pc, #328]	@ (8002cf8 <HAL_RCC_OscConfig+0x61c>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6a11      	ldr	r1, [r2, #32]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	4311      	orrs	r1, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002bc2:	0212      	lsls	r2, r2, #8
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002bca:	0852      	lsrs	r2, r2, #1
 8002bcc:	3a01      	subs	r2, #1
 8002bce:	0552      	lsls	r2, r2, #21
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bd6:	0852      	lsrs	r2, r2, #1
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	0652      	lsls	r2, r2, #25
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002be2:	06d2      	lsls	r2, r2, #27
 8002be4:	430a      	orrs	r2, r1
 8002be6:	4943      	ldr	r1, [pc, #268]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a40      	ldr	r2, [pc, #256]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7ff fa0a 	bl	800201c <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7ff fa06 	bl	800201c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e066      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b35      	ldr	r3, [pc, #212]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x530>
 8002c2a:	e05e      	b.n	8002cea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2c:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a30      	ldr	r2, [pc, #192]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002c32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7ff f9f0 	bl	800201c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7ff f9ec 	bl	800201c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e04c      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c52:	4b28      	ldr	r3, [pc, #160]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c5e:	4b25      	ldr	r3, [pc, #148]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4924      	ldr	r1, [pc, #144]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002c64:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <HAL_RCC_OscConfig+0x620>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
 8002c6a:	e03e      	b.n	8002cea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e039      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c78:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <HAL_RCC_OscConfig+0x618>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0203 	and.w	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d12c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	3b01      	subs	r3, #1
 8002c98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d123      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d11b      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d113      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3720      	adds	r7, #32
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	019f800c 	.word	0x019f800c
 8002cfc:	feeefffc 	.word	0xfeeefffc

08002d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e11e      	b.n	8002f56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b91      	ldr	r3, [pc, #580]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b8e      	ldr	r3, [pc, #568]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	498c      	ldr	r1, [pc, #560]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b8a      	ldr	r3, [pc, #552]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e106      	b.n	8002f56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d073      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d129      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5c:	4b81      	ldr	r3, [pc, #516]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0f4      	b.n	8002f56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d6c:	f000 f966 	bl	800303c <RCC_GetSysClockFreqFromPLLSource>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4a7c      	ldr	r2, [pc, #496]	@ (8002f68 <HAL_RCC_ClockConfig+0x268>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d93f      	bls.n	8002dfa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d033      	beq.n	8002dfa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d12f      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d9a:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002da2:	4a70      	ldr	r2, [pc, #448]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e024      	b.n	8002dfa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0c6      	b.n	8002f56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0be      	b.n	8002f56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002dd8:	f000 f8ce 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4a61      	ldr	r2, [pc, #388]	@ (8002f68 <HAL_RCC_ClockConfig+0x268>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d909      	bls.n	8002dfa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002de6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dee:	4a5d      	ldr	r2, [pc, #372]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002df4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 0203 	bic.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4957      	ldr	r1, [pc, #348]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0c:	f7ff f906 	bl	800201c <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e14:	f7ff f902 	bl	800201c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e095      	b.n	8002f56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 020c 	and.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d1eb      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d023      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e54:	4b43      	ldr	r3, [pc, #268]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a42      	ldr	r2, [pc, #264]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e74:	4a3b      	ldr	r2, [pc, #236]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4936      	ldr	r1, [pc, #216]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b80      	cmp	r3, #128	@ 0x80
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e96:	4b33      	ldr	r3, [pc, #204]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4a32      	ldr	r2, [pc, #200]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d21d      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 020f 	bic.w	r2, r3, #15
 8002eb8:	4929      	ldr	r1, [pc, #164]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ec0:	f7ff f8ac 	bl	800201c <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7ff f8a8 	bl	800201c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e03b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b20      	ldr	r3, [pc, #128]	@ (8002f60 <HAL_RCC_ClockConfig+0x260>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1ed      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4917      	ldr	r1, [pc, #92]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f16:	4b13      	ldr	r3, [pc, #76]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	490f      	ldr	r1, [pc, #60]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2a:	f000 f825 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <HAL_RCC_ClockConfig+0x264>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <HAL_RCC_ClockConfig+0x26c>)
 8002f3c:	5ccb      	ldrb	r3, [r1, r3]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <HAL_RCC_ClockConfig+0x270>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <HAL_RCC_ClockConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f818 	bl	8001f84 <HAL_InitTick>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40022000 	.word	0x40022000
 8002f64:	40021000 	.word	0x40021000
 8002f68:	04c4b400 	.word	0x04c4b400
 8002f6c:	080046ec 	.word	0x080046ec
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000004 	.word	0x20000004

08002f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e047      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d102      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f9c:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e03e      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002fa2:	4b23      	ldr	r3, [pc, #140]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d136      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fae:	4b20      	ldr	r3, [pc, #128]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003038 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	4a16      	ldr	r2, [pc, #88]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fd6:	68d2      	ldr	r2, [r2, #12]
 8002fd8:	0a12      	lsrs	r2, r2, #8
 8002fda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
      break;
 8002fe4:	e00c      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe6:	4a13      	ldr	r2, [pc, #76]	@ (8003034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	0a12      	lsrs	r2, r2, #8
 8002ff4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
      break;
 8002ffe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0e5b      	lsrs	r3, r3, #25
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	3301      	adds	r3, #1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e001      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003020:	693b      	ldr	r3, [r7, #16]
}
 8003022:	4618      	mov	r0, r3
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003042:	4b1e      	ldr	r3, [pc, #120]	@ (80030bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d10c      	bne.n	800307a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003060:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	4a14      	ldr	r2, [pc, #80]	@ (80030bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800306a:	68d2      	ldr	r2, [r2, #12]
 800306c:	0a12      	lsrs	r2, r2, #8
 800306e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	617b      	str	r3, [r7, #20]
    break;
 8003078:	e00c      	b.n	8003094 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800307a:	4a12      	ldr	r2, [pc, #72]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	4a0e      	ldr	r2, [pc, #56]	@ (80030bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003084:	68d2      	ldr	r2, [r2, #12]
 8003086:	0a12      	lsrs	r2, r2, #8
 8003088:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
    break;
 8003092:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003094:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0e5b      	lsrs	r3, r3, #25
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030ae:	687b      	ldr	r3, [r7, #4]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40021000 	.word	0x40021000
 80030c0:	007a1200 	.word	0x007a1200
 80030c4:	00f42400 	.word	0x00f42400

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e049      	b.n	800316e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fdc4 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fcd8 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e049      	b.n	800321c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f841 	bl	8003224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f000 fc81 	bl	8003abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_TIM_PWM_Start+0x24>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e03c      	b.n	80032d6 <HAL_TIM_PWM_Start+0x9e>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b04      	cmp	r3, #4
 8003260:	d109      	bne.n	8003276 <HAL_TIM_PWM_Start+0x3e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e02f      	b.n	80032d6 <HAL_TIM_PWM_Start+0x9e>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d109      	bne.n	8003290 <HAL_TIM_PWM_Start+0x58>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e022      	b.n	80032d6 <HAL_TIM_PWM_Start+0x9e>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d109      	bne.n	80032aa <HAL_TIM_PWM_Start+0x72>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e015      	b.n	80032d6 <HAL_TIM_PWM_Start+0x9e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d109      	bne.n	80032c4 <HAL_TIM_PWM_Start+0x8c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e008      	b.n	80032d6 <HAL_TIM_PWM_Start+0x9e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e097      	b.n	800340e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0xb6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032ec:	e023      	b.n	8003336 <HAL_TIM_PWM_Start+0xfe>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0xc6>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032fc:	e01b      	b.n	8003336 <HAL_TIM_PWM_Start+0xfe>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0xd6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800330c:	e013      	b.n	8003336 <HAL_TIM_PWM_Start+0xfe>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d104      	bne.n	800331e <HAL_TIM_PWM_Start+0xe6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800331c:	e00b      	b.n	8003336 <HAL_TIM_PWM_Start+0xfe>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b10      	cmp	r3, #16
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start+0xf6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800332c:	e003      	b.n	8003336 <HAL_TIM_PWM_Start+0xfe>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 ffea 	bl	8004318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a33      	ldr	r2, [pc, #204]	@ (8003418 <HAL_TIM_PWM_Start+0x1e0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_TIM_PWM_Start+0x13e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a32      	ldr	r2, [pc, #200]	@ (800341c <HAL_TIM_PWM_Start+0x1e4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00e      	beq.n	8003376 <HAL_TIM_PWM_Start+0x13e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_TIM_PWM_Start+0x1e8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_TIM_PWM_Start+0x13e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <HAL_TIM_PWM_Start+0x1ec>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d004      	beq.n	8003376 <HAL_TIM_PWM_Start+0x13e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2d      	ldr	r2, [pc, #180]	@ (8003428 <HAL_TIM_PWM_Start+0x1f0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_TIM_PWM_Start+0x142>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_TIM_PWM_Start+0x144>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800338e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a20      	ldr	r2, [pc, #128]	@ (8003418 <HAL_TIM_PWM_Start+0x1e0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d018      	beq.n	80033cc <HAL_TIM_PWM_Start+0x194>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d013      	beq.n	80033cc <HAL_TIM_PWM_Start+0x194>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a20      	ldr	r2, [pc, #128]	@ (800342c <HAL_TIM_PWM_Start+0x1f4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00e      	beq.n	80033cc <HAL_TIM_PWM_Start+0x194>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003430 <HAL_TIM_PWM_Start+0x1f8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_TIM_PWM_Start+0x194>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a17      	ldr	r2, [pc, #92]	@ (800341c <HAL_TIM_PWM_Start+0x1e4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_TIM_PWM_Start+0x194>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a16      	ldr	r2, [pc, #88]	@ (8003420 <HAL_TIM_PWM_Start+0x1e8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d115      	bne.n	80033f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <HAL_TIM_PWM_Start+0x1fc>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d015      	beq.n	800340a <HAL_TIM_PWM_Start+0x1d2>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d011      	beq.n	800340a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	e008      	b.n	800340a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e000      	b.n	800340c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40013400 	.word	0x40013400
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	00010007 	.word	0x00010007

08003438 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e097      	b.n	800357c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fe fc3d 	bl	8001ce0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800347c:	f023 0307 	bic.w	r3, r3, #7
 8003480:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f000 fb15 	bl	8003abc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	4313      	orrs	r3, r2
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80034d8:	f023 030c 	bic.w	r3, r3, #12
 80034dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	4313      	orrs	r3, r2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	011a      	lsls	r2, r3, #4
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	031b      	lsls	r3, r3, #12
 8003508:	4313      	orrs	r3, r2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800351e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4313      	orrs	r3, r2
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003594:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800359c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d110      	bne.n	80035d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80035ba:	7b7b      	ldrb	r3, [r7, #13]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e069      	b.n	8003698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035d4:	e031      	b.n	800363a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d110      	bne.n	80035fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80035dc:	7bbb      	ldrb	r3, [r7, #14]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80035e2:	7b3b      	ldrb	r3, [r7, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d001      	beq.n	80035ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e055      	b.n	8003698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035fc:	e01d      	b.n	800363a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d105      	bne.n	8003616 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800360a:	7b7b      	ldrb	r3, [r7, #13]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003610:	7b3b      	ldrb	r3, [r7, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e03e      	b.n	8003698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_Encoder_Start+0xc4>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d008      	beq.n	8003658 <HAL_TIM_Encoder_Start+0xd4>
 8003646:	e00f      	b.n	8003668 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fe61 	bl	8004318 <TIM_CCxChannelCmd>
      break;
 8003656:	e016      	b.n	8003686 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2201      	movs	r2, #1
 800365e:	2104      	movs	r1, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fe59 	bl	8004318 <TIM_CCxChannelCmd>
      break;
 8003666:	e00e      	b.n	8003686 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fe51 	bl	8004318 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	2104      	movs	r1, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fe4a 	bl	8004318 <TIM_CCxChannelCmd>
      break;
 8003684:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e0ff      	b.n	80038be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b14      	cmp	r3, #20
 80036ca:	f200 80f0 	bhi.w	80038ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	08003729 	.word	0x08003729
 80036d8:	080038af 	.word	0x080038af
 80036dc:	080038af 	.word	0x080038af
 80036e0:	080038af 	.word	0x080038af
 80036e4:	08003769 	.word	0x08003769
 80036e8:	080038af 	.word	0x080038af
 80036ec:	080038af 	.word	0x080038af
 80036f0:	080038af 	.word	0x080038af
 80036f4:	080037ab 	.word	0x080037ab
 80036f8:	080038af 	.word	0x080038af
 80036fc:	080038af 	.word	0x080038af
 8003700:	080038af 	.word	0x080038af
 8003704:	080037eb 	.word	0x080037eb
 8003708:	080038af 	.word	0x080038af
 800370c:	080038af 	.word	0x080038af
 8003710:	080038af 	.word	0x080038af
 8003714:	0800382d 	.word	0x0800382d
 8003718:	080038af 	.word	0x080038af
 800371c:	080038af 	.word	0x080038af
 8003720:	080038af 	.word	0x080038af
 8003724:	0800386d 	.word	0x0800386d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa60 	bl	8003bf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0208 	orr.w	r2, r2, #8
 8003742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	619a      	str	r2, [r3, #24]
      break;
 8003766:	e0a5      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fad0 	bl	8003d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6999      	ldr	r1, [r3, #24]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	021a      	lsls	r2, r3, #8
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	619a      	str	r2, [r3, #24]
      break;
 80037a8:	e084      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fb39 	bl	8003e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0208 	orr.w	r2, r2, #8
 80037c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0204 	bic.w	r2, r2, #4
 80037d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69d9      	ldr	r1, [r3, #28]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	61da      	str	r2, [r3, #28]
      break;
 80037e8:	e064      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fba1 	bl	8003f38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69d9      	ldr	r1, [r3, #28]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	021a      	lsls	r2, r3, #8
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	61da      	str	r2, [r3, #28]
      break;
 800382a:	e043      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fc0a 	bl	800404c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0208 	orr.w	r2, r2, #8
 8003846:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800386a:	e023      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fc4e 	bl	8004114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003886:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003896:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	021a      	lsls	r2, r3, #8
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80038ac:	e002      	b.n	80038b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
      break;
 80038b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop

080038c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_ConfigClockSource+0x1c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0de      	b.n	8003aa2 <HAL_TIM_ConfigClockSource+0x1da>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003902:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800390e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a63      	ldr	r2, [pc, #396]	@ (8003aac <HAL_TIM_ConfigClockSource+0x1e4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	f000 80a9 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003924:	4a61      	ldr	r2, [pc, #388]	@ (8003aac <HAL_TIM_ConfigClockSource+0x1e4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	f200 80ae 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800392c:	4a60      	ldr	r2, [pc, #384]	@ (8003ab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	f000 80a1 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003934:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	f200 80a6 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800393c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800393e:	4293      	cmp	r3, r2
 8003940:	f000 8099 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003944:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003946:	4293      	cmp	r3, r2
 8003948:	f200 809e 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800394c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ab8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	f000 8091 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003954:	4a58      	ldr	r2, [pc, #352]	@ (8003ab8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	f200 8096 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800395c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003960:	f000 8089 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 8003964:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003968:	f200 808e 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003970:	d03e      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x128>
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003976:	f200 8087 	bhi.w	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 800397a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397e:	f000 8086 	beq.w	8003a8e <HAL_TIM_ConfigClockSource+0x1c6>
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003986:	d87f      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003988:	2b70      	cmp	r3, #112	@ 0x70
 800398a:	d01a      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xfa>
 800398c:	2b70      	cmp	r3, #112	@ 0x70
 800398e:	d87b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003990:	2b60      	cmp	r3, #96	@ 0x60
 8003992:	d050      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x16e>
 8003994:	2b60      	cmp	r3, #96	@ 0x60
 8003996:	d877      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 8003998:	2b50      	cmp	r3, #80	@ 0x50
 800399a:	d03c      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x14e>
 800399c:	2b50      	cmp	r3, #80	@ 0x50
 800399e:	d873      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d058      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x18e>
 80039a4:	2b40      	cmp	r3, #64	@ 0x40
 80039a6:	d86f      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80039a8:	2b30      	cmp	r3, #48	@ 0x30
 80039aa:	d064      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80039ac:	2b30      	cmp	r3, #48	@ 0x30
 80039ae:	d86b      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d060      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d867      	bhi.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05c      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d05a      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x1ae>
 80039c0:	e062      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039d2:	f000 fc81 	bl	80042d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	609a      	str	r2, [r3, #8]
      break;
 80039ee:	e04f      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a00:	f000 fc6a 	bl	80042d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a12:	609a      	str	r2, [r3, #8]
      break;
 8003a14:	e03c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	461a      	mov	r2, r3
 8003a24:	f000 fbdc 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2150      	movs	r1, #80	@ 0x50
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fc35 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003a34:	e02c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 fbfb 	bl	800423e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2160      	movs	r1, #96	@ 0x60
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fc25 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003a54:	e01c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 fbbc 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2140      	movs	r1, #64	@ 0x40
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fc15 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003a74:	e00c      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f000 fc0c 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003a86:	e003      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e000      	b.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	00100070 	.word	0x00100070
 8003ab0:	00100040 	.word	0x00100040
 8003ab4:	00100030 	.word	0x00100030
 8003ab8:	00100020 	.word	0x00100020

08003abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a42      	ldr	r2, [pc, #264]	@ (8003bd8 <TIM_Base_SetConfig+0x11c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00f      	beq.n	8003af4 <TIM_Base_SetConfig+0x38>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ada:	d00b      	beq.n	8003af4 <TIM_Base_SetConfig+0x38>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a3f      	ldr	r2, [pc, #252]	@ (8003bdc <TIM_Base_SetConfig+0x120>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_Base_SetConfig+0x38>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8003be0 <TIM_Base_SetConfig+0x124>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_Base_SetConfig+0x38>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a3d      	ldr	r2, [pc, #244]	@ (8003be4 <TIM_Base_SetConfig+0x128>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d108      	bne.n	8003b06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a33      	ldr	r2, [pc, #204]	@ (8003bd8 <TIM_Base_SetConfig+0x11c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d01b      	beq.n	8003b46 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b14:	d017      	beq.n	8003b46 <TIM_Base_SetConfig+0x8a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a30      	ldr	r2, [pc, #192]	@ (8003bdc <TIM_Base_SetConfig+0x120>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d013      	beq.n	8003b46 <TIM_Base_SetConfig+0x8a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2f      	ldr	r2, [pc, #188]	@ (8003be0 <TIM_Base_SetConfig+0x124>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00f      	beq.n	8003b46 <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2e      	ldr	r2, [pc, #184]	@ (8003be4 <TIM_Base_SetConfig+0x128>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2d      	ldr	r2, [pc, #180]	@ (8003be8 <TIM_Base_SetConfig+0x12c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d007      	beq.n	8003b46 <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2c      	ldr	r2, [pc, #176]	@ (8003bec <TIM_Base_SetConfig+0x130>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_Base_SetConfig+0x8a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <TIM_Base_SetConfig+0x134>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <TIM_Base_SetConfig+0x11c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00f      	beq.n	8003ba4 <TIM_Base_SetConfig+0xe8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a17      	ldr	r2, [pc, #92]	@ (8003be4 <TIM_Base_SetConfig+0x128>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0xe8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <TIM_Base_SetConfig+0x12c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0xe8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a15      	ldr	r2, [pc, #84]	@ (8003bec <TIM_Base_SetConfig+0x130>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0xe8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a14      	ldr	r2, [pc, #80]	@ (8003bf0 <TIM_Base_SetConfig+0x134>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d103      	bne.n	8003bac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f023 0201 	bic.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 0302 	bic.w	r3, r3, #2
 8003c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d00 <TIM_OC1_SetConfig+0x10c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00f      	beq.n	8003c74 <TIM_OC1_SetConfig+0x80>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a2b      	ldr	r2, [pc, #172]	@ (8003d04 <TIM_OC1_SetConfig+0x110>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00b      	beq.n	8003c74 <TIM_OC1_SetConfig+0x80>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <TIM_OC1_SetConfig+0x114>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d007      	beq.n	8003c74 <TIM_OC1_SetConfig+0x80>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a29      	ldr	r2, [pc, #164]	@ (8003d0c <TIM_OC1_SetConfig+0x118>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <TIM_OC1_SetConfig+0x80>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a28      	ldr	r2, [pc, #160]	@ (8003d10 <TIM_OC1_SetConfig+0x11c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10c      	bne.n	8003c8e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0308 	bic.w	r3, r3, #8
 8003c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0304 	bic.w	r3, r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	@ (8003d00 <TIM_OC1_SetConfig+0x10c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00f      	beq.n	8003cb6 <TIM_OC1_SetConfig+0xc2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1a      	ldr	r2, [pc, #104]	@ (8003d04 <TIM_OC1_SetConfig+0x110>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00b      	beq.n	8003cb6 <TIM_OC1_SetConfig+0xc2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <TIM_OC1_SetConfig+0x114>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_OC1_SetConfig+0xc2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <TIM_OC1_SetConfig+0x118>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_OC1_SetConfig+0xc2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <TIM_OC1_SetConfig+0x11c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d111      	bne.n	8003cda <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800

08003d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f023 0210 	bic.w	r2, r3, #16
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0320 	bic.w	r3, r3, #32
 8003d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a28      	ldr	r2, [pc, #160]	@ (8003e14 <TIM_OC2_SetConfig+0x100>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC2_SetConfig+0x6c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a27      	ldr	r2, [pc, #156]	@ (8003e18 <TIM_OC2_SetConfig+0x104>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10d      	bne.n	8003d9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <TIM_OC2_SetConfig+0x100>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00f      	beq.n	8003dc4 <TIM_OC2_SetConfig+0xb0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <TIM_OC2_SetConfig+0x104>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00b      	beq.n	8003dc4 <TIM_OC2_SetConfig+0xb0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <TIM_OC2_SetConfig+0x108>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d007      	beq.n	8003dc4 <TIM_OC2_SetConfig+0xb0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <TIM_OC2_SetConfig+0x10c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_OC2_SetConfig+0xb0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <TIM_OC2_SetConfig+0x110>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d113      	bne.n	8003dec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	621a      	str	r2, [r3, #32]
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40013400 	.word	0x40013400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800

08003e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <TIM_OC3_SetConfig+0xfc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_OC3_SetConfig+0x6a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	@ (8003f28 <TIM_OC3_SetConfig+0x100>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d10d      	bne.n	8003eae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <TIM_OC3_SetConfig+0xfc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00f      	beq.n	8003ed6 <TIM_OC3_SetConfig+0xae>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f28 <TIM_OC3_SetConfig+0x100>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <TIM_OC3_SetConfig+0xae>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <TIM_OC3_SetConfig+0x104>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <TIM_OC3_SetConfig+0xae>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <TIM_OC3_SetConfig+0x108>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_OC3_SetConfig+0xae>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <TIM_OC3_SetConfig+0x10c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d113      	bne.n	8003efe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	621a      	str	r2, [r3, #32]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40014400 	.word	0x40014400
 8003f34:	40014800 	.word	0x40014800

08003f38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a28      	ldr	r2, [pc, #160]	@ (8004038 <TIM_OC4_SetConfig+0x100>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC4_SetConfig+0x6c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a27      	ldr	r2, [pc, #156]	@ (800403c <TIM_OC4_SetConfig+0x104>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10d      	bne.n	8003fc0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	031b      	lsls	r3, r3, #12
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004038 <TIM_OC4_SetConfig+0x100>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00f      	beq.n	8003fe8 <TIM_OC4_SetConfig+0xb0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <TIM_OC4_SetConfig+0x104>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <TIM_OC4_SetConfig+0xb0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <TIM_OC4_SetConfig+0x108>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <TIM_OC4_SetConfig+0xb0>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a1a      	ldr	r2, [pc, #104]	@ (8004044 <TIM_OC4_SetConfig+0x10c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_OC4_SetConfig+0xb0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <TIM_OC4_SetConfig+0x110>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d113      	bne.n	8004010 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ff6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40013400 	.word	0x40013400
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800

0800404c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800407a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <TIM_OC5_SetConfig+0xb4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00f      	beq.n	80040c6 <TIM_OC5_SetConfig+0x7a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a16      	ldr	r2, [pc, #88]	@ (8004104 <TIM_OC5_SetConfig+0xb8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00b      	beq.n	80040c6 <TIM_OC5_SetConfig+0x7a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a15      	ldr	r2, [pc, #84]	@ (8004108 <TIM_OC5_SetConfig+0xbc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <TIM_OC5_SetConfig+0x7a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a14      	ldr	r2, [pc, #80]	@ (800410c <TIM_OC5_SetConfig+0xc0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_OC5_SetConfig+0x7a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a13      	ldr	r2, [pc, #76]	@ (8004110 <TIM_OC5_SetConfig+0xc4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d109      	bne.n	80040da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40013400 	.word	0x40013400
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800

08004114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800415a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	051b      	lsls	r3, r3, #20
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a18      	ldr	r2, [pc, #96]	@ (80041cc <TIM_OC6_SetConfig+0xb8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_OC6_SetConfig+0x7c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <TIM_OC6_SetConfig+0xbc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00b      	beq.n	8004190 <TIM_OC6_SetConfig+0x7c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a16      	ldr	r2, [pc, #88]	@ (80041d4 <TIM_OC6_SetConfig+0xc0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_OC6_SetConfig+0x7c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <TIM_OC6_SetConfig+0xc4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC6_SetConfig+0x7c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <TIM_OC6_SetConfig+0xc8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d109      	bne.n	80041a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	029b      	lsls	r3, r3, #10
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800

080041e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 030a 	bic.w	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 0210 	bic.w	r2, r3, #16
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800427a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80042b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	f043 0307 	orr.w	r3, r3, #7
 80042c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	609a      	str	r2, [r3, #8]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	021a      	lsls	r2, r3, #8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2201      	movs	r2, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	43db      	mvns	r3, r3
 800433a:	401a      	ands	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004378:	2302      	movs	r3, #2
 800437a:	e065      	b.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d108      	bne.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80043c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f2:	d013      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a18      	ldr	r2, [pc, #96]	@ (800445c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a17      	ldr	r2, [pc, #92]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a13      	ldr	r2, [pc, #76]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10c      	bne.n	8004436 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4313      	orrs	r3, r2
 800442c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40013400 	.word	0x40013400
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40014000 	.word	0x40014000

08004468 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004480:	2302      	movs	r3, #2
 8004482:	e073      	b.n	800456c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a18      	ldr	r2, [pc, #96]	@ (800457c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d11c      	bne.n	800455a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	051b      	lsls	r3, r3, #20
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40013400 	.word	0x40013400

08004580 <memset>:
 8004580:	4402      	add	r2, r0
 8004582:	4603      	mov	r3, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4d0d      	ldr	r5, [pc, #52]	@ (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	@ (80045cc <__libc_init_array+0x3c>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2600      	movs	r6, #0
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4d0b      	ldr	r5, [pc, #44]	@ (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	@ (80045d4 <__libc_init_array+0x44>)
 80045a4:	f000 f896 	bl	80046d4 <_init>
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2600      	movs	r6, #0
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	080046fc 	.word	0x080046fc
 80045cc:	080046fc 	.word	0x080046fc
 80045d0:	080046fc 	.word	0x080046fc
 80045d4:	08004700 	.word	0x08004700

080045d8 <fmax>:
 80045d8:	b508      	push	{r3, lr}
 80045da:	ed2d 8b04 	vpush	{d8-d9}
 80045de:	eeb0 8a40 	vmov.f32	s16, s0
 80045e2:	eef0 8a60 	vmov.f32	s17, s1
 80045e6:	eeb0 9a41 	vmov.f32	s18, s2
 80045ea:	eef0 9a61 	vmov.f32	s19, s3
 80045ee:	f000 f847 	bl	8004680 <__fpclassifyd>
 80045f2:	b950      	cbnz	r0, 800460a <fmax+0x32>
 80045f4:	eeb0 8a49 	vmov.f32	s16, s18
 80045f8:	eef0 8a69 	vmov.f32	s17, s19
 80045fc:	eeb0 0a48 	vmov.f32	s0, s16
 8004600:	eef0 0a68 	vmov.f32	s1, s17
 8004604:	ecbd 8b04 	vpop	{d8-d9}
 8004608:	bd08      	pop	{r3, pc}
 800460a:	eeb0 0a49 	vmov.f32	s0, s18
 800460e:	eef0 0a69 	vmov.f32	s1, s19
 8004612:	f000 f835 	bl	8004680 <__fpclassifyd>
 8004616:	2800      	cmp	r0, #0
 8004618:	d0f0      	beq.n	80045fc <fmax+0x24>
 800461a:	ec53 2b19 	vmov	r2, r3, d9
 800461e:	ec51 0b18 	vmov	r0, r1, d8
 8004622:	f7fc fa45 	bl	8000ab0 <__aeabi_dcmpgt>
 8004626:	2800      	cmp	r0, #0
 8004628:	d0e4      	beq.n	80045f4 <fmax+0x1c>
 800462a:	e7e7      	b.n	80045fc <fmax+0x24>

0800462c <fmin>:
 800462c:	b508      	push	{r3, lr}
 800462e:	ed2d 8b04 	vpush	{d8-d9}
 8004632:	eeb0 8a40 	vmov.f32	s16, s0
 8004636:	eef0 8a60 	vmov.f32	s17, s1
 800463a:	eeb0 9a41 	vmov.f32	s18, s2
 800463e:	eef0 9a61 	vmov.f32	s19, s3
 8004642:	f000 f81d 	bl	8004680 <__fpclassifyd>
 8004646:	b950      	cbnz	r0, 800465e <fmin+0x32>
 8004648:	eeb0 8a49 	vmov.f32	s16, s18
 800464c:	eef0 8a69 	vmov.f32	s17, s19
 8004650:	eeb0 0a48 	vmov.f32	s0, s16
 8004654:	eef0 0a68 	vmov.f32	s1, s17
 8004658:	ecbd 8b04 	vpop	{d8-d9}
 800465c:	bd08      	pop	{r3, pc}
 800465e:	eeb0 0a49 	vmov.f32	s0, s18
 8004662:	eef0 0a69 	vmov.f32	s1, s19
 8004666:	f000 f80b 	bl	8004680 <__fpclassifyd>
 800466a:	2800      	cmp	r0, #0
 800466c:	d0f0      	beq.n	8004650 <fmin+0x24>
 800466e:	ec53 2b19 	vmov	r2, r3, d9
 8004672:	ec51 0b18 	vmov	r0, r1, d8
 8004676:	f7fc f9fd 	bl	8000a74 <__aeabi_dcmplt>
 800467a:	2800      	cmp	r0, #0
 800467c:	d0e4      	beq.n	8004648 <fmin+0x1c>
 800467e:	e7e7      	b.n	8004650 <fmin+0x24>

08004680 <__fpclassifyd>:
 8004680:	ec51 0b10 	vmov	r0, r1, d0
 8004684:	b510      	push	{r4, lr}
 8004686:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800468a:	460b      	mov	r3, r1
 800468c:	d019      	beq.n	80046c2 <__fpclassifyd+0x42>
 800468e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8004692:	490e      	ldr	r1, [pc, #56]	@ (80046cc <__fpclassifyd+0x4c>)
 8004694:	428a      	cmp	r2, r1
 8004696:	d90e      	bls.n	80046b6 <__fpclassifyd+0x36>
 8004698:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800469c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80046a0:	428a      	cmp	r2, r1
 80046a2:	d908      	bls.n	80046b6 <__fpclassifyd+0x36>
 80046a4:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <__fpclassifyd+0x50>)
 80046a6:	4213      	tst	r3, r2
 80046a8:	d007      	beq.n	80046ba <__fpclassifyd+0x3a>
 80046aa:	4294      	cmp	r4, r2
 80046ac:	d107      	bne.n	80046be <__fpclassifyd+0x3e>
 80046ae:	fab0 f080 	clz	r0, r0
 80046b2:	0940      	lsrs	r0, r0, #5
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	2004      	movs	r0, #4
 80046b8:	e7fc      	b.n	80046b4 <__fpclassifyd+0x34>
 80046ba:	2003      	movs	r0, #3
 80046bc:	e7fa      	b.n	80046b4 <__fpclassifyd+0x34>
 80046be:	2000      	movs	r0, #0
 80046c0:	e7f8      	b.n	80046b4 <__fpclassifyd+0x34>
 80046c2:	2800      	cmp	r0, #0
 80046c4:	d1ee      	bne.n	80046a4 <__fpclassifyd+0x24>
 80046c6:	2002      	movs	r0, #2
 80046c8:	e7f4      	b.n	80046b4 <__fpclassifyd+0x34>
 80046ca:	bf00      	nop
 80046cc:	7fdfffff 	.word	0x7fdfffff
 80046d0:	7ff00000 	.word	0x7ff00000

080046d4 <_init>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	bf00      	nop
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr

080046e0 <_fini>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr
