
VSSS_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800a2d8  0800a2d8  0000b2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b0  0800a6b0  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b0  0800a6b0  0000b6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6b8  0800a6b8  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6b8  0800a6b8  0000b6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6bc  0800a6bc  0000b6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a6c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  200001f0  0800a8ac  0000c1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0800a8ac  0000c714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017963  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fe  00000000  00000000  00023b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00026e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd1  00000000  00000000  000282e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a50  00000000  00000000  000292b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cc2  00000000  00000000  00049d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb1a7  00000000  00000000  000619c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cb6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a4  00000000  00000000  0012cbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00133354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a2bc 	.word	0x0800a2bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800a2bc 	.word	0x0800a2bc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000fb8:	f7ff fdd6 	bl	8000b68 <__aeabi_dcmpgt>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8000fce:	e011      	b.n	8000ff4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000fdc:	f7ff fda6 	bl	8000b2c <__aeabi_dcmplt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <PID_Init+0x60>
}
 8000fe6:	e005      	b.n	8000ff4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6278      	str	r0, [r7, #36]	@ 0x24
 8001008:	6239      	str	r1, [r7, #32]
 800100a:	61fa      	str	r2, [r7, #28]
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001012:	ed87 1b02 	vstr	d1, [r7, #8]
 8001016:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	6a3a      	ldr	r2, [r7, #32]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	2200      	movs	r2, #0
 8001030:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001032:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001088 <PID+0x88>
 8001036:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001090 <PID+0x90>
 800103a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800103c:	f000 f956 	bl	80012ec <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	2264      	movs	r2, #100	@ 0x64
 8001044:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8001046:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800104a:	4619      	mov	r1, r3
 800104c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800104e:	f000 fa63 	bl	8001518 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001052:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001056:	4619      	mov	r1, r3
 8001058:	ed97 2b00 	vldr	d2, [r7]
 800105c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001060:	ed97 0b04 	vldr	d0, [r7, #16]
 8001064:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001066:	f000 f9af 	bl	80013c8 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800106a:	f001 ff73 	bl	8002f54 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	605a      	str	r2, [r3, #4]

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	00000000 	.word	0x00000000
 800108c:	406fe000 	.word	0x406fe000
	...

08001098 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	@ 0x30
 800109c:	af02      	add	r7, sp, #8
 800109e:	6278      	str	r0, [r7, #36]	@ 0x24
 80010a0:	6239      	str	r1, [r7, #32]
 80010a2:	61fa      	str	r2, [r7, #28]
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	ed87 0b04 	vstr	d0, [r7, #16]
 80010aa:	ed87 1b02 	vstr	d1, [r7, #8]
 80010ae:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 80010b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	ed97 2b00 	vldr	d2, [r7]
 80010c0:	ed97 1b02 	vldr	d1, [r7, #8]
 80010c4:	ed97 0b04 	vldr	d0, [r7, #16]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	6a39      	ldr	r1, [r7, #32]
 80010ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010d0:	f7ff ff96 	bl	8001000 <PID>
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <PID_Compute+0x14>
	{
		return _FALSE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e0db      	b.n	80012a8 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80010f0:	f001 ff30 	bl	8002f54 <HAL_GetTick>
 80010f4:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	6a3a      	ldr	r2, [r7, #32]
 8001106:	429a      	cmp	r2, r3
 8001108:	f0c0 80cd 	bcc.w	80012a6 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001124:	f7ff f8d8 	bl	80002d8 <__aeabi_dsub>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113a:	f7ff f8cd 	bl	80002d8 <__aeabi_dsub>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001152:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001156:	f7ff fa77 	bl	8000648 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8bb 	bl	80002dc <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d114      	bne.n	80011a2 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001188:	f7ff fa5e 	bl	8000648 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff f8a0 	bl	80002d8 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80011ae:	f7ff fcdb 	bl	8000b68 <__aeabi_dcmpgt>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80011c4:	e010      	b.n	80011e8 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80011d2:	f7ff fcab 	bl	8000b2c <__aeabi_dcmplt>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80011f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011fa:	f7ff fa25 	bl	8000648 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001206:	e005      	b.n	8001214 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001224:	f7ff fa10 	bl	8000648 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f852 	bl	80002d8 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800123c:	f7ff f84e 	bl	80002dc <__adddf3>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800124e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001252:	f7ff fc89 	bl	8000b68 <__aeabi_dcmpgt>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001262:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001266:	e00e      	b.n	8001286 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800126e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001272:	f7ff fc5b 	bl	8000b2c <__aeabi_dcmplt>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001282:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800128a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800128e:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001298:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a0:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 80012a6:	2300      	movs	r3, #0
	}

}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdb0      	pop	{r4, r5, r7, pc}

080012b0 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <PID_SetMode+0x2e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fe55 	bl	8000f88 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	705a      	strb	r2, [r3, #1]

}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6178      	str	r0, [r7, #20]
 80012f4:	ed87 0b02 	vstr	d0, [r7, #8]
 80012f8:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80012fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001300:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001304:	f7ff fc26 	bl	8000b54 <__aeabi_dcmpge>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d158      	bne.n	80013c0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800130e:	6979      	ldr	r1, [r7, #20]
 8001310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001314:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001318:	6979      	ldr	r1, [r7, #20]
 800131a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800131e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d04b      	beq.n	80013c2 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001338:	f7ff fc16 	bl	8000b68 <__aeabi_dcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800134c:	e9c1 2300 	strd	r2, r3, [r1]
 8001350:	e012      	b.n	8001378 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001360:	f7ff fbe4 	bl	8000b2c <__aeabi_dcmplt>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001374:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001384:	f7ff fbf0 	bl	8000b68 <__aeabi_dcmpgt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001394:	6979      	ldr	r1, [r7, #20]
 8001396:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800139a:	e012      	b.n	80013c2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80013a8:	f7ff fbc0 	bl	8000b2c <__aeabi_dcmplt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80013b8:	6979      	ldr	r1, [r7, #20]
 80013ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80013be:	e000      	b.n	80013c2 <PID_SetOutputLimits+0xd6>
		return;
 80013c0:	bf00      	nop
		}
		else { }

	}

}
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	61f8      	str	r0, [r7, #28]
 80013d0:	ed87 0b04 	vstr	d0, [r7, #16]
 80013d4:	ed87 1b02 	vstr	d1, [r7, #8]
 80013d8:	ed87 2b00 	vstr	d2, [r7]
 80013dc:	460b      	mov	r3, r1
 80013de:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ec:	f7ff fb9e 	bl	8000b2c <__aeabi_dcmplt>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 8089 	bne.w	800150a <PID_SetTunings2+0x142>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001404:	f7ff fb92 	bl	8000b2c <__aeabi_dcmplt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d17d      	bne.n	800150a <PID_SetTunings2+0x142>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800141a:	f7ff fb87 	bl	8000b2c <__aeabi_dcmplt>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d172      	bne.n	800150a <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	7efa      	ldrb	r2, [r7, #27]
 8001428:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	2b01      	cmp	r3, #1
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800143c:	69f9      	ldr	r1, [r7, #28]
 800143e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001442:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001446:	69f9      	ldr	r1, [r7, #28]
 8001448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800144c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001450:	69f9      	ldr	r1, [r7, #28]
 8001452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001456:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f878 	bl	8000554 <__aeabi_ui2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <PID_SetTunings2+0x14c>)
 800146a:	f7ff fa17 	bl	800089c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8001476:	69f9      	ldr	r1, [r7, #28]
 8001478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800147c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001480:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001484:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001488:	f7ff f8de 	bl	8000648 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	69f9      	ldr	r1, [r7, #28]
 8001492:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800149a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800149e:	f7ff f9fd 	bl	800089c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	69f9      	ldr	r1, [r7, #28]
 80014a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	78db      	ldrb	r3, [r3, #3]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d12b      	bne.n	800150c <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	f7fe ff09 	bl	80002d8 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	69f9      	ldr	r1, [r7, #28]
 80014cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80014d6:	f04f 0000 	mov.w	r0, #0
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	f7fe fefb 	bl	80002d8 <__aeabi_dsub>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	69f9      	ldr	r1, [r7, #28]
 80014e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f04f 0100 	mov.w	r1, #0
 80014fa:	f7fe feed 	bl	80002d8 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	69f9      	ldr	r1, [r7, #28]
 8001504:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001508:	e000      	b.n	800150c <PID_SetTunings2+0x144>
		return;
 800150a:	bf00      	nop

	}

}
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	408f4000 	.word	0x408f4000

08001518 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d02e      	beq.n	800158a <PID_SetControllerDirection+0x72>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	78db      	ldrb	r3, [r3, #3]
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	429a      	cmp	r2, r3
 8001534:	d029      	beq.n	800158a <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f7fe fec8 	bl	80002d8 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001558:	f04f 0000 	mov.w	r0, #0
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	f7fe feba 	bl	80002d8 <__aeabi_dsub>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	f7fe feac 	bl	80002d8 <__aeabi_dsub>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	70da      	strb	r2, [r3, #3]

}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dd2e      	ble.n	8001606 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f7fe ffe3 	bl	8000574 <__aeabi_i2d>
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffcc 	bl	8000554 <__aeabi_ui2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7ff f96a 	bl	800089c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80015d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015da:	f7ff f835 	bl	8000648 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80015ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015f2:	f7ff f953 	bl	800089c <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]

	}

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001610 <VSSS_Init>:

uint8_t RxAddress[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
char msg[] = "VSSS Ready\r\n";


void VSSS_Init(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af04      	add	r7, sp, #16
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001616:	213c      	movs	r1, #60	@ 0x3c
 8001618:	4825      	ldr	r0, [pc, #148]	@ (80016b0 <VSSS_Init+0xa0>)
 800161a:	f004 f8ab 	bl	8005774 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800161e:	213c      	movs	r1, #60	@ 0x3c
 8001620:	4824      	ldr	r0, [pc, #144]	@ (80016b4 <VSSS_Init+0xa4>)
 8001622:	f004 f8a7 	bl	8005774 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001626:	2100      	movs	r1, #0
 8001628:	4823      	ldr	r0, [pc, #140]	@ (80016b8 <VSSS_Init+0xa8>)
 800162a:	f003 fefd 	bl	8005428 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800162e:	2100      	movs	r1, #0
 8001630:	4822      	ldr	r0, [pc, #136]	@ (80016bc <VSSS_Init+0xac>)
 8001632:	f003 fef9 	bl	8005428 <HAL_TIM_PWM_Start>

    Encoder_Init(&left_encoder, &htim3);
 8001636:	491e      	ldr	r1, [pc, #120]	@ (80016b0 <VSSS_Init+0xa0>)
 8001638:	4821      	ldr	r0, [pc, #132]	@ (80016c0 <VSSS_Init+0xb0>)
 800163a:	f000 f89f 	bl	800177c <Encoder_Init>
    Encoder_Init(&right_encoder, &htim4);
 800163e:	491d      	ldr	r1, [pc, #116]	@ (80016b4 <VSSS_Init+0xa4>)
 8001640:	4820      	ldr	r0, [pc, #128]	@ (80016c4 <VSSS_Init+0xb4>)
 8001642:	f000 f89b 	bl	800177c <Encoder_Init>

    Motor_Init(&motorLeft, &htim2, TIM_CHANNEL_1, INA1_GPIO_Port, INA1_Pin, INA2_GPIO_Port, INA2_Pin);
 8001646:	2304      	movs	r3, #4
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2302      	movs	r3, #2
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001658:	2200      	movs	r2, #0
 800165a:	4918      	ldr	r1, [pc, #96]	@ (80016bc <VSSS_Init+0xac>)
 800165c:	481a      	ldr	r0, [pc, #104]	@ (80016c8 <VSSS_Init+0xb8>)
 800165e:	f000 fe7d 	bl	800235c <Motor_Init>
    Motor_Init(&motorRight, &htim1, TIM_CHANNEL_1, INB1_GPIO_Port, INB1_Pin, INB2_GPIO_Port, INB2_Pin);
 8001662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001678:	2200      	movs	r2, #0
 800167a:	490f      	ldr	r1, [pc, #60]	@ (80016b8 <VSSS_Init+0xa8>)
 800167c:	4813      	ldr	r0, [pc, #76]	@ (80016cc <VSSS_Init+0xbc>)
 800167e:	f000 fe6d 	bl	800235c <Motor_Init>
    Kinematics_Init();
 8001682:	f000 f90d 	bl	80018a0 <Kinematics_Init>
    NRF24_Init();
 8001686:	f001 f825 	bl	80026d4 <NRF24_Init>
    NRF24_RxMode(RxAddress, 76);
 800168a:	214c      	movs	r1, #76	@ 0x4c
 800168c:	4810      	ldr	r0, [pc, #64]	@ (80016d0 <VSSS_Init+0xc0>)
 800168e:	f001 f848 	bl	8002722 <NRF24_RxMode>

    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001692:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <VSSS_Init+0xc4>)
 8001694:	f7fe fe14 	bl	80002c0 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a0:	490c      	ldr	r1, [pc, #48]	@ (80016d4 <VSSS_Init+0xc4>)
 80016a2:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <VSSS_Init+0xc8>)
 80016a4:	f005 f8b4 	bl	8006810 <HAL_UART_Transmit>
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000464 	.word	0x20000464
 80016b4:	200004b0 	.word	0x200004b0
 80016b8:	200003cc 	.word	0x200003cc
 80016bc:	20000418 	.word	0x20000418
 80016c0:	20000234 	.word	0x20000234
 80016c4:	20000244 	.word	0x20000244
 80016c8:	20000590 	.word	0x20000590
 80016cc:	200005a8 	.word	0x200005a8
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	200004fc 	.word	0x200004fc

080016dc <VSSS_Run>:

void VSSS_Run(void) {
 80016dc:	b5b0      	push	{r4, r5, r7, lr}
 80016de:	b092      	sub	sp, #72	@ 0x48
 80016e0:	af04      	add	r7, sp, #16

	if (isDataAvailable(2) == 1) {
 80016e2:	2002      	movs	r0, #2
 80016e4:	f001 f85c 	bl	80027a0 <isDataAvailable>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d10a      	bne.n	8001704 <VSSS_Run+0x28>
		NRF24_Receive(robot.RxData);
 80016ee:	481f      	ldr	r0, [pc, #124]	@ (800176c <VSSS_Run+0x90>)
 80016f0:	f001 f876 	bl	80027e0 <NRF24_Receive>
        memcpy(&robot.vL, &robot.RxData[0], sizeof(float));
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <VSSS_Run+0x94>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001770 <VSSS_Run+0x94>)
 80016fa:	6013      	str	r3, [r2, #0]
        memcpy(&robot.vR, &robot.RxData[4], sizeof(float));
 80016fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <VSSS_Run+0x94>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <VSSS_Run+0x94>)
 8001702:	6053      	str	r3, [r2, #4]
	}

	char data[50];
    snprintf(data, sizeof(data), "vL: %.2f, vR: %.2f\r\n", robot.vL, robot.vR);
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <VSSS_Run+0x94>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff45 	bl	8000598 <__aeabi_f2d>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <VSSS_Run+0x94>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff3e 	bl	8000598 <__aeabi_f2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	1d38      	adds	r0, r7, #4
 8001722:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001726:	e9cd 4500 	strd	r4, r5, [sp]
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <VSSS_Run+0x98>)
 800172c:	2132      	movs	r1, #50	@ 0x32
 800172e:	f006 fc05 	bl	8007f3c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fdc3 	bl	80002c0 <strlen>
 800173a:	4603      	mov	r3, r0
 800173c:	b29a      	uxth	r2, r3
 800173e:	1d39      	adds	r1, r7, #4
 8001740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <VSSS_Run+0x9c>)
 8001746:	f005 f863 	bl	8006810 <HAL_UART_Transmit>

    Kinematics_SetSpeeds(robot.vL, robot.vR);
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <VSSS_Run+0x94>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <VSSS_Run+0x94>)
 8001752:	ed93 7a01 	vldr	s14, [r3, #4]
 8001756:	eef0 0a47 	vmov.f32	s1, s14
 800175a:	eeb0 0a67 	vmov.f32	s0, s15
 800175e:	f000 f937 	bl	80019d0 <Kinematics_SetSpeeds>

}
 8001762:	bf00      	nop
 8001764:	3738      	adds	r7, #56	@ 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	bf00      	nop
 800176c:	20000214 	.word	0x20000214
 8001770:	2000020c 	.word	0x2000020c
 8001774:	0800a2d8 	.word	0x0800a2d8
 8001778:	200004fc 	.word	0x200004fc

0800177c <Encoder_Init>:
#define ENCODER_PULSES_PER_REV 2750

Encoder left_encoder;
Encoder right_encoder;

void Encoder_Init(Encoder *encoder, TIM_HandleTypeDef *htim) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	601a      	str	r2, [r3, #0]
    encoder->last_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	b21a      	sxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	809a      	strh	r2, [r3, #4]
    encoder->last_time = HAL_GetTick();
 8001798:	f001 fbdc 	bl	8002f54 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
    encoder->rpm = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	0000      	movs	r0, r0
 80017b4:	0000      	movs	r0, r0
	...

080017b8 <Encoder_Calculate_RPM>:

void Encoder_Calculate_RPM(Encoder *encoder) {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick();
 80017c0:	f001 fbc8 	bl	8002f54 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]
    int16_t current_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	81fb      	strh	r3, [r7, #14]
    int16_t delta_encoder = current_encoder_value - encoder->last_encoder_value;
 80017d0:	89fa      	ldrh	r2, [r7, #14]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	b29b      	uxth	r3, r3
 80017de:	82fb      	strh	r3, [r7, #22]

    if (delta_encoder > (ENCODER_PULSES_PER_REV / 2)) {
 80017e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017e4:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 80017e8:	db05      	blt.n	80017f6 <Encoder_Calculate_RPM+0x3e>
        delta_encoder -= ENCODER_PULSES_PER_REV;
 80017ea:	8afb      	ldrh	r3, [r7, #22]
 80017ec:	f6a3 23be 	subw	r3, r3, #2750	@ 0xabe
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	82fb      	strh	r3, [r7, #22]
 80017f4:	e009      	b.n	800180a <Encoder_Calculate_RPM+0x52>
    } else if (delta_encoder < -(ENCODER_PULSES_PER_REV / 2)) {
 80017f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017fa:	f513 6fac 	cmn.w	r3, #1376	@ 0x560
 80017fe:	dc04      	bgt.n	800180a <Encoder_Calculate_RPM+0x52>
        delta_encoder += ENCODER_PULSES_PER_REV;
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	f603 23be 	addw	r3, r3, #2750	@ 0xabe
 8001806:	b29b      	uxth	r3, r3
 8001808:	82fb      	strh	r3, [r7, #22]
    }

    uint32_t delta_time = current_time - encoder->last_time;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	60bb      	str	r3, [r7, #8]
    if (delta_time > 0) {
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d024      	beq.n	8001864 <Encoder_Calculate_RPM+0xac>
        encoder->rpm = (delta_encoder * 60000.0) / (ENCODER_PULSES_PER_REV * delta_time);
 800181a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fea8 	bl	8000574 <__aeabi_i2d>
 8001824:	a314      	add	r3, pc, #80	@ (adr r3, 8001878 <Encoder_Calculate_RPM+0xc0>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe ff0d 	bl	8000648 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4614      	mov	r4, r2
 8001834:	461d      	mov	r5, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f640 22be 	movw	r2, #2750	@ 0xabe
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe87 	bl	8000554 <__aeabi_ui2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7ff f825 	bl	800089c <__aeabi_ddiv>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f9cd 	bl	8000bf8 <__aeabi_d2f>
 800185e:	4602      	mov	r2, r0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]
    }

    encoder->last_encoder_value = current_encoder_value;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	89fa      	ldrh	r2, [r7, #14]
 8001868:	809a      	strh	r2, [r3, #4]
    encoder->last_time = current_time;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bdb0      	pop	{r4, r5, r7, pc}
 8001878:	00000000 	.word	0x00000000
 800187c:	40ed4c00 	.word	0x40ed4c00

08001880 <Encoder_Update>:

void Encoder_Update(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    Encoder_Calculate_RPM(&left_encoder);
 8001884:	4803      	ldr	r0, [pc, #12]	@ (8001894 <Encoder_Update+0x14>)
 8001886:	f7ff ff97 	bl	80017b8 <Encoder_Calculate_RPM>
    Encoder_Calculate_RPM(&right_encoder);
 800188a:	4803      	ldr	r0, [pc, #12]	@ (8001898 <Encoder_Update+0x18>)
 800188c:	f7ff ff94 	bl	80017b8 <Encoder_Calculate_RPM>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000234 	.word	0x20000234
 8001898:	20000244 	.word	0x20000244
 800189c:	00000000 	.word	0x00000000

080018a0 <Kinematics_Init>:
double inputRight  = 0.0;

PID_TypeDef pidLeft, pidRight;


void Kinematics_Init(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af02      	add	r7, sp, #8
	  PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 18.81, 626.0, 0.0, _PID_CD_DIRECT);
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	ed9f 2b1d 	vldr	d2, [pc, #116]	@ 8001920 <Kinematics_Init+0x80>
 80018ae:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8001928 <Kinematics_Init+0x88>
 80018b2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001930 <Kinematics_Init+0x90>
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <Kinematics_Init+0xb8>)
 80018b8:	4a28      	ldr	r2, [pc, #160]	@ (800195c <Kinematics_Init+0xbc>)
 80018ba:	4929      	ldr	r1, [pc, #164]	@ (8001960 <Kinematics_Init+0xc0>)
 80018bc:	4829      	ldr	r0, [pc, #164]	@ (8001964 <Kinematics_Init+0xc4>)
 80018be:	f7ff fbeb 	bl	8001098 <PID2>
	  PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 21.18, 863.0, 0.0, _PID_CD_DIRECT);
 80018c2:	2300      	movs	r3, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	ed9f 2b16 	vldr	d2, [pc, #88]	@ 8001920 <Kinematics_Init+0x80>
 80018ca:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8001938 <Kinematics_Init+0x98>
 80018ce:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8001940 <Kinematics_Init+0xa0>
 80018d2:	4b25      	ldr	r3, [pc, #148]	@ (8001968 <Kinematics_Init+0xc8>)
 80018d4:	4a25      	ldr	r2, [pc, #148]	@ (800196c <Kinematics_Init+0xcc>)
 80018d6:	4926      	ldr	r1, [pc, #152]	@ (8001970 <Kinematics_Init+0xd0>)
 80018d8:	4826      	ldr	r0, [pc, #152]	@ (8001974 <Kinematics_Init+0xd4>)
 80018da:	f7ff fbdd 	bl	8001098 <PID2>

	  PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 80018de:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8001948 <Kinematics_Init+0xa8>
 80018e2:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001950 <Kinematics_Init+0xb0>
 80018e6:	481f      	ldr	r0, [pc, #124]	@ (8001964 <Kinematics_Init+0xc4>)
 80018e8:	f7ff fd00 	bl	80012ec <PID_SetOutputLimits>
	  PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 80018ec:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001948 <Kinematics_Init+0xa8>
 80018f0:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001950 <Kinematics_Init+0xb0>
 80018f4:	481f      	ldr	r0, [pc, #124]	@ (8001974 <Kinematics_Init+0xd4>)
 80018f6:	f7ff fcf9 	bl	80012ec <PID_SetOutputLimits>

	  PID_SetSampleTime(&pidLeft, 10);
 80018fa:	210a      	movs	r1, #10
 80018fc:	4819      	ldr	r0, [pc, #100]	@ (8001964 <Kinematics_Init+0xc4>)
 80018fe:	f7ff fe4b 	bl	8001598 <PID_SetSampleTime>
	  PID_SetSampleTime(&pidRight, 10);
 8001902:	210a      	movs	r1, #10
 8001904:	481b      	ldr	r0, [pc, #108]	@ (8001974 <Kinematics_Init+0xd4>)
 8001906:	f7ff fe47 	bl	8001598 <PID_SetSampleTime>

	  PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 800190a:	2101      	movs	r1, #1
 800190c:	4815      	ldr	r0, [pc, #84]	@ (8001964 <Kinematics_Init+0xc4>)
 800190e:	f7ff fccf 	bl	80012b0 <PID_SetMode>
	  PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001912:	2101      	movs	r1, #1
 8001914:	4817      	ldr	r0, [pc, #92]	@ (8001974 <Kinematics_Init+0xd4>)
 8001916:	f7ff fccb 	bl	80012b0 <PID_SetMode>
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
	...
 800192c:	40839000 	.word	0x40839000
 8001930:	28f5c28f 	.word	0x28f5c28f
 8001934:	4032cf5c 	.word	0x4032cf5c
 8001938:	00000000 	.word	0x00000000
 800193c:	408af800 	.word	0x408af800
 8001940:	7ae147ae 	.word	0x7ae147ae
 8001944:	40352e14 	.word	0x40352e14
 8001948:	00000000 	.word	0x00000000
 800194c:	409a8c00 	.word	0x409a8c00
 8001950:	00000000 	.word	0x00000000
 8001954:	c09a8c00 	.word	0xc09a8c00
 8001958:	20000258 	.word	0x20000258
 800195c:	20000268 	.word	0x20000268
 8001960:	20000278 	.word	0x20000278
 8001964:	20000288 	.word	0x20000288
 8001968:	20000260 	.word	0x20000260
 800196c:	20000270 	.word	0x20000270
 8001970:	20000280 	.word	0x20000280
 8001974:	200002f8 	.word	0x200002f8

08001978 <LinearToRPM>:

/**
 * @brief Converte velocidade linear para RPM.
 */
float LinearToRPM(float v) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (v * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fe08 	bl	8000598 <__aeabi_f2d>
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <LinearToRPM+0x50>)
 800198e:	f7fe fe5b 	bl	8000648 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	a309      	add	r3, pc, #36	@ (adr r3, 80019c0 <LinearToRPM+0x48>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe ff7c 	bl	800089c <__aeabi_ddiv>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f924 	bl	8000bf8 <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	ee07 3a90 	vmov	s15, r3
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	5b22baa6 	.word	0x5b22baa6
 80019c4:	3fd8209f 	.word	0x3fd8209f
 80019c8:	404e0000 	.word	0x404e0000
 80019cc:	00000000 	.word	0x00000000

080019d0 <Kinematics_SetSpeeds>:

/**
 * @brief Define as velocidades do robô com base em velocidades lineares (m/s).
 *        Chama `Set_Motor_Speeds()` do `motor_control.c` para aplicar nos motores.
 */
void Kinematics_SetSpeeds(float vL, float vR) {
 80019d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	ed87 0a01 	vstr	s0, [r7, #4]
 80019dc:	edc7 0a00 	vstr	s1, [r7]
	float target_rpm_left = LinearToRPM(vL);
 80019e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80019e4:	f7ff ffc8 	bl	8001978 <LinearToRPM>
 80019e8:	ed87 0a07 	vstr	s0, [r7, #28]
    float target_rpm_right = LinearToRPM(vR);
 80019ec:	ed97 0a00 	vldr	s0, [r7]
 80019f0:	f7ff ffc2 	bl	8001978 <LinearToRPM>
 80019f4:	ed87 0a06 	vstr	s0, [r7, #24]

    setpoint_left_rpm  = target_rpm_left;
 80019f8:	69f8      	ldr	r0, [r7, #28]
 80019fa:	f7fe fdcd 	bl	8000598 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	49a7      	ldr	r1, [pc, #668]	@ (8001ca0 <Kinematics_SetSpeeds+0x2d0>)
 8001a04:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 8001a08:	69b8      	ldr	r0, [r7, #24]
 8001a0a:	f7fe fdc5 	bl	8000598 <__aeabi_f2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	49a4      	ldr	r1, [pc, #656]	@ (8001ca4 <Kinematics_SetSpeeds+0x2d4>)
 8001a14:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_encoder.rpm;
 8001a18:	4ba3      	ldr	r3, [pc, #652]	@ (8001ca8 <Kinematics_SetSpeeds+0x2d8>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fdbb 	bl	8000598 <__aeabi_f2d>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	49a1      	ldr	r1, [pc, #644]	@ (8001cac <Kinematics_SetSpeeds+0x2dc>)
 8001a28:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_encoder.rpm;
 8001a2c:	4ba0      	ldr	r3, [pc, #640]	@ (8001cb0 <Kinematics_SetSpeeds+0x2e0>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fdb1 	bl	8000598 <__aeabi_f2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	499e      	ldr	r1, [pc, #632]	@ (8001cb4 <Kinematics_SetSpeeds+0x2e4>)
 8001a3c:	e9c1 2300 	strd	r2, r3, [r1]


    PID_Compute(&pidLeft);
 8001a40:	489d      	ldr	r0, [pc, #628]	@ (8001cb8 <Kinematics_SetSpeeds+0x2e8>)
 8001a42:	f7ff fb4b 	bl	80010dc <PID_Compute>
    PID_Compute(&pidRight);
 8001a46:	489d      	ldr	r0, [pc, #628]	@ (8001cbc <Kinematics_SetSpeeds+0x2ec>)
 8001a48:	f7ff fb48 	bl	80010dc <PID_Compute>

    if (outputLeft > PWM_MAX) {
 8001a4c:	4b9c      	ldr	r3, [pc, #624]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a52:	a38d      	add	r3, pc, #564	@ (adr r3, 8001c88 <Kinematics_SetSpeeds+0x2b8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7ff f886 	bl	8000b68 <__aeabi_dcmpgt>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <Kinematics_SetSpeeds+0xa0>
        outputLeft = PWM_MAX;
 8001a62:	4997      	ldr	r1, [pc, #604]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001a64:	a388      	add	r3, pc, #544	@ (adr r3, 8001c88 <Kinematics_SetSpeeds+0x2b8>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	e9c1 2300 	strd	r2, r3, [r1]
 8001a6e:	e010      	b.n	8001a92 <Kinematics_SetSpeeds+0xc2>
    } else if (outputLeft < -PWM_MAX) {
 8001a70:	4b93      	ldr	r3, [pc, #588]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a76:	a386      	add	r3, pc, #536	@ (adr r3, 8001c90 <Kinematics_SetSpeeds+0x2c0>)
 8001a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7c:	f7ff f856 	bl	8000b2c <__aeabi_dcmplt>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <Kinematics_SetSpeeds+0xc2>
        outputLeft = -PWM_MAX;
 8001a86:	498e      	ldr	r1, [pc, #568]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001a88:	a381      	add	r3, pc, #516	@ (adr r3, 8001c90 <Kinematics_SetSpeeds+0x2c0>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (outputRight > PWM_MAX) {
 8001a92:	4b8c      	ldr	r3, [pc, #560]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a98:	a37b      	add	r3, pc, #492	@ (adr r3, 8001c88 <Kinematics_SetSpeeds+0x2b8>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7ff f863 	bl	8000b68 <__aeabi_dcmpgt>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <Kinematics_SetSpeeds+0xe6>
        outputRight = PWM_MAX;
 8001aa8:	4986      	ldr	r1, [pc, #536]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001aaa:	a377      	add	r3, pc, #476	@ (adr r3, 8001c88 <Kinematics_SetSpeeds+0x2b8>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	e9c1 2300 	strd	r2, r3, [r1]
 8001ab4:	e010      	b.n	8001ad8 <Kinematics_SetSpeeds+0x108>
    } else if (outputRight < -PWM_MAX) {
 8001ab6:	4b83      	ldr	r3, [pc, #524]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001abc:	a374      	add	r3, pc, #464	@ (adr r3, 8001c90 <Kinematics_SetSpeeds+0x2c0>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7ff f833 	bl	8000b2c <__aeabi_dcmplt>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <Kinematics_SetSpeeds+0x108>
        outputRight = -PWM_MAX;
 8001acc:	497d      	ldr	r1, [pc, #500]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001ace:	a370      	add	r3, pc, #448	@ (adr r3, 8001c90 <Kinematics_SetSpeeds+0x2c0>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	e9c1 2300 	strd	r2, r3, [r1]
    }


    if (fabs(outputLeft) < OUTPUT_TOLERANCE) outputLeft = 0;
 8001ad8:	4b79      	ldr	r3, [pc, #484]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	4690      	mov	r8, r2
 8001ae0:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b77      	ldr	r3, [pc, #476]	@ (8001cc8 <Kinematics_SetSpeeds+0x2f8>)
 8001aea:	4640      	mov	r0, r8
 8001aec:	4649      	mov	r1, r9
 8001aee:	f7ff f81d 	bl	8000b2c <__aeabi_dcmplt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <Kinematics_SetSpeeds+0x136>
 8001af8:	4971      	ldr	r1, [pc, #452]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c1 2300 	strd	r2, r3, [r1]
    if (fabs(outputRight) < OUTPUT_TOLERANCE) outputRight = 0;
 8001b06:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc8 <Kinematics_SetSpeeds+0x2f8>)
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7ff f806 	bl	8000b2c <__aeabi_dcmplt>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <Kinematics_SetSpeeds+0x164>
 8001b26:	4967      	ldr	r1, [pc, #412]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	e9c1 2300 	strd	r2, r3, [r1]


    float pwm_left  = fabs(outputLeft);
 8001b34:	4b62      	ldr	r3, [pc, #392]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f85b 	bl	8000bf8 <__aeabi_d2f>
 8001b42:	ee07 0a90 	vmov	s15, r0
 8001b46:	eef0 7ae7 	vabs.f32	s15, s15
 8001b4a:	edc7 7a05 	vstr	s15, [r7, #20]
    float pwm_right = fabs(outputRight);
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f84e 	bl	8000bf8 <__aeabi_d2f>
 8001b5c:	ee07 0a90 	vmov	s15, r0
 8001b60:	eef0 7ae7 	vabs.f32	s15, s15
 8001b64:	edc7 7a04 	vstr	s15, [r7, #16]

    pwm_left  = fmax(pwm_left, PWM_MIN);
 8001b68:	6978      	ldr	r0, [r7, #20]
 8001b6a:	f7fe fd15 	bl	8000598 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8001c98 <Kinematics_SetSpeeds+0x2c8>
 8001b76:	ec43 2b10 	vmov	d0, r2, r3
 8001b7a:	f008 fb21 	bl	800a1c0 <fmax>
 8001b7e:	ec53 2b10 	vmov	r2, r3, d0
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f837 	bl	8000bf8 <__aeabi_d2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	617b      	str	r3, [r7, #20]
    pwm_left  = fmin(pwm_left, PWM_MAX);
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7fe fd02 	bl	8000598 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	ed9f 1b3b 	vldr	d1, [pc, #236]	@ 8001c88 <Kinematics_SetSpeeds+0x2b8>
 8001b9c:	ec43 2b10 	vmov	d0, r2, r3
 8001ba0:	f008 fb38 	bl	800a214 <fmin>
 8001ba4:	ec53 2b10 	vmov	r2, r3, d0
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7ff f824 	bl	8000bf8 <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	617b      	str	r3, [r7, #20]
    pwm_right = fmax(pwm_right, PWM_MIN);
 8001bb4:	6938      	ldr	r0, [r7, #16]
 8001bb6:	f7fe fcef 	bl	8000598 <__aeabi_f2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8001c98 <Kinematics_SetSpeeds+0x2c8>
 8001bc2:	ec43 2b10 	vmov	d0, r2, r3
 8001bc6:	f008 fafb 	bl	800a1c0 <fmax>
 8001bca:	ec53 2b10 	vmov	r2, r3, d0
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f811 	bl	8000bf8 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	613b      	str	r3, [r7, #16]
    pwm_right = fmin(pwm_right, PWM_MAX);
 8001bda:	6938      	ldr	r0, [r7, #16]
 8001bdc:	f7fe fcdc 	bl	8000598 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8001c88 <Kinematics_SetSpeeds+0x2b8>
 8001be8:	ec43 2b10 	vmov	d0, r2, r3
 8001bec:	f008 fb12 	bl	800a214 <fmin>
 8001bf0:	ec53 2b10 	vmov	r2, r3, d0
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f7fe fffe 	bl	8000bf8 <__aeabi_d2f>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	613b      	str	r3, [r7, #16]


    uint8_t dir_left  = (outputLeft >= 0) ? 0 : 1;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <Kinematics_SetSpeeds+0x2f0>)
 8001c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c06:	2301      	movs	r3, #1
 8001c08:	461c      	mov	r4, r3
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f7fe ff9f 	bl	8000b54 <__aeabi_dcmpge>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <Kinematics_SetSpeeds+0x250>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	461c      	mov	r4, r3
 8001c20:	b2e3      	uxtb	r3, r4
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	73fb      	strb	r3, [r7, #15]
    uint8_t dir_right = (outputRight >= 0) ? 0 : 1;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <Kinematics_SetSpeeds+0x2f4>)
 8001c2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c30:	2301      	movs	r3, #1
 8001c32:	461c      	mov	r4, r3
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f7fe ff8a 	bl	8000b54 <__aeabi_dcmpge>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <Kinematics_SetSpeeds+0x27a>
 8001c46:	2300      	movs	r3, #0
 8001c48:	461c      	mov	r4, r3
 8001c4a:	b2e3      	uxtb	r3, r4
 8001c4c:	f083 0301 	eor.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	73bb      	strb	r3, [r7, #14]

	Encoder_Update();
 8001c54:	f7ff fe14 	bl	8001880 <Encoder_Update>
    Motor_Control(pwm_left, dir_left, pwm_right, dir_right);
 8001c58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c5c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001c60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	7bf9      	ldrb	r1, [r7, #15]
 8001c6c:	ee17 2a90 	vmov	r2, s15
 8001c70:	ee17 0a10 	vmov	r0, s14
 8001c74:	f000 fb98 	bl	80023a8 <Motor_Control>
}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c82:	bf00      	nop
 8001c84:	f3af 8000 	nop.w
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	409a8c00 	.word	0x409a8c00
 8001c90:	00000000 	.word	0x00000000
 8001c94:	c09a8c00 	.word	0xc09a8c00
	...
 8001ca0:	20000258 	.word	0x20000258
 8001ca4:	20000260 	.word	0x20000260
 8001ca8:	20000234 	.word	0x20000234
 8001cac:	20000278 	.word	0x20000278
 8001cb0:	20000244 	.word	0x20000244
 8001cb4:	20000280 	.word	0x20000280
 8001cb8:	20000288 	.word	0x20000288
 8001cbc:	200002f8 	.word	0x200002f8
 8001cc0:	20000268 	.word	0x20000268
 8001cc4:	20000270 	.word	0x20000270
 8001cc8:	40080000 	.word	0x40080000

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f001 f8db 	bl	8002e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f813 	bl	8001cfe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f000 fab8 	bl	800224c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001cdc:	f000 f896 	bl	8001e0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ce0:	f000 f944 	bl	8001f6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ce4:	f000 f9b8 	bl	8002058 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ce8:	f000 fa0c 	bl	8002104 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001cec:	f000 f850 	bl	8001d90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001cf0:	f000 fa5e 	bl	80021b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  VSSS_Init();
 8001cf4:	f7ff fc8c 	bl	8001610 <VSSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VSSS_Run();
 8001cf8:	f7ff fcf0 	bl	80016dc <VSSS_Run>
 8001cfc:	e7fc      	b.n	8001cf8 <main+0x2c>

08001cfe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b094      	sub	sp, #80	@ 0x50
 8001d02:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	2238      	movs	r2, #56	@ 0x38
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f006 f98c 	bl	800802a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f001 fbc3 	bl	80034ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d30:	2302      	movs	r3, #2
 8001d32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d34:	2303      	movs	r3, #3
 8001d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d3c:	2355      	movs	r3, #85	@ 0x55
 8001d3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d44:	2302      	movs	r3, #2
 8001d46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fc5f 	bl	8003614 <HAL_RCC_OscConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d5c:	f000 faf8 	bl	8002350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d60:	230f      	movs	r3, #15
 8001d62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d64:	2303      	movs	r3, #3
 8001d66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2104      	movs	r1, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 ff5d 	bl	8003c38 <HAL_RCC_ClockConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d84:	f000 fae4 	bl	8002350 <Error_Handler>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3750      	adds	r7, #80	@ 0x50
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001d96:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <MX_SPI1_Init+0x78>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001d9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001da0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001daa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db6:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001dde:	2207      	movs	r2, #7
 8001de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001dea:	2208      	movs	r2, #8
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_SPI1_Init+0x74>)
 8001df0:	f002 fb2e 	bl	8004450 <HAL_SPI_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dfa:	f000 faa9 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000368 	.word	0x20000368
 8001e08:	40013000 	.word	0x40013000

08001e0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b09c      	sub	sp, #112	@ 0x70
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2234      	movs	r2, #52	@ 0x34
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f006 f8ef 	bl	800802a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e4c:	4b45      	ldr	r3, [pc, #276]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e4e:	4a46      	ldr	r2, [pc, #280]	@ (8001f68 <MX_TIM1_Init+0x15c>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e52:	4b44      	ldr	r3, [pc, #272]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b42      	ldr	r3, [pc, #264]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8001e5e:	4b41      	ldr	r3, [pc, #260]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e60:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e66:	4b3f      	ldr	r3, [pc, #252]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b3c      	ldr	r3, [pc, #240]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e78:	483a      	ldr	r0, [pc, #232]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e7a:	f003 fa1d 	bl	80052b8 <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e84:	f000 fa64 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e8e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e92:	4619      	mov	r1, r3
 8001e94:	4833      	ldr	r0, [pc, #204]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001e96:	f003 fe0f 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ea0:	f000 fa56 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ea4:	482f      	ldr	r0, [pc, #188]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001ea6:	f003 fa5e 	bl	8005366 <HAL_TIM_PWM_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001eb0:	f000 fa4e 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ec0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4827      	ldr	r0, [pc, #156]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001ec8:	f004 fb44 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001ed2:	f000 fa3d 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed6:	2360      	movs	r3, #96	@ 0x60
 8001ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481a      	ldr	r0, [pc, #104]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001efc:	f003 fcc8 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001f06:	f000 fa23 	bl	8002350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001f48:	f004 fb86 	bl	8006658 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001f52:	f000 f9fd 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f56:	4803      	ldr	r0, [pc, #12]	@ (8001f64 <MX_TIM1_Init+0x158>)
 8001f58:	f000 fd96 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 8001f5c:	bf00      	nop
 8001f5e:	3770      	adds	r7, #112	@ 0x70
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200003cc 	.word	0x200003cc
 8001f68:	40012c00 	.word	0x40012c00

08001f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	@ 0x38
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	615a      	str	r2, [r3, #20]
 8001f9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b29      	ldr	r3, [pc, #164]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 8001fb2:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fb4:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001fb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fba:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc0:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc6:	4823      	ldr	r0, [pc, #140]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fc8:	f003 f976 	bl	80052b8 <HAL_TIM_Base_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001fd2:	f000 f9bd 	bl	8002350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481c      	ldr	r0, [pc, #112]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001fe4:	f003 fd68 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001fee:	f000 f9af 	bl	8002350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ff2:	4818      	ldr	r0, [pc, #96]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8001ff4:	f003 f9b7 	bl	8005366 <HAL_TIM_PWM_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ffe:	f000 f9a7 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	4810      	ldr	r0, [pc, #64]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8002012:	f004 fa9f 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800201c:	f000 f998 	bl	8002350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002020:	2360      	movs	r3, #96	@ 0x60
 8002022:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	4807      	ldr	r0, [pc, #28]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8002038:	f003 fc2a 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002042:	f000 f985 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002046:	4803      	ldr	r0, [pc, #12]	@ (8002054 <MX_TIM2_Init+0xe8>)
 8002048:	f000 fd1e 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 800204c:	bf00      	nop
 800204e:	3738      	adds	r7, #56	@ 0x38
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000418 	.word	0x20000418

08002058 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	@ 0x30
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	2224      	movs	r2, #36	@ 0x24
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f005 ffdf 	bl	800802a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <MX_TIM3_Init+0xa4>)
 8002078:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <MX_TIM3_Init+0xa8>)
 800207a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <MX_TIM3_Init+0xa4>)
 800207e:	2200      	movs	r2, #0
 8002080:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <MX_TIM3_Init+0xa4>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002088:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <MX_TIM3_Init+0xa4>)
 800208a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800208e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <MX_TIM3_Init+0xa4>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b19      	ldr	r3, [pc, #100]	@ (80020fc <MX_TIM3_Init+0xa4>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800209c:	2303      	movs	r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020a4:	2301      	movs	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020b4:	2301      	movs	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	@ (80020fc <MX_TIM3_Init+0xa4>)
 80020c8:	f003 faae 	bl	8005628 <HAL_TIM_Encoder_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020d2:	f000 f93d 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020de:	463b      	mov	r3, r7
 80020e0:	4619      	mov	r1, r3
 80020e2:	4806      	ldr	r0, [pc, #24]	@ (80020fc <MX_TIM3_Init+0xa4>)
 80020e4:	f004 fa36 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80020ee:	f000 f92f 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	3730      	adds	r7, #48	@ 0x30
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000464 	.word	0x20000464
 8002100:	40000400 	.word	0x40000400

08002104 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	@ 0x30
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	2224      	movs	r2, #36	@ 0x24
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f005 ff89 	bl	800802a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002122:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 8002124:	4a21      	ldr	r2, [pc, #132]	@ (80021ac <MX_TIM4_Init+0xa8>)
 8002126:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002128:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 8002136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800213a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002148:	2303      	movs	r3, #3
 800214a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002150:	2301      	movs	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	4619      	mov	r1, r3
 8002172:	480d      	ldr	r0, [pc, #52]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 8002174:	f003 fa58 	bl	8005628 <HAL_TIM_Encoder_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800217e:	f000 f8e7 	bl	8002350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800218a:	463b      	mov	r3, r7
 800218c:	4619      	mov	r1, r3
 800218e:	4806      	ldr	r0, [pc, #24]	@ (80021a8 <MX_TIM4_Init+0xa4>)
 8002190:	f004 f9e0 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800219a:	f000 f8d9 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	3730      	adds	r7, #48	@ 0x30
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200004b0 	.word	0x200004b0
 80021ac:	40000800 	.word	0x40000800

080021b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021b4:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021b6:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <MX_USART1_UART_Init+0x94>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021bc:	4a22      	ldr	r2, [pc, #136]	@ (8002248 <MX_USART1_UART_Init+0x98>)
 80021be:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021d4:	220c      	movs	r2, #12
 80021d6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e4:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f0:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021f6:	4812      	ldr	r0, [pc, #72]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 80021f8:	f004 faba 	bl	8006770 <HAL_UART_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8002202:	f000 f8a5 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002206:	2100      	movs	r1, #0
 8002208:	480d      	ldr	r0, [pc, #52]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 800220a:	f005 f8b3 	bl	8007374 <HAL_UARTEx_SetTxFifoThreshold>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8002214:	f000 f89c 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002218:	2100      	movs	r1, #0
 800221a:	4809      	ldr	r0, [pc, #36]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 800221c:	f005 f8e8 	bl	80073f0 <HAL_UARTEx_SetRxFifoThreshold>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002226:	f000 f893 	bl	8002350 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	@ (8002240 <MX_USART1_UART_Init+0x90>)
 800222c:	f005 f869 	bl	8007302 <HAL_UARTEx_DisableFifoMode>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002236:	f000 f88b 	bl	8002350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200004fc 	.word	0x200004fc
 8002244:	40013800 	.word	0x40013800
 8002248:	000f4240 	.word	0x000f4240

0800224c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002262:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <MX_GPIO_Init+0xf8>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	4a37      	ldr	r2, [pc, #220]	@ (8002344 <MX_GPIO_Init+0xf8>)
 8002268:	f043 0320 	orr.w	r3, r3, #32
 800226c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226e:	4b35      	ldr	r3, [pc, #212]	@ (8002344 <MX_GPIO_Init+0xf8>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <MX_GPIO_Init+0xf8>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <MX_GPIO_Init+0xf8>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002286:	4b2f      	ldr	r3, [pc, #188]	@ (8002344 <MX_GPIO_Init+0xf8>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	4b2c      	ldr	r3, [pc, #176]	@ (8002344 <MX_GPIO_Init+0xf8>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4a2b      	ldr	r2, [pc, #172]	@ (8002344 <MX_GPIO_Init+0xf8>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229e:	4b29      	ldr	r3, [pc, #164]	@ (8002344 <MX_GPIO_Init+0xf8>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4b26      	ldr	r3, [pc, #152]	@ (8002344 <MX_GPIO_Init+0xf8>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	4a25      	ldr	r2, [pc, #148]	@ (8002344 <MX_GPIO_Init+0xf8>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <MX_GPIO_Init+0xf8>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	f240 6106 	movw	r1, #1542	@ 0x606
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022cc:	f001 f8d6 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2103      	movs	r1, #3
 80022d4:	481c      	ldr	r0, [pc, #112]	@ (8002348 <MX_GPIO_Init+0xfc>)
 80022d6:	f001 f8d1 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	2140      	movs	r1, #64	@ 0x40
 80022de:	481b      	ldr	r0, [pc, #108]	@ (800234c <MX_GPIO_Init+0x100>)
 80022e0:	f001 f8cc 	bl	800347c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 80022e4:	f240 6306 	movw	r3, #1542	@ 0x606
 80022e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002300:	f000 ff3a 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8002304:	2303      	movs	r3, #3
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	480b      	ldr	r0, [pc, #44]	@ (8002348 <MX_GPIO_Init+0xfc>)
 800231c:	f000 ff2c 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002320:	2340      	movs	r3, #64	@ 0x40
 8002322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002324:	2301      	movs	r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4805      	ldr	r0, [pc, #20]	@ (800234c <MX_GPIO_Init+0x100>)
 8002338:	f000 ff1e 	bl	8003178 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	@ 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	48000400 	.word	0x48000400
 800234c:	48000800 	.word	0x48000800

08002350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002354:	b672      	cpsid	i
}
 8002356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <Error_Handler+0x8>

0800235c <Motor_Init>:
Motor_t motorLeft;
Motor_t motorRight;

void Motor_Init(Motor_t *motor, TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel,
                GPIO_TypeDef *gpio_port1, uint16_t gpio_pin1,
                GPIO_TypeDef *gpio_port2, uint16_t gpio_pin2) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
    motor->pwm_timer = pwm_timer;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	601a      	str	r2, [r3, #0]
    motor->pwm_channel = pwm_channel;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	605a      	str	r2, [r3, #4]
    motor->gpio_port1 = gpio_port1;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	609a      	str	r2, [r3, #8]
    motor->gpio_pin1 = gpio_pin1;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8b3a      	ldrh	r2, [r7, #24]
 8002380:	819a      	strh	r2, [r3, #12]
    motor->gpio_port2 = gpio_port2;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	611a      	str	r2, [r3, #16]
    motor->gpio_pin2 = gpio_pin2;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8c3a      	ldrh	r2, [r7, #32]
 800238c:	829a      	strh	r2, [r3, #20]

    HAL_TIM_PWM_Start(motor->pwm_timer, motor->pwm_channel);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f003 f845 	bl	8005428 <HAL_TIM_PWM_Start>
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <Motor_Control>:

void Motor_Control(uint32_t pwm_left, uint8_t dir_left, uint32_t pwm_right, uint8_t dir_right) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	460b      	mov	r3, r1
 80023b6:	72fb      	strb	r3, [r7, #11]
 80023b8:	4613      	mov	r3, r2
 80023ba:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
    */

    // Motor Esquerdo
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <Motor_Control+0x7c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	461a      	mov	r2, r3
 80023c8:	2102      	movs	r1, #2
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ce:	f001 f855 	bl	800347c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	2104      	movs	r1, #4
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e6:	f001 f849 	bl	800347c <HAL_GPIO_WritePin>

    // Motor Direito
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <Motor_Control+0x80>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin,  (GPIO_PinState)(dir_right));
 80023f2:	7abb      	ldrb	r3, [r7, #10]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023fe:	f001 f83d 	bl	800347c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 8002402:	7abb      	ldrb	r3, [r7, #10]
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002418:	f001 f830 	bl	800347c <HAL_GPIO_WritePin>
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000418 	.word	0x20000418
 8002428:	200003cc 	.word	0x200003cc

0800242c <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_0


void CS_Select (void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	2101      	movs	r1, #1
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <CS_Select+0x14>)
 8002436:	f001 f821 	bl	800347c <HAL_GPIO_WritePin>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	48000400 	.word	0x48000400

08002444 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	2101      	movs	r1, #1
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <CS_UnSelect+0x14>)
 800244e:	f001 f815 	bl	800347c <HAL_GPIO_WritePin>
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	48000400 	.word	0x48000400

0800245c <CE_Enable>:


void CE_Enable (void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8002460:	2201      	movs	r2, #1
 8002462:	2102      	movs	r1, #2
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <CE_Enable+0x14>)
 8002466:	f001 f809 	bl	800347c <HAL_GPIO_WritePin>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	48000400 	.word	0x48000400

08002474 <CE_Disable>:

void CE_Disable (void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2102      	movs	r1, #2
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <CE_Disable+0x14>)
 800247e:	f000 fffd 	bl	800347c <HAL_GPIO_WritePin>
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	48000400 	.word	0x48000400

0800248c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	460a      	mov	r2, r1
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	4613      	mov	r3, r2
 800249a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f043 0320 	orr.w	r3, r3, #32
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80024a6:	79bb      	ldrb	r3, [r7, #6]
 80024a8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80024aa:	f7ff ffbf 	bl	800242c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80024ae:	f107 010c 	add.w	r1, r7, #12
 80024b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b6:	2202      	movs	r2, #2
 80024b8:	4804      	ldr	r0, [pc, #16]	@ (80024cc <nrf24_WriteReg+0x40>)
 80024ba:	f002 f874 	bl	80045a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80024be:	f7ff ffc1 	bl	8002444 <CS_UnSelect>
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000368 	.word	0x20000368

080024d0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	f043 0320 	orr.w	r3, r3, #32
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80024e8:	f7ff ffa0 	bl	800242c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80024ec:	f107 0114 	add.w	r1, r7, #20
 80024f0:	2364      	movs	r3, #100	@ 0x64
 80024f2:	2201      	movs	r2, #1
 80024f4:	4808      	ldr	r0, [pc, #32]	@ (8002518 <nrf24_WriteRegMulti+0x48>)
 80024f6:	f002 f856 	bl	80045a6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	4804      	ldr	r0, [pc, #16]	@ (8002518 <nrf24_WriteRegMulti+0x48>)
 8002506:	f002 f84e 	bl	80045a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800250a:	f7ff ff9b 	bl	8002444 <CS_UnSelect>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000368 	.word	0x20000368

0800251c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800252a:	f7ff ff7f 	bl	800242c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800252e:	1df9      	adds	r1, r7, #7
 8002530:	2364      	movs	r3, #100	@ 0x64
 8002532:	2201      	movs	r2, #1
 8002534:	4808      	ldr	r0, [pc, #32]	@ (8002558 <nrf24_ReadReg+0x3c>)
 8002536:	f002 f836 	bl	80045a6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800253a:	f107 010f 	add.w	r1, r7, #15
 800253e:	2364      	movs	r3, #100	@ 0x64
 8002540:	2201      	movs	r2, #1
 8002542:	4805      	ldr	r0, [pc, #20]	@ (8002558 <nrf24_ReadReg+0x3c>)
 8002544:	f002 f9a5 	bl	8004892 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002548:	f7ff ff7c 	bl	8002444 <CS_UnSelect>

	return data;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000368 	.word	0x20000368

0800255c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002566:	f7ff ff61 	bl	800242c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800256a:	1df9      	adds	r1, r7, #7
 800256c:	2364      	movs	r3, #100	@ 0x64
 800256e:	2201      	movs	r2, #1
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <nrfsendCmd+0x28>)
 8002572:	f002 f818 	bl	80045a6 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002576:	f7ff ff65 	bl	8002444 <CS_UnSelect>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000368 	.word	0x20000368

08002588 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	2b07      	cmp	r3, #7
 8002596:	d104      	bne.n	80025a2 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8002598:	2100      	movs	r1, #0
 800259a:	2007      	movs	r0, #7
 800259c:	f7ff ff76 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80025a0:	e090      	b.n	80026c4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b17      	cmp	r3, #23
 80025a6:	d104      	bne.n	80025b2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80025a8:	2111      	movs	r1, #17
 80025aa:	2017      	movs	r0, #23
 80025ac:	f7ff ff6e 	bl	800248c <nrf24_WriteReg>
}
 80025b0:	e088      	b.n	80026c4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80025b2:	2108      	movs	r1, #8
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff ff69 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80025ba:	213f      	movs	r1, #63	@ 0x3f
 80025bc:	2001      	movs	r0, #1
 80025be:	f7ff ff65 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80025c2:	2103      	movs	r1, #3
 80025c4:	2002      	movs	r0, #2
 80025c6:	f7ff ff61 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80025ca:	2103      	movs	r1, #3
 80025cc:	2003      	movs	r0, #3
 80025ce:	f7ff ff5d 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80025d2:	2103      	movs	r1, #3
 80025d4:	2004      	movs	r0, #4
 80025d6:	f7ff ff59 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80025da:	2102      	movs	r1, #2
 80025dc:	2005      	movs	r0, #5
 80025de:	f7ff ff55 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80025e2:	210e      	movs	r1, #14
 80025e4:	2006      	movs	r0, #6
 80025e6:	f7ff ff51 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80025ea:	2100      	movs	r1, #0
 80025ec:	2007      	movs	r0, #7
 80025ee:	f7ff ff4d 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80025f2:	2100      	movs	r1, #0
 80025f4:	2008      	movs	r0, #8
 80025f6:	f7ff ff49 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80025fa:	2100      	movs	r1, #0
 80025fc:	2009      	movs	r0, #9
 80025fe:	f7ff ff45 	bl	800248c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8002602:	4a32      	ldr	r2, [pc, #200]	@ (80026cc <nrf24_reset+0x144>)
 8002604:	f107 0318 	add.w	r3, r7, #24
 8002608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800260c:	6018      	str	r0, [r3, #0]
 800260e:	3304      	adds	r3, #4
 8002610:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8002612:	f107 0318 	add.w	r3, r7, #24
 8002616:	2205      	movs	r2, #5
 8002618:	4619      	mov	r1, r3
 800261a:	200a      	movs	r0, #10
 800261c:	f7ff ff58 	bl	80024d0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8002620:	4a2b      	ldr	r2, [pc, #172]	@ (80026d0 <nrf24_reset+0x148>)
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262a:	6018      	str	r0, [r3, #0]
 800262c:	3304      	adds	r3, #4
 800262e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	2205      	movs	r2, #5
 8002636:	4619      	mov	r1, r3
 8002638:	200b      	movs	r0, #11
 800263a:	f7ff ff49 	bl	80024d0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800263e:	21c3      	movs	r1, #195	@ 0xc3
 8002640:	200c      	movs	r0, #12
 8002642:	f7ff ff23 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8002646:	21c4      	movs	r1, #196	@ 0xc4
 8002648:	200d      	movs	r0, #13
 800264a:	f7ff ff1f 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800264e:	21c5      	movs	r1, #197	@ 0xc5
 8002650:	200e      	movs	r0, #14
 8002652:	f7ff ff1b 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8002656:	21c6      	movs	r1, #198	@ 0xc6
 8002658:	200f      	movs	r0, #15
 800265a:	f7ff ff17 	bl	800248c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800265e:	4a1b      	ldr	r2, [pc, #108]	@ (80026cc <nrf24_reset+0x144>)
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002668:	6018      	str	r0, [r3, #0]
 800266a:	3304      	adds	r3, #4
 800266c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800266e:	f107 0308 	add.w	r3, r7, #8
 8002672:	2205      	movs	r2, #5
 8002674:	4619      	mov	r1, r3
 8002676:	2010      	movs	r0, #16
 8002678:	f7ff ff2a 	bl	80024d0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800267c:	2100      	movs	r1, #0
 800267e:	2011      	movs	r0, #17
 8002680:	f7ff ff04 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8002684:	2100      	movs	r1, #0
 8002686:	2012      	movs	r0, #18
 8002688:	f7ff ff00 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800268c:	2100      	movs	r1, #0
 800268e:	2013      	movs	r0, #19
 8002690:	f7ff fefc 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8002694:	2100      	movs	r1, #0
 8002696:	2014      	movs	r0, #20
 8002698:	f7ff fef8 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800269c:	2100      	movs	r1, #0
 800269e:	2015      	movs	r0, #21
 80026a0:	f7ff fef4 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80026a4:	2100      	movs	r1, #0
 80026a6:	2016      	movs	r0, #22
 80026a8:	f7ff fef0 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80026ac:	2111      	movs	r1, #17
 80026ae:	2017      	movs	r0, #23
 80026b0:	f7ff feec 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80026b4:	2100      	movs	r1, #0
 80026b6:	201c      	movs	r0, #28
 80026b8:	f7ff fee8 	bl	800248c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80026bc:	2100      	movs	r1, #0
 80026be:	201d      	movs	r0, #29
 80026c0:	f7ff fee4 	bl	800248c <nrf24_WriteReg>
}
 80026c4:	bf00      	nop
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	0800a2f0 	.word	0x0800a2f0
 80026d0:	0800a2f8 	.word	0x0800a2f8

080026d4 <NRF24_Init>:




void NRF24_Init (void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80026d8:	f7ff fecc 	bl	8002474 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7ff ff53 	bl	8002588 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80026e2:	2100      	movs	r1, #0
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff fed1 	bl	800248c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80026ea:	2100      	movs	r1, #0
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7ff fecd 	bl	800248c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80026f2:	2100      	movs	r1, #0
 80026f4:	2002      	movs	r0, #2
 80026f6:	f7ff fec9 	bl	800248c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80026fa:	2103      	movs	r1, #3
 80026fc:	2003      	movs	r0, #3
 80026fe:	f7ff fec5 	bl	800248c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8002702:	2100      	movs	r1, #0
 8002704:	2004      	movs	r0, #4
 8002706:	f7ff fec1 	bl	800248c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800270a:	2100      	movs	r1, #0
 800270c:	2005      	movs	r0, #5
 800270e:	f7ff febd 	bl	800248c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8002712:	210e      	movs	r1, #14
 8002714:	2006      	movs	r0, #6
 8002716:	f7ff feb9 	bl	800248c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800271a:	f7ff fe9f 	bl	800245c <CE_Enable>

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}

08002722 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800272e:	f7ff fea1 	bl	8002474 <CE_Disable>

	nrf24_reset (STATUS);
 8002732:	2007      	movs	r0, #7
 8002734:	f7ff ff28 	bl	8002588 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	4619      	mov	r1, r3
 800273c:	2005      	movs	r0, #5
 800273e:	f7ff fea5 	bl	800248c <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8002742:	2002      	movs	r0, #2
 8002744:	f7ff feea 	bl	800251c <nrf24_ReadReg>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	4619      	mov	r1, r3
 8002758:	2002      	movs	r0, #2
 800275a:	f7ff fe97 	bl	800248c <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800275e:	2205      	movs	r2, #5
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	200b      	movs	r0, #11
 8002764:	f7ff feb4 	bl	80024d0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8002768:	21ee      	movs	r1, #238	@ 0xee
 800276a:	200c      	movs	r0, #12
 800276c:	f7ff fe8e 	bl	800248c <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8002770:	2120      	movs	r1, #32
 8002772:	2013      	movs	r0, #19
 8002774:	f7ff fe8a 	bl	800248c <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8002778:	2000      	movs	r0, #0
 800277a:	f7ff fecf 	bl	800251c <nrf24_ReadReg>
 800277e:	4603      	mov	r3, r0
 8002780:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	f043 0303 	orr.w	r3, r3, #3
 8002788:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800278a:	7bbb      	ldrb	r3, [r7, #14]
 800278c:	4619      	mov	r1, r3
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff fe7c 	bl	800248c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002794:	f7ff fe62 	bl	800245c <CE_Enable>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80027a8:	2007      	movs	r0, #7
 80027aa:	f7ff feb7 	bl	800251c <nrf24_ReadReg>
 80027ae:	4603      	mov	r3, r0
 80027b0:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
 80027b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <isDataAvailable+0x34>
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80027c8:	2140      	movs	r1, #64	@ 0x40
 80027ca:	2007      	movs	r0, #7
 80027cc:	f7ff fe5e 	bl	800248c <nrf24_WriteReg>

		return 1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <isDataAvailable+0x36>
	}

	return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80027ec:	f7ff fe1e 	bl	800242c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80027f0:	2361      	movs	r3, #97	@ 0x61
 80027f2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80027f4:	f107 010f 	add.w	r1, r7, #15
 80027f8:	2364      	movs	r3, #100	@ 0x64
 80027fa:	2201      	movs	r2, #1
 80027fc:	480c      	ldr	r0, [pc, #48]	@ (8002830 <NRF24_Receive+0x50>)
 80027fe:	f001 fed2 	bl	80045a6 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8002802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002806:	2220      	movs	r2, #32
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4809      	ldr	r0, [pc, #36]	@ (8002830 <NRF24_Receive+0x50>)
 800280c:	f002 f841 	bl	8004892 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8002810:	f7ff fe18 	bl	8002444 <CS_UnSelect>

	HAL_Delay(1);
 8002814:	2001      	movs	r0, #1
 8002816:	f000 fba9 	bl	8002f6c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800281a:	23e2      	movs	r3, #226	@ 0xe2
 800281c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fe9b 	bl	800255c <nrfsendCmd>
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000368 	.word	0x20000368

08002834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283a:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <HAL_MspInit+0x44>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283e:	4a0e      	ldr	r2, [pc, #56]	@ (8002878 <HAL_MspInit+0x44>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6613      	str	r3, [r2, #96]	@ 0x60
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <HAL_MspInit+0x44>)
 8002848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_MspInit+0x44>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	4a08      	ldr	r2, [pc, #32]	@ (8002878 <HAL_MspInit+0x44>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285c:	6593      	str	r3, [r2, #88]	@ 0x58
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <HAL_MspInit+0x44>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800286a:	f000 fec3 	bl	80035f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a25      	ldr	r2, [pc, #148]	@ (8002930 <HAL_SPI_MspInit+0xb4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d144      	bne.n	8002928 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800289e:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	4a24      	ldr	r2, [pc, #144]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80028aa:	4b22      	ldr	r3, [pc, #136]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_SPI_MspInit+0xb8>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 80028e6:	23a0      	movs	r3, #160	@ 0xa0
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f6:	2305      	movs	r3, #5
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002904:	f000 fc38 	bl	8003178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002908:	2310      	movs	r3, #16
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002918:	2305      	movs	r3, #5
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	4805      	ldr	r0, [pc, #20]	@ (8002938 <HAL_SPI_MspInit+0xbc>)
 8002924:	f000 fc28 	bl	8003178 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	@ 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40013000 	.word	0x40013000
 8002934:	40021000 	.word	0x40021000
 8002938:	48000400 	.word	0x48000400

0800293c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a13      	ldr	r2, [pc, #76]	@ (8002998 <HAL_TIM_Base_MspInit+0x5c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10c      	bne.n	8002968 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <HAL_TIM_Base_MspInit+0x60>)
 8002950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <HAL_TIM_Base_MspInit+0x60>)
 8002954:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002958:	6613      	str	r3, [r2, #96]	@ 0x60
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <HAL_TIM_Base_MspInit+0x60>)
 800295c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800295e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002966:	e010      	b.n	800298a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002970:	d10b      	bne.n	800298a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <HAL_TIM_Base_MspInit+0x60>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_TIM_Base_MspInit+0x60>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6593      	str	r3, [r2, #88]	@ 0x58
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_TIM_Base_MspInit+0x60>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	@ 0x30
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <HAL_TIM_Encoder_MspInit+0xdc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d129      	bne.n	8002a16 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	4b29      	ldr	r3, [pc, #164]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029de:	4a28      	ldr	r2, [pc, #160]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029e6:	4b26      	ldr	r3, [pc, #152]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 80029f2:	2350      	movs	r3, #80	@ 0x50
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a02:	2302      	movs	r3, #2
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 031c 	add.w	r3, r7, #28
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a10:	f000 fbb2 	bl	8003178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a14:	e02e      	b.n	8002a74 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d129      	bne.n	8002a74 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	4a16      	ldr	r2, [pc, #88]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3c:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a44:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 8002a50:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002a62:	230a      	movs	r3, #10
 8002a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a70:	f000 fb82 	bl	8003178 <HAL_GPIO_Init>
}
 8002a74:	bf00      	nop
 8002a76:	3730      	adds	r7, #48	@ 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40000800 	.word	0x40000800

08002a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	@ 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a23      	ldr	r2, [pc, #140]	@ (8002b34 <HAL_TIM_MspPostInit+0xac>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11e      	bne.n	8002ae8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <HAL_TIM_MspPostInit+0xb0>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_TIM_MspPostInit+0xb0>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <HAL_TIM_MspPostInit+0xb0>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 8002ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ad4:	2306      	movs	r3, #6
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ae2:	f000 fb49 	bl	8003178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ae6:	e021      	b.n	8002b2c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af0:	d11c      	bne.n	8002b2c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	4b11      	ldr	r3, [pc, #68]	@ (8002b38 <HAL_TIM_MspPostInit+0xb0>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	4a10      	ldr	r2, [pc, #64]	@ (8002b38 <HAL_TIM_MspPostInit+0xb0>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afe:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <HAL_TIM_MspPostInit+0xb0>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b28:	f000 fb26 	bl	8003178 <HAL_GPIO_Init>
}
 8002b2c:	bf00      	nop
 8002b2e:	3728      	adds	r7, #40	@ 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b09c      	sub	sp, #112	@ 0x70
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b54:	f107 0318 	add.w	r3, r7, #24
 8002b58:	2244      	movs	r2, #68	@ 0x44
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f005 fa64 	bl	800802a <memset>
  if(huart->Instance==USART1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a2c      	ldr	r2, [pc, #176]	@ (8002c18 <HAL_UART_MspInit+0xdc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d151      	bne.n	8002c10 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b74:	f107 0318 	add.w	r3, r7, #24
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 fa79 	bl	8004070 <HAL_RCCEx_PeriphCLKConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b84:	f7ff fbe4 	bl	8002350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b92:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b94:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbc:	4a17      	ldr	r2, [pc, #92]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bc4:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <HAL_UART_MspInit+0xe0>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be0:	2307      	movs	r3, #7
 8002be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002be4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002be8:	4619      	mov	r1, r3
 8002bea:	480d      	ldr	r0, [pc, #52]	@ (8002c20 <HAL_UART_MspInit+0xe4>)
 8002bec:	f000 fac4 	bl	8003178 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c00:	2307      	movs	r3, #7
 8002c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002c04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4806      	ldr	r0, [pc, #24]	@ (8002c24 <HAL_UART_MspInit+0xe8>)
 8002c0c:	f000 fab4 	bl	8003178 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c10:	bf00      	nop
 8002c12:	3770      	adds	r7, #112	@ 0x70
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	48000800 	.word	0x48000800
 8002c24:	48000400 	.word	0x48000400

08002c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <NMI_Handler+0x4>

08002c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <HardFault_Handler+0x4>

08002c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <MemManage_Handler+0x4>

08002c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <BusFault_Handler+0x4>

08002c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <UsageFault_Handler+0x4>

08002c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7e:	f000 f957 	bl	8002f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  return 1;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <_kill>:

int _kill(int pid, int sig)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ca0:	f005 fa16 	bl	80080d0 <__errno>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2216      	movs	r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]
  return -1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_exit>:

void _exit (int status)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cbe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffe7 	bl	8002c96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <_exit+0x12>

08002ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00a      	b.n	8002cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cde:	f3af 8000 	nop.w
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60ba      	str	r2, [r7, #8]
 8002cea:	b2ca      	uxtb	r2, r1
 8002cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf0      	blt.n	8002cde <_read+0x12>
  }

  return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e009      	b.n	8002d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dbf1      	blt.n	8002d18 <_write+0x12>
  }
  return len;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_close>:

int _close(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d66:	605a      	str	r2, [r3, #4]
  return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <_isatty>:

int _isatty(int file)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db0:	4a14      	ldr	r2, [pc, #80]	@ (8002e04 <_sbrk+0x5c>)
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <_sbrk+0x60>)
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <_sbrk+0x64>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	@ (8002e10 <_sbrk+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dca:	4b10      	ldr	r3, [pc, #64]	@ (8002e0c <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd8:	f005 f97a 	bl	80080d0 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de6:	e009      	b.n	8002dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de8:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dee:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <_sbrk+0x64>)
 8002df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20008000 	.word	0x20008000
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	200005c0 	.word	0x200005c0
 8002e10:	20000718 	.word	0x20000718

08002e14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <SystemInit+0x20>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e1e:	4a05      	ldr	r2, [pc, #20]	@ (8002e34 <SystemInit+0x20>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 8002e38:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e3c:	f7ff ffea 	bl	8002e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	@ (8002e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	@ (8002e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <LoopForever+0xe>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	@ (8002e84 <LoopForever+0x16>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002e66:	f005 f939 	bl	80080dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e6a:	f7fe ff2f 	bl	8001ccc <main>

08002e6e <LoopForever>:

LoopForever:
    b LoopForever
 8002e6e:	e7fe      	b.n	8002e6e <LoopForever>
 ldr   r0, =_estack
 8002e70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e78:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002e7c:	0800a6c0 	.word	0x0800a6c0
  ldr r2, =_sbss
 8002e80:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002e84:	20000714 	.word	0x20000714

08002e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC1_2_IRQHandler>

08002e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 f93d 	bl	8003114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e9a:	200f      	movs	r0, #15
 8002e9c:	f000 f80e 	bl	8002ebc <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	71fb      	strb	r3, [r7, #7]
 8002eaa:	e001      	b.n	8002eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002eac:	f7ff fcc2 	bl	8002834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eb0:	79fb      	ldrb	r3, [r7, #7]

}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ec8:	4b16      	ldr	r3, [pc, #88]	@ (8002f24 <HAL_InitTick+0x68>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d022      	beq.n	8002f16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002ed0:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <HAL_InitTick+0x6c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <HAL_InitTick+0x68>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f93a 	bl	800315e <HAL_SYSTICK_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10f      	bne.n	8002f10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	d809      	bhi.n	8002f0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002efe:	f000 f914 	bl	800312a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f02:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <HAL_InitTick+0x70>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e007      	b.n	8002f1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e004      	b.n	8002f1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e001      	b.n	8002f1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000020 	.word	0x20000020
 8002f28:	20000018 	.word	0x20000018
 8002f2c:	2000001c 	.word	0x2000001c

08002f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_IncTick+0x1c>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <HAL_IncTick+0x20>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	4a03      	ldr	r2, [pc, #12]	@ (8002f4c <HAL_IncTick+0x1c>)
 8002f40:	6013      	str	r3, [r2, #0]
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	200005c4 	.word	0x200005c4
 8002f50:	20000020 	.word	0x20000020

08002f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return uwTick;
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <HAL_GetTick+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	200005c4 	.word	0x200005c4

08002f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff ffee 	bl	8002f54 <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f84:	d004      	beq.n	8002f90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f86:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_Delay+0x40>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f90:	bf00      	nop
 8002f92:	f7ff ffdf 	bl	8002f54 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d8f7      	bhi.n	8002f92 <HAL_Delay+0x26>
  {
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000020 	.word	0x20000020

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	@ (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db0a      	blt.n	800303e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	490c      	ldr	r1, [pc, #48]	@ (8003060 <__NVIC_SetPriority+0x4c>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	440b      	add	r3, r1
 8003038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800303c:	e00a      	b.n	8003054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4908      	ldr	r1, [pc, #32]	@ (8003064 <__NVIC_SetPriority+0x50>)
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	3b04      	subs	r3, #4
 800304c:	0112      	lsls	r2, r2, #4
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	440b      	add	r3, r1
 8003052:	761a      	strb	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e100 	.word	0xe000e100
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f1c3 0307 	rsb	r3, r3, #7
 8003082:	2b04      	cmp	r3, #4
 8003084:	bf28      	it	cs
 8003086:	2304      	movcs	r3, #4
 8003088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3304      	adds	r3, #4
 800308e:	2b06      	cmp	r3, #6
 8003090:	d902      	bls.n	8003098 <NVIC_EncodePriority+0x30>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3b03      	subs	r3, #3
 8003096:	e000      	b.n	800309a <NVIC_EncodePriority+0x32>
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800309c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	43d9      	mvns	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	4313      	orrs	r3, r2
         );
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3b01      	subs	r3, #1
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e0:	d301      	bcc.n	80030e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00f      	b.n	8003106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <SysTick_Config+0x40>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ee:	210f      	movs	r1, #15
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030f4:	f7ff ff8e 	bl	8003014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <SysTick_Config+0x40>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fe:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <SysTick_Config+0x40>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010

08003114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff ff47 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003138:	f7ff ff5e 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 800313c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7ff ff90 	bl	8003068 <NVIC_EncodePriority>
 8003148:	4602      	mov	r2, r0
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff5f 	bl	8003014 <__NVIC_SetPriority>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffb2 	bl	80030d0 <SysTick_Config>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003186:	e15a      	b.n	800343e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 814c 	beq.w	8003438 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d005      	beq.n	80031b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d130      	bne.n	800321a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ee:	2201      	movs	r2, #1
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	f003 0201 	and.w	r2, r3, #1
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b03      	cmp	r3, #3
 8003224:	d017      	beq.n	8003256 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4013      	ands	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d123      	bne.n	80032aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	08da      	lsrs	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3208      	adds	r2, #8
 800326a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	220f      	movs	r2, #15
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	08da      	lsrs	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3208      	adds	r2, #8
 80032a4:	6939      	ldr	r1, [r7, #16]
 80032a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2203      	movs	r2, #3
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0203 	and.w	r2, r3, #3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a6 	beq.w	8003438 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ec:	4b5b      	ldr	r3, [pc, #364]	@ (800345c <HAL_GPIO_Init+0x2e4>)
 80032ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f0:	4a5a      	ldr	r2, [pc, #360]	@ (800345c <HAL_GPIO_Init+0x2e4>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80032f8:	4b58      	ldr	r3, [pc, #352]	@ (800345c <HAL_GPIO_Init+0x2e4>)
 80032fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003304:	4a56      	ldr	r2, [pc, #344]	@ (8003460 <HAL_GPIO_Init+0x2e8>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800332e:	d01f      	beq.n	8003370 <HAL_GPIO_Init+0x1f8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a4c      	ldr	r2, [pc, #304]	@ (8003464 <HAL_GPIO_Init+0x2ec>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d019      	beq.n	800336c <HAL_GPIO_Init+0x1f4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a4b      	ldr	r2, [pc, #300]	@ (8003468 <HAL_GPIO_Init+0x2f0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_GPIO_Init+0x1f0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a4a      	ldr	r2, [pc, #296]	@ (800346c <HAL_GPIO_Init+0x2f4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00d      	beq.n	8003364 <HAL_GPIO_Init+0x1ec>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a49      	ldr	r2, [pc, #292]	@ (8003470 <HAL_GPIO_Init+0x2f8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d007      	beq.n	8003360 <HAL_GPIO_Init+0x1e8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a48      	ldr	r2, [pc, #288]	@ (8003474 <HAL_GPIO_Init+0x2fc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d101      	bne.n	800335c <HAL_GPIO_Init+0x1e4>
 8003358:	2305      	movs	r3, #5
 800335a:	e00a      	b.n	8003372 <HAL_GPIO_Init+0x1fa>
 800335c:	2306      	movs	r3, #6
 800335e:	e008      	b.n	8003372 <HAL_GPIO_Init+0x1fa>
 8003360:	2304      	movs	r3, #4
 8003362:	e006      	b.n	8003372 <HAL_GPIO_Init+0x1fa>
 8003364:	2303      	movs	r3, #3
 8003366:	e004      	b.n	8003372 <HAL_GPIO_Init+0x1fa>
 8003368:	2302      	movs	r3, #2
 800336a:	e002      	b.n	8003372 <HAL_GPIO_Init+0x1fa>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_GPIO_Init+0x1fa>
 8003370:	2300      	movs	r3, #0
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	f002 0203 	and.w	r2, r2, #3
 8003378:	0092      	lsls	r2, r2, #2
 800337a:	4093      	lsls	r3, r2
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003382:	4937      	ldr	r1, [pc, #220]	@ (8003460 <HAL_GPIO_Init+0x2e8>)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003390:	4b39      	ldr	r3, [pc, #228]	@ (8003478 <HAL_GPIO_Init+0x300>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43db      	mvns	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033b4:	4a30      	ldr	r2, [pc, #192]	@ (8003478 <HAL_GPIO_Init+0x300>)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003478 <HAL_GPIO_Init+0x300>)
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033de:	4a26      	ldr	r2, [pc, #152]	@ (8003478 <HAL_GPIO_Init+0x300>)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_GPIO_Init+0x300>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003408:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <HAL_GPIO_Init+0x300>)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800340e:	4b1a      	ldr	r3, [pc, #104]	@ (8003478 <HAL_GPIO_Init+0x300>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003432:	4a11      	ldr	r2, [pc, #68]	@ (8003478 <HAL_GPIO_Init+0x300>)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3301      	adds	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	f47f ae9d 	bne.w	8003188 <HAL_GPIO_Init+0x10>
  }
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40021000 	.word	0x40021000
 8003460:	40010000 	.word	0x40010000
 8003464:	48000400 	.word	0x48000400
 8003468:	48000800 	.word	0x48000800
 800346c:	48000c00 	.word	0x48000c00
 8003470:	48001000 	.word	0x48001000
 8003474:	48001400 	.word	0x48001400
 8003478:	40010400 	.word	0x40010400

0800347c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
 8003488:	4613      	mov	r3, r2
 800348a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800348c:	787b      	ldrb	r3, [r7, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d141      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ba:	4b4b      	ldr	r3, [pc, #300]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c6:	d131      	bne.n	800352c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c8:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ce:	4a46      	ldr	r2, [pc, #280]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d8:	4b43      	ldr	r3, [pc, #268]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034e0:	4a41      	ldr	r2, [pc, #260]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034e8:	4b40      	ldr	r3, [pc, #256]	@ (80035ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2232      	movs	r2, #50	@ 0x32
 80034ee:	fb02 f303 	mul.w	r3, r2, r3
 80034f2:	4a3f      	ldr	r2, [pc, #252]	@ (80035f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	3301      	adds	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fe:	e002      	b.n	8003506 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003506:	4b38      	ldr	r3, [pc, #224]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003512:	d102      	bne.n	800351a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f2      	bne.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800351a:	4b33      	ldr	r3, [pc, #204]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003526:	d158      	bne.n	80035da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e057      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800352c:	4b2e      	ldr	r3, [pc, #184]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003532:	4a2d      	ldr	r2, [pc, #180]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800353c:	e04d      	b.n	80035da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003544:	d141      	bne.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003546:	4b28      	ldr	r3, [pc, #160]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800354e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003552:	d131      	bne.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003554:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800355a:	4a23      	ldr	r2, [pc, #140]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003564:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800356c:	4a1e      	ldr	r2, [pc, #120]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003574:	4b1d      	ldr	r3, [pc, #116]	@ (80035ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2232      	movs	r2, #50	@ 0x32
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a1c      	ldr	r2, [pc, #112]	@ (80035f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	0c9b      	lsrs	r3, r3, #18
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800358a:	e002      	b.n	8003592 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003592:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359e:	d102      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f2      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a6:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b2:	d112      	bne.n	80035da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e011      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035be:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035c8:	e007      	b.n	80035da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035ca:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035d2:	4a05      	ldr	r2, [pc, #20]	@ (80035e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40007000 	.word	0x40007000
 80035ec:	20000018 	.word	0x20000018
 80035f0:	431bde83 	.word	0x431bde83

080035f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003602:	6093      	str	r3, [r2, #8]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40007000 	.word	0x40007000

08003614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e2fe      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d075      	beq.n	800371e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b97      	ldr	r3, [pc, #604]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	4b94      	ldr	r3, [pc, #592]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b0c      	cmp	r3, #12
 800364a:	d102      	bne.n	8003652 <HAL_RCC_OscConfig+0x3e>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d002      	beq.n	8003658 <HAL_RCC_OscConfig+0x44>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d10b      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4b8d      	ldr	r3, [pc, #564]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05b      	beq.n	800371c <HAL_RCC_OscConfig+0x108>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d157      	bne.n	800371c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e2d9      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x74>
 800367a:	4b85      	ldr	r3, [pc, #532]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a84      	ldr	r2, [pc, #528]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e01d      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x98>
 8003692:	4b7f      	ldr	r3, [pc, #508]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7e      	ldr	r2, [pc, #504]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b7c      	ldr	r3, [pc, #496]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7b      	ldr	r2, [pc, #492]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 80036ac:	4b78      	ldr	r3, [pc, #480]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a77      	ldr	r2, [pc, #476]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b75      	ldr	r3, [pc, #468]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a74      	ldr	r2, [pc, #464]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7ff fc42 	bl	8002f54 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7ff fc3e 	bl	8002f54 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e29e      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0xc0>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7ff fc2e 	bl	8002f54 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7ff fc2a 	bl	8002f54 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e28a      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370e:	4b60      	ldr	r3, [pc, #384]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0xe8>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d075      	beq.n	8003816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372a:	4b59      	ldr	r3, [pc, #356]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003734:	4b56      	ldr	r3, [pc, #344]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d102      	bne.n	800374a <HAL_RCC_OscConfig+0x136>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d002      	beq.n	8003750 <HAL_RCC_OscConfig+0x13c>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d11f      	bne.n	8003790 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003750:	4b4f      	ldr	r3, [pc, #316]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_OscConfig+0x154>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e25d      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b49      	ldr	r3, [pc, #292]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	4946      	ldr	r1, [pc, #280]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800377c:	4b45      	ldr	r3, [pc, #276]	@ (8003894 <HAL_RCC_OscConfig+0x280>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fb9b 	bl	8002ebc <HAL_InitTick>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d043      	beq.n	8003814 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e249      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d023      	beq.n	80037e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003798:	4b3d      	ldr	r3, [pc, #244]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3c      	ldr	r2, [pc, #240]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800379e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7ff fbd6 	bl	8002f54 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ac:	f7ff fbd2 	bl	8002f54 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e232      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037be:	4b34      	ldr	r3, [pc, #208]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ca:	4b31      	ldr	r3, [pc, #196]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	061b      	lsls	r3, r3, #24
 80037d8:	492d      	ldr	r1, [pc, #180]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]
 80037de:	e01a      	b.n	8003816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 80037e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7ff fbb2 	bl	8002f54 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f4:	f7ff fbae 	bl	8002f54 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e20e      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003806:	4b22      	ldr	r3, [pc, #136]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x1e0>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d041      	beq.n	80038a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01c      	beq.n	8003864 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003830:	4a17      	ldr	r2, [pc, #92]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7ff fb8b 	bl	8002f54 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003842:	f7ff fb87 	bl	8002f54 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1e7      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003854:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ef      	beq.n	8003842 <HAL_RCC_OscConfig+0x22e>
 8003862:	e020      	b.n	80038a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003864:	4b0a      	ldr	r3, [pc, #40]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386a:	4a09      	ldr	r2, [pc, #36]	@ (8003890 <HAL_RCC_OscConfig+0x27c>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7ff fb6e 	bl	8002f54 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800387a:	e00d      	b.n	8003898 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387c:	f7ff fb6a 	bl	8002f54 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d906      	bls.n	8003898 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1ca      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003898:	4b8c      	ldr	r3, [pc, #560]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1ea      	bne.n	800387c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80a6 	beq.w	8003a00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b4:	2300      	movs	r3, #0
 80038b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038b8:	4b84      	ldr	r3, [pc, #528]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_OscConfig+0x2b4>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x2b6>
 80038c8:	2300      	movs	r3, #0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	4b7f      	ldr	r3, [pc, #508]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	4a7e      	ldr	r2, [pc, #504]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038da:	4b7c      	ldr	r3, [pc, #496]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ea:	4b79      	ldr	r3, [pc, #484]	@ (8003ad0 <HAL_RCC_OscConfig+0x4bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f6:	4b76      	ldr	r3, [pc, #472]	@ (8003ad0 <HAL_RCC_OscConfig+0x4bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a75      	ldr	r2, [pc, #468]	@ (8003ad0 <HAL_RCC_OscConfig+0x4bc>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7ff fb27 	bl	8002f54 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7ff fb23 	bl	8002f54 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e183      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad0 <HAL_RCC_OscConfig+0x4bc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d108      	bne.n	8003942 <HAL_RCC_OscConfig+0x32e>
 8003930:	4b66      	ldr	r3, [pc, #408]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003936:	4a65      	ldr	r2, [pc, #404]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003940:	e024      	b.n	800398c <HAL_RCC_OscConfig+0x378>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d110      	bne.n	800396c <HAL_RCC_OscConfig+0x358>
 800394a:	4b60      	ldr	r3, [pc, #384]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003950:	4a5e      	ldr	r2, [pc, #376]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800395a:	4b5c      	ldr	r3, [pc, #368]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003960:	4a5a      	ldr	r2, [pc, #360]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800396a:	e00f      	b.n	800398c <HAL_RCC_OscConfig+0x378>
 800396c:	4b57      	ldr	r3, [pc, #348]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	4a56      	ldr	r2, [pc, #344]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003982:	4a52      	ldr	r2, [pc, #328]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d016      	beq.n	80039c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7ff fade 	bl	8002f54 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399c:	f7ff fada 	bl	8002f54 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e138      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ed      	beq.n	800399c <HAL_RCC_OscConfig+0x388>
 80039c0:	e015      	b.n	80039ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c2:	f7ff fac7 	bl	8002f54 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ca:	f7ff fac3 	bl	8002f54 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e121      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e0:	4b3a      	ldr	r3, [pc, #232]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ed      	bne.n	80039ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ee:	7ffb      	ldrb	r3, [r7, #31]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f4:	4b35      	ldr	r3, [pc, #212]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	4a34      	ldr	r2, [pc, #208]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 80039fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d03c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a14:	4b2d      	ldr	r3, [pc, #180]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7ff fa96 	bl	8002f54 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a2c:	f7ff fa92 	bl	8002f54 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e0f2      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a3e:	4b23      	ldr	r3, [pc, #140]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ef      	beq.n	8003a2c <HAL_RCC_OscConfig+0x418>
 8003a4c:	e01b      	b.n	8003a86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a54:	4a1d      	ldr	r2, [pc, #116]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7ff fa79 	bl	8002f54 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a66:	f7ff fa75 	bl	8002f54 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0d5      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ef      	bne.n	8003a66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80c9 	beq.w	8003c22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	f000 8083 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d15e      	bne.n	8003b64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa6:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a08      	ldr	r2, [pc, #32]	@ (8003acc <HAL_RCC_OscConfig+0x4b8>)
 8003aac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7ff fa4f 	bl	8002f54 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab8:	e00c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aba:	f7ff fa4b 	bl	8002f54 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d905      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e0ab      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad4:	4b55      	ldr	r3, [pc, #340]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ec      	bne.n	8003aba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae0:	4b52      	ldr	r3, [pc, #328]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	4b52      	ldr	r3, [pc, #328]	@ (8003c30 <HAL_RCC_OscConfig+0x61c>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6a11      	ldr	r1, [r2, #32]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003af0:	3a01      	subs	r2, #1
 8003af2:	0112      	lsls	r2, r2, #4
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003afa:	0212      	lsls	r2, r2, #8
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b02:	0852      	lsrs	r2, r2, #1
 8003b04:	3a01      	subs	r2, #1
 8003b06:	0552      	lsls	r2, r2, #21
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b0e:	0852      	lsrs	r2, r2, #1
 8003b10:	3a01      	subs	r2, #1
 8003b12:	0652      	lsls	r2, r2, #25
 8003b14:	4311      	orrs	r1, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b1a:	06d2      	lsls	r2, r2, #27
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	4943      	ldr	r1, [pc, #268]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b24:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a40      	ldr	r2, [pc, #256]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b30:	4b3e      	ldr	r3, [pc, #248]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a3d      	ldr	r2, [pc, #244]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7ff fa0a 	bl	8002f54 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7ff fa06 	bl	8002f54 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e066      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b56:	4b35      	ldr	r3, [pc, #212]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x530>
 8003b62:	e05e      	b.n	8003c22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b31      	ldr	r3, [pc, #196]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a30      	ldr	r2, [pc, #192]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7ff f9f0 	bl	8002f54 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7ff f9ec 	bl	8002f54 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04c      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8a:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b96:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	4924      	ldr	r1, [pc, #144]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003b9c:	4b25      	ldr	r3, [pc, #148]	@ (8003c34 <HAL_RCC_OscConfig+0x620>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60cb      	str	r3, [r1, #12]
 8003ba2:	e03e      	b.n	8003c22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e039      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <HAL_RCC_OscConfig+0x618>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d12c      	bne.n	8003c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d123      	bne.n	8003c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d11b      	bne.n	8003c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d113      	bne.n	8003c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	3b01      	subs	r3, #1
 8003c18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	019f800c 	.word	0x019f800c
 8003c34:	feeefffc 	.word	0xfeeefffc

08003c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e11e      	b.n	8003e8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c50:	4b91      	ldr	r3, [pc, #580]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d910      	bls.n	8003c80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b8e      	ldr	r3, [pc, #568]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 020f 	bic.w	r2, r3, #15
 8003c66:	498c      	ldr	r1, [pc, #560]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b8a      	ldr	r3, [pc, #552]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e106      	b.n	8003e8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d073      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d129      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c94:	4b81      	ldr	r3, [pc, #516]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0f4      	b.n	8003e8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ca4:	f000 f99e 	bl	8003fe4 <RCC_GetSysClockFreqFromPLLSource>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea0 <HAL_RCC_ClockConfig+0x268>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d93f      	bls.n	8003d32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d033      	beq.n	8003d32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d12f      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cd2:	4b72      	ldr	r3, [pc, #456]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cda:	4a70      	ldr	r2, [pc, #448]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ce2:	2380      	movs	r3, #128	@ 0x80
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e024      	b.n	8003d32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0c6      	b.n	8003e8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d00:	4b66      	ldr	r3, [pc, #408]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0be      	b.n	8003e8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d10:	f000 f8ce 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4a61      	ldr	r2, [pc, #388]	@ (8003ea0 <HAL_RCC_ClockConfig+0x268>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d909      	bls.n	8003d32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d26:	4a5d      	ldr	r2, [pc, #372]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b5a      	ldr	r3, [pc, #360]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4957      	ldr	r1, [pc, #348]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d44:	f7ff f906 	bl	8002f54 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7ff f902 	bl	8002f54 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e095      	b.n	8003e8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b4e      	ldr	r3, [pc, #312]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d8c:	4b43      	ldr	r3, [pc, #268]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a42      	ldr	r2, [pc, #264]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003d92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003da4:	4b3d      	ldr	r3, [pc, #244]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dac:	4a3b      	ldr	r2, [pc, #236]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003dae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003db2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db4:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4936      	ldr	r1, [pc, #216]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2b80      	cmp	r3, #128	@ 0x80
 8003dcc:	d105      	bne.n	8003dda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dce:	4b33      	ldr	r3, [pc, #204]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4a32      	ldr	r2, [pc, #200]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003dd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dda:	4b2f      	ldr	r3, [pc, #188]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d21d      	bcs.n	8003e24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 020f 	bic.w	r2, r3, #15
 8003df0:	4929      	ldr	r1, [pc, #164]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003df8:	f7ff f8ac 	bl	8002f54 <HAL_GetTick>
 8003dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e00:	f7ff f8a8 	bl	8002f54 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e03b      	b.n	8003e8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b20      	ldr	r3, [pc, #128]	@ (8003e98 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d1ed      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e30:	4b1a      	ldr	r3, [pc, #104]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4917      	ldr	r1, [pc, #92]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e4e:	4b13      	ldr	r3, [pc, #76]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	490f      	ldr	r1, [pc, #60]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e62:	f000 f825 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8003e66:	4602      	mov	r2, r0
 8003e68:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <HAL_RCC_ClockConfig+0x264>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	490c      	ldr	r1, [pc, #48]	@ (8003ea4 <HAL_RCC_ClockConfig+0x26c>)
 8003e74:	5ccb      	ldrb	r3, [r1, r3]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea8 <HAL_RCC_ClockConfig+0x270>)
 8003e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <HAL_RCC_ClockConfig+0x274>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff f818 	bl	8002ebc <HAL_InitTick>
 8003e8c:	4603      	mov	r3, r0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40022000 	.word	0x40022000
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	04c4b400 	.word	0x04c4b400
 8003ea4:	0800a300 	.word	0x0800a300
 8003ea8:	20000018 	.word	0x20000018
 8003eac:	2000001c 	.word	0x2000001c

08003eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e047      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ec8:	4b27      	ldr	r3, [pc, #156]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d102      	bne.n	8003eda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ed4:	4b26      	ldr	r3, [pc, #152]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e03e      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003eda:	4b23      	ldr	r3, [pc, #140]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d136      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ee6:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3301      	adds	r3, #1
 8003efc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d10c      	bne.n	8003f1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f04:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	4a16      	ldr	r2, [pc, #88]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f0e:	68d2      	ldr	r2, [r2, #12]
 8003f10:	0a12      	lsrs	r2, r2, #8
 8003f12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	617b      	str	r3, [r7, #20]
      break;
 8003f1c:	e00c      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f1e:	4a13      	ldr	r2, [pc, #76]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	4a10      	ldr	r2, [pc, #64]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f28:	68d2      	ldr	r2, [r2, #12]
 8003f2a:	0a12      	lsrs	r2, r2, #8
 8003f2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
      break;
 8003f36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f38:	4b0b      	ldr	r3, [pc, #44]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	0e5b      	lsrs	r3, r3, #25
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	3301      	adds	r3, #1
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	e001      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f58:	693b      	ldr	r3, [r7, #16]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	007a1200 	.word	0x007a1200

08003f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	20000018 	.word	0x20000018

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f90:	f7ff fff0 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4904      	ldr	r1, [pc, #16]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	0800a310 	.word	0x0800a310

08003fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fbc:	f7ff ffda 	bl	8003f74 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0adb      	lsrs	r3, r3, #11
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4904      	ldr	r1, [pc, #16]	@ (8003fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	0800a310 	.word	0x0800a310

08003fe4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fea:	4b1e      	ldr	r3, [pc, #120]	@ (8004064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8004064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d10c      	bne.n	8004022 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004008:	4a17      	ldr	r2, [pc, #92]	@ (8004068 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	4a14      	ldr	r2, [pc, #80]	@ (8004064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004012:	68d2      	ldr	r2, [r2, #12]
 8004014:	0a12      	lsrs	r2, r2, #8
 8004016:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	617b      	str	r3, [r7, #20]
    break;
 8004020:	e00c      	b.n	800403c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004022:	4a12      	ldr	r2, [pc, #72]	@ (800406c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	4a0e      	ldr	r2, [pc, #56]	@ (8004064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800402c:	68d2      	ldr	r2, [r2, #12]
 800402e:	0a12      	lsrs	r2, r2, #8
 8004030:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
    break;
 800403a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800403c:	4b09      	ldr	r3, [pc, #36]	@ (8004064 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	0e5b      	lsrs	r3, r3, #25
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	3301      	adds	r3, #1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004056:	687b      	ldr	r3, [r7, #4]
}
 8004058:	4618      	mov	r0, r3
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40021000 	.word	0x40021000
 8004068:	007a1200 	.word	0x007a1200
 800406c:	00f42400 	.word	0x00f42400

08004070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004078:	2300      	movs	r3, #0
 800407a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800407c:	2300      	movs	r3, #0
 800407e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8098 	beq.w	80041be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004092:	4b43      	ldr	r3, [pc, #268]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10d      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409e:	4b40      	ldr	r3, [pc, #256]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a2:	4a3f      	ldr	r2, [pc, #252]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040aa:	4b3d      	ldr	r3, [pc, #244]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b6:	2301      	movs	r3, #1
 80040b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ba:	4b3a      	ldr	r3, [pc, #232]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a39      	ldr	r2, [pc, #228]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040c6:	f7fe ff45 	bl	8002f54 <HAL_GetTick>
 80040ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040cc:	e009      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fe ff41 	bl	8002f54 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d902      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	74fb      	strb	r3, [r7, #19]
        break;
 80040e0:	e005      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e2:	4b30      	ldr	r3, [pc, #192]	@ (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ef      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d159      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040f4:	4b2a      	ldr	r3, [pc, #168]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01e      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	d019      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004110:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800411a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800411c:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	4a1f      	ldr	r2, [pc, #124]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800412c:	4b1c      	ldr	r3, [pc, #112]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	4a1b      	ldr	r2, [pc, #108]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800413c:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d016      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe ff01 	bl	8002f54 <HAL_GetTick>
 8004152:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004154:	e00b      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fe fefd 	bl	8002f54 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d902      	bls.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	74fb      	strb	r3, [r7, #19]
            break;
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800416e:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ec      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800417c:	7cfb      	ldrb	r3, [r7, #19]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004182:	4b07      	ldr	r3, [pc, #28]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	4903      	ldr	r1, [pc, #12]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004198:	e008      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	74bb      	strb	r3, [r7, #18]
 800419e:	e005      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ac:	7c7b      	ldrb	r3, [r7, #17]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d105      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b2:	4ba6      	ldr	r3, [pc, #664]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	4aa5      	ldr	r2, [pc, #660]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ca:	4ba0      	ldr	r3, [pc, #640]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d0:	f023 0203 	bic.w	r2, r3, #3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	499c      	ldr	r1, [pc, #624]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ec:	4b97      	ldr	r3, [pc, #604]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f2:	f023 020c 	bic.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	4994      	ldr	r1, [pc, #592]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800420e:	4b8f      	ldr	r3, [pc, #572]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004214:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	498b      	ldr	r1, [pc, #556]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004230:	4b86      	ldr	r3, [pc, #536]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	4983      	ldr	r1, [pc, #524]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004252:	4b7e      	ldr	r3, [pc, #504]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004258:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	497a      	ldr	r1, [pc, #488]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004274:	4b75      	ldr	r3, [pc, #468]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	4972      	ldr	r1, [pc, #456]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004296:	4b6d      	ldr	r3, [pc, #436]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4969      	ldr	r1, [pc, #420]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042b8:	4b64      	ldr	r3, [pc, #400]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4961      	ldr	r1, [pc, #388]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042da:	4b5c      	ldr	r3, [pc, #368]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	4958      	ldr	r1, [pc, #352]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042fc:	4b53      	ldr	r3, [pc, #332]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	4950      	ldr	r1, [pc, #320]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b4b      	ldr	r3, [pc, #300]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a4a      	ldr	r2, [pc, #296]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004326:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004334:	4b45      	ldr	r3, [pc, #276]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004342:	4942      	ldr	r1, [pc, #264]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b3d      	ldr	r3, [pc, #244]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a3c      	ldr	r2, [pc, #240]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800435e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800436c:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437a:	4934      	ldr	r1, [pc, #208]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b2f      	ldr	r3, [pc, #188]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a2e      	ldr	r2, [pc, #184]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a4:	4b29      	ldr	r3, [pc, #164]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b2:	4926      	ldr	r1, [pc, #152]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043c2:	d105      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c4:	4b21      	ldr	r3, [pc, #132]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a20      	ldr	r2, [pc, #128]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043dc:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	4918      	ldr	r1, [pc, #96]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fc:	4b13      	ldr	r3, [pc, #76]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a12      	ldr	r2, [pc, #72]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004402:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004406:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004414:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004422:	490a      	ldr	r1, [pc, #40]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004432:	d105      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004434:	4b05      	ldr	r3, [pc, #20]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a04      	ldr	r2, [pc, #16]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004440:	7cbb      	ldrb	r3, [r7, #18]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000

08004450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e09d      	b.n	800459e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d108      	bne.n	800447c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004472:	d009      	beq.n	8004488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
 800447a:	e005      	b.n	8004488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fe f9ea 	bl	800287c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044c8:	d902      	bls.n	80044d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	e002      	b.n	80044d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044de:	d007      	beq.n	80044f0 <HAL_SPI_Init+0xa0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044e8:	d002      	beq.n	80044f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	ea42 0103 	orr.w	r1, r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	f003 0204 	and.w	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800456c:	ea42 0103 	orr.w	r1, r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b088      	sub	sp, #32
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	603b      	str	r3, [r7, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045b6:	f7fe fccd 	bl	8002f54 <HAL_GetTick>
 80045ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
 80045ce:	e15c      	b.n	800488a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_Transmit+0x36>
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e154      	b.n	800488a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_SPI_Transmit+0x48>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e14d      	b.n	800488a <HAL_SPI_Transmit+0x2e4>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2203      	movs	r2, #3
 80045fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004640:	d10f      	bne.n	8004662 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004650:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004660:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b40      	cmp	r3, #64	@ 0x40
 800466e:	d007      	beq.n	8004680 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800467e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004688:	d952      	bls.n	8004730 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_SPI_Transmit+0xf2>
 8004692:	8b7b      	ldrh	r3, [r7, #26]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d145      	bne.n	8004724 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	881a      	ldrh	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046bc:	e032      	b.n	8004724 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d112      	bne.n	80046f2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	881a      	ldrh	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	1c9a      	adds	r2, r3, #2
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046f0:	e018      	b.n	8004724 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f2:	f7fe fc2f 	bl	8002f54 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d803      	bhi.n	800470a <HAL_SPI_Transmit+0x164>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004708:	d102      	bne.n	8004710 <HAL_SPI_Transmit+0x16a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0b2      	b.n	800488a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1c7      	bne.n	80046be <HAL_SPI_Transmit+0x118>
 800472e:	e083      	b.n	8004838 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_SPI_Transmit+0x198>
 8004738:	8b7b      	ldrh	r3, [r7, #26]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d177      	bne.n	800482e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d912      	bls.n	800476e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	881a      	ldrh	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004758:	1c9a      	adds	r2, r3, #2
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b02      	subs	r3, #2
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800476c:	e05f      	b.n	800482e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	7812      	ldrb	r2, [r2, #0]
 800477a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004794:	e04b      	b.n	800482e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d12b      	bne.n	80047fc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d912      	bls.n	80047d4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b2:	881a      	ldrh	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b02      	subs	r3, #2
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047d2:	e02c      	b.n	800482e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	330c      	adds	r3, #12
 80047de:	7812      	ldrb	r2, [r2, #0]
 80047e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80047fa:	e018      	b.n	800482e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047fc:	f7fe fbaa 	bl	8002f54 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d803      	bhi.n	8004814 <HAL_SPI_Transmit+0x26e>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004812:	d102      	bne.n	800481a <HAL_SPI_Transmit+0x274>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e02d      	b.n	800488a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ae      	bne.n	8004796 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	6839      	ldr	r1, [r7, #0]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fcf5 	bl	800522c <SPI_EndRxTxTransaction>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004888:	2300      	movs	r3, #0
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b088      	sub	sp, #32
 8004896:	af02      	add	r7, sp, #8
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	603b      	str	r3, [r7, #0]
 800489e:	4613      	mov	r3, r2
 80048a0:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
 80048b0:	e123      	b.n	8004afa <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_SPI_Receive+0x2c>
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e11b      	b.n	8004afa <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ca:	d112      	bne.n	80048f2 <HAL_SPI_Receive+0x60>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10e      	bne.n	80048f2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2204      	movs	r2, #4
 80048d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f90a 	bl	8004b02 <HAL_SPI_TransmitReceive>
 80048ee:	4603      	mov	r3, r0
 80048f0:	e103      	b.n	8004afa <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048f2:	f7fe fb2f 	bl	8002f54 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Receive+0x74>
 8004902:	2302      	movs	r3, #2
 8004904:	e0f9      	b.n	8004afa <HAL_SPI_Receive+0x268>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2204      	movs	r2, #4
 8004912:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004958:	d908      	bls.n	800496c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e007      	b.n	800497c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800497a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004984:	d10f      	bne.n	80049a6 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004994:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d007      	beq.n	80049c4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049cc:	d875      	bhi.n	8004aba <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049ce:	e037      	b.n	8004a40 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d117      	bne.n	8004a0e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f103 020c 	add.w	r2, r3, #12
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004a0c:	e018      	b.n	8004a40 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a0e:	f7fe faa1 	bl	8002f54 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d803      	bhi.n	8004a26 <HAL_SPI_Receive+0x194>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a24:	d102      	bne.n	8004a2c <HAL_SPI_Receive+0x19a>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e05c      	b.n	8004afa <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1c1      	bne.n	80049d0 <HAL_SPI_Receive+0x13e>
 8004a4c:	e03b      	b.n	8004ac6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d115      	bne.n	8004a88 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	b292      	uxth	r2, r2
 8004a68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	1c9a      	adds	r2, r3, #2
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004a86:	e018      	b.n	8004aba <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a88:	f7fe fa64 	bl	8002f54 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d803      	bhi.n	8004aa0 <HAL_SPI_Receive+0x20e>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a9e:	d102      	bne.n	8004aa6 <HAL_SPI_Receive+0x214>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e01f      	b.n	8004afa <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1c3      	bne.n	8004a4e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fb56 	bl	800517c <SPI_EndRxTransaction>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004af8:	2300      	movs	r3, #0
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b08a      	sub	sp, #40	@ 0x28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b10:	2301      	movs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b14:	f7fe fa1e 	bl	8002f54 <HAL_GetTick>
 8004b18:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b20:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b28:	887b      	ldrh	r3, [r7, #2]
 8004b2a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b30:	7ffb      	ldrb	r3, [r7, #31]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d00c      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x4e>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b3c:	d106      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x4a>
 8004b46:	7ffb      	ldrb	r3, [r7, #31]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d001      	beq.n	8004b50 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e1f3      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x60>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x60>
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1e8      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x72>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e1e1      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x436>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d003      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2205      	movs	r2, #5
 8004b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	887a      	ldrh	r2, [r7, #2]
 8004bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	887a      	ldrh	r2, [r7, #2]
 8004bbc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bd2:	d802      	bhi.n	8004bda <HAL_SPI_TransmitReceive+0xd8>
 8004bd4:	8abb      	ldrh	r3, [r7, #20]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d908      	bls.n	8004bec <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	e007      	b.n	8004bfc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bfa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	d007      	beq.n	8004c1a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c22:	f240 8083 	bls.w	8004d2c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x132>
 8004c2e:	8afb      	ldrh	r3, [r7, #22]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d16f      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c38:	881a      	ldrh	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	1c9a      	adds	r2, r3, #2
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c58:	e05c      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d11b      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x19e>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x19e>
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d113      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d11c      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x1e6>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc4:	b292      	uxth	r2, r2
 8004cc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ce8:	f7fe f934 	bl	8002f54 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d80d      	bhi.n	8004d14 <HAL_SPI_TransmitReceive+0x212>
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cfe:	d009      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e111      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d19d      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x158>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d197      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x158>
 8004d2a:	e0e5      	b.n	8004ef8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x23a>
 8004d34:	8afb      	ldrh	r3, [r7, #22]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	f040 80d1 	bne.w	8004ede <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d912      	bls.n	8004d6c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	881a      	ldrh	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	1c9a      	adds	r2, r3, #2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b02      	subs	r3, #2
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d6a:	e0b8      	b.n	8004ede <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d92:	e0a4      	b.n	8004ede <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d134      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x30a>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02f      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x30a>
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d12c      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d912      	bls.n	8004de2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b02      	subs	r3, #2
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004de0:	e012      	b.n	8004e08 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d148      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x3aa>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d042      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d923      	bls.n	8004e7a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b02      	subs	r3, #2
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d81f      	bhi.n	8004ea8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e76:	605a      	str	r2, [r3, #4]
 8004e78:	e016      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f103 020c 	add.w	r2, r3, #12
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eac:	f7fe f852 	bl	8002f54 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d803      	bhi.n	8004ec4 <HAL_SPI_TransmitReceive+0x3c2>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ec2:	d102      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x3c8>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e02c      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f af55 	bne.w	8004d94 <HAL_SPI_TransmitReceive+0x292>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f47f af4e 	bne.w	8004d94 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f995 	bl	800522c <SPI_EndRxTxTransaction>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00e      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3728      	adds	r7, #40	@ 0x28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f50:	f7fe f800 	bl	8002f54 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f60:	f7fd fff8 	bl	8002f54 <HAL_GetTick>
 8004f64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f66:	4b39      	ldr	r3, [pc, #228]	@ (800504c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	0d1b      	lsrs	r3, r3, #20
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f76:	e054      	b.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f7e:	d050      	beq.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f80:	f7fd ffe8 	bl	8002f54 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d902      	bls.n	8004f96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d13d      	bne.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fae:	d111      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb8:	d004      	beq.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc2:	d107      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fdc:	d10f      	bne.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ffc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e017      	b.n	8005042 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3b01      	subs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	429a      	cmp	r2, r3
 800503e:	d19b      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000018 	.word	0x20000018

08005050 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	@ 0x28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005062:	f7fd ff77 	bl	8002f54 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	4413      	add	r3, r2
 8005070:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005072:	f7fd ff6f 	bl	8002f54 <HAL_GetTick>
 8005076:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005080:	4b3d      	ldr	r3, [pc, #244]	@ (8005178 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	00da      	lsls	r2, r3, #3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	0d1b      	lsrs	r3, r3, #20
 8005090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005092:	fb02 f303 	mul.w	r3, r2, r3
 8005096:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005098:	e060      	b.n	800515c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80050a0:	d107      	bne.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050b8:	d050      	beq.n	800515c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050ba:	f7fd ff4b 	bl	8002f54 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d902      	bls.n	80050d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d13d      	bne.n	800514c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050e8:	d111      	bne.n	800510e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f2:	d004      	beq.n	80050fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fc:	d107      	bne.n	800510e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800510c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005116:	d10f      	bne.n	8005138 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005136:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e010      	b.n	800516e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	3b01      	subs	r3, #1
 800515a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	429a      	cmp	r2, r3
 800516a:	d196      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3728      	adds	r7, #40	@ 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000018 	.word	0x20000018

0800517c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005190:	d111      	bne.n	80051b6 <SPI_EndRxTransaction+0x3a>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800519a:	d004      	beq.n	80051a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051a4:	d107      	bne.n	80051b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff febd 	bl	8004f40 <SPI_WaitFlagStateUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e023      	b.n	8005224 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051e4:	d11d      	bne.n	8005222 <SPI_EndRxTransaction+0xa6>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ee:	d004      	beq.n	80051fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f8:	d113      	bne.n	8005222 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff ff22 	bl	8005050 <SPI_WaitFifoStateUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005216:	f043 0220 	orr.w	r2, r3, #32
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e000      	b.n	8005224 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff ff03 	bl	8005050 <SPI_WaitFifoStateUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005254:	f043 0220 	orr.w	r2, r3, #32
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e027      	b.n	80052b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2200      	movs	r2, #0
 8005268:	2180      	movs	r1, #128	@ 0x80
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff fe68 	bl	8004f40 <SPI_WaitFlagStateUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527a:	f043 0220 	orr.w	r2, r3, #32
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e014      	b.n	80052b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff fedc 	bl	8005050 <SPI_WaitFifoStateUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e000      	b.n	80052b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e049      	b.n	800535e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fd fb2c 	bl	800293c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f000 fcd8 	bl	8005cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e049      	b.n	800540c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f841 	bl	8005414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f000 fc81 	bl	8005cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <HAL_TIM_PWM_Start+0x24>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	bf14      	ite	ne
 8005444:	2301      	movne	r3, #1
 8005446:	2300      	moveq	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e03c      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b04      	cmp	r3, #4
 8005450:	d109      	bne.n	8005466 <HAL_TIM_PWM_Start+0x3e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b01      	cmp	r3, #1
 800545c:	bf14      	ite	ne
 800545e:	2301      	movne	r3, #1
 8005460:	2300      	moveq	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	e02f      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d109      	bne.n	8005480 <HAL_TIM_PWM_Start+0x58>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	bf14      	ite	ne
 8005478:	2301      	movne	r3, #1
 800547a:	2300      	moveq	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	e022      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d109      	bne.n	800549a <HAL_TIM_PWM_Start+0x72>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	e015      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b10      	cmp	r3, #16
 800549e:	d109      	bne.n	80054b4 <HAL_TIM_PWM_Start+0x8c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e008      	b.n	80054c6 <HAL_TIM_PWM_Start+0x9e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e097      	b.n	80055fe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start+0xb6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054dc:	e023      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start+0xc6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ec:	e01b      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start+0xd6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	e013      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Start+0xe6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800550c:	e00b      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start+0xf6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800551c:	e003      	b.n	8005526 <HAL_TIM_PWM_Start+0xfe>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2201      	movs	r2, #1
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 ffea 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a33      	ldr	r2, [pc, #204]	@ (8005608 <HAL_TIM_PWM_Start+0x1e0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a32      	ldr	r2, [pc, #200]	@ (800560c <HAL_TIM_PWM_Start+0x1e4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a30      	ldr	r2, [pc, #192]	@ (8005610 <HAL_TIM_PWM_Start+0x1e8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2f      	ldr	r2, [pc, #188]	@ (8005614 <HAL_TIM_PWM_Start+0x1ec>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIM_PWM_Start+0x13e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2d      	ldr	r2, [pc, #180]	@ (8005618 <HAL_TIM_PWM_Start+0x1f0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d101      	bne.n	800556a <HAL_TIM_PWM_Start+0x142>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <HAL_TIM_PWM_Start+0x144>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800557e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a20      	ldr	r2, [pc, #128]	@ (8005608 <HAL_TIM_PWM_Start+0x1e0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d018      	beq.n	80055bc <HAL_TIM_PWM_Start+0x194>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005592:	d013      	beq.n	80055bc <HAL_TIM_PWM_Start+0x194>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a20      	ldr	r2, [pc, #128]	@ (800561c <HAL_TIM_PWM_Start+0x1f4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_PWM_Start+0x194>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005620 <HAL_TIM_PWM_Start+0x1f8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_PWM_Start+0x194>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a17      	ldr	r2, [pc, #92]	@ (800560c <HAL_TIM_PWM_Start+0x1e4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIM_PWM_Start+0x194>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a16      	ldr	r2, [pc, #88]	@ (8005610 <HAL_TIM_PWM_Start+0x1e8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d115      	bne.n	80055e8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	4b18      	ldr	r3, [pc, #96]	@ (8005624 <HAL_TIM_PWM_Start+0x1fc>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b06      	cmp	r3, #6
 80055cc:	d015      	beq.n	80055fa <HAL_TIM_PWM_Start+0x1d2>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d4:	d011      	beq.n	80055fa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0201 	orr.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e6:	e008      	b.n	80055fa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e000      	b.n	80055fc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40012c00 	.word	0x40012c00
 800560c:	40013400 	.word	0x40013400
 8005610:	40014000 	.word	0x40014000
 8005614:	40014400 	.word	0x40014400
 8005618:	40014800 	.word	0x40014800
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	00010007 	.word	0x00010007

08005628 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e097      	b.n	800576c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fd f9a5 	bl	80029a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800566c:	f023 0307 	bic.w	r3, r3, #7
 8005670:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f000 fb15 	bl	8005cac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	021b      	lsls	r3, r3, #8
 80056ba:	4313      	orrs	r3, r2
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80056c8:	f023 030c 	bic.w	r3, r3, #12
 80056cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	4313      	orrs	r3, r2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	011a      	lsls	r2, r3, #4
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	031b      	lsls	r3, r3, #12
 80056f8:	4313      	orrs	r3, r2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005706:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	4313      	orrs	r3, r2
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005784:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800578c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005794:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800579c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d110      	bne.n	80057c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d102      	bne.n	80057b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057aa:	7b7b      	ldrb	r3, [r7, #13]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d001      	beq.n	80057b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e069      	b.n	8005888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057c4:	e031      	b.n	800582a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d110      	bne.n	80057ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057d2:	7b3b      	ldrb	r3, [r7, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d001      	beq.n	80057dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e055      	b.n	8005888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057ec:	e01d      	b.n	800582a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d108      	bne.n	8005806 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d105      	bne.n	8005806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057fa:	7b7b      	ldrb	r3, [r7, #13]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d102      	bne.n	8005806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005800:	7b3b      	ldrb	r3, [r7, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d001      	beq.n	800580a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e03e      	b.n	8005888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_TIM_Encoder_Start+0xc4>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b04      	cmp	r3, #4
 8005834:	d008      	beq.n	8005848 <HAL_TIM_Encoder_Start+0xd4>
 8005836:	e00f      	b.n	8005858 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2201      	movs	r2, #1
 800583e:	2100      	movs	r1, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fe61 	bl	8006508 <TIM_CCxChannelCmd>
      break;
 8005846:	e016      	b.n	8005876 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2201      	movs	r2, #1
 800584e:	2104      	movs	r1, #4
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fe59 	bl	8006508 <TIM_CCxChannelCmd>
      break;
 8005856:	e00e      	b.n	8005876 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fe51 	bl	8006508 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2201      	movs	r2, #1
 800586c:	2104      	movs	r1, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fe4a 	bl	8006508 <TIM_CCxChannelCmd>
      break;
 8005874:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e0ff      	b.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b14      	cmp	r3, #20
 80058ba:	f200 80f0 	bhi.w	8005a9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058be:	a201      	add	r2, pc, #4	@ (adr r2, 80058c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	08005919 	.word	0x08005919
 80058c8:	08005a9f 	.word	0x08005a9f
 80058cc:	08005a9f 	.word	0x08005a9f
 80058d0:	08005a9f 	.word	0x08005a9f
 80058d4:	08005959 	.word	0x08005959
 80058d8:	08005a9f 	.word	0x08005a9f
 80058dc:	08005a9f 	.word	0x08005a9f
 80058e0:	08005a9f 	.word	0x08005a9f
 80058e4:	0800599b 	.word	0x0800599b
 80058e8:	08005a9f 	.word	0x08005a9f
 80058ec:	08005a9f 	.word	0x08005a9f
 80058f0:	08005a9f 	.word	0x08005a9f
 80058f4:	080059db 	.word	0x080059db
 80058f8:	08005a9f 	.word	0x08005a9f
 80058fc:	08005a9f 	.word	0x08005a9f
 8005900:	08005a9f 	.word	0x08005a9f
 8005904:	08005a1d 	.word	0x08005a1d
 8005908:	08005a9f 	.word	0x08005a9f
 800590c:	08005a9f 	.word	0x08005a9f
 8005910:	08005a9f 	.word	0x08005a9f
 8005914:	08005a5d 	.word	0x08005a5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fa60 	bl	8005de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0208 	orr.w	r2, r2, #8
 8005932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699a      	ldr	r2, [r3, #24]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0204 	bic.w	r2, r2, #4
 8005942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6999      	ldr	r1, [r3, #24]
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	619a      	str	r2, [r3, #24]
      break;
 8005956:	e0a5      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68b9      	ldr	r1, [r7, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fad0 	bl	8005f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6999      	ldr	r1, [r3, #24]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	021a      	lsls	r2, r3, #8
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	619a      	str	r2, [r3, #24]
      break;
 8005998:	e084      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fb39 	bl	8006018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0208 	orr.w	r2, r2, #8
 80059b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0204 	bic.w	r2, r2, #4
 80059c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69d9      	ldr	r1, [r3, #28]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	61da      	str	r2, [r3, #28]
      break;
 80059d8:	e064      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fba1 	bl	8006128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69d9      	ldr	r1, [r3, #28]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	021a      	lsls	r2, r3, #8
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	61da      	str	r2, [r3, #28]
      break;
 8005a1a:	e043      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fc0a 	bl	800623c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0208 	orr.w	r2, r2, #8
 8005a36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0204 	bic.w	r2, r2, #4
 8005a46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a5a:	e023      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fc4e 	bl	8006304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	021a      	lsls	r2, r3, #8
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a9c:	e002      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0de      	b.n	8005c92 <HAL_TIM_ConfigClockSource+0x1da>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005af2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a63      	ldr	r2, [pc, #396]	@ (8005c9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f000 80a9 	beq.w	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b14:	4a61      	ldr	r2, [pc, #388]	@ (8005c9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	f200 80ae 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b1c:	4a60      	ldr	r2, [pc, #384]	@ (8005ca0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	f000 80a1 	beq.w	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b24:	4a5e      	ldr	r2, [pc, #376]	@ (8005ca0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	f200 80a6 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ca4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	f000 8099 	beq.w	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b34:	4a5b      	ldr	r2, [pc, #364]	@ (8005ca4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	f200 809e 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	f000 8091 	beq.w	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b44:	4a58      	ldr	r2, [pc, #352]	@ (8005ca8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	f200 8096 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b50:	f000 8089 	beq.w	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005b58:	f200 808e 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b60:	d03e      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0x128>
 8005b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b66:	f200 8087 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6e:	f000 8086 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x1c6>
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b76:	d87f      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b78:	2b70      	cmp	r3, #112	@ 0x70
 8005b7a:	d01a      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8005b7c:	2b70      	cmp	r3, #112	@ 0x70
 8005b7e:	d87b      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b80:	2b60      	cmp	r3, #96	@ 0x60
 8005b82:	d050      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
 8005b84:	2b60      	cmp	r3, #96	@ 0x60
 8005b86:	d877      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b88:	2b50      	cmp	r3, #80	@ 0x50
 8005b8a:	d03c      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x14e>
 8005b8c:	2b50      	cmp	r3, #80	@ 0x50
 8005b8e:	d873      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	d058      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x18e>
 8005b94:	2b40      	cmp	r3, #64	@ 0x40
 8005b96:	d86f      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b98:	2b30      	cmp	r3, #48	@ 0x30
 8005b9a:	d064      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005b9c:	2b30      	cmp	r3, #48	@ 0x30
 8005b9e:	d86b      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d060      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d867      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d05c      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d05a      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x1ae>
 8005bb0:	e062      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bc2:	f000 fc81 	bl	80064c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	609a      	str	r2, [r3, #8]
      break;
 8005bde:	e04f      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bf0:	f000 fc6a 	bl	80064c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c02:	609a      	str	r2, [r3, #8]
      break;
 8005c04:	e03c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 fbdc 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2150      	movs	r1, #80	@ 0x50
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fc35 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c24:	e02c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c32:	461a      	mov	r2, r3
 8005c34:	f000 fbfb 	bl	800642e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2160      	movs	r1, #96	@ 0x60
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fc25 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c44:	e01c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 fbbc 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2140      	movs	r1, #64	@ 0x40
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fc15 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c64:	e00c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4610      	mov	r0, r2
 8005c72:	f000 fc0c 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005c76:	e003      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e000      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	00100070 	.word	0x00100070
 8005ca0:	00100040 	.word	0x00100040
 8005ca4:	00100030 	.word	0x00100030
 8005ca8:	00100020 	.word	0x00100020

08005cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a42      	ldr	r2, [pc, #264]	@ (8005dc8 <TIM_Base_SetConfig+0x11c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00f      	beq.n	8005ce4 <TIM_Base_SetConfig+0x38>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cca:	d00b      	beq.n	8005ce4 <TIM_Base_SetConfig+0x38>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3f      	ldr	r2, [pc, #252]	@ (8005dcc <TIM_Base_SetConfig+0x120>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d007      	beq.n	8005ce4 <TIM_Base_SetConfig+0x38>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_Base_SetConfig+0x38>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd4 <TIM_Base_SetConfig+0x128>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d108      	bne.n	8005cf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a33      	ldr	r2, [pc, #204]	@ (8005dc8 <TIM_Base_SetConfig+0x11c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01b      	beq.n	8005d36 <TIM_Base_SetConfig+0x8a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d04:	d017      	beq.n	8005d36 <TIM_Base_SetConfig+0x8a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a30      	ldr	r2, [pc, #192]	@ (8005dcc <TIM_Base_SetConfig+0x120>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <TIM_Base_SetConfig+0x8a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	@ (8005dd0 <TIM_Base_SetConfig+0x124>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_Base_SetConfig+0x8a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd4 <TIM_Base_SetConfig+0x128>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_Base_SetConfig+0x8a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <TIM_Base_SetConfig+0x12c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_Base_SetConfig+0x8a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2c      	ldr	r2, [pc, #176]	@ (8005ddc <TIM_Base_SetConfig+0x130>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_Base_SetConfig+0x8a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a2b      	ldr	r2, [pc, #172]	@ (8005de0 <TIM_Base_SetConfig+0x134>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a16      	ldr	r2, [pc, #88]	@ (8005dc8 <TIM_Base_SetConfig+0x11c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0xe8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a17      	ldr	r2, [pc, #92]	@ (8005dd4 <TIM_Base_SetConfig+0x128>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0xe8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a16      	ldr	r2, [pc, #88]	@ (8005dd8 <TIM_Base_SetConfig+0x12c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0xe8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a15      	ldr	r2, [pc, #84]	@ (8005ddc <TIM_Base_SetConfig+0x130>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0xe8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a14      	ldr	r2, [pc, #80]	@ (8005de0 <TIM_Base_SetConfig+0x134>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d103      	bne.n	8005d9c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d105      	bne.n	8005dba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f023 0201 	bic.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	611a      	str	r2, [r3, #16]
  }
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800

08005de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f023 0201 	bic.w	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 0302 	bic.w	r3, r3, #2
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef0 <TIM_OC1_SetConfig+0x10c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00f      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef4 <TIM_OC1_SetConfig+0x110>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef8 <TIM_OC1_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a29      	ldr	r2, [pc, #164]	@ (8005efc <TIM_OC1_SetConfig+0x118>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_OC1_SetConfig+0x80>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a28      	ldr	r2, [pc, #160]	@ (8005f00 <TIM_OC1_SetConfig+0x11c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10c      	bne.n	8005e7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0308 	bic.w	r3, r3, #8
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <TIM_OC1_SetConfig+0x10c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <TIM_OC1_SetConfig+0x110>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <TIM_OC1_SetConfig+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <TIM_OC1_SetConfig+0x118>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_OC1_SetConfig+0xc2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a17      	ldr	r2, [pc, #92]	@ (8005f00 <TIM_OC1_SetConfig+0x11c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d111      	bne.n	8005eca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40014400 	.word	0x40014400
 8005f00:	40014800 	.word	0x40014800

08005f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f023 0210 	bic.w	r2, r3, #16
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0320 	bic.w	r3, r3, #32
 8005f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a28      	ldr	r2, [pc, #160]	@ (8006004 <TIM_OC2_SetConfig+0x100>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC2_SetConfig+0x6c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a27      	ldr	r2, [pc, #156]	@ (8006008 <TIM_OC2_SetConfig+0x104>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10d      	bne.n	8005f8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006004 <TIM_OC2_SetConfig+0x100>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <TIM_OC2_SetConfig+0x104>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800600c <TIM_OC2_SetConfig+0x108>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8006010 <TIM_OC2_SetConfig+0x10c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC2_SetConfig+0xb0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a19      	ldr	r2, [pc, #100]	@ (8006014 <TIM_OC2_SetConfig+0x110>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d113      	bne.n	8005fdc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40012c00 	.word	0x40012c00
 8006008:	40013400 	.word	0x40013400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a27      	ldr	r2, [pc, #156]	@ (8006114 <TIM_OC3_SetConfig+0xfc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_OC3_SetConfig+0x6a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a26      	ldr	r2, [pc, #152]	@ (8006118 <TIM_OC3_SetConfig+0x100>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10d      	bne.n	800609e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800609c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006114 <TIM_OC3_SetConfig+0xfc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00f      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006118 <TIM_OC3_SetConfig+0x100>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	@ (800611c <TIM_OC3_SetConfig+0x104>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a19      	ldr	r2, [pc, #100]	@ (8006120 <TIM_OC3_SetConfig+0x108>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC3_SetConfig+0xae>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a18      	ldr	r2, [pc, #96]	@ (8006124 <TIM_OC3_SetConfig+0x10c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d113      	bne.n	80060ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	621a      	str	r2, [r3, #32]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40013400 	.word	0x40013400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800

08006128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	031b      	lsls	r3, r3, #12
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a28      	ldr	r2, [pc, #160]	@ (8006228 <TIM_OC4_SetConfig+0x100>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_OC4_SetConfig+0x6c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a27      	ldr	r2, [pc, #156]	@ (800622c <TIM_OC4_SetConfig+0x104>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10d      	bne.n	80061b0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800619a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	031b      	lsls	r3, r3, #12
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006228 <TIM_OC4_SetConfig+0x100>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00f      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	@ (800622c <TIM_OC4_SetConfig+0x104>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00b      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006230 <TIM_OC4_SetConfig+0x108>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006234 <TIM_OC4_SetConfig+0x10c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0xb0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a19      	ldr	r2, [pc, #100]	@ (8006238 <TIM_OC4_SetConfig+0x110>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d113      	bne.n	8006200 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	019b      	lsls	r3, r3, #6
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40012c00 	.word	0x40012c00
 800622c:	40013400 	.word	0x40013400
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800

0800623c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800626a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <TIM_OC5_SetConfig+0xb4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00f      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <TIM_OC5_SetConfig+0xb8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00b      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	@ (80062f8 <TIM_OC5_SetConfig+0xbc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d007      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a14      	ldr	r2, [pc, #80]	@ (80062fc <TIM_OC5_SetConfig+0xc0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d003      	beq.n	80062b6 <TIM_OC5_SetConfig+0x7a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a13      	ldr	r2, [pc, #76]	@ (8006300 <TIM_OC5_SetConfig+0xc4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d109      	bne.n	80062ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800

08006304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800634a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	051b      	lsls	r3, r3, #20
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a18      	ldr	r2, [pc, #96]	@ (80063bc <TIM_OC6_SetConfig+0xb8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00f      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a17      	ldr	r2, [pc, #92]	@ (80063c0 <TIM_OC6_SetConfig+0xbc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a16      	ldr	r2, [pc, #88]	@ (80063c4 <TIM_OC6_SetConfig+0xc0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a15      	ldr	r2, [pc, #84]	@ (80063c8 <TIM_OC6_SetConfig+0xc4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC6_SetConfig+0x7c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <TIM_OC6_SetConfig+0xc8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d109      	bne.n	8006394 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	029b      	lsls	r3, r3, #10
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800

080063d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 030a 	bic.w	r3, r3, #10
 800640c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f023 0210 	bic.w	r2, r3, #16
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	031b      	lsls	r3, r3, #12
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800646a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80064a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f043 0307 	orr.w	r3, r3, #7
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2201      	movs	r2, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	43db      	mvns	r3, r3
 800652a:	401a      	ands	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006568:	2302      	movs	r3, #2
 800656a:	e065      	b.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2c      	ldr	r2, [pc, #176]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d004      	beq.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a2b      	ldr	r2, [pc, #172]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d108      	bne.n	80065b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d018      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e2:	d013      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a18      	ldr	r2, [pc, #96]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00e      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d009      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a12      	ldr	r2, [pc, #72]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a13      	ldr	r2, [pc, #76]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10c      	bne.n	8006626 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006612:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4313      	orrs	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40013400 	.word	0x40013400
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40014000 	.word	0x40014000

08006658 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006670:	2302      	movs	r3, #2
 8006672:	e073      	b.n	800675c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	041b      	lsls	r3, r3, #16
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a19      	ldr	r2, [pc, #100]	@ (8006768 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a18      	ldr	r2, [pc, #96]	@ (800676c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d11c      	bne.n	800674a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671a:	051b      	lsls	r3, r3, #20
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40012c00 	.word	0x40012c00
 800676c:	40013400 	.word	0x40013400

08006770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e042      	b.n	8006808 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fc f9d1 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	@ 0x24
 800679e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fb82 	bl	8006ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f8b3 	bl	800692c <UART_SetConfig>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e01b      	b.n	8006808 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fc01 	bl	8007008 <UART_CheckIdleState>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	@ 0x28
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006826:	2b20      	cmp	r3, #32
 8006828:	d17b      	bne.n	8006922 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_UART_Transmit+0x26>
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e074      	b.n	8006924 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2221      	movs	r2, #33	@ 0x21
 8006846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800684a:	f7fc fb83 	bl	8002f54 <HAL_GetTick>
 800684e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	88fa      	ldrh	r2, [r7, #6]
 8006854:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006868:	d108      	bne.n	800687c <HAL_UART_Transmit+0x6c>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	e003      	b.n	8006884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006880:	2300      	movs	r3, #0
 8006882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006884:	e030      	b.n	80068e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2200      	movs	r2, #0
 800688e:	2180      	movs	r1, #128	@ 0x80
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fc63 	bl	800715c <UART_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e03d      	b.n	8006924 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10b      	bne.n	80068c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	3302      	adds	r3, #2
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e007      	b.n	80068d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	781a      	ldrb	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1c8      	bne.n	8006886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2140      	movs	r1, #64	@ 0x40
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fc2c 	bl	800715c <UART_WaitOnFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e006      	b.n	8006924 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	e000      	b.n	8006924 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006922:	2302      	movs	r3, #2
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800692c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006930:	b08c      	sub	sp, #48	@ 0x30
 8006932:	af00      	add	r7, sp, #0
 8006934:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	431a      	orrs	r2, r3
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	431a      	orrs	r2, r3
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	4313      	orrs	r3, r2
 8006952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4bab      	ldr	r3, [pc, #684]	@ (8006c08 <UART_SetConfig+0x2dc>)
 800695c:	4013      	ands	r3, r2
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006964:	430b      	orrs	r3, r1
 8006966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4aa0      	ldr	r2, [pc, #640]	@ (8006c0c <UART_SetConfig+0x2e0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006994:	4313      	orrs	r3, r2
 8006996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b6:	f023 010f 	bic.w	r1, r3, #15
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a91      	ldr	r2, [pc, #580]	@ (8006c10 <UART_SetConfig+0x2e4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d125      	bne.n	8006a1c <UART_SetConfig+0xf0>
 80069d0:	4b90      	ldr	r3, [pc, #576]	@ (8006c14 <UART_SetConfig+0x2e8>)
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d81a      	bhi.n	8006a14 <UART_SetConfig+0xe8>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <UART_SetConfig+0xb8>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a0d 	.word	0x08006a0d
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	e0d6      	b.n	8006baa <UART_SetConfig+0x27e>
 80069fc:	2302      	movs	r3, #2
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	e0d2      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a04:	2304      	movs	r3, #4
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0a:	e0ce      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a12:	e0ca      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a14:	2310      	movs	r3, #16
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1a:	e0c6      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a7d      	ldr	r2, [pc, #500]	@ (8006c18 <UART_SetConfig+0x2ec>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d138      	bne.n	8006a98 <UART_SetConfig+0x16c>
 8006a26:	4b7b      	ldr	r3, [pc, #492]	@ (8006c14 <UART_SetConfig+0x2e8>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2c:	f003 030c 	and.w	r3, r3, #12
 8006a30:	2b0c      	cmp	r3, #12
 8006a32:	d82d      	bhi.n	8006a90 <UART_SetConfig+0x164>
 8006a34:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <UART_SetConfig+0x110>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a71 	.word	0x08006a71
 8006a40:	08006a91 	.word	0x08006a91
 8006a44:	08006a91 	.word	0x08006a91
 8006a48:	08006a91 	.word	0x08006a91
 8006a4c:	08006a81 	.word	0x08006a81
 8006a50:	08006a91 	.word	0x08006a91
 8006a54:	08006a91 	.word	0x08006a91
 8006a58:	08006a91 	.word	0x08006a91
 8006a5c:	08006a79 	.word	0x08006a79
 8006a60:	08006a91 	.word	0x08006a91
 8006a64:	08006a91 	.word	0x08006a91
 8006a68:	08006a91 	.word	0x08006a91
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	2300      	movs	r3, #0
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a76:	e098      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7e:	e094      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a86:	e090      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e08c      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e088      	b.n	8006baa <UART_SetConfig+0x27e>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8006c1c <UART_SetConfig+0x2f0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d125      	bne.n	8006aee <UART_SetConfig+0x1c2>
 8006aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8006c14 <UART_SetConfig+0x2e8>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006aac:	2b30      	cmp	r3, #48	@ 0x30
 8006aae:	d016      	beq.n	8006ade <UART_SetConfig+0x1b2>
 8006ab0:	2b30      	cmp	r3, #48	@ 0x30
 8006ab2:	d818      	bhi.n	8006ae6 <UART_SetConfig+0x1ba>
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	d00a      	beq.n	8006ace <UART_SetConfig+0x1a2>
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d814      	bhi.n	8006ae6 <UART_SetConfig+0x1ba>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <UART_SetConfig+0x19a>
 8006ac0:	2b10      	cmp	r3, #16
 8006ac2:	d008      	beq.n	8006ad6 <UART_SetConfig+0x1aa>
 8006ac4:	e00f      	b.n	8006ae6 <UART_SetConfig+0x1ba>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006acc:	e06d      	b.n	8006baa <UART_SetConfig+0x27e>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad4:	e069      	b.n	8006baa <UART_SetConfig+0x27e>
 8006ad6:	2304      	movs	r3, #4
 8006ad8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006adc:	e065      	b.n	8006baa <UART_SetConfig+0x27e>
 8006ade:	2308      	movs	r3, #8
 8006ae0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae4:	e061      	b.n	8006baa <UART_SetConfig+0x27e>
 8006ae6:	2310      	movs	r3, #16
 8006ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aec:	e05d      	b.n	8006baa <UART_SetConfig+0x27e>
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a4b      	ldr	r2, [pc, #300]	@ (8006c20 <UART_SetConfig+0x2f4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d125      	bne.n	8006b44 <UART_SetConfig+0x218>
 8006af8:	4b46      	ldr	r3, [pc, #280]	@ (8006c14 <UART_SetConfig+0x2e8>)
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b04:	d016      	beq.n	8006b34 <UART_SetConfig+0x208>
 8006b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b08:	d818      	bhi.n	8006b3c <UART_SetConfig+0x210>
 8006b0a:	2b80      	cmp	r3, #128	@ 0x80
 8006b0c:	d00a      	beq.n	8006b24 <UART_SetConfig+0x1f8>
 8006b0e:	2b80      	cmp	r3, #128	@ 0x80
 8006b10:	d814      	bhi.n	8006b3c <UART_SetConfig+0x210>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <UART_SetConfig+0x1f0>
 8006b16:	2b40      	cmp	r3, #64	@ 0x40
 8006b18:	d008      	beq.n	8006b2c <UART_SetConfig+0x200>
 8006b1a:	e00f      	b.n	8006b3c <UART_SetConfig+0x210>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b22:	e042      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	e03e      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	e03a      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3a:	e036      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b42:	e032      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a30      	ldr	r2, [pc, #192]	@ (8006c0c <UART_SetConfig+0x2e0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d12a      	bne.n	8006ba4 <UART_SetConfig+0x278>
 8006b4e:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <UART_SetConfig+0x2e8>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b5c:	d01a      	beq.n	8006b94 <UART_SetConfig+0x268>
 8006b5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b62:	d81b      	bhi.n	8006b9c <UART_SetConfig+0x270>
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b68:	d00c      	beq.n	8006b84 <UART_SetConfig+0x258>
 8006b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b6e:	d815      	bhi.n	8006b9c <UART_SetConfig+0x270>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <UART_SetConfig+0x250>
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b78:	d008      	beq.n	8006b8c <UART_SetConfig+0x260>
 8006b7a:	e00f      	b.n	8006b9c <UART_SetConfig+0x270>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b82:	e012      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b84:	2302      	movs	r3, #2
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8a:	e00e      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b92:	e00a      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b94:	2308      	movs	r3, #8
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9a:	e006      	b.n	8006baa <UART_SetConfig+0x27e>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba2:	e002      	b.n	8006baa <UART_SetConfig+0x27e>
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a17      	ldr	r2, [pc, #92]	@ (8006c0c <UART_SetConfig+0x2e0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	f040 80a8 	bne.w	8006d06 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d834      	bhi.n	8006c28 <UART_SetConfig+0x2fc>
 8006bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <UART_SetConfig+0x298>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006c29 	.word	0x08006c29
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006c29 	.word	0x08006c29
 8006bd4:	08006bf7 	.word	0x08006bf7
 8006bd8:	08006c29 	.word	0x08006c29
 8006bdc:	08006c29 	.word	0x08006c29
 8006be0:	08006c29 	.word	0x08006c29
 8006be4:	08006bff 	.word	0x08006bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be8:	f7fd f9d0 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8006bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bee:	e021      	b.n	8006c34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <UART_SetConfig+0x2f8>)
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bf4:	e01e      	b.n	8006c34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf6:	f7fd f95b 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8006bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bfc:	e01a      	b.n	8006c34 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c04:	e016      	b.n	8006c34 <UART_SetConfig+0x308>
 8006c06:	bf00      	nop
 8006c08:	cfff69f3 	.word	0xcfff69f3
 8006c0c:	40008000 	.word	0x40008000
 8006c10:	40013800 	.word	0x40013800
 8006c14:	40021000 	.word	0x40021000
 8006c18:	40004400 	.word	0x40004400
 8006c1c:	40004800 	.word	0x40004800
 8006c20:	40004c00 	.word	0x40004c00
 8006c24:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 812a 	beq.w	8006e90 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c40:	4a9e      	ldr	r2, [pc, #632]	@ (8006ebc <UART_SetConfig+0x590>)
 8006c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c46:	461a      	mov	r2, r3
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	4413      	add	r3, r2
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d305      	bcc.n	8006c6c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d903      	bls.n	8006c74 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c72:	e10d      	b.n	8006e90 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	2200      	movs	r2, #0
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	60fa      	str	r2, [r7, #12]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c80:	4a8e      	ldr	r2, [pc, #568]	@ (8006ebc <UART_SetConfig+0x590>)
 8006c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2200      	movs	r2, #0
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c96:	f7f9 ffff 	bl	8000c98 <__aeabi_uldivmod>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	020b      	lsls	r3, r1, #8
 8006cac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cb0:	0202      	lsls	r2, r0, #8
 8006cb2:	6979      	ldr	r1, [r7, #20]
 8006cb4:	6849      	ldr	r1, [r1, #4]
 8006cb6:	0849      	lsrs	r1, r1, #1
 8006cb8:	2000      	movs	r0, #0
 8006cba:	460c      	mov	r4, r1
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	eb12 0804 	adds.w	r8, r2, r4
 8006cc2:	eb43 0905 	adc.w	r9, r3, r5
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	469a      	mov	sl, r3
 8006cce:	4693      	mov	fp, r2
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	465b      	mov	r3, fp
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7f9 ffde 	bl	8000c98 <__aeabi_uldivmod>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cea:	d308      	bcc.n	8006cfe <UART_SetConfig+0x3d2>
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cf2:	d204      	bcs.n	8006cfe <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a3a      	ldr	r2, [r7, #32]
 8006cfa:	60da      	str	r2, [r3, #12]
 8006cfc:	e0c8      	b.n	8006e90 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d04:	e0c4      	b.n	8006e90 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d0e:	d167      	bne.n	8006de0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006d10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d828      	bhi.n	8006d6a <UART_SetConfig+0x43e>
 8006d18:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <UART_SetConfig+0x3f4>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d4d 	.word	0x08006d4d
 8006d28:	08006d55 	.word	0x08006d55
 8006d2c:	08006d6b 	.word	0x08006d6b
 8006d30:	08006d5b 	.word	0x08006d5b
 8006d34:	08006d6b 	.word	0x08006d6b
 8006d38:	08006d6b 	.word	0x08006d6b
 8006d3c:	08006d6b 	.word	0x08006d6b
 8006d40:	08006d63 	.word	0x08006d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d44:	f7fd f922 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8006d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d4a:	e014      	b.n	8006d76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d4c:	f7fd f934 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8006d50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d52:	e010      	b.n	8006d76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d54:	4b5a      	ldr	r3, [pc, #360]	@ (8006ec0 <UART_SetConfig+0x594>)
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d58:	e00d      	b.n	8006d76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5a:	f7fd f8a9 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8006d5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d60:	e009      	b.n	8006d76 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d68:	e005      	b.n	8006d76 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8089 	beq.w	8006e90 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	4a4e      	ldr	r2, [pc, #312]	@ (8006ebc <UART_SetConfig+0x590>)
 8006d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d90:	005a      	lsls	r2, r3, #1
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	441a      	add	r2, r3
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d916      	bls.n	8006dd8 <UART_SetConfig+0x4ac>
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db0:	d212      	bcs.n	8006dd8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f023 030f 	bic.w	r3, r3, #15
 8006dba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f003 0307 	and.w	r3, r3, #7
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	8bfb      	ldrh	r3, [r7, #30]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	8bfa      	ldrh	r2, [r7, #30]
 8006dd4:	60da      	str	r2, [r3, #12]
 8006dd6:	e05b      	b.n	8006e90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006dde:	e057      	b.n	8006e90 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006de0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d828      	bhi.n	8006e3a <UART_SetConfig+0x50e>
 8006de8:	a201      	add	r2, pc, #4	@ (adr r2, 8006df0 <UART_SetConfig+0x4c4>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e15 	.word	0x08006e15
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e25 	.word	0x08006e25
 8006dfc:	08006e3b 	.word	0x08006e3b
 8006e00:	08006e2b 	.word	0x08006e2b
 8006e04:	08006e3b 	.word	0x08006e3b
 8006e08:	08006e3b 	.word	0x08006e3b
 8006e0c:	08006e3b 	.word	0x08006e3b
 8006e10:	08006e33 	.word	0x08006e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e14:	f7fd f8ba 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 8006e18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e1a:	e014      	b.n	8006e46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e1c:	f7fd f8cc 	bl	8003fb8 <HAL_RCC_GetPCLK2Freq>
 8006e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e22:	e010      	b.n	8006e46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e24:	4b26      	ldr	r3, [pc, #152]	@ (8006ec0 <UART_SetConfig+0x594>)
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e28:	e00d      	b.n	8006e46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fd f841 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8006e2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e30:	e009      	b.n	8006e46 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e38:	e005      	b.n	8006e46 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e44:	bf00      	nop
    }

    if (pclk != 0U)
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d021      	beq.n	8006e90 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	4a1a      	ldr	r2, [pc, #104]	@ (8006ebc <UART_SetConfig+0x590>)
 8006e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	441a      	add	r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	2b0f      	cmp	r3, #15
 8006e74:	d909      	bls.n	8006e8a <UART_SetConfig+0x55e>
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e7c:	d205      	bcs.n	8006e8a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60da      	str	r2, [r3, #12]
 8006e88:	e002      	b.n	8006e90 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006eac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3730      	adds	r7, #48	@ 0x30
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eba:	bf00      	nop
 8006ebc:	0800a318 	.word	0x0800a318
 8006ec0:	00f42400 	.word	0x00f42400

08006ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f58:	f003 0310 	and.w	r3, r3, #16
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc2:	d10a      	bne.n	8006fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b098      	sub	sp, #96	@ 0x60
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007018:	f7fb ff9c 	bl	8002f54 <HAL_GetTick>
 800701c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d12f      	bne.n	800708c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800702c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f88e 	bl	800715c <UART_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d022      	beq.n	800708c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800705a:	653b      	str	r3, [r7, #80]	@ 0x50
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007064:	647b      	str	r3, [r7, #68]	@ 0x44
 8007066:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800706a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e6      	bne.n	8007046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e063      	b.n	8007154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b04      	cmp	r3, #4
 8007098:	d149      	bne.n	800712e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800709a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a2:	2200      	movs	r2, #0
 80070a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f857 	bl	800715c <UART_WaitOnFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d03c      	beq.n	800712e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	623b      	str	r3, [r7, #32]
   return(result);
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e6      	bne.n	80070b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007106:	61fa      	str	r2, [r7, #28]
 8007108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	69b9      	ldr	r1, [r7, #24]
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	617b      	str	r3, [r7, #20]
   return(result);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e012      	b.n	8007154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3758      	adds	r7, #88	@ 0x58
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800716c:	e04f      	b.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007174:	d04b      	beq.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007176:	f7fb feed 	bl	8002f54 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	429a      	cmp	r2, r3
 8007184:	d302      	bcc.n	800718c <UART_WaitOnFlagUntilTimeout+0x30>
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e04e      	b.n	800722e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b00      	cmp	r3, #0
 800719c:	d037      	beq.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b80      	cmp	r3, #128	@ 0x80
 80071a2:	d034      	beq.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b40      	cmp	r3, #64	@ 0x40
 80071a8:	d031      	beq.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d110      	bne.n	80071da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2208      	movs	r2, #8
 80071be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f838 	bl	8007236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2208      	movs	r2, #8
 80071ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e029      	b.n	800722e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071e8:	d111      	bne.n	800720e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f81e 	bl	8007236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e00f      	b.n	800722e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4013      	ands	r3, r2
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	429a      	cmp	r2, r3
 800721c:	bf0c      	ite	eq
 800721e:	2301      	moveq	r3, #1
 8007220:	2300      	movne	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	429a      	cmp	r2, r3
 800722a:	d0a0      	beq.n	800716e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007236:	b480      	push	{r7}
 8007238:	b095      	sub	sp, #84	@ 0x54
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	461a      	mov	r2, r3
 800725a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800725c:	643b      	str	r3, [r7, #64]	@ 0x40
 800725e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007262:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800726a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e6      	bne.n	800723e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007294:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800729a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e3      	bne.n	8007270 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d118      	bne.n	80072e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f023 0310 	bic.w	r3, r3, #16
 80072c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	613b      	str	r3, [r7, #16]
   return(result);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072f6:	bf00      	nop
 80072f8:	3754      	adds	r7, #84	@ 0x54
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_UARTEx_DisableFifoMode+0x16>
 8007314:	2302      	movs	r3, #2
 8007316:	e027      	b.n	8007368 <HAL_UARTEx_DisableFifoMode+0x66>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2224      	movs	r2, #36	@ 0x24
 8007324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007346:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007388:	2302      	movs	r3, #2
 800738a:	e02d      	b.n	80073e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2224      	movs	r2, #36	@ 0x24
 8007398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f84f 	bl	800746c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007404:	2302      	movs	r3, #2
 8007406:	e02d      	b.n	8007464 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2224      	movs	r2, #36	@ 0x24
 8007414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0201 	bic.w	r2, r2, #1
 800742e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f811 	bl	800746c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007478:	2b00      	cmp	r3, #0
 800747a:	d108      	bne.n	800748e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800748c:	e031      	b.n	80074f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800748e:	2308      	movs	r3, #8
 8007490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007492:	2308      	movs	r3, #8
 8007494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	0e5b      	lsrs	r3, r3, #25
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f003 0307 	and.w	r3, r3, #7
 80074a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	0f5b      	lsrs	r3, r3, #29
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	7b3a      	ldrb	r2, [r7, #12]
 80074ba:	4911      	ldr	r1, [pc, #68]	@ (8007500 <UARTEx_SetNbDataToProcess+0x94>)
 80074bc:	5c8a      	ldrb	r2, [r1, r2]
 80074be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074c2:	7b3a      	ldrb	r2, [r7, #12]
 80074c4:	490f      	ldr	r1, [pc, #60]	@ (8007504 <UARTEx_SetNbDataToProcess+0x98>)
 80074c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	7b7a      	ldrb	r2, [r7, #13]
 80074d8:	4909      	ldr	r1, [pc, #36]	@ (8007500 <UARTEx_SetNbDataToProcess+0x94>)
 80074da:	5c8a      	ldrb	r2, [r1, r2]
 80074dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074e0:	7b7a      	ldrb	r2, [r7, #13]
 80074e2:	4908      	ldr	r1, [pc, #32]	@ (8007504 <UARTEx_SetNbDataToProcess+0x98>)
 80074e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074f2:	bf00      	nop
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	0800a330 	.word	0x0800a330
 8007504:	0800a338 	.word	0x0800a338

08007508 <__cvt>:
 8007508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800750c:	ec57 6b10 	vmov	r6, r7, d0
 8007510:	2f00      	cmp	r7, #0
 8007512:	460c      	mov	r4, r1
 8007514:	4619      	mov	r1, r3
 8007516:	463b      	mov	r3, r7
 8007518:	bfbb      	ittet	lt
 800751a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800751e:	461f      	movlt	r7, r3
 8007520:	2300      	movge	r3, #0
 8007522:	232d      	movlt	r3, #45	@ 0x2d
 8007524:	700b      	strb	r3, [r1, #0]
 8007526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007528:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800752c:	4691      	mov	r9, r2
 800752e:	f023 0820 	bic.w	r8, r3, #32
 8007532:	bfbc      	itt	lt
 8007534:	4632      	movlt	r2, r6
 8007536:	4616      	movlt	r6, r2
 8007538:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800753c:	d005      	beq.n	800754a <__cvt+0x42>
 800753e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007542:	d100      	bne.n	8007546 <__cvt+0x3e>
 8007544:	3401      	adds	r4, #1
 8007546:	2102      	movs	r1, #2
 8007548:	e000      	b.n	800754c <__cvt+0x44>
 800754a:	2103      	movs	r1, #3
 800754c:	ab03      	add	r3, sp, #12
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	ab02      	add	r3, sp, #8
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	ec47 6b10 	vmov	d0, r6, r7
 8007558:	4653      	mov	r3, sl
 800755a:	4622      	mov	r2, r4
 800755c:	f000 fe70 	bl	8008240 <_dtoa_r>
 8007560:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007564:	4605      	mov	r5, r0
 8007566:	d119      	bne.n	800759c <__cvt+0x94>
 8007568:	f019 0f01 	tst.w	r9, #1
 800756c:	d00e      	beq.n	800758c <__cvt+0x84>
 800756e:	eb00 0904 	add.w	r9, r0, r4
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	f7f9 facd 	bl	8000b18 <__aeabi_dcmpeq>
 800757e:	b108      	cbz	r0, 8007584 <__cvt+0x7c>
 8007580:	f8cd 900c 	str.w	r9, [sp, #12]
 8007584:	2230      	movs	r2, #48	@ 0x30
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	454b      	cmp	r3, r9
 800758a:	d31e      	bcc.n	80075ca <__cvt+0xc2>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007590:	1b5b      	subs	r3, r3, r5
 8007592:	4628      	mov	r0, r5
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	b004      	add	sp, #16
 8007598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075a0:	eb00 0904 	add.w	r9, r0, r4
 80075a4:	d1e5      	bne.n	8007572 <__cvt+0x6a>
 80075a6:	7803      	ldrb	r3, [r0, #0]
 80075a8:	2b30      	cmp	r3, #48	@ 0x30
 80075aa:	d10a      	bne.n	80075c2 <__cvt+0xba>
 80075ac:	2200      	movs	r2, #0
 80075ae:	2300      	movs	r3, #0
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f7f9 fab0 	bl	8000b18 <__aeabi_dcmpeq>
 80075b8:	b918      	cbnz	r0, 80075c2 <__cvt+0xba>
 80075ba:	f1c4 0401 	rsb	r4, r4, #1
 80075be:	f8ca 4000 	str.w	r4, [sl]
 80075c2:	f8da 3000 	ldr.w	r3, [sl]
 80075c6:	4499      	add	r9, r3
 80075c8:	e7d3      	b.n	8007572 <__cvt+0x6a>
 80075ca:	1c59      	adds	r1, r3, #1
 80075cc:	9103      	str	r1, [sp, #12]
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	e7d9      	b.n	8007586 <__cvt+0x7e>

080075d2 <__exponent>:
 80075d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075d4:	2900      	cmp	r1, #0
 80075d6:	bfba      	itte	lt
 80075d8:	4249      	neglt	r1, r1
 80075da:	232d      	movlt	r3, #45	@ 0x2d
 80075dc:	232b      	movge	r3, #43	@ 0x2b
 80075de:	2909      	cmp	r1, #9
 80075e0:	7002      	strb	r2, [r0, #0]
 80075e2:	7043      	strb	r3, [r0, #1]
 80075e4:	dd29      	ble.n	800763a <__exponent+0x68>
 80075e6:	f10d 0307 	add.w	r3, sp, #7
 80075ea:	461d      	mov	r5, r3
 80075ec:	270a      	movs	r7, #10
 80075ee:	461a      	mov	r2, r3
 80075f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80075f4:	fb07 1416 	mls	r4, r7, r6, r1
 80075f8:	3430      	adds	r4, #48	@ 0x30
 80075fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075fe:	460c      	mov	r4, r1
 8007600:	2c63      	cmp	r4, #99	@ 0x63
 8007602:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007606:	4631      	mov	r1, r6
 8007608:	dcf1      	bgt.n	80075ee <__exponent+0x1c>
 800760a:	3130      	adds	r1, #48	@ 0x30
 800760c:	1e94      	subs	r4, r2, #2
 800760e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007612:	1c41      	adds	r1, r0, #1
 8007614:	4623      	mov	r3, r4
 8007616:	42ab      	cmp	r3, r5
 8007618:	d30a      	bcc.n	8007630 <__exponent+0x5e>
 800761a:	f10d 0309 	add.w	r3, sp, #9
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	42ac      	cmp	r4, r5
 8007622:	bf88      	it	hi
 8007624:	2300      	movhi	r3, #0
 8007626:	3302      	adds	r3, #2
 8007628:	4403      	add	r3, r0
 800762a:	1a18      	subs	r0, r3, r0
 800762c:	b003      	add	sp, #12
 800762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007630:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007634:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007638:	e7ed      	b.n	8007616 <__exponent+0x44>
 800763a:	2330      	movs	r3, #48	@ 0x30
 800763c:	3130      	adds	r1, #48	@ 0x30
 800763e:	7083      	strb	r3, [r0, #2]
 8007640:	70c1      	strb	r1, [r0, #3]
 8007642:	1d03      	adds	r3, r0, #4
 8007644:	e7f1      	b.n	800762a <__exponent+0x58>
	...

08007648 <_printf_float>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	b08d      	sub	sp, #52	@ 0x34
 800764e:	460c      	mov	r4, r1
 8007650:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007654:	4616      	mov	r6, r2
 8007656:	461f      	mov	r7, r3
 8007658:	4605      	mov	r5, r0
 800765a:	f000 fcef 	bl	800803c <_localeconv_r>
 800765e:	6803      	ldr	r3, [r0, #0]
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	4618      	mov	r0, r3
 8007664:	f7f8 fe2c 	bl	80002c0 <strlen>
 8007668:	2300      	movs	r3, #0
 800766a:	930a      	str	r3, [sp, #40]	@ 0x28
 800766c:	f8d8 3000 	ldr.w	r3, [r8]
 8007670:	9005      	str	r0, [sp, #20]
 8007672:	3307      	adds	r3, #7
 8007674:	f023 0307 	bic.w	r3, r3, #7
 8007678:	f103 0208 	add.w	r2, r3, #8
 800767c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007680:	f8d4 b000 	ldr.w	fp, [r4]
 8007684:	f8c8 2000 	str.w	r2, [r8]
 8007688:	e9d3 8900 	ldrd	r8, r9, [r3]
 800768c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	f8cd 8018 	str.w	r8, [sp, #24]
 8007696:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800769a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769e:	4b9c      	ldr	r3, [pc, #624]	@ (8007910 <_printf_float+0x2c8>)
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076a4:	f7f9 fa6a 	bl	8000b7c <__aeabi_dcmpun>
 80076a8:	bb70      	cbnz	r0, 8007708 <_printf_float+0xc0>
 80076aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ae:	4b98      	ldr	r3, [pc, #608]	@ (8007910 <_printf_float+0x2c8>)
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076b4:	f7f9 fa44 	bl	8000b40 <__aeabi_dcmple>
 80076b8:	bb30      	cbnz	r0, 8007708 <_printf_float+0xc0>
 80076ba:	2200      	movs	r2, #0
 80076bc:	2300      	movs	r3, #0
 80076be:	4640      	mov	r0, r8
 80076c0:	4649      	mov	r1, r9
 80076c2:	f7f9 fa33 	bl	8000b2c <__aeabi_dcmplt>
 80076c6:	b110      	cbz	r0, 80076ce <_printf_float+0x86>
 80076c8:	232d      	movs	r3, #45	@ 0x2d
 80076ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076ce:	4a91      	ldr	r2, [pc, #580]	@ (8007914 <_printf_float+0x2cc>)
 80076d0:	4b91      	ldr	r3, [pc, #580]	@ (8007918 <_printf_float+0x2d0>)
 80076d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076d6:	bf94      	ite	ls
 80076d8:	4690      	movls	r8, r2
 80076da:	4698      	movhi	r8, r3
 80076dc:	2303      	movs	r3, #3
 80076de:	6123      	str	r3, [r4, #16]
 80076e0:	f02b 0304 	bic.w	r3, fp, #4
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	f04f 0900 	mov.w	r9, #0
 80076ea:	9700      	str	r7, [sp, #0]
 80076ec:	4633      	mov	r3, r6
 80076ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076f0:	4621      	mov	r1, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f9d2 	bl	8007a9c <_printf_common>
 80076f8:	3001      	adds	r0, #1
 80076fa:	f040 808d 	bne.w	8007818 <_printf_float+0x1d0>
 80076fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007702:	b00d      	add	sp, #52	@ 0x34
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	4642      	mov	r2, r8
 800770a:	464b      	mov	r3, r9
 800770c:	4640      	mov	r0, r8
 800770e:	4649      	mov	r1, r9
 8007710:	f7f9 fa34 	bl	8000b7c <__aeabi_dcmpun>
 8007714:	b140      	cbz	r0, 8007728 <_printf_float+0xe0>
 8007716:	464b      	mov	r3, r9
 8007718:	2b00      	cmp	r3, #0
 800771a:	bfbc      	itt	lt
 800771c:	232d      	movlt	r3, #45	@ 0x2d
 800771e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007722:	4a7e      	ldr	r2, [pc, #504]	@ (800791c <_printf_float+0x2d4>)
 8007724:	4b7e      	ldr	r3, [pc, #504]	@ (8007920 <_printf_float+0x2d8>)
 8007726:	e7d4      	b.n	80076d2 <_printf_float+0x8a>
 8007728:	6863      	ldr	r3, [r4, #4]
 800772a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800772e:	9206      	str	r2, [sp, #24]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	d13b      	bne.n	80077ac <_printf_float+0x164>
 8007734:	2306      	movs	r3, #6
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800773c:	2300      	movs	r3, #0
 800773e:	6022      	str	r2, [r4, #0]
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	ab0a      	add	r3, sp, #40	@ 0x28
 8007744:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007748:	ab09      	add	r3, sp, #36	@ 0x24
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	6861      	ldr	r1, [r4, #4]
 800774e:	ec49 8b10 	vmov	d0, r8, r9
 8007752:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007756:	4628      	mov	r0, r5
 8007758:	f7ff fed6 	bl	8007508 <__cvt>
 800775c:	9b06      	ldr	r3, [sp, #24]
 800775e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007760:	2b47      	cmp	r3, #71	@ 0x47
 8007762:	4680      	mov	r8, r0
 8007764:	d129      	bne.n	80077ba <_printf_float+0x172>
 8007766:	1cc8      	adds	r0, r1, #3
 8007768:	db02      	blt.n	8007770 <_printf_float+0x128>
 800776a:	6863      	ldr	r3, [r4, #4]
 800776c:	4299      	cmp	r1, r3
 800776e:	dd41      	ble.n	80077f4 <_printf_float+0x1ac>
 8007770:	f1aa 0a02 	sub.w	sl, sl, #2
 8007774:	fa5f fa8a 	uxtb.w	sl, sl
 8007778:	3901      	subs	r1, #1
 800777a:	4652      	mov	r2, sl
 800777c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007780:	9109      	str	r1, [sp, #36]	@ 0x24
 8007782:	f7ff ff26 	bl	80075d2 <__exponent>
 8007786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007788:	1813      	adds	r3, r2, r0
 800778a:	2a01      	cmp	r2, #1
 800778c:	4681      	mov	r9, r0
 800778e:	6123      	str	r3, [r4, #16]
 8007790:	dc02      	bgt.n	8007798 <_printf_float+0x150>
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	07d2      	lsls	r2, r2, #31
 8007796:	d501      	bpl.n	800779c <_printf_float+0x154>
 8007798:	3301      	adds	r3, #1
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0a2      	beq.n	80076ea <_printf_float+0xa2>
 80077a4:	232d      	movs	r3, #45	@ 0x2d
 80077a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077aa:	e79e      	b.n	80076ea <_printf_float+0xa2>
 80077ac:	9a06      	ldr	r2, [sp, #24]
 80077ae:	2a47      	cmp	r2, #71	@ 0x47
 80077b0:	d1c2      	bne.n	8007738 <_printf_float+0xf0>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1c0      	bne.n	8007738 <_printf_float+0xf0>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e7bd      	b.n	8007736 <_printf_float+0xee>
 80077ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077be:	d9db      	bls.n	8007778 <_printf_float+0x130>
 80077c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80077c4:	d118      	bne.n	80077f8 <_printf_float+0x1b0>
 80077c6:	2900      	cmp	r1, #0
 80077c8:	6863      	ldr	r3, [r4, #4]
 80077ca:	dd0b      	ble.n	80077e4 <_printf_float+0x19c>
 80077cc:	6121      	str	r1, [r4, #16]
 80077ce:	b913      	cbnz	r3, 80077d6 <_printf_float+0x18e>
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	07d0      	lsls	r0, r2, #31
 80077d4:	d502      	bpl.n	80077dc <_printf_float+0x194>
 80077d6:	3301      	adds	r3, #1
 80077d8:	440b      	add	r3, r1
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077de:	f04f 0900 	mov.w	r9, #0
 80077e2:	e7db      	b.n	800779c <_printf_float+0x154>
 80077e4:	b913      	cbnz	r3, 80077ec <_printf_float+0x1a4>
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	07d2      	lsls	r2, r2, #31
 80077ea:	d501      	bpl.n	80077f0 <_printf_float+0x1a8>
 80077ec:	3302      	adds	r3, #2
 80077ee:	e7f4      	b.n	80077da <_printf_float+0x192>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e7f2      	b.n	80077da <_printf_float+0x192>
 80077f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077fa:	4299      	cmp	r1, r3
 80077fc:	db05      	blt.n	800780a <_printf_float+0x1c2>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	6121      	str	r1, [r4, #16]
 8007802:	07d8      	lsls	r0, r3, #31
 8007804:	d5ea      	bpl.n	80077dc <_printf_float+0x194>
 8007806:	1c4b      	adds	r3, r1, #1
 8007808:	e7e7      	b.n	80077da <_printf_float+0x192>
 800780a:	2900      	cmp	r1, #0
 800780c:	bfd4      	ite	le
 800780e:	f1c1 0202 	rsble	r2, r1, #2
 8007812:	2201      	movgt	r2, #1
 8007814:	4413      	add	r3, r2
 8007816:	e7e0      	b.n	80077da <_printf_float+0x192>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	055a      	lsls	r2, r3, #21
 800781c:	d407      	bmi.n	800782e <_printf_float+0x1e6>
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	4642      	mov	r2, r8
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	d12b      	bne.n	8007884 <_printf_float+0x23c>
 800782c:	e767      	b.n	80076fe <_printf_float+0xb6>
 800782e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007832:	f240 80dd 	bls.w	80079f0 <_printf_float+0x3a8>
 8007836:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	f7f9 f96b 	bl	8000b18 <__aeabi_dcmpeq>
 8007842:	2800      	cmp	r0, #0
 8007844:	d033      	beq.n	80078ae <_printf_float+0x266>
 8007846:	4a37      	ldr	r2, [pc, #220]	@ (8007924 <_printf_float+0x2dc>)
 8007848:	2301      	movs	r3, #1
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	47b8      	blx	r7
 8007850:	3001      	adds	r0, #1
 8007852:	f43f af54 	beq.w	80076fe <_printf_float+0xb6>
 8007856:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800785a:	4543      	cmp	r3, r8
 800785c:	db02      	blt.n	8007864 <_printf_float+0x21c>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	07d8      	lsls	r0, r3, #31
 8007862:	d50f      	bpl.n	8007884 <_printf_float+0x23c>
 8007864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f af45 	beq.w	80076fe <_printf_float+0xb6>
 8007874:	f04f 0900 	mov.w	r9, #0
 8007878:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800787c:	f104 0a1a 	add.w	sl, r4, #26
 8007880:	45c8      	cmp	r8, r9
 8007882:	dc09      	bgt.n	8007898 <_printf_float+0x250>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	079b      	lsls	r3, r3, #30
 8007888:	f100 8103 	bmi.w	8007a92 <_printf_float+0x44a>
 800788c:	68e0      	ldr	r0, [r4, #12]
 800788e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007890:	4298      	cmp	r0, r3
 8007892:	bfb8      	it	lt
 8007894:	4618      	movlt	r0, r3
 8007896:	e734      	b.n	8007702 <_printf_float+0xba>
 8007898:	2301      	movs	r3, #1
 800789a:	4652      	mov	r2, sl
 800789c:	4631      	mov	r1, r6
 800789e:	4628      	mov	r0, r5
 80078a0:	47b8      	blx	r7
 80078a2:	3001      	adds	r0, #1
 80078a4:	f43f af2b 	beq.w	80076fe <_printf_float+0xb6>
 80078a8:	f109 0901 	add.w	r9, r9, #1
 80078ac:	e7e8      	b.n	8007880 <_printf_float+0x238>
 80078ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc39      	bgt.n	8007928 <_printf_float+0x2e0>
 80078b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007924 <_printf_float+0x2dc>)
 80078b6:	2301      	movs	r3, #1
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	f43f af1d 	beq.w	80076fe <_printf_float+0xb6>
 80078c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80078c8:	ea59 0303 	orrs.w	r3, r9, r3
 80078cc:	d102      	bne.n	80078d4 <_printf_float+0x28c>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	07d9      	lsls	r1, r3, #31
 80078d2:	d5d7      	bpl.n	8007884 <_printf_float+0x23c>
 80078d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078d8:	4631      	mov	r1, r6
 80078da:	4628      	mov	r0, r5
 80078dc:	47b8      	blx	r7
 80078de:	3001      	adds	r0, #1
 80078e0:	f43f af0d 	beq.w	80076fe <_printf_float+0xb6>
 80078e4:	f04f 0a00 	mov.w	sl, #0
 80078e8:	f104 0b1a 	add.w	fp, r4, #26
 80078ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ee:	425b      	negs	r3, r3
 80078f0:	4553      	cmp	r3, sl
 80078f2:	dc01      	bgt.n	80078f8 <_printf_float+0x2b0>
 80078f4:	464b      	mov	r3, r9
 80078f6:	e793      	b.n	8007820 <_printf_float+0x1d8>
 80078f8:	2301      	movs	r3, #1
 80078fa:	465a      	mov	r2, fp
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	47b8      	blx	r7
 8007902:	3001      	adds	r0, #1
 8007904:	f43f aefb 	beq.w	80076fe <_printf_float+0xb6>
 8007908:	f10a 0a01 	add.w	sl, sl, #1
 800790c:	e7ee      	b.n	80078ec <_printf_float+0x2a4>
 800790e:	bf00      	nop
 8007910:	7fefffff 	.word	0x7fefffff
 8007914:	0800a340 	.word	0x0800a340
 8007918:	0800a344 	.word	0x0800a344
 800791c:	0800a348 	.word	0x0800a348
 8007920:	0800a34c 	.word	0x0800a34c
 8007924:	0800a350 	.word	0x0800a350
 8007928:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800792a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800792e:	4553      	cmp	r3, sl
 8007930:	bfa8      	it	ge
 8007932:	4653      	movge	r3, sl
 8007934:	2b00      	cmp	r3, #0
 8007936:	4699      	mov	r9, r3
 8007938:	dc36      	bgt.n	80079a8 <_printf_float+0x360>
 800793a:	f04f 0b00 	mov.w	fp, #0
 800793e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007942:	f104 021a 	add.w	r2, r4, #26
 8007946:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007948:	9306      	str	r3, [sp, #24]
 800794a:	eba3 0309 	sub.w	r3, r3, r9
 800794e:	455b      	cmp	r3, fp
 8007950:	dc31      	bgt.n	80079b6 <_printf_float+0x36e>
 8007952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007954:	459a      	cmp	sl, r3
 8007956:	dc3a      	bgt.n	80079ce <_printf_float+0x386>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	07da      	lsls	r2, r3, #31
 800795c:	d437      	bmi.n	80079ce <_printf_float+0x386>
 800795e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007960:	ebaa 0903 	sub.w	r9, sl, r3
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	ebaa 0303 	sub.w	r3, sl, r3
 800796a:	4599      	cmp	r9, r3
 800796c:	bfa8      	it	ge
 800796e:	4699      	movge	r9, r3
 8007970:	f1b9 0f00 	cmp.w	r9, #0
 8007974:	dc33      	bgt.n	80079de <_printf_float+0x396>
 8007976:	f04f 0800 	mov.w	r8, #0
 800797a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800797e:	f104 0b1a 	add.w	fp, r4, #26
 8007982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007984:	ebaa 0303 	sub.w	r3, sl, r3
 8007988:	eba3 0309 	sub.w	r3, r3, r9
 800798c:	4543      	cmp	r3, r8
 800798e:	f77f af79 	ble.w	8007884 <_printf_float+0x23c>
 8007992:	2301      	movs	r3, #1
 8007994:	465a      	mov	r2, fp
 8007996:	4631      	mov	r1, r6
 8007998:	4628      	mov	r0, r5
 800799a:	47b8      	blx	r7
 800799c:	3001      	adds	r0, #1
 800799e:	f43f aeae 	beq.w	80076fe <_printf_float+0xb6>
 80079a2:	f108 0801 	add.w	r8, r8, #1
 80079a6:	e7ec      	b.n	8007982 <_printf_float+0x33a>
 80079a8:	4642      	mov	r2, r8
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	d1c2      	bne.n	800793a <_printf_float+0x2f2>
 80079b4:	e6a3      	b.n	80076fe <_printf_float+0xb6>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	9206      	str	r2, [sp, #24]
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	f43f ae9c 	beq.w	80076fe <_printf_float+0xb6>
 80079c6:	9a06      	ldr	r2, [sp, #24]
 80079c8:	f10b 0b01 	add.w	fp, fp, #1
 80079cc:	e7bb      	b.n	8007946 <_printf_float+0x2fe>
 80079ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	47b8      	blx	r7
 80079d8:	3001      	adds	r0, #1
 80079da:	d1c0      	bne.n	800795e <_printf_float+0x316>
 80079dc:	e68f      	b.n	80076fe <_printf_float+0xb6>
 80079de:	9a06      	ldr	r2, [sp, #24]
 80079e0:	464b      	mov	r3, r9
 80079e2:	4442      	add	r2, r8
 80079e4:	4631      	mov	r1, r6
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b8      	blx	r7
 80079ea:	3001      	adds	r0, #1
 80079ec:	d1c3      	bne.n	8007976 <_printf_float+0x32e>
 80079ee:	e686      	b.n	80076fe <_printf_float+0xb6>
 80079f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079f4:	f1ba 0f01 	cmp.w	sl, #1
 80079f8:	dc01      	bgt.n	80079fe <_printf_float+0x3b6>
 80079fa:	07db      	lsls	r3, r3, #31
 80079fc:	d536      	bpl.n	8007a6c <_printf_float+0x424>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4642      	mov	r2, r8
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f43f ae78 	beq.w	80076fe <_printf_float+0xb6>
 8007a0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a12:	4631      	mov	r1, r6
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	f43f ae70 	beq.w	80076fe <_printf_float+0xb6>
 8007a1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007a2a:	f7f9 f875 	bl	8000b18 <__aeabi_dcmpeq>
 8007a2e:	b9c0      	cbnz	r0, 8007a62 <_printf_float+0x41a>
 8007a30:	4653      	mov	r3, sl
 8007a32:	f108 0201 	add.w	r2, r8, #1
 8007a36:	4631      	mov	r1, r6
 8007a38:	4628      	mov	r0, r5
 8007a3a:	47b8      	blx	r7
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d10c      	bne.n	8007a5a <_printf_float+0x412>
 8007a40:	e65d      	b.n	80076fe <_printf_float+0xb6>
 8007a42:	2301      	movs	r3, #1
 8007a44:	465a      	mov	r2, fp
 8007a46:	4631      	mov	r1, r6
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	f43f ae56 	beq.w	80076fe <_printf_float+0xb6>
 8007a52:	f108 0801 	add.w	r8, r8, #1
 8007a56:	45d0      	cmp	r8, sl
 8007a58:	dbf3      	blt.n	8007a42 <_printf_float+0x3fa>
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a60:	e6df      	b.n	8007822 <_printf_float+0x1da>
 8007a62:	f04f 0800 	mov.w	r8, #0
 8007a66:	f104 0b1a 	add.w	fp, r4, #26
 8007a6a:	e7f4      	b.n	8007a56 <_printf_float+0x40e>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	4642      	mov	r2, r8
 8007a70:	e7e1      	b.n	8007a36 <_printf_float+0x3ee>
 8007a72:	2301      	movs	r3, #1
 8007a74:	464a      	mov	r2, r9
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f43f ae3e 	beq.w	80076fe <_printf_float+0xb6>
 8007a82:	f108 0801 	add.w	r8, r8, #1
 8007a86:	68e3      	ldr	r3, [r4, #12]
 8007a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a8a:	1a5b      	subs	r3, r3, r1
 8007a8c:	4543      	cmp	r3, r8
 8007a8e:	dcf0      	bgt.n	8007a72 <_printf_float+0x42a>
 8007a90:	e6fc      	b.n	800788c <_printf_float+0x244>
 8007a92:	f04f 0800 	mov.w	r8, #0
 8007a96:	f104 0919 	add.w	r9, r4, #25
 8007a9a:	e7f4      	b.n	8007a86 <_printf_float+0x43e>

08007a9c <_printf_common>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	4698      	mov	r8, r3
 8007aa4:	688a      	ldr	r2, [r1, #8]
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bfb8      	it	lt
 8007ab0:	4613      	movlt	r3, r2
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ab8:	4607      	mov	r7, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	b10a      	cbz	r2, 8007ac2 <_printf_common+0x26>
 8007abe:	3301      	adds	r3, #1
 8007ac0:	6033      	str	r3, [r6, #0]
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	0699      	lsls	r1, r3, #26
 8007ac6:	bf42      	ittt	mi
 8007ac8:	6833      	ldrmi	r3, [r6, #0]
 8007aca:	3302      	addmi	r3, #2
 8007acc:	6033      	strmi	r3, [r6, #0]
 8007ace:	6825      	ldr	r5, [r4, #0]
 8007ad0:	f015 0506 	ands.w	r5, r5, #6
 8007ad4:	d106      	bne.n	8007ae4 <_printf_common+0x48>
 8007ad6:	f104 0a19 	add.w	sl, r4, #25
 8007ada:	68e3      	ldr	r3, [r4, #12]
 8007adc:	6832      	ldr	r2, [r6, #0]
 8007ade:	1a9b      	subs	r3, r3, r2
 8007ae0:	42ab      	cmp	r3, r5
 8007ae2:	dc26      	bgt.n	8007b32 <_printf_common+0x96>
 8007ae4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ae8:	6822      	ldr	r2, [r4, #0]
 8007aea:	3b00      	subs	r3, #0
 8007aec:	bf18      	it	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	0692      	lsls	r2, r2, #26
 8007af2:	d42b      	bmi.n	8007b4c <_printf_common+0xb0>
 8007af4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007af8:	4641      	mov	r1, r8
 8007afa:	4638      	mov	r0, r7
 8007afc:	47c8      	blx	r9
 8007afe:	3001      	adds	r0, #1
 8007b00:	d01e      	beq.n	8007b40 <_printf_common+0xa4>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	6922      	ldr	r2, [r4, #16]
 8007b06:	f003 0306 	and.w	r3, r3, #6
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	bf02      	ittt	eq
 8007b0e:	68e5      	ldreq	r5, [r4, #12]
 8007b10:	6833      	ldreq	r3, [r6, #0]
 8007b12:	1aed      	subeq	r5, r5, r3
 8007b14:	68a3      	ldr	r3, [r4, #8]
 8007b16:	bf0c      	ite	eq
 8007b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b1c:	2500      	movne	r5, #0
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bfc4      	itt	gt
 8007b22:	1a9b      	subgt	r3, r3, r2
 8007b24:	18ed      	addgt	r5, r5, r3
 8007b26:	2600      	movs	r6, #0
 8007b28:	341a      	adds	r4, #26
 8007b2a:	42b5      	cmp	r5, r6
 8007b2c:	d11a      	bne.n	8007b64 <_printf_common+0xc8>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	e008      	b.n	8007b44 <_printf_common+0xa8>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4652      	mov	r2, sl
 8007b36:	4641      	mov	r1, r8
 8007b38:	4638      	mov	r0, r7
 8007b3a:	47c8      	blx	r9
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d103      	bne.n	8007b48 <_printf_common+0xac>
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	3501      	adds	r5, #1
 8007b4a:	e7c6      	b.n	8007ada <_printf_common+0x3e>
 8007b4c:	18e1      	adds	r1, r4, r3
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	2030      	movs	r0, #48	@ 0x30
 8007b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b56:	4422      	add	r2, r4
 8007b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b60:	3302      	adds	r3, #2
 8007b62:	e7c7      	b.n	8007af4 <_printf_common+0x58>
 8007b64:	2301      	movs	r3, #1
 8007b66:	4622      	mov	r2, r4
 8007b68:	4641      	mov	r1, r8
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	47c8      	blx	r9
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d0e6      	beq.n	8007b40 <_printf_common+0xa4>
 8007b72:	3601      	adds	r6, #1
 8007b74:	e7d9      	b.n	8007b2a <_printf_common+0x8e>
	...

08007b78 <_printf_i>:
 8007b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7c:	7e0f      	ldrb	r7, [r1, #24]
 8007b7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b80:	2f78      	cmp	r7, #120	@ 0x78
 8007b82:	4691      	mov	r9, r2
 8007b84:	4680      	mov	r8, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	469a      	mov	sl, r3
 8007b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b8e:	d807      	bhi.n	8007ba0 <_printf_i+0x28>
 8007b90:	2f62      	cmp	r7, #98	@ 0x62
 8007b92:	d80a      	bhi.n	8007baa <_printf_i+0x32>
 8007b94:	2f00      	cmp	r7, #0
 8007b96:	f000 80d2 	beq.w	8007d3e <_printf_i+0x1c6>
 8007b9a:	2f58      	cmp	r7, #88	@ 0x58
 8007b9c:	f000 80b9 	beq.w	8007d12 <_printf_i+0x19a>
 8007ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ba8:	e03a      	b.n	8007c20 <_printf_i+0xa8>
 8007baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bae:	2b15      	cmp	r3, #21
 8007bb0:	d8f6      	bhi.n	8007ba0 <_printf_i+0x28>
 8007bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8007bb8 <_printf_i+0x40>)
 8007bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bb8:	08007c11 	.word	0x08007c11
 8007bbc:	08007c25 	.word	0x08007c25
 8007bc0:	08007ba1 	.word	0x08007ba1
 8007bc4:	08007ba1 	.word	0x08007ba1
 8007bc8:	08007ba1 	.word	0x08007ba1
 8007bcc:	08007ba1 	.word	0x08007ba1
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007ba1 	.word	0x08007ba1
 8007bd8:	08007ba1 	.word	0x08007ba1
 8007bdc:	08007ba1 	.word	0x08007ba1
 8007be0:	08007ba1 	.word	0x08007ba1
 8007be4:	08007d25 	.word	0x08007d25
 8007be8:	08007c4f 	.word	0x08007c4f
 8007bec:	08007cdf 	.word	0x08007cdf
 8007bf0:	08007ba1 	.word	0x08007ba1
 8007bf4:	08007ba1 	.word	0x08007ba1
 8007bf8:	08007d47 	.word	0x08007d47
 8007bfc:	08007ba1 	.word	0x08007ba1
 8007c00:	08007c4f 	.word	0x08007c4f
 8007c04:	08007ba1 	.word	0x08007ba1
 8007c08:	08007ba1 	.word	0x08007ba1
 8007c0c:	08007ce7 	.word	0x08007ce7
 8007c10:	6833      	ldr	r3, [r6, #0]
 8007c12:	1d1a      	adds	r2, r3, #4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6032      	str	r2, [r6, #0]
 8007c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c20:	2301      	movs	r3, #1
 8007c22:	e09d      	b.n	8007d60 <_printf_i+0x1e8>
 8007c24:	6833      	ldr	r3, [r6, #0]
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	6031      	str	r1, [r6, #0]
 8007c2c:	0606      	lsls	r6, r0, #24
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0xbc>
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	e003      	b.n	8007c3c <_printf_i+0xc4>
 8007c34:	0645      	lsls	r5, r0, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0xb8>
 8007c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	da03      	bge.n	8007c48 <_printf_i+0xd0>
 8007c40:	232d      	movs	r3, #45	@ 0x2d
 8007c42:	426d      	negs	r5, r5
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c48:	4859      	ldr	r0, [pc, #356]	@ (8007db0 <_printf_i+0x238>)
 8007c4a:	230a      	movs	r3, #10
 8007c4c:	e011      	b.n	8007c72 <_printf_i+0xfa>
 8007c4e:	6821      	ldr	r1, [r4, #0]
 8007c50:	6833      	ldr	r3, [r6, #0]
 8007c52:	0608      	lsls	r0, r1, #24
 8007c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c58:	d402      	bmi.n	8007c60 <_printf_i+0xe8>
 8007c5a:	0649      	lsls	r1, r1, #25
 8007c5c:	bf48      	it	mi
 8007c5e:	b2ad      	uxthmi	r5, r5
 8007c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c62:	4853      	ldr	r0, [pc, #332]	@ (8007db0 <_printf_i+0x238>)
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	bf14      	ite	ne
 8007c68:	230a      	movne	r3, #10
 8007c6a:	2308      	moveq	r3, #8
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c72:	6866      	ldr	r6, [r4, #4]
 8007c74:	60a6      	str	r6, [r4, #8]
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	bfa2      	ittt	ge
 8007c7a:	6821      	ldrge	r1, [r4, #0]
 8007c7c:	f021 0104 	bicge.w	r1, r1, #4
 8007c80:	6021      	strge	r1, [r4, #0]
 8007c82:	b90d      	cbnz	r5, 8007c88 <_printf_i+0x110>
 8007c84:	2e00      	cmp	r6, #0
 8007c86:	d04b      	beq.n	8007d20 <_printf_i+0x1a8>
 8007c88:	4616      	mov	r6, r2
 8007c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c92:	5dc7      	ldrb	r7, [r0, r7]
 8007c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c98:	462f      	mov	r7, r5
 8007c9a:	42bb      	cmp	r3, r7
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	d9f4      	bls.n	8007c8a <_printf_i+0x112>
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d10b      	bne.n	8007cbc <_printf_i+0x144>
 8007ca4:	6823      	ldr	r3, [r4, #0]
 8007ca6:	07df      	lsls	r7, r3, #31
 8007ca8:	d508      	bpl.n	8007cbc <_printf_i+0x144>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	6861      	ldr	r1, [r4, #4]
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	bfde      	ittt	le
 8007cb2:	2330      	movle	r3, #48	@ 0x30
 8007cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cb8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007cbc:	1b92      	subs	r2, r2, r6
 8007cbe:	6122      	str	r2, [r4, #16]
 8007cc0:	f8cd a000 	str.w	sl, [sp]
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	aa03      	add	r2, sp, #12
 8007cc8:	4621      	mov	r1, r4
 8007cca:	4640      	mov	r0, r8
 8007ccc:	f7ff fee6 	bl	8007a9c <_printf_common>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d14a      	bne.n	8007d6a <_printf_i+0x1f2>
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cd8:	b004      	add	sp, #16
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	f043 0320 	orr.w	r3, r3, #32
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	4833      	ldr	r0, [pc, #204]	@ (8007db4 <_printf_i+0x23c>)
 8007ce8:	2778      	movs	r7, #120	@ 0x78
 8007cea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	6831      	ldr	r1, [r6, #0]
 8007cf2:	061f      	lsls	r7, r3, #24
 8007cf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cf8:	d402      	bmi.n	8007d00 <_printf_i+0x188>
 8007cfa:	065f      	lsls	r7, r3, #25
 8007cfc:	bf48      	it	mi
 8007cfe:	b2ad      	uxthmi	r5, r5
 8007d00:	6031      	str	r1, [r6, #0]
 8007d02:	07d9      	lsls	r1, r3, #31
 8007d04:	bf44      	itt	mi
 8007d06:	f043 0320 	orrmi.w	r3, r3, #32
 8007d0a:	6023      	strmi	r3, [r4, #0]
 8007d0c:	b11d      	cbz	r5, 8007d16 <_printf_i+0x19e>
 8007d0e:	2310      	movs	r3, #16
 8007d10:	e7ac      	b.n	8007c6c <_printf_i+0xf4>
 8007d12:	4827      	ldr	r0, [pc, #156]	@ (8007db0 <_printf_i+0x238>)
 8007d14:	e7e9      	b.n	8007cea <_printf_i+0x172>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	f023 0320 	bic.w	r3, r3, #32
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	e7f6      	b.n	8007d0e <_printf_i+0x196>
 8007d20:	4616      	mov	r6, r2
 8007d22:	e7bd      	b.n	8007ca0 <_printf_i+0x128>
 8007d24:	6833      	ldr	r3, [r6, #0]
 8007d26:	6825      	ldr	r5, [r4, #0]
 8007d28:	6961      	ldr	r1, [r4, #20]
 8007d2a:	1d18      	adds	r0, r3, #4
 8007d2c:	6030      	str	r0, [r6, #0]
 8007d2e:	062e      	lsls	r6, r5, #24
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	d501      	bpl.n	8007d38 <_printf_i+0x1c0>
 8007d34:	6019      	str	r1, [r3, #0]
 8007d36:	e002      	b.n	8007d3e <_printf_i+0x1c6>
 8007d38:	0668      	lsls	r0, r5, #25
 8007d3a:	d5fb      	bpl.n	8007d34 <_printf_i+0x1bc>
 8007d3c:	8019      	strh	r1, [r3, #0]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	6123      	str	r3, [r4, #16]
 8007d42:	4616      	mov	r6, r2
 8007d44:	e7bc      	b.n	8007cc0 <_printf_i+0x148>
 8007d46:	6833      	ldr	r3, [r6, #0]
 8007d48:	1d1a      	adds	r2, r3, #4
 8007d4a:	6032      	str	r2, [r6, #0]
 8007d4c:	681e      	ldr	r6, [r3, #0]
 8007d4e:	6862      	ldr	r2, [r4, #4]
 8007d50:	2100      	movs	r1, #0
 8007d52:	4630      	mov	r0, r6
 8007d54:	f7f8 fa64 	bl	8000220 <memchr>
 8007d58:	b108      	cbz	r0, 8007d5e <_printf_i+0x1e6>
 8007d5a:	1b80      	subs	r0, r0, r6
 8007d5c:	6060      	str	r0, [r4, #4]
 8007d5e:	6863      	ldr	r3, [r4, #4]
 8007d60:	6123      	str	r3, [r4, #16]
 8007d62:	2300      	movs	r3, #0
 8007d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d68:	e7aa      	b.n	8007cc0 <_printf_i+0x148>
 8007d6a:	6923      	ldr	r3, [r4, #16]
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4640      	mov	r0, r8
 8007d72:	47d0      	blx	sl
 8007d74:	3001      	adds	r0, #1
 8007d76:	d0ad      	beq.n	8007cd4 <_printf_i+0x15c>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	079b      	lsls	r3, r3, #30
 8007d7c:	d413      	bmi.n	8007da6 <_printf_i+0x22e>
 8007d7e:	68e0      	ldr	r0, [r4, #12]
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	4298      	cmp	r0, r3
 8007d84:	bfb8      	it	lt
 8007d86:	4618      	movlt	r0, r3
 8007d88:	e7a6      	b.n	8007cd8 <_printf_i+0x160>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	4649      	mov	r1, r9
 8007d90:	4640      	mov	r0, r8
 8007d92:	47d0      	blx	sl
 8007d94:	3001      	adds	r0, #1
 8007d96:	d09d      	beq.n	8007cd4 <_printf_i+0x15c>
 8007d98:	3501      	adds	r5, #1
 8007d9a:	68e3      	ldr	r3, [r4, #12]
 8007d9c:	9903      	ldr	r1, [sp, #12]
 8007d9e:	1a5b      	subs	r3, r3, r1
 8007da0:	42ab      	cmp	r3, r5
 8007da2:	dcf2      	bgt.n	8007d8a <_printf_i+0x212>
 8007da4:	e7eb      	b.n	8007d7e <_printf_i+0x206>
 8007da6:	2500      	movs	r5, #0
 8007da8:	f104 0619 	add.w	r6, r4, #25
 8007dac:	e7f5      	b.n	8007d9a <_printf_i+0x222>
 8007dae:	bf00      	nop
 8007db0:	0800a352 	.word	0x0800a352
 8007db4:	0800a363 	.word	0x0800a363

08007db8 <std>:
 8007db8:	2300      	movs	r3, #0
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc6:	6083      	str	r3, [r0, #8]
 8007dc8:	8181      	strh	r1, [r0, #12]
 8007dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8007dcc:	81c2      	strh	r2, [r0, #14]
 8007dce:	6183      	str	r3, [r0, #24]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	305c      	adds	r0, #92	@ 0x5c
 8007dd6:	f000 f928 	bl	800802a <memset>
 8007dda:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <std+0x58>)
 8007ddc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007dde:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <std+0x5c>)
 8007de0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007de2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <std+0x60>)
 8007de4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007de6:	4b0d      	ldr	r3, [pc, #52]	@ (8007e1c <std+0x64>)
 8007de8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <std+0x68>)
 8007dec:	6224      	str	r4, [r4, #32]
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d006      	beq.n	8007e00 <std+0x48>
 8007df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007df6:	4294      	cmp	r4, r2
 8007df8:	d002      	beq.n	8007e00 <std+0x48>
 8007dfa:	33d0      	adds	r3, #208	@ 0xd0
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d105      	bne.n	8007e0c <std+0x54>
 8007e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	f000 b98c 	b.w	8008124 <__retarget_lock_init_recursive>
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	bf00      	nop
 8007e10:	08007fa5 	.word	0x08007fa5
 8007e14:	08007fc7 	.word	0x08007fc7
 8007e18:	08007fff 	.word	0x08007fff
 8007e1c:	08008023 	.word	0x08008023
 8007e20:	200005c8 	.word	0x200005c8

08007e24 <stdio_exit_handler>:
 8007e24:	4a02      	ldr	r2, [pc, #8]	@ (8007e30 <stdio_exit_handler+0xc>)
 8007e26:	4903      	ldr	r1, [pc, #12]	@ (8007e34 <stdio_exit_handler+0x10>)
 8007e28:	4803      	ldr	r0, [pc, #12]	@ (8007e38 <stdio_exit_handler+0x14>)
 8007e2a:	f000 b869 	b.w	8007f00 <_fwalk_sglue>
 8007e2e:	bf00      	nop
 8007e30:	20000024 	.word	0x20000024
 8007e34:	08009a85 	.word	0x08009a85
 8007e38:	20000034 	.word	0x20000034

08007e3c <cleanup_stdio>:
 8007e3c:	6841      	ldr	r1, [r0, #4]
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007e70 <cleanup_stdio+0x34>)
 8007e40:	4299      	cmp	r1, r3
 8007e42:	b510      	push	{r4, lr}
 8007e44:	4604      	mov	r4, r0
 8007e46:	d001      	beq.n	8007e4c <cleanup_stdio+0x10>
 8007e48:	f001 fe1c 	bl	8009a84 <_fflush_r>
 8007e4c:	68a1      	ldr	r1, [r4, #8]
 8007e4e:	4b09      	ldr	r3, [pc, #36]	@ (8007e74 <cleanup_stdio+0x38>)
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <cleanup_stdio+0x1e>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f001 fe15 	bl	8009a84 <_fflush_r>
 8007e5a:	68e1      	ldr	r1, [r4, #12]
 8007e5c:	4b06      	ldr	r3, [pc, #24]	@ (8007e78 <cleanup_stdio+0x3c>)
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	d004      	beq.n	8007e6c <cleanup_stdio+0x30>
 8007e62:	4620      	mov	r0, r4
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f001 be0c 	b.w	8009a84 <_fflush_r>
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	200005c8 	.word	0x200005c8
 8007e74:	20000630 	.word	0x20000630
 8007e78:	20000698 	.word	0x20000698

08007e7c <global_stdio_init.part.0>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007eac <global_stdio_init.part.0+0x30>)
 8007e80:	4c0b      	ldr	r4, [pc, #44]	@ (8007eb0 <global_stdio_init.part.0+0x34>)
 8007e82:	4a0c      	ldr	r2, [pc, #48]	@ (8007eb4 <global_stdio_init.part.0+0x38>)
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	4620      	mov	r0, r4
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2104      	movs	r1, #4
 8007e8c:	f7ff ff94 	bl	8007db8 <std>
 8007e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e94:	2201      	movs	r2, #1
 8007e96:	2109      	movs	r1, #9
 8007e98:	f7ff ff8e 	bl	8007db8 <std>
 8007e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea6:	2112      	movs	r1, #18
 8007ea8:	f7ff bf86 	b.w	8007db8 <std>
 8007eac:	20000700 	.word	0x20000700
 8007eb0:	200005c8 	.word	0x200005c8
 8007eb4:	08007e25 	.word	0x08007e25

08007eb8 <__sfp_lock_acquire>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	@ (8007ec0 <__sfp_lock_acquire+0x8>)
 8007eba:	f000 b934 	b.w	8008126 <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	20000709 	.word	0x20000709

08007ec4 <__sfp_lock_release>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	@ (8007ecc <__sfp_lock_release+0x8>)
 8007ec6:	f000 b92f 	b.w	8008128 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	20000709 	.word	0x20000709

08007ed0 <__sinit>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	f7ff fff0 	bl	8007eb8 <__sfp_lock_acquire>
 8007ed8:	6a23      	ldr	r3, [r4, #32]
 8007eda:	b11b      	cbz	r3, 8007ee4 <__sinit+0x14>
 8007edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee0:	f7ff bff0 	b.w	8007ec4 <__sfp_lock_release>
 8007ee4:	4b04      	ldr	r3, [pc, #16]	@ (8007ef8 <__sinit+0x28>)
 8007ee6:	6223      	str	r3, [r4, #32]
 8007ee8:	4b04      	ldr	r3, [pc, #16]	@ (8007efc <__sinit+0x2c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f5      	bne.n	8007edc <__sinit+0xc>
 8007ef0:	f7ff ffc4 	bl	8007e7c <global_stdio_init.part.0>
 8007ef4:	e7f2      	b.n	8007edc <__sinit+0xc>
 8007ef6:	bf00      	nop
 8007ef8:	08007e3d 	.word	0x08007e3d
 8007efc:	20000700 	.word	0x20000700

08007f00 <_fwalk_sglue>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4607      	mov	r7, r0
 8007f06:	4688      	mov	r8, r1
 8007f08:	4614      	mov	r4, r2
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f10:	f1b9 0901 	subs.w	r9, r9, #1
 8007f14:	d505      	bpl.n	8007f22 <_fwalk_sglue+0x22>
 8007f16:	6824      	ldr	r4, [r4, #0]
 8007f18:	2c00      	cmp	r4, #0
 8007f1a:	d1f7      	bne.n	8007f0c <_fwalk_sglue+0xc>
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d907      	bls.n	8007f38 <_fwalk_sglue+0x38>
 8007f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	d003      	beq.n	8007f38 <_fwalk_sglue+0x38>
 8007f30:	4629      	mov	r1, r5
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	4306      	orrs	r6, r0
 8007f38:	3568      	adds	r5, #104	@ 0x68
 8007f3a:	e7e9      	b.n	8007f10 <_fwalk_sglue+0x10>

08007f3c <sniprintf>:
 8007f3c:	b40c      	push	{r2, r3}
 8007f3e:	b530      	push	{r4, r5, lr}
 8007f40:	4b17      	ldr	r3, [pc, #92]	@ (8007fa0 <sniprintf+0x64>)
 8007f42:	1e0c      	subs	r4, r1, #0
 8007f44:	681d      	ldr	r5, [r3, #0]
 8007f46:	b09d      	sub	sp, #116	@ 0x74
 8007f48:	da08      	bge.n	8007f5c <sniprintf+0x20>
 8007f4a:	238b      	movs	r3, #139	@ 0x8b
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f52:	b01d      	add	sp, #116	@ 0x74
 8007f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f58:	b002      	add	sp, #8
 8007f5a:	4770      	bx	lr
 8007f5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f64:	bf14      	ite	ne
 8007f66:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007f6a:	4623      	moveq	r3, r4
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	9307      	str	r3, [sp, #28]
 8007f70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f74:	9002      	str	r0, [sp, #8]
 8007f76:	9006      	str	r0, [sp, #24]
 8007f78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f7e:	ab21      	add	r3, sp, #132	@ 0x84
 8007f80:	a902      	add	r1, sp, #8
 8007f82:	4628      	mov	r0, r5
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	f001 fbfd 	bl	8009784 <_svfiprintf_r>
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	bfbc      	itt	lt
 8007f8e:	238b      	movlt	r3, #139	@ 0x8b
 8007f90:	602b      	strlt	r3, [r5, #0]
 8007f92:	2c00      	cmp	r4, #0
 8007f94:	d0dd      	beq.n	8007f52 <sniprintf+0x16>
 8007f96:	9b02      	ldr	r3, [sp, #8]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
 8007f9c:	e7d9      	b.n	8007f52 <sniprintf+0x16>
 8007f9e:	bf00      	nop
 8007fa0:	20000030 	.word	0x20000030

08007fa4 <__sread>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fac:	f000 f86c 	bl	8008088 <_read_r>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	bfab      	itete	ge
 8007fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fb8:	181b      	addge	r3, r3, r0
 8007fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fbe:	bfac      	ite	ge
 8007fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fc2:	81a3      	strhlt	r3, [r4, #12]
 8007fc4:	bd10      	pop	{r4, pc}

08007fc6 <__swrite>:
 8007fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fca:	461f      	mov	r7, r3
 8007fcc:	898b      	ldrh	r3, [r1, #12]
 8007fce:	05db      	lsls	r3, r3, #23
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4616      	mov	r6, r2
 8007fd6:	d505      	bpl.n	8007fe4 <__swrite+0x1e>
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	2302      	movs	r3, #2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f000 f840 	bl	8008064 <_lseek_r>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fee:	81a3      	strh	r3, [r4, #12]
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffa:	f000 b857 	b.w	80080ac <_write_r>

08007ffe <__sseek>:
 8007ffe:	b510      	push	{r4, lr}
 8008000:	460c      	mov	r4, r1
 8008002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008006:	f000 f82d 	bl	8008064 <_lseek_r>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	bf15      	itete	ne
 8008010:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008012:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008016:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800801a:	81a3      	strheq	r3, [r4, #12]
 800801c:	bf18      	it	ne
 800801e:	81a3      	strhne	r3, [r4, #12]
 8008020:	bd10      	pop	{r4, pc}

08008022 <__sclose>:
 8008022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008026:	f000 b80d 	b.w	8008044 <_close_r>

0800802a <memset>:
 800802a:	4402      	add	r2, r0
 800802c:	4603      	mov	r3, r0
 800802e:	4293      	cmp	r3, r2
 8008030:	d100      	bne.n	8008034 <memset+0xa>
 8008032:	4770      	bx	lr
 8008034:	f803 1b01 	strb.w	r1, [r3], #1
 8008038:	e7f9      	b.n	800802e <memset+0x4>
	...

0800803c <_localeconv_r>:
 800803c:	4800      	ldr	r0, [pc, #0]	@ (8008040 <_localeconv_r+0x4>)
 800803e:	4770      	bx	lr
 8008040:	20000170 	.word	0x20000170

08008044 <_close_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d06      	ldr	r5, [pc, #24]	@ (8008060 <_close_r+0x1c>)
 8008048:	2300      	movs	r3, #0
 800804a:	4604      	mov	r4, r0
 800804c:	4608      	mov	r0, r1
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7fa fe75 	bl	8002d3e <_close>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d102      	bne.n	800805e <_close_r+0x1a>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	b103      	cbz	r3, 800805e <_close_r+0x1a>
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	20000704 	.word	0x20000704

08008064 <_lseek_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d07      	ldr	r5, [pc, #28]	@ (8008084 <_lseek_r+0x20>)
 8008068:	4604      	mov	r4, r0
 800806a:	4608      	mov	r0, r1
 800806c:	4611      	mov	r1, r2
 800806e:	2200      	movs	r2, #0
 8008070:	602a      	str	r2, [r5, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	f7fa fe8a 	bl	8002d8c <_lseek>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_lseek_r+0x1e>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_lseek_r+0x1e>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20000704 	.word	0x20000704

08008088 <_read_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d07      	ldr	r5, [pc, #28]	@ (80080a8 <_read_r+0x20>)
 800808c:	4604      	mov	r4, r0
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f7fa fe18 	bl	8002ccc <_read>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_read_r+0x1e>
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_read_r+0x1e>
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	20000704 	.word	0x20000704

080080ac <_write_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4d07      	ldr	r5, [pc, #28]	@ (80080cc <_write_r+0x20>)
 80080b0:	4604      	mov	r4, r0
 80080b2:	4608      	mov	r0, r1
 80080b4:	4611      	mov	r1, r2
 80080b6:	2200      	movs	r2, #0
 80080b8:	602a      	str	r2, [r5, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f7fa fe23 	bl	8002d06 <_write>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_write_r+0x1e>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_write_r+0x1e>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20000704 	.word	0x20000704

080080d0 <__errno>:
 80080d0:	4b01      	ldr	r3, [pc, #4]	@ (80080d8 <__errno+0x8>)
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20000030 	.word	0x20000030

080080dc <__libc_init_array>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4d0d      	ldr	r5, [pc, #52]	@ (8008114 <__libc_init_array+0x38>)
 80080e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008118 <__libc_init_array+0x3c>)
 80080e2:	1b64      	subs	r4, r4, r5
 80080e4:	10a4      	asrs	r4, r4, #2
 80080e6:	2600      	movs	r6, #0
 80080e8:	42a6      	cmp	r6, r4
 80080ea:	d109      	bne.n	8008100 <__libc_init_array+0x24>
 80080ec:	4d0b      	ldr	r5, [pc, #44]	@ (800811c <__libc_init_array+0x40>)
 80080ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008120 <__libc_init_array+0x44>)
 80080f0:	f002 f8e4 	bl	800a2bc <_init>
 80080f4:	1b64      	subs	r4, r4, r5
 80080f6:	10a4      	asrs	r4, r4, #2
 80080f8:	2600      	movs	r6, #0
 80080fa:	42a6      	cmp	r6, r4
 80080fc:	d105      	bne.n	800810a <__libc_init_array+0x2e>
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	f855 3b04 	ldr.w	r3, [r5], #4
 8008104:	4798      	blx	r3
 8008106:	3601      	adds	r6, #1
 8008108:	e7ee      	b.n	80080e8 <__libc_init_array+0xc>
 800810a:	f855 3b04 	ldr.w	r3, [r5], #4
 800810e:	4798      	blx	r3
 8008110:	3601      	adds	r6, #1
 8008112:	e7f2      	b.n	80080fa <__libc_init_array+0x1e>
 8008114:	0800a6b8 	.word	0x0800a6b8
 8008118:	0800a6b8 	.word	0x0800a6b8
 800811c:	0800a6b8 	.word	0x0800a6b8
 8008120:	0800a6bc 	.word	0x0800a6bc

08008124 <__retarget_lock_init_recursive>:
 8008124:	4770      	bx	lr

08008126 <__retarget_lock_acquire_recursive>:
 8008126:	4770      	bx	lr

08008128 <__retarget_lock_release_recursive>:
 8008128:	4770      	bx	lr

0800812a <quorem>:
 800812a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812e:	6903      	ldr	r3, [r0, #16]
 8008130:	690c      	ldr	r4, [r1, #16]
 8008132:	42a3      	cmp	r3, r4
 8008134:	4607      	mov	r7, r0
 8008136:	db7e      	blt.n	8008236 <quorem+0x10c>
 8008138:	3c01      	subs	r4, #1
 800813a:	f101 0814 	add.w	r8, r1, #20
 800813e:	00a3      	lsls	r3, r4, #2
 8008140:	f100 0514 	add.w	r5, r0, #20
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008154:	3301      	adds	r3, #1
 8008156:	429a      	cmp	r2, r3
 8008158:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800815c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008160:	d32e      	bcc.n	80081c0 <quorem+0x96>
 8008162:	f04f 0a00 	mov.w	sl, #0
 8008166:	46c4      	mov	ip, r8
 8008168:	46ae      	mov	lr, r5
 800816a:	46d3      	mov	fp, sl
 800816c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008170:	b298      	uxth	r0, r3
 8008172:	fb06 a000 	mla	r0, r6, r0, sl
 8008176:	0c02      	lsrs	r2, r0, #16
 8008178:	0c1b      	lsrs	r3, r3, #16
 800817a:	fb06 2303 	mla	r3, r6, r3, r2
 800817e:	f8de 2000 	ldr.w	r2, [lr]
 8008182:	b280      	uxth	r0, r0
 8008184:	b292      	uxth	r2, r2
 8008186:	1a12      	subs	r2, r2, r0
 8008188:	445a      	add	r2, fp
 800818a:	f8de 0000 	ldr.w	r0, [lr]
 800818e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008192:	b29b      	uxth	r3, r3
 8008194:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008198:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800819c:	b292      	uxth	r2, r2
 800819e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80081a2:	45e1      	cmp	r9, ip
 80081a4:	f84e 2b04 	str.w	r2, [lr], #4
 80081a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80081ac:	d2de      	bcs.n	800816c <quorem+0x42>
 80081ae:	9b00      	ldr	r3, [sp, #0]
 80081b0:	58eb      	ldr	r3, [r5, r3]
 80081b2:	b92b      	cbnz	r3, 80081c0 <quorem+0x96>
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	3b04      	subs	r3, #4
 80081b8:	429d      	cmp	r5, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	d32f      	bcc.n	800821e <quorem+0xf4>
 80081be:	613c      	str	r4, [r7, #16]
 80081c0:	4638      	mov	r0, r7
 80081c2:	f001 f97b 	bl	80094bc <__mcmp>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	db25      	blt.n	8008216 <quorem+0xec>
 80081ca:	4629      	mov	r1, r5
 80081cc:	2000      	movs	r0, #0
 80081ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80081d2:	f8d1 c000 	ldr.w	ip, [r1]
 80081d6:	fa1f fe82 	uxth.w	lr, r2
 80081da:	fa1f f38c 	uxth.w	r3, ip
 80081de:	eba3 030e 	sub.w	r3, r3, lr
 80081e2:	4403      	add	r3, r0
 80081e4:	0c12      	lsrs	r2, r2, #16
 80081e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081f4:	45c1      	cmp	r9, r8
 80081f6:	f841 3b04 	str.w	r3, [r1], #4
 80081fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081fe:	d2e6      	bcs.n	80081ce <quorem+0xa4>
 8008200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008208:	b922      	cbnz	r2, 8008214 <quorem+0xea>
 800820a:	3b04      	subs	r3, #4
 800820c:	429d      	cmp	r5, r3
 800820e:	461a      	mov	r2, r3
 8008210:	d30b      	bcc.n	800822a <quorem+0x100>
 8008212:	613c      	str	r4, [r7, #16]
 8008214:	3601      	adds	r6, #1
 8008216:	4630      	mov	r0, r6
 8008218:	b003      	add	sp, #12
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	6812      	ldr	r2, [r2, #0]
 8008220:	3b04      	subs	r3, #4
 8008222:	2a00      	cmp	r2, #0
 8008224:	d1cb      	bne.n	80081be <quorem+0x94>
 8008226:	3c01      	subs	r4, #1
 8008228:	e7c6      	b.n	80081b8 <quorem+0x8e>
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	3b04      	subs	r3, #4
 800822e:	2a00      	cmp	r2, #0
 8008230:	d1ef      	bne.n	8008212 <quorem+0xe8>
 8008232:	3c01      	subs	r4, #1
 8008234:	e7ea      	b.n	800820c <quorem+0xe2>
 8008236:	2000      	movs	r0, #0
 8008238:	e7ee      	b.n	8008218 <quorem+0xee>
 800823a:	0000      	movs	r0, r0
 800823c:	0000      	movs	r0, r0
	...

08008240 <_dtoa_r>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	69c7      	ldr	r7, [r0, #28]
 8008246:	b099      	sub	sp, #100	@ 0x64
 8008248:	ed8d 0b02 	vstr	d0, [sp, #8]
 800824c:	ec55 4b10 	vmov	r4, r5, d0
 8008250:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008252:	9109      	str	r1, [sp, #36]	@ 0x24
 8008254:	4683      	mov	fp, r0
 8008256:	920e      	str	r2, [sp, #56]	@ 0x38
 8008258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800825a:	b97f      	cbnz	r7, 800827c <_dtoa_r+0x3c>
 800825c:	2010      	movs	r0, #16
 800825e:	f000 fdfd 	bl	8008e5c <malloc>
 8008262:	4602      	mov	r2, r0
 8008264:	f8cb 001c 	str.w	r0, [fp, #28]
 8008268:	b920      	cbnz	r0, 8008274 <_dtoa_r+0x34>
 800826a:	4ba7      	ldr	r3, [pc, #668]	@ (8008508 <_dtoa_r+0x2c8>)
 800826c:	21ef      	movs	r1, #239	@ 0xef
 800826e:	48a7      	ldr	r0, [pc, #668]	@ (800850c <_dtoa_r+0x2cc>)
 8008270:	f001 fc68 	bl	8009b44 <__assert_func>
 8008274:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008278:	6007      	str	r7, [r0, #0]
 800827a:	60c7      	str	r7, [r0, #12]
 800827c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008280:	6819      	ldr	r1, [r3, #0]
 8008282:	b159      	cbz	r1, 800829c <_dtoa_r+0x5c>
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	604a      	str	r2, [r1, #4]
 8008288:	2301      	movs	r3, #1
 800828a:	4093      	lsls	r3, r2
 800828c:	608b      	str	r3, [r1, #8]
 800828e:	4658      	mov	r0, fp
 8008290:	f000 feda 	bl	8009048 <_Bfree>
 8008294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	1e2b      	subs	r3, r5, #0
 800829e:	bfb9      	ittee	lt
 80082a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80082a4:	9303      	strlt	r3, [sp, #12]
 80082a6:	2300      	movge	r3, #0
 80082a8:	6033      	strge	r3, [r6, #0]
 80082aa:	9f03      	ldr	r7, [sp, #12]
 80082ac:	4b98      	ldr	r3, [pc, #608]	@ (8008510 <_dtoa_r+0x2d0>)
 80082ae:	bfbc      	itt	lt
 80082b0:	2201      	movlt	r2, #1
 80082b2:	6032      	strlt	r2, [r6, #0]
 80082b4:	43bb      	bics	r3, r7
 80082b6:	d112      	bne.n	80082de <_dtoa_r+0x9e>
 80082b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082c4:	4323      	orrs	r3, r4
 80082c6:	f000 854d 	beq.w	8008d64 <_dtoa_r+0xb24>
 80082ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008524 <_dtoa_r+0x2e4>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 854f 	beq.w	8008d74 <_dtoa_r+0xb34>
 80082d6:	f10a 0303 	add.w	r3, sl, #3
 80082da:	f000 bd49 	b.w	8008d70 <_dtoa_r+0xb30>
 80082de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	ec51 0b17 	vmov	r0, r1, d7
 80082e8:	2300      	movs	r3, #0
 80082ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80082ee:	f7f8 fc13 	bl	8000b18 <__aeabi_dcmpeq>
 80082f2:	4680      	mov	r8, r0
 80082f4:	b158      	cbz	r0, 800830e <_dtoa_r+0xce>
 80082f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082f8:	2301      	movs	r3, #1
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082fe:	b113      	cbz	r3, 8008306 <_dtoa_r+0xc6>
 8008300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008302:	4b84      	ldr	r3, [pc, #528]	@ (8008514 <_dtoa_r+0x2d4>)
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008528 <_dtoa_r+0x2e8>
 800830a:	f000 bd33 	b.w	8008d74 <_dtoa_r+0xb34>
 800830e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008312:	aa16      	add	r2, sp, #88	@ 0x58
 8008314:	a917      	add	r1, sp, #92	@ 0x5c
 8008316:	4658      	mov	r0, fp
 8008318:	f001 f980 	bl	800961c <__d2b>
 800831c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008320:	4681      	mov	r9, r0
 8008322:	2e00      	cmp	r6, #0
 8008324:	d077      	beq.n	8008416 <_dtoa_r+0x1d6>
 8008326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008328:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800832c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008334:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008338:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800833c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008340:	4619      	mov	r1, r3
 8008342:	2200      	movs	r2, #0
 8008344:	4b74      	ldr	r3, [pc, #464]	@ (8008518 <_dtoa_r+0x2d8>)
 8008346:	f7f7 ffc7 	bl	80002d8 <__aeabi_dsub>
 800834a:	a369      	add	r3, pc, #420	@ (adr r3, 80084f0 <_dtoa_r+0x2b0>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f8 f97a 	bl	8000648 <__aeabi_dmul>
 8008354:	a368      	add	r3, pc, #416	@ (adr r3, 80084f8 <_dtoa_r+0x2b8>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ffbf 	bl	80002dc <__adddf3>
 800835e:	4604      	mov	r4, r0
 8008360:	4630      	mov	r0, r6
 8008362:	460d      	mov	r5, r1
 8008364:	f7f8 f906 	bl	8000574 <__aeabi_i2d>
 8008368:	a365      	add	r3, pc, #404	@ (adr r3, 8008500 <_dtoa_r+0x2c0>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	f7f8 f96b 	bl	8000648 <__aeabi_dmul>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f7 ffaf 	bl	80002dc <__adddf3>
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	f7f8 fc11 	bl	8000ba8 <__aeabi_d2iz>
 8008386:	2200      	movs	r2, #0
 8008388:	4607      	mov	r7, r0
 800838a:	2300      	movs	r3, #0
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	f7f8 fbcc 	bl	8000b2c <__aeabi_dcmplt>
 8008394:	b140      	cbz	r0, 80083a8 <_dtoa_r+0x168>
 8008396:	4638      	mov	r0, r7
 8008398:	f7f8 f8ec 	bl	8000574 <__aeabi_i2d>
 800839c:	4622      	mov	r2, r4
 800839e:	462b      	mov	r3, r5
 80083a0:	f7f8 fbba 	bl	8000b18 <__aeabi_dcmpeq>
 80083a4:	b900      	cbnz	r0, 80083a8 <_dtoa_r+0x168>
 80083a6:	3f01      	subs	r7, #1
 80083a8:	2f16      	cmp	r7, #22
 80083aa:	d851      	bhi.n	8008450 <_dtoa_r+0x210>
 80083ac:	4b5b      	ldr	r3, [pc, #364]	@ (800851c <_dtoa_r+0x2dc>)
 80083ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083ba:	f7f8 fbb7 	bl	8000b2c <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d048      	beq.n	8008454 <_dtoa_r+0x214>
 80083c2:	3f01      	subs	r7, #1
 80083c4:	2300      	movs	r3, #0
 80083c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80083c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083ca:	1b9b      	subs	r3, r3, r6
 80083cc:	1e5a      	subs	r2, r3, #1
 80083ce:	bf44      	itt	mi
 80083d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80083d4:	2300      	movmi	r3, #0
 80083d6:	9208      	str	r2, [sp, #32]
 80083d8:	bf54      	ite	pl
 80083da:	f04f 0800 	movpl.w	r8, #0
 80083de:	9308      	strmi	r3, [sp, #32]
 80083e0:	2f00      	cmp	r7, #0
 80083e2:	db39      	blt.n	8008458 <_dtoa_r+0x218>
 80083e4:	9b08      	ldr	r3, [sp, #32]
 80083e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80083e8:	443b      	add	r3, r7
 80083ea:	9308      	str	r3, [sp, #32]
 80083ec:	2300      	movs	r3, #0
 80083ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f2:	2b09      	cmp	r3, #9
 80083f4:	d864      	bhi.n	80084c0 <_dtoa_r+0x280>
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	bfc4      	itt	gt
 80083fa:	3b04      	subgt	r3, #4
 80083fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008400:	f1a3 0302 	sub.w	r3, r3, #2
 8008404:	bfcc      	ite	gt
 8008406:	2400      	movgt	r4, #0
 8008408:	2401      	movle	r4, #1
 800840a:	2b03      	cmp	r3, #3
 800840c:	d863      	bhi.n	80084d6 <_dtoa_r+0x296>
 800840e:	e8df f003 	tbb	[pc, r3]
 8008412:	372a      	.short	0x372a
 8008414:	5535      	.short	0x5535
 8008416:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800841a:	441e      	add	r6, r3
 800841c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008420:	2b20      	cmp	r3, #32
 8008422:	bfc1      	itttt	gt
 8008424:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008428:	409f      	lslgt	r7, r3
 800842a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800842e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008432:	bfd6      	itet	le
 8008434:	f1c3 0320 	rsble	r3, r3, #32
 8008438:	ea47 0003 	orrgt.w	r0, r7, r3
 800843c:	fa04 f003 	lslle.w	r0, r4, r3
 8008440:	f7f8 f888 	bl	8000554 <__aeabi_ui2d>
 8008444:	2201      	movs	r2, #1
 8008446:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800844a:	3e01      	subs	r6, #1
 800844c:	9214      	str	r2, [sp, #80]	@ 0x50
 800844e:	e777      	b.n	8008340 <_dtoa_r+0x100>
 8008450:	2301      	movs	r3, #1
 8008452:	e7b8      	b.n	80083c6 <_dtoa_r+0x186>
 8008454:	9012      	str	r0, [sp, #72]	@ 0x48
 8008456:	e7b7      	b.n	80083c8 <_dtoa_r+0x188>
 8008458:	427b      	negs	r3, r7
 800845a:	930a      	str	r3, [sp, #40]	@ 0x28
 800845c:	2300      	movs	r3, #0
 800845e:	eba8 0807 	sub.w	r8, r8, r7
 8008462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008464:	e7c4      	b.n	80083f0 <_dtoa_r+0x1b0>
 8008466:	2300      	movs	r3, #0
 8008468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800846a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	dc35      	bgt.n	80084dc <_dtoa_r+0x29c>
 8008470:	2301      	movs	r3, #1
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	9307      	str	r3, [sp, #28]
 8008476:	461a      	mov	r2, r3
 8008478:	920e      	str	r2, [sp, #56]	@ 0x38
 800847a:	e00b      	b.n	8008494 <_dtoa_r+0x254>
 800847c:	2301      	movs	r3, #1
 800847e:	e7f3      	b.n	8008468 <_dtoa_r+0x228>
 8008480:	2300      	movs	r3, #0
 8008482:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008486:	18fb      	adds	r3, r7, r3
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	bfb8      	it	lt
 8008492:	2301      	movlt	r3, #1
 8008494:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008498:	2100      	movs	r1, #0
 800849a:	2204      	movs	r2, #4
 800849c:	f102 0514 	add.w	r5, r2, #20
 80084a0:	429d      	cmp	r5, r3
 80084a2:	d91f      	bls.n	80084e4 <_dtoa_r+0x2a4>
 80084a4:	6041      	str	r1, [r0, #4]
 80084a6:	4658      	mov	r0, fp
 80084a8:	f000 fd8e 	bl	8008fc8 <_Balloc>
 80084ac:	4682      	mov	sl, r0
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d13c      	bne.n	800852c <_dtoa_r+0x2ec>
 80084b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008520 <_dtoa_r+0x2e0>)
 80084b4:	4602      	mov	r2, r0
 80084b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80084ba:	e6d8      	b.n	800826e <_dtoa_r+0x2e>
 80084bc:	2301      	movs	r3, #1
 80084be:	e7e0      	b.n	8008482 <_dtoa_r+0x242>
 80084c0:	2401      	movs	r4, #1
 80084c2:	2300      	movs	r3, #0
 80084c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	2200      	movs	r2, #0
 80084d2:	2312      	movs	r3, #18
 80084d4:	e7d0      	b.n	8008478 <_dtoa_r+0x238>
 80084d6:	2301      	movs	r3, #1
 80084d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084da:	e7f5      	b.n	80084c8 <_dtoa_r+0x288>
 80084dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	9307      	str	r3, [sp, #28]
 80084e2:	e7d7      	b.n	8008494 <_dtoa_r+0x254>
 80084e4:	3101      	adds	r1, #1
 80084e6:	0052      	lsls	r2, r2, #1
 80084e8:	e7d8      	b.n	800849c <_dtoa_r+0x25c>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	636f4361 	.word	0x636f4361
 80084f4:	3fd287a7 	.word	0x3fd287a7
 80084f8:	8b60c8b3 	.word	0x8b60c8b3
 80084fc:	3fc68a28 	.word	0x3fc68a28
 8008500:	509f79fb 	.word	0x509f79fb
 8008504:	3fd34413 	.word	0x3fd34413
 8008508:	0800a381 	.word	0x0800a381
 800850c:	0800a398 	.word	0x0800a398
 8008510:	7ff00000 	.word	0x7ff00000
 8008514:	0800a351 	.word	0x0800a351
 8008518:	3ff80000 	.word	0x3ff80000
 800851c:	0800a490 	.word	0x0800a490
 8008520:	0800a3f0 	.word	0x0800a3f0
 8008524:	0800a37d 	.word	0x0800a37d
 8008528:	0800a350 	.word	0x0800a350
 800852c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008530:	6018      	str	r0, [r3, #0]
 8008532:	9b07      	ldr	r3, [sp, #28]
 8008534:	2b0e      	cmp	r3, #14
 8008536:	f200 80a4 	bhi.w	8008682 <_dtoa_r+0x442>
 800853a:	2c00      	cmp	r4, #0
 800853c:	f000 80a1 	beq.w	8008682 <_dtoa_r+0x442>
 8008540:	2f00      	cmp	r7, #0
 8008542:	dd33      	ble.n	80085ac <_dtoa_r+0x36c>
 8008544:	4bad      	ldr	r3, [pc, #692]	@ (80087fc <_dtoa_r+0x5bc>)
 8008546:	f007 020f 	and.w	r2, r7, #15
 800854a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800854e:	ed93 7b00 	vldr	d7, [r3]
 8008552:	05f8      	lsls	r0, r7, #23
 8008554:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008558:	ea4f 1427 	mov.w	r4, r7, asr #4
 800855c:	d516      	bpl.n	800858c <_dtoa_r+0x34c>
 800855e:	4ba8      	ldr	r3, [pc, #672]	@ (8008800 <_dtoa_r+0x5c0>)
 8008560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008568:	f7f8 f998 	bl	800089c <__aeabi_ddiv>
 800856c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008570:	f004 040f 	and.w	r4, r4, #15
 8008574:	2603      	movs	r6, #3
 8008576:	4da2      	ldr	r5, [pc, #648]	@ (8008800 <_dtoa_r+0x5c0>)
 8008578:	b954      	cbnz	r4, 8008590 <_dtoa_r+0x350>
 800857a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008582:	f7f8 f98b 	bl	800089c <__aeabi_ddiv>
 8008586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858a:	e028      	b.n	80085de <_dtoa_r+0x39e>
 800858c:	2602      	movs	r6, #2
 800858e:	e7f2      	b.n	8008576 <_dtoa_r+0x336>
 8008590:	07e1      	lsls	r1, r4, #31
 8008592:	d508      	bpl.n	80085a6 <_dtoa_r+0x366>
 8008594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800859c:	f7f8 f854 	bl	8000648 <__aeabi_dmul>
 80085a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085a4:	3601      	adds	r6, #1
 80085a6:	1064      	asrs	r4, r4, #1
 80085a8:	3508      	adds	r5, #8
 80085aa:	e7e5      	b.n	8008578 <_dtoa_r+0x338>
 80085ac:	f000 80d2 	beq.w	8008754 <_dtoa_r+0x514>
 80085b0:	427c      	negs	r4, r7
 80085b2:	4b92      	ldr	r3, [pc, #584]	@ (80087fc <_dtoa_r+0x5bc>)
 80085b4:	4d92      	ldr	r5, [pc, #584]	@ (8008800 <_dtoa_r+0x5c0>)
 80085b6:	f004 020f 	and.w	r2, r4, #15
 80085ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085c6:	f7f8 f83f 	bl	8000648 <__aeabi_dmul>
 80085ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ce:	1124      	asrs	r4, r4, #4
 80085d0:	2300      	movs	r3, #0
 80085d2:	2602      	movs	r6, #2
 80085d4:	2c00      	cmp	r4, #0
 80085d6:	f040 80b2 	bne.w	800873e <_dtoa_r+0x4fe>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1d3      	bne.n	8008586 <_dtoa_r+0x346>
 80085de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 80b7 	beq.w	8008758 <_dtoa_r+0x518>
 80085ea:	4b86      	ldr	r3, [pc, #536]	@ (8008804 <_dtoa_r+0x5c4>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	4620      	mov	r0, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	f7f8 fa9b 	bl	8000b2c <__aeabi_dcmplt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f000 80ae 	beq.w	8008758 <_dtoa_r+0x518>
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 80aa 	beq.w	8008758 <_dtoa_r+0x518>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd37      	ble.n	800867a <_dtoa_r+0x43a>
 800860a:	1e7b      	subs	r3, r7, #1
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	4620      	mov	r0, r4
 8008610:	4b7d      	ldr	r3, [pc, #500]	@ (8008808 <_dtoa_r+0x5c8>)
 8008612:	2200      	movs	r2, #0
 8008614:	4629      	mov	r1, r5
 8008616:	f7f8 f817 	bl	8000648 <__aeabi_dmul>
 800861a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800861e:	9c00      	ldr	r4, [sp, #0]
 8008620:	3601      	adds	r6, #1
 8008622:	4630      	mov	r0, r6
 8008624:	f7f7 ffa6 	bl	8000574 <__aeabi_i2d>
 8008628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800862c:	f7f8 f80c 	bl	8000648 <__aeabi_dmul>
 8008630:	4b76      	ldr	r3, [pc, #472]	@ (800880c <_dtoa_r+0x5cc>)
 8008632:	2200      	movs	r2, #0
 8008634:	f7f7 fe52 	bl	80002dc <__adddf3>
 8008638:	4605      	mov	r5, r0
 800863a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800863e:	2c00      	cmp	r4, #0
 8008640:	f040 808d 	bne.w	800875e <_dtoa_r+0x51e>
 8008644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008648:	4b71      	ldr	r3, [pc, #452]	@ (8008810 <_dtoa_r+0x5d0>)
 800864a:	2200      	movs	r2, #0
 800864c:	f7f7 fe44 	bl	80002d8 <__aeabi_dsub>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008658:	462a      	mov	r2, r5
 800865a:	4633      	mov	r3, r6
 800865c:	f7f8 fa84 	bl	8000b68 <__aeabi_dcmpgt>
 8008660:	2800      	cmp	r0, #0
 8008662:	f040 828b 	bne.w	8008b7c <_dtoa_r+0x93c>
 8008666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866a:	462a      	mov	r2, r5
 800866c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008670:	f7f8 fa5c 	bl	8000b2c <__aeabi_dcmplt>
 8008674:	2800      	cmp	r0, #0
 8008676:	f040 8128 	bne.w	80088ca <_dtoa_r+0x68a>
 800867a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800867e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008684:	2b00      	cmp	r3, #0
 8008686:	f2c0 815a 	blt.w	800893e <_dtoa_r+0x6fe>
 800868a:	2f0e      	cmp	r7, #14
 800868c:	f300 8157 	bgt.w	800893e <_dtoa_r+0x6fe>
 8008690:	4b5a      	ldr	r3, [pc, #360]	@ (80087fc <_dtoa_r+0x5bc>)
 8008692:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008696:	ed93 7b00 	vldr	d7, [r3]
 800869a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	ed8d 7b00 	vstr	d7, [sp]
 80086a2:	da03      	bge.n	80086ac <_dtoa_r+0x46c>
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f340 8101 	ble.w	80088ae <_dtoa_r+0x66e>
 80086ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086b0:	4656      	mov	r6, sl
 80086b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f8 f8ef 	bl	800089c <__aeabi_ddiv>
 80086be:	f7f8 fa73 	bl	8000ba8 <__aeabi_d2iz>
 80086c2:	4680      	mov	r8, r0
 80086c4:	f7f7 ff56 	bl	8000574 <__aeabi_i2d>
 80086c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086cc:	f7f7 ffbc 	bl	8000648 <__aeabi_dmul>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4620      	mov	r0, r4
 80086d6:	4629      	mov	r1, r5
 80086d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086dc:	f7f7 fdfc 	bl	80002d8 <__aeabi_dsub>
 80086e0:	f806 4b01 	strb.w	r4, [r6], #1
 80086e4:	9d07      	ldr	r5, [sp, #28]
 80086e6:	eba6 040a 	sub.w	r4, r6, sl
 80086ea:	42a5      	cmp	r5, r4
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	f040 8117 	bne.w	8008922 <_dtoa_r+0x6e2>
 80086f4:	f7f7 fdf2 	bl	80002dc <__adddf3>
 80086f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	f7f8 fa32 	bl	8000b68 <__aeabi_dcmpgt>
 8008704:	2800      	cmp	r0, #0
 8008706:	f040 80f9 	bne.w	80088fc <_dtoa_r+0x6bc>
 800870a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f8 fa01 	bl	8000b18 <__aeabi_dcmpeq>
 8008716:	b118      	cbz	r0, 8008720 <_dtoa_r+0x4e0>
 8008718:	f018 0f01 	tst.w	r8, #1
 800871c:	f040 80ee 	bne.w	80088fc <_dtoa_r+0x6bc>
 8008720:	4649      	mov	r1, r9
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fc90 	bl	8009048 <_Bfree>
 8008728:	2300      	movs	r3, #0
 800872a:	7033      	strb	r3, [r6, #0]
 800872c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800872e:	3701      	adds	r7, #1
 8008730:	601f      	str	r7, [r3, #0]
 8008732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 831d 	beq.w	8008d74 <_dtoa_r+0xb34>
 800873a:	601e      	str	r6, [r3, #0]
 800873c:	e31a      	b.n	8008d74 <_dtoa_r+0xb34>
 800873e:	07e2      	lsls	r2, r4, #31
 8008740:	d505      	bpl.n	800874e <_dtoa_r+0x50e>
 8008742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008746:	f7f7 ff7f 	bl	8000648 <__aeabi_dmul>
 800874a:	3601      	adds	r6, #1
 800874c:	2301      	movs	r3, #1
 800874e:	1064      	asrs	r4, r4, #1
 8008750:	3508      	adds	r5, #8
 8008752:	e73f      	b.n	80085d4 <_dtoa_r+0x394>
 8008754:	2602      	movs	r6, #2
 8008756:	e742      	b.n	80085de <_dtoa_r+0x39e>
 8008758:	9c07      	ldr	r4, [sp, #28]
 800875a:	9704      	str	r7, [sp, #16]
 800875c:	e761      	b.n	8008622 <_dtoa_r+0x3e2>
 800875e:	4b27      	ldr	r3, [pc, #156]	@ (80087fc <_dtoa_r+0x5bc>)
 8008760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008766:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800876a:	4454      	add	r4, sl
 800876c:	2900      	cmp	r1, #0
 800876e:	d053      	beq.n	8008818 <_dtoa_r+0x5d8>
 8008770:	4928      	ldr	r1, [pc, #160]	@ (8008814 <_dtoa_r+0x5d4>)
 8008772:	2000      	movs	r0, #0
 8008774:	f7f8 f892 	bl	800089c <__aeabi_ddiv>
 8008778:	4633      	mov	r3, r6
 800877a:	462a      	mov	r2, r5
 800877c:	f7f7 fdac 	bl	80002d8 <__aeabi_dsub>
 8008780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008784:	4656      	mov	r6, sl
 8008786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800878a:	f7f8 fa0d 	bl	8000ba8 <__aeabi_d2iz>
 800878e:	4605      	mov	r5, r0
 8008790:	f7f7 fef0 	bl	8000574 <__aeabi_i2d>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800879c:	f7f7 fd9c 	bl	80002d8 <__aeabi_dsub>
 80087a0:	3530      	adds	r5, #48	@ 0x30
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087aa:	f806 5b01 	strb.w	r5, [r6], #1
 80087ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087b2:	f7f8 f9bb 	bl	8000b2c <__aeabi_dcmplt>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d171      	bne.n	800889e <_dtoa_r+0x65e>
 80087ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087be:	4911      	ldr	r1, [pc, #68]	@ (8008804 <_dtoa_r+0x5c4>)
 80087c0:	2000      	movs	r0, #0
 80087c2:	f7f7 fd89 	bl	80002d8 <__aeabi_dsub>
 80087c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087ca:	f7f8 f9af 	bl	8000b2c <__aeabi_dcmplt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f040 8095 	bne.w	80088fe <_dtoa_r+0x6be>
 80087d4:	42a6      	cmp	r6, r4
 80087d6:	f43f af50 	beq.w	800867a <_dtoa_r+0x43a>
 80087da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087de:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <_dtoa_r+0x5c8>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	f7f7 ff31 	bl	8000648 <__aeabi_dmul>
 80087e6:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <_dtoa_r+0x5c8>)
 80087e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087ec:	2200      	movs	r2, #0
 80087ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f2:	f7f7 ff29 	bl	8000648 <__aeabi_dmul>
 80087f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087fa:	e7c4      	b.n	8008786 <_dtoa_r+0x546>
 80087fc:	0800a490 	.word	0x0800a490
 8008800:	0800a468 	.word	0x0800a468
 8008804:	3ff00000 	.word	0x3ff00000
 8008808:	40240000 	.word	0x40240000
 800880c:	401c0000 	.word	0x401c0000
 8008810:	40140000 	.word	0x40140000
 8008814:	3fe00000 	.word	0x3fe00000
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	f7f7 ff14 	bl	8000648 <__aeabi_dmul>
 8008820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008824:	9415      	str	r4, [sp, #84]	@ 0x54
 8008826:	4656      	mov	r6, sl
 8008828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800882c:	f7f8 f9bc 	bl	8000ba8 <__aeabi_d2iz>
 8008830:	4605      	mov	r5, r0
 8008832:	f7f7 fe9f 	bl	8000574 <__aeabi_i2d>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800883e:	f7f7 fd4b 	bl	80002d8 <__aeabi_dsub>
 8008842:	3530      	adds	r5, #48	@ 0x30
 8008844:	f806 5b01 	strb.w	r5, [r6], #1
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	42a6      	cmp	r6, r4
 800884e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	d124      	bne.n	80088a2 <_dtoa_r+0x662>
 8008858:	4bac      	ldr	r3, [pc, #688]	@ (8008b0c <_dtoa_r+0x8cc>)
 800885a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800885e:	f7f7 fd3d 	bl	80002dc <__adddf3>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886a:	f7f8 f97d 	bl	8000b68 <__aeabi_dcmpgt>
 800886e:	2800      	cmp	r0, #0
 8008870:	d145      	bne.n	80088fe <_dtoa_r+0x6be>
 8008872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008876:	49a5      	ldr	r1, [pc, #660]	@ (8008b0c <_dtoa_r+0x8cc>)
 8008878:	2000      	movs	r0, #0
 800887a:	f7f7 fd2d 	bl	80002d8 <__aeabi_dsub>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008886:	f7f8 f951 	bl	8000b2c <__aeabi_dcmplt>
 800888a:	2800      	cmp	r0, #0
 800888c:	f43f aef5 	beq.w	800867a <_dtoa_r+0x43a>
 8008890:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008892:	1e73      	subs	r3, r6, #1
 8008894:	9315      	str	r3, [sp, #84]	@ 0x54
 8008896:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800889a:	2b30      	cmp	r3, #48	@ 0x30
 800889c:	d0f8      	beq.n	8008890 <_dtoa_r+0x650>
 800889e:	9f04      	ldr	r7, [sp, #16]
 80088a0:	e73e      	b.n	8008720 <_dtoa_r+0x4e0>
 80088a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008b10 <_dtoa_r+0x8d0>)
 80088a4:	f7f7 fed0 	bl	8000648 <__aeabi_dmul>
 80088a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ac:	e7bc      	b.n	8008828 <_dtoa_r+0x5e8>
 80088ae:	d10c      	bne.n	80088ca <_dtoa_r+0x68a>
 80088b0:	4b98      	ldr	r3, [pc, #608]	@ (8008b14 <_dtoa_r+0x8d4>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088b8:	f7f7 fec6 	bl	8000648 <__aeabi_dmul>
 80088bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088c0:	f7f8 f948 	bl	8000b54 <__aeabi_dcmpge>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f000 8157 	beq.w	8008b78 <_dtoa_r+0x938>
 80088ca:	2400      	movs	r4, #0
 80088cc:	4625      	mov	r5, r4
 80088ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088d0:	43db      	mvns	r3, r3
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	4656      	mov	r6, sl
 80088d6:	2700      	movs	r7, #0
 80088d8:	4621      	mov	r1, r4
 80088da:	4658      	mov	r0, fp
 80088dc:	f000 fbb4 	bl	8009048 <_Bfree>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d0dc      	beq.n	800889e <_dtoa_r+0x65e>
 80088e4:	b12f      	cbz	r7, 80088f2 <_dtoa_r+0x6b2>
 80088e6:	42af      	cmp	r7, r5
 80088e8:	d003      	beq.n	80088f2 <_dtoa_r+0x6b2>
 80088ea:	4639      	mov	r1, r7
 80088ec:	4658      	mov	r0, fp
 80088ee:	f000 fbab 	bl	8009048 <_Bfree>
 80088f2:	4629      	mov	r1, r5
 80088f4:	4658      	mov	r0, fp
 80088f6:	f000 fba7 	bl	8009048 <_Bfree>
 80088fa:	e7d0      	b.n	800889e <_dtoa_r+0x65e>
 80088fc:	9704      	str	r7, [sp, #16]
 80088fe:	4633      	mov	r3, r6
 8008900:	461e      	mov	r6, r3
 8008902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008906:	2a39      	cmp	r2, #57	@ 0x39
 8008908:	d107      	bne.n	800891a <_dtoa_r+0x6da>
 800890a:	459a      	cmp	sl, r3
 800890c:	d1f8      	bne.n	8008900 <_dtoa_r+0x6c0>
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	3201      	adds	r2, #1
 8008912:	9204      	str	r2, [sp, #16]
 8008914:	2230      	movs	r2, #48	@ 0x30
 8008916:	f88a 2000 	strb.w	r2, [sl]
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	3201      	adds	r2, #1
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	e7bd      	b.n	800889e <_dtoa_r+0x65e>
 8008922:	4b7b      	ldr	r3, [pc, #492]	@ (8008b10 <_dtoa_r+0x8d0>)
 8008924:	2200      	movs	r2, #0
 8008926:	f7f7 fe8f 	bl	8000648 <__aeabi_dmul>
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	4604      	mov	r4, r0
 8008930:	460d      	mov	r5, r1
 8008932:	f7f8 f8f1 	bl	8000b18 <__aeabi_dcmpeq>
 8008936:	2800      	cmp	r0, #0
 8008938:	f43f aebb 	beq.w	80086b2 <_dtoa_r+0x472>
 800893c:	e6f0      	b.n	8008720 <_dtoa_r+0x4e0>
 800893e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008940:	2a00      	cmp	r2, #0
 8008942:	f000 80db 	beq.w	8008afc <_dtoa_r+0x8bc>
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	2a01      	cmp	r2, #1
 800894a:	f300 80bf 	bgt.w	8008acc <_dtoa_r+0x88c>
 800894e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008950:	2a00      	cmp	r2, #0
 8008952:	f000 80b7 	beq.w	8008ac4 <_dtoa_r+0x884>
 8008956:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800895a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800895c:	4646      	mov	r6, r8
 800895e:	9a08      	ldr	r2, [sp, #32]
 8008960:	2101      	movs	r1, #1
 8008962:	441a      	add	r2, r3
 8008964:	4658      	mov	r0, fp
 8008966:	4498      	add	r8, r3
 8008968:	9208      	str	r2, [sp, #32]
 800896a:	f000 fc21 	bl	80091b0 <__i2b>
 800896e:	4605      	mov	r5, r0
 8008970:	b15e      	cbz	r6, 800898a <_dtoa_r+0x74a>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	dd08      	ble.n	800898a <_dtoa_r+0x74a>
 8008978:	42b3      	cmp	r3, r6
 800897a:	9a08      	ldr	r2, [sp, #32]
 800897c:	bfa8      	it	ge
 800897e:	4633      	movge	r3, r6
 8008980:	eba8 0803 	sub.w	r8, r8, r3
 8008984:	1af6      	subs	r6, r6, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	9308      	str	r3, [sp, #32]
 800898a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800898c:	b1f3      	cbz	r3, 80089cc <_dtoa_r+0x78c>
 800898e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80b7 	beq.w	8008b04 <_dtoa_r+0x8c4>
 8008996:	b18c      	cbz	r4, 80089bc <_dtoa_r+0x77c>
 8008998:	4629      	mov	r1, r5
 800899a:	4622      	mov	r2, r4
 800899c:	4658      	mov	r0, fp
 800899e:	f000 fcc7 	bl	8009330 <__pow5mult>
 80089a2:	464a      	mov	r2, r9
 80089a4:	4601      	mov	r1, r0
 80089a6:	4605      	mov	r5, r0
 80089a8:	4658      	mov	r0, fp
 80089aa:	f000 fc17 	bl	80091dc <__multiply>
 80089ae:	4649      	mov	r1, r9
 80089b0:	9004      	str	r0, [sp, #16]
 80089b2:	4658      	mov	r0, fp
 80089b4:	f000 fb48 	bl	8009048 <_Bfree>
 80089b8:	9b04      	ldr	r3, [sp, #16]
 80089ba:	4699      	mov	r9, r3
 80089bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089be:	1b1a      	subs	r2, r3, r4
 80089c0:	d004      	beq.n	80089cc <_dtoa_r+0x78c>
 80089c2:	4649      	mov	r1, r9
 80089c4:	4658      	mov	r0, fp
 80089c6:	f000 fcb3 	bl	8009330 <__pow5mult>
 80089ca:	4681      	mov	r9, r0
 80089cc:	2101      	movs	r1, #1
 80089ce:	4658      	mov	r0, fp
 80089d0:	f000 fbee 	bl	80091b0 <__i2b>
 80089d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089d6:	4604      	mov	r4, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 81cf 	beq.w	8008d7c <_dtoa_r+0xb3c>
 80089de:	461a      	mov	r2, r3
 80089e0:	4601      	mov	r1, r0
 80089e2:	4658      	mov	r0, fp
 80089e4:	f000 fca4 	bl	8009330 <__pow5mult>
 80089e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	4604      	mov	r4, r0
 80089ee:	f300 8095 	bgt.w	8008b1c <_dtoa_r+0x8dc>
 80089f2:	9b02      	ldr	r3, [sp, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 8087 	bne.w	8008b08 <_dtoa_r+0x8c8>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 8089 	bne.w	8008b18 <_dtoa_r+0x8d8>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a0c:	0d1b      	lsrs	r3, r3, #20
 8008a0e:	051b      	lsls	r3, r3, #20
 8008a10:	b12b      	cbz	r3, 8008a1e <_dtoa_r+0x7de>
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	3301      	adds	r3, #1
 8008a16:	9308      	str	r3, [sp, #32]
 8008a18:	f108 0801 	add.w	r8, r8, #1
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 81b0 	beq.w	8008d88 <_dtoa_r+0xb48>
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a2e:	6918      	ldr	r0, [r3, #16]
 8008a30:	f000 fb72 	bl	8009118 <__hi0bits>
 8008a34:	f1c0 0020 	rsb	r0, r0, #32
 8008a38:	9b08      	ldr	r3, [sp, #32]
 8008a3a:	4418      	add	r0, r3
 8008a3c:	f010 001f 	ands.w	r0, r0, #31
 8008a40:	d077      	beq.n	8008b32 <_dtoa_r+0x8f2>
 8008a42:	f1c0 0320 	rsb	r3, r0, #32
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	dd6b      	ble.n	8008b22 <_dtoa_r+0x8e2>
 8008a4a:	9b08      	ldr	r3, [sp, #32]
 8008a4c:	f1c0 001c 	rsb	r0, r0, #28
 8008a50:	4403      	add	r3, r0
 8008a52:	4480      	add	r8, r0
 8008a54:	4406      	add	r6, r0
 8008a56:	9308      	str	r3, [sp, #32]
 8008a58:	f1b8 0f00 	cmp.w	r8, #0
 8008a5c:	dd05      	ble.n	8008a6a <_dtoa_r+0x82a>
 8008a5e:	4649      	mov	r1, r9
 8008a60:	4642      	mov	r2, r8
 8008a62:	4658      	mov	r0, fp
 8008a64:	f000 fcbe 	bl	80093e4 <__lshift>
 8008a68:	4681      	mov	r9, r0
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd05      	ble.n	8008a7c <_dtoa_r+0x83c>
 8008a70:	4621      	mov	r1, r4
 8008a72:	461a      	mov	r2, r3
 8008a74:	4658      	mov	r0, fp
 8008a76:	f000 fcb5 	bl	80093e4 <__lshift>
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d059      	beq.n	8008b36 <_dtoa_r+0x8f6>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4648      	mov	r0, r9
 8008a86:	f000 fd19 	bl	80094bc <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	da53      	bge.n	8008b36 <_dtoa_r+0x8f6>
 8008a8e:	1e7b      	subs	r3, r7, #1
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	4649      	mov	r1, r9
 8008a94:	2300      	movs	r3, #0
 8008a96:	220a      	movs	r2, #10
 8008a98:	4658      	mov	r0, fp
 8008a9a:	f000 faf7 	bl	800908c <__multadd>
 8008a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa0:	4681      	mov	r9, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8172 	beq.w	8008d8c <_dtoa_r+0xb4c>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4629      	mov	r1, r5
 8008aac:	220a      	movs	r2, #10
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f000 faec 	bl	800908c <__multadd>
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	4605      	mov	r5, r0
 8008aba:	dc67      	bgt.n	8008b8c <_dtoa_r+0x94c>
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	dc41      	bgt.n	8008b46 <_dtoa_r+0x906>
 8008ac2:	e063      	b.n	8008b8c <_dtoa_r+0x94c>
 8008ac4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ac6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008aca:	e746      	b.n	800895a <_dtoa_r+0x71a>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	1e5c      	subs	r4, r3, #1
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad2:	42a3      	cmp	r3, r4
 8008ad4:	bfbf      	itttt	lt
 8008ad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ad8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008ada:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008adc:	1ae3      	sublt	r3, r4, r3
 8008ade:	bfb4      	ite	lt
 8008ae0:	18d2      	addlt	r2, r2, r3
 8008ae2:	1b1c      	subge	r4, r3, r4
 8008ae4:	9b07      	ldr	r3, [sp, #28]
 8008ae6:	bfbc      	itt	lt
 8008ae8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008aea:	2400      	movlt	r4, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bfb5      	itete	lt
 8008af0:	eba8 0603 	sublt.w	r6, r8, r3
 8008af4:	9b07      	ldrge	r3, [sp, #28]
 8008af6:	2300      	movlt	r3, #0
 8008af8:	4646      	movge	r6, r8
 8008afa:	e730      	b.n	800895e <_dtoa_r+0x71e>
 8008afc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008afe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b00:	4646      	mov	r6, r8
 8008b02:	e735      	b.n	8008970 <_dtoa_r+0x730>
 8008b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b06:	e75c      	b.n	80089c2 <_dtoa_r+0x782>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e788      	b.n	8008a1e <_dtoa_r+0x7de>
 8008b0c:	3fe00000 	.word	0x3fe00000
 8008b10:	40240000 	.word	0x40240000
 8008b14:	40140000 	.word	0x40140000
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	e780      	b.n	8008a1e <_dtoa_r+0x7de>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b20:	e782      	b.n	8008a28 <_dtoa_r+0x7e8>
 8008b22:	d099      	beq.n	8008a58 <_dtoa_r+0x818>
 8008b24:	9a08      	ldr	r2, [sp, #32]
 8008b26:	331c      	adds	r3, #28
 8008b28:	441a      	add	r2, r3
 8008b2a:	4498      	add	r8, r3
 8008b2c:	441e      	add	r6, r3
 8008b2e:	9208      	str	r2, [sp, #32]
 8008b30:	e792      	b.n	8008a58 <_dtoa_r+0x818>
 8008b32:	4603      	mov	r3, r0
 8008b34:	e7f6      	b.n	8008b24 <_dtoa_r+0x8e4>
 8008b36:	9b07      	ldr	r3, [sp, #28]
 8008b38:	9704      	str	r7, [sp, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dc20      	bgt.n	8008b80 <_dtoa_r+0x940>
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	dd1e      	ble.n	8008b84 <_dtoa_r+0x944>
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f aec0 	bne.w	80088ce <_dtoa_r+0x68e>
 8008b4e:	4621      	mov	r1, r4
 8008b50:	2205      	movs	r2, #5
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fa9a 	bl	800908c <__multadd>
 8008b58:	4601      	mov	r1, r0
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4648      	mov	r0, r9
 8008b5e:	f000 fcad 	bl	80094bc <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f77f aeb3 	ble.w	80088ce <_dtoa_r+0x68e>
 8008b68:	4656      	mov	r6, sl
 8008b6a:	2331      	movs	r3, #49	@ 0x31
 8008b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b70:	9b04      	ldr	r3, [sp, #16]
 8008b72:	3301      	adds	r3, #1
 8008b74:	9304      	str	r3, [sp, #16]
 8008b76:	e6ae      	b.n	80088d6 <_dtoa_r+0x696>
 8008b78:	9c07      	ldr	r4, [sp, #28]
 8008b7a:	9704      	str	r7, [sp, #16]
 8008b7c:	4625      	mov	r5, r4
 8008b7e:	e7f3      	b.n	8008b68 <_dtoa_r+0x928>
 8008b80:	9b07      	ldr	r3, [sp, #28]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8104 	beq.w	8008d94 <_dtoa_r+0xb54>
 8008b8c:	2e00      	cmp	r6, #0
 8008b8e:	dd05      	ble.n	8008b9c <_dtoa_r+0x95c>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4632      	mov	r2, r6
 8008b94:	4658      	mov	r0, fp
 8008b96:	f000 fc25 	bl	80093e4 <__lshift>
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d05a      	beq.n	8008c58 <_dtoa_r+0xa18>
 8008ba2:	6869      	ldr	r1, [r5, #4]
 8008ba4:	4658      	mov	r0, fp
 8008ba6:	f000 fa0f 	bl	8008fc8 <_Balloc>
 8008baa:	4606      	mov	r6, r0
 8008bac:	b928      	cbnz	r0, 8008bba <_dtoa_r+0x97a>
 8008bae:	4b84      	ldr	r3, [pc, #528]	@ (8008dc0 <_dtoa_r+0xb80>)
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008bb6:	f7ff bb5a 	b.w	800826e <_dtoa_r+0x2e>
 8008bba:	692a      	ldr	r2, [r5, #16]
 8008bbc:	3202      	adds	r2, #2
 8008bbe:	0092      	lsls	r2, r2, #2
 8008bc0:	f105 010c 	add.w	r1, r5, #12
 8008bc4:	300c      	adds	r0, #12
 8008bc6:	f000 ffaf 	bl	8009b28 <memcpy>
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f000 fc08 	bl	80093e4 <__lshift>
 8008bd4:	f10a 0301 	add.w	r3, sl, #1
 8008bd8:	9307      	str	r3, [sp, #28]
 8008bda:	9b00      	ldr	r3, [sp, #0]
 8008bdc:	4453      	add	r3, sl
 8008bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	462f      	mov	r7, r5
 8008be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bea:	4605      	mov	r5, r0
 8008bec:	9b07      	ldr	r3, [sp, #28]
 8008bee:	4621      	mov	r1, r4
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	4648      	mov	r0, r9
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	f7ff fa98 	bl	800812a <quorem>
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	9002      	str	r0, [sp, #8]
 8008bfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c02:	4648      	mov	r0, r9
 8008c04:	f000 fc5a 	bl	80094bc <__mcmp>
 8008c08:	462a      	mov	r2, r5
 8008c0a:	9008      	str	r0, [sp, #32]
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4658      	mov	r0, fp
 8008c10:	f000 fc70 	bl	80094f4 <__mdiff>
 8008c14:	68c2      	ldr	r2, [r0, #12]
 8008c16:	4606      	mov	r6, r0
 8008c18:	bb02      	cbnz	r2, 8008c5c <_dtoa_r+0xa1c>
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4648      	mov	r0, r9
 8008c1e:	f000 fc4d 	bl	80094bc <__mcmp>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4631      	mov	r1, r6
 8008c26:	4658      	mov	r0, fp
 8008c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c2a:	f000 fa0d 	bl	8009048 <_Bfree>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c32:	9e07      	ldr	r6, [sp, #28]
 8008c34:	ea43 0102 	orr.w	r1, r3, r2
 8008c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c3a:	4319      	orrs	r1, r3
 8008c3c:	d110      	bne.n	8008c60 <_dtoa_r+0xa20>
 8008c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c42:	d029      	beq.n	8008c98 <_dtoa_r+0xa58>
 8008c44:	9b08      	ldr	r3, [sp, #32]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	dd02      	ble.n	8008c50 <_dtoa_r+0xa10>
 8008c4a:	9b02      	ldr	r3, [sp, #8]
 8008c4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	f883 8000 	strb.w	r8, [r3]
 8008c56:	e63f      	b.n	80088d8 <_dtoa_r+0x698>
 8008c58:	4628      	mov	r0, r5
 8008c5a:	e7bb      	b.n	8008bd4 <_dtoa_r+0x994>
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	e7e1      	b.n	8008c24 <_dtoa_r+0x9e4>
 8008c60:	9b08      	ldr	r3, [sp, #32]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	db04      	blt.n	8008c70 <_dtoa_r+0xa30>
 8008c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	d120      	bne.n	8008cb2 <_dtoa_r+0xa72>
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	dded      	ble.n	8008c50 <_dtoa_r+0xa10>
 8008c74:	4649      	mov	r1, r9
 8008c76:	2201      	movs	r2, #1
 8008c78:	4658      	mov	r0, fp
 8008c7a:	f000 fbb3 	bl	80093e4 <__lshift>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4681      	mov	r9, r0
 8008c82:	f000 fc1b 	bl	80094bc <__mcmp>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	dc03      	bgt.n	8008c92 <_dtoa_r+0xa52>
 8008c8a:	d1e1      	bne.n	8008c50 <_dtoa_r+0xa10>
 8008c8c:	f018 0f01 	tst.w	r8, #1
 8008c90:	d0de      	beq.n	8008c50 <_dtoa_r+0xa10>
 8008c92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c96:	d1d8      	bne.n	8008c4a <_dtoa_r+0xa0a>
 8008c98:	9a00      	ldr	r2, [sp, #0]
 8008c9a:	2339      	movs	r3, #57	@ 0x39
 8008c9c:	7013      	strb	r3, [r2, #0]
 8008c9e:	4633      	mov	r3, r6
 8008ca0:	461e      	mov	r6, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ca8:	2a39      	cmp	r2, #57	@ 0x39
 8008caa:	d052      	beq.n	8008d52 <_dtoa_r+0xb12>
 8008cac:	3201      	adds	r2, #1
 8008cae:	701a      	strb	r2, [r3, #0]
 8008cb0:	e612      	b.n	80088d8 <_dtoa_r+0x698>
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	dd07      	ble.n	8008cc6 <_dtoa_r+0xa86>
 8008cb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cba:	d0ed      	beq.n	8008c98 <_dtoa_r+0xa58>
 8008cbc:	9a00      	ldr	r2, [sp, #0]
 8008cbe:	f108 0301 	add.w	r3, r8, #1
 8008cc2:	7013      	strb	r3, [r2, #0]
 8008cc4:	e608      	b.n	80088d8 <_dtoa_r+0x698>
 8008cc6:	9b07      	ldr	r3, [sp, #28]
 8008cc8:	9a07      	ldr	r2, [sp, #28]
 8008cca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d028      	beq.n	8008d26 <_dtoa_r+0xae6>
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	220a      	movs	r2, #10
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f000 f9d6 	bl	800908c <__multadd>
 8008ce0:	42af      	cmp	r7, r5
 8008ce2:	4681      	mov	r9, r0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	f04f 020a 	mov.w	r2, #10
 8008cec:	4639      	mov	r1, r7
 8008cee:	4658      	mov	r0, fp
 8008cf0:	d107      	bne.n	8008d02 <_dtoa_r+0xac2>
 8008cf2:	f000 f9cb 	bl	800908c <__multadd>
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	9b07      	ldr	r3, [sp, #28]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	9307      	str	r3, [sp, #28]
 8008d00:	e774      	b.n	8008bec <_dtoa_r+0x9ac>
 8008d02:	f000 f9c3 	bl	800908c <__multadd>
 8008d06:	4629      	mov	r1, r5
 8008d08:	4607      	mov	r7, r0
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4658      	mov	r0, fp
 8008d10:	f000 f9bc 	bl	800908c <__multadd>
 8008d14:	4605      	mov	r5, r0
 8008d16:	e7f0      	b.n	8008cfa <_dtoa_r+0xaba>
 8008d18:	9b00      	ldr	r3, [sp, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bfcc      	ite	gt
 8008d1e:	461e      	movgt	r6, r3
 8008d20:	2601      	movle	r6, #1
 8008d22:	4456      	add	r6, sl
 8008d24:	2700      	movs	r7, #0
 8008d26:	4649      	mov	r1, r9
 8008d28:	2201      	movs	r2, #1
 8008d2a:	4658      	mov	r0, fp
 8008d2c:	f000 fb5a 	bl	80093e4 <__lshift>
 8008d30:	4621      	mov	r1, r4
 8008d32:	4681      	mov	r9, r0
 8008d34:	f000 fbc2 	bl	80094bc <__mcmp>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	dcb0      	bgt.n	8008c9e <_dtoa_r+0xa5e>
 8008d3c:	d102      	bne.n	8008d44 <_dtoa_r+0xb04>
 8008d3e:	f018 0f01 	tst.w	r8, #1
 8008d42:	d1ac      	bne.n	8008c9e <_dtoa_r+0xa5e>
 8008d44:	4633      	mov	r3, r6
 8008d46:	461e      	mov	r6, r3
 8008d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d4c:	2a30      	cmp	r2, #48	@ 0x30
 8008d4e:	d0fa      	beq.n	8008d46 <_dtoa_r+0xb06>
 8008d50:	e5c2      	b.n	80088d8 <_dtoa_r+0x698>
 8008d52:	459a      	cmp	sl, r3
 8008d54:	d1a4      	bne.n	8008ca0 <_dtoa_r+0xa60>
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	2331      	movs	r3, #49	@ 0x31
 8008d5e:	f88a 3000 	strb.w	r3, [sl]
 8008d62:	e5b9      	b.n	80088d8 <_dtoa_r+0x698>
 8008d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008dc4 <_dtoa_r+0xb84>
 8008d6a:	b11b      	cbz	r3, 8008d74 <_dtoa_r+0xb34>
 8008d6c:	f10a 0308 	add.w	r3, sl, #8
 8008d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	4650      	mov	r0, sl
 8008d76:	b019      	add	sp, #100	@ 0x64
 8008d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	f77f ae37 	ble.w	80089f2 <_dtoa_r+0x7b2>
 8008d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d88:	2001      	movs	r0, #1
 8008d8a:	e655      	b.n	8008a38 <_dtoa_r+0x7f8>
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f77f aed6 	ble.w	8008b40 <_dtoa_r+0x900>
 8008d94:	4656      	mov	r6, sl
 8008d96:	4621      	mov	r1, r4
 8008d98:	4648      	mov	r0, r9
 8008d9a:	f7ff f9c6 	bl	800812a <quorem>
 8008d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008da2:	f806 8b01 	strb.w	r8, [r6], #1
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	eba6 020a 	sub.w	r2, r6, sl
 8008dac:	4293      	cmp	r3, r2
 8008dae:	ddb3      	ble.n	8008d18 <_dtoa_r+0xad8>
 8008db0:	4649      	mov	r1, r9
 8008db2:	2300      	movs	r3, #0
 8008db4:	220a      	movs	r2, #10
 8008db6:	4658      	mov	r0, fp
 8008db8:	f000 f968 	bl	800908c <__multadd>
 8008dbc:	4681      	mov	r9, r0
 8008dbe:	e7ea      	b.n	8008d96 <_dtoa_r+0xb56>
 8008dc0:	0800a3f0 	.word	0x0800a3f0
 8008dc4:	0800a374 	.word	0x0800a374

08008dc8 <_free_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	4605      	mov	r5, r0
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	d041      	beq.n	8008e54 <_free_r+0x8c>
 8008dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd4:	1f0c      	subs	r4, r1, #4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	bfb8      	it	lt
 8008dda:	18e4      	addlt	r4, r4, r3
 8008ddc:	f000 f8e8 	bl	8008fb0 <__malloc_lock>
 8008de0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e58 <_free_r+0x90>)
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	b933      	cbnz	r3, 8008df4 <_free_r+0x2c>
 8008de6:	6063      	str	r3, [r4, #4]
 8008de8:	6014      	str	r4, [r2, #0]
 8008dea:	4628      	mov	r0, r5
 8008dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008df0:	f000 b8e4 	b.w	8008fbc <__malloc_unlock>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d908      	bls.n	8008e0a <_free_r+0x42>
 8008df8:	6820      	ldr	r0, [r4, #0]
 8008dfa:	1821      	adds	r1, r4, r0
 8008dfc:	428b      	cmp	r3, r1
 8008dfe:	bf01      	itttt	eq
 8008e00:	6819      	ldreq	r1, [r3, #0]
 8008e02:	685b      	ldreq	r3, [r3, #4]
 8008e04:	1809      	addeq	r1, r1, r0
 8008e06:	6021      	streq	r1, [r4, #0]
 8008e08:	e7ed      	b.n	8008de6 <_free_r+0x1e>
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	b10b      	cbz	r3, 8008e14 <_free_r+0x4c>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d9fa      	bls.n	8008e0a <_free_r+0x42>
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	1850      	adds	r0, r2, r1
 8008e18:	42a0      	cmp	r0, r4
 8008e1a:	d10b      	bne.n	8008e34 <_free_r+0x6c>
 8008e1c:	6820      	ldr	r0, [r4, #0]
 8008e1e:	4401      	add	r1, r0
 8008e20:	1850      	adds	r0, r2, r1
 8008e22:	4283      	cmp	r3, r0
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	d1e0      	bne.n	8008dea <_free_r+0x22>
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
 8008e2e:	4408      	add	r0, r1
 8008e30:	6010      	str	r0, [r2, #0]
 8008e32:	e7da      	b.n	8008dea <_free_r+0x22>
 8008e34:	d902      	bls.n	8008e3c <_free_r+0x74>
 8008e36:	230c      	movs	r3, #12
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	e7d6      	b.n	8008dea <_free_r+0x22>
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	1821      	adds	r1, r4, r0
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf04      	itt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	bf04      	itt	eq
 8008e4c:	1809      	addeq	r1, r1, r0
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	6054      	str	r4, [r2, #4]
 8008e52:	e7ca      	b.n	8008dea <_free_r+0x22>
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	bf00      	nop
 8008e58:	20000710 	.word	0x20000710

08008e5c <malloc>:
 8008e5c:	4b02      	ldr	r3, [pc, #8]	@ (8008e68 <malloc+0xc>)
 8008e5e:	4601      	mov	r1, r0
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	f000 b825 	b.w	8008eb0 <_malloc_r>
 8008e66:	bf00      	nop
 8008e68:	20000030 	.word	0x20000030

08008e6c <sbrk_aligned>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8008eac <sbrk_aligned+0x40>)
 8008e70:	460c      	mov	r4, r1
 8008e72:	6831      	ldr	r1, [r6, #0]
 8008e74:	4605      	mov	r5, r0
 8008e76:	b911      	cbnz	r1, 8008e7e <sbrk_aligned+0x12>
 8008e78:	f000 fe46 	bl	8009b08 <_sbrk_r>
 8008e7c:	6030      	str	r0, [r6, #0]
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 fe41 	bl	8009b08 <_sbrk_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d103      	bne.n	8008e92 <sbrk_aligned+0x26>
 8008e8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008e8e:	4620      	mov	r0, r4
 8008e90:	bd70      	pop	{r4, r5, r6, pc}
 8008e92:	1cc4      	adds	r4, r0, #3
 8008e94:	f024 0403 	bic.w	r4, r4, #3
 8008e98:	42a0      	cmp	r0, r4
 8008e9a:	d0f8      	beq.n	8008e8e <sbrk_aligned+0x22>
 8008e9c:	1a21      	subs	r1, r4, r0
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 fe32 	bl	8009b08 <_sbrk_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d1f2      	bne.n	8008e8e <sbrk_aligned+0x22>
 8008ea8:	e7ef      	b.n	8008e8a <sbrk_aligned+0x1e>
 8008eaa:	bf00      	nop
 8008eac:	2000070c 	.word	0x2000070c

08008eb0 <_malloc_r>:
 8008eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb4:	1ccd      	adds	r5, r1, #3
 8008eb6:	f025 0503 	bic.w	r5, r5, #3
 8008eba:	3508      	adds	r5, #8
 8008ebc:	2d0c      	cmp	r5, #12
 8008ebe:	bf38      	it	cc
 8008ec0:	250c      	movcc	r5, #12
 8008ec2:	2d00      	cmp	r5, #0
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	db01      	blt.n	8008ecc <_malloc_r+0x1c>
 8008ec8:	42a9      	cmp	r1, r5
 8008eca:	d904      	bls.n	8008ed6 <_malloc_r+0x26>
 8008ecc:	230c      	movs	r3, #12
 8008ece:	6033      	str	r3, [r6, #0]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fac <_malloc_r+0xfc>
 8008eda:	f000 f869 	bl	8008fb0 <__malloc_lock>
 8008ede:	f8d8 3000 	ldr.w	r3, [r8]
 8008ee2:	461c      	mov	r4, r3
 8008ee4:	bb44      	cbnz	r4, 8008f38 <_malloc_r+0x88>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff ffbf 	bl	8008e6c <sbrk_aligned>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	d158      	bne.n	8008fa6 <_malloc_r+0xf6>
 8008ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ef8:	4627      	mov	r7, r4
 8008efa:	2f00      	cmp	r7, #0
 8008efc:	d143      	bne.n	8008f86 <_malloc_r+0xd6>
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	d04b      	beq.n	8008f9a <_malloc_r+0xea>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4639      	mov	r1, r7
 8008f06:	4630      	mov	r0, r6
 8008f08:	eb04 0903 	add.w	r9, r4, r3
 8008f0c:	f000 fdfc 	bl	8009b08 <_sbrk_r>
 8008f10:	4581      	cmp	r9, r0
 8008f12:	d142      	bne.n	8008f9a <_malloc_r+0xea>
 8008f14:	6821      	ldr	r1, [r4, #0]
 8008f16:	1a6d      	subs	r5, r5, r1
 8008f18:	4629      	mov	r1, r5
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f7ff ffa6 	bl	8008e6c <sbrk_aligned>
 8008f20:	3001      	adds	r0, #1
 8008f22:	d03a      	beq.n	8008f9a <_malloc_r+0xea>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	442b      	add	r3, r5
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	bb62      	cbnz	r2, 8008f8c <_malloc_r+0xdc>
 8008f32:	f8c8 7000 	str.w	r7, [r8]
 8008f36:	e00f      	b.n	8008f58 <_malloc_r+0xa8>
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	1b52      	subs	r2, r2, r5
 8008f3c:	d420      	bmi.n	8008f80 <_malloc_r+0xd0>
 8008f3e:	2a0b      	cmp	r2, #11
 8008f40:	d917      	bls.n	8008f72 <_malloc_r+0xc2>
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	6025      	str	r5, [r4, #0]
 8008f48:	bf18      	it	ne
 8008f4a:	6059      	strne	r1, [r3, #4]
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	bf08      	it	eq
 8008f50:	f8c8 1000 	streq.w	r1, [r8]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 f82f 	bl	8008fbc <__malloc_unlock>
 8008f5e:	f104 000b 	add.w	r0, r4, #11
 8008f62:	1d23      	adds	r3, r4, #4
 8008f64:	f020 0007 	bic.w	r0, r0, #7
 8008f68:	1ac2      	subs	r2, r0, r3
 8008f6a:	bf1c      	itt	ne
 8008f6c:	1a1b      	subne	r3, r3, r0
 8008f6e:	50a3      	strne	r3, [r4, r2]
 8008f70:	e7af      	b.n	8008ed2 <_malloc_r+0x22>
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	bf0c      	ite	eq
 8008f78:	f8c8 2000 	streq.w	r2, [r8]
 8008f7c:	605a      	strne	r2, [r3, #4]
 8008f7e:	e7eb      	b.n	8008f58 <_malloc_r+0xa8>
 8008f80:	4623      	mov	r3, r4
 8008f82:	6864      	ldr	r4, [r4, #4]
 8008f84:	e7ae      	b.n	8008ee4 <_malloc_r+0x34>
 8008f86:	463c      	mov	r4, r7
 8008f88:	687f      	ldr	r7, [r7, #4]
 8008f8a:	e7b6      	b.n	8008efa <_malloc_r+0x4a>
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d1fb      	bne.n	8008f8c <_malloc_r+0xdc>
 8008f94:	2300      	movs	r3, #0
 8008f96:	6053      	str	r3, [r2, #4]
 8008f98:	e7de      	b.n	8008f58 <_malloc_r+0xa8>
 8008f9a:	230c      	movs	r3, #12
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f000 f80c 	bl	8008fbc <__malloc_unlock>
 8008fa4:	e794      	b.n	8008ed0 <_malloc_r+0x20>
 8008fa6:	6005      	str	r5, [r0, #0]
 8008fa8:	e7d6      	b.n	8008f58 <_malloc_r+0xa8>
 8008faa:	bf00      	nop
 8008fac:	20000710 	.word	0x20000710

08008fb0 <__malloc_lock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	@ (8008fb8 <__malloc_lock+0x8>)
 8008fb2:	f7ff b8b8 	b.w	8008126 <__retarget_lock_acquire_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20000708 	.word	0x20000708

08008fbc <__malloc_unlock>:
 8008fbc:	4801      	ldr	r0, [pc, #4]	@ (8008fc4 <__malloc_unlock+0x8>)
 8008fbe:	f7ff b8b3 	b.w	8008128 <__retarget_lock_release_recursive>
 8008fc2:	bf00      	nop
 8008fc4:	20000708 	.word	0x20000708

08008fc8 <_Balloc>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	69c6      	ldr	r6, [r0, #28]
 8008fcc:	4604      	mov	r4, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	b976      	cbnz	r6, 8008ff0 <_Balloc+0x28>
 8008fd2:	2010      	movs	r0, #16
 8008fd4:	f7ff ff42 	bl	8008e5c <malloc>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	61e0      	str	r0, [r4, #28]
 8008fdc:	b920      	cbnz	r0, 8008fe8 <_Balloc+0x20>
 8008fde:	4b18      	ldr	r3, [pc, #96]	@ (8009040 <_Balloc+0x78>)
 8008fe0:	4818      	ldr	r0, [pc, #96]	@ (8009044 <_Balloc+0x7c>)
 8008fe2:	216b      	movs	r1, #107	@ 0x6b
 8008fe4:	f000 fdae 	bl	8009b44 <__assert_func>
 8008fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fec:	6006      	str	r6, [r0, #0]
 8008fee:	60c6      	str	r6, [r0, #12]
 8008ff0:	69e6      	ldr	r6, [r4, #28]
 8008ff2:	68f3      	ldr	r3, [r6, #12]
 8008ff4:	b183      	cbz	r3, 8009018 <_Balloc+0x50>
 8008ff6:	69e3      	ldr	r3, [r4, #28]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ffe:	b9b8      	cbnz	r0, 8009030 <_Balloc+0x68>
 8009000:	2101      	movs	r1, #1
 8009002:	fa01 f605 	lsl.w	r6, r1, r5
 8009006:	1d72      	adds	r2, r6, #5
 8009008:	0092      	lsls	r2, r2, #2
 800900a:	4620      	mov	r0, r4
 800900c:	f000 fdb8 	bl	8009b80 <_calloc_r>
 8009010:	b160      	cbz	r0, 800902c <_Balloc+0x64>
 8009012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009016:	e00e      	b.n	8009036 <_Balloc+0x6e>
 8009018:	2221      	movs	r2, #33	@ 0x21
 800901a:	2104      	movs	r1, #4
 800901c:	4620      	mov	r0, r4
 800901e:	f000 fdaf 	bl	8009b80 <_calloc_r>
 8009022:	69e3      	ldr	r3, [r4, #28]
 8009024:	60f0      	str	r0, [r6, #12]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e4      	bne.n	8008ff6 <_Balloc+0x2e>
 800902c:	2000      	movs	r0, #0
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	6802      	ldr	r2, [r0, #0]
 8009032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009036:	2300      	movs	r3, #0
 8009038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800903c:	e7f7      	b.n	800902e <_Balloc+0x66>
 800903e:	bf00      	nop
 8009040:	0800a381 	.word	0x0800a381
 8009044:	0800a401 	.word	0x0800a401

08009048 <_Bfree>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	69c6      	ldr	r6, [r0, #28]
 800904c:	4605      	mov	r5, r0
 800904e:	460c      	mov	r4, r1
 8009050:	b976      	cbnz	r6, 8009070 <_Bfree+0x28>
 8009052:	2010      	movs	r0, #16
 8009054:	f7ff ff02 	bl	8008e5c <malloc>
 8009058:	4602      	mov	r2, r0
 800905a:	61e8      	str	r0, [r5, #28]
 800905c:	b920      	cbnz	r0, 8009068 <_Bfree+0x20>
 800905e:	4b09      	ldr	r3, [pc, #36]	@ (8009084 <_Bfree+0x3c>)
 8009060:	4809      	ldr	r0, [pc, #36]	@ (8009088 <_Bfree+0x40>)
 8009062:	218f      	movs	r1, #143	@ 0x8f
 8009064:	f000 fd6e 	bl	8009b44 <__assert_func>
 8009068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800906c:	6006      	str	r6, [r0, #0]
 800906e:	60c6      	str	r6, [r0, #12]
 8009070:	b13c      	cbz	r4, 8009082 <_Bfree+0x3a>
 8009072:	69eb      	ldr	r3, [r5, #28]
 8009074:	6862      	ldr	r2, [r4, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800907c:	6021      	str	r1, [r4, #0]
 800907e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	0800a381 	.word	0x0800a381
 8009088:	0800a401 	.word	0x0800a401

0800908c <__multadd>:
 800908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009090:	690d      	ldr	r5, [r1, #16]
 8009092:	4607      	mov	r7, r0
 8009094:	460c      	mov	r4, r1
 8009096:	461e      	mov	r6, r3
 8009098:	f101 0c14 	add.w	ip, r1, #20
 800909c:	2000      	movs	r0, #0
 800909e:	f8dc 3000 	ldr.w	r3, [ip]
 80090a2:	b299      	uxth	r1, r3
 80090a4:	fb02 6101 	mla	r1, r2, r1, r6
 80090a8:	0c1e      	lsrs	r6, r3, #16
 80090aa:	0c0b      	lsrs	r3, r1, #16
 80090ac:	fb02 3306 	mla	r3, r2, r6, r3
 80090b0:	b289      	uxth	r1, r1
 80090b2:	3001      	adds	r0, #1
 80090b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090b8:	4285      	cmp	r5, r0
 80090ba:	f84c 1b04 	str.w	r1, [ip], #4
 80090be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090c2:	dcec      	bgt.n	800909e <__multadd+0x12>
 80090c4:	b30e      	cbz	r6, 800910a <__multadd+0x7e>
 80090c6:	68a3      	ldr	r3, [r4, #8]
 80090c8:	42ab      	cmp	r3, r5
 80090ca:	dc19      	bgt.n	8009100 <__multadd+0x74>
 80090cc:	6861      	ldr	r1, [r4, #4]
 80090ce:	4638      	mov	r0, r7
 80090d0:	3101      	adds	r1, #1
 80090d2:	f7ff ff79 	bl	8008fc8 <_Balloc>
 80090d6:	4680      	mov	r8, r0
 80090d8:	b928      	cbnz	r0, 80090e6 <__multadd+0x5a>
 80090da:	4602      	mov	r2, r0
 80090dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009110 <__multadd+0x84>)
 80090de:	480d      	ldr	r0, [pc, #52]	@ (8009114 <__multadd+0x88>)
 80090e0:	21ba      	movs	r1, #186	@ 0xba
 80090e2:	f000 fd2f 	bl	8009b44 <__assert_func>
 80090e6:	6922      	ldr	r2, [r4, #16]
 80090e8:	3202      	adds	r2, #2
 80090ea:	f104 010c 	add.w	r1, r4, #12
 80090ee:	0092      	lsls	r2, r2, #2
 80090f0:	300c      	adds	r0, #12
 80090f2:	f000 fd19 	bl	8009b28 <memcpy>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7ff ffa5 	bl	8009048 <_Bfree>
 80090fe:	4644      	mov	r4, r8
 8009100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009104:	3501      	adds	r5, #1
 8009106:	615e      	str	r6, [r3, #20]
 8009108:	6125      	str	r5, [r4, #16]
 800910a:	4620      	mov	r0, r4
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	0800a3f0 	.word	0x0800a3f0
 8009114:	0800a401 	.word	0x0800a401

08009118 <__hi0bits>:
 8009118:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800911c:	4603      	mov	r3, r0
 800911e:	bf36      	itet	cc
 8009120:	0403      	lslcc	r3, r0, #16
 8009122:	2000      	movcs	r0, #0
 8009124:	2010      	movcc	r0, #16
 8009126:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800912a:	bf3c      	itt	cc
 800912c:	021b      	lslcc	r3, r3, #8
 800912e:	3008      	addcc	r0, #8
 8009130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009134:	bf3c      	itt	cc
 8009136:	011b      	lslcc	r3, r3, #4
 8009138:	3004      	addcc	r0, #4
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800913e:	bf3c      	itt	cc
 8009140:	009b      	lslcc	r3, r3, #2
 8009142:	3002      	addcc	r0, #2
 8009144:	2b00      	cmp	r3, #0
 8009146:	db05      	blt.n	8009154 <__hi0bits+0x3c>
 8009148:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800914c:	f100 0001 	add.w	r0, r0, #1
 8009150:	bf08      	it	eq
 8009152:	2020      	moveq	r0, #32
 8009154:	4770      	bx	lr

08009156 <__lo0bits>:
 8009156:	6803      	ldr	r3, [r0, #0]
 8009158:	4602      	mov	r2, r0
 800915a:	f013 0007 	ands.w	r0, r3, #7
 800915e:	d00b      	beq.n	8009178 <__lo0bits+0x22>
 8009160:	07d9      	lsls	r1, r3, #31
 8009162:	d421      	bmi.n	80091a8 <__lo0bits+0x52>
 8009164:	0798      	lsls	r0, r3, #30
 8009166:	bf49      	itett	mi
 8009168:	085b      	lsrmi	r3, r3, #1
 800916a:	089b      	lsrpl	r3, r3, #2
 800916c:	2001      	movmi	r0, #1
 800916e:	6013      	strmi	r3, [r2, #0]
 8009170:	bf5c      	itt	pl
 8009172:	6013      	strpl	r3, [r2, #0]
 8009174:	2002      	movpl	r0, #2
 8009176:	4770      	bx	lr
 8009178:	b299      	uxth	r1, r3
 800917a:	b909      	cbnz	r1, 8009180 <__lo0bits+0x2a>
 800917c:	0c1b      	lsrs	r3, r3, #16
 800917e:	2010      	movs	r0, #16
 8009180:	b2d9      	uxtb	r1, r3
 8009182:	b909      	cbnz	r1, 8009188 <__lo0bits+0x32>
 8009184:	3008      	adds	r0, #8
 8009186:	0a1b      	lsrs	r3, r3, #8
 8009188:	0719      	lsls	r1, r3, #28
 800918a:	bf04      	itt	eq
 800918c:	091b      	lsreq	r3, r3, #4
 800918e:	3004      	addeq	r0, #4
 8009190:	0799      	lsls	r1, r3, #30
 8009192:	bf04      	itt	eq
 8009194:	089b      	lsreq	r3, r3, #2
 8009196:	3002      	addeq	r0, #2
 8009198:	07d9      	lsls	r1, r3, #31
 800919a:	d403      	bmi.n	80091a4 <__lo0bits+0x4e>
 800919c:	085b      	lsrs	r3, r3, #1
 800919e:	f100 0001 	add.w	r0, r0, #1
 80091a2:	d003      	beq.n	80091ac <__lo0bits+0x56>
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	4770      	bx	lr
 80091a8:	2000      	movs	r0, #0
 80091aa:	4770      	bx	lr
 80091ac:	2020      	movs	r0, #32
 80091ae:	4770      	bx	lr

080091b0 <__i2b>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	460c      	mov	r4, r1
 80091b4:	2101      	movs	r1, #1
 80091b6:	f7ff ff07 	bl	8008fc8 <_Balloc>
 80091ba:	4602      	mov	r2, r0
 80091bc:	b928      	cbnz	r0, 80091ca <__i2b+0x1a>
 80091be:	4b05      	ldr	r3, [pc, #20]	@ (80091d4 <__i2b+0x24>)
 80091c0:	4805      	ldr	r0, [pc, #20]	@ (80091d8 <__i2b+0x28>)
 80091c2:	f240 1145 	movw	r1, #325	@ 0x145
 80091c6:	f000 fcbd 	bl	8009b44 <__assert_func>
 80091ca:	2301      	movs	r3, #1
 80091cc:	6144      	str	r4, [r0, #20]
 80091ce:	6103      	str	r3, [r0, #16]
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	bf00      	nop
 80091d4:	0800a3f0 	.word	0x0800a3f0
 80091d8:	0800a401 	.word	0x0800a401

080091dc <__multiply>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	4614      	mov	r4, r2
 80091e2:	690a      	ldr	r2, [r1, #16]
 80091e4:	6923      	ldr	r3, [r4, #16]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	bfa8      	it	ge
 80091ea:	4623      	movge	r3, r4
 80091ec:	460f      	mov	r7, r1
 80091ee:	bfa4      	itt	ge
 80091f0:	460c      	movge	r4, r1
 80091f2:	461f      	movge	r7, r3
 80091f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091fc:	68a3      	ldr	r3, [r4, #8]
 80091fe:	6861      	ldr	r1, [r4, #4]
 8009200:	eb0a 0609 	add.w	r6, sl, r9
 8009204:	42b3      	cmp	r3, r6
 8009206:	b085      	sub	sp, #20
 8009208:	bfb8      	it	lt
 800920a:	3101      	addlt	r1, #1
 800920c:	f7ff fedc 	bl	8008fc8 <_Balloc>
 8009210:	b930      	cbnz	r0, 8009220 <__multiply+0x44>
 8009212:	4602      	mov	r2, r0
 8009214:	4b44      	ldr	r3, [pc, #272]	@ (8009328 <__multiply+0x14c>)
 8009216:	4845      	ldr	r0, [pc, #276]	@ (800932c <__multiply+0x150>)
 8009218:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800921c:	f000 fc92 	bl	8009b44 <__assert_func>
 8009220:	f100 0514 	add.w	r5, r0, #20
 8009224:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009228:	462b      	mov	r3, r5
 800922a:	2200      	movs	r2, #0
 800922c:	4543      	cmp	r3, r8
 800922e:	d321      	bcc.n	8009274 <__multiply+0x98>
 8009230:	f107 0114 	add.w	r1, r7, #20
 8009234:	f104 0214 	add.w	r2, r4, #20
 8009238:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800923c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009240:	9302      	str	r3, [sp, #8]
 8009242:	1b13      	subs	r3, r2, r4
 8009244:	3b15      	subs	r3, #21
 8009246:	f023 0303 	bic.w	r3, r3, #3
 800924a:	3304      	adds	r3, #4
 800924c:	f104 0715 	add.w	r7, r4, #21
 8009250:	42ba      	cmp	r2, r7
 8009252:	bf38      	it	cc
 8009254:	2304      	movcc	r3, #4
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	9b02      	ldr	r3, [sp, #8]
 800925a:	9103      	str	r1, [sp, #12]
 800925c:	428b      	cmp	r3, r1
 800925e:	d80c      	bhi.n	800927a <__multiply+0x9e>
 8009260:	2e00      	cmp	r6, #0
 8009262:	dd03      	ble.n	800926c <__multiply+0x90>
 8009264:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009268:	2b00      	cmp	r3, #0
 800926a:	d05b      	beq.n	8009324 <__multiply+0x148>
 800926c:	6106      	str	r6, [r0, #16]
 800926e:	b005      	add	sp, #20
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	f843 2b04 	str.w	r2, [r3], #4
 8009278:	e7d8      	b.n	800922c <__multiply+0x50>
 800927a:	f8b1 a000 	ldrh.w	sl, [r1]
 800927e:	f1ba 0f00 	cmp.w	sl, #0
 8009282:	d024      	beq.n	80092ce <__multiply+0xf2>
 8009284:	f104 0e14 	add.w	lr, r4, #20
 8009288:	46a9      	mov	r9, r5
 800928a:	f04f 0c00 	mov.w	ip, #0
 800928e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009292:	f8d9 3000 	ldr.w	r3, [r9]
 8009296:	fa1f fb87 	uxth.w	fp, r7
 800929a:	b29b      	uxth	r3, r3
 800929c:	fb0a 330b 	mla	r3, sl, fp, r3
 80092a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80092a4:	f8d9 7000 	ldr.w	r7, [r9]
 80092a8:	4463      	add	r3, ip
 80092aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80092b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092bc:	4572      	cmp	r2, lr
 80092be:	f849 3b04 	str.w	r3, [r9], #4
 80092c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092c6:	d8e2      	bhi.n	800928e <__multiply+0xb2>
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	f845 c003 	str.w	ip, [r5, r3]
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092d4:	3104      	adds	r1, #4
 80092d6:	f1b9 0f00 	cmp.w	r9, #0
 80092da:	d021      	beq.n	8009320 <__multiply+0x144>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	f104 0c14 	add.w	ip, r4, #20
 80092e2:	46ae      	mov	lr, r5
 80092e4:	f04f 0a00 	mov.w	sl, #0
 80092e8:	f8bc b000 	ldrh.w	fp, [ip]
 80092ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092f0:	fb09 770b 	mla	r7, r9, fp, r7
 80092f4:	4457      	add	r7, sl
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092fc:	f84e 3b04 	str.w	r3, [lr], #4
 8009300:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009308:	f8be 3000 	ldrh.w	r3, [lr]
 800930c:	fb09 330a 	mla	r3, r9, sl, r3
 8009310:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009314:	4562      	cmp	r2, ip
 8009316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800931a:	d8e5      	bhi.n	80092e8 <__multiply+0x10c>
 800931c:	9f01      	ldr	r7, [sp, #4]
 800931e:	51eb      	str	r3, [r5, r7]
 8009320:	3504      	adds	r5, #4
 8009322:	e799      	b.n	8009258 <__multiply+0x7c>
 8009324:	3e01      	subs	r6, #1
 8009326:	e79b      	b.n	8009260 <__multiply+0x84>
 8009328:	0800a3f0 	.word	0x0800a3f0
 800932c:	0800a401 	.word	0x0800a401

08009330 <__pow5mult>:
 8009330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009334:	4615      	mov	r5, r2
 8009336:	f012 0203 	ands.w	r2, r2, #3
 800933a:	4607      	mov	r7, r0
 800933c:	460e      	mov	r6, r1
 800933e:	d007      	beq.n	8009350 <__pow5mult+0x20>
 8009340:	4c25      	ldr	r4, [pc, #148]	@ (80093d8 <__pow5mult+0xa8>)
 8009342:	3a01      	subs	r2, #1
 8009344:	2300      	movs	r3, #0
 8009346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800934a:	f7ff fe9f 	bl	800908c <__multadd>
 800934e:	4606      	mov	r6, r0
 8009350:	10ad      	asrs	r5, r5, #2
 8009352:	d03d      	beq.n	80093d0 <__pow5mult+0xa0>
 8009354:	69fc      	ldr	r4, [r7, #28]
 8009356:	b97c      	cbnz	r4, 8009378 <__pow5mult+0x48>
 8009358:	2010      	movs	r0, #16
 800935a:	f7ff fd7f 	bl	8008e5c <malloc>
 800935e:	4602      	mov	r2, r0
 8009360:	61f8      	str	r0, [r7, #28]
 8009362:	b928      	cbnz	r0, 8009370 <__pow5mult+0x40>
 8009364:	4b1d      	ldr	r3, [pc, #116]	@ (80093dc <__pow5mult+0xac>)
 8009366:	481e      	ldr	r0, [pc, #120]	@ (80093e0 <__pow5mult+0xb0>)
 8009368:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800936c:	f000 fbea 	bl	8009b44 <__assert_func>
 8009370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009374:	6004      	str	r4, [r0, #0]
 8009376:	60c4      	str	r4, [r0, #12]
 8009378:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800937c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009380:	b94c      	cbnz	r4, 8009396 <__pow5mult+0x66>
 8009382:	f240 2171 	movw	r1, #625	@ 0x271
 8009386:	4638      	mov	r0, r7
 8009388:	f7ff ff12 	bl	80091b0 <__i2b>
 800938c:	2300      	movs	r3, #0
 800938e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009392:	4604      	mov	r4, r0
 8009394:	6003      	str	r3, [r0, #0]
 8009396:	f04f 0900 	mov.w	r9, #0
 800939a:	07eb      	lsls	r3, r5, #31
 800939c:	d50a      	bpl.n	80093b4 <__pow5mult+0x84>
 800939e:	4631      	mov	r1, r6
 80093a0:	4622      	mov	r2, r4
 80093a2:	4638      	mov	r0, r7
 80093a4:	f7ff ff1a 	bl	80091dc <__multiply>
 80093a8:	4631      	mov	r1, r6
 80093aa:	4680      	mov	r8, r0
 80093ac:	4638      	mov	r0, r7
 80093ae:	f7ff fe4b 	bl	8009048 <_Bfree>
 80093b2:	4646      	mov	r6, r8
 80093b4:	106d      	asrs	r5, r5, #1
 80093b6:	d00b      	beq.n	80093d0 <__pow5mult+0xa0>
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	b938      	cbnz	r0, 80093cc <__pow5mult+0x9c>
 80093bc:	4622      	mov	r2, r4
 80093be:	4621      	mov	r1, r4
 80093c0:	4638      	mov	r0, r7
 80093c2:	f7ff ff0b 	bl	80091dc <__multiply>
 80093c6:	6020      	str	r0, [r4, #0]
 80093c8:	f8c0 9000 	str.w	r9, [r0]
 80093cc:	4604      	mov	r4, r0
 80093ce:	e7e4      	b.n	800939a <__pow5mult+0x6a>
 80093d0:	4630      	mov	r0, r6
 80093d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d6:	bf00      	nop
 80093d8:	0800a45c 	.word	0x0800a45c
 80093dc:	0800a381 	.word	0x0800a381
 80093e0:	0800a401 	.word	0x0800a401

080093e4 <__lshift>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	460c      	mov	r4, r1
 80093ea:	6849      	ldr	r1, [r1, #4]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093f2:	68a3      	ldr	r3, [r4, #8]
 80093f4:	4607      	mov	r7, r0
 80093f6:	4691      	mov	r9, r2
 80093f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093fc:	f108 0601 	add.w	r6, r8, #1
 8009400:	42b3      	cmp	r3, r6
 8009402:	db0b      	blt.n	800941c <__lshift+0x38>
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff fddf 	bl	8008fc8 <_Balloc>
 800940a:	4605      	mov	r5, r0
 800940c:	b948      	cbnz	r0, 8009422 <__lshift+0x3e>
 800940e:	4602      	mov	r2, r0
 8009410:	4b28      	ldr	r3, [pc, #160]	@ (80094b4 <__lshift+0xd0>)
 8009412:	4829      	ldr	r0, [pc, #164]	@ (80094b8 <__lshift+0xd4>)
 8009414:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009418:	f000 fb94 	bl	8009b44 <__assert_func>
 800941c:	3101      	adds	r1, #1
 800941e:	005b      	lsls	r3, r3, #1
 8009420:	e7ee      	b.n	8009400 <__lshift+0x1c>
 8009422:	2300      	movs	r3, #0
 8009424:	f100 0114 	add.w	r1, r0, #20
 8009428:	f100 0210 	add.w	r2, r0, #16
 800942c:	4618      	mov	r0, r3
 800942e:	4553      	cmp	r3, sl
 8009430:	db33      	blt.n	800949a <__lshift+0xb6>
 8009432:	6920      	ldr	r0, [r4, #16]
 8009434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009438:	f104 0314 	add.w	r3, r4, #20
 800943c:	f019 091f 	ands.w	r9, r9, #31
 8009440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009444:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009448:	d02b      	beq.n	80094a2 <__lshift+0xbe>
 800944a:	f1c9 0e20 	rsb	lr, r9, #32
 800944e:	468a      	mov	sl, r1
 8009450:	2200      	movs	r2, #0
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	fa00 f009 	lsl.w	r0, r0, r9
 8009458:	4310      	orrs	r0, r2
 800945a:	f84a 0b04 	str.w	r0, [sl], #4
 800945e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009462:	459c      	cmp	ip, r3
 8009464:	fa22 f20e 	lsr.w	r2, r2, lr
 8009468:	d8f3      	bhi.n	8009452 <__lshift+0x6e>
 800946a:	ebac 0304 	sub.w	r3, ip, r4
 800946e:	3b15      	subs	r3, #21
 8009470:	f023 0303 	bic.w	r3, r3, #3
 8009474:	3304      	adds	r3, #4
 8009476:	f104 0015 	add.w	r0, r4, #21
 800947a:	4584      	cmp	ip, r0
 800947c:	bf38      	it	cc
 800947e:	2304      	movcc	r3, #4
 8009480:	50ca      	str	r2, [r1, r3]
 8009482:	b10a      	cbz	r2, 8009488 <__lshift+0xa4>
 8009484:	f108 0602 	add.w	r6, r8, #2
 8009488:	3e01      	subs	r6, #1
 800948a:	4638      	mov	r0, r7
 800948c:	612e      	str	r6, [r5, #16]
 800948e:	4621      	mov	r1, r4
 8009490:	f7ff fdda 	bl	8009048 <_Bfree>
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	f842 0f04 	str.w	r0, [r2, #4]!
 800949e:	3301      	adds	r3, #1
 80094a0:	e7c5      	b.n	800942e <__lshift+0x4a>
 80094a2:	3904      	subs	r1, #4
 80094a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80094ac:	459c      	cmp	ip, r3
 80094ae:	d8f9      	bhi.n	80094a4 <__lshift+0xc0>
 80094b0:	e7ea      	b.n	8009488 <__lshift+0xa4>
 80094b2:	bf00      	nop
 80094b4:	0800a3f0 	.word	0x0800a3f0
 80094b8:	0800a401 	.word	0x0800a401

080094bc <__mcmp>:
 80094bc:	690a      	ldr	r2, [r1, #16]
 80094be:	4603      	mov	r3, r0
 80094c0:	6900      	ldr	r0, [r0, #16]
 80094c2:	1a80      	subs	r0, r0, r2
 80094c4:	b530      	push	{r4, r5, lr}
 80094c6:	d10e      	bne.n	80094e6 <__mcmp+0x2a>
 80094c8:	3314      	adds	r3, #20
 80094ca:	3114      	adds	r1, #20
 80094cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094dc:	4295      	cmp	r5, r2
 80094de:	d003      	beq.n	80094e8 <__mcmp+0x2c>
 80094e0:	d205      	bcs.n	80094ee <__mcmp+0x32>
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094e6:	bd30      	pop	{r4, r5, pc}
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	d3f3      	bcc.n	80094d4 <__mcmp+0x18>
 80094ec:	e7fb      	b.n	80094e6 <__mcmp+0x2a>
 80094ee:	2001      	movs	r0, #1
 80094f0:	e7f9      	b.n	80094e6 <__mcmp+0x2a>
	...

080094f4 <__mdiff>:
 80094f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f8:	4689      	mov	r9, r1
 80094fa:	4606      	mov	r6, r0
 80094fc:	4611      	mov	r1, r2
 80094fe:	4648      	mov	r0, r9
 8009500:	4614      	mov	r4, r2
 8009502:	f7ff ffdb 	bl	80094bc <__mcmp>
 8009506:	1e05      	subs	r5, r0, #0
 8009508:	d112      	bne.n	8009530 <__mdiff+0x3c>
 800950a:	4629      	mov	r1, r5
 800950c:	4630      	mov	r0, r6
 800950e:	f7ff fd5b 	bl	8008fc8 <_Balloc>
 8009512:	4602      	mov	r2, r0
 8009514:	b928      	cbnz	r0, 8009522 <__mdiff+0x2e>
 8009516:	4b3f      	ldr	r3, [pc, #252]	@ (8009614 <__mdiff+0x120>)
 8009518:	f240 2137 	movw	r1, #567	@ 0x237
 800951c:	483e      	ldr	r0, [pc, #248]	@ (8009618 <__mdiff+0x124>)
 800951e:	f000 fb11 	bl	8009b44 <__assert_func>
 8009522:	2301      	movs	r3, #1
 8009524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009528:	4610      	mov	r0, r2
 800952a:	b003      	add	sp, #12
 800952c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009530:	bfbc      	itt	lt
 8009532:	464b      	movlt	r3, r9
 8009534:	46a1      	movlt	r9, r4
 8009536:	4630      	mov	r0, r6
 8009538:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800953c:	bfba      	itte	lt
 800953e:	461c      	movlt	r4, r3
 8009540:	2501      	movlt	r5, #1
 8009542:	2500      	movge	r5, #0
 8009544:	f7ff fd40 	bl	8008fc8 <_Balloc>
 8009548:	4602      	mov	r2, r0
 800954a:	b918      	cbnz	r0, 8009554 <__mdiff+0x60>
 800954c:	4b31      	ldr	r3, [pc, #196]	@ (8009614 <__mdiff+0x120>)
 800954e:	f240 2145 	movw	r1, #581	@ 0x245
 8009552:	e7e3      	b.n	800951c <__mdiff+0x28>
 8009554:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009558:	6926      	ldr	r6, [r4, #16]
 800955a:	60c5      	str	r5, [r0, #12]
 800955c:	f109 0310 	add.w	r3, r9, #16
 8009560:	f109 0514 	add.w	r5, r9, #20
 8009564:	f104 0e14 	add.w	lr, r4, #20
 8009568:	f100 0b14 	add.w	fp, r0, #20
 800956c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009570:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	46d9      	mov	r9, fp
 8009578:	f04f 0c00 	mov.w	ip, #0
 800957c:	9b01      	ldr	r3, [sp, #4]
 800957e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009582:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	fa1f f38a 	uxth.w	r3, sl
 800958c:	4619      	mov	r1, r3
 800958e:	b283      	uxth	r3, r0
 8009590:	1acb      	subs	r3, r1, r3
 8009592:	0c00      	lsrs	r0, r0, #16
 8009594:	4463      	add	r3, ip
 8009596:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800959a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800959e:	b29b      	uxth	r3, r3
 80095a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80095a4:	4576      	cmp	r6, lr
 80095a6:	f849 3b04 	str.w	r3, [r9], #4
 80095aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095ae:	d8e5      	bhi.n	800957c <__mdiff+0x88>
 80095b0:	1b33      	subs	r3, r6, r4
 80095b2:	3b15      	subs	r3, #21
 80095b4:	f023 0303 	bic.w	r3, r3, #3
 80095b8:	3415      	adds	r4, #21
 80095ba:	3304      	adds	r3, #4
 80095bc:	42a6      	cmp	r6, r4
 80095be:	bf38      	it	cc
 80095c0:	2304      	movcc	r3, #4
 80095c2:	441d      	add	r5, r3
 80095c4:	445b      	add	r3, fp
 80095c6:	461e      	mov	r6, r3
 80095c8:	462c      	mov	r4, r5
 80095ca:	4544      	cmp	r4, r8
 80095cc:	d30e      	bcc.n	80095ec <__mdiff+0xf8>
 80095ce:	f108 0103 	add.w	r1, r8, #3
 80095d2:	1b49      	subs	r1, r1, r5
 80095d4:	f021 0103 	bic.w	r1, r1, #3
 80095d8:	3d03      	subs	r5, #3
 80095da:	45a8      	cmp	r8, r5
 80095dc:	bf38      	it	cc
 80095de:	2100      	movcc	r1, #0
 80095e0:	440b      	add	r3, r1
 80095e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095e6:	b191      	cbz	r1, 800960e <__mdiff+0x11a>
 80095e8:	6117      	str	r7, [r2, #16]
 80095ea:	e79d      	b.n	8009528 <__mdiff+0x34>
 80095ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80095f0:	46e6      	mov	lr, ip
 80095f2:	0c08      	lsrs	r0, r1, #16
 80095f4:	fa1c fc81 	uxtah	ip, ip, r1
 80095f8:	4471      	add	r1, lr
 80095fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095fe:	b289      	uxth	r1, r1
 8009600:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009604:	f846 1b04 	str.w	r1, [r6], #4
 8009608:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800960c:	e7dd      	b.n	80095ca <__mdiff+0xd6>
 800960e:	3f01      	subs	r7, #1
 8009610:	e7e7      	b.n	80095e2 <__mdiff+0xee>
 8009612:	bf00      	nop
 8009614:	0800a3f0 	.word	0x0800a3f0
 8009618:	0800a401 	.word	0x0800a401

0800961c <__d2b>:
 800961c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009620:	460f      	mov	r7, r1
 8009622:	2101      	movs	r1, #1
 8009624:	ec59 8b10 	vmov	r8, r9, d0
 8009628:	4616      	mov	r6, r2
 800962a:	f7ff fccd 	bl	8008fc8 <_Balloc>
 800962e:	4604      	mov	r4, r0
 8009630:	b930      	cbnz	r0, 8009640 <__d2b+0x24>
 8009632:	4602      	mov	r2, r0
 8009634:	4b23      	ldr	r3, [pc, #140]	@ (80096c4 <__d2b+0xa8>)
 8009636:	4824      	ldr	r0, [pc, #144]	@ (80096c8 <__d2b+0xac>)
 8009638:	f240 310f 	movw	r1, #783	@ 0x30f
 800963c:	f000 fa82 	bl	8009b44 <__assert_func>
 8009640:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009648:	b10d      	cbz	r5, 800964e <__d2b+0x32>
 800964a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	f1b8 0300 	subs.w	r3, r8, #0
 8009654:	d023      	beq.n	800969e <__d2b+0x82>
 8009656:	4668      	mov	r0, sp
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	f7ff fd7c 	bl	8009156 <__lo0bits>
 800965e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009662:	b1d0      	cbz	r0, 800969a <__d2b+0x7e>
 8009664:	f1c0 0320 	rsb	r3, r0, #32
 8009668:	fa02 f303 	lsl.w	r3, r2, r3
 800966c:	430b      	orrs	r3, r1
 800966e:	40c2      	lsrs	r2, r0
 8009670:	6163      	str	r3, [r4, #20]
 8009672:	9201      	str	r2, [sp, #4]
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	61a3      	str	r3, [r4, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	bf0c      	ite	eq
 800967c:	2201      	moveq	r2, #1
 800967e:	2202      	movne	r2, #2
 8009680:	6122      	str	r2, [r4, #16]
 8009682:	b1a5      	cbz	r5, 80096ae <__d2b+0x92>
 8009684:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009688:	4405      	add	r5, r0
 800968a:	603d      	str	r5, [r7, #0]
 800968c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009690:	6030      	str	r0, [r6, #0]
 8009692:	4620      	mov	r0, r4
 8009694:	b003      	add	sp, #12
 8009696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800969a:	6161      	str	r1, [r4, #20]
 800969c:	e7ea      	b.n	8009674 <__d2b+0x58>
 800969e:	a801      	add	r0, sp, #4
 80096a0:	f7ff fd59 	bl	8009156 <__lo0bits>
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	6163      	str	r3, [r4, #20]
 80096a8:	3020      	adds	r0, #32
 80096aa:	2201      	movs	r2, #1
 80096ac:	e7e8      	b.n	8009680 <__d2b+0x64>
 80096ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096b6:	6038      	str	r0, [r7, #0]
 80096b8:	6918      	ldr	r0, [r3, #16]
 80096ba:	f7ff fd2d 	bl	8009118 <__hi0bits>
 80096be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096c2:	e7e5      	b.n	8009690 <__d2b+0x74>
 80096c4:	0800a3f0 	.word	0x0800a3f0
 80096c8:	0800a401 	.word	0x0800a401

080096cc <__ssputs_r>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	688e      	ldr	r6, [r1, #8]
 80096d2:	461f      	mov	r7, r3
 80096d4:	42be      	cmp	r6, r7
 80096d6:	680b      	ldr	r3, [r1, #0]
 80096d8:	4682      	mov	sl, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	4690      	mov	r8, r2
 80096de:	d82d      	bhi.n	800973c <__ssputs_r+0x70>
 80096e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096e8:	d026      	beq.n	8009738 <__ssputs_r+0x6c>
 80096ea:	6965      	ldr	r5, [r4, #20]
 80096ec:	6909      	ldr	r1, [r1, #16]
 80096ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096f2:	eba3 0901 	sub.w	r9, r3, r1
 80096f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096fa:	1c7b      	adds	r3, r7, #1
 80096fc:	444b      	add	r3, r9
 80096fe:	106d      	asrs	r5, r5, #1
 8009700:	429d      	cmp	r5, r3
 8009702:	bf38      	it	cc
 8009704:	461d      	movcc	r5, r3
 8009706:	0553      	lsls	r3, r2, #21
 8009708:	d527      	bpl.n	800975a <__ssputs_r+0x8e>
 800970a:	4629      	mov	r1, r5
 800970c:	f7ff fbd0 	bl	8008eb0 <_malloc_r>
 8009710:	4606      	mov	r6, r0
 8009712:	b360      	cbz	r0, 800976e <__ssputs_r+0xa2>
 8009714:	6921      	ldr	r1, [r4, #16]
 8009716:	464a      	mov	r2, r9
 8009718:	f000 fa06 	bl	8009b28 <memcpy>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	6126      	str	r6, [r4, #16]
 800972a:	6165      	str	r5, [r4, #20]
 800972c:	444e      	add	r6, r9
 800972e:	eba5 0509 	sub.w	r5, r5, r9
 8009732:	6026      	str	r6, [r4, #0]
 8009734:	60a5      	str	r5, [r4, #8]
 8009736:	463e      	mov	r6, r7
 8009738:	42be      	cmp	r6, r7
 800973a:	d900      	bls.n	800973e <__ssputs_r+0x72>
 800973c:	463e      	mov	r6, r7
 800973e:	6820      	ldr	r0, [r4, #0]
 8009740:	4632      	mov	r2, r6
 8009742:	4641      	mov	r1, r8
 8009744:	f000 f9c6 	bl	8009ad4 <memmove>
 8009748:	68a3      	ldr	r3, [r4, #8]
 800974a:	1b9b      	subs	r3, r3, r6
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	4433      	add	r3, r6
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	2000      	movs	r0, #0
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	462a      	mov	r2, r5
 800975c:	f000 fa36 	bl	8009bcc <_realloc_r>
 8009760:	4606      	mov	r6, r0
 8009762:	2800      	cmp	r0, #0
 8009764:	d1e0      	bne.n	8009728 <__ssputs_r+0x5c>
 8009766:	6921      	ldr	r1, [r4, #16]
 8009768:	4650      	mov	r0, sl
 800976a:	f7ff fb2d 	bl	8008dc8 <_free_r>
 800976e:	230c      	movs	r3, #12
 8009770:	f8ca 3000 	str.w	r3, [sl]
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009780:	e7e9      	b.n	8009756 <__ssputs_r+0x8a>
	...

08009784 <_svfiprintf_r>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	4698      	mov	r8, r3
 800978a:	898b      	ldrh	r3, [r1, #12]
 800978c:	061b      	lsls	r3, r3, #24
 800978e:	b09d      	sub	sp, #116	@ 0x74
 8009790:	4607      	mov	r7, r0
 8009792:	460d      	mov	r5, r1
 8009794:	4614      	mov	r4, r2
 8009796:	d510      	bpl.n	80097ba <_svfiprintf_r+0x36>
 8009798:	690b      	ldr	r3, [r1, #16]
 800979a:	b973      	cbnz	r3, 80097ba <_svfiprintf_r+0x36>
 800979c:	2140      	movs	r1, #64	@ 0x40
 800979e:	f7ff fb87 	bl	8008eb0 <_malloc_r>
 80097a2:	6028      	str	r0, [r5, #0]
 80097a4:	6128      	str	r0, [r5, #16]
 80097a6:	b930      	cbnz	r0, 80097b6 <_svfiprintf_r+0x32>
 80097a8:	230c      	movs	r3, #12
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097b0:	b01d      	add	sp, #116	@ 0x74
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	2340      	movs	r3, #64	@ 0x40
 80097b8:	616b      	str	r3, [r5, #20]
 80097ba:	2300      	movs	r3, #0
 80097bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097be:	2320      	movs	r3, #32
 80097c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097c8:	2330      	movs	r3, #48	@ 0x30
 80097ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009968 <_svfiprintf_r+0x1e4>
 80097ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097d2:	f04f 0901 	mov.w	r9, #1
 80097d6:	4623      	mov	r3, r4
 80097d8:	469a      	mov	sl, r3
 80097da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097de:	b10a      	cbz	r2, 80097e4 <_svfiprintf_r+0x60>
 80097e0:	2a25      	cmp	r2, #37	@ 0x25
 80097e2:	d1f9      	bne.n	80097d8 <_svfiprintf_r+0x54>
 80097e4:	ebba 0b04 	subs.w	fp, sl, r4
 80097e8:	d00b      	beq.n	8009802 <_svfiprintf_r+0x7e>
 80097ea:	465b      	mov	r3, fp
 80097ec:	4622      	mov	r2, r4
 80097ee:	4629      	mov	r1, r5
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff ff6b 	bl	80096cc <__ssputs_r>
 80097f6:	3001      	adds	r0, #1
 80097f8:	f000 80a7 	beq.w	800994a <_svfiprintf_r+0x1c6>
 80097fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097fe:	445a      	add	r2, fp
 8009800:	9209      	str	r2, [sp, #36]	@ 0x24
 8009802:	f89a 3000 	ldrb.w	r3, [sl]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 809f 	beq.w	800994a <_svfiprintf_r+0x1c6>
 800980c:	2300      	movs	r3, #0
 800980e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009816:	f10a 0a01 	add.w	sl, sl, #1
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	9307      	str	r3, [sp, #28]
 800981e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009822:	931a      	str	r3, [sp, #104]	@ 0x68
 8009824:	4654      	mov	r4, sl
 8009826:	2205      	movs	r2, #5
 8009828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982c:	484e      	ldr	r0, [pc, #312]	@ (8009968 <_svfiprintf_r+0x1e4>)
 800982e:	f7f6 fcf7 	bl	8000220 <memchr>
 8009832:	9a04      	ldr	r2, [sp, #16]
 8009834:	b9d8      	cbnz	r0, 800986e <_svfiprintf_r+0xea>
 8009836:	06d0      	lsls	r0, r2, #27
 8009838:	bf44      	itt	mi
 800983a:	2320      	movmi	r3, #32
 800983c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009840:	0711      	lsls	r1, r2, #28
 8009842:	bf44      	itt	mi
 8009844:	232b      	movmi	r3, #43	@ 0x2b
 8009846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800984a:	f89a 3000 	ldrb.w	r3, [sl]
 800984e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009850:	d015      	beq.n	800987e <_svfiprintf_r+0xfa>
 8009852:	9a07      	ldr	r2, [sp, #28]
 8009854:	4654      	mov	r4, sl
 8009856:	2000      	movs	r0, #0
 8009858:	f04f 0c0a 	mov.w	ip, #10
 800985c:	4621      	mov	r1, r4
 800985e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009862:	3b30      	subs	r3, #48	@ 0x30
 8009864:	2b09      	cmp	r3, #9
 8009866:	d94b      	bls.n	8009900 <_svfiprintf_r+0x17c>
 8009868:	b1b0      	cbz	r0, 8009898 <_svfiprintf_r+0x114>
 800986a:	9207      	str	r2, [sp, #28]
 800986c:	e014      	b.n	8009898 <_svfiprintf_r+0x114>
 800986e:	eba0 0308 	sub.w	r3, r0, r8
 8009872:	fa09 f303 	lsl.w	r3, r9, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	46a2      	mov	sl, r4
 800987c:	e7d2      	b.n	8009824 <_svfiprintf_r+0xa0>
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	1d19      	adds	r1, r3, #4
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	9103      	str	r1, [sp, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfbb      	ittet	lt
 800988a:	425b      	neglt	r3, r3
 800988c:	f042 0202 	orrlt.w	r2, r2, #2
 8009890:	9307      	strge	r3, [sp, #28]
 8009892:	9307      	strlt	r3, [sp, #28]
 8009894:	bfb8      	it	lt
 8009896:	9204      	strlt	r2, [sp, #16]
 8009898:	7823      	ldrb	r3, [r4, #0]
 800989a:	2b2e      	cmp	r3, #46	@ 0x2e
 800989c:	d10a      	bne.n	80098b4 <_svfiprintf_r+0x130>
 800989e:	7863      	ldrb	r3, [r4, #1]
 80098a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80098a2:	d132      	bne.n	800990a <_svfiprintf_r+0x186>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	1d1a      	adds	r2, r3, #4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	9203      	str	r2, [sp, #12]
 80098ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098b0:	3402      	adds	r4, #2
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009978 <_svfiprintf_r+0x1f4>
 80098b8:	7821      	ldrb	r1, [r4, #0]
 80098ba:	2203      	movs	r2, #3
 80098bc:	4650      	mov	r0, sl
 80098be:	f7f6 fcaf 	bl	8000220 <memchr>
 80098c2:	b138      	cbz	r0, 80098d4 <_svfiprintf_r+0x150>
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	eba0 000a 	sub.w	r0, r0, sl
 80098ca:	2240      	movs	r2, #64	@ 0x40
 80098cc:	4082      	lsls	r2, r0
 80098ce:	4313      	orrs	r3, r2
 80098d0:	3401      	adds	r4, #1
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d8:	4824      	ldr	r0, [pc, #144]	@ (800996c <_svfiprintf_r+0x1e8>)
 80098da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098de:	2206      	movs	r2, #6
 80098e0:	f7f6 fc9e 	bl	8000220 <memchr>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d036      	beq.n	8009956 <_svfiprintf_r+0x1d2>
 80098e8:	4b21      	ldr	r3, [pc, #132]	@ (8009970 <_svfiprintf_r+0x1ec>)
 80098ea:	bb1b      	cbnz	r3, 8009934 <_svfiprintf_r+0x1b0>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	3307      	adds	r3, #7
 80098f0:	f023 0307 	bic.w	r3, r3, #7
 80098f4:	3308      	adds	r3, #8
 80098f6:	9303      	str	r3, [sp, #12]
 80098f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fa:	4433      	add	r3, r6
 80098fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098fe:	e76a      	b.n	80097d6 <_svfiprintf_r+0x52>
 8009900:	fb0c 3202 	mla	r2, ip, r2, r3
 8009904:	460c      	mov	r4, r1
 8009906:	2001      	movs	r0, #1
 8009908:	e7a8      	b.n	800985c <_svfiprintf_r+0xd8>
 800990a:	2300      	movs	r3, #0
 800990c:	3401      	adds	r4, #1
 800990e:	9305      	str	r3, [sp, #20]
 8009910:	4619      	mov	r1, r3
 8009912:	f04f 0c0a 	mov.w	ip, #10
 8009916:	4620      	mov	r0, r4
 8009918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800991c:	3a30      	subs	r2, #48	@ 0x30
 800991e:	2a09      	cmp	r2, #9
 8009920:	d903      	bls.n	800992a <_svfiprintf_r+0x1a6>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0c6      	beq.n	80098b4 <_svfiprintf_r+0x130>
 8009926:	9105      	str	r1, [sp, #20]
 8009928:	e7c4      	b.n	80098b4 <_svfiprintf_r+0x130>
 800992a:	fb0c 2101 	mla	r1, ip, r1, r2
 800992e:	4604      	mov	r4, r0
 8009930:	2301      	movs	r3, #1
 8009932:	e7f0      	b.n	8009916 <_svfiprintf_r+0x192>
 8009934:	ab03      	add	r3, sp, #12
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	462a      	mov	r2, r5
 800993a:	4b0e      	ldr	r3, [pc, #56]	@ (8009974 <_svfiprintf_r+0x1f0>)
 800993c:	a904      	add	r1, sp, #16
 800993e:	4638      	mov	r0, r7
 8009940:	f7fd fe82 	bl	8007648 <_printf_float>
 8009944:	1c42      	adds	r2, r0, #1
 8009946:	4606      	mov	r6, r0
 8009948:	d1d6      	bne.n	80098f8 <_svfiprintf_r+0x174>
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	065b      	lsls	r3, r3, #25
 800994e:	f53f af2d 	bmi.w	80097ac <_svfiprintf_r+0x28>
 8009952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009954:	e72c      	b.n	80097b0 <_svfiprintf_r+0x2c>
 8009956:	ab03      	add	r3, sp, #12
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	462a      	mov	r2, r5
 800995c:	4b05      	ldr	r3, [pc, #20]	@ (8009974 <_svfiprintf_r+0x1f0>)
 800995e:	a904      	add	r1, sp, #16
 8009960:	4638      	mov	r0, r7
 8009962:	f7fe f909 	bl	8007b78 <_printf_i>
 8009966:	e7ed      	b.n	8009944 <_svfiprintf_r+0x1c0>
 8009968:	0800a558 	.word	0x0800a558
 800996c:	0800a562 	.word	0x0800a562
 8009970:	08007649 	.word	0x08007649
 8009974:	080096cd 	.word	0x080096cd
 8009978:	0800a55e 	.word	0x0800a55e

0800997c <__sflush_r>:
 800997c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009984:	0716      	lsls	r6, r2, #28
 8009986:	4605      	mov	r5, r0
 8009988:	460c      	mov	r4, r1
 800998a:	d454      	bmi.n	8009a36 <__sflush_r+0xba>
 800998c:	684b      	ldr	r3, [r1, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dc02      	bgt.n	8009998 <__sflush_r+0x1c>
 8009992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	dd48      	ble.n	8009a2a <__sflush_r+0xae>
 8009998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800999a:	2e00      	cmp	r6, #0
 800999c:	d045      	beq.n	8009a2a <__sflush_r+0xae>
 800999e:	2300      	movs	r3, #0
 80099a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099a4:	682f      	ldr	r7, [r5, #0]
 80099a6:	6a21      	ldr	r1, [r4, #32]
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	d030      	beq.n	8009a0e <__sflush_r+0x92>
 80099ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	0759      	lsls	r1, r3, #29
 80099b2:	d505      	bpl.n	80099c0 <__sflush_r+0x44>
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099ba:	b10b      	cbz	r3, 80099c0 <__sflush_r+0x44>
 80099bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	2300      	movs	r3, #0
 80099c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099c4:	6a21      	ldr	r1, [r4, #32]
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b0      	blx	r6
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	d106      	bne.n	80099de <__sflush_r+0x62>
 80099d0:	6829      	ldr	r1, [r5, #0]
 80099d2:	291d      	cmp	r1, #29
 80099d4:	d82b      	bhi.n	8009a2e <__sflush_r+0xb2>
 80099d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009a80 <__sflush_r+0x104>)
 80099d8:	410a      	asrs	r2, r1
 80099da:	07d6      	lsls	r6, r2, #31
 80099dc:	d427      	bmi.n	8009a2e <__sflush_r+0xb2>
 80099de:	2200      	movs	r2, #0
 80099e0:	6062      	str	r2, [r4, #4]
 80099e2:	04d9      	lsls	r1, r3, #19
 80099e4:	6922      	ldr	r2, [r4, #16]
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	d504      	bpl.n	80099f4 <__sflush_r+0x78>
 80099ea:	1c42      	adds	r2, r0, #1
 80099ec:	d101      	bne.n	80099f2 <__sflush_r+0x76>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b903      	cbnz	r3, 80099f4 <__sflush_r+0x78>
 80099f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80099f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099f6:	602f      	str	r7, [r5, #0]
 80099f8:	b1b9      	cbz	r1, 8009a2a <__sflush_r+0xae>
 80099fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099fe:	4299      	cmp	r1, r3
 8009a00:	d002      	beq.n	8009a08 <__sflush_r+0x8c>
 8009a02:	4628      	mov	r0, r5
 8009a04:	f7ff f9e0 	bl	8008dc8 <_free_r>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a0c:	e00d      	b.n	8009a2a <__sflush_r+0xae>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b0      	blx	r6
 8009a14:	4602      	mov	r2, r0
 8009a16:	1c50      	adds	r0, r2, #1
 8009a18:	d1c9      	bne.n	80099ae <__sflush_r+0x32>
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0c6      	beq.n	80099ae <__sflush_r+0x32>
 8009a20:	2b1d      	cmp	r3, #29
 8009a22:	d001      	beq.n	8009a28 <__sflush_r+0xac>
 8009a24:	2b16      	cmp	r3, #22
 8009a26:	d11e      	bne.n	8009a66 <__sflush_r+0xea>
 8009a28:	602f      	str	r7, [r5, #0]
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e022      	b.n	8009a74 <__sflush_r+0xf8>
 8009a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a32:	b21b      	sxth	r3, r3
 8009a34:	e01b      	b.n	8009a6e <__sflush_r+0xf2>
 8009a36:	690f      	ldr	r7, [r1, #16]
 8009a38:	2f00      	cmp	r7, #0
 8009a3a:	d0f6      	beq.n	8009a2a <__sflush_r+0xae>
 8009a3c:	0793      	lsls	r3, r2, #30
 8009a3e:	680e      	ldr	r6, [r1, #0]
 8009a40:	bf08      	it	eq
 8009a42:	694b      	ldreq	r3, [r1, #20]
 8009a44:	600f      	str	r7, [r1, #0]
 8009a46:	bf18      	it	ne
 8009a48:	2300      	movne	r3, #0
 8009a4a:	eba6 0807 	sub.w	r8, r6, r7
 8009a4e:	608b      	str	r3, [r1, #8]
 8009a50:	f1b8 0f00 	cmp.w	r8, #0
 8009a54:	dde9      	ble.n	8009a2a <__sflush_r+0xae>
 8009a56:	6a21      	ldr	r1, [r4, #32]
 8009a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a5a:	4643      	mov	r3, r8
 8009a5c:	463a      	mov	r2, r7
 8009a5e:	4628      	mov	r0, r5
 8009a60:	47b0      	blx	r6
 8009a62:	2800      	cmp	r0, #0
 8009a64:	dc08      	bgt.n	8009a78 <__sflush_r+0xfc>
 8009a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a78:	4407      	add	r7, r0
 8009a7a:	eba8 0800 	sub.w	r8, r8, r0
 8009a7e:	e7e7      	b.n	8009a50 <__sflush_r+0xd4>
 8009a80:	dfbffffe 	.word	0xdfbffffe

08009a84 <_fflush_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	690b      	ldr	r3, [r1, #16]
 8009a88:	4605      	mov	r5, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	b913      	cbnz	r3, 8009a94 <_fflush_r+0x10>
 8009a8e:	2500      	movs	r5, #0
 8009a90:	4628      	mov	r0, r5
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	b118      	cbz	r0, 8009a9e <_fflush_r+0x1a>
 8009a96:	6a03      	ldr	r3, [r0, #32]
 8009a98:	b90b      	cbnz	r3, 8009a9e <_fflush_r+0x1a>
 8009a9a:	f7fe fa19 	bl	8007ed0 <__sinit>
 8009a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0f3      	beq.n	8009a8e <_fflush_r+0xa>
 8009aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009aa8:	07d0      	lsls	r0, r2, #31
 8009aaa:	d404      	bmi.n	8009ab6 <_fflush_r+0x32>
 8009aac:	0599      	lsls	r1, r3, #22
 8009aae:	d402      	bmi.n	8009ab6 <_fflush_r+0x32>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ab2:	f7fe fb38 	bl	8008126 <__retarget_lock_acquire_recursive>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f7ff ff5f 	bl	800997c <__sflush_r>
 8009abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ac0:	07da      	lsls	r2, r3, #31
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	d4e4      	bmi.n	8009a90 <_fflush_r+0xc>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	059b      	lsls	r3, r3, #22
 8009aca:	d4e1      	bmi.n	8009a90 <_fflush_r+0xc>
 8009acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ace:	f7fe fb2b 	bl	8008128 <__retarget_lock_release_recursive>
 8009ad2:	e7dd      	b.n	8009a90 <_fflush_r+0xc>

08009ad4 <memmove>:
 8009ad4:	4288      	cmp	r0, r1
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	eb01 0402 	add.w	r4, r1, r2
 8009adc:	d902      	bls.n	8009ae4 <memmove+0x10>
 8009ade:	4284      	cmp	r4, r0
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	d807      	bhi.n	8009af4 <memmove+0x20>
 8009ae4:	1e43      	subs	r3, r0, #1
 8009ae6:	42a1      	cmp	r1, r4
 8009ae8:	d008      	beq.n	8009afc <memmove+0x28>
 8009aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009af2:	e7f8      	b.n	8009ae6 <memmove+0x12>
 8009af4:	4402      	add	r2, r0
 8009af6:	4601      	mov	r1, r0
 8009af8:	428a      	cmp	r2, r1
 8009afa:	d100      	bne.n	8009afe <memmove+0x2a>
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b06:	e7f7      	b.n	8009af8 <memmove+0x24>

08009b08 <_sbrk_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d06      	ldr	r5, [pc, #24]	@ (8009b24 <_sbrk_r+0x1c>)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	602b      	str	r3, [r5, #0]
 8009b14:	f7f9 f948 	bl	8002da8 <_sbrk>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_sbrk_r+0x1a>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_sbrk_r+0x1a>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20000704 	.word	0x20000704

08009b28 <memcpy>:
 8009b28:	440a      	add	r2, r1
 8009b2a:	4291      	cmp	r1, r2
 8009b2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009b30:	d100      	bne.n	8009b34 <memcpy+0xc>
 8009b32:	4770      	bx	lr
 8009b34:	b510      	push	{r4, lr}
 8009b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b3e:	4291      	cmp	r1, r2
 8009b40:	d1f9      	bne.n	8009b36 <memcpy+0xe>
 8009b42:	bd10      	pop	{r4, pc}

08009b44 <__assert_func>:
 8009b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b46:	4614      	mov	r4, r2
 8009b48:	461a      	mov	r2, r3
 8009b4a:	4b09      	ldr	r3, [pc, #36]	@ (8009b70 <__assert_func+0x2c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4605      	mov	r5, r0
 8009b50:	68d8      	ldr	r0, [r3, #12]
 8009b52:	b954      	cbnz	r4, 8009b6a <__assert_func+0x26>
 8009b54:	4b07      	ldr	r3, [pc, #28]	@ (8009b74 <__assert_func+0x30>)
 8009b56:	461c      	mov	r4, r3
 8009b58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b5c:	9100      	str	r1, [sp, #0]
 8009b5e:	462b      	mov	r3, r5
 8009b60:	4905      	ldr	r1, [pc, #20]	@ (8009b78 <__assert_func+0x34>)
 8009b62:	f000 f86f 	bl	8009c44 <fiprintf>
 8009b66:	f000 f87f 	bl	8009c68 <abort>
 8009b6a:	4b04      	ldr	r3, [pc, #16]	@ (8009b7c <__assert_func+0x38>)
 8009b6c:	e7f4      	b.n	8009b58 <__assert_func+0x14>
 8009b6e:	bf00      	nop
 8009b70:	20000030 	.word	0x20000030
 8009b74:	0800a5ae 	.word	0x0800a5ae
 8009b78:	0800a580 	.word	0x0800a580
 8009b7c:	0800a573 	.word	0x0800a573

08009b80 <_calloc_r>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	fba1 5402 	umull	r5, r4, r1, r2
 8009b86:	b93c      	cbnz	r4, 8009b98 <_calloc_r+0x18>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	f7ff f991 	bl	8008eb0 <_malloc_r>
 8009b8e:	4606      	mov	r6, r0
 8009b90:	b928      	cbnz	r0, 8009b9e <_calloc_r+0x1e>
 8009b92:	2600      	movs	r6, #0
 8009b94:	4630      	mov	r0, r6
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	220c      	movs	r2, #12
 8009b9a:	6002      	str	r2, [r0, #0]
 8009b9c:	e7f9      	b.n	8009b92 <_calloc_r+0x12>
 8009b9e:	462a      	mov	r2, r5
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	f7fe fa42 	bl	800802a <memset>
 8009ba6:	e7f5      	b.n	8009b94 <_calloc_r+0x14>

08009ba8 <__ascii_mbtowc>:
 8009ba8:	b082      	sub	sp, #8
 8009baa:	b901      	cbnz	r1, 8009bae <__ascii_mbtowc+0x6>
 8009bac:	a901      	add	r1, sp, #4
 8009bae:	b142      	cbz	r2, 8009bc2 <__ascii_mbtowc+0x1a>
 8009bb0:	b14b      	cbz	r3, 8009bc6 <__ascii_mbtowc+0x1e>
 8009bb2:	7813      	ldrb	r3, [r2, #0]
 8009bb4:	600b      	str	r3, [r1, #0]
 8009bb6:	7812      	ldrb	r2, [r2, #0]
 8009bb8:	1e10      	subs	r0, r2, #0
 8009bba:	bf18      	it	ne
 8009bbc:	2001      	movne	r0, #1
 8009bbe:	b002      	add	sp, #8
 8009bc0:	4770      	bx	lr
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	e7fb      	b.n	8009bbe <__ascii_mbtowc+0x16>
 8009bc6:	f06f 0001 	mvn.w	r0, #1
 8009bca:	e7f8      	b.n	8009bbe <__ascii_mbtowc+0x16>

08009bcc <_realloc_r>:
 8009bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	4615      	mov	r5, r2
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	b921      	cbnz	r1, 8009be2 <_realloc_r+0x16>
 8009bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bdc:	4611      	mov	r1, r2
 8009bde:	f7ff b967 	b.w	8008eb0 <_malloc_r>
 8009be2:	b92a      	cbnz	r2, 8009bf0 <_realloc_r+0x24>
 8009be4:	f7ff f8f0 	bl	8008dc8 <_free_r>
 8009be8:	2400      	movs	r4, #0
 8009bea:	4620      	mov	r0, r4
 8009bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf0:	f000 f841 	bl	8009c76 <_malloc_usable_size_r>
 8009bf4:	4285      	cmp	r5, r0
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	d802      	bhi.n	8009c00 <_realloc_r+0x34>
 8009bfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009bfe:	d8f4      	bhi.n	8009bea <_realloc_r+0x1e>
 8009c00:	4629      	mov	r1, r5
 8009c02:	4640      	mov	r0, r8
 8009c04:	f7ff f954 	bl	8008eb0 <_malloc_r>
 8009c08:	4607      	mov	r7, r0
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0ec      	beq.n	8009be8 <_realloc_r+0x1c>
 8009c0e:	42b5      	cmp	r5, r6
 8009c10:	462a      	mov	r2, r5
 8009c12:	4621      	mov	r1, r4
 8009c14:	bf28      	it	cs
 8009c16:	4632      	movcs	r2, r6
 8009c18:	f7ff ff86 	bl	8009b28 <memcpy>
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4640      	mov	r0, r8
 8009c20:	f7ff f8d2 	bl	8008dc8 <_free_r>
 8009c24:	463c      	mov	r4, r7
 8009c26:	e7e0      	b.n	8009bea <_realloc_r+0x1e>

08009c28 <__ascii_wctomb>:
 8009c28:	4603      	mov	r3, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	b141      	cbz	r1, 8009c40 <__ascii_wctomb+0x18>
 8009c2e:	2aff      	cmp	r2, #255	@ 0xff
 8009c30:	d904      	bls.n	8009c3c <__ascii_wctomb+0x14>
 8009c32:	228a      	movs	r2, #138	@ 0x8a
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c3a:	4770      	bx	lr
 8009c3c:	700a      	strb	r2, [r1, #0]
 8009c3e:	2001      	movs	r0, #1
 8009c40:	4770      	bx	lr
	...

08009c44 <fiprintf>:
 8009c44:	b40e      	push	{r1, r2, r3}
 8009c46:	b503      	push	{r0, r1, lr}
 8009c48:	4601      	mov	r1, r0
 8009c4a:	ab03      	add	r3, sp, #12
 8009c4c:	4805      	ldr	r0, [pc, #20]	@ (8009c64 <fiprintf+0x20>)
 8009c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c52:	6800      	ldr	r0, [r0, #0]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f000 f83f 	bl	8009cd8 <_vfiprintf_r>
 8009c5a:	b002      	add	sp, #8
 8009c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c60:	b003      	add	sp, #12
 8009c62:	4770      	bx	lr
 8009c64:	20000030 	.word	0x20000030

08009c68 <abort>:
 8009c68:	b508      	push	{r3, lr}
 8009c6a:	2006      	movs	r0, #6
 8009c6c:	f000 fa08 	bl	800a080 <raise>
 8009c70:	2001      	movs	r0, #1
 8009c72:	f7f9 f820 	bl	8002cb6 <_exit>

08009c76 <_malloc_usable_size_r>:
 8009c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c7a:	1f18      	subs	r0, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bfbc      	itt	lt
 8009c80:	580b      	ldrlt	r3, [r1, r0]
 8009c82:	18c0      	addlt	r0, r0, r3
 8009c84:	4770      	bx	lr

08009c86 <__sfputc_r>:
 8009c86:	6893      	ldr	r3, [r2, #8]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	b410      	push	{r4}
 8009c8e:	6093      	str	r3, [r2, #8]
 8009c90:	da08      	bge.n	8009ca4 <__sfputc_r+0x1e>
 8009c92:	6994      	ldr	r4, [r2, #24]
 8009c94:	42a3      	cmp	r3, r4
 8009c96:	db01      	blt.n	8009c9c <__sfputc_r+0x16>
 8009c98:	290a      	cmp	r1, #10
 8009c9a:	d103      	bne.n	8009ca4 <__sfputc_r+0x1e>
 8009c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca0:	f000 b932 	b.w	8009f08 <__swbuf_r>
 8009ca4:	6813      	ldr	r3, [r2, #0]
 8009ca6:	1c58      	adds	r0, r3, #1
 8009ca8:	6010      	str	r0, [r2, #0]
 8009caa:	7019      	strb	r1, [r3, #0]
 8009cac:	4608      	mov	r0, r1
 8009cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <__sfputs_r>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460f      	mov	r7, r1
 8009cba:	4614      	mov	r4, r2
 8009cbc:	18d5      	adds	r5, r2, r3
 8009cbe:	42ac      	cmp	r4, r5
 8009cc0:	d101      	bne.n	8009cc6 <__sfputs_r+0x12>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e007      	b.n	8009cd6 <__sfputs_r+0x22>
 8009cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cca:	463a      	mov	r2, r7
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f7ff ffda 	bl	8009c86 <__sfputc_r>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	d1f3      	bne.n	8009cbe <__sfputs_r+0xa>
 8009cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cd8 <_vfiprintf_r>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	460d      	mov	r5, r1
 8009cde:	b09d      	sub	sp, #116	@ 0x74
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	4698      	mov	r8, r3
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	b118      	cbz	r0, 8009cf0 <_vfiprintf_r+0x18>
 8009ce8:	6a03      	ldr	r3, [r0, #32]
 8009cea:	b90b      	cbnz	r3, 8009cf0 <_vfiprintf_r+0x18>
 8009cec:	f7fe f8f0 	bl	8007ed0 <__sinit>
 8009cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cf2:	07d9      	lsls	r1, r3, #31
 8009cf4:	d405      	bmi.n	8009d02 <_vfiprintf_r+0x2a>
 8009cf6:	89ab      	ldrh	r3, [r5, #12]
 8009cf8:	059a      	lsls	r2, r3, #22
 8009cfa:	d402      	bmi.n	8009d02 <_vfiprintf_r+0x2a>
 8009cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cfe:	f7fe fa12 	bl	8008126 <__retarget_lock_acquire_recursive>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	071b      	lsls	r3, r3, #28
 8009d06:	d501      	bpl.n	8009d0c <_vfiprintf_r+0x34>
 8009d08:	692b      	ldr	r3, [r5, #16]
 8009d0a:	b99b      	cbnz	r3, 8009d34 <_vfiprintf_r+0x5c>
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f000 f938 	bl	8009f84 <__swsetup_r>
 8009d14:	b170      	cbz	r0, 8009d34 <_vfiprintf_r+0x5c>
 8009d16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d18:	07dc      	lsls	r4, r3, #31
 8009d1a:	d504      	bpl.n	8009d26 <_vfiprintf_r+0x4e>
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d20:	b01d      	add	sp, #116	@ 0x74
 8009d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	0598      	lsls	r0, r3, #22
 8009d2a:	d4f7      	bmi.n	8009d1c <_vfiprintf_r+0x44>
 8009d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d2e:	f7fe f9fb 	bl	8008128 <__retarget_lock_release_recursive>
 8009d32:	e7f3      	b.n	8009d1c <_vfiprintf_r+0x44>
 8009d34:	2300      	movs	r3, #0
 8009d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d42:	2330      	movs	r3, #48	@ 0x30
 8009d44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ef4 <_vfiprintf_r+0x21c>
 8009d48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d4c:	f04f 0901 	mov.w	r9, #1
 8009d50:	4623      	mov	r3, r4
 8009d52:	469a      	mov	sl, r3
 8009d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d58:	b10a      	cbz	r2, 8009d5e <_vfiprintf_r+0x86>
 8009d5a:	2a25      	cmp	r2, #37	@ 0x25
 8009d5c:	d1f9      	bne.n	8009d52 <_vfiprintf_r+0x7a>
 8009d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009d62:	d00b      	beq.n	8009d7c <_vfiprintf_r+0xa4>
 8009d64:	465b      	mov	r3, fp
 8009d66:	4622      	mov	r2, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff ffa2 	bl	8009cb4 <__sfputs_r>
 8009d70:	3001      	adds	r0, #1
 8009d72:	f000 80a7 	beq.w	8009ec4 <_vfiprintf_r+0x1ec>
 8009d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d78:	445a      	add	r2, fp
 8009d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 809f 	beq.w	8009ec4 <_vfiprintf_r+0x1ec>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d90:	f10a 0a01 	add.w	sl, sl, #1
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	9307      	str	r3, [sp, #28]
 8009d98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d9e:	4654      	mov	r4, sl
 8009da0:	2205      	movs	r2, #5
 8009da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da6:	4853      	ldr	r0, [pc, #332]	@ (8009ef4 <_vfiprintf_r+0x21c>)
 8009da8:	f7f6 fa3a 	bl	8000220 <memchr>
 8009dac:	9a04      	ldr	r2, [sp, #16]
 8009dae:	b9d8      	cbnz	r0, 8009de8 <_vfiprintf_r+0x110>
 8009db0:	06d1      	lsls	r1, r2, #27
 8009db2:	bf44      	itt	mi
 8009db4:	2320      	movmi	r3, #32
 8009db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dba:	0713      	lsls	r3, r2, #28
 8009dbc:	bf44      	itt	mi
 8009dbe:	232b      	movmi	r3, #43	@ 0x2b
 8009dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dca:	d015      	beq.n	8009df8 <_vfiprintf_r+0x120>
 8009dcc:	9a07      	ldr	r2, [sp, #28]
 8009dce:	4654      	mov	r4, sl
 8009dd0:	2000      	movs	r0, #0
 8009dd2:	f04f 0c0a 	mov.w	ip, #10
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ddc:	3b30      	subs	r3, #48	@ 0x30
 8009dde:	2b09      	cmp	r3, #9
 8009de0:	d94b      	bls.n	8009e7a <_vfiprintf_r+0x1a2>
 8009de2:	b1b0      	cbz	r0, 8009e12 <_vfiprintf_r+0x13a>
 8009de4:	9207      	str	r2, [sp, #28]
 8009de6:	e014      	b.n	8009e12 <_vfiprintf_r+0x13a>
 8009de8:	eba0 0308 	sub.w	r3, r0, r8
 8009dec:	fa09 f303 	lsl.w	r3, r9, r3
 8009df0:	4313      	orrs	r3, r2
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	46a2      	mov	sl, r4
 8009df6:	e7d2      	b.n	8009d9e <_vfiprintf_r+0xc6>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d19      	adds	r1, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9103      	str	r1, [sp, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfbb      	ittet	lt
 8009e04:	425b      	neglt	r3, r3
 8009e06:	f042 0202 	orrlt.w	r2, r2, #2
 8009e0a:	9307      	strge	r3, [sp, #28]
 8009e0c:	9307      	strlt	r3, [sp, #28]
 8009e0e:	bfb8      	it	lt
 8009e10:	9204      	strlt	r2, [sp, #16]
 8009e12:	7823      	ldrb	r3, [r4, #0]
 8009e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e16:	d10a      	bne.n	8009e2e <_vfiprintf_r+0x156>
 8009e18:	7863      	ldrb	r3, [r4, #1]
 8009e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e1c:	d132      	bne.n	8009e84 <_vfiprintf_r+0x1ac>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9203      	str	r2, [sp, #12]
 8009e26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e2a:	3402      	adds	r4, #2
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f04 <_vfiprintf_r+0x22c>
 8009e32:	7821      	ldrb	r1, [r4, #0]
 8009e34:	2203      	movs	r2, #3
 8009e36:	4650      	mov	r0, sl
 8009e38:	f7f6 f9f2 	bl	8000220 <memchr>
 8009e3c:	b138      	cbz	r0, 8009e4e <_vfiprintf_r+0x176>
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	eba0 000a 	sub.w	r0, r0, sl
 8009e44:	2240      	movs	r2, #64	@ 0x40
 8009e46:	4082      	lsls	r2, r0
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	3401      	adds	r4, #1
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e52:	4829      	ldr	r0, [pc, #164]	@ (8009ef8 <_vfiprintf_r+0x220>)
 8009e54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e58:	2206      	movs	r2, #6
 8009e5a:	f7f6 f9e1 	bl	8000220 <memchr>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d03f      	beq.n	8009ee2 <_vfiprintf_r+0x20a>
 8009e62:	4b26      	ldr	r3, [pc, #152]	@ (8009efc <_vfiprintf_r+0x224>)
 8009e64:	bb1b      	cbnz	r3, 8009eae <_vfiprintf_r+0x1d6>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	3307      	adds	r3, #7
 8009e6a:	f023 0307 	bic.w	r3, r3, #7
 8009e6e:	3308      	adds	r3, #8
 8009e70:	9303      	str	r3, [sp, #12]
 8009e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e74:	443b      	add	r3, r7
 8009e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e78:	e76a      	b.n	8009d50 <_vfiprintf_r+0x78>
 8009e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e7e:	460c      	mov	r4, r1
 8009e80:	2001      	movs	r0, #1
 8009e82:	e7a8      	b.n	8009dd6 <_vfiprintf_r+0xfe>
 8009e84:	2300      	movs	r3, #0
 8009e86:	3401      	adds	r4, #1
 8009e88:	9305      	str	r3, [sp, #20]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	f04f 0c0a 	mov.w	ip, #10
 8009e90:	4620      	mov	r0, r4
 8009e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e96:	3a30      	subs	r2, #48	@ 0x30
 8009e98:	2a09      	cmp	r2, #9
 8009e9a:	d903      	bls.n	8009ea4 <_vfiprintf_r+0x1cc>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0c6      	beq.n	8009e2e <_vfiprintf_r+0x156>
 8009ea0:	9105      	str	r1, [sp, #20]
 8009ea2:	e7c4      	b.n	8009e2e <_vfiprintf_r+0x156>
 8009ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e7f0      	b.n	8009e90 <_vfiprintf_r+0x1b8>
 8009eae:	ab03      	add	r3, sp, #12
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4b12      	ldr	r3, [pc, #72]	@ (8009f00 <_vfiprintf_r+0x228>)
 8009eb6:	a904      	add	r1, sp, #16
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f7fd fbc5 	bl	8007648 <_printf_float>
 8009ebe:	4607      	mov	r7, r0
 8009ec0:	1c78      	adds	r0, r7, #1
 8009ec2:	d1d6      	bne.n	8009e72 <_vfiprintf_r+0x19a>
 8009ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ec6:	07d9      	lsls	r1, r3, #31
 8009ec8:	d405      	bmi.n	8009ed6 <_vfiprintf_r+0x1fe>
 8009eca:	89ab      	ldrh	r3, [r5, #12]
 8009ecc:	059a      	lsls	r2, r3, #22
 8009ece:	d402      	bmi.n	8009ed6 <_vfiprintf_r+0x1fe>
 8009ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ed2:	f7fe f929 	bl	8008128 <__retarget_lock_release_recursive>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	065b      	lsls	r3, r3, #25
 8009eda:	f53f af1f 	bmi.w	8009d1c <_vfiprintf_r+0x44>
 8009ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ee0:	e71e      	b.n	8009d20 <_vfiprintf_r+0x48>
 8009ee2:	ab03      	add	r3, sp, #12
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	4b05      	ldr	r3, [pc, #20]	@ (8009f00 <_vfiprintf_r+0x228>)
 8009eea:	a904      	add	r1, sp, #16
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7fd fe43 	bl	8007b78 <_printf_i>
 8009ef2:	e7e4      	b.n	8009ebe <_vfiprintf_r+0x1e6>
 8009ef4:	0800a558 	.word	0x0800a558
 8009ef8:	0800a562 	.word	0x0800a562
 8009efc:	08007649 	.word	0x08007649
 8009f00:	08009cb5 	.word	0x08009cb5
 8009f04:	0800a55e 	.word	0x0800a55e

08009f08 <__swbuf_r>:
 8009f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0a:	460e      	mov	r6, r1
 8009f0c:	4614      	mov	r4, r2
 8009f0e:	4605      	mov	r5, r0
 8009f10:	b118      	cbz	r0, 8009f1a <__swbuf_r+0x12>
 8009f12:	6a03      	ldr	r3, [r0, #32]
 8009f14:	b90b      	cbnz	r3, 8009f1a <__swbuf_r+0x12>
 8009f16:	f7fd ffdb 	bl	8007ed0 <__sinit>
 8009f1a:	69a3      	ldr	r3, [r4, #24]
 8009f1c:	60a3      	str	r3, [r4, #8]
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	071a      	lsls	r2, r3, #28
 8009f22:	d501      	bpl.n	8009f28 <__swbuf_r+0x20>
 8009f24:	6923      	ldr	r3, [r4, #16]
 8009f26:	b943      	cbnz	r3, 8009f3a <__swbuf_r+0x32>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 f82a 	bl	8009f84 <__swsetup_r>
 8009f30:	b118      	cbz	r0, 8009f3a <__swbuf_r+0x32>
 8009f32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009f36:	4638      	mov	r0, r7
 8009f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	6922      	ldr	r2, [r4, #16]
 8009f3e:	1a98      	subs	r0, r3, r2
 8009f40:	6963      	ldr	r3, [r4, #20]
 8009f42:	b2f6      	uxtb	r6, r6
 8009f44:	4283      	cmp	r3, r0
 8009f46:	4637      	mov	r7, r6
 8009f48:	dc05      	bgt.n	8009f56 <__swbuf_r+0x4e>
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	f7ff fd99 	bl	8009a84 <_fflush_r>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d1ed      	bne.n	8009f32 <__swbuf_r+0x2a>
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	60a3      	str	r3, [r4, #8]
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	1c5a      	adds	r2, r3, #1
 8009f60:	6022      	str	r2, [r4, #0]
 8009f62:	701e      	strb	r6, [r3, #0]
 8009f64:	6962      	ldr	r2, [r4, #20]
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d004      	beq.n	8009f76 <__swbuf_r+0x6e>
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	07db      	lsls	r3, r3, #31
 8009f70:	d5e1      	bpl.n	8009f36 <__swbuf_r+0x2e>
 8009f72:	2e0a      	cmp	r6, #10
 8009f74:	d1df      	bne.n	8009f36 <__swbuf_r+0x2e>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7ff fd83 	bl	8009a84 <_fflush_r>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0d9      	beq.n	8009f36 <__swbuf_r+0x2e>
 8009f82:	e7d6      	b.n	8009f32 <__swbuf_r+0x2a>

08009f84 <__swsetup_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4b29      	ldr	r3, [pc, #164]	@ (800a02c <__swsetup_r+0xa8>)
 8009f88:	4605      	mov	r5, r0
 8009f8a:	6818      	ldr	r0, [r3, #0]
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	b118      	cbz	r0, 8009f98 <__swsetup_r+0x14>
 8009f90:	6a03      	ldr	r3, [r0, #32]
 8009f92:	b90b      	cbnz	r3, 8009f98 <__swsetup_r+0x14>
 8009f94:	f7fd ff9c 	bl	8007ed0 <__sinit>
 8009f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9c:	0719      	lsls	r1, r3, #28
 8009f9e:	d422      	bmi.n	8009fe6 <__swsetup_r+0x62>
 8009fa0:	06da      	lsls	r2, r3, #27
 8009fa2:	d407      	bmi.n	8009fb4 <__swsetup_r+0x30>
 8009fa4:	2209      	movs	r2, #9
 8009fa6:	602a      	str	r2, [r5, #0]
 8009fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fac:	81a3      	strh	r3, [r4, #12]
 8009fae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fb2:	e033      	b.n	800a01c <__swsetup_r+0x98>
 8009fb4:	0758      	lsls	r0, r3, #29
 8009fb6:	d512      	bpl.n	8009fde <__swsetup_r+0x5a>
 8009fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fba:	b141      	cbz	r1, 8009fce <__swsetup_r+0x4a>
 8009fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fc0:	4299      	cmp	r1, r3
 8009fc2:	d002      	beq.n	8009fca <__swsetup_r+0x46>
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f7fe feff 	bl	8008dc8 <_free_r>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fd4:	81a3      	strh	r3, [r4, #12]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6063      	str	r3, [r4, #4]
 8009fda:	6923      	ldr	r3, [r4, #16]
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	f043 0308 	orr.w	r3, r3, #8
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	b94b      	cbnz	r3, 8009ffe <__swsetup_r+0x7a>
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ff4:	d003      	beq.n	8009ffe <__swsetup_r+0x7a>
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 f883 	bl	800a104 <__smakebuf_r>
 8009ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a002:	f013 0201 	ands.w	r2, r3, #1
 800a006:	d00a      	beq.n	800a01e <__swsetup_r+0x9a>
 800a008:	2200      	movs	r2, #0
 800a00a:	60a2      	str	r2, [r4, #8]
 800a00c:	6962      	ldr	r2, [r4, #20]
 800a00e:	4252      	negs	r2, r2
 800a010:	61a2      	str	r2, [r4, #24]
 800a012:	6922      	ldr	r2, [r4, #16]
 800a014:	b942      	cbnz	r2, 800a028 <__swsetup_r+0xa4>
 800a016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a01a:	d1c5      	bne.n	8009fa8 <__swsetup_r+0x24>
 800a01c:	bd38      	pop	{r3, r4, r5, pc}
 800a01e:	0799      	lsls	r1, r3, #30
 800a020:	bf58      	it	pl
 800a022:	6962      	ldrpl	r2, [r4, #20]
 800a024:	60a2      	str	r2, [r4, #8]
 800a026:	e7f4      	b.n	800a012 <__swsetup_r+0x8e>
 800a028:	2000      	movs	r0, #0
 800a02a:	e7f7      	b.n	800a01c <__swsetup_r+0x98>
 800a02c:	20000030 	.word	0x20000030

0800a030 <_raise_r>:
 800a030:	291f      	cmp	r1, #31
 800a032:	b538      	push	{r3, r4, r5, lr}
 800a034:	4605      	mov	r5, r0
 800a036:	460c      	mov	r4, r1
 800a038:	d904      	bls.n	800a044 <_raise_r+0x14>
 800a03a:	2316      	movs	r3, #22
 800a03c:	6003      	str	r3, [r0, #0]
 800a03e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a046:	b112      	cbz	r2, 800a04e <_raise_r+0x1e>
 800a048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a04c:	b94b      	cbnz	r3, 800a062 <_raise_r+0x32>
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 f830 	bl	800a0b4 <_getpid_r>
 800a054:	4622      	mov	r2, r4
 800a056:	4601      	mov	r1, r0
 800a058:	4628      	mov	r0, r5
 800a05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a05e:	f000 b817 	b.w	800a090 <_kill_r>
 800a062:	2b01      	cmp	r3, #1
 800a064:	d00a      	beq.n	800a07c <_raise_r+0x4c>
 800a066:	1c59      	adds	r1, r3, #1
 800a068:	d103      	bne.n	800a072 <_raise_r+0x42>
 800a06a:	2316      	movs	r3, #22
 800a06c:	6003      	str	r3, [r0, #0]
 800a06e:	2001      	movs	r0, #1
 800a070:	e7e7      	b.n	800a042 <_raise_r+0x12>
 800a072:	2100      	movs	r1, #0
 800a074:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a078:	4620      	mov	r0, r4
 800a07a:	4798      	blx	r3
 800a07c:	2000      	movs	r0, #0
 800a07e:	e7e0      	b.n	800a042 <_raise_r+0x12>

0800a080 <raise>:
 800a080:	4b02      	ldr	r3, [pc, #8]	@ (800a08c <raise+0xc>)
 800a082:	4601      	mov	r1, r0
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	f7ff bfd3 	b.w	800a030 <_raise_r>
 800a08a:	bf00      	nop
 800a08c:	20000030 	.word	0x20000030

0800a090 <_kill_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4d07      	ldr	r5, [pc, #28]	@ (800a0b0 <_kill_r+0x20>)
 800a094:	2300      	movs	r3, #0
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	4611      	mov	r1, r2
 800a09c:	602b      	str	r3, [r5, #0]
 800a09e:	f7f8 fdfa 	bl	8002c96 <_kill>
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	d102      	bne.n	800a0ac <_kill_r+0x1c>
 800a0a6:	682b      	ldr	r3, [r5, #0]
 800a0a8:	b103      	cbz	r3, 800a0ac <_kill_r+0x1c>
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	bd38      	pop	{r3, r4, r5, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20000704 	.word	0x20000704

0800a0b4 <_getpid_r>:
 800a0b4:	f7f8 bde7 	b.w	8002c86 <_getpid>

0800a0b8 <__swhatbuf_r>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	b096      	sub	sp, #88	@ 0x58
 800a0c4:	4615      	mov	r5, r2
 800a0c6:	461e      	mov	r6, r3
 800a0c8:	da0d      	bge.n	800a0e6 <__swhatbuf_r+0x2e>
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0d0:	f04f 0100 	mov.w	r1, #0
 800a0d4:	bf14      	ite	ne
 800a0d6:	2340      	movne	r3, #64	@ 0x40
 800a0d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0dc:	2000      	movs	r0, #0
 800a0de:	6031      	str	r1, [r6, #0]
 800a0e0:	602b      	str	r3, [r5, #0]
 800a0e2:	b016      	add	sp, #88	@ 0x58
 800a0e4:	bd70      	pop	{r4, r5, r6, pc}
 800a0e6:	466a      	mov	r2, sp
 800a0e8:	f000 f848 	bl	800a17c <_fstat_r>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	dbec      	blt.n	800a0ca <__swhatbuf_r+0x12>
 800a0f0:	9901      	ldr	r1, [sp, #4]
 800a0f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0fa:	4259      	negs	r1, r3
 800a0fc:	4159      	adcs	r1, r3
 800a0fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a102:	e7eb      	b.n	800a0dc <__swhatbuf_r+0x24>

0800a104 <__smakebuf_r>:
 800a104:	898b      	ldrh	r3, [r1, #12]
 800a106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a108:	079d      	lsls	r5, r3, #30
 800a10a:	4606      	mov	r6, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	d507      	bpl.n	800a120 <__smakebuf_r+0x1c>
 800a110:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	2301      	movs	r3, #1
 800a11a:	6163      	str	r3, [r4, #20]
 800a11c:	b003      	add	sp, #12
 800a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a120:	ab01      	add	r3, sp, #4
 800a122:	466a      	mov	r2, sp
 800a124:	f7ff ffc8 	bl	800a0b8 <__swhatbuf_r>
 800a128:	9f00      	ldr	r7, [sp, #0]
 800a12a:	4605      	mov	r5, r0
 800a12c:	4639      	mov	r1, r7
 800a12e:	4630      	mov	r0, r6
 800a130:	f7fe febe 	bl	8008eb0 <_malloc_r>
 800a134:	b948      	cbnz	r0, 800a14a <__smakebuf_r+0x46>
 800a136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a13a:	059a      	lsls	r2, r3, #22
 800a13c:	d4ee      	bmi.n	800a11c <__smakebuf_r+0x18>
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	f043 0302 	orr.w	r3, r3, #2
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	e7e2      	b.n	800a110 <__smakebuf_r+0xc>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	6020      	str	r0, [r4, #0]
 800a14e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	9b01      	ldr	r3, [sp, #4]
 800a156:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a15a:	b15b      	cbz	r3, 800a174 <__smakebuf_r+0x70>
 800a15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a160:	4630      	mov	r0, r6
 800a162:	f000 f81d 	bl	800a1a0 <_isatty_r>
 800a166:	b128      	cbz	r0, 800a174 <__smakebuf_r+0x70>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f023 0303 	bic.w	r3, r3, #3
 800a16e:	f043 0301 	orr.w	r3, r3, #1
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	431d      	orrs	r5, r3
 800a178:	81a5      	strh	r5, [r4, #12]
 800a17a:	e7cf      	b.n	800a11c <__smakebuf_r+0x18>

0800a17c <_fstat_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	4d07      	ldr	r5, [pc, #28]	@ (800a19c <_fstat_r+0x20>)
 800a180:	2300      	movs	r3, #0
 800a182:	4604      	mov	r4, r0
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	602b      	str	r3, [r5, #0]
 800a18a:	f7f8 fde4 	bl	8002d56 <_fstat>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	d102      	bne.n	800a198 <_fstat_r+0x1c>
 800a192:	682b      	ldr	r3, [r5, #0]
 800a194:	b103      	cbz	r3, 800a198 <_fstat_r+0x1c>
 800a196:	6023      	str	r3, [r4, #0]
 800a198:	bd38      	pop	{r3, r4, r5, pc}
 800a19a:	bf00      	nop
 800a19c:	20000704 	.word	0x20000704

0800a1a0 <_isatty_r>:
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4d06      	ldr	r5, [pc, #24]	@ (800a1bc <_isatty_r+0x1c>)
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	602b      	str	r3, [r5, #0]
 800a1ac:	f7f8 fde3 	bl	8002d76 <_isatty>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d102      	bne.n	800a1ba <_isatty_r+0x1a>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	b103      	cbz	r3, 800a1ba <_isatty_r+0x1a>
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	20000704 	.word	0x20000704

0800a1c0 <fmax>:
 800a1c0:	b508      	push	{r3, lr}
 800a1c2:	ed2d 8b04 	vpush	{d8-d9}
 800a1c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a1ca:	eef0 8a60 	vmov.f32	s17, s1
 800a1ce:	eeb0 9a41 	vmov.f32	s18, s2
 800a1d2:	eef0 9a61 	vmov.f32	s19, s3
 800a1d6:	f000 f847 	bl	800a268 <__fpclassifyd>
 800a1da:	b950      	cbnz	r0, 800a1f2 <fmax+0x32>
 800a1dc:	eeb0 8a49 	vmov.f32	s16, s18
 800a1e0:	eef0 8a69 	vmov.f32	s17, s19
 800a1e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a1e8:	eef0 0a68 	vmov.f32	s1, s17
 800a1ec:	ecbd 8b04 	vpop	{d8-d9}
 800a1f0:	bd08      	pop	{r3, pc}
 800a1f2:	eeb0 0a49 	vmov.f32	s0, s18
 800a1f6:	eef0 0a69 	vmov.f32	s1, s19
 800a1fa:	f000 f835 	bl	800a268 <__fpclassifyd>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d0f0      	beq.n	800a1e4 <fmax+0x24>
 800a202:	ec53 2b19 	vmov	r2, r3, d9
 800a206:	ec51 0b18 	vmov	r0, r1, d8
 800a20a:	f7f6 fcad 	bl	8000b68 <__aeabi_dcmpgt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d0e4      	beq.n	800a1dc <fmax+0x1c>
 800a212:	e7e7      	b.n	800a1e4 <fmax+0x24>

0800a214 <fmin>:
 800a214:	b508      	push	{r3, lr}
 800a216:	ed2d 8b04 	vpush	{d8-d9}
 800a21a:	eeb0 8a40 	vmov.f32	s16, s0
 800a21e:	eef0 8a60 	vmov.f32	s17, s1
 800a222:	eeb0 9a41 	vmov.f32	s18, s2
 800a226:	eef0 9a61 	vmov.f32	s19, s3
 800a22a:	f000 f81d 	bl	800a268 <__fpclassifyd>
 800a22e:	b950      	cbnz	r0, 800a246 <fmin+0x32>
 800a230:	eeb0 8a49 	vmov.f32	s16, s18
 800a234:	eef0 8a69 	vmov.f32	s17, s19
 800a238:	eeb0 0a48 	vmov.f32	s0, s16
 800a23c:	eef0 0a68 	vmov.f32	s1, s17
 800a240:	ecbd 8b04 	vpop	{d8-d9}
 800a244:	bd08      	pop	{r3, pc}
 800a246:	eeb0 0a49 	vmov.f32	s0, s18
 800a24a:	eef0 0a69 	vmov.f32	s1, s19
 800a24e:	f000 f80b 	bl	800a268 <__fpclassifyd>
 800a252:	2800      	cmp	r0, #0
 800a254:	d0f0      	beq.n	800a238 <fmin+0x24>
 800a256:	ec53 2b19 	vmov	r2, r3, d9
 800a25a:	ec51 0b18 	vmov	r0, r1, d8
 800a25e:	f7f6 fc65 	bl	8000b2c <__aeabi_dcmplt>
 800a262:	2800      	cmp	r0, #0
 800a264:	d0e4      	beq.n	800a230 <fmin+0x1c>
 800a266:	e7e7      	b.n	800a238 <fmin+0x24>

0800a268 <__fpclassifyd>:
 800a268:	ec51 0b10 	vmov	r0, r1, d0
 800a26c:	b510      	push	{r4, lr}
 800a26e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800a272:	460b      	mov	r3, r1
 800a274:	d019      	beq.n	800a2aa <__fpclassifyd+0x42>
 800a276:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800a27a:	490e      	ldr	r1, [pc, #56]	@ (800a2b4 <__fpclassifyd+0x4c>)
 800a27c:	428a      	cmp	r2, r1
 800a27e:	d90e      	bls.n	800a29e <__fpclassifyd+0x36>
 800a280:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800a284:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800a288:	428a      	cmp	r2, r1
 800a28a:	d908      	bls.n	800a29e <__fpclassifyd+0x36>
 800a28c:	4a0a      	ldr	r2, [pc, #40]	@ (800a2b8 <__fpclassifyd+0x50>)
 800a28e:	4213      	tst	r3, r2
 800a290:	d007      	beq.n	800a2a2 <__fpclassifyd+0x3a>
 800a292:	4294      	cmp	r4, r2
 800a294:	d107      	bne.n	800a2a6 <__fpclassifyd+0x3e>
 800a296:	fab0 f080 	clz	r0, r0
 800a29a:	0940      	lsrs	r0, r0, #5
 800a29c:	bd10      	pop	{r4, pc}
 800a29e:	2004      	movs	r0, #4
 800a2a0:	e7fc      	b.n	800a29c <__fpclassifyd+0x34>
 800a2a2:	2003      	movs	r0, #3
 800a2a4:	e7fa      	b.n	800a29c <__fpclassifyd+0x34>
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	e7f8      	b.n	800a29c <__fpclassifyd+0x34>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d1ee      	bne.n	800a28c <__fpclassifyd+0x24>
 800a2ae:	2002      	movs	r0, #2
 800a2b0:	e7f4      	b.n	800a29c <__fpclassifyd+0x34>
 800a2b2:	bf00      	nop
 800a2b4:	7fdfffff 	.word	0x7fdfffff
 800a2b8:	7ff00000 	.word	0x7ff00000

0800a2bc <_init>:
 800a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2be:	bf00      	nop
 800a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c2:	bc08      	pop	{r3}
 800a2c4:	469e      	mov	lr, r3
 800a2c6:	4770      	bx	lr

0800a2c8 <_fini>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr
