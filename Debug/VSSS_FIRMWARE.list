
VSSS_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c194  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800c378  0800c378  0000d378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c89c  0800c89c  0000e1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c89c  0800c89c  0000d89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8a4  0800c8a4  0000e1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8a4  0800c8a4  0000d8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c8a8  0800c8a8  0000d8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800c8ac  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  200001f8  0800caa0  0000e1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  0800caa0  0000e7b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183b9  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003588  00000000  00000000  000265dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00029b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001049  00000000  00000000  0002b068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004387  00000000  00000000  0002c0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183d6  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb701  00000000  00000000  0004880e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d58  00000000  00000000  00113f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0011acac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c35c 	.word	0x0800c35c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800c35c 	.word	0x0800c35c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <IMU_Init>:


float GYRO_SCALE = 65.5;
float ACCEL_SCALE = 8192.0;

void IMU_Init(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    uint8_t check;
    uint8_t data;

    check = IMU_ReadReg(IMU_WHO_AM_I);
 8001076:	2075      	movs	r0, #117	@ 0x75
 8001078:	f000 f8a0 	bl	80011bc <IMU_ReadReg>
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
    if (check == 0x70) {
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b70      	cmp	r3, #112	@ 0x70
 8001084:	d162      	bne.n	800114c <IMU_Init+0xdc>
        IMU_WriteReg(IMU_PWR_MGMT_1, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	206b      	movs	r0, #107	@ 0x6b
 800108a:	f000 f86f 	bl	800116c <IMU_WriteReg>
        IMU_WriteReg(IMU_GYRO_CONFIG, (1 << 3));
 800108e:	2108      	movs	r1, #8
 8001090:	201b      	movs	r0, #27
 8001092:	f000 f86b 	bl	800116c <IMU_WriteReg>
        IMU_WriteReg(IMU_ACCEL_CONFIG, (1 << 3));
 8001096:	2108      	movs	r1, #8
 8001098:	201c      	movs	r0, #28
 800109a:	f000 f867 	bl	800116c <IMU_WriteReg>

        uint8_t gyro_config = IMU_ReadReg(IMU_GYRO_CONFIG);
 800109e:	201b      	movs	r0, #27
 80010a0:	f000 f88c 	bl	80011bc <IMU_ReadReg>
 80010a4:	4603      	mov	r3, r0
 80010a6:	71bb      	strb	r3, [r7, #6]
        uint8_t fs_sel = (gyro_config >> 3) & 0x03;
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	08db      	lsrs	r3, r3, #3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	717b      	strb	r3, [r7, #5]

        switch(fs_sel) {
 80010b4:	797b      	ldrb	r3, [r7, #5]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d81a      	bhi.n	80010f0 <IMU_Init+0x80>
 80010ba:	a201      	add	r2, pc, #4	@ (adr r2, 80010c0 <IMU_Init+0x50>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010e9 	.word	0x080010e9
            case 0: GYRO_SCALE = 131.0; break;  // ±250°/s
 80010d0:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <IMU_Init+0xe4>)
 80010d2:	4a21      	ldr	r2, [pc, #132]	@ (8001158 <IMU_Init+0xe8>)
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e00b      	b.n	80010f0 <IMU_Init+0x80>
            case 1: GYRO_SCALE = 65.5;  break;  // ±500°/s
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <IMU_Init+0xe4>)
 80010da:	4a20      	ldr	r2, [pc, #128]	@ (800115c <IMU_Init+0xec>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e007      	b.n	80010f0 <IMU_Init+0x80>
            case 2: GYRO_SCALE = 32.8;  break;  // ±1000°/s
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <IMU_Init+0xe4>)
 80010e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <IMU_Init+0xf0>)
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e003      	b.n	80010f0 <IMU_Init+0x80>
            case 3: GYRO_SCALE = 16.4;  break;  // ±2000°/s
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <IMU_Init+0xe4>)
 80010ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <IMU_Init+0xf4>)
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	bf00      	nop
        }

        uint8_t accel_config = IMU_ReadReg(IMU_ACCEL_CONFIG);
 80010f0:	201c      	movs	r0, #28
 80010f2:	f000 f863 	bl	80011bc <IMU_ReadReg>
 80010f6:	4603      	mov	r3, r0
 80010f8:	713b      	strb	r3, [r7, #4]
        uint8_t afs_sel = (accel_config >> 3) & 0x03;
 80010fa:	793b      	ldrb	r3, [r7, #4]
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	70fb      	strb	r3, [r7, #3]

        switch(afs_sel) {
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d81f      	bhi.n	800114c <IMU_Init+0xdc>
 800110c:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <IMU_Init+0xa4>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	0800112f 	.word	0x0800112f
 800111c:	08001139 	.word	0x08001139
 8001120:	08001143 	.word	0x08001143
            case 0: ACCEL_SCALE = 16384.0; break;  // ±2g
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <IMU_Init+0xf8>)
 8001126:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e00e      	b.n	800114c <IMU_Init+0xdc>
            case 1: ACCEL_SCALE = 8192.0;  break;  // ±4g
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <IMU_Init+0xf8>)
 8001130:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e009      	b.n	800114c <IMU_Init+0xdc>
            case 2: ACCEL_SCALE = 4096.0;  break;  // ±8g
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <IMU_Init+0xf8>)
 800113a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e004      	b.n	800114c <IMU_Init+0xdc>
            case 3: ACCEL_SCALE = 2048.0;  break;  // ±16g
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <IMU_Init+0xf8>)
 8001144:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	bf00      	nop
        }
    }
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	43030000 	.word	0x43030000
 800115c:	42830000 	.word	0x42830000
 8001160:	42033333 	.word	0x42033333
 8001164:	41833333 	.word	0x41833333
 8001168:	20000004 	.word	0x20000004

0800116c <IMU_WriteReg>:

void IMU_WriteReg(uint8_t reg, uint8_t data) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {reg, data};
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	733b      	strb	r3, [r7, #12]
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118a:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <IMU_WriteReg+0x48>)
 800118c:	f002 fd04 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, txData, 2, HAL_MAX_DELAY);
 8001190:	f107 010c 	add.w	r1, r7, #12
 8001194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001198:	2202      	movs	r2, #2
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <IMU_WriteReg+0x4c>)
 800119c:	f003 fd91 	bl	8004cc2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <IMU_WriteReg+0x48>)
 80011a8:	f002 fcf6 	bl	8003b98 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	48000400 	.word	0x48000400
 80011b8:	20000404 	.word	0x20000404

080011bc <IMU_ReadReg>:

uint8_t IMU_ReadReg(uint8_t reg) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = reg | 0x80;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData;
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d6:	480f      	ldr	r0, [pc, #60]	@ (8001214 <IMU_ReadReg+0x58>)
 80011d8:	f002 fcde 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, &txData, 1, HAL_MAX_DELAY);
 80011dc:	f107 010f 	add.w	r1, r7, #15
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e4:	2201      	movs	r2, #1
 80011e6:	480c      	ldr	r0, [pc, #48]	@ (8001218 <IMU_ReadReg+0x5c>)
 80011e8:	f003 fd6b 	bl	8004cc2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(IMU_SPI, &rxData, 1, HAL_MAX_DELAY);
 80011ec:	f107 010e 	add.w	r1, r7, #14
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f4:	2201      	movs	r2, #1
 80011f6:	4808      	ldr	r0, [pc, #32]	@ (8001218 <IMU_ReadReg+0x5c>)
 80011f8:	f003 fed9 	bl	8004fae <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001202:	4804      	ldr	r0, [pc, #16]	@ (8001214 <IMU_ReadReg+0x58>)
 8001204:	f002 fcc8 	bl	8003b98 <HAL_GPIO_WritePin>
    return rxData;
 8001208:	7bbb      	ldrb	r3, [r7, #14]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	48000400 	.word	0x48000400
 8001218:	20000404 	.word	0x20000404

0800121c <IMU_ReadAccelData>:

void IMU_ReadAccelData(int16_t *accelData) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_ACCEL_XOUT_H);
 8001224:	203b      	movs	r0, #59	@ 0x3b
 8001226:	f7ff ffc9 	bl	80011bc <IMU_ReadReg>
 800122a:	4603      	mov	r3, r0
 800122c:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_ACCEL_XOUT_L);
 800122e:	203c      	movs	r0, #60	@ 0x3c
 8001230:	f7ff ffc4 	bl	80011bc <IMU_ReadReg>
 8001234:	4603      	mov	r3, r0
 8001236:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_ACCEL_YOUT_H);
 8001238:	203d      	movs	r0, #61	@ 0x3d
 800123a:	f7ff ffbf 	bl	80011bc <IMU_ReadReg>
 800123e:	4603      	mov	r3, r0
 8001240:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_ACCEL_YOUT_L);
 8001242:	203e      	movs	r0, #62	@ 0x3e
 8001244:	f7ff ffba 	bl	80011bc <IMU_ReadReg>
 8001248:	4603      	mov	r3, r0
 800124a:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_ACCEL_ZOUT_H);
 800124c:	203f      	movs	r0, #63	@ 0x3f
 800124e:	f7ff ffb5 	bl	80011bc <IMU_ReadReg>
 8001252:	4603      	mov	r3, r0
 8001254:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_ACCEL_ZOUT_L);
 8001256:	2040      	movs	r0, #64	@ 0x40
 8001258:	f7ff ffb0 	bl	80011bc <IMU_ReadReg>
 800125c:	4603      	mov	r3, r0
 800125e:	737b      	strb	r3, [r7, #13]

    accelData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 8001260:	7a3b      	ldrb	r3, [r7, #8]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	801a      	strh	r2, [r3, #0]
    accelData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 8001274:	7abb      	ldrb	r3, [r7, #10]
 8001276:	b21b      	sxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b219      	sxth	r1, r3
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	b21a      	sxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3302      	adds	r3, #2
 8001284:	430a      	orrs	r2, r1
 8001286:	b212      	sxth	r2, r2
 8001288:	801a      	strh	r2, [r3, #0]
    accelData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 800128a:	7b3b      	ldrb	r3, [r7, #12]
 800128c:	b21b      	sxth	r3, r3
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b219      	sxth	r1, r3
 8001292:	7b7b      	ldrb	r3, [r7, #13]
 8001294:	b21a      	sxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	430a      	orrs	r2, r1
 800129c:	b212      	sxth	r2, r2
 800129e:	801a      	strh	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <IMU_ReadGyroData>:

void IMU_ReadGyroData(int16_t *gyroData) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_GYRO_XOUT_H);
 80012b0:	2043      	movs	r0, #67	@ 0x43
 80012b2:	f7ff ff83 	bl	80011bc <IMU_ReadReg>
 80012b6:	4603      	mov	r3, r0
 80012b8:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_GYRO_XOUT_L);
 80012ba:	2044      	movs	r0, #68	@ 0x44
 80012bc:	f7ff ff7e 	bl	80011bc <IMU_ReadReg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_GYRO_YOUT_H);
 80012c4:	2045      	movs	r0, #69	@ 0x45
 80012c6:	f7ff ff79 	bl	80011bc <IMU_ReadReg>
 80012ca:	4603      	mov	r3, r0
 80012cc:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_GYRO_YOUT_L);
 80012ce:	2046      	movs	r0, #70	@ 0x46
 80012d0:	f7ff ff74 	bl	80011bc <IMU_ReadReg>
 80012d4:	4603      	mov	r3, r0
 80012d6:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_GYRO_ZOUT_H);
 80012d8:	2047      	movs	r0, #71	@ 0x47
 80012da:	f7ff ff6f 	bl	80011bc <IMU_ReadReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_GYRO_ZOUT_L);
 80012e2:	2048      	movs	r0, #72	@ 0x48
 80012e4:	f7ff ff6a 	bl	80011bc <IMU_ReadReg>
 80012e8:	4603      	mov	r3, r0
 80012ea:	737b      	strb	r3, [r7, #13]

    gyroData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 80012ec:	7a3b      	ldrb	r3, [r7, #8]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	7a7b      	ldrb	r3, [r7, #9]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	801a      	strh	r2, [r3, #0]
    gyroData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	b21b      	sxth	r3, r3
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b219      	sxth	r1, r3
 8001308:	7afb      	ldrb	r3, [r7, #11]
 800130a:	b21a      	sxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3302      	adds	r3, #2
 8001310:	430a      	orrs	r2, r1
 8001312:	b212      	sxth	r2, r2
 8001314:	801a      	strh	r2, [r3, #0]
    gyroData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	b21b      	sxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b219      	sxth	r1, r3
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	b21a      	sxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3304      	adds	r3, #4
 8001326:	430a      	orrs	r2, r1
 8001328:	b212      	sxth	r2, r2
 800132a:	801a      	strh	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	0000      	movs	r0, r0
	...

08001338 <IMU_GetConvertedData>:

void IMU_GetConvertedData(float *accel, float *gyro) {
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
    int16_t accelData[3], gyroData[3];
    IMU_ReadAccelData(accelData);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff68 	bl	800121c <IMU_ReadAccelData>
    IMU_ReadGyroData(gyroData);
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ffa9 	bl	80012a8 <IMU_ReadGyroData>

    accel[0] = (float)accelData[0] / ACCEL_SCALE * 9.81;
 8001356:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <IMU_GetConvertedData+0x1a0>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800136c:	ee16 0a90 	vmov	r0, s13
 8001370:	f7ff f912 	bl	8000598 <__aeabi_f2d>
 8001374:	a354      	add	r3, pc, #336	@ (adr r3, 80014c8 <IMU_GetConvertedData+0x190>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f965 	bl	8000648 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fc57 	bl	8000c38 <__aeabi_d2f>
 800138a:	4602      	mov	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	601a      	str	r2, [r3, #0]
    accel[1] = (float)accelData[1] / ACCEL_SCALE * 9.81;
 8001390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139c:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <IMU_GetConvertedData+0x1a0>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013a6:	ee16 0a90 	vmov	r0, s13
 80013aa:	f7ff f8f5 	bl	8000598 <__aeabi_f2d>
 80013ae:	a346      	add	r3, pc, #280	@ (adr r3, 80014c8 <IMU_GetConvertedData+0x190>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f948 	bl	8000648 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1d1c      	adds	r4, r3, #4
 80013c4:	f7ff fc38 	bl	8000c38 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	6023      	str	r3, [r4, #0]
    accel[2] = (float)accelData[2] / ACCEL_SCALE * 9.81;
 80013cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d8:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <IMU_GetConvertedData+0x1a0>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013e2:	ee16 0a90 	vmov	r0, s13
 80013e6:	f7ff f8d7 	bl	8000598 <__aeabi_f2d>
 80013ea:	a337      	add	r3, pc, #220	@ (adr r3, 80014c8 <IMU_GetConvertedData+0x190>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f92a 	bl	8000648 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f103 0408 	add.w	r4, r3, #8
 8001402:	f7ff fc19 	bl	8000c38 <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
 8001408:	6023      	str	r3, [r4, #0]

    gyro[0] = (float)gyroData[0] / GYRO_SCALE * (M_PI / 180.0);
 800140a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001416:	4b31      	ldr	r3, [pc, #196]	@ (80014dc <IMU_GetConvertedData+0x1a4>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001420:	ee16 0a90 	vmov	r0, s13
 8001424:	f7ff f8b8 	bl	8000598 <__aeabi_f2d>
 8001428:	a329      	add	r3, pc, #164	@ (adr r3, 80014d0 <IMU_GetConvertedData+0x198>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f90b 	bl	8000648 <__aeabi_dmul>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fbfd 	bl	8000c38 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	601a      	str	r2, [r3, #0]
    gyro[1] = (float)gyroData[1] / GYRO_SCALE * (M_PI / 180.0);
 8001444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <IMU_GetConvertedData+0x1a4>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800145a:	ee16 0a90 	vmov	r0, s13
 800145e:	f7ff f89b 	bl	8000598 <__aeabi_f2d>
 8001462:	a31b      	add	r3, pc, #108	@ (adr r3, 80014d0 <IMU_GetConvertedData+0x198>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8ee 	bl	8000648 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	1d1c      	adds	r4, r3, #4
 8001478:	f7ff fbde 	bl	8000c38 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	6023      	str	r3, [r4, #0]
    gyro[2] = (float)gyroData[2] / GYRO_SCALE * (M_PI / 180.0);
 8001480:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <IMU_GetConvertedData+0x1a4>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001496:	ee16 0a90 	vmov	r0, s13
 800149a:	f7ff f87d 	bl	8000598 <__aeabi_f2d>
 800149e:	a30c      	add	r3, pc, #48	@ (adr r3, 80014d0 <IMU_GetConvertedData+0x198>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8d0 	bl	8000648 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f103 0408 	add.w	r4, r3, #8
 80014b6:	f7ff fbbf 	bl	8000c38 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	6023      	str	r3, [r4, #0]
}
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	51eb851f 	.word	0x51eb851f
 80014cc:	40239eb8 	.word	0x40239eb8
 80014d0:	a2529d39 	.word	0xa2529d39
 80014d4:	3f91df46 	.word	0x3f91df46
 80014d8:	20000004 	.word	0x20000004
 80014dc:	20000000 	.word	0x20000000

080014e0 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001510:	f7ff fb2a 	bl	8000b68 <__aeabi_dcmpgt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8001526:	e011      	b.n	800154c <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001534:	f7ff fafa 	bl	8000b2c <__aeabi_dcmplt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d100      	bne.n	8001540 <PID_Init+0x60>
}
 800153e:	e005      	b.n	800154c <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	0000      	movs	r0, r0
	...

08001558 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001560:	6239      	str	r1, [r7, #32]
 8001562:	61fa      	str	r2, [r7, #28]
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	ed87 0b04 	vstr	d0, [r7, #16]
 800156a:	ed87 1b02 	vstr	d1, [r7, #8]
 800156e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	2200      	movs	r2, #0
 8001588:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800158a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 80015e0 <PID+0x88>
 800158e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80015e8 <PID+0x90>
 8001592:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001594:	f000 f956 	bl	8001844 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	2264      	movs	r2, #100	@ 0x64
 800159c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800159e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80015a2:	4619      	mov	r1, r3
 80015a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015a6:	f000 fa63 	bl	8001a70 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80015aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80015ae:	4619      	mov	r1, r3
 80015b0:	ed97 2b00 	vldr	d2, [r7]
 80015b4:	ed97 1b02 	vldr	d1, [r7, #8]
 80015b8:	ed97 0b04 	vldr	d0, [r7, #16]
 80015bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015be:	f000 f9af 	bl	8001920 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80015c2:	f002 f855 	bl	8003670 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	605a      	str	r2, [r3, #4]

}
 80015d2:	bf00      	nop
 80015d4:	3728      	adds	r7, #40	@ 0x28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	00000000 	.word	0x00000000
 80015e4:	406fe000 	.word	0x406fe000
	...

080015f0 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80015f8:	6239      	str	r1, [r7, #32]
 80015fa:	61fa      	str	r2, [r7, #28]
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001602:	ed87 1b02 	vstr	d1, [r7, #8]
 8001606:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 800160a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2301      	movs	r3, #1
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	ed97 2b00 	vldr	d2, [r7]
 8001618:	ed97 1b02 	vldr	d1, [r7, #8]
 800161c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	6a39      	ldr	r1, [r7, #32]
 8001626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001628:	f7ff ff96 	bl	8001558 <PID>
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b08c      	sub	sp, #48	@ 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <PID_Compute+0x14>
	{
		return _FALSE;
 8001644:	2300      	movs	r3, #0
 8001646:	e0db      	b.n	8001800 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001648:	f002 f812 	bl	8003670 <HAL_GetTick>
 800164c:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	429a      	cmp	r2, r3
 8001660:	f0c0 80cd 	bcc.w	80017fe <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800167c:	f7fe fe2c 	bl	80002d8 <__aeabi_dsub>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800168e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001692:	f7fe fe21 	bl	80002d8 <__aeabi_dsub>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80016aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016ae:	f7fe ffcb 	bl	8000648 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fe0f 	bl	80002dc <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d114      	bne.n	80016fa <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80016dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016e0:	f7fe ffb2 	bl	8000648 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fdf4 	bl	80002d8 <__aeabi_dsub>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001706:	f7ff fa2f 	bl	8000b68 <__aeabi_dcmpgt>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800171c:	e010      	b.n	8001740 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800172a:	f7ff f9ff 	bl	8000b2c <__aeabi_dcmplt>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800174e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001752:	f7fe ff79 	bl	8000648 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800175e:	e005      	b.n	800176c <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177c:	f7fe ff64 	bl	8000648 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fda6 	bl	80002d8 <__aeabi_dsub>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001794:	f7fe fda2 	bl	80002dc <__adddf3>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80017a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017aa:	f7ff f9dd 	bl	8000b68 <__aeabi_dcmpgt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80017ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80017be:	e00e      	b.n	80017de <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017ca:	f7ff f9af 	bl	8000b2c <__aeabi_dcmplt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017da:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80017e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017e6:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017f0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f8:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 80017fe:	2300      	movs	r3, #0
	}

}
 8001800:	4618      	mov	r0, r3
 8001802:	3730      	adds	r7, #48	@ 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bdb0      	pop	{r4, r5, r7, pc}

08001808 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b01      	cmp	r3, #1
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <PID_SetMode+0x2e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fe55 	bl	80014e0 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	705a      	strb	r2, [r3, #1]

}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6178      	str	r0, [r7, #20]
 800184c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001850:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800185c:	f7ff f97a 	bl	8000b54 <__aeabi_dcmpge>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d158      	bne.n	8001918 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8001866:	6979      	ldr	r1, [r7, #20]
 8001868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001876:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d04b      	beq.n	800191a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	e9d3 0100 	ldrd	r0, r1, [r3]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001890:	f7ff f96a 	bl	8000b68 <__aeabi_dcmpgt>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018a4:	e9c1 2300 	strd	r2, r3, [r1]
 80018a8:	e012      	b.n	80018d0 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018b8:	f7ff f938 	bl	8000b2c <__aeabi_dcmplt>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018dc:	f7ff f944 	bl	8000b68 <__aeabi_dcmpgt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80018f2:	e012      	b.n	800191a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001900:	f7ff f914 	bl	8000b2c <__aeabi_dcmplt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001910:	6979      	ldr	r1, [r7, #20]
 8001912:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001916:	e000      	b.n	800191a <PID_SetOutputLimits+0xd6>
		return;
 8001918:	bf00      	nop
		}
		else { }

	}

}
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	61f8      	str	r0, [r7, #28]
 8001928:	ed87 0b04 	vstr	d0, [r7, #16]
 800192c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001930:	ed87 2b00 	vstr	d2, [r7]
 8001934:	460b      	mov	r3, r1
 8001936:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001944:	f7ff f8f2 	bl	8000b2c <__aeabi_dcmplt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 8089 	bne.w	8001a62 <PID_SetTunings2+0x142>
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800195c:	f7ff f8e6 	bl	8000b2c <__aeabi_dcmplt>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d17d      	bne.n	8001a62 <PID_SetTunings2+0x142>
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	f04f 0300 	mov.w	r3, #0
 800196e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001972:	f7ff f8db 	bl	8000b2c <__aeabi_dcmplt>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d172      	bne.n	8001a62 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	7efa      	ldrb	r2, [r7, #27]
 8001980:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001982:	7efb      	ldrb	r3, [r7, #27]
 8001984:	2b01      	cmp	r3, #1
 8001986:	bf0c      	ite	eq
 8001988:	2301      	moveq	r3, #1
 800198a:	2300      	movne	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001994:	69f9      	ldr	r1, [r7, #28]
 8001996:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800199a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800199e:	69f9      	ldr	r1, [r7, #28]
 80019a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80019a8:	69f9      	ldr	r1, [r7, #28]
 80019aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ae:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdcc 	bl	8000554 <__aeabi_ui2d>
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <PID_SetTunings2+0x14c>)
 80019c2:	f7fe ff6b 	bl	800089c <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80019ce:	69f9      	ldr	r1, [r7, #28]
 80019d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80019d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019e0:	f7fe fe32 	bl	8000648 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	69f9      	ldr	r1, [r7, #28]
 80019ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f6:	f7fe ff51 	bl	800089c <__aeabi_ddiv>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	69f9      	ldr	r1, [r7, #28]
 8001a00:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	78db      	ldrb	r3, [r3, #3]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d12b      	bne.n	8001a64 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	f7fe fc5d 	bl	80002d8 <__aeabi_dsub>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	69f9      	ldr	r1, [r7, #28]
 8001a24:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	f7fe fc4f 	bl	80002d8 <__aeabi_dsub>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	69f9      	ldr	r1, [r7, #28]
 8001a40:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f7fe fc41 	bl	80002d8 <__aeabi_dsub>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	69f9      	ldr	r1, [r7, #28]
 8001a5c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001a60:	e000      	b.n	8001a64 <PID_SetTunings2+0x144>
		return;
 8001a62:	bf00      	nop

	}

}
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	408f4000 	.word	0x408f4000

08001a70 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d02e      	beq.n	8001ae2 <PID_SetControllerDirection+0x72>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d029      	beq.n	8001ae2 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	f7fe fc1c 	bl	80002d8 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	f7fe fc0e 	bl	80002d8 <__aeabi_dsub>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	f7fe fc00 	bl	80002d8 <__aeabi_dsub>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	70da      	strb	r2, [r3, #3]

}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dd2e      	ble.n	8001b5e <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f7fe fd37 	bl	8000574 <__aeabi_i2d>
 8001b06:	4604      	mov	r4, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd20 	bl	8000554 <__aeabi_ui2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe febe 	bl	800089c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b32:	f7fe fd89 	bl	8000648 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b4a:	f7fe fea7 	bl	800089c <__aeabi_ddiv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

	}

}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b68 <VSSS_Init>:

static uint32_t last_rx_time = 0;
static uint32_t last_blink_time = 0;
static uint8_t led_state = 0;

void VSSS_Init(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    Kinematics_Init();
 8001b6c:	f000 f9ac 	bl	8001ec8 <Kinematics_Init>
    NRF24_Init();
 8001b70:	f001 f910 	bl	8002d94 <NRF24_Init>
    NRF24_RxMode(RxAddress, 125);
 8001b74:	217d      	movs	r1, #125	@ 0x7d
 8001b76:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <VSSS_Init+0x38>)
 8001b78:	f001 f92f 	bl	8002dda <NRF24_RxMode>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001b7c:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <VSSS_Init+0x3c>)
 8001b7e:	f7fe fb9f 	bl	80002c0 <strlen>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8a:	4906      	ldr	r1, [pc, #24]	@ (8001ba4 <VSSS_Init+0x3c>)
 8001b8c:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <VSSS_Init+0x40>)
 8001b8e:	f005 f9cd 	bl	8006f2c <HAL_UART_Transmit>
    last_rx_time = HAL_GetTick();
 8001b92:	f001 fd6d 	bl	8003670 <HAL_GetTick>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <VSSS_Init+0x44>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	20000598 	.word	0x20000598
 8001bac:	20000240 	.word	0x20000240

08001bb0 <VSSS_Run>:

void VSSS_Run(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    if (isDataAvailable(2)) {
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f001 f94f 	bl	8002e58 <isDataAvailable>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <VSSS_Run+0x1a>
        NRF24_Receive(robot.RxData);
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <VSSS_Run+0x48>)
 8001bc2:	f001 f969 	bl	8002e98 <NRF24_Receive>
        VSSS_ProcessReceivedData();
 8001bc6:	f000 f81f 	bl	8001c08 <VSSS_ProcessReceivedData>
    }

    if ((HAL_GetTick() - last_rx_time) > COMMUNICATION_TIMEOUT_MS) {
 8001bca:	f001 fd51 	bl	8003670 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <VSSS_Run+0x4c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001bda:	d90a      	bls.n	8001bf2 <VSSS_Run+0x42>
        Kinematics_SetSpeeds(0.0f, 0.0f);
 8001bdc:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001c00 <VSSS_Run+0x50>
 8001be0:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001c00 <VSSS_Run+0x50>
 8001be4:	f000 fa78 	bl	80020d8 <Kinematics_SetSpeeds>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2140      	movs	r1, #64	@ 0x40
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <VSSS_Run+0x54>)
 8001bee:	f001 ffd3 	bl	8003b98 <HAL_GPIO_WritePin>
    }
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000220 	.word	0x20000220
 8001bfc:	20000240 	.word	0x20000240
 8001c00:	00000000 	.word	0x00000000
 8001c04:	48000800 	.word	0x48000800

08001c08 <VSSS_ProcessReceivedData>:

void VSSS_ProcessReceivedData(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
    uint8_t real_size = robot.RxData[0];
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c10:	7b1b      	ldrb	r3, [r3, #12]
 8001c12:	73fb      	strb	r3, [r7, #15]
    const size_t expected_size = sizeof(int) + 2 * sizeof(float);
 8001c14:	230c      	movs	r3, #12
 8001c16:	60bb      	str	r3, [r7, #8]

    if (real_size >= expected_size) {
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d82d      	bhi.n	8001c7c <VSSS_ProcessReceivedData+0x74>
        int id_raw;
        memcpy(&id_raw, &robot.RxData[1], sizeof(int));
 8001c20:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c22:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8001c26:	607b      	str	r3, [r7, #4]
        robot.id = __builtin_bswap32(id_raw);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	ba1b      	rev	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c30:	601a      	str	r2, [r3, #0]

        memcpy(&robot.vL, &robot.RxData[5], sizeof(float));
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c34:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c3c:	605a      	str	r2, [r3, #4]
        memcpy(&robot.vR, &robot.RxData[9], sizeof(float));
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c40:	f8d3 3015 	ldr.w	r3, [r3, #21]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c48:	609a      	str	r2, [r3, #8]

        if (robot.id == ROBOT_ID) {
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d114      	bne.n	8001c7c <VSSS_ProcessReceivedData+0x74>
            last_rx_time = HAL_GetTick();
 8001c52:	f001 fd0d 	bl	8003670 <HAL_GetTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <VSSS_ProcessReceivedData+0x80>)
 8001c5a:	6013      	str	r3, [r2, #0]
            Kinematics_SetSpeeds(robot.vL, robot.vR);
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <VSSS_ProcessReceivedData+0x7c>)
 8001c64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c68:	eef0 0a47 	vmov.f32	s1, s14
 8001c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c70:	f000 fa32 	bl	80020d8 <Kinematics_SetSpeeds>
            VSSS_BlinkLED();
 8001c74:	f000 f80a 	bl	8001c8c <VSSS_BlinkLED>
            VSSS_DebugOutput();
 8001c78:	f000 f830 	bl	8001cdc <VSSS_DebugOutput>
        }
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000214 	.word	0x20000214
 8001c88:	20000240 	.word	0x20000240

08001c8c <VSSS_BlinkLED>:

void VSSS_BlinkLED(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() - last_blink_time) >= 200) {
 8001c90:	f001 fcee 	bl	8003670 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <VSSS_BlinkLED+0x44>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c9e:	d915      	bls.n	8001ccc <VSSS_BlinkLED+0x40>
        led_state = !led_state;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <VSSS_BlinkLED+0x48>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <VSSS_BlinkLED+0x48>)
 8001cb2:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, led_state);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	@ (8001cd4 <VSSS_BlinkLED+0x48>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2140      	movs	r1, #64	@ 0x40
 8001cbc:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <VSSS_BlinkLED+0x4c>)
 8001cbe:	f001 ff6b 	bl	8003b98 <HAL_GPIO_WritePin>
        last_blink_time = HAL_GetTick();
 8001cc2:	f001 fcd5 	bl	8003670 <HAL_GetTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4a01      	ldr	r2, [pc, #4]	@ (8001cd0 <VSSS_BlinkLED+0x44>)
 8001cca:	6013      	str	r3, [r2, #0]
    }
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000244 	.word	0x20000244
 8001cd4:	20000248 	.word	0x20000248
 8001cd8:	48000800 	.word	0x48000800

08001cdc <VSSS_DebugOutput>:

void VSSS_DebugOutput(void) {
 8001cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cde:	b095      	sub	sp, #84	@ 0x54
 8001ce0:	af04      	add	r7, sp, #16
    char buffer[64];
    snprintf(buffer, sizeof(buffer), "ID: %d, VL: %.2f, VR: %.2f\r\n", robot.id, robot.vL, robot.vR);
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <VSSS_DebugOutput+0x5c>)
 8001ce4:	681e      	ldr	r6, [r3, #0]
 8001ce6:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <VSSS_DebugOutput+0x5c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc54 	bl	8000598 <__aeabi_f2d>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	460d      	mov	r5, r1
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <VSSS_DebugOutput+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc4d 	bl	8000598 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4638      	mov	r0, r7
 8001d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d08:	e9cd 4500 	strd	r4, r5, [sp]
 8001d0c:	4633      	mov	r3, r6
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d3c <VSSS_DebugOutput+0x60>)
 8001d10:	2140      	movs	r1, #64	@ 0x40
 8001d12:	f006 fead 	bl	8008a70 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fad1 	bl	80002c0 <strlen>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4639      	mov	r1, r7
 8001d24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <VSSS_DebugOutput+0x64>)
 8001d2a:	f005 f8ff 	bl	8006f2c <HAL_UART_Transmit>
}
 8001d2e:	bf00      	nop
 8001d30:	3744      	adds	r7, #68	@ 0x44
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000214 	.word	0x20000214
 8001d3c:	0800c378 	.word	0x0800c378
 8001d40:	20000598 	.word	0x20000598

08001d44 <Encoder_Init>:

Encoder left_encoder;
Encoder right_encoder;

void Encoder_Init(Encoder *encoder, TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	601a      	str	r2, [r3, #0]
    encoder->last_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	809a      	strh	r2, [r3, #4]
    encoder->last_time = HAL_GetTick();
 8001d60:	f001 fc86 	bl	8003670 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
    encoder->rpm = 0.0f;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <Encoder_Calculate_RPM>:

void Encoder_Calculate_RPM(Encoder *encoder)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

    uint32_t current_time = HAL_GetTick();
 8001d84:	f001 fc74 	bl	8003670 <HAL_GetTick>
 8001d88:	61b8      	str	r0, [r7, #24]
    uint32_t delta_time = current_time - encoder->last_time;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]


    if (delta_time == 0) {
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d044      	beq.n	8001e24 <Encoder_Calculate_RPM+0xa8>
        return;
    }

    int16_t current_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	827b      	strh	r3, [r7, #18]
    int16_t delta_encoder = current_encoder_value - encoder->last_encoder_value;
 8001da4:	8a7a      	ldrh	r2, [r7, #18]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	83fb      	strh	r3, [r7, #30]

    if (delta_encoder > (ENCODER_PULSES_PER_REV / 2)) {
 8001db4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001db8:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8001dbc:	db05      	blt.n	8001dca <Encoder_Calculate_RPM+0x4e>
        delta_encoder -= ENCODER_PULSES_PER_REV;
 8001dbe:	8bfb      	ldrh	r3, [r7, #30]
 8001dc0:	f6a3 23be 	subw	r3, r3, #2750	@ 0xabe
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	83fb      	strh	r3, [r7, #30]
 8001dc8:	e009      	b.n	8001dde <Encoder_Calculate_RPM+0x62>
    }
    else if (delta_encoder < -(ENCODER_PULSES_PER_REV / 2)) {
 8001dca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001dce:	f513 6fac 	cmn.w	r3, #1376	@ 0x560
 8001dd2:	dc04      	bgt.n	8001dde <Encoder_Calculate_RPM+0x62>
        delta_encoder += ENCODER_PULSES_PER_REV;
 8001dd4:	8bfb      	ldrh	r3, [r7, #30]
 8001dd6:	f603 23be 	addw	r3, r3, #2750	@ 0xabe
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	83fb      	strh	r3, [r7, #30]
    }

    float dt_min = (float)delta_time / 60000.0f;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001e2c <Encoder_Calculate_RPM+0xb0>
 8001dec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df0:	edc7 7a03 	vstr	s15, [r7, #12]

    encoder->rpm = ((float)delta_encoder / (float)ENCODER_PULSES_PER_REV) / dt_min;
 8001df4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e00:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001e30 <Encoder_Calculate_RPM+0xb4>
 8001e04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e08:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	edc3 7a03 	vstr	s15, [r3, #12]


    encoder->last_encoder_value = current_encoder_value;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	8a7a      	ldrh	r2, [r7, #18]
 8001e1a:	809a      	strh	r2, [r3, #4]
    encoder->last_time = current_time;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	e000      	b.n	8001e26 <Encoder_Calculate_RPM+0xaa>
        return;
 8001e24:	bf00      	nop
}
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	476a6000 	.word	0x476a6000
 8001e30:	452be000 	.word	0x452be000

08001e34 <Encoder_Update>:

void Encoder_Update(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
    Encoder_Calculate_RPM(&left_encoder);
 8001e38:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <Encoder_Update+0x14>)
 8001e3a:	f7ff ff9f 	bl	8001d7c <Encoder_Calculate_RPM>
    Encoder_Calculate_RPM(&right_encoder);
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <Encoder_Update+0x18>)
 8001e40:	f7ff ff9c 	bl	8001d7c <Encoder_Calculate_RPM>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000024c 	.word	0x2000024c
 8001e4c:	2000025c 	.word	0x2000025c

08001e50 <CalibrateGyro>:
char debug_imu[150];

static float theta_imu = 0.0;
static float gyro_bias = 0.0; // Compensação do giroscópio

void CalibrateGyro(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
    float sum = 0.0;
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
    int samples = 1000;
 8001e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e60:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < samples; i++) {
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	e012      	b.n	8001e8e <CalibrateGyro+0x3e>
        IMU_GetConvertedData(accel, gyro);
 8001e68:	4913      	ldr	r1, [pc, #76]	@ (8001eb8 <CalibrateGyro+0x68>)
 8001e6a:	4814      	ldr	r0, [pc, #80]	@ (8001ebc <CalibrateGyro+0x6c>)
 8001e6c:	f7ff fa64 	bl	8001338 <IMU_GetConvertedData>
        sum += gyro[2]; // Captura o bias do giroscópio
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <CalibrateGyro+0x68>)
 8001e72:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e76:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f001 fc00 	bl	8003688 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbe8      	blt.n	8001e68 <CalibrateGyro+0x18>
    }

    gyro_bias = sum / samples; // Calcula a média
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <CalibrateGyro+0x70>)
 8001eaa:	edc3 7a00 	vstr	s15, [r3]
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000038c 	.word	0x2000038c
 8001ebc:	20000380 	.word	0x20000380
 8001ec0:	2000039c 	.word	0x2000039c
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <Kinematics_Init>:

void Kinematics_Init(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af04      	add	r7, sp, #16
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ece:	213c      	movs	r1, #60	@ 0x3c
 8001ed0:	4845      	ldr	r0, [pc, #276]	@ (8001fe8 <Kinematics_Init+0x120>)
 8001ed2:	f003 ffdd 	bl	8005e90 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001ed6:	213c      	movs	r1, #60	@ 0x3c
 8001ed8:	4844      	ldr	r0, [pc, #272]	@ (8001fec <Kinematics_Init+0x124>)
 8001eda:	f003 ffd9 	bl	8005e90 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4843      	ldr	r0, [pc, #268]	@ (8001ff0 <Kinematics_Init+0x128>)
 8001ee2:	f003 fe2f 	bl	8005b44 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4842      	ldr	r0, [pc, #264]	@ (8001ff4 <Kinematics_Init+0x12c>)
 8001eea:	f003 fe2b 	bl	8005b44 <HAL_TIM_PWM_Start>

    IMU_Init();
 8001eee:	f7ff f8bf 	bl	8001070 <IMU_Init>
    CalibrateGyro(); // Calibra a IMU antes de começar
 8001ef2:	f7ff ffad 	bl	8001e50 <CalibrateGyro>

    Encoder_Init(&left_encoder, &htim3);
 8001ef6:	493c      	ldr	r1, [pc, #240]	@ (8001fe8 <Kinematics_Init+0x120>)
 8001ef8:	483f      	ldr	r0, [pc, #252]	@ (8001ff8 <Kinematics_Init+0x130>)
 8001efa:	f7ff ff23 	bl	8001d44 <Encoder_Init>
    Encoder_Init(&right_encoder, &htim4);
 8001efe:	493b      	ldr	r1, [pc, #236]	@ (8001fec <Kinematics_Init+0x124>)
 8001f00:	483e      	ldr	r0, [pc, #248]	@ (8001ffc <Kinematics_Init+0x134>)
 8001f02:	f7ff ff1f 	bl	8001d44 <Encoder_Init>

    Motor_Init(&motorLeft, &htim2, TIM_CHANNEL_1, INA1_GPIO_Port, INA1_Pin, INA2_GPIO_Port, INA2_Pin);
 8001f06:	2304      	movs	r3, #4
 8001f08:	9302      	str	r3, [sp, #8]
 8001f0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	2302      	movs	r3, #2
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4936      	ldr	r1, [pc, #216]	@ (8001ff4 <Kinematics_Init+0x12c>)
 8001f1c:	4838      	ldr	r0, [pc, #224]	@ (8002000 <Kinematics_Init+0x138>)
 8001f1e:	f000 fd7d 	bl	8002a1c <Motor_Init>
    Motor_Init(&motorRight, &htim1, TIM_CHANNEL_1, INB1_GPIO_Port, INB1_Pin, INB2_GPIO_Port, INB2_Pin);
 8001f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f38:	2200      	movs	r2, #0
 8001f3a:	492d      	ldr	r1, [pc, #180]	@ (8001ff0 <Kinematics_Init+0x128>)
 8001f3c:	4831      	ldr	r0, [pc, #196]	@ (8002004 <Kinematics_Init+0x13c>)
 8001f3e:	f000 fd6d 	bl	8002a1c <Motor_Init>

    PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8001f42:	2300      	movs	r3, #0
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 8001fc0 <Kinematics_Init+0xf8>
 8001f4a:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8001fc8 <Kinematics_Init+0x100>
 8001f4e:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8001fd0 <Kinematics_Init+0x108>
 8001f52:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <Kinematics_Init+0x140>)
 8001f54:	4a2d      	ldr	r2, [pc, #180]	@ (800200c <Kinematics_Init+0x144>)
 8001f56:	492e      	ldr	r1, [pc, #184]	@ (8002010 <Kinematics_Init+0x148>)
 8001f58:	482e      	ldr	r0, [pc, #184]	@ (8002014 <Kinematics_Init+0x14c>)
 8001f5a:	f7ff fb49 	bl	80015f0 <PID2>
    PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8001fc0 <Kinematics_Init+0xf8>
 8001f66:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001fc8 <Kinematics_Init+0x100>
 8001f6a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8001fd0 <Kinematics_Init+0x108>
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002018 <Kinematics_Init+0x150>)
 8001f70:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <Kinematics_Init+0x154>)
 8001f72:	492b      	ldr	r1, [pc, #172]	@ (8002020 <Kinematics_Init+0x158>)
 8001f74:	482b      	ldr	r0, [pc, #172]	@ (8002024 <Kinematics_Init+0x15c>)
 8001f76:	f7ff fb3b 	bl	80015f0 <PID2>

    PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8001f7a:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001fd8 <Kinematics_Init+0x110>
 8001f7e:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 8001fe0 <Kinematics_Init+0x118>
 8001f82:	4824      	ldr	r0, [pc, #144]	@ (8002014 <Kinematics_Init+0x14c>)
 8001f84:	f7ff fc5e 	bl	8001844 <PID_SetOutputLimits>
    PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 8001f88:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8001fd8 <Kinematics_Init+0x110>
 8001f8c:	ed9f 0b14 	vldr	d0, [pc, #80]	@ 8001fe0 <Kinematics_Init+0x118>
 8001f90:	4824      	ldr	r0, [pc, #144]	@ (8002024 <Kinematics_Init+0x15c>)
 8001f92:	f7ff fc57 	bl	8001844 <PID_SetOutputLimits>

    PID_SetSampleTime(&pidLeft, 1);
 8001f96:	2101      	movs	r1, #1
 8001f98:	481e      	ldr	r0, [pc, #120]	@ (8002014 <Kinematics_Init+0x14c>)
 8001f9a:	f7ff fda9 	bl	8001af0 <PID_SetSampleTime>
    PID_SetSampleTime(&pidRight, 1);
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4820      	ldr	r0, [pc, #128]	@ (8002024 <Kinematics_Init+0x15c>)
 8001fa2:	f7ff fda5 	bl	8001af0 <PID_SetSampleTime>

    PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	481a      	ldr	r0, [pc, #104]	@ (8002014 <Kinematics_Init+0x14c>)
 8001faa:	f7ff fc2d 	bl	8001808 <PID_SetMode>
    PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	481c      	ldr	r0, [pc, #112]	@ (8002024 <Kinematics_Init+0x15c>)
 8001fb2:	f7ff fc29 	bl	8001808 <PID_SetMode>
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	bce4217d 	.word	0xbce4217d
 8001fc4:	3f538fff 	.word	0x3f538fff
 8001fc8:	cccccccd 	.word	0xcccccccd
 8001fcc:	407864cc 	.word	0x407864cc
 8001fd0:	ba5e353f 	.word	0xba5e353f
 8001fd4:	3ff60c49 	.word	0x3ff60c49
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	409a8c00 	.word	0x409a8c00
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	c09a8c00 	.word	0xc09a8c00
 8001fe8:	20000500 	.word	0x20000500
 8001fec:	2000054c 	.word	0x2000054c
 8001ff0:	20000468 	.word	0x20000468
 8001ff4:	200004b4 	.word	0x200004b4
 8001ff8:	2000024c 	.word	0x2000024c
 8001ffc:	2000025c 	.word	0x2000025c
 8002000:	2000062c 	.word	0x2000062c
 8002004:	20000644 	.word	0x20000644
 8002008:	20000270 	.word	0x20000270
 800200c:	20000280 	.word	0x20000280
 8002010:	20000290 	.word	0x20000290
 8002014:	200002a0 	.word	0x200002a0
 8002018:	20000278 	.word	0x20000278
 800201c:	20000288 	.word	0x20000288
 8002020:	20000298 	.word	0x20000298
 8002024:	20000310 	.word	0x20000310

08002028 <LinearToRPM>:

/**
 * @brief Converte velocidade linear para RPM.
 */
float LinearToRPM(float v) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (v * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fab0 	bl	8000598 <__aeabi_f2d>
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <LinearToRPM+0x50>)
 800203e:	f7fe fb03 	bl	8000648 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	a309      	add	r3, pc, #36	@ (adr r3, 8002070 <LinearToRPM+0x48>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe fc24 	bl	800089c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fdec 	bl	8000c38 <__aeabi_d2f>
 8002060:	4603      	mov	r3, r0
 8002062:	ee07 3a90 	vmov	s15, r3
}
 8002066:	eeb0 0a67 	vmov.f32	s0, s15
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	5b22baa6 	.word	0x5b22baa6
 8002074:	3fd8209f 	.word	0x3fd8209f
 8002078:	404e0000 	.word	0x404e0000
 800207c:	00000000 	.word	0x00000000

08002080 <RPMToLinear>:

float RPMToLinear(double RPM){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0b00 	vstr	d0, [r7]
    return (RPM * (2 * M_PI * WHEEL_RADIUS) / 60.0);
 800208a:	a310      	add	r3, pc, #64	@ (adr r3, 80020cc <RPMToLinear+0x4c>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002094:	f7fe fad8 	bl	8000648 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <RPMToLinear+0x48>)
 80020a6:	f7fe fbf9 	bl	800089c <__aeabi_ddiv>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fdc1 	bl	8000c38 <__aeabi_d2f>
 80020b6:	4603      	mov	r3, r0
 80020b8:	ee07 3a90 	vmov	s15, r3
}
 80020bc:	eeb0 0a67 	vmov.f32	s0, s15
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	404e0000 	.word	0x404e0000
 80020cc:	5b22baa6 	.word	0x5b22baa6
 80020d0:	3fd8209f 	.word	0x3fd8209f
 80020d4:	00000000 	.word	0x00000000

080020d8 <Kinematics_SetSpeeds>:

/**
 * @brief Define as velocidades do robô com base em velocidades lineares (m/s).
 */
void Kinematics_SetSpeeds(float vL, float vR) {
 80020d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e4:	edc7 0a00 	vstr	s1, [r7]
    Encoder_Update();
 80020e8:	f7ff fea4 	bl	8001e34 <Encoder_Update>
    IMU_GetConvertedData(accel, gyro);
 80020ec:	4978      	ldr	r1, [pc, #480]	@ (80022d0 <Kinematics_SetSpeeds+0x1f8>)
 80020ee:	4879      	ldr	r0, [pc, #484]	@ (80022d4 <Kinematics_SetSpeeds+0x1fc>)
 80020f0:	f7ff f922 	bl	8001338 <IMU_GetConvertedData>

    theta_imu += (gyro[2] - gyro_bias) * 0.01;
 80020f4:	4b78      	ldr	r3, [pc, #480]	@ (80022d8 <Kinematics_SetSpeeds+0x200>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa4d 	bl	8000598 <__aeabi_f2d>
 80020fe:	4682      	mov	sl, r0
 8002100:	468b      	mov	fp, r1
 8002102:	4b73      	ldr	r3, [pc, #460]	@ (80022d0 <Kinematics_SetSpeeds+0x1f8>)
 8002104:	ed93 7a02 	vldr	s14, [r3, #8]
 8002108:	4b74      	ldr	r3, [pc, #464]	@ (80022dc <Kinematics_SetSpeeds+0x204>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002112:	ee17 0a90 	vmov	r0, s15
 8002116:	f7fe fa3f 	bl	8000598 <__aeabi_f2d>
 800211a:	a369      	add	r3, pc, #420	@ (adr r3, 80022c0 <Kinematics_SetSpeeds+0x1e8>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe fa92 	bl	8000648 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4650      	mov	r0, sl
 800212a:	4659      	mov	r1, fp
 800212c:	f7fe f8d6 	bl	80002dc <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd7e 	bl	8000c38 <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	4a66      	ldr	r2, [pc, #408]	@ (80022d8 <Kinematics_SetSpeeds+0x200>)
 8002140:	6013      	str	r3, [r2, #0]

    float vL_real = RPMToLinear(left_encoder.rpm);
 8002142:	4b67      	ldr	r3, [pc, #412]	@ (80022e0 <Kinematics_SetSpeeds+0x208>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa26 	bl	8000598 <__aeabi_f2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ec43 2b10 	vmov	d0, r2, r3
 8002154:	f7ff ff94 	bl	8002080 <RPMToLinear>
 8002158:	ed87 0a05 	vstr	s0, [r7, #20]
    float vR_real = RPMToLinear(right_encoder.rpm);
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <Kinematics_SetSpeeds+0x20c>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fa19 	bl	8000598 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	ec43 2b10 	vmov	d0, r2, r3
 800216e:	f7ff ff87 	bl	8002080 <RPMToLinear>
 8002172:	ed87 0a04 	vstr	s0, [r7, #16]

    // Se os dois motores pararam, resetamos o ângulo estimado
    if (fabs(vL_real) < 0.001 && fabs(vR_real) < 0.001) {
 8002176:	edd7 7a05 	vldr	s15, [r7, #20]
 800217a:	eef0 7ae7 	vabs.f32	s15, s15
 800217e:	ee17 0a90 	vmov	r0, s15
 8002182:	f7fe fa09 	bl	8000598 <__aeabi_f2d>
 8002186:	a350      	add	r3, pc, #320	@ (adr r3, 80022c8 <Kinematics_SetSpeeds+0x1f0>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fcce 	bl	8000b2c <__aeabi_dcmplt>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d013      	beq.n	80021be <Kinematics_SetSpeeds+0xe6>
 8002196:	edd7 7a04 	vldr	s15, [r7, #16]
 800219a:	eef0 7ae7 	vabs.f32	s15, s15
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe f9f9 	bl	8000598 <__aeabi_f2d>
 80021a6:	a348      	add	r3, pc, #288	@ (adr r3, 80022c8 <Kinematics_SetSpeeds+0x1f0>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe fcbe 	bl	8000b2c <__aeabi_dcmplt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <Kinematics_SetSpeeds+0xe6>
        theta_imu = 0.0;
 80021b6:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <Kinematics_SetSpeeds+0x200>)
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]

    // Debug opcional:
    // snprintf(debug_imu, sizeof(debug_imu), "Theta IMU: %.2f rad\r\n", theta_imu);
    // HAL_UART_Transmit(&huart1, (uint8_t*)debug_imu, strlen(debug_imu), HAL_MAX_DELAY);

    float target_rpm_left = LinearToRPM(vL);
 80021be:	ed97 0a01 	vldr	s0, [r7, #4]
 80021c2:	f7ff ff31 	bl	8002028 <LinearToRPM>
 80021c6:	ed87 0a03 	vstr	s0, [r7, #12]
    float target_rpm_right = LinearToRPM(vR);
 80021ca:	ed97 0a00 	vldr	s0, [r7]
 80021ce:	f7ff ff2b 	bl	8002028 <LinearToRPM>
 80021d2:	ed87 0a02 	vstr	s0, [r7, #8]

    setpoint_left_rpm  = target_rpm_left;
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f7fe f9de 	bl	8000598 <__aeabi_f2d>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4941      	ldr	r1, [pc, #260]	@ (80022e8 <Kinematics_SetSpeeds+0x210>)
 80021e2:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 80021e6:	68b8      	ldr	r0, [r7, #8]
 80021e8:	f7fe f9d6 	bl	8000598 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	493e      	ldr	r1, [pc, #248]	@ (80022ec <Kinematics_SetSpeeds+0x214>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_encoder.rpm;
 80021f6:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <Kinematics_SetSpeeds+0x208>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f9cc 	bl	8000598 <__aeabi_f2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	493a      	ldr	r1, [pc, #232]	@ (80022f0 <Kinematics_SetSpeeds+0x218>)
 8002206:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_encoder.rpm;
 800220a:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <Kinematics_SetSpeeds+0x20c>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f9c2 	bl	8000598 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4936      	ldr	r1, [pc, #216]	@ (80022f4 <Kinematics_SetSpeeds+0x21c>)
 800221a:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 800221e:	4836      	ldr	r0, [pc, #216]	@ (80022f8 <Kinematics_SetSpeeds+0x220>)
 8002220:	f7ff fa08 	bl	8001634 <PID_Compute>
    PID_Compute(&pidRight);
 8002224:	4835      	ldr	r0, [pc, #212]	@ (80022fc <Kinematics_SetSpeeds+0x224>)
 8002226:	f7ff fa05 	bl	8001634 <PID_Compute>

    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 800222a:	4b35      	ldr	r3, [pc, #212]	@ (8002300 <Kinematics_SetSpeeds+0x228>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	4690      	mov	r8, r2
 8002232:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002236:	4640      	mov	r0, r8
 8002238:	4649      	mov	r1, r9
 800223a:	f7fe fcdd 	bl	8000bf8 <__aeabi_d2uiz>
 800223e:	4680      	mov	r8, r0
 8002240:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <Kinematics_SetSpeeds+0x228>)
 8002242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002246:	2301      	movs	r3, #1
 8002248:	461e      	mov	r6, r3
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f7fe fc7f 	bl	8000b54 <__aeabi_dcmpge>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <Kinematics_SetSpeeds+0x188>
 800225c:	2300      	movs	r3, #0
 800225e:	461e      	mov	r6, r3
 8002260:	b2f3      	uxtb	r3, r6
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	b2de      	uxtb	r6, r3
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 800226a:	4b26      	ldr	r3, [pc, #152]	@ (8002304 <Kinematics_SetSpeeds+0x22c>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	4614      	mov	r4, r2
 8002272:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe fcbd 	bl	8000bf8 <__aeabi_d2uiz>
 800227e:	4604      	mov	r4, r0
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 8002280:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <Kinematics_SetSpeeds+0x22c>)
 8002282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002286:	2301      	movs	r3, #1
 8002288:	461d      	mov	r5, r3
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	f7fe fc5f 	bl	8000b54 <__aeabi_dcmpge>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <Kinematics_SetSpeeds+0x1c8>
 800229c:	2300      	movs	r3, #0
 800229e:	461d      	mov	r5, r3
 80022a0:	b2eb      	uxtb	r3, r5
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4622      	mov	r2, r4
 80022ac:	4631      	mov	r1, r6
 80022ae:	4640      	mov	r0, r8
 80022b0:	f000 fbda 	bl	8002a68 <Motor_Control>
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022be:	bf00      	nop
 80022c0:	47ae147b 	.word	0x47ae147b
 80022c4:	3f847ae1 	.word	0x3f847ae1
 80022c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80022cc:	3f50624d 	.word	0x3f50624d
 80022d0:	2000038c 	.word	0x2000038c
 80022d4:	20000380 	.word	0x20000380
 80022d8:	20000398 	.word	0x20000398
 80022dc:	2000039c 	.word	0x2000039c
 80022e0:	2000024c 	.word	0x2000024c
 80022e4:	2000025c 	.word	0x2000025c
 80022e8:	20000270 	.word	0x20000270
 80022ec:	20000278 	.word	0x20000278
 80022f0:	20000290 	.word	0x20000290
 80022f4:	20000298 	.word	0x20000298
 80022f8:	200002a0 	.word	0x200002a0
 80022fc:	20000310 	.word	0x20000310
 8002300:	20000280 	.word	0x20000280
 8002304:	20000288 	.word	0x20000288

08002308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800230c:	f001 f94b 	bl	80035a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002310:	f000 f815 	bl	800233e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002314:	f000 faf8 	bl	8002908 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002318:	f000 f8d6 	bl	80024c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800231c:	f000 f984 	bl	8002628 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002320:	f000 f9f8 	bl	8002714 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002324:	f000 fa4c 	bl	80027c0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002328:	f000 f852 	bl	80023d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800232c:	f000 fa9e 	bl	800286c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002330:	f000 f88c 	bl	800244c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  VSSS_Init();
 8002334:	f7ff fc18 	bl	8001b68 <VSSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VSSS_Run();
 8002338:	f7ff fc3a 	bl	8001bb0 <VSSS_Run>
 800233c:	e7fc      	b.n	8002338 <main+0x30>

0800233e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b094      	sub	sp, #80	@ 0x50
 8002342:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	2238      	movs	r2, #56	@ 0x38
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f006 fcbf 	bl	8008cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002360:	2000      	movs	r0, #0
 8002362:	f001 fc31 	bl	8003bc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800236a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800236e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002370:	2302      	movs	r3, #2
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002374:	2303      	movs	r3, #3
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002378:	2302      	movs	r3, #2
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800237c:	2355      	movs	r3, #85	@ 0x55
 800237e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002380:	2302      	movs	r3, #2
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002384:	2302      	movs	r3, #2
 8002386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002388:	2302      	movs	r3, #2
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238c:	f107 0318 	add.w	r3, r7, #24
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fccd 	bl	8003d30 <HAL_RCC_OscConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800239c:	f000 fb38 	bl	8002a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a0:	230f      	movs	r3, #15
 80023a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a4:	2303      	movs	r3, #3
 80023a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	2104      	movs	r1, #4
 80023b8:	4618      	mov	r0, r3
 80023ba:	f001 ffcb 	bl	8004354 <HAL_RCC_ClockConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023c4:	f000 fb24 	bl	8002a10 <Error_Handler>
  }
}
 80023c8:	bf00      	nop
 80023ca:	3750      	adds	r7, #80	@ 0x50
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <MX_SPI1_Init+0x74>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002448 <MX_SPI1_Init+0x78>)
 80023d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <MX_SPI1_Init+0x74>)
 80023dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023e2:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <MX_SPI1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e8:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <MX_SPI1_Init+0x74>)
 80023ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80023ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <MX_SPI1_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <MX_SPI1_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <MX_SPI1_Init+0x74>)
 80023fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002404:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <MX_SPI1_Init+0x74>)
 8002406:	2220      	movs	r2, #32
 8002408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240a:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <MX_SPI1_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002410:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <MX_SPI1_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <MX_SPI1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <MX_SPI1_Init+0x74>)
 800241e:	2207      	movs	r2, #7
 8002420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <MX_SPI1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <MX_SPI1_Init+0x74>)
 800242a:	2208      	movs	r2, #8
 800242c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <MX_SPI1_Init+0x74>)
 8002430:	f002 fb9c 	bl	8004b6c <HAL_SPI_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800243a:	f000 fae9 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200003a0 	.word	0x200003a0
 8002448:	40013000 	.word	0x40013000

0800244c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002450:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002452:	4a1c      	ldr	r2, [pc, #112]	@ (80024c4 <MX_SPI2_Init+0x78>)
 8002454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002458:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800245c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002466:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800246a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800246c:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <MX_SPI2_Init+0x74>)
 800246e:	2202      	movs	r2, #2
 8002470:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002472:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002474:	2201      	movs	r2, #1
 8002476:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <MX_SPI2_Init+0x74>)
 800247a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002482:	2228      	movs	r2, #40	@ 0x28
 8002484:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <MX_SPI2_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002492:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <MX_SPI2_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002498:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <MX_SPI2_Init+0x74>)
 800249a:	2207      	movs	r2, #7
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800249e:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <MX_SPI2_Init+0x74>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80024a4:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <MX_SPI2_Init+0x74>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024aa:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <MX_SPI2_Init+0x74>)
 80024ac:	f002 fb5e 	bl	8004b6c <HAL_SPI_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024b6:	f000 faab 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000404 	.word	0x20000404
 80024c4:	40003800 	.word	0x40003800

080024c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b09c      	sub	sp, #112	@ 0x70
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2234      	movs	r2, #52	@ 0x34
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f006 fbe4 	bl	8008cd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002508:	4b45      	ldr	r3, [pc, #276]	@ (8002620 <MX_TIM1_Init+0x158>)
 800250a:	4a46      	ldr	r2, [pc, #280]	@ (8002624 <MX_TIM1_Init+0x15c>)
 800250c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800250e:	4b44      	ldr	r3, [pc, #272]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	4b42      	ldr	r3, [pc, #264]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 800251a:	4b41      	ldr	r3, [pc, #260]	@ (8002620 <MX_TIM1_Init+0x158>)
 800251c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002520:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b3f      	ldr	r3, [pc, #252]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002528:	4b3d      	ldr	r3, [pc, #244]	@ (8002620 <MX_TIM1_Init+0x158>)
 800252a:	2200      	movs	r2, #0
 800252c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002534:	483a      	ldr	r0, [pc, #232]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002536:	f003 fa4d 	bl	80059d4 <HAL_TIM_Base_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002540:	f000 fa66 	bl	8002a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002544:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002548:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800254a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800254e:	4619      	mov	r1, r3
 8002550:	4833      	ldr	r0, [pc, #204]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002552:	f003 fe3f 	bl	80061d4 <HAL_TIM_ConfigClockSource>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800255c:	f000 fa58 	bl	8002a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002560:	482f      	ldr	r0, [pc, #188]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002562:	f003 fa8e 	bl	8005a82 <HAL_TIM_PWM_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800256c:	f000 fa50 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800257c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002580:	4619      	mov	r1, r3
 8002582:	4827      	ldr	r0, [pc, #156]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002584:	f004 fb74 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800258e:	f000 fa3f 	bl	8002a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002592:	2360      	movs	r3, #96	@ 0x60
 8002594:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259a:	2300      	movs	r3, #0
 800259c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800259e:	2300      	movs	r3, #0
 80025a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025b2:	2200      	movs	r2, #0
 80025b4:	4619      	mov	r1, r3
 80025b6:	481a      	ldr	r0, [pc, #104]	@ (8002620 <MX_TIM1_Init+0x158>)
 80025b8:	f003 fcf8 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80025c2:	f000 fa25 	bl	8002a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80025f6:	2300      	movs	r3, #0
 80025f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4807      	ldr	r0, [pc, #28]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002604:	f004 fbb6 	bl	8006d74 <HAL_TIMEx_ConfigBreakDeadTime>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800260e:	f000 f9ff 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002612:	4803      	ldr	r0, [pc, #12]	@ (8002620 <MX_TIM1_Init+0x158>)
 8002614:	f000 fdc6 	bl	80031a4 <HAL_TIM_MspPostInit>

}
 8002618:	bf00      	nop
 800261a:	3770      	adds	r7, #112	@ 0x70
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000468 	.word	0x20000468
 8002624:	40012c00 	.word	0x40012c00

08002628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	@ 0x38
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002648:	463b      	mov	r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800265a:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <MX_TIM2_Init+0xe8>)
 800265c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002660:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002662:	4b2b      	ldr	r3, [pc, #172]	@ (8002710 <MX_TIM2_Init+0xe8>)
 8002664:	2200      	movs	r2, #0
 8002666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002668:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <MX_TIM2_Init+0xe8>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 800266e:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <MX_TIM2_Init+0xe8>)
 8002670:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <MX_TIM2_Init+0xe8>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <MX_TIM2_Init+0xe8>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002682:	4823      	ldr	r0, [pc, #140]	@ (8002710 <MX_TIM2_Init+0xe8>)
 8002684:	f003 f9a6 	bl	80059d4 <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800268e:	f000 f9bf 	bl	8002a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002698:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800269c:	4619      	mov	r1, r3
 800269e:	481c      	ldr	r0, [pc, #112]	@ (8002710 <MX_TIM2_Init+0xe8>)
 80026a0:	f003 fd98 	bl	80061d4 <HAL_TIM_ConfigClockSource>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80026aa:	f000 f9b1 	bl	8002a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026ae:	4818      	ldr	r0, [pc, #96]	@ (8002710 <MX_TIM2_Init+0xe8>)
 80026b0:	f003 f9e7 	bl	8005a82 <HAL_TIM_PWM_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80026ba:	f000 f9a9 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4810      	ldr	r0, [pc, #64]	@ (8002710 <MX_TIM2_Init+0xe8>)
 80026ce:	f004 facf 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80026d8:	f000 f99a 	bl	8002a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026dc:	2360      	movs	r3, #96	@ 0x60
 80026de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	4807      	ldr	r0, [pc, #28]	@ (8002710 <MX_TIM2_Init+0xe8>)
 80026f4:	f003 fc5a 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80026fe:	f000 f987 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002702:	4803      	ldr	r0, [pc, #12]	@ (8002710 <MX_TIM2_Init+0xe8>)
 8002704:	f000 fd4e 	bl	80031a4 <HAL_TIM_MspPostInit>

}
 8002708:	bf00      	nop
 800270a:	3738      	adds	r7, #56	@ 0x38
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200004b4 	.word	0x200004b4

08002714 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	@ 0x30
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2224      	movs	r2, #36	@ 0x24
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f006 fad4 	bl	8008cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	463b      	mov	r3, r7
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002732:	4b21      	ldr	r3, [pc, #132]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 8002734:	4a21      	ldr	r2, [pc, #132]	@ (80027bc <MX_TIM3_Init+0xa8>)
 8002736:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002738:	4b1f      	ldr	r3, [pc, #124]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	4b1e      	ldr	r3, [pc, #120]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002744:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 8002746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800274a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002752:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002758:	2303      	movs	r3, #3
 800275a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002760:	2301      	movs	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800276c:	2300      	movs	r3, #0
 800276e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002770:	2301      	movs	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	4619      	mov	r1, r3
 8002782:	480d      	ldr	r0, [pc, #52]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 8002784:	f003 fade 	bl	8005d44 <HAL_TIM_Encoder_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800278e:	f000 f93f 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	4619      	mov	r1, r3
 800279e:	4806      	ldr	r0, [pc, #24]	@ (80027b8 <MX_TIM3_Init+0xa4>)
 80027a0:	f004 fa66 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80027aa:	f000 f931 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	3730      	adds	r7, #48	@ 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000500 	.word	0x20000500
 80027bc:	40000400 	.word	0x40000400

080027c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	@ 0x30
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	2224      	movs	r2, #36	@ 0x24
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f006 fa7e 	bl	8008cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d4:	463b      	mov	r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027de:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <MX_TIM4_Init+0xa4>)
 80027e0:	4a21      	ldr	r2, [pc, #132]	@ (8002868 <MX_TIM4_Init+0xa8>)
 80027e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002864 <MX_TIM4_Init+0xa4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <MX_TIM4_Init+0xa4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <MX_TIM4_Init+0xa4>)
 80027f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <MX_TIM4_Init+0xa4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fe:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <MX_TIM4_Init+0xa4>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002804:	2303      	movs	r3, #3
 8002806:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800280c:	2301      	movs	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002818:	2300      	movs	r3, #0
 800281a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800281c:	2301      	movs	r3, #1
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	4619      	mov	r1, r3
 800282e:	480d      	ldr	r0, [pc, #52]	@ (8002864 <MX_TIM4_Init+0xa4>)
 8002830:	f003 fa88 	bl	8005d44 <HAL_TIM_Encoder_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800283a:	f000 f8e9 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002846:	463b      	mov	r3, r7
 8002848:	4619      	mov	r1, r3
 800284a:	4806      	ldr	r0, [pc, #24]	@ (8002864 <MX_TIM4_Init+0xa4>)
 800284c:	f004 fa10 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002856:	f000 f8db 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	3730      	adds	r7, #48	@ 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000054c 	.word	0x2000054c
 8002868:	40000800 	.word	0x40000800

0800286c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002870:	4b22      	ldr	r3, [pc, #136]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 8002872:	4a23      	ldr	r2, [pc, #140]	@ (8002900 <MX_USART1_UART_Init+0x94>)
 8002874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002876:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 8002878:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <MX_USART1_UART_Init+0x98>)
 800287a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800287c:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002882:	4b1e      	ldr	r3, [pc, #120]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002888:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800288e:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 8002890:	220c      	movs	r2, #12
 8002892:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800289a:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 800289c:	2200      	movs	r2, #0
 800289e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a0:	4b16      	ldr	r3, [pc, #88]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ac:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b2:	4812      	ldr	r0, [pc, #72]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 80028b4:	f004 faea 	bl	8006e8c <HAL_UART_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80028be:	f000 f8a7 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c2:	2100      	movs	r1, #0
 80028c4:	480d      	ldr	r0, [pc, #52]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 80028c6:	f005 f8e3 	bl	8007a90 <HAL_UARTEx_SetTxFifoThreshold>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80028d0:	f000 f89e 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d4:	2100      	movs	r1, #0
 80028d6:	4809      	ldr	r0, [pc, #36]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 80028d8:	f005 f918 	bl	8007b0c <HAL_UARTEx_SetRxFifoThreshold>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80028e2:	f000 f895 	bl	8002a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	@ (80028fc <MX_USART1_UART_Init+0x90>)
 80028e8:	f005 f899 	bl	8007a1e <HAL_UARTEx_DisableFifoMode>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80028f2:	f000 f88d 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000598 	.word	0x20000598
 8002900:	40013800 	.word	0x40013800
 8002904:	000f4240 	.word	0x000f4240

08002908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800291e:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	4a38      	ldr	r2, [pc, #224]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002924:	f043 0320 	orr.w	r3, r3, #32
 8002928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800292a:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 800292c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	4a32      	ldr	r2, [pc, #200]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002942:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	4a2c      	ldr	r2, [pc, #176]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800295a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	4a26      	ldr	r2, [pc, #152]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 800296c:	f043 0302 	orr.w	r3, r3, #2
 8002970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <MX_GPIO_Init+0xfc>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	f240 6106 	movw	r1, #1542	@ 0x606
 8002984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002988:	f001 f906 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin|CS_Pin, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	f241 0103 	movw	r1, #4099	@ 0x1003
 8002992:	481d      	ldr	r0, [pc, #116]	@ (8002a08 <MX_GPIO_Init+0x100>)
 8002994:	f001 f900 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2140      	movs	r1, #64	@ 0x40
 800299c:	481b      	ldr	r0, [pc, #108]	@ (8002a0c <MX_GPIO_Init+0x104>)
 800299e:	f001 f8fb 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 80029a2:	f240 6306 	movw	r3, #1542	@ 0x606
 80029a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	2301      	movs	r3, #1
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029be:	f000 ff69 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin|CS_Pin;
 80029c2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	480b      	ldr	r0, [pc, #44]	@ (8002a08 <MX_GPIO_Init+0x100>)
 80029dc:	f000 ff5a 	bl	8003894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80029e0:	2340      	movs	r3, #64	@ 0x40
 80029e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <MX_GPIO_Init+0x104>)
 80029f8:	f000 ff4c 	bl	8003894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	@ 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	48000800 	.word	0x48000800

08002a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a14:	b672      	cpsid	i
}
 8002a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <Error_Handler+0x8>

08002a1c <Motor_Init>:
Motor_t motorLeft;
Motor_t motorRight;

void Motor_Init(Motor_t *motor, TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel,
                GPIO_TypeDef *gpio_port1, uint16_t gpio_pin1,
                GPIO_TypeDef *gpio_port2, uint16_t gpio_pin2) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
    motor->pwm_timer = pwm_timer;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	601a      	str	r2, [r3, #0]
    motor->pwm_channel = pwm_channel;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	605a      	str	r2, [r3, #4]
    motor->gpio_port1 = gpio_port1;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	609a      	str	r2, [r3, #8]
    motor->gpio_pin1 = gpio_pin1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8b3a      	ldrh	r2, [r7, #24]
 8002a40:	819a      	strh	r2, [r3, #12]
    motor->gpio_port2 = gpio_port2;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	611a      	str	r2, [r3, #16]
    motor->gpio_pin2 = gpio_pin2;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8c3a      	ldrh	r2, [r7, #32]
 8002a4c:	829a      	strh	r2, [r3, #20]

    HAL_TIM_PWM_Start(motor->pwm_timer, motor->pwm_channel);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f003 f873 	bl	8005b44 <HAL_TIM_PWM_Start>
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <Motor_Control>:

void Motor_Control(uint32_t pwm_left, uint8_t dir_left, uint32_t pwm_right, uint8_t dir_right) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	72fb      	strb	r3, [r7, #11]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
    */

    // Motor Esquerdo
    HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 8002a7c:	7afb      	ldrb	r3, [r7, #11]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2102      	movs	r1, #2
 8002a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a86:	f001 f887 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	2104      	movs	r1, #4
 8002a9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a9e:	f001 f87b 	bl	8003b98 <HAL_GPIO_WritePin>

    // Motor Direito
    HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin,  (GPIO_PinState)(dir_right));
 8002aa2:	7abb      	ldrb	r3, [r7, #10]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aae:	f001 f873 	bl	8003b98 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 8002ab2:	7abb      	ldrb	r3, [r7, #10]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac8:	f001 f866 	bl	8003b98 <HAL_GPIO_WritePin>

    // PWM
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <Motor_Control+0x7c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <Motor_Control+0x80>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200004b4 	.word	0x200004b4
 8002ae8:	20000468 	.word	0x20000468

08002aec <CS_Select>:
}



void CS_Select (void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2101      	movs	r1, #1
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <CS_Select+0x14>)
 8002af6:	f001 f84f 	bl	8003b98 <HAL_GPIO_WritePin>
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	48000400 	.word	0x48000400

08002b04 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	4802      	ldr	r0, [pc, #8]	@ (8002b18 <CS_UnSelect+0x14>)
 8002b0e:	f001 f843 	bl	8003b98 <HAL_GPIO_WritePin>
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	48000400 	.word	0x48000400

08002b1c <CE_Enable>:


void CE_Enable (void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8002b20:	2201      	movs	r2, #1
 8002b22:	2102      	movs	r1, #2
 8002b24:	4802      	ldr	r0, [pc, #8]	@ (8002b30 <CE_Enable+0x14>)
 8002b26:	f001 f837 	bl	8003b98 <HAL_GPIO_WritePin>
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	48000400 	.word	0x48000400

08002b34 <CE_Disable>:

void CE_Disable (void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <CE_Disable+0x14>)
 8002b3e:	f001 f82b 	bl	8003b98 <HAL_GPIO_WritePin>
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	48000400 	.word	0x48000400

08002b4c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	460a      	mov	r2, r1
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002b6a:	f7ff ffbf 	bl	8002aec <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8002b6e:	f107 010c 	add.w	r1, r7, #12
 8002b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b76:	2202      	movs	r2, #2
 8002b78:	4804      	ldr	r0, [pc, #16]	@ (8002b8c <nrf24_WriteReg+0x40>)
 8002b7a:	f002 f8a2 	bl	8004cc2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002b7e:	f7ff ffc1 	bl	8002b04 <CS_UnSelect>
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200003a0 	.word	0x200003a0

08002b90 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	f043 0320 	orr.w	r3, r3, #32
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002ba8:	f7ff ffa0 	bl	8002aec <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8002bac:	f107 0114 	add.w	r1, r7, #20
 8002bb0:	2364      	movs	r3, #100	@ 0x64
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4808      	ldr	r0, [pc, #32]	@ (8002bd8 <nrf24_WriteRegMulti+0x48>)
 8002bb6:	f002 f884 	bl	8004cc2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	4804      	ldr	r0, [pc, #16]	@ (8002bd8 <nrf24_WriteRegMulti+0x48>)
 8002bc6:	f002 f87c 	bl	8004cc2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002bca:	f7ff ff9b 	bl	8002b04 <CS_UnSelect>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200003a0 	.word	0x200003a0

08002bdc <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002bea:	f7ff ff7f 	bl	8002aec <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8002bee:	1df9      	adds	r1, r7, #7
 8002bf0:	2364      	movs	r3, #100	@ 0x64
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4808      	ldr	r0, [pc, #32]	@ (8002c18 <nrf24_ReadReg+0x3c>)
 8002bf6:	f002 f864 	bl	8004cc2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8002bfa:	f107 010f 	add.w	r1, r7, #15
 8002bfe:	2364      	movs	r3, #100	@ 0x64
 8002c00:	2201      	movs	r2, #1
 8002c02:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <nrf24_ReadReg+0x3c>)
 8002c04:	f002 f9d3 	bl	8004fae <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002c08:	f7ff ff7c 	bl	8002b04 <CS_UnSelect>

	return data;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200003a0 	.word	0x200003a0

08002c1c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002c26:	f7ff ff61 	bl	8002aec <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8002c2a:	1df9      	adds	r1, r7, #7
 8002c2c:	2364      	movs	r3, #100	@ 0x64
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4804      	ldr	r0, [pc, #16]	@ (8002c44 <nrfsendCmd+0x28>)
 8002c32:	f002 f846 	bl	8004cc2 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002c36:	f7ff ff65 	bl	8002b04 <CS_UnSelect>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200003a0 	.word	0x200003a0

08002c48 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	2b07      	cmp	r3, #7
 8002c56:	d104      	bne.n	8002c62 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, (1 << 6) | (1 << 5) | (1 << 4));
 8002c58:	2170      	movs	r1, #112	@ 0x70
 8002c5a:	2007      	movs	r0, #7
 8002c5c:	f7ff ff76 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);

	}
}
 8002c60:	e090      	b.n	8002d84 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2b17      	cmp	r3, #23
 8002c66:	d104      	bne.n	8002c72 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002c68:	2111      	movs	r1, #17
 8002c6a:	2017      	movs	r0, #23
 8002c6c:	f7ff ff6e 	bl	8002b4c <nrf24_WriteReg>
}
 8002c70:	e088      	b.n	8002d84 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8002c72:	2108      	movs	r1, #8
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7ff ff69 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F); // Enable all the data pipes
 8002c7a:	213f      	movs	r1, #63	@ 0x3f
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7ff ff65 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8002c82:	2103      	movs	r1, #3
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7ff ff61 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f7ff ff5d 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03); // 0x3F = 4000us delay, 15 retransmission
 8002c92:	2103      	movs	r1, #3
 8002c94:	2004      	movs	r0, #4
 8002c96:	f7ff ff59 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8002c9a:	2102      	movs	r1, #2
 8002c9c:	2005      	movs	r0, #5
 8002c9e:	f7ff ff55 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E); // 0x0E = 2Mbps ||  0x06 = 1Mbps
 8002ca2:	210e      	movs	r1, #14
 8002ca4:	2006      	movs	r0, #6
 8002ca6:	f7ff ff51 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8002caa:	2100      	movs	r1, #0
 8002cac:	2007      	movs	r0, #7
 8002cae:	f7ff ff4d 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2008      	movs	r0, #8
 8002cb6:	f7ff ff49 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8002cba:	2100      	movs	r1, #0
 8002cbc:	2009      	movs	r0, #9
 8002cbe:	f7ff ff45 	bl	8002b4c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8002cc2:	4a32      	ldr	r2, [pc, #200]	@ (8002d8c <nrf24_reset+0x144>)
 8002cc4:	f107 0318 	add.w	r3, r7, #24
 8002cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ccc:	6018      	str	r0, [r3, #0]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8002cd2:	f107 0318 	add.w	r3, r7, #24
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	4619      	mov	r1, r3
 8002cda:	200a      	movs	r0, #10
 8002cdc:	f7ff ff58 	bl	8002b90 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8002ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d90 <nrf24_reset+0x148>)
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cea:	6018      	str	r0, [r3, #0]
 8002cec:	3304      	adds	r3, #4
 8002cee:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8002cf0:	f107 0310 	add.w	r3, r7, #16
 8002cf4:	2205      	movs	r2, #5
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	200b      	movs	r0, #11
 8002cfa:	f7ff ff49 	bl	8002b90 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8002cfe:	21c3      	movs	r1, #195	@ 0xc3
 8002d00:	200c      	movs	r0, #12
 8002d02:	f7ff ff23 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8002d06:	21c4      	movs	r1, #196	@ 0xc4
 8002d08:	200d      	movs	r0, #13
 8002d0a:	f7ff ff1f 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8002d0e:	21c5      	movs	r1, #197	@ 0xc5
 8002d10:	200e      	movs	r0, #14
 8002d12:	f7ff ff1b 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8002d16:	21c6      	movs	r1, #198	@ 0xc6
 8002d18:	200f      	movs	r0, #15
 8002d1a:	f7ff ff17 	bl	8002b4c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <nrf24_reset+0x144>)
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d28:	6018      	str	r0, [r3, #0]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	2205      	movs	r2, #5
 8002d34:	4619      	mov	r1, r3
 8002d36:	2010      	movs	r0, #16
 8002d38:	f7ff ff2a 	bl	8002b90 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2011      	movs	r0, #17
 8002d40:	f7ff ff04 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8002d44:	2100      	movs	r1, #0
 8002d46:	2012      	movs	r0, #18
 8002d48:	f7ff ff00 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2013      	movs	r0, #19
 8002d50:	f7ff fefc 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8002d54:	2100      	movs	r1, #0
 8002d56:	2014      	movs	r0, #20
 8002d58:	f7ff fef8 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	2015      	movs	r0, #21
 8002d60:	f7ff fef4 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8002d64:	2100      	movs	r1, #0
 8002d66:	2016      	movs	r0, #22
 8002d68:	f7ff fef0 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002d6c:	2111      	movs	r1, #17
 8002d6e:	2017      	movs	r0, #23
 8002d70:	f7ff feec 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8002d74:	2100      	movs	r1, #0
 8002d76:	201c      	movs	r0, #28
 8002d78:	f7ff fee8 	bl	8002b4c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	201d      	movs	r0, #29
 8002d80:	f7ff fee4 	bl	8002b4c <nrf24_WriteReg>
}
 8002d84:	bf00      	nop
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	0800c424 	.word	0x0800c424
 8002d90:	0800c42c 	.word	0x0800c42c

08002d94 <NRF24_Init>:




void NRF24_Init(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
    CE_Disable();
 8002d98:	f7ff fecc 	bl	8002b34 <CE_Disable>
    nrf24_reset(0);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff ff53 	bl	8002c48 <nrf24_reset>

    // Habilita CRC de 16 bits (CONFIG: EN_CRC=1, CRCO=1)
    nrf24_WriteReg(CONFIG, (1 << 2) | (1 << 3));
 8002da2:	210c      	movs	r1, #12
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7ff fed1 	bl	8002b4c <nrf24_WriteReg>

    // Auto-ACK em todos os pipes (EN_AA=0x3F)
    nrf24_WriteReg(EN_AA, 0x3F);
 8002daa:	213f      	movs	r1, #63	@ 0x3f
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7ff fecd 	bl	8002b4c <nrf24_WriteReg>

    // Taxa de dados: 250Kbps (RF_SETUP=0x26)
    nrf24_WriteReg(RF_SETUP, 0x26);
 8002db2:	2126      	movs	r1, #38	@ 0x26
 8002db4:	2006      	movs	r0, #6
 8002db6:	f7ff fec9 	bl	8002b4c <nrf24_WriteReg>

    // 15 retransmissões, delay 4000µs (SETUP_RETR=0x4F)
    nrf24_WriteReg(SETUP_RETR, 0x4F);
 8002dba:	214f      	movs	r1, #79	@ 0x4f
 8002dbc:	2004      	movs	r0, #4
 8002dbe:	f7ff fec5 	bl	8002b4c <nrf24_WriteReg>

    // Habilita Dynamic Payloads (FEATURE=0x06)
    nrf24_WriteReg(FEATURE, 0x06);
 8002dc2:	2106      	movs	r1, #6
 8002dc4:	201d      	movs	r0, #29
 8002dc6:	f7ff fec1 	bl	8002b4c <nrf24_WriteReg>
    nrf24_WriteReg(DYNPD, 0x3F); // Ativa em todos os pipes
 8002dca:	213f      	movs	r1, #63	@ 0x3f
 8002dcc:	201c      	movs	r0, #28
 8002dce:	f7ff febd 	bl	8002b4c <nrf24_WriteReg>

    CE_Enable();
 8002dd2:	f7ff fea3 	bl	8002b1c <CE_Enable>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <NRF24_RxMode>:
    return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8002de6:	f7ff fea5 	bl	8002b34 <CE_Disable>

	nrf24_reset (STATUS);
 8002dea:	2007      	movs	r0, #7
 8002dec:	f7ff ff2c 	bl	8002c48 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	4619      	mov	r1, r3
 8002df4:	2005      	movs	r0, #5
 8002df6:	f7ff fea9 	bl	8002b4c <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	f7ff feee 	bl	8002bdc <nrf24_ReadReg>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	2002      	movs	r0, #2
 8002e12:	f7ff fe9b 	bl	8002b4c <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8002e16:	2205      	movs	r2, #5
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	200b      	movs	r0, #11
 8002e1c:	f7ff feb8 	bl	8002b90 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8002e20:	21ee      	movs	r1, #238	@ 0xee
 8002e22:	200c      	movs	r0, #12
 8002e24:	f7ff fe92 	bl	8002b4c <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8002e28:	2120      	movs	r1, #32
 8002e2a:	2013      	movs	r0, #19
 8002e2c:	f7ff fe8e 	bl	8002b4c <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff fed3 	bl	8002bdc <nrf24_ReadReg>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8002e3a:	7bbb      	ldrb	r3, [r7, #14]
 8002e3c:	f043 0303 	orr.w	r3, r3, #3
 8002e40:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8002e42:	7bbb      	ldrb	r3, [r7, #14]
 8002e44:	4619      	mov	r1, r3
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7ff fe80 	bl	8002b4c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002e4c:	f7ff fe66 	bl	8002b1c <CE_Enable>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8002e60:	2007      	movs	r0, #7
 8002e62:	f7ff febb 	bl	8002bdc <nrf24_ReadReg>
 8002e66:	4603      	mov	r3, r0
 8002e68:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00b      	beq.n	8002e8c <isDataAvailable+0x34>
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8002e80:	2140      	movs	r1, #64	@ 0x40
 8002e82:	2007      	movs	r0, #7
 8002e84:	f7ff fe62 	bl	8002b4c <nrf24_WriteReg>

		return 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <isDataAvailable+0x36>
	}

	return 0;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8002ea4:	f7ff fe22 	bl	8002aec <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8002ea8:	2361      	movs	r3, #97	@ 0x61
 8002eaa:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8002eac:	f107 010f 	add.w	r1, r7, #15
 8002eb0:	2364      	movs	r3, #100	@ 0x64
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	480c      	ldr	r0, [pc, #48]	@ (8002ee8 <NRF24_Receive+0x50>)
 8002eb6:	f001 ff04 	bl	8004cc2 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8002eba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4809      	ldr	r0, [pc, #36]	@ (8002ee8 <NRF24_Receive+0x50>)
 8002ec4:	f002 f873 	bl	8004fae <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8002ec8:	f7ff fe1c 	bl	8002b04 <CS_UnSelect>

	HAL_Delay(1);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f000 fbdb 	bl	8003688 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8002ed2:	23e2      	movs	r3, #226	@ 0xe2
 8002ed4:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fe9f 	bl	8002c1c <nrfsendCmd>
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200003a0 	.word	0x200003a0

08002eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <HAL_MspInit+0x44>)
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f30 <HAL_MspInit+0x44>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <HAL_MspInit+0x44>)
 8002f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_MspInit+0x44>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	4a08      	ldr	r2, [pc, #32]	@ (8002f30 <HAL_MspInit+0x44>)
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_MspInit+0x44>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f22:	f000 fef5 	bl	8003d10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000

08002f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	@ 0x30
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3d      	ldr	r2, [pc, #244]	@ (8003048 <HAL_SPI_MspInit+0x114>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d145      	bne.n	8002fe2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f56:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f62:	4b3a      	ldr	r3, [pc, #232]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	4b37      	ldr	r3, [pc, #220]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f72:	4a36      	ldr	r2, [pc, #216]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f7a:	4b34      	ldr	r3, [pc, #208]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	4a30      	ldr	r2, [pc, #192]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f92:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8002f9e:	23a0      	movs	r3, #160	@ 0xa0
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fae:	2305      	movs	r3, #5
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fbc:	f000 fc6a 	bl	8003894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fd0:	2305      	movs	r3, #5
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	4619      	mov	r1, r3
 8002fda:	481d      	ldr	r0, [pc, #116]	@ (8003050 <HAL_SPI_MspInit+0x11c>)
 8002fdc:	f000 fc5a 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fe0:	e02d      	b.n	800303e <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8003054 <HAL_SPI_MspInit+0x120>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d128      	bne.n	800303e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fec:	4b17      	ldr	r3, [pc, #92]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff0:	4a16      	ldr	r2, [pc, #88]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff8:	4b14      	ldr	r3, [pc, #80]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003004:	4b11      	ldr	r3, [pc, #68]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003008:	4a10      	ldr	r2, [pc, #64]	@ (800304c <HAL_SPI_MspInit+0x118>)
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003010:	4b0e      	ldr	r3, [pc, #56]	@ (800304c <HAL_SPI_MspInit+0x118>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800301c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800302e:	2305      	movs	r3, #5
 8003030:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	4619      	mov	r1, r3
 8003038:	4805      	ldr	r0, [pc, #20]	@ (8003050 <HAL_SPI_MspInit+0x11c>)
 800303a:	f000 fc2b 	bl	8003894 <HAL_GPIO_Init>
}
 800303e:	bf00      	nop
 8003040:	3730      	adds	r7, #48	@ 0x30
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40013000 	.word	0x40013000
 800304c:	40021000 	.word	0x40021000
 8003050:	48000400 	.word	0x48000400
 8003054:	40003800 	.word	0x40003800

08003058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a13      	ldr	r2, [pc, #76]	@ (80030b4 <HAL_TIM_Base_MspInit+0x5c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10c      	bne.n	8003084 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800306a:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <HAL_TIM_Base_MspInit+0x60>)
 800306c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306e:	4a12      	ldr	r2, [pc, #72]	@ (80030b8 <HAL_TIM_Base_MspInit+0x60>)
 8003070:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003074:	6613      	str	r3, [r2, #96]	@ 0x60
 8003076:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_TIM_Base_MspInit+0x60>)
 8003078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003082:	e010      	b.n	80030a6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308c:	d10b      	bne.n	80030a6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_TIM_Base_MspInit+0x60>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	4a09      	ldr	r2, [pc, #36]	@ (80030b8 <HAL_TIM_Base_MspInit+0x60>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6593      	str	r3, [r2, #88]	@ 0x58
 800309a:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <HAL_TIM_Base_MspInit+0x60>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	@ 0x30
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003198 <HAL_TIM_Encoder_MspInit+0xdc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d129      	bne.n	8003132 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030de:	4b2f      	ldr	r3, [pc, #188]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e2:	4a2e      	ldr	r2, [pc, #184]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ea:	4b2c      	ldr	r3, [pc, #176]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	4b29      	ldr	r3, [pc, #164]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	4a28      	ldr	r2, [pc, #160]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003102:	4b26      	ldr	r3, [pc, #152]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 800310e:	2350      	movs	r3, #80	@ 0x50
 8003110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800311e:	2302      	movs	r3, #2
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 031c 	add.w	r3, r7, #28
 8003126:	4619      	mov	r1, r3
 8003128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800312c:	f000 fbb2 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003130:	e02e      	b.n	8003190 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1a      	ldr	r2, [pc, #104]	@ (80031a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d129      	bne.n	8003190 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	4a16      	ldr	r2, [pc, #88]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6593      	str	r3, [r2, #88]	@ 0x58
 8003148:	4b14      	ldr	r3, [pc, #80]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003154:	4b11      	ldr	r3, [pc, #68]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	4a10      	ldr	r2, [pc, #64]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003160:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 800316c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800317e:	230a      	movs	r3, #10
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	4619      	mov	r1, r3
 8003188:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800318c:	f000 fb82 	bl	8003894 <HAL_GPIO_Init>
}
 8003190:	bf00      	nop
 8003192:	3730      	adds	r7, #48	@ 0x30
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40000400 	.word	0x40000400
 800319c:	40021000 	.word	0x40021000
 80031a0:	40000800 	.word	0x40000800

080031a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	@ 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <HAL_TIM_MspPostInit+0xac>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d11e      	bne.n	8003204 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	4b23      	ldr	r3, [pc, #140]	@ (8003254 <HAL_TIM_MspPostInit+0xb0>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ca:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <HAL_TIM_MspPostInit+0xb0>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031d2:	4b20      	ldr	r3, [pc, #128]	@ (8003254 <HAL_TIM_MspPostInit+0xb0>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 80031de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ec:	2302      	movs	r3, #2
 80031ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80031f0:	2306      	movs	r3, #6
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031fe:	f000 fb49 	bl	8003894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003202:	e021      	b.n	8003248 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320c:	d11c      	bne.n	8003248 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320e:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <HAL_TIM_MspPostInit+0xb0>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	4a10      	ldr	r2, [pc, #64]	@ (8003254 <HAL_TIM_MspPostInit+0xb0>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800321a:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <HAL_TIM_MspPostInit+0xb0>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 8003226:	2301      	movs	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322a:	2302      	movs	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003236:	2301      	movs	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	4619      	mov	r1, r3
 8003240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003244:	f000 fb26 	bl	8003894 <HAL_GPIO_Init>
}
 8003248:	bf00      	nop
 800324a:	3728      	adds	r7, #40	@ 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40021000 	.word	0x40021000

08003258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b09c      	sub	sp, #112	@ 0x70
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003270:	f107 0318 	add.w	r3, r7, #24
 8003274:	2244      	movs	r2, #68	@ 0x44
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f005 fd29 	bl	8008cd0 <memset>
  if(huart->Instance==USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2c      	ldr	r2, [pc, #176]	@ (8003334 <HAL_UART_MspInit+0xdc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d151      	bne.n	800332c <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003288:	2301      	movs	r3, #1
 800328a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003290:	f107 0318 	add.w	r3, r7, #24
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fa79 	bl	800478c <HAL_RCCEx_PeriphCLKConfig>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80032a0:	f7ff fbb6 	bl	8002a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a4:	4b24      	ldr	r3, [pc, #144]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a8:	4a23      	ldr	r2, [pc, #140]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80032b0:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d4:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d8:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <HAL_UART_MspInit+0xe0>)
 80032e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 80032ec:	2310      	movs	r3, #16
 80032ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	2300      	movs	r3, #0
 80032fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032fc:	2307      	movs	r3, #7
 80032fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8003300:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003304:	4619      	mov	r1, r3
 8003306:	480d      	ldr	r0, [pc, #52]	@ (800333c <HAL_UART_MspInit+0xe4>)
 8003308:	f000 fac4 	bl	8003894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800331c:	2307      	movs	r3, #7
 800331e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8003320:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003324:	4619      	mov	r1, r3
 8003326:	4806      	ldr	r0, [pc, #24]	@ (8003340 <HAL_UART_MspInit+0xe8>)
 8003328:	f000 fab4 	bl	8003894 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800332c:	bf00      	nop
 800332e:	3770      	adds	r7, #112	@ 0x70
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40013800 	.word	0x40013800
 8003338:	40021000 	.word	0x40021000
 800333c:	48000800 	.word	0x48000800
 8003340:	48000400 	.word	0x48000400

08003344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <NMI_Handler+0x4>

0800334c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <HardFault_Handler+0x4>

08003354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <MemManage_Handler+0x4>

0800335c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <BusFault_Handler+0x4>

08003364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <UsageFault_Handler+0x4>

0800336c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339a:	f000 f957 	bl	800364c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  return 1;
 80033a6:	2301      	movs	r3, #1
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <_kill>:

int _kill(int pid, int sig)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033bc:	f005 fcda 	bl	8008d74 <__errno>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2216      	movs	r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
  return -1;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_exit>:

void _exit (int status)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffe7 	bl	80033b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033e4:	bf00      	nop
 80033e6:	e7fd      	b.n	80033e4 <_exit+0x12>

080033e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e00a      	b.n	8003410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033fa:	f3af 8000 	nop.w
 80033fe:	4601      	mov	r1, r0
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	60ba      	str	r2, [r7, #8]
 8003406:	b2ca      	uxtb	r2, r1
 8003408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	dbf0      	blt.n	80033fa <_read+0x12>
  }

  return len;
 8003418:	687b      	ldr	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e009      	b.n	8003448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	60ba      	str	r2, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3301      	adds	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	dbf1      	blt.n	8003434 <_write+0x12>
  }
  return len;
 8003450:	687b      	ldr	r3, [r7, #4]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_close>:

int _close(int file)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003482:	605a      	str	r2, [r3, #4]
  return 0;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_isatty>:

int _isatty(int file)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800349a:	2301      	movs	r3, #1
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034cc:	4a14      	ldr	r2, [pc, #80]	@ (8003520 <_sbrk+0x5c>)
 80034ce:	4b15      	ldr	r3, [pc, #84]	@ (8003524 <_sbrk+0x60>)
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d8:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034e0:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <_sbrk+0x64>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	@ (800352c <_sbrk+0x68>)
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034e6:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <_sbrk+0x64>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d207      	bcs.n	8003504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034f4:	f005 fc3e 	bl	8008d74 <__errno>
 80034f8:	4603      	mov	r3, r0
 80034fa:	220c      	movs	r2, #12
 80034fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003502:	e009      	b.n	8003518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003504:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <_sbrk+0x64>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800350a:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <_sbrk+0x64>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	4a05      	ldr	r2, [pc, #20]	@ (8003528 <_sbrk+0x64>)
 8003514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20008000 	.word	0x20008000
 8003524:	00000400 	.word	0x00000400
 8003528:	2000065c 	.word	0x2000065c
 800352c:	200007b0 	.word	0x200007b0

08003530 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <SystemInit+0x20>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353a:	4a05      	ldr	r2, [pc, #20]	@ (8003550 <SystemInit+0x20>)
 800353c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 8003554:	480d      	ldr	r0, [pc, #52]	@ (800358c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003556:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003558:	f7ff ffea 	bl	8003530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800355c:	480c      	ldr	r0, [pc, #48]	@ (8003590 <LoopForever+0x6>)
  ldr r1, =_edata
 800355e:	490d      	ldr	r1, [pc, #52]	@ (8003594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003560:	4a0d      	ldr	r2, [pc, #52]	@ (8003598 <LoopForever+0xe>)
  movs r3, #0
 8003562:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003564:	e002      	b.n	800356c <LoopCopyDataInit>

08003566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800356a:	3304      	adds	r3, #4

0800356c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800356c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003570:	d3f9      	bcc.n	8003566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003572:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003574:	4c0a      	ldr	r4, [pc, #40]	@ (80035a0 <LoopForever+0x16>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003578:	e001      	b.n	800357e <LoopFillZerobss>

0800357a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800357a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800357c:	3204      	adds	r2, #4

0800357e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003580:	d3fb      	bcc.n	800357a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003582:	f005 fbfd 	bl	8008d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003586:	f7fe febf 	bl	8002308 <main>

0800358a <LoopForever>:

LoopForever:
    b LoopForever
 800358a:	e7fe      	b.n	800358a <LoopForever>
 ldr   r0, =_estack
 800358c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003594:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003598:	0800c8ac 	.word	0x0800c8ac
  ldr r2, =_sbss
 800359c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80035a0:	200007b0 	.word	0x200007b0

080035a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035a4:	e7fe      	b.n	80035a4 <ADC1_2_IRQHandler>

080035a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035b0:	2003      	movs	r0, #3
 80035b2:	f000 f93d 	bl	8003830 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b6:	200f      	movs	r0, #15
 80035b8:	f000 f80e 	bl	80035d8 <HAL_InitTick>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	71fb      	strb	r3, [r7, #7]
 80035c6:	e001      	b.n	80035cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035c8:	f7ff fc90 	bl	8002eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035cc:	79fb      	ldrb	r3, [r7, #7]

}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80035e4:	4b16      	ldr	r3, [pc, #88]	@ (8003640 <HAL_InitTick+0x68>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d022      	beq.n	8003632 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80035ec:	4b15      	ldr	r3, [pc, #84]	@ (8003644 <HAL_InitTick+0x6c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b13      	ldr	r3, [pc, #76]	@ (8003640 <HAL_InitTick+0x68>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80035f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	4618      	mov	r0, r3
 8003602:	f000 f93a 	bl	800387a <HAL_SYSTICK_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b0f      	cmp	r3, #15
 8003610:	d809      	bhi.n	8003626 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003612:	2200      	movs	r2, #0
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800361a:	f000 f914 	bl	8003846 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <HAL_InitTick+0x70>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	e007      	b.n	8003636 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
 800362a:	e004      	b.n	8003636 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e001      	b.n	8003636 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000028 	.word	0x20000028
 8003644:	20000020 	.word	0x20000020
 8003648:	20000024 	.word	0x20000024

0800364c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_IncTick+0x1c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_IncTick+0x20>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4413      	add	r3, r2
 800365a:	4a03      	ldr	r2, [pc, #12]	@ (8003668 <HAL_IncTick+0x1c>)
 800365c:	6013      	str	r3, [r2, #0]
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	20000660 	.word	0x20000660
 800366c:	20000028 	.word	0x20000028

08003670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_GetTick+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000660 	.word	0x20000660

08003688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff ffee 	bl	8003670 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036a0:	d004      	beq.n	80036ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a2:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <HAL_Delay+0x40>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4413      	add	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ac:	bf00      	nop
 80036ae:	f7ff ffdf 	bl	8003670 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d8f7      	bhi.n	80036ae <HAL_Delay+0x26>
  {
  }
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000028 	.word	0x20000028

080036cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <__NVIC_SetPriorityGrouping+0x44>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036e8:	4013      	ands	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fe:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <__NVIC_SetPriorityGrouping+0x44>)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	60d3      	str	r3, [r2, #12]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003718:	4b04      	ldr	r3, [pc, #16]	@ (800372c <__NVIC_GetPriorityGrouping+0x18>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	f003 0307 	and.w	r3, r3, #7
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	2b00      	cmp	r3, #0
 8003742:	db0a      	blt.n	800375a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	490c      	ldr	r1, [pc, #48]	@ (800377c <__NVIC_SetPriority+0x4c>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	440b      	add	r3, r1
 8003754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003758:	e00a      	b.n	8003770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4908      	ldr	r1, [pc, #32]	@ (8003780 <__NVIC_SetPriority+0x50>)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3b04      	subs	r3, #4
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	440b      	add	r3, r1
 800376e:	761a      	strb	r2, [r3, #24]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e100 	.word	0xe000e100
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	@ 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f1c3 0307 	rsb	r3, r3, #7
 800379e:	2b04      	cmp	r3, #4
 80037a0:	bf28      	it	cs
 80037a2:	2304      	movcs	r3, #4
 80037a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d902      	bls.n	80037b4 <NVIC_EncodePriority+0x30>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3b03      	subs	r3, #3
 80037b2:	e000      	b.n	80037b6 <NVIC_EncodePriority+0x32>
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	401a      	ands	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43d9      	mvns	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	4313      	orrs	r3, r2
         );
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	@ 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037fc:	d301      	bcc.n	8003802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fe:	2301      	movs	r3, #1
 8003800:	e00f      	b.n	8003822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003802:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <SysTick_Config+0x40>)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800380a:	210f      	movs	r1, #15
 800380c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003810:	f7ff ff8e 	bl	8003730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003814:	4b05      	ldr	r3, [pc, #20]	@ (800382c <SysTick_Config+0x40>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381a:	4b04      	ldr	r3, [pc, #16]	@ (800382c <SysTick_Config+0x40>)
 800381c:	2207      	movs	r2, #7
 800381e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	e000e010 	.word	0xe000e010

08003830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff47 	bl	80036cc <__NVIC_SetPriorityGrouping>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003854:	f7ff ff5e 	bl	8003714 <__NVIC_GetPriorityGrouping>
 8003858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff90 	bl	8003784 <NVIC_EncodePriority>
 8003864:	4602      	mov	r2, r0
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff5f 	bl	8003730 <__NVIC_SetPriority>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ffb2 	bl	80037ec <SysTick_Config>
 8003888:	4603      	mov	r3, r0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038a2:	e15a      	b.n	8003b5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	4013      	ands	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 814c 	beq.w	8003b54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d005      	beq.n	80038d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d130      	bne.n	8003936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800390a:	2201      	movs	r2, #1
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 0201 	and.w	r2, r3, #1
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b03      	cmp	r3, #3
 8003940:	d017      	beq.n	8003972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	2203      	movs	r2, #3
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d123      	bne.n	80039c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	08da      	lsrs	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3208      	adds	r2, #8
 8003986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	220f      	movs	r2, #15
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	08da      	lsrs	r2, r3, #3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3208      	adds	r2, #8
 80039c0:	6939      	ldr	r1, [r7, #16]
 80039c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4013      	ands	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f003 0203 	and.w	r2, r3, #3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80a6 	beq.w	8003b54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a08:	4b5b      	ldr	r3, [pc, #364]	@ (8003b78 <HAL_GPIO_Init+0x2e4>)
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8003b78 <HAL_GPIO_Init+0x2e4>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a14:	4b58      	ldr	r3, [pc, #352]	@ (8003b78 <HAL_GPIO_Init+0x2e4>)
 8003a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a20:	4a56      	ldr	r2, [pc, #344]	@ (8003b7c <HAL_GPIO_Init+0x2e8>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a4a:	d01f      	beq.n	8003a8c <HAL_GPIO_Init+0x1f8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b80 <HAL_GPIO_Init+0x2ec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d019      	beq.n	8003a88 <HAL_GPIO_Init+0x1f4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a4b      	ldr	r2, [pc, #300]	@ (8003b84 <HAL_GPIO_Init+0x2f0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_GPIO_Init+0x1f0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b88 <HAL_GPIO_Init+0x2f4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00d      	beq.n	8003a80 <HAL_GPIO_Init+0x1ec>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a49      	ldr	r2, [pc, #292]	@ (8003b8c <HAL_GPIO_Init+0x2f8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <HAL_GPIO_Init+0x1e8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a48      	ldr	r2, [pc, #288]	@ (8003b90 <HAL_GPIO_Init+0x2fc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_GPIO_Init+0x1e4>
 8003a74:	2305      	movs	r3, #5
 8003a76:	e00a      	b.n	8003a8e <HAL_GPIO_Init+0x1fa>
 8003a78:	2306      	movs	r3, #6
 8003a7a:	e008      	b.n	8003a8e <HAL_GPIO_Init+0x1fa>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	e006      	b.n	8003a8e <HAL_GPIO_Init+0x1fa>
 8003a80:	2303      	movs	r3, #3
 8003a82:	e004      	b.n	8003a8e <HAL_GPIO_Init+0x1fa>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e002      	b.n	8003a8e <HAL_GPIO_Init+0x1fa>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <HAL_GPIO_Init+0x1fa>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	f002 0203 	and.w	r2, r2, #3
 8003a94:	0092      	lsls	r2, r2, #2
 8003a96:	4093      	lsls	r3, r2
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a9e:	4937      	ldr	r1, [pc, #220]	@ (8003b7c <HAL_GPIO_Init+0x2e8>)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aac:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ad0:	4a30      	ldr	r2, [pc, #192]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003afa:	4a26      	ldr	r2, [pc, #152]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b00:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b24:	4a1b      	ldr	r2, [pc, #108]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b4e:	4a11      	ldr	r2, [pc, #68]	@ (8003b94 <HAL_GPIO_Init+0x300>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f ae9d 	bne.w	80038a4 <HAL_GPIO_Init+0x10>
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	48000400 	.word	0x48000400
 8003b84:	48000800 	.word	0x48000800
 8003b88:	48000c00 	.word	0x48000c00
 8003b8c:	48001000 	.word	0x48001000
 8003b90:	48001400 	.word	0x48001400
 8003b94:	40010400 	.word	0x40010400

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d141      	bne.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be2:	d131      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003be4:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bea:	4a46      	ldr	r2, [pc, #280]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bf4:	4b43      	ldr	r3, [pc, #268]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bfc:	4a41      	ldr	r2, [pc, #260]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c04:	4b40      	ldr	r3, [pc, #256]	@ (8003d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2232      	movs	r2, #50	@ 0x32
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	0c9b      	lsrs	r3, r3, #18
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c1a:	e002      	b.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c22:	4b38      	ldr	r3, [pc, #224]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2e:	d102      	bne.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f2      	bne.n	8003c1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c36:	4b33      	ldr	r3, [pc, #204]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c42:	d158      	bne.n	8003cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e057      	b.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c48:	4b2e      	ldr	r3, [pc, #184]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c58:	e04d      	b.n	8003cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c60:	d141      	bne.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c62:	4b28      	ldr	r3, [pc, #160]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6e:	d131      	bne.n	8003cd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c70:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c76:	4a23      	ldr	r2, [pc, #140]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c80:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c88:	4a1e      	ldr	r2, [pc, #120]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c90:	4b1d      	ldr	r3, [pc, #116]	@ (8003d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2232      	movs	r2, #50	@ 0x32
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	0c9b      	lsrs	r3, r3, #18
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca6:	e002      	b.n	8003cae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cae:	4b15      	ldr	r3, [pc, #84]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cba:	d102      	bne.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f2      	bne.n	8003ca8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cc2:	4b10      	ldr	r3, [pc, #64]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cce:	d112      	bne.n	8003cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e011      	b.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cda:	4a0a      	ldr	r2, [pc, #40]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ce4:	e007      	b.n	8003cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ce6:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cee:	4a05      	ldr	r2, [pc, #20]	@ (8003d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40007000 	.word	0x40007000
 8003d08:	20000020 	.word	0x20000020
 8003d0c:	431bde83 	.word	0x431bde83

08003d10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a04      	ldr	r2, [pc, #16]	@ (8003d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d1e:	6093      	str	r3, [r2, #8]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40007000 	.word	0x40007000

08003d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e2fe      	b.n	8004340 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d075      	beq.n	8003e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4e:	4b97      	ldr	r3, [pc, #604]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d58:	4b94      	ldr	r3, [pc, #592]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d102      	bne.n	8003d6e <HAL_RCC_OscConfig+0x3e>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d002      	beq.n	8003d74 <HAL_RCC_OscConfig+0x44>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d10b      	bne.n	8003d8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d74:	4b8d      	ldr	r3, [pc, #564]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d05b      	beq.n	8003e38 <HAL_RCC_OscConfig+0x108>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d157      	bne.n	8003e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e2d9      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d94:	d106      	bne.n	8003da4 <HAL_RCC_OscConfig+0x74>
 8003d96:	4b85      	ldr	r3, [pc, #532]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a84      	ldr	r2, [pc, #528]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e01d      	b.n	8003de0 <HAL_RCC_OscConfig+0xb0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x98>
 8003dae:	4b7f      	ldr	r3, [pc, #508]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b7c      	ldr	r3, [pc, #496]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7b      	ldr	r2, [pc, #492]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0xb0>
 8003dc8:	4b78      	ldr	r3, [pc, #480]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a77      	ldr	r2, [pc, #476]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b75      	ldr	r3, [pc, #468]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a74      	ldr	r2, [pc, #464]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7ff fc42 	bl	8003670 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df0:	f7ff fc3e 	bl	8003670 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	@ 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e29e      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e02:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0xc0>
 8003e0e:	e014      	b.n	8003e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7ff fc2e 	bl	8003670 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e18:	f7ff fc2a 	bl	8003670 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	@ 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e28a      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2a:	4b60      	ldr	r3, [pc, #384]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0xe8>
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d075      	beq.n	8003f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e46:	4b59      	ldr	r3, [pc, #356]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e50:	4b56      	ldr	r3, [pc, #344]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d102      	bne.n	8003e66 <HAL_RCC_OscConfig+0x136>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d002      	beq.n	8003e6c <HAL_RCC_OscConfig+0x13c>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11f      	bne.n	8003eac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_OscConfig+0x154>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e25d      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b49      	ldr	r3, [pc, #292]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	061b      	lsls	r3, r3, #24
 8003e92:	4946      	ldr	r1, [pc, #280]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e98:	4b45      	ldr	r3, [pc, #276]	@ (8003fb0 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fb9b 	bl	80035d8 <HAL_InitTick>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d043      	beq.n	8003f30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e249      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d023      	beq.n	8003efc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7ff fbd6 	bl	8003670 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7ff fbd2 	bl	8003670 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e232      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eda:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b31      	ldr	r3, [pc, #196]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	492d      	ldr	r1, [pc, #180]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
 8003efa:	e01a      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efc:	4b2b      	ldr	r3, [pc, #172]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7ff fbb2 	bl	8003670 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f10:	f7ff fbae 	bl	8003670 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e20e      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f22:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1e0>
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d041      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b19      	ldr	r3, [pc, #100]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4c:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7ff fb8b 	bl	8003670 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7ff fb87 	bl	8003670 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e1e7      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f70:	4b0e      	ldr	r3, [pc, #56]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ef      	beq.n	8003f5e <HAL_RCC_OscConfig+0x22e>
 8003f7e:	e020      	b.n	8003fc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f80:	4b0a      	ldr	r3, [pc, #40]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f86:	4a09      	ldr	r2, [pc, #36]	@ (8003fac <HAL_RCC_OscConfig+0x27c>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7ff fb6e 	bl	8003670 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f96:	e00d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f98:	f7ff fb6a 	bl	8003670 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d906      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e1ca      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1ea      	bne.n	8003f98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 80a6 	beq.w	800411c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fd4:	4b84      	ldr	r3, [pc, #528]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x2b4>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2b6>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b7f      	ldr	r3, [pc, #508]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	4a7e      	ldr	r2, [pc, #504]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8003ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004002:	2301      	movs	r3, #1
 8004004:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004006:	4b79      	ldr	r3, [pc, #484]	@ (80041ec <HAL_RCC_OscConfig+0x4bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d118      	bne.n	8004044 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004012:	4b76      	ldr	r3, [pc, #472]	@ (80041ec <HAL_RCC_OscConfig+0x4bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a75      	ldr	r2, [pc, #468]	@ (80041ec <HAL_RCC_OscConfig+0x4bc>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800401c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401e:	f7ff fb27 	bl	8003670 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7ff fb23 	bl	8003670 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e183      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004038:	4b6c      	ldr	r3, [pc, #432]	@ (80041ec <HAL_RCC_OscConfig+0x4bc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d108      	bne.n	800405e <HAL_RCC_OscConfig+0x32e>
 800404c:	4b66      	ldr	r3, [pc, #408]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	4a65      	ldr	r2, [pc, #404]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800405c:	e024      	b.n	80040a8 <HAL_RCC_OscConfig+0x378>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b05      	cmp	r3, #5
 8004064:	d110      	bne.n	8004088 <HAL_RCC_OscConfig+0x358>
 8004066:	4b60      	ldr	r3, [pc, #384]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	4a5e      	ldr	r2, [pc, #376]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004076:	4b5c      	ldr	r3, [pc, #368]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407c:	4a5a      	ldr	r2, [pc, #360]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004086:	e00f      	b.n	80040a8 <HAL_RCC_OscConfig+0x378>
 8004088:	4b57      	ldr	r3, [pc, #348]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	4a56      	ldr	r2, [pc, #344]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004098:	4b53      	ldr	r3, [pc, #332]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	4a52      	ldr	r2, [pc, #328]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d016      	beq.n	80040de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7ff fade 	bl	8003670 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b8:	f7ff fada 	bl	8003670 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e138      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ce:	4b46      	ldr	r3, [pc, #280]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ed      	beq.n	80040b8 <HAL_RCC_OscConfig+0x388>
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7ff fac7 	bl	8003670 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7ff fac3 	bl	8003670 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e121      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040fc:	4b3a      	ldr	r3, [pc, #232]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ed      	bne.n	80040e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800410a:	7ffb      	ldrb	r3, [r7, #31]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004110:	4b35      	ldr	r3, [pc, #212]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004114:	4a34      	ldr	r2, [pc, #208]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800411a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d03c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01c      	beq.n	800416a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004130:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004136:	4a2c      	ldr	r2, [pc, #176]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7ff fa96 	bl	8003670 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004148:	f7ff fa92 	bl	8003670 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e0f2      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800415a:	4b23      	ldr	r3, [pc, #140]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 800415c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ef      	beq.n	8004148 <HAL_RCC_OscConfig+0x418>
 8004168:	e01b      	b.n	80041a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800416a:	4b1f      	ldr	r3, [pc, #124]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 800416c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004170:	4a1d      	ldr	r2, [pc, #116]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7ff fa79 	bl	8003670 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004182:	f7ff fa75 	bl	8003670 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0d5      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 8004196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1ef      	bne.n	8004182 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80c9 	beq.w	800433e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ac:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b0c      	cmp	r3, #12
 80041b6:	f000 8083 	beq.w	80042c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d15e      	bne.n	8004280 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c2:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a08      	ldr	r2, [pc, #32]	@ (80041e8 <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7ff fa4f 	bl	8003670 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d4:	e00c      	b.n	80041f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d6:	f7ff fa4b 	bl	8003670 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d905      	bls.n	80041f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0ab      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f0:	4b55      	ldr	r3, [pc, #340]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ec      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041fc:	4b52      	ldr	r3, [pc, #328]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	4b52      	ldr	r3, [pc, #328]	@ (800434c <HAL_RCC_OscConfig+0x61c>)
 8004202:	4013      	ands	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6a11      	ldr	r1, [r2, #32]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800420c:	3a01      	subs	r2, #1
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	4311      	orrs	r1, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004216:	0212      	lsls	r2, r2, #8
 8004218:	4311      	orrs	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800421e:	0852      	lsrs	r2, r2, #1
 8004220:	3a01      	subs	r2, #1
 8004222:	0552      	lsls	r2, r2, #21
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800422a:	0852      	lsrs	r2, r2, #1
 800422c:	3a01      	subs	r2, #1
 800422e:	0652      	lsls	r2, r2, #25
 8004230:	4311      	orrs	r1, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004236:	06d2      	lsls	r2, r2, #27
 8004238:	430a      	orrs	r2, r1
 800423a:	4943      	ldr	r1, [pc, #268]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 800423c:	4313      	orrs	r3, r2
 800423e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004240:	4b41      	ldr	r3, [pc, #260]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a40      	ldr	r2, [pc, #256]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800424c:	4b3e      	ldr	r3, [pc, #248]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a3d      	ldr	r2, [pc, #244]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 8004252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004256:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7ff fa0a 	bl	8003670 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7ff fa06 	bl	8003670 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e066      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004272:	4b35      	ldr	r3, [pc, #212]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x530>
 800427e:	e05e      	b.n	800433e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004280:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a30      	ldr	r2, [pc, #192]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 8004286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800428a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7ff f9f0 	bl	8003670 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7ff f9ec 	bl	8003670 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e04c      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a6:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042b2:	4b25      	ldr	r3, [pc, #148]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	4924      	ldr	r1, [pc, #144]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 80042b8:	4b25      	ldr	r3, [pc, #148]	@ (8004350 <HAL_RCC_OscConfig+0x620>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	60cb      	str	r3, [r1, #12]
 80042be:	e03e      	b.n	800433e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e039      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004348 <HAL_RCC_OscConfig+0x618>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f003 0203 	and.w	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d12c      	bne.n	800433a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	3b01      	subs	r3, #1
 80042ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d123      	bne.n	800433a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d11b      	bne.n	800433a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d113      	bne.n	800433a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	3b01      	subs	r3, #1
 8004320:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d109      	bne.n	800433a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	3b01      	subs	r3, #1
 8004334:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	019f800c 	.word	0x019f800c
 8004350:	feeefffc 	.word	0xfeeefffc

08004354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e11e      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b91      	ldr	r3, [pc, #580]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d910      	bls.n	800439c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b8e      	ldr	r3, [pc, #568]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 020f 	bic.w	r2, r3, #15
 8004382:	498c      	ldr	r1, [pc, #560]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b8a      	ldr	r3, [pc, #552]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e106      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d073      	beq.n	8004490 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d129      	bne.n	8004404 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b0:	4b81      	ldr	r3, [pc, #516]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0f4      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043c0:	f000 f99e 	bl	8004700 <RCC_GetSysClockFreqFromPLLSource>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4a7c      	ldr	r2, [pc, #496]	@ (80045bc <HAL_RCC_ClockConfig+0x268>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d93f      	bls.n	800444e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043ce:	4b7a      	ldr	r3, [pc, #488]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d033      	beq.n	800444e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d12f      	bne.n	800444e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043ee:	4b72      	ldr	r3, [pc, #456]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043f6:	4a70      	ldr	r2, [pc, #448]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80043f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e024      	b.n	800444e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d107      	bne.n	800441c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800440c:	4b6a      	ldr	r3, [pc, #424]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0c6      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441c:	4b66      	ldr	r3, [pc, #408]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0be      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800442c:	f000 f8ce 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8004430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4a61      	ldr	r2, [pc, #388]	@ (80045bc <HAL_RCC_ClockConfig+0x268>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d909      	bls.n	800444e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800443a:	4b5f      	ldr	r3, [pc, #380]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004442:	4a5d      	ldr	r2, [pc, #372]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004448:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800444e:	4b5a      	ldr	r3, [pc, #360]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4957      	ldr	r1, [pc, #348]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800445c:	4313      	orrs	r3, r2
 800445e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004460:	f7ff f906 	bl	8003670 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7ff f902 	bl	8003670 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e095      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	4b4e      	ldr	r3, [pc, #312]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 020c 	and.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	429a      	cmp	r2, r3
 800448e:	d1eb      	bne.n	8004468 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d023      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b43      	ldr	r3, [pc, #268]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a42      	ldr	r2, [pc, #264]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044c0:	4b3d      	ldr	r3, [pc, #244]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044c8:	4a3b      	ldr	r2, [pc, #236]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b39      	ldr	r3, [pc, #228]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4936      	ldr	r1, [pc, #216]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b80      	cmp	r3, #128	@ 0x80
 80044e8:	d105      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044ea:	4b33      	ldr	r3, [pc, #204]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	4a32      	ldr	r2, [pc, #200]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 80044f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f6:	4b2f      	ldr	r3, [pc, #188]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d21d      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004504:	4b2b      	ldr	r3, [pc, #172]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f023 020f 	bic.w	r2, r3, #15
 800450c:	4929      	ldr	r1, [pc, #164]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004514:	f7ff f8ac 	bl	8003670 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451c:	f7ff f8a8 	bl	8003670 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e03b      	b.n	80045aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b20      	ldr	r3, [pc, #128]	@ (80045b4 <HAL_RCC_ClockConfig+0x260>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d1ed      	bne.n	800451c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4917      	ldr	r1, [pc, #92]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	490f      	ldr	r1, [pc, #60]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800457e:	f000 f825 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8004582:	4602      	mov	r2, r0
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	490c      	ldr	r1, [pc, #48]	@ (80045c0 <HAL_RCC_ClockConfig+0x26c>)
 8004590:	5ccb      	ldrb	r3, [r1, r3]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	4a0a      	ldr	r2, [pc, #40]	@ (80045c4 <HAL_RCC_ClockConfig+0x270>)
 800459c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800459e:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <HAL_RCC_ClockConfig+0x274>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff f818 	bl	80035d8 <HAL_InitTick>
 80045a8:	4603      	mov	r3, r0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40022000 	.word	0x40022000
 80045b8:	40021000 	.word	0x40021000
 80045bc:	04c4b400 	.word	0x04c4b400
 80045c0:	0800c434 	.word	0x0800c434
 80045c4:	20000020 	.word	0x20000020
 80045c8:	20000024 	.word	0x20000024

080045cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d102      	bne.n	80045e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045de:	4b2a      	ldr	r3, [pc, #168]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	e047      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80045e4:	4b27      	ldr	r3, [pc, #156]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d102      	bne.n	80045f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045f0:	4b26      	ldr	r3, [pc, #152]	@ (800468c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	e03e      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045f6:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d136      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004602:	4b20      	ldr	r3, [pc, #128]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800460c:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3301      	adds	r3, #1
 8004618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d10c      	bne.n	800463a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004620:	4a1a      	ldr	r2, [pc, #104]	@ (800468c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a16      	ldr	r2, [pc, #88]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800462a:	68d2      	ldr	r2, [r2, #12]
 800462c:	0a12      	lsrs	r2, r2, #8
 800462e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	617b      	str	r3, [r7, #20]
      break;
 8004638:	e00c      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800463a:	4a13      	ldr	r2, [pc, #76]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	4a10      	ldr	r2, [pc, #64]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004644:	68d2      	ldr	r2, [r2, #12]
 8004646:	0a12      	lsrs	r2, r2, #8
 8004648:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
      break;
 8004652:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004654:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0e5b      	lsrs	r3, r3, #25
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	3301      	adds	r3, #1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e001      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004674:	693b      	ldr	r3, [r7, #16]
}
 8004676:	4618      	mov	r0, r3
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	00f42400 	.word	0x00f42400
 800468c:	007a1200 	.word	0x007a1200

08004690 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000020 	.word	0x20000020

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046ac:	f7ff fff0 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4904      	ldr	r1, [pc, #16]	@ (80046d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021000 	.word	0x40021000
 80046d0:	0800c444 	.word	0x0800c444

080046d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046d8:	f7ff ffda 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	0adb      	lsrs	r3, r3, #11
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4904      	ldr	r1, [pc, #16]	@ (80046fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046ea:	5ccb      	ldrb	r3, [r1, r3]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	0800c444 	.word	0x0800c444

08004700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004706:	4b1e      	ldr	r3, [pc, #120]	@ (8004780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004710:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d10c      	bne.n	800473e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004724:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	4a14      	ldr	r2, [pc, #80]	@ (8004780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800472e:	68d2      	ldr	r2, [r2, #12]
 8004730:	0a12      	lsrs	r2, r2, #8
 8004732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	617b      	str	r3, [r7, #20]
    break;
 800473c:	e00c      	b.n	8004758 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800473e:	4a12      	ldr	r2, [pc, #72]	@ (8004788 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	4a0e      	ldr	r2, [pc, #56]	@ (8004780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	0a12      	lsrs	r2, r2, #8
 800474c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	617b      	str	r3, [r7, #20]
    break;
 8004756:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004758:	4b09      	ldr	r3, [pc, #36]	@ (8004780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0e5b      	lsrs	r3, r3, #25
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	3301      	adds	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004772:	687b      	ldr	r3, [r7, #4]
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	40021000 	.word	0x40021000
 8004784:	007a1200 	.word	0x007a1200
 8004788:	00f42400 	.word	0x00f42400

0800478c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004794:	2300      	movs	r3, #0
 8004796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004798:	2300      	movs	r3, #0
 800479a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8098 	beq.w	80048da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ae:	4b43      	ldr	r3, [pc, #268]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10d      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	4b40      	ldr	r3, [pc, #256]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	4a3f      	ldr	r2, [pc, #252]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c6:	4b3d      	ldr	r3, [pc, #244]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d2:	2301      	movs	r3, #1
 80047d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d6:	4b3a      	ldr	r3, [pc, #232]	@ (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a39      	ldr	r2, [pc, #228]	@ (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80047dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e2:	f7fe ff45 	bl	8003670 <HAL_GetTick>
 80047e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e8:	e009      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ea:	f7fe ff41 	bl	8003670 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d902      	bls.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	74fb      	strb	r3, [r7, #19]
        break;
 80047fc:	e005      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047fe:	4b30      	ldr	r3, [pc, #192]	@ (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ef      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d159      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004810:	4b2a      	ldr	r3, [pc, #168]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800481a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01e      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	d019      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800482c:	4b23      	ldr	r3, [pc, #140]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004836:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004838:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004848:	4b1c      	ldr	r3, [pc, #112]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	4a1b      	ldr	r2, [pc, #108]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004858:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fe ff01 	bl	8003670 <HAL_GetTick>
 800486e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004870:	e00b      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fe fefd 	bl	8003670 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d902      	bls.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	74fb      	strb	r3, [r7, #19]
            break;
 8004888:	e006      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488a:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ec      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800489e:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	4903      	ldr	r1, [pc, #12]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048b4:	e008      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	74bb      	strb	r3, [r7, #18]
 80048ba:	e005      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c8:	7c7b      	ldrb	r3, [r7, #17]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ce:	4ba6      	ldr	r3, [pc, #664]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	4aa5      	ldr	r2, [pc, #660]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ec:	f023 0203 	bic.w	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	499c      	ldr	r1, [pc, #624]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004908:	4b97      	ldr	r3, [pc, #604]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f023 020c 	bic.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4994      	ldr	r1, [pc, #592]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004930:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	498b      	ldr	r1, [pc, #556]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494c:	4b86      	ldr	r3, [pc, #536]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	4983      	ldr	r1, [pc, #524]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800496e:	4b7e      	ldr	r3, [pc, #504]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004974:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	497a      	ldr	r1, [pc, #488]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004990:	4b75      	ldr	r3, [pc, #468]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004996:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	4972      	ldr	r1, [pc, #456]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	4969      	ldr	r1, [pc, #420]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049d4:	4b64      	ldr	r3, [pc, #400]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4961      	ldr	r1, [pc, #388]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	4958      	ldr	r1, [pc, #352]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a18:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	4950      	ldr	r1, [pc, #320]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a36:	d105      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a38:	4b4b      	ldr	r3, [pc, #300]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a42:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a50:	4b45      	ldr	r3, [pc, #276]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	4942      	ldr	r1, [pc, #264]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b3d      	ldr	r3, [pc, #244]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a3c      	ldr	r2, [pc, #240]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d015      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a88:	4b37      	ldr	r3, [pc, #220]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	4934      	ldr	r1, [pc, #208]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a2e      	ldr	r2, [pc, #184]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac0:	4b29      	ldr	r3, [pc, #164]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ace:	4926      	ldr	r1, [pc, #152]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ade:	d105      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae0:	4b21      	ldr	r3, [pc, #132]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a20      	ldr	r2, [pc, #128]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d015      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004af8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	4918      	ldr	r1, [pc, #96]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b16:	d105      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b18:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a12      	ldr	r2, [pc, #72]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b30:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3e:	490a      	ldr	r1, [pc, #40]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b4e:	d105      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b50:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000

08004b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e09d      	b.n	8004cba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b8e:	d009      	beq.n	8004ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	61da      	str	r2, [r3, #28]
 8004b96:	e005      	b.n	8004ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fe f9b8 	bl	8002f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004be4:	d902      	bls.n	8004bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e002      	b.n	8004bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004bfa:	d007      	beq.n	8004c0c <HAL_SPI_Init+0xa0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4e:	ea42 0103 	orr.w	r1, r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 0204 	and.w	r2, r3, #4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c88:	ea42 0103 	orr.w	r1, r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b088      	sub	sp, #32
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cd2:	f7fe fccd 	bl	8003670 <HAL_GetTick>
 8004cd6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e15c      	b.n	8004fa6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_SPI_Transmit+0x36>
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e154      	b.n	8004fa6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_SPI_Transmit+0x48>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e14d      	b.n	8004fa6 <HAL_SPI_Transmit+0x2e4>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2203      	movs	r2, #3
 8004d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	88fa      	ldrh	r2, [r7, #6]
 8004d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d5c:	d10f      	bne.n	8004d7e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d007      	beq.n	8004d9c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004da4:	d952      	bls.n	8004e4c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Transmit+0xf2>
 8004dae:	8b7b      	ldrh	r3, [r7, #26]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d145      	bne.n	8004e40 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	881a      	ldrh	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc4:	1c9a      	adds	r2, r3, #2
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dd8:	e032      	b.n	8004e40 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d112      	bne.n	8004e0e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	881a      	ldrh	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e0c:	e018      	b.n	8004e40 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0e:	f7fe fc2f 	bl	8003670 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d803      	bhi.n	8004e26 <HAL_SPI_Transmit+0x164>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e24:	d102      	bne.n	8004e2c <HAL_SPI_Transmit+0x16a>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0b2      	b.n	8004fa6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1c7      	bne.n	8004dda <HAL_SPI_Transmit+0x118>
 8004e4a:	e083      	b.n	8004f54 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Transmit+0x198>
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d177      	bne.n	8004f4a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d912      	bls.n	8004e8a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b02      	subs	r3, #2
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e88:	e05f      	b.n	8004f4a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	7812      	ldrb	r2, [r2, #0]
 8004e96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004eb0:	e04b      	b.n	8004f4a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d12b      	bne.n	8004f18 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d912      	bls.n	8004ef0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eda:	1c9a      	adds	r2, r3, #2
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b02      	subs	r3, #2
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004eee:	e02c      	b.n	8004f4a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	7812      	ldrb	r2, [r2, #0]
 8004efc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f16:	e018      	b.n	8004f4a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f18:	f7fe fbaa 	bl	8003670 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d803      	bhi.n	8004f30 <HAL_SPI_Transmit+0x26e>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f2e:	d102      	bne.n	8004f36 <HAL_SPI_Transmit+0x274>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e02d      	b.n	8004fa6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ae      	bne.n	8004eb2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fcf5 	bl	8005948 <SPI_EndRxTxTransaction>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
  }
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b088      	sub	sp, #32
 8004fb2:	af02      	add	r7, sp, #8
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e123      	b.n	8005216 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Receive+0x2c>
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e11b      	b.n	8005216 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe6:	d112      	bne.n	800500e <HAL_SPI_Receive+0x60>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10e      	bne.n	800500e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ff8:	88fa      	ldrh	r2, [r7, #6]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f90a 	bl	800521e <HAL_SPI_TransmitReceive>
 800500a:	4603      	mov	r3, r0
 800500c:	e103      	b.n	8005216 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800500e:	f7fe fb2f 	bl	8003670 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_SPI_Receive+0x74>
 800501e:	2302      	movs	r3, #2
 8005020:	e0f9      	b.n	8005216 <HAL_SPI_Receive+0x268>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2204      	movs	r2, #4
 800502e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	88fa      	ldrh	r2, [r7, #6]
 8005042:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	88fa      	ldrh	r2, [r7, #6]
 800504a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005074:	d908      	bls.n	8005088 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	e007      	b.n	8005098 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050a0:	d10f      	bne.n	80050c2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050e8:	d875      	bhi.n	80051d6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050ea:	e037      	b.n	800515c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d117      	bne.n	800512a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f103 020c 	add.w	r2, r3, #12
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	7812      	ldrb	r2, [r2, #0]
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005128:	e018      	b.n	800515c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800512a:	f7fe faa1 	bl	8003670 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d803      	bhi.n	8005142 <HAL_SPI_Receive+0x194>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005140:	d102      	bne.n	8005148 <HAL_SPI_Receive+0x19a>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e05c      	b.n	8005216 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1c1      	bne.n	80050ec <HAL_SPI_Receive+0x13e>
 8005168:	e03b      	b.n	80051e2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d115      	bne.n	80051a4 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	b292      	uxth	r2, r2
 8005184:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	1c9a      	adds	r2, r3, #2
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80051a2:	e018      	b.n	80051d6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a4:	f7fe fa64 	bl	8003670 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d803      	bhi.n	80051bc <HAL_SPI_Receive+0x20e>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ba:	d102      	bne.n	80051c2 <HAL_SPI_Receive+0x214>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e01f      	b.n	8005216 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1c3      	bne.n	800516a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fb56 	bl	8005898 <SPI_EndRxTransaction>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005214:	2300      	movs	r3, #0
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08a      	sub	sp, #40	@ 0x28
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800522c:	2301      	movs	r3, #1
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005230:	f7fe fa1e 	bl	8003670 <HAL_GetTick>
 8005234:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800523c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005248:	887b      	ldrh	r3, [r7, #2]
 800524a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800524c:	7ffb      	ldrb	r3, [r7, #31]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d00c      	beq.n	800526c <HAL_SPI_TransmitReceive+0x4e>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005258:	d106      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <HAL_SPI_TransmitReceive+0x4a>
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d001      	beq.n	800526c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
 800526a:	e1f3      	b.n	8005654 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_SPI_TransmitReceive+0x60>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_SPI_TransmitReceive+0x60>
 8005278:	887b      	ldrh	r3, [r7, #2]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e1e8      	b.n	8005654 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x72>
 800528c:	2302      	movs	r3, #2
 800528e:	e1e1      	b.n	8005654 <HAL_SPI_TransmitReceive+0x436>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d003      	beq.n	80052ac <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2205      	movs	r2, #5
 80052a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	887a      	ldrh	r2, [r7, #2]
 80052c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	887a      	ldrh	r2, [r7, #2]
 80052d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	887a      	ldrh	r2, [r7, #2]
 80052d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052ee:	d802      	bhi.n	80052f6 <HAL_SPI_TransmitReceive+0xd8>
 80052f0:	8abb      	ldrh	r3, [r7, #20]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d908      	bls.n	8005308 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	e007      	b.n	8005318 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b40      	cmp	r3, #64	@ 0x40
 8005324:	d007      	beq.n	8005336 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800533e:	f240 8083 	bls.w	8005448 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_SPI_TransmitReceive+0x132>
 800534a:	8afb      	ldrh	r3, [r7, #22]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d16f      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	881a      	ldrh	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	1c9a      	adds	r2, r3, #2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005374:	e05c      	b.n	8005430 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d11b      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x19e>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_SPI_TransmitReceive+0x19e>
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	2b01      	cmp	r3, #1
 8005392:	d113      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	881a      	ldrh	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a4:	1c9a      	adds	r2, r3, #2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d11c      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x1e6>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d016      	beq.n	8005404 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	b292      	uxth	r2, r2
 80053e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	1c9a      	adds	r2, r3, #2
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005400:	2301      	movs	r3, #1
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005404:	f7fe f934 	bl	8003670 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005410:	429a      	cmp	r2, r3
 8005412:	d80d      	bhi.n	8005430 <HAL_SPI_TransmitReceive+0x212>
 8005414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800541a:	d009      	beq.n	8005430 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e111      	b.n	8005654 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d19d      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x158>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d197      	bne.n	8005376 <HAL_SPI_TransmitReceive+0x158>
 8005446:	e0e5      	b.n	8005614 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x23a>
 8005450:	8afb      	ldrh	r3, [r7, #22]
 8005452:	2b01      	cmp	r3, #1
 8005454:	f040 80d1 	bne.w	80055fa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	d912      	bls.n	8005488 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	881a      	ldrh	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005472:	1c9a      	adds	r2, r3, #2
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b02      	subs	r3, #2
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005486:	e0b8      	b.n	80055fa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	330c      	adds	r3, #12
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ae:	e0a4      	b.n	80055fa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d134      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x30a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02f      	beq.n	8005528 <HAL_SPI_TransmitReceive+0x30a>
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d12c      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d912      	bls.n	80054fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	881a      	ldrh	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	1c9a      	adds	r2, r3, #2
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b02      	subs	r3, #2
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054fc:	e012      	b.n	8005524 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	7812      	ldrb	r2, [r2, #0]
 800550a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d148      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x3aa>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800553c:	b29b      	uxth	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d042      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d923      	bls.n	8005596 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	b292      	uxth	r2, r2
 800555a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	1c9a      	adds	r2, r3, #2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b02      	subs	r3, #2
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d81f      	bhi.n	80055c4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e016      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f103 020c 	add.w	r2, r3, #12
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c4:	2301      	movs	r3, #1
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055c8:	f7fe f852 	bl	8003670 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d803      	bhi.n	80055e0 <HAL_SPI_TransmitReceive+0x3c2>
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x3c8>
 80055e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e02c      	b.n	8005654 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	f47f af55 	bne.w	80054b0 <HAL_SPI_TransmitReceive+0x292>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	f47f af4e 	bne.w	80054b0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005614:	6a3a      	ldr	r2, [r7, #32]
 8005616:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f995 	bl	8005948 <SPI_EndRxTxTransaction>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e00e      	b.n	8005654 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005652:	2300      	movs	r3, #0
  }
}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	@ 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800566c:	f7fe f800 	bl	8003670 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	4413      	add	r3, r2
 800567a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800567c:	f7fd fff8 	bl	8003670 <HAL_GetTick>
 8005680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005682:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	015b      	lsls	r3, r3, #5
 8005688:	0d1b      	lsrs	r3, r3, #20
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	fb02 f303 	mul.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005692:	e054      	b.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800569a:	d050      	beq.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800569c:	f7fd ffe8 	bl	8003670 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d902      	bls.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d13d      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ca:	d111      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d004      	beq.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056de:	d107      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f8:	d10f      	bne.n	800571a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e017      	b.n	800575e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3b01      	subs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	429a      	cmp	r2, r3
 800575a:	d19b      	bne.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000020 	.word	0x20000020

0800576c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	@ 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800577e:	f7fd ff77 	bl	8003670 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	4413      	add	r3, r2
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800578e:	f7fd ff6f 	bl	8003670 <HAL_GetTick>
 8005792:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800579c:	4b3d      	ldr	r3, [pc, #244]	@ (8005894 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00da      	lsls	r2, r3, #3
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	0d1b      	lsrs	r3, r3, #20
 80057ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057b4:	e060      	b.n	8005878 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057bc:	d107      	bne.n	80057ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057d4:	d050      	beq.n	8005878 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057d6:	f7fd ff4b 	bl	8003670 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d902      	bls.n	80057ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d13d      	bne.n	8005868 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005804:	d111      	bne.n	800582a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800580e:	d004      	beq.n	800581a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005818:	d107      	bne.n	800582a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005828:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005832:	d10f      	bne.n	8005854 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005852:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e010      	b.n	800588a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	3b01      	subs	r3, #1
 8005876:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	4013      	ands	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	d196      	bne.n	80057b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3728      	adds	r7, #40	@ 0x28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000020 	.word	0x20000020

08005898 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ac:	d111      	bne.n	80058d2 <SPI_EndRxTransaction+0x3a>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b6:	d004      	beq.n	80058c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c0:	d107      	bne.n	80058d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	@ 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff febd 	bl	800565c <SPI_WaitFlagStateUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e023      	b.n	8005940 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005900:	d11d      	bne.n	800593e <SPI_EndRxTransaction+0xa6>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800590a:	d004      	beq.n	8005916 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005914:	d113      	bne.n	800593e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff ff22 	bl	800576c <SPI_WaitFifoStateUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e000      	b.n	8005940 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff ff03 	bl	800576c <SPI_WaitFifoStateUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d007      	beq.n	800597c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e027      	b.n	80059cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2200      	movs	r2, #0
 8005984:	2180      	movs	r1, #128	@ 0x80
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff fe68 	bl	800565c <SPI_WaitFlagStateUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e014      	b.n	80059cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fedc 	bl	800576c <SPI_WaitFifoStateUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d007      	beq.n	80059ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059be:	f043 0220 	orr.w	r2, r3, #32
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e000      	b.n	80059cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e049      	b.n	8005a7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7fd fb2c 	bl	8003058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f000 fcd8 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e049      	b.n	8005b28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f841 	bl	8005b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	f000 fc81 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <HAL_TIM_PWM_Start+0x24>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	bf14      	ite	ne
 8005b60:	2301      	movne	r3, #1
 8005b62:	2300      	moveq	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e03c      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d109      	bne.n	8005b82 <HAL_TIM_PWM_Start+0x3e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	bf14      	ite	ne
 8005b7a:	2301      	movne	r3, #1
 8005b7c:	2300      	moveq	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	e02f      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d109      	bne.n	8005b9c <HAL_TIM_PWM_Start+0x58>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	bf14      	ite	ne
 8005b94:	2301      	movne	r3, #1
 8005b96:	2300      	moveq	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	e022      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d109      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0x72>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	bf14      	ite	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	2300      	moveq	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	e015      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d109      	bne.n	8005bd0 <HAL_TIM_PWM_Start+0x8c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e008      	b.n	8005be2 <HAL_TIM_PWM_Start+0x9e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e097      	b.n	8005d1a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_PWM_Start+0xb6>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bf8:	e023      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_PWM_Start+0xc6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c08:	e01b      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d104      	bne.n	8005c1a <HAL_TIM_PWM_Start+0xd6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c18:	e013      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Start+0xe6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c28:	e00b      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Start+0xf6>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c38:	e003      	b.n	8005c42 <HAL_TIM_PWM_Start+0xfe>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2201      	movs	r2, #1
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 ffea 	bl	8006c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a33      	ldr	r2, [pc, #204]	@ (8005d24 <HAL_TIM_PWM_Start+0x1e0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a32      	ldr	r2, [pc, #200]	@ (8005d28 <HAL_TIM_PWM_Start+0x1e4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00e      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a30      	ldr	r2, [pc, #192]	@ (8005d2c <HAL_TIM_PWM_Start+0x1e8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d009      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2f      	ldr	r2, [pc, #188]	@ (8005d30 <HAL_TIM_PWM_Start+0x1ec>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d004      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x13e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005d34 <HAL_TIM_PWM_Start+0x1f0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x142>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_TIM_PWM_Start+0x144>
 8005c86:	2300      	movs	r3, #0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a20      	ldr	r2, [pc, #128]	@ (8005d24 <HAL_TIM_PWM_Start+0x1e0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	@ (8005d38 <HAL_TIM_PWM_Start+0x1f4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <HAL_TIM_PWM_Start+0x1f8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <HAL_TIM_PWM_Start+0x1e4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0x194>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <HAL_TIM_PWM_Start+0x1e8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d115      	bne.n	8005d04 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	4b18      	ldr	r3, [pc, #96]	@ (8005d40 <HAL_TIM_PWM_Start+0x1fc>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d015      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x1d2>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf0:	d011      	beq.n	8005d16 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	e008      	b.n	8005d16 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e000      	b.n	8005d18 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	00010007 	.word	0x00010007

08005d44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e097      	b.n	8005e88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fd f9a5 	bl	80030bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005d88:	f023 0307 	bic.w	r3, r3, #7
 8005d8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f000 fb15 	bl	80063c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dc6:	f023 0303 	bic.w	r3, r3, #3
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	021b      	lsls	r3, r3, #8
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005de4:	f023 030c 	bic.w	r3, r3, #12
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005df0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	4313      	orrs	r3, r2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	011a      	lsls	r2, r3, #4
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	031b      	lsls	r3, r3, #12
 8005e14:	4313      	orrs	r3, r2
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4313      	orrs	r3, r2
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ea8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005eb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d110      	bne.n	8005ee2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d102      	bne.n	8005ecc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ec6:	7b7b      	ldrb	r3, [r7, #13]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d001      	beq.n	8005ed0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e069      	b.n	8005fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee0:	e031      	b.n	8005f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d110      	bne.n	8005f0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d102      	bne.n	8005ef4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eee:	7b3b      	ldrb	r3, [r7, #12]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d001      	beq.n	8005ef8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e055      	b.n	8005fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f08:	e01d      	b.n	8005f46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d108      	bne.n	8005f22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d105      	bne.n	8005f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f16:	7b7b      	ldrb	r3, [r7, #13]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d102      	bne.n	8005f22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f1c:	7b3b      	ldrb	r3, [r7, #12]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d001      	beq.n	8005f26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e03e      	b.n	8005fa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_TIM_Encoder_Start+0xc4>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d008      	beq.n	8005f64 <HAL_TIM_Encoder_Start+0xd4>
 8005f52:	e00f      	b.n	8005f74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fe61 	bl	8006c24 <TIM_CCxChannelCmd>
      break;
 8005f62:	e016      	b.n	8005f92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fe59 	bl	8006c24 <TIM_CCxChannelCmd>
      break;
 8005f72:	e00e      	b.n	8005f92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fe51 	bl	8006c24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2201      	movs	r2, #1
 8005f88:	2104      	movs	r1, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fe4a 	bl	8006c24 <TIM_CCxChannelCmd>
      break;
 8005f90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e0ff      	b.n	80061ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b14      	cmp	r3, #20
 8005fd6:	f200 80f0 	bhi.w	80061ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fda:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	080061bb 	.word	0x080061bb
 8005fe8:	080061bb 	.word	0x080061bb
 8005fec:	080061bb 	.word	0x080061bb
 8005ff0:	08006075 	.word	0x08006075
 8005ff4:	080061bb 	.word	0x080061bb
 8005ff8:	080061bb 	.word	0x080061bb
 8005ffc:	080061bb 	.word	0x080061bb
 8006000:	080060b7 	.word	0x080060b7
 8006004:	080061bb 	.word	0x080061bb
 8006008:	080061bb 	.word	0x080061bb
 800600c:	080061bb 	.word	0x080061bb
 8006010:	080060f7 	.word	0x080060f7
 8006014:	080061bb 	.word	0x080061bb
 8006018:	080061bb 	.word	0x080061bb
 800601c:	080061bb 	.word	0x080061bb
 8006020:	08006139 	.word	0x08006139
 8006024:	080061bb 	.word	0x080061bb
 8006028:	080061bb 	.word	0x080061bb
 800602c:	080061bb 	.word	0x080061bb
 8006030:	08006179 	.word	0x08006179
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fa60 	bl	8006500 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699a      	ldr	r2, [r3, #24]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0208 	orr.w	r2, r2, #8
 800604e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0204 	bic.w	r2, r2, #4
 800605e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6999      	ldr	r1, [r3, #24]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	619a      	str	r2, [r3, #24]
      break;
 8006072:	e0a5      	b.n	80061c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fad0 	bl	8006620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800608e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800609e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6999      	ldr	r1, [r3, #24]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	021a      	lsls	r2, r3, #8
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	619a      	str	r2, [r3, #24]
      break;
 80060b4:	e084      	b.n	80061c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fb39 	bl	8006734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0208 	orr.w	r2, r2, #8
 80060d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0204 	bic.w	r2, r2, #4
 80060e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69d9      	ldr	r1, [r3, #28]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	61da      	str	r2, [r3, #28]
      break;
 80060f4:	e064      	b.n	80061c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fba1 	bl	8006844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69d9      	ldr	r1, [r3, #28]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	021a      	lsls	r2, r3, #8
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	61da      	str	r2, [r3, #28]
      break;
 8006136:	e043      	b.n	80061c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 fc0a 	bl	8006958 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0208 	orr.w	r2, r2, #8
 8006152:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0204 	bic.w	r2, r2, #4
 8006162:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006176:	e023      	b.n	80061c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fc4e 	bl	8006a20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006192:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	021a      	lsls	r2, r3, #8
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80061b8:	e002      	b.n	80061c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	75fb      	strb	r3, [r7, #23]
      break;
 80061be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop

080061d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_TIM_ConfigClockSource+0x1c>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e0de      	b.n	80063ae <HAL_TIM_ConfigClockSource+0x1da>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800620e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800621a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a63      	ldr	r2, [pc, #396]	@ (80063b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	f000 80a9 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 8006230:	4a61      	ldr	r2, [pc, #388]	@ (80063b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	f200 80ae 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 8006238:	4a60      	ldr	r2, [pc, #384]	@ (80063bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	f000 80a1 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 8006240:	4a5e      	ldr	r2, [pc, #376]	@ (80063bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	f200 80a6 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 8006248:	4a5d      	ldr	r2, [pc, #372]	@ (80063c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	f000 8099 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 8006250:	4a5b      	ldr	r2, [pc, #364]	@ (80063c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006252:	4293      	cmp	r3, r2
 8006254:	f200 809e 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 8006258:	4a5a      	ldr	r2, [pc, #360]	@ (80063c4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	f000 8091 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 8006260:	4a58      	ldr	r2, [pc, #352]	@ (80063c4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	f200 8096 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 8006268:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800626c:	f000 8089 	beq.w	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 8006270:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006274:	f200 808e 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 8006278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627c:	d03e      	beq.n	80062fc <HAL_TIM_ConfigClockSource+0x128>
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006282:	f200 8087 	bhi.w	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628a:	f000 8086 	beq.w	800639a <HAL_TIM_ConfigClockSource+0x1c6>
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006292:	d87f      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 8006294:	2b70      	cmp	r3, #112	@ 0x70
 8006296:	d01a      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0xfa>
 8006298:	2b70      	cmp	r3, #112	@ 0x70
 800629a:	d87b      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 800629c:	2b60      	cmp	r3, #96	@ 0x60
 800629e:	d050      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0x16e>
 80062a0:	2b60      	cmp	r3, #96	@ 0x60
 80062a2:	d877      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 80062a4:	2b50      	cmp	r3, #80	@ 0x50
 80062a6:	d03c      	beq.n	8006322 <HAL_TIM_ConfigClockSource+0x14e>
 80062a8:	2b50      	cmp	r3, #80	@ 0x50
 80062aa:	d873      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d058      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x18e>
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d86f      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 80062b4:	2b30      	cmp	r3, #48	@ 0x30
 80062b6:	d064      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 80062b8:	2b30      	cmp	r3, #48	@ 0x30
 80062ba:	d86b      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d060      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d867      	bhi.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05c      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d05a      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x1ae>
 80062cc:	e062      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062de:	f000 fc81 	bl	8006be4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	609a      	str	r2, [r3, #8]
      break;
 80062fa:	e04f      	b.n	800639c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800630c:	f000 fc6a 	bl	8006be4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800631e:	609a      	str	r2, [r3, #8]
      break;
 8006320:	e03c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800632e:	461a      	mov	r2, r3
 8006330:	f000 fbdc 	bl	8006aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2150      	movs	r1, #80	@ 0x50
 800633a:	4618      	mov	r0, r3
 800633c:	f000 fc35 	bl	8006baa <TIM_ITRx_SetConfig>
      break;
 8006340:	e02c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800634e:	461a      	mov	r2, r3
 8006350:	f000 fbfb 	bl	8006b4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2160      	movs	r1, #96	@ 0x60
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fc25 	bl	8006baa <TIM_ITRx_SetConfig>
      break;
 8006360:	e01c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	461a      	mov	r2, r3
 8006370:	f000 fbbc 	bl	8006aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2140      	movs	r1, #64	@ 0x40
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fc15 	bl	8006baa <TIM_ITRx_SetConfig>
      break;
 8006380:	e00c      	b.n	800639c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	4610      	mov	r0, r2
 800638e:	f000 fc0c 	bl	8006baa <TIM_ITRx_SetConfig>
      break;
 8006392:	e003      	b.n	800639c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
      break;
 8006398:	e000      	b.n	800639c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800639a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	00100070 	.word	0x00100070
 80063bc:	00100040 	.word	0x00100040
 80063c0:	00100030 	.word	0x00100030
 80063c4:	00100020 	.word	0x00100020

080063c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a42      	ldr	r2, [pc, #264]	@ (80064e4 <TIM_Base_SetConfig+0x11c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a3f      	ldr	r2, [pc, #252]	@ (80064e8 <TIM_Base_SetConfig+0x120>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a3e      	ldr	r2, [pc, #248]	@ (80064ec <TIM_Base_SetConfig+0x124>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0x38>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a3d      	ldr	r2, [pc, #244]	@ (80064f0 <TIM_Base_SetConfig+0x128>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a33      	ldr	r2, [pc, #204]	@ (80064e4 <TIM_Base_SetConfig+0x11c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01b      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006420:	d017      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a30      	ldr	r2, [pc, #192]	@ (80064e8 <TIM_Base_SetConfig+0x120>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a2f      	ldr	r2, [pc, #188]	@ (80064ec <TIM_Base_SetConfig+0x124>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a2e      	ldr	r2, [pc, #184]	@ (80064f0 <TIM_Base_SetConfig+0x128>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a2d      	ldr	r2, [pc, #180]	@ (80064f4 <TIM_Base_SetConfig+0x12c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2c      	ldr	r2, [pc, #176]	@ (80064f8 <TIM_Base_SetConfig+0x130>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a2b      	ldr	r2, [pc, #172]	@ (80064fc <TIM_Base_SetConfig+0x134>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a16      	ldr	r2, [pc, #88]	@ (80064e4 <TIM_Base_SetConfig+0x11c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00f      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a17      	ldr	r2, [pc, #92]	@ (80064f0 <TIM_Base_SetConfig+0x128>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a16      	ldr	r2, [pc, #88]	@ (80064f4 <TIM_Base_SetConfig+0x12c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a15      	ldr	r2, [pc, #84]	@ (80064f8 <TIM_Base_SetConfig+0x130>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_Base_SetConfig+0xe8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a14      	ldr	r2, [pc, #80]	@ (80064fc <TIM_Base_SetConfig+0x134>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d103      	bne.n	80064b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f023 0201 	bic.w	r2, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	611a      	str	r2, [r3, #16]
  }
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800

08006500 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f023 0201 	bic.w	r2, r3, #1
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800652e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f023 0302 	bic.w	r3, r3, #2
 800654c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a2c      	ldr	r2, [pc, #176]	@ (800660c <TIM_OC1_SetConfig+0x10c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00f      	beq.n	8006580 <TIM_OC1_SetConfig+0x80>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a2b      	ldr	r2, [pc, #172]	@ (8006610 <TIM_OC1_SetConfig+0x110>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00b      	beq.n	8006580 <TIM_OC1_SetConfig+0x80>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a2a      	ldr	r2, [pc, #168]	@ (8006614 <TIM_OC1_SetConfig+0x114>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d007      	beq.n	8006580 <TIM_OC1_SetConfig+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a29      	ldr	r2, [pc, #164]	@ (8006618 <TIM_OC1_SetConfig+0x118>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <TIM_OC1_SetConfig+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a28      	ldr	r2, [pc, #160]	@ (800661c <TIM_OC1_SetConfig+0x11c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10c      	bne.n	800659a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 0308 	bic.w	r3, r3, #8
 8006586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f023 0304 	bic.w	r3, r3, #4
 8006598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <TIM_OC1_SetConfig+0x10c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00f      	beq.n	80065c2 <TIM_OC1_SetConfig+0xc2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006610 <TIM_OC1_SetConfig+0x110>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_OC1_SetConfig+0xc2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a19      	ldr	r2, [pc, #100]	@ (8006614 <TIM_OC1_SetConfig+0x114>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_OC1_SetConfig+0xc2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a18      	ldr	r2, [pc, #96]	@ (8006618 <TIM_OC1_SetConfig+0x118>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_OC1_SetConfig+0xc2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a17      	ldr	r2, [pc, #92]	@ (800661c <TIM_OC1_SetConfig+0x11c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d111      	bne.n	80065e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40013400 	.word	0x40013400
 8006614:	40014000 	.word	0x40014000
 8006618:	40014400 	.word	0x40014400
 800661c:	40014800 	.word	0x40014800

08006620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	f023 0210 	bic.w	r2, r3, #16
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0320 	bic.w	r3, r3, #32
 800666e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a28      	ldr	r2, [pc, #160]	@ (8006720 <TIM_OC2_SetConfig+0x100>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_OC2_SetConfig+0x6c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a27      	ldr	r2, [pc, #156]	@ (8006724 <TIM_OC2_SetConfig+0x104>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d10d      	bne.n	80066a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006720 <TIM_OC2_SetConfig+0x100>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00f      	beq.n	80066d0 <TIM_OC2_SetConfig+0xb0>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006724 <TIM_OC2_SetConfig+0x104>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <TIM_OC2_SetConfig+0xb0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006728 <TIM_OC2_SetConfig+0x108>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_OC2_SetConfig+0xb0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1a      	ldr	r2, [pc, #104]	@ (800672c <TIM_OC2_SetConfig+0x10c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_OC2_SetConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a19      	ldr	r2, [pc, #100]	@ (8006730 <TIM_OC2_SetConfig+0x110>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d113      	bne.n	80066f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00
 8006724:	40013400 	.word	0x40013400
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a27      	ldr	r2, [pc, #156]	@ (8006830 <TIM_OC3_SetConfig+0xfc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_OC3_SetConfig+0x6a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a26      	ldr	r2, [pc, #152]	@ (8006834 <TIM_OC3_SetConfig+0x100>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10d      	bne.n	80067ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006830 <TIM_OC3_SetConfig+0xfc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00f      	beq.n	80067e2 <TIM_OC3_SetConfig+0xae>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006834 <TIM_OC3_SetConfig+0x100>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00b      	beq.n	80067e2 <TIM_OC3_SetConfig+0xae>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006838 <TIM_OC3_SetConfig+0x104>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d007      	beq.n	80067e2 <TIM_OC3_SetConfig+0xae>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a19      	ldr	r2, [pc, #100]	@ (800683c <TIM_OC3_SetConfig+0x108>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d003      	beq.n	80067e2 <TIM_OC3_SetConfig+0xae>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a18      	ldr	r2, [pc, #96]	@ (8006840 <TIM_OC3_SetConfig+0x10c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d113      	bne.n	800680a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	bf00      	nop
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800

08006844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a28      	ldr	r2, [pc, #160]	@ (8006944 <TIM_OC4_SetConfig+0x100>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC4_SetConfig+0x6c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a27      	ldr	r2, [pc, #156]	@ (8006948 <TIM_OC4_SetConfig+0x104>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10d      	bne.n	80068cc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	031b      	lsls	r3, r3, #12
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <TIM_OC4_SetConfig+0x100>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00f      	beq.n	80068f4 <TIM_OC4_SetConfig+0xb0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006948 <TIM_OC4_SetConfig+0x104>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00b      	beq.n	80068f4 <TIM_OC4_SetConfig+0xb0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a1b      	ldr	r2, [pc, #108]	@ (800694c <TIM_OC4_SetConfig+0x108>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d007      	beq.n	80068f4 <TIM_OC4_SetConfig+0xb0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006950 <TIM_OC4_SetConfig+0x10c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC4_SetConfig+0xb0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a19      	ldr	r2, [pc, #100]	@ (8006954 <TIM_OC4_SetConfig+0x110>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d113      	bne.n	800691c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006902:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	019b      	lsls	r3, r3, #6
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800699c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a17      	ldr	r2, [pc, #92]	@ (8006a0c <TIM_OC5_SetConfig+0xb4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00f      	beq.n	80069d2 <TIM_OC5_SetConfig+0x7a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a16      	ldr	r2, [pc, #88]	@ (8006a10 <TIM_OC5_SetConfig+0xb8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_OC5_SetConfig+0x7a>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <TIM_OC5_SetConfig+0xbc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_OC5_SetConfig+0x7a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a14      	ldr	r2, [pc, #80]	@ (8006a18 <TIM_OC5_SetConfig+0xc0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC5_SetConfig+0x7a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a13      	ldr	r2, [pc, #76]	@ (8006a1c <TIM_OC5_SetConfig+0xc4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d109      	bne.n	80069e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	621a      	str	r2, [r3, #32]
}
 8006a00:	bf00      	nop
 8006a02:	371c      	adds	r7, #28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40013400 	.word	0x40013400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800

08006a20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	051b      	lsls	r3, r3, #20
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a18      	ldr	r2, [pc, #96]	@ (8006ad8 <TIM_OC6_SetConfig+0xb8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00f      	beq.n	8006a9c <TIM_OC6_SetConfig+0x7c>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a17      	ldr	r2, [pc, #92]	@ (8006adc <TIM_OC6_SetConfig+0xbc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_OC6_SetConfig+0x7c>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a16      	ldr	r2, [pc, #88]	@ (8006ae0 <TIM_OC6_SetConfig+0xc0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_OC6_SetConfig+0x7c>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a15      	ldr	r2, [pc, #84]	@ (8006ae4 <TIM_OC6_SetConfig+0xc4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_OC6_SetConfig+0x7c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a14      	ldr	r2, [pc, #80]	@ (8006ae8 <TIM_OC6_SetConfig+0xc8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d109      	bne.n	8006ab0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	029b      	lsls	r3, r3, #10
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40012c00 	.word	0x40012c00
 8006adc:	40013400 	.word	0x40013400
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40014400 	.word	0x40014400
 8006ae8:	40014800 	.word	0x40014800

08006aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0201 	bic.w	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 030a 	bic.w	r3, r3, #10
 8006b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b087      	sub	sp, #28
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f023 0210 	bic.w	r2, r3, #16
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	031b      	lsls	r3, r3, #12
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f043 0307 	orr.w	r3, r3, #7
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	609a      	str	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	021a      	lsls	r2, r3, #8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	609a      	str	r2, [r3, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f003 031f 	and.w	r3, r3, #31
 8006c36:	2201      	movs	r2, #1
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1a      	ldr	r2, [r3, #32]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	43db      	mvns	r3, r3
 8006c46:	401a      	ands	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a1a      	ldr	r2, [r3, #32]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
	...

08006c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e065      	b.n	8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2c      	ldr	r2, [pc, #176]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d108      	bne.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d018      	beq.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfe:	d013      	beq.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00e      	beq.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d009      	beq.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a12      	ldr	r2, [pc, #72]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d004      	beq.n	8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a13      	ldr	r2, [pc, #76]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d10c      	bne.n	8006d42 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	40012c00 	.word	0x40012c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40014000 	.word	0x40014000

08006d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d101      	bne.n	8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	e073      	b.n	8006e78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a19      	ldr	r2, [pc, #100]	@ (8006e84 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d004      	beq.n	8006e2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a18      	ldr	r2, [pc, #96]	@ (8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d11c      	bne.n	8006e66 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e36:	051b      	lsls	r3, r3, #20
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40013400 	.word	0x40013400

08006e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e042      	b.n	8006f24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fc f9d1 	bl	8003258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2224      	movs	r2, #36	@ 0x24
 8006eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0201 	bic.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fb82 	bl	80075e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f8b3 	bl	8007048 <UART_SetConfig>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e01b      	b.n	8006f24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fc01 	bl	8007724 <UART_CheckIdleState>
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	@ 0x28
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d17b      	bne.n	800703e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <HAL_UART_Transmit+0x26>
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e074      	b.n	8007040 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2221      	movs	r2, #33	@ 0x21
 8006f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f66:	f7fc fb83 	bl	8003670 <HAL_GetTick>
 8006f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f84:	d108      	bne.n	8006f98 <HAL_UART_Transmit+0x6c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	e003      	b.n	8006fa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fa0:	e030      	b.n	8007004 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2180      	movs	r1, #128	@ 0x80
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fc63 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e03d      	b.n	8007040 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	3302      	adds	r3, #2
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	e007      	b.n	8006ff2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	781a      	ldrb	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1c8      	bne.n	8006fa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2200      	movs	r2, #0
 8007018:	2140      	movs	r1, #64	@ 0x40
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fc2c 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e006      	b.n	8007040 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	e000      	b.n	8007040 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800703e:	2302      	movs	r3, #2
  }
}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800704c:	b08c      	sub	sp, #48	@ 0x30
 800704e:	af00      	add	r7, sp, #0
 8007050:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	431a      	orrs	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	431a      	orrs	r2, r3
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	4313      	orrs	r3, r2
 800706e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4bab      	ldr	r3, [pc, #684]	@ (8007324 <UART_SetConfig+0x2dc>)
 8007078:	4013      	ands	r3, r2
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007080:	430b      	orrs	r3, r1
 8007082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4aa0      	ldr	r2, [pc, #640]	@ (8007328 <UART_SetConfig+0x2e0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b0:	4313      	orrs	r3, r2
 80070b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80070be:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d2:	f023 010f 	bic.w	r1, r3, #15
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a91      	ldr	r2, [pc, #580]	@ (800732c <UART_SetConfig+0x2e4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d125      	bne.n	8007138 <UART_SetConfig+0xf0>
 80070ec:	4b90      	ldr	r3, [pc, #576]	@ (8007330 <UART_SetConfig+0x2e8>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d81a      	bhi.n	8007130 <UART_SetConfig+0xe8>
 80070fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <UART_SetConfig+0xb8>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007111 	.word	0x08007111
 8007104:	08007121 	.word	0x08007121
 8007108:	08007119 	.word	0x08007119
 800710c:	08007129 	.word	0x08007129
 8007110:	2301      	movs	r3, #1
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007116:	e0d6      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007118:	2302      	movs	r3, #2
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800711e:	e0d2      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007126:	e0ce      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800712e:	e0ca      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007136:	e0c6      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a7d      	ldr	r2, [pc, #500]	@ (8007334 <UART_SetConfig+0x2ec>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d138      	bne.n	80071b4 <UART_SetConfig+0x16c>
 8007142:	4b7b      	ldr	r3, [pc, #492]	@ (8007330 <UART_SetConfig+0x2e8>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007148:	f003 030c 	and.w	r3, r3, #12
 800714c:	2b0c      	cmp	r3, #12
 800714e:	d82d      	bhi.n	80071ac <UART_SetConfig+0x164>
 8007150:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <UART_SetConfig+0x110>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	0800718d 	.word	0x0800718d
 800715c:	080071ad 	.word	0x080071ad
 8007160:	080071ad 	.word	0x080071ad
 8007164:	080071ad 	.word	0x080071ad
 8007168:	0800719d 	.word	0x0800719d
 800716c:	080071ad 	.word	0x080071ad
 8007170:	080071ad 	.word	0x080071ad
 8007174:	080071ad 	.word	0x080071ad
 8007178:	08007195 	.word	0x08007195
 800717c:	080071ad 	.word	0x080071ad
 8007180:	080071ad 	.word	0x080071ad
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071a5 	.word	0x080071a5
 800718c:	2300      	movs	r3, #0
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007192:	e098      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007194:	2302      	movs	r3, #2
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800719a:	e094      	b.n	80072c6 <UART_SetConfig+0x27e>
 800719c:	2304      	movs	r3, #4
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e090      	b.n	80072c6 <UART_SetConfig+0x27e>
 80071a4:	2308      	movs	r3, #8
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071aa:	e08c      	b.n	80072c6 <UART_SetConfig+0x27e>
 80071ac:	2310      	movs	r3, #16
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b2:	e088      	b.n	80072c6 <UART_SetConfig+0x27e>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a5f      	ldr	r2, [pc, #380]	@ (8007338 <UART_SetConfig+0x2f0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d125      	bne.n	800720a <UART_SetConfig+0x1c2>
 80071be:	4b5c      	ldr	r3, [pc, #368]	@ (8007330 <UART_SetConfig+0x2e8>)
 80071c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071c8:	2b30      	cmp	r3, #48	@ 0x30
 80071ca:	d016      	beq.n	80071fa <UART_SetConfig+0x1b2>
 80071cc:	2b30      	cmp	r3, #48	@ 0x30
 80071ce:	d818      	bhi.n	8007202 <UART_SetConfig+0x1ba>
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d00a      	beq.n	80071ea <UART_SetConfig+0x1a2>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d814      	bhi.n	8007202 <UART_SetConfig+0x1ba>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <UART_SetConfig+0x19a>
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d008      	beq.n	80071f2 <UART_SetConfig+0x1aa>
 80071e0:	e00f      	b.n	8007202 <UART_SetConfig+0x1ba>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e8:	e06d      	b.n	80072c6 <UART_SetConfig+0x27e>
 80071ea:	2302      	movs	r3, #2
 80071ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f0:	e069      	b.n	80072c6 <UART_SetConfig+0x27e>
 80071f2:	2304      	movs	r3, #4
 80071f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f8:	e065      	b.n	80072c6 <UART_SetConfig+0x27e>
 80071fa:	2308      	movs	r3, #8
 80071fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007200:	e061      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007202:	2310      	movs	r3, #16
 8007204:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007208:	e05d      	b.n	80072c6 <UART_SetConfig+0x27e>
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a4b      	ldr	r2, [pc, #300]	@ (800733c <UART_SetConfig+0x2f4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d125      	bne.n	8007260 <UART_SetConfig+0x218>
 8007214:	4b46      	ldr	r3, [pc, #280]	@ (8007330 <UART_SetConfig+0x2e8>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800721e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007220:	d016      	beq.n	8007250 <UART_SetConfig+0x208>
 8007222:	2bc0      	cmp	r3, #192	@ 0xc0
 8007224:	d818      	bhi.n	8007258 <UART_SetConfig+0x210>
 8007226:	2b80      	cmp	r3, #128	@ 0x80
 8007228:	d00a      	beq.n	8007240 <UART_SetConfig+0x1f8>
 800722a:	2b80      	cmp	r3, #128	@ 0x80
 800722c:	d814      	bhi.n	8007258 <UART_SetConfig+0x210>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <UART_SetConfig+0x1f0>
 8007232:	2b40      	cmp	r3, #64	@ 0x40
 8007234:	d008      	beq.n	8007248 <UART_SetConfig+0x200>
 8007236:	e00f      	b.n	8007258 <UART_SetConfig+0x210>
 8007238:	2300      	movs	r3, #0
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e042      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007240:	2302      	movs	r3, #2
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e03e      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007248:	2304      	movs	r3, #4
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800724e:	e03a      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007250:	2308      	movs	r3, #8
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007256:	e036      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007258:	2310      	movs	r3, #16
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725e:	e032      	b.n	80072c6 <UART_SetConfig+0x27e>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a30      	ldr	r2, [pc, #192]	@ (8007328 <UART_SetConfig+0x2e0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d12a      	bne.n	80072c0 <UART_SetConfig+0x278>
 800726a:	4b31      	ldr	r3, [pc, #196]	@ (8007330 <UART_SetConfig+0x2e8>)
 800726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007270:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007274:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007278:	d01a      	beq.n	80072b0 <UART_SetConfig+0x268>
 800727a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800727e:	d81b      	bhi.n	80072b8 <UART_SetConfig+0x270>
 8007280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007284:	d00c      	beq.n	80072a0 <UART_SetConfig+0x258>
 8007286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728a:	d815      	bhi.n	80072b8 <UART_SetConfig+0x270>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <UART_SetConfig+0x250>
 8007290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007294:	d008      	beq.n	80072a8 <UART_SetConfig+0x260>
 8007296:	e00f      	b.n	80072b8 <UART_SetConfig+0x270>
 8007298:	2300      	movs	r3, #0
 800729a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800729e:	e012      	b.n	80072c6 <UART_SetConfig+0x27e>
 80072a0:	2302      	movs	r3, #2
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072a6:	e00e      	b.n	80072c6 <UART_SetConfig+0x27e>
 80072a8:	2304      	movs	r3, #4
 80072aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ae:	e00a      	b.n	80072c6 <UART_SetConfig+0x27e>
 80072b0:	2308      	movs	r3, #8
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b6:	e006      	b.n	80072c6 <UART_SetConfig+0x27e>
 80072b8:	2310      	movs	r3, #16
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072be:	e002      	b.n	80072c6 <UART_SetConfig+0x27e>
 80072c0:	2310      	movs	r3, #16
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a17      	ldr	r2, [pc, #92]	@ (8007328 <UART_SetConfig+0x2e0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	f040 80a8 	bne.w	8007422 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d834      	bhi.n	8007344 <UART_SetConfig+0x2fc>
 80072da:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <UART_SetConfig+0x298>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007305 	.word	0x08007305
 80072e4:	08007345 	.word	0x08007345
 80072e8:	0800730d 	.word	0x0800730d
 80072ec:	08007345 	.word	0x08007345
 80072f0:	08007313 	.word	0x08007313
 80072f4:	08007345 	.word	0x08007345
 80072f8:	08007345 	.word	0x08007345
 80072fc:	08007345 	.word	0x08007345
 8007300:	0800731b 	.word	0x0800731b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007304:	f7fd f9d0 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8007308:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800730a:	e021      	b.n	8007350 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800730c:	4b0c      	ldr	r3, [pc, #48]	@ (8007340 <UART_SetConfig+0x2f8>)
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007310:	e01e      	b.n	8007350 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007312:	f7fd f95b 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 8007316:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007318:	e01a      	b.n	8007350 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007320:	e016      	b.n	8007350 <UART_SetConfig+0x308>
 8007322:	bf00      	nop
 8007324:	cfff69f3 	.word	0xcfff69f3
 8007328:	40008000 	.word	0x40008000
 800732c:	40013800 	.word	0x40013800
 8007330:	40021000 	.word	0x40021000
 8007334:	40004400 	.word	0x40004400
 8007338:	40004800 	.word	0x40004800
 800733c:	40004c00 	.word	0x40004c00
 8007340:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800734e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 812a 	beq.w	80075ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	4a9e      	ldr	r2, [pc, #632]	@ (80075d8 <UART_SetConfig+0x590>)
 800735e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007362:	461a      	mov	r2, r3
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	fbb3 f3f2 	udiv	r3, r3, r2
 800736a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	429a      	cmp	r2, r3
 800737a:	d305      	bcc.n	8007388 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	429a      	cmp	r2, r3
 8007386:	d903      	bls.n	8007390 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800738e:	e10d      	b.n	80075ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	2200      	movs	r2, #0
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	60fa      	str	r2, [r7, #12]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739c:	4a8e      	ldr	r2, [pc, #568]	@ (80075d8 <UART_SetConfig+0x590>)
 800739e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2200      	movs	r2, #0
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073b2:	f7f9 fc91 	bl	8000cd8 <__aeabi_uldivmod>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4610      	mov	r0, r2
 80073bc:	4619      	mov	r1, r3
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	020b      	lsls	r3, r1, #8
 80073c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073cc:	0202      	lsls	r2, r0, #8
 80073ce:	6979      	ldr	r1, [r7, #20]
 80073d0:	6849      	ldr	r1, [r1, #4]
 80073d2:	0849      	lsrs	r1, r1, #1
 80073d4:	2000      	movs	r0, #0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4605      	mov	r5, r0
 80073da:	eb12 0804 	adds.w	r8, r2, r4
 80073de:	eb43 0905 	adc.w	r9, r3, r5
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	469a      	mov	sl, r3
 80073ea:	4693      	mov	fp, r2
 80073ec:	4652      	mov	r2, sl
 80073ee:	465b      	mov	r3, fp
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f9 fc70 	bl	8000cd8 <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4613      	mov	r3, r2
 80073fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007406:	d308      	bcc.n	800741a <UART_SetConfig+0x3d2>
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800740e:	d204      	bcs.n	800741a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6a3a      	ldr	r2, [r7, #32]
 8007416:	60da      	str	r2, [r3, #12]
 8007418:	e0c8      	b.n	80075ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007420:	e0c4      	b.n	80075ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800742a:	d167      	bne.n	80074fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800742c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007430:	2b08      	cmp	r3, #8
 8007432:	d828      	bhi.n	8007486 <UART_SetConfig+0x43e>
 8007434:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <UART_SetConfig+0x3f4>)
 8007436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743a:	bf00      	nop
 800743c:	08007461 	.word	0x08007461
 8007440:	08007469 	.word	0x08007469
 8007444:	08007471 	.word	0x08007471
 8007448:	08007487 	.word	0x08007487
 800744c:	08007477 	.word	0x08007477
 8007450:	08007487 	.word	0x08007487
 8007454:	08007487 	.word	0x08007487
 8007458:	08007487 	.word	0x08007487
 800745c:	0800747f 	.word	0x0800747f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007460:	f7fd f922 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007466:	e014      	b.n	8007492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007468:	f7fd f934 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 800746c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800746e:	e010      	b.n	8007492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007470:	4b5a      	ldr	r3, [pc, #360]	@ (80075dc <UART_SetConfig+0x594>)
 8007472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007474:	e00d      	b.n	8007492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007476:	f7fd f8a9 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 800747a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800747c:	e009      	b.n	8007492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007484:	e005      	b.n	8007492 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8089 	beq.w	80075ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749e:	4a4e      	ldr	r2, [pc, #312]	@ (80075d8 <UART_SetConfig+0x590>)
 80074a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ac:	005a      	lsls	r2, r3, #1
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	441a      	add	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	2b0f      	cmp	r3, #15
 80074c4:	d916      	bls.n	80074f4 <UART_SetConfig+0x4ac>
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074cc:	d212      	bcs.n	80074f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f023 030f 	bic.w	r3, r3, #15
 80074d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f003 0307 	and.w	r3, r3, #7
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	8bfb      	ldrh	r3, [r7, #30]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	8bfa      	ldrh	r2, [r7, #30]
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	e05b      	b.n	80075ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074fa:	e057      	b.n	80075ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007500:	2b08      	cmp	r3, #8
 8007502:	d828      	bhi.n	8007556 <UART_SetConfig+0x50e>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <UART_SetConfig+0x4c4>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007531 	.word	0x08007531
 8007510:	08007539 	.word	0x08007539
 8007514:	08007541 	.word	0x08007541
 8007518:	08007557 	.word	0x08007557
 800751c:	08007547 	.word	0x08007547
 8007520:	08007557 	.word	0x08007557
 8007524:	08007557 	.word	0x08007557
 8007528:	08007557 	.word	0x08007557
 800752c:	0800754f 	.word	0x0800754f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007530:	f7fd f8ba 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8007534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007536:	e014      	b.n	8007562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007538:	f7fd f8cc 	bl	80046d4 <HAL_RCC_GetPCLK2Freq>
 800753c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800753e:	e010      	b.n	8007562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007540:	4b26      	ldr	r3, [pc, #152]	@ (80075dc <UART_SetConfig+0x594>)
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007544:	e00d      	b.n	8007562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007546:	f7fd f841 	bl	80045cc <HAL_RCC_GetSysClockFreq>
 800754a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800754c:	e009      	b.n	8007562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800754e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007554:	e005      	b.n	8007562 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007560:	bf00      	nop
    }

    if (pclk != 0U)
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	d021      	beq.n	80075ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	4a1a      	ldr	r2, [pc, #104]	@ (80075d8 <UART_SetConfig+0x590>)
 800756e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007572:	461a      	mov	r2, r3
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	fbb3 f2f2 	udiv	r2, r3, r2
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	441a      	add	r2, r3
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	2b0f      	cmp	r3, #15
 8007590:	d909      	bls.n	80075a6 <UART_SetConfig+0x55e>
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007598:	d205      	bcs.n	80075a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	b29a      	uxth	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60da      	str	r2, [r3, #12]
 80075a4:	e002      	b.n	80075ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2200      	movs	r2, #0
 80075c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2200      	movs	r2, #0
 80075c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80075c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3730      	adds	r7, #48	@ 0x30
 80075d0:	46bd      	mov	sp, r7
 80075d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075d6:	bf00      	nop
 80075d8:	0800c44c 	.word	0x0800c44c
 80075dc:	00f42400 	.word	0x00f42400

080075e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01a      	beq.n	80076f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076de:	d10a      	bne.n	80076f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	605a      	str	r2, [r3, #4]
  }
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b098      	sub	sp, #96	@ 0x60
 8007728:	af02      	add	r7, sp, #8
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007734:	f7fb ff9c 	bl	8003670 <HAL_GetTick>
 8007738:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b08      	cmp	r3, #8
 8007746:	d12f      	bne.n	80077a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007750:	2200      	movs	r2, #0
 8007752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f88e 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d022      	beq.n	80077a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007776:	653b      	str	r3, [r7, #80]	@ 0x50
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007780:	647b      	str	r3, [r7, #68]	@ 0x44
 8007782:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800778e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e063      	b.n	8007870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d149      	bne.n	800784a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077be:	2200      	movs	r2, #0
 80077c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f857 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d03c      	beq.n	800784a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	623b      	str	r3, [r7, #32]
   return(result);
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80077f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e6      	bne.n	80077d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	60fb      	str	r3, [r7, #12]
   return(result);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007822:	61fa      	str	r2, [r7, #28]
 8007824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	69b9      	ldr	r1, [r7, #24]
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	617b      	str	r3, [r7, #20]
   return(result);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e5      	bne.n	8007802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e012      	b.n	8007870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3758      	adds	r7, #88	@ 0x58
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007888:	e04f      	b.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007890:	d04b      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007892:	f7fb feed 	bl	8003670 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d302      	bcc.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e04e      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d037      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b80      	cmp	r3, #128	@ 0x80
 80078be:	d034      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b40      	cmp	r3, #64	@ 0x40
 80078c4:	d031      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d110      	bne.n	80078f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2208      	movs	r2, #8
 80078da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f838 	bl	8007952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2208      	movs	r2, #8
 80078e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e029      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007904:	d111      	bne.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800790e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f81e 	bl	8007952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e00f      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4013      	ands	r3, r2
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	429a      	cmp	r2, r3
 8007938:	bf0c      	ite	eq
 800793a:	2301      	moveq	r3, #1
 800793c:	2300      	movne	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	429a      	cmp	r2, r3
 8007946:	d0a0      	beq.n	800788a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007952:	b480      	push	{r7}
 8007954:	b095      	sub	sp, #84	@ 0x54
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800796e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007978:	643b      	str	r3, [r7, #64]	@ 0x40
 800797a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800797e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e6      	bne.n	800795a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3308      	adds	r3, #8
 8007992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	61fb      	str	r3, [r7, #28]
   return(result);
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e3      	bne.n	800798c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d118      	bne.n	80079fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f023 0310 	bic.w	r3, r3, #16
 80079e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	613b      	str	r3, [r7, #16]
   return(result);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a12:	bf00      	nop
 8007a14:	3754      	adds	r7, #84	@ 0x54
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e027      	b.n	8007a84 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2224      	movs	r2, #36	@ 0x24
 8007a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0201 	bic.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e02d      	b.n	8007b04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2224      	movs	r2, #36	@ 0x24
 8007ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0201 	bic.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f84f 	bl	8007b88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e02d      	b.n	8007b80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2224      	movs	r2, #36	@ 0x24
 8007b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f811 	bl	8007b88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d108      	bne.n	8007baa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ba8:	e031      	b.n	8007c0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007baa:	2308      	movs	r3, #8
 8007bac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bae:	2308      	movs	r3, #8
 8007bb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	0e5b      	lsrs	r3, r3, #25
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	0f5b      	lsrs	r3, r3, #29
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	7b3a      	ldrb	r2, [r7, #12]
 8007bd6:	4911      	ldr	r1, [pc, #68]	@ (8007c1c <UARTEx_SetNbDataToProcess+0x94>)
 8007bd8:	5c8a      	ldrb	r2, [r1, r2]
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bde:	7b3a      	ldrb	r2, [r7, #12]
 8007be0:	490f      	ldr	r1, [pc, #60]	@ (8007c20 <UARTEx_SetNbDataToProcess+0x98>)
 8007be2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	7b7a      	ldrb	r2, [r7, #13]
 8007bf4:	4909      	ldr	r1, [pc, #36]	@ (8007c1c <UARTEx_SetNbDataToProcess+0x94>)
 8007bf6:	5c8a      	ldrb	r2, [r1, r2]
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bfc:	7b7a      	ldrb	r2, [r7, #13]
 8007bfe:	4908      	ldr	r1, [pc, #32]	@ (8007c20 <UARTEx_SetNbDataToProcess+0x98>)
 8007c00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c02:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	0800c464 	.word	0x0800c464
 8007c20:	0800c46c 	.word	0x0800c46c

08007c24 <__cvt>:
 8007c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	ec57 6b10 	vmov	r6, r7, d0
 8007c2c:	2f00      	cmp	r7, #0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	4619      	mov	r1, r3
 8007c32:	463b      	mov	r3, r7
 8007c34:	bfbb      	ittet	lt
 8007c36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c3a:	461f      	movlt	r7, r3
 8007c3c:	2300      	movge	r3, #0
 8007c3e:	232d      	movlt	r3, #45	@ 0x2d
 8007c40:	700b      	strb	r3, [r1, #0]
 8007c42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c48:	4691      	mov	r9, r2
 8007c4a:	f023 0820 	bic.w	r8, r3, #32
 8007c4e:	bfbc      	itt	lt
 8007c50:	4632      	movlt	r2, r6
 8007c52:	4616      	movlt	r6, r2
 8007c54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c58:	d005      	beq.n	8007c66 <__cvt+0x42>
 8007c5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c5e:	d100      	bne.n	8007c62 <__cvt+0x3e>
 8007c60:	3401      	adds	r4, #1
 8007c62:	2102      	movs	r1, #2
 8007c64:	e000      	b.n	8007c68 <__cvt+0x44>
 8007c66:	2103      	movs	r1, #3
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	ab02      	add	r3, sp, #8
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	ec47 6b10 	vmov	d0, r6, r7
 8007c74:	4653      	mov	r3, sl
 8007c76:	4622      	mov	r2, r4
 8007c78:	f001 f946 	bl	8008f08 <_dtoa_r>
 8007c7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c80:	4605      	mov	r5, r0
 8007c82:	d119      	bne.n	8007cb8 <__cvt+0x94>
 8007c84:	f019 0f01 	tst.w	r9, #1
 8007c88:	d00e      	beq.n	8007ca8 <__cvt+0x84>
 8007c8a:	eb00 0904 	add.w	r9, r0, r4
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2300      	movs	r3, #0
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 ff3f 	bl	8000b18 <__aeabi_dcmpeq>
 8007c9a:	b108      	cbz	r0, 8007ca0 <__cvt+0x7c>
 8007c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ca0:	2230      	movs	r2, #48	@ 0x30
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	454b      	cmp	r3, r9
 8007ca6:	d31e      	bcc.n	8007ce6 <__cvt+0xc2>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cac:	1b5b      	subs	r3, r3, r5
 8007cae:	4628      	mov	r0, r5
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	b004      	add	sp, #16
 8007cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cbc:	eb00 0904 	add.w	r9, r0, r4
 8007cc0:	d1e5      	bne.n	8007c8e <__cvt+0x6a>
 8007cc2:	7803      	ldrb	r3, [r0, #0]
 8007cc4:	2b30      	cmp	r3, #48	@ 0x30
 8007cc6:	d10a      	bne.n	8007cde <__cvt+0xba>
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	4639      	mov	r1, r7
 8007cd0:	f7f8 ff22 	bl	8000b18 <__aeabi_dcmpeq>
 8007cd4:	b918      	cbnz	r0, 8007cde <__cvt+0xba>
 8007cd6:	f1c4 0401 	rsb	r4, r4, #1
 8007cda:	f8ca 4000 	str.w	r4, [sl]
 8007cde:	f8da 3000 	ldr.w	r3, [sl]
 8007ce2:	4499      	add	r9, r3
 8007ce4:	e7d3      	b.n	8007c8e <__cvt+0x6a>
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	9103      	str	r1, [sp, #12]
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e7d9      	b.n	8007ca2 <__cvt+0x7e>

08007cee <__exponent>:
 8007cee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	bfba      	itte	lt
 8007cf4:	4249      	neglt	r1, r1
 8007cf6:	232d      	movlt	r3, #45	@ 0x2d
 8007cf8:	232b      	movge	r3, #43	@ 0x2b
 8007cfa:	2909      	cmp	r1, #9
 8007cfc:	7002      	strb	r2, [r0, #0]
 8007cfe:	7043      	strb	r3, [r0, #1]
 8007d00:	dd29      	ble.n	8007d56 <__exponent+0x68>
 8007d02:	f10d 0307 	add.w	r3, sp, #7
 8007d06:	461d      	mov	r5, r3
 8007d08:	270a      	movs	r7, #10
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d10:	fb07 1416 	mls	r4, r7, r6, r1
 8007d14:	3430      	adds	r4, #48	@ 0x30
 8007d16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2c63      	cmp	r4, #99	@ 0x63
 8007d1e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007d22:	4631      	mov	r1, r6
 8007d24:	dcf1      	bgt.n	8007d0a <__exponent+0x1c>
 8007d26:	3130      	adds	r1, #48	@ 0x30
 8007d28:	1e94      	subs	r4, r2, #2
 8007d2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d2e:	1c41      	adds	r1, r0, #1
 8007d30:	4623      	mov	r3, r4
 8007d32:	42ab      	cmp	r3, r5
 8007d34:	d30a      	bcc.n	8007d4c <__exponent+0x5e>
 8007d36:	f10d 0309 	add.w	r3, sp, #9
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	42ac      	cmp	r4, r5
 8007d3e:	bf88      	it	hi
 8007d40:	2300      	movhi	r3, #0
 8007d42:	3302      	adds	r3, #2
 8007d44:	4403      	add	r3, r0
 8007d46:	1a18      	subs	r0, r3, r0
 8007d48:	b003      	add	sp, #12
 8007d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d54:	e7ed      	b.n	8007d32 <__exponent+0x44>
 8007d56:	2330      	movs	r3, #48	@ 0x30
 8007d58:	3130      	adds	r1, #48	@ 0x30
 8007d5a:	7083      	strb	r3, [r0, #2]
 8007d5c:	70c1      	strb	r1, [r0, #3]
 8007d5e:	1d03      	adds	r3, r0, #4
 8007d60:	e7f1      	b.n	8007d46 <__exponent+0x58>
	...

08007d64 <_printf_float>:
 8007d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	b08d      	sub	sp, #52	@ 0x34
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d70:	4616      	mov	r6, r2
 8007d72:	461f      	mov	r7, r3
 8007d74:	4605      	mov	r5, r0
 8007d76:	f000 ffb3 	bl	8008ce0 <_localeconv_r>
 8007d7a:	6803      	ldr	r3, [r0, #0]
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7f8 fa9e 	bl	80002c0 <strlen>
 8007d84:	2300      	movs	r3, #0
 8007d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d88:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8c:	9005      	str	r0, [sp, #20]
 8007d8e:	3307      	adds	r3, #7
 8007d90:	f023 0307 	bic.w	r3, r3, #7
 8007d94:	f103 0208 	add.w	r2, r3, #8
 8007d98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d9c:	f8d4 b000 	ldr.w	fp, [r4]
 8007da0:	f8c8 2000 	str.w	r2, [r8]
 8007da4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007da8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007dac:	9307      	str	r3, [sp, #28]
 8007dae:	f8cd 8018 	str.w	r8, [sp, #24]
 8007db2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dba:	4b9c      	ldr	r3, [pc, #624]	@ (800802c <_printf_float+0x2c8>)
 8007dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dc0:	f7f8 fedc 	bl	8000b7c <__aeabi_dcmpun>
 8007dc4:	bb70      	cbnz	r0, 8007e24 <_printf_float+0xc0>
 8007dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dca:	4b98      	ldr	r3, [pc, #608]	@ (800802c <_printf_float+0x2c8>)
 8007dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dd0:	f7f8 feb6 	bl	8000b40 <__aeabi_dcmple>
 8007dd4:	bb30      	cbnz	r0, 8007e24 <_printf_float+0xc0>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4649      	mov	r1, r9
 8007dde:	f7f8 fea5 	bl	8000b2c <__aeabi_dcmplt>
 8007de2:	b110      	cbz	r0, 8007dea <_printf_float+0x86>
 8007de4:	232d      	movs	r3, #45	@ 0x2d
 8007de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dea:	4a91      	ldr	r2, [pc, #580]	@ (8008030 <_printf_float+0x2cc>)
 8007dec:	4b91      	ldr	r3, [pc, #580]	@ (8008034 <_printf_float+0x2d0>)
 8007dee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007df2:	bf8c      	ite	hi
 8007df4:	4690      	movhi	r8, r2
 8007df6:	4698      	movls	r8, r3
 8007df8:	2303      	movs	r3, #3
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	f02b 0304 	bic.w	r3, fp, #4
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	9700      	str	r7, [sp, #0]
 8007e08:	4633      	mov	r3, r6
 8007e0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f9d2 	bl	80081b8 <_printf_common>
 8007e14:	3001      	adds	r0, #1
 8007e16:	f040 808d 	bne.w	8007f34 <_printf_float+0x1d0>
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e1e:	b00d      	add	sp, #52	@ 0x34
 8007e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 fea6 	bl	8000b7c <__aeabi_dcmpun>
 8007e30:	b140      	cbz	r0, 8007e44 <_printf_float+0xe0>
 8007e32:	464b      	mov	r3, r9
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bfbc      	itt	lt
 8007e38:	232d      	movlt	r3, #45	@ 0x2d
 8007e3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8008038 <_printf_float+0x2d4>)
 8007e40:	4b7e      	ldr	r3, [pc, #504]	@ (800803c <_printf_float+0x2d8>)
 8007e42:	e7d4      	b.n	8007dee <_printf_float+0x8a>
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e4a:	9206      	str	r2, [sp, #24]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	d13b      	bne.n	8007ec8 <_printf_float+0x164>
 8007e50:	2306      	movs	r3, #6
 8007e52:	6063      	str	r3, [r4, #4]
 8007e54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e58:	2300      	movs	r3, #0
 8007e5a:	6022      	str	r2, [r4, #0]
 8007e5c:	9303      	str	r3, [sp, #12]
 8007e5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e64:	ab09      	add	r3, sp, #36	@ 0x24
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	6861      	ldr	r1, [r4, #4]
 8007e6a:	ec49 8b10 	vmov	d0, r8, r9
 8007e6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7ff fed6 	bl	8007c24 <__cvt>
 8007e78:	9b06      	ldr	r3, [sp, #24]
 8007e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e7c:	2b47      	cmp	r3, #71	@ 0x47
 8007e7e:	4680      	mov	r8, r0
 8007e80:	d129      	bne.n	8007ed6 <_printf_float+0x172>
 8007e82:	1cc8      	adds	r0, r1, #3
 8007e84:	db02      	blt.n	8007e8c <_printf_float+0x128>
 8007e86:	6863      	ldr	r3, [r4, #4]
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	dd41      	ble.n	8007f10 <_printf_float+0x1ac>
 8007e8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e90:	fa5f fa8a 	uxtb.w	sl, sl
 8007e94:	3901      	subs	r1, #1
 8007e96:	4652      	mov	r2, sl
 8007e98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e9e:	f7ff ff26 	bl	8007cee <__exponent>
 8007ea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ea4:	1813      	adds	r3, r2, r0
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	4681      	mov	r9, r0
 8007eaa:	6123      	str	r3, [r4, #16]
 8007eac:	dc02      	bgt.n	8007eb4 <_printf_float+0x150>
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	07d2      	lsls	r2, r2, #31
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_float+0x154>
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0a2      	beq.n	8007e06 <_printf_float+0xa2>
 8007ec0:	232d      	movs	r3, #45	@ 0x2d
 8007ec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ec6:	e79e      	b.n	8007e06 <_printf_float+0xa2>
 8007ec8:	9a06      	ldr	r2, [sp, #24]
 8007eca:	2a47      	cmp	r2, #71	@ 0x47
 8007ecc:	d1c2      	bne.n	8007e54 <_printf_float+0xf0>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1c0      	bne.n	8007e54 <_printf_float+0xf0>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7bd      	b.n	8007e52 <_printf_float+0xee>
 8007ed6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007eda:	d9db      	bls.n	8007e94 <_printf_float+0x130>
 8007edc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ee0:	d118      	bne.n	8007f14 <_printf_float+0x1b0>
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	dd0b      	ble.n	8007f00 <_printf_float+0x19c>
 8007ee8:	6121      	str	r1, [r4, #16]
 8007eea:	b913      	cbnz	r3, 8007ef2 <_printf_float+0x18e>
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	07d0      	lsls	r0, r2, #31
 8007ef0:	d502      	bpl.n	8007ef8 <_printf_float+0x194>
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	440b      	add	r3, r1
 8007ef6:	6123      	str	r3, [r4, #16]
 8007ef8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007efa:	f04f 0900 	mov.w	r9, #0
 8007efe:	e7db      	b.n	8007eb8 <_printf_float+0x154>
 8007f00:	b913      	cbnz	r3, 8007f08 <_printf_float+0x1a4>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	07d2      	lsls	r2, r2, #31
 8007f06:	d501      	bpl.n	8007f0c <_printf_float+0x1a8>
 8007f08:	3302      	adds	r3, #2
 8007f0a:	e7f4      	b.n	8007ef6 <_printf_float+0x192>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e7f2      	b.n	8007ef6 <_printf_float+0x192>
 8007f10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f16:	4299      	cmp	r1, r3
 8007f18:	db05      	blt.n	8007f26 <_printf_float+0x1c2>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	6121      	str	r1, [r4, #16]
 8007f1e:	07d8      	lsls	r0, r3, #31
 8007f20:	d5ea      	bpl.n	8007ef8 <_printf_float+0x194>
 8007f22:	1c4b      	adds	r3, r1, #1
 8007f24:	e7e7      	b.n	8007ef6 <_printf_float+0x192>
 8007f26:	2900      	cmp	r1, #0
 8007f28:	bfd4      	ite	le
 8007f2a:	f1c1 0202 	rsble	r2, r1, #2
 8007f2e:	2201      	movgt	r2, #1
 8007f30:	4413      	add	r3, r2
 8007f32:	e7e0      	b.n	8007ef6 <_printf_float+0x192>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	055a      	lsls	r2, r3, #21
 8007f38:	d407      	bmi.n	8007f4a <_printf_float+0x1e6>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4628      	mov	r0, r5
 8007f42:	47b8      	blx	r7
 8007f44:	3001      	adds	r0, #1
 8007f46:	d12b      	bne.n	8007fa0 <_printf_float+0x23c>
 8007f48:	e767      	b.n	8007e1a <_printf_float+0xb6>
 8007f4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f4e:	f240 80dd 	bls.w	800810c <_printf_float+0x3a8>
 8007f52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f56:	2200      	movs	r2, #0
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f7f8 fddd 	bl	8000b18 <__aeabi_dcmpeq>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d033      	beq.n	8007fca <_printf_float+0x266>
 8007f62:	4a37      	ldr	r2, [pc, #220]	@ (8008040 <_printf_float+0x2dc>)
 8007f64:	2301      	movs	r3, #1
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f af54 	beq.w	8007e1a <_printf_float+0xb6>
 8007f72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f76:	4543      	cmp	r3, r8
 8007f78:	db02      	blt.n	8007f80 <_printf_float+0x21c>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	07d8      	lsls	r0, r3, #31
 8007f7e:	d50f      	bpl.n	8007fa0 <_printf_float+0x23c>
 8007f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f84:	4631      	mov	r1, r6
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f af45 	beq.w	8007e1a <_printf_float+0xb6>
 8007f90:	f04f 0900 	mov.w	r9, #0
 8007f94:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007f98:	f104 0a1a 	add.w	sl, r4, #26
 8007f9c:	45c8      	cmp	r8, r9
 8007f9e:	dc09      	bgt.n	8007fb4 <_printf_float+0x250>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	079b      	lsls	r3, r3, #30
 8007fa4:	f100 8103 	bmi.w	80081ae <_printf_float+0x44a>
 8007fa8:	68e0      	ldr	r0, [r4, #12]
 8007faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fac:	4298      	cmp	r0, r3
 8007fae:	bfb8      	it	lt
 8007fb0:	4618      	movlt	r0, r3
 8007fb2:	e734      	b.n	8007e1e <_printf_float+0xba>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af2b 	beq.w	8007e1a <_printf_float+0xb6>
 8007fc4:	f109 0901 	add.w	r9, r9, #1
 8007fc8:	e7e8      	b.n	8007f9c <_printf_float+0x238>
 8007fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dc39      	bgt.n	8008044 <_printf_float+0x2e0>
 8007fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8008040 <_printf_float+0x2dc>)
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4631      	mov	r1, r6
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	47b8      	blx	r7
 8007fda:	3001      	adds	r0, #1
 8007fdc:	f43f af1d 	beq.w	8007e1a <_printf_float+0xb6>
 8007fe0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fe4:	ea59 0303 	orrs.w	r3, r9, r3
 8007fe8:	d102      	bne.n	8007ff0 <_printf_float+0x28c>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	07d9      	lsls	r1, r3, #31
 8007fee:	d5d7      	bpl.n	8007fa0 <_printf_float+0x23c>
 8007ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f af0d 	beq.w	8007e1a <_printf_float+0xb6>
 8008000:	f04f 0a00 	mov.w	sl, #0
 8008004:	f104 0b1a 	add.w	fp, r4, #26
 8008008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800a:	425b      	negs	r3, r3
 800800c:	4553      	cmp	r3, sl
 800800e:	dc01      	bgt.n	8008014 <_printf_float+0x2b0>
 8008010:	464b      	mov	r3, r9
 8008012:	e793      	b.n	8007f3c <_printf_float+0x1d8>
 8008014:	2301      	movs	r3, #1
 8008016:	465a      	mov	r2, fp
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	f43f aefb 	beq.w	8007e1a <_printf_float+0xb6>
 8008024:	f10a 0a01 	add.w	sl, sl, #1
 8008028:	e7ee      	b.n	8008008 <_printf_float+0x2a4>
 800802a:	bf00      	nop
 800802c:	7fefffff 	.word	0x7fefffff
 8008030:	0800c478 	.word	0x0800c478
 8008034:	0800c474 	.word	0x0800c474
 8008038:	0800c480 	.word	0x0800c480
 800803c:	0800c47c 	.word	0x0800c47c
 8008040:	0800c484 	.word	0x0800c484
 8008044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008046:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800804a:	4553      	cmp	r3, sl
 800804c:	bfa8      	it	ge
 800804e:	4653      	movge	r3, sl
 8008050:	2b00      	cmp	r3, #0
 8008052:	4699      	mov	r9, r3
 8008054:	dc36      	bgt.n	80080c4 <_printf_float+0x360>
 8008056:	f04f 0b00 	mov.w	fp, #0
 800805a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800805e:	f104 021a 	add.w	r2, r4, #26
 8008062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008064:	9306      	str	r3, [sp, #24]
 8008066:	eba3 0309 	sub.w	r3, r3, r9
 800806a:	455b      	cmp	r3, fp
 800806c:	dc31      	bgt.n	80080d2 <_printf_float+0x36e>
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	459a      	cmp	sl, r3
 8008072:	dc3a      	bgt.n	80080ea <_printf_float+0x386>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	07da      	lsls	r2, r3, #31
 8008078:	d437      	bmi.n	80080ea <_printf_float+0x386>
 800807a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807c:	ebaa 0903 	sub.w	r9, sl, r3
 8008080:	9b06      	ldr	r3, [sp, #24]
 8008082:	ebaa 0303 	sub.w	r3, sl, r3
 8008086:	4599      	cmp	r9, r3
 8008088:	bfa8      	it	ge
 800808a:	4699      	movge	r9, r3
 800808c:	f1b9 0f00 	cmp.w	r9, #0
 8008090:	dc33      	bgt.n	80080fa <_printf_float+0x396>
 8008092:	f04f 0800 	mov.w	r8, #0
 8008096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800809a:	f104 0b1a 	add.w	fp, r4, #26
 800809e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a0:	ebaa 0303 	sub.w	r3, sl, r3
 80080a4:	eba3 0309 	sub.w	r3, r3, r9
 80080a8:	4543      	cmp	r3, r8
 80080aa:	f77f af79 	ble.w	8007fa0 <_printf_float+0x23c>
 80080ae:	2301      	movs	r3, #1
 80080b0:	465a      	mov	r2, fp
 80080b2:	4631      	mov	r1, r6
 80080b4:	4628      	mov	r0, r5
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f aeae 	beq.w	8007e1a <_printf_float+0xb6>
 80080be:	f108 0801 	add.w	r8, r8, #1
 80080c2:	e7ec      	b.n	800809e <_printf_float+0x33a>
 80080c4:	4642      	mov	r2, r8
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b8      	blx	r7
 80080cc:	3001      	adds	r0, #1
 80080ce:	d1c2      	bne.n	8008056 <_printf_float+0x2f2>
 80080d0:	e6a3      	b.n	8007e1a <_printf_float+0xb6>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	9206      	str	r2, [sp, #24]
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f ae9c 	beq.w	8007e1a <_printf_float+0xb6>
 80080e2:	9a06      	ldr	r2, [sp, #24]
 80080e4:	f10b 0b01 	add.w	fp, fp, #1
 80080e8:	e7bb      	b.n	8008062 <_printf_float+0x2fe>
 80080ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d1c0      	bne.n	800807a <_printf_float+0x316>
 80080f8:	e68f      	b.n	8007e1a <_printf_float+0xb6>
 80080fa:	9a06      	ldr	r2, [sp, #24]
 80080fc:	464b      	mov	r3, r9
 80080fe:	4442      	add	r2, r8
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	d1c3      	bne.n	8008092 <_printf_float+0x32e>
 800810a:	e686      	b.n	8007e1a <_printf_float+0xb6>
 800810c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008110:	f1ba 0f01 	cmp.w	sl, #1
 8008114:	dc01      	bgt.n	800811a <_printf_float+0x3b6>
 8008116:	07db      	lsls	r3, r3, #31
 8008118:	d536      	bpl.n	8008188 <_printf_float+0x424>
 800811a:	2301      	movs	r3, #1
 800811c:	4642      	mov	r2, r8
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f ae78 	beq.w	8007e1a <_printf_float+0xb6>
 800812a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	47b8      	blx	r7
 8008134:	3001      	adds	r0, #1
 8008136:	f43f ae70 	beq.w	8007e1a <_printf_float+0xb6>
 800813a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008146:	f7f8 fce7 	bl	8000b18 <__aeabi_dcmpeq>
 800814a:	b9c0      	cbnz	r0, 800817e <_printf_float+0x41a>
 800814c:	4653      	mov	r3, sl
 800814e:	f108 0201 	add.w	r2, r8, #1
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	47b8      	blx	r7
 8008158:	3001      	adds	r0, #1
 800815a:	d10c      	bne.n	8008176 <_printf_float+0x412>
 800815c:	e65d      	b.n	8007e1a <_printf_float+0xb6>
 800815e:	2301      	movs	r3, #1
 8008160:	465a      	mov	r2, fp
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	f43f ae56 	beq.w	8007e1a <_printf_float+0xb6>
 800816e:	f108 0801 	add.w	r8, r8, #1
 8008172:	45d0      	cmp	r8, sl
 8008174:	dbf3      	blt.n	800815e <_printf_float+0x3fa>
 8008176:	464b      	mov	r3, r9
 8008178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800817c:	e6df      	b.n	8007f3e <_printf_float+0x1da>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	f104 0b1a 	add.w	fp, r4, #26
 8008186:	e7f4      	b.n	8008172 <_printf_float+0x40e>
 8008188:	2301      	movs	r3, #1
 800818a:	4642      	mov	r2, r8
 800818c:	e7e1      	b.n	8008152 <_printf_float+0x3ee>
 800818e:	2301      	movs	r3, #1
 8008190:	464a      	mov	r2, r9
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	f43f ae3e 	beq.w	8007e1a <_printf_float+0xb6>
 800819e:	f108 0801 	add.w	r8, r8, #1
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081a6:	1a5b      	subs	r3, r3, r1
 80081a8:	4543      	cmp	r3, r8
 80081aa:	dcf0      	bgt.n	800818e <_printf_float+0x42a>
 80081ac:	e6fc      	b.n	8007fa8 <_printf_float+0x244>
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	f104 0919 	add.w	r9, r4, #25
 80081b6:	e7f4      	b.n	80081a2 <_printf_float+0x43e>

080081b8 <_printf_common>:
 80081b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081bc:	4616      	mov	r6, r2
 80081be:	4698      	mov	r8, r3
 80081c0:	688a      	ldr	r2, [r1, #8]
 80081c2:	690b      	ldr	r3, [r1, #16]
 80081c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081c8:	4293      	cmp	r3, r2
 80081ca:	bfb8      	it	lt
 80081cc:	4613      	movlt	r3, r2
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081d4:	4607      	mov	r7, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	b10a      	cbz	r2, 80081de <_printf_common+0x26>
 80081da:	3301      	adds	r3, #1
 80081dc:	6033      	str	r3, [r6, #0]
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	0699      	lsls	r1, r3, #26
 80081e2:	bf42      	ittt	mi
 80081e4:	6833      	ldrmi	r3, [r6, #0]
 80081e6:	3302      	addmi	r3, #2
 80081e8:	6033      	strmi	r3, [r6, #0]
 80081ea:	6825      	ldr	r5, [r4, #0]
 80081ec:	f015 0506 	ands.w	r5, r5, #6
 80081f0:	d106      	bne.n	8008200 <_printf_common+0x48>
 80081f2:	f104 0a19 	add.w	sl, r4, #25
 80081f6:	68e3      	ldr	r3, [r4, #12]
 80081f8:	6832      	ldr	r2, [r6, #0]
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	42ab      	cmp	r3, r5
 80081fe:	dc26      	bgt.n	800824e <_printf_common+0x96>
 8008200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	3b00      	subs	r3, #0
 8008208:	bf18      	it	ne
 800820a:	2301      	movne	r3, #1
 800820c:	0692      	lsls	r2, r2, #26
 800820e:	d42b      	bmi.n	8008268 <_printf_common+0xb0>
 8008210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008214:	4641      	mov	r1, r8
 8008216:	4638      	mov	r0, r7
 8008218:	47c8      	blx	r9
 800821a:	3001      	adds	r0, #1
 800821c:	d01e      	beq.n	800825c <_printf_common+0xa4>
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	6922      	ldr	r2, [r4, #16]
 8008222:	f003 0306 	and.w	r3, r3, #6
 8008226:	2b04      	cmp	r3, #4
 8008228:	bf02      	ittt	eq
 800822a:	68e5      	ldreq	r5, [r4, #12]
 800822c:	6833      	ldreq	r3, [r6, #0]
 800822e:	1aed      	subeq	r5, r5, r3
 8008230:	68a3      	ldr	r3, [r4, #8]
 8008232:	bf0c      	ite	eq
 8008234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008238:	2500      	movne	r5, #0
 800823a:	4293      	cmp	r3, r2
 800823c:	bfc4      	itt	gt
 800823e:	1a9b      	subgt	r3, r3, r2
 8008240:	18ed      	addgt	r5, r5, r3
 8008242:	2600      	movs	r6, #0
 8008244:	341a      	adds	r4, #26
 8008246:	42b5      	cmp	r5, r6
 8008248:	d11a      	bne.n	8008280 <_printf_common+0xc8>
 800824a:	2000      	movs	r0, #0
 800824c:	e008      	b.n	8008260 <_printf_common+0xa8>
 800824e:	2301      	movs	r3, #1
 8008250:	4652      	mov	r2, sl
 8008252:	4641      	mov	r1, r8
 8008254:	4638      	mov	r0, r7
 8008256:	47c8      	blx	r9
 8008258:	3001      	adds	r0, #1
 800825a:	d103      	bne.n	8008264 <_printf_common+0xac>
 800825c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008264:	3501      	adds	r5, #1
 8008266:	e7c6      	b.n	80081f6 <_printf_common+0x3e>
 8008268:	18e1      	adds	r1, r4, r3
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	2030      	movs	r0, #48	@ 0x30
 800826e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008272:	4422      	add	r2, r4
 8008274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800827c:	3302      	adds	r3, #2
 800827e:	e7c7      	b.n	8008210 <_printf_common+0x58>
 8008280:	2301      	movs	r3, #1
 8008282:	4622      	mov	r2, r4
 8008284:	4641      	mov	r1, r8
 8008286:	4638      	mov	r0, r7
 8008288:	47c8      	blx	r9
 800828a:	3001      	adds	r0, #1
 800828c:	d0e6      	beq.n	800825c <_printf_common+0xa4>
 800828e:	3601      	adds	r6, #1
 8008290:	e7d9      	b.n	8008246 <_printf_common+0x8e>
	...

08008294 <_printf_i>:
 8008294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	7e0f      	ldrb	r7, [r1, #24]
 800829a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800829c:	2f78      	cmp	r7, #120	@ 0x78
 800829e:	4691      	mov	r9, r2
 80082a0:	4680      	mov	r8, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	469a      	mov	sl, r3
 80082a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082aa:	d807      	bhi.n	80082bc <_printf_i+0x28>
 80082ac:	2f62      	cmp	r7, #98	@ 0x62
 80082ae:	d80a      	bhi.n	80082c6 <_printf_i+0x32>
 80082b0:	2f00      	cmp	r7, #0
 80082b2:	f000 80d1 	beq.w	8008458 <_printf_i+0x1c4>
 80082b6:	2f58      	cmp	r7, #88	@ 0x58
 80082b8:	f000 80b8 	beq.w	800842c <_printf_i+0x198>
 80082bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082c4:	e03a      	b.n	800833c <_printf_i+0xa8>
 80082c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082ca:	2b15      	cmp	r3, #21
 80082cc:	d8f6      	bhi.n	80082bc <_printf_i+0x28>
 80082ce:	a101      	add	r1, pc, #4	@ (adr r1, 80082d4 <_printf_i+0x40>)
 80082d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d4:	0800832d 	.word	0x0800832d
 80082d8:	08008341 	.word	0x08008341
 80082dc:	080082bd 	.word	0x080082bd
 80082e0:	080082bd 	.word	0x080082bd
 80082e4:	080082bd 	.word	0x080082bd
 80082e8:	080082bd 	.word	0x080082bd
 80082ec:	08008341 	.word	0x08008341
 80082f0:	080082bd 	.word	0x080082bd
 80082f4:	080082bd 	.word	0x080082bd
 80082f8:	080082bd 	.word	0x080082bd
 80082fc:	080082bd 	.word	0x080082bd
 8008300:	0800843f 	.word	0x0800843f
 8008304:	0800836b 	.word	0x0800836b
 8008308:	080083f9 	.word	0x080083f9
 800830c:	080082bd 	.word	0x080082bd
 8008310:	080082bd 	.word	0x080082bd
 8008314:	08008461 	.word	0x08008461
 8008318:	080082bd 	.word	0x080082bd
 800831c:	0800836b 	.word	0x0800836b
 8008320:	080082bd 	.word	0x080082bd
 8008324:	080082bd 	.word	0x080082bd
 8008328:	08008401 	.word	0x08008401
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6032      	str	r2, [r6, #0]
 8008334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800833c:	2301      	movs	r3, #1
 800833e:	e09c      	b.n	800847a <_printf_i+0x1e6>
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	6820      	ldr	r0, [r4, #0]
 8008344:	1d19      	adds	r1, r3, #4
 8008346:	6031      	str	r1, [r6, #0]
 8008348:	0606      	lsls	r6, r0, #24
 800834a:	d501      	bpl.n	8008350 <_printf_i+0xbc>
 800834c:	681d      	ldr	r5, [r3, #0]
 800834e:	e003      	b.n	8008358 <_printf_i+0xc4>
 8008350:	0645      	lsls	r5, r0, #25
 8008352:	d5fb      	bpl.n	800834c <_printf_i+0xb8>
 8008354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008358:	2d00      	cmp	r5, #0
 800835a:	da03      	bge.n	8008364 <_printf_i+0xd0>
 800835c:	232d      	movs	r3, #45	@ 0x2d
 800835e:	426d      	negs	r5, r5
 8008360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008364:	4858      	ldr	r0, [pc, #352]	@ (80084c8 <_printf_i+0x234>)
 8008366:	230a      	movs	r3, #10
 8008368:	e011      	b.n	800838e <_printf_i+0xfa>
 800836a:	6821      	ldr	r1, [r4, #0]
 800836c:	6833      	ldr	r3, [r6, #0]
 800836e:	0608      	lsls	r0, r1, #24
 8008370:	f853 5b04 	ldr.w	r5, [r3], #4
 8008374:	d402      	bmi.n	800837c <_printf_i+0xe8>
 8008376:	0649      	lsls	r1, r1, #25
 8008378:	bf48      	it	mi
 800837a:	b2ad      	uxthmi	r5, r5
 800837c:	2f6f      	cmp	r7, #111	@ 0x6f
 800837e:	4852      	ldr	r0, [pc, #328]	@ (80084c8 <_printf_i+0x234>)
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	bf14      	ite	ne
 8008384:	230a      	movne	r3, #10
 8008386:	2308      	moveq	r3, #8
 8008388:	2100      	movs	r1, #0
 800838a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800838e:	6866      	ldr	r6, [r4, #4]
 8008390:	60a6      	str	r6, [r4, #8]
 8008392:	2e00      	cmp	r6, #0
 8008394:	db05      	blt.n	80083a2 <_printf_i+0x10e>
 8008396:	6821      	ldr	r1, [r4, #0]
 8008398:	432e      	orrs	r6, r5
 800839a:	f021 0104 	bic.w	r1, r1, #4
 800839e:	6021      	str	r1, [r4, #0]
 80083a0:	d04b      	beq.n	800843a <_printf_i+0x1a6>
 80083a2:	4616      	mov	r6, r2
 80083a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80083a8:	fb03 5711 	mls	r7, r3, r1, r5
 80083ac:	5dc7      	ldrb	r7, [r0, r7]
 80083ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083b2:	462f      	mov	r7, r5
 80083b4:	42bb      	cmp	r3, r7
 80083b6:	460d      	mov	r5, r1
 80083b8:	d9f4      	bls.n	80083a4 <_printf_i+0x110>
 80083ba:	2b08      	cmp	r3, #8
 80083bc:	d10b      	bne.n	80083d6 <_printf_i+0x142>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	07df      	lsls	r7, r3, #31
 80083c2:	d508      	bpl.n	80083d6 <_printf_i+0x142>
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	6861      	ldr	r1, [r4, #4]
 80083c8:	4299      	cmp	r1, r3
 80083ca:	bfde      	ittt	le
 80083cc:	2330      	movle	r3, #48	@ 0x30
 80083ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083d6:	1b92      	subs	r2, r2, r6
 80083d8:	6122      	str	r2, [r4, #16]
 80083da:	f8cd a000 	str.w	sl, [sp]
 80083de:	464b      	mov	r3, r9
 80083e0:	aa03      	add	r2, sp, #12
 80083e2:	4621      	mov	r1, r4
 80083e4:	4640      	mov	r0, r8
 80083e6:	f7ff fee7 	bl	80081b8 <_printf_common>
 80083ea:	3001      	adds	r0, #1
 80083ec:	d14a      	bne.n	8008484 <_printf_i+0x1f0>
 80083ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083f2:	b004      	add	sp, #16
 80083f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	f043 0320 	orr.w	r3, r3, #32
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	4832      	ldr	r0, [pc, #200]	@ (80084cc <_printf_i+0x238>)
 8008402:	2778      	movs	r7, #120	@ 0x78
 8008404:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	6831      	ldr	r1, [r6, #0]
 800840c:	061f      	lsls	r7, r3, #24
 800840e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008412:	d402      	bmi.n	800841a <_printf_i+0x186>
 8008414:	065f      	lsls	r7, r3, #25
 8008416:	bf48      	it	mi
 8008418:	b2ad      	uxthmi	r5, r5
 800841a:	6031      	str	r1, [r6, #0]
 800841c:	07d9      	lsls	r1, r3, #31
 800841e:	bf44      	itt	mi
 8008420:	f043 0320 	orrmi.w	r3, r3, #32
 8008424:	6023      	strmi	r3, [r4, #0]
 8008426:	b11d      	cbz	r5, 8008430 <_printf_i+0x19c>
 8008428:	2310      	movs	r3, #16
 800842a:	e7ad      	b.n	8008388 <_printf_i+0xf4>
 800842c:	4826      	ldr	r0, [pc, #152]	@ (80084c8 <_printf_i+0x234>)
 800842e:	e7e9      	b.n	8008404 <_printf_i+0x170>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	f023 0320 	bic.w	r3, r3, #32
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	e7f6      	b.n	8008428 <_printf_i+0x194>
 800843a:	4616      	mov	r6, r2
 800843c:	e7bd      	b.n	80083ba <_printf_i+0x126>
 800843e:	6833      	ldr	r3, [r6, #0]
 8008440:	6825      	ldr	r5, [r4, #0]
 8008442:	6961      	ldr	r1, [r4, #20]
 8008444:	1d18      	adds	r0, r3, #4
 8008446:	6030      	str	r0, [r6, #0]
 8008448:	062e      	lsls	r6, r5, #24
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	d501      	bpl.n	8008452 <_printf_i+0x1be>
 800844e:	6019      	str	r1, [r3, #0]
 8008450:	e002      	b.n	8008458 <_printf_i+0x1c4>
 8008452:	0668      	lsls	r0, r5, #25
 8008454:	d5fb      	bpl.n	800844e <_printf_i+0x1ba>
 8008456:	8019      	strh	r1, [r3, #0]
 8008458:	2300      	movs	r3, #0
 800845a:	6123      	str	r3, [r4, #16]
 800845c:	4616      	mov	r6, r2
 800845e:	e7bc      	b.n	80083da <_printf_i+0x146>
 8008460:	6833      	ldr	r3, [r6, #0]
 8008462:	1d1a      	adds	r2, r3, #4
 8008464:	6032      	str	r2, [r6, #0]
 8008466:	681e      	ldr	r6, [r3, #0]
 8008468:	6862      	ldr	r2, [r4, #4]
 800846a:	2100      	movs	r1, #0
 800846c:	4630      	mov	r0, r6
 800846e:	f7f7 fed7 	bl	8000220 <memchr>
 8008472:	b108      	cbz	r0, 8008478 <_printf_i+0x1e4>
 8008474:	1b80      	subs	r0, r0, r6
 8008476:	6060      	str	r0, [r4, #4]
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	6123      	str	r3, [r4, #16]
 800847c:	2300      	movs	r3, #0
 800847e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008482:	e7aa      	b.n	80083da <_printf_i+0x146>
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	4632      	mov	r2, r6
 8008488:	4649      	mov	r1, r9
 800848a:	4640      	mov	r0, r8
 800848c:	47d0      	blx	sl
 800848e:	3001      	adds	r0, #1
 8008490:	d0ad      	beq.n	80083ee <_printf_i+0x15a>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	079b      	lsls	r3, r3, #30
 8008496:	d413      	bmi.n	80084c0 <_printf_i+0x22c>
 8008498:	68e0      	ldr	r0, [r4, #12]
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	4298      	cmp	r0, r3
 800849e:	bfb8      	it	lt
 80084a0:	4618      	movlt	r0, r3
 80084a2:	e7a6      	b.n	80083f2 <_printf_i+0x15e>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4632      	mov	r2, r6
 80084a8:	4649      	mov	r1, r9
 80084aa:	4640      	mov	r0, r8
 80084ac:	47d0      	blx	sl
 80084ae:	3001      	adds	r0, #1
 80084b0:	d09d      	beq.n	80083ee <_printf_i+0x15a>
 80084b2:	3501      	adds	r5, #1
 80084b4:	68e3      	ldr	r3, [r4, #12]
 80084b6:	9903      	ldr	r1, [sp, #12]
 80084b8:	1a5b      	subs	r3, r3, r1
 80084ba:	42ab      	cmp	r3, r5
 80084bc:	dcf2      	bgt.n	80084a4 <_printf_i+0x210>
 80084be:	e7eb      	b.n	8008498 <_printf_i+0x204>
 80084c0:	2500      	movs	r5, #0
 80084c2:	f104 0619 	add.w	r6, r4, #25
 80084c6:	e7f5      	b.n	80084b4 <_printf_i+0x220>
 80084c8:	0800c486 	.word	0x0800c486
 80084cc:	0800c497 	.word	0x0800c497

080084d0 <_scanf_float>:
 80084d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d4:	b087      	sub	sp, #28
 80084d6:	4691      	mov	r9, r2
 80084d8:	9303      	str	r3, [sp, #12]
 80084da:	688b      	ldr	r3, [r1, #8]
 80084dc:	1e5a      	subs	r2, r3, #1
 80084de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084e2:	bf81      	itttt	hi
 80084e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80084ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084f0:	608b      	strhi	r3, [r1, #8]
 80084f2:	680b      	ldr	r3, [r1, #0]
 80084f4:	460a      	mov	r2, r1
 80084f6:	f04f 0500 	mov.w	r5, #0
 80084fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80084fe:	f842 3b1c 	str.w	r3, [r2], #28
 8008502:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008506:	4680      	mov	r8, r0
 8008508:	460c      	mov	r4, r1
 800850a:	bf98      	it	ls
 800850c:	f04f 0b00 	movls.w	fp, #0
 8008510:	9201      	str	r2, [sp, #4]
 8008512:	4616      	mov	r6, r2
 8008514:	46aa      	mov	sl, r5
 8008516:	462f      	mov	r7, r5
 8008518:	9502      	str	r5, [sp, #8]
 800851a:	68a2      	ldr	r2, [r4, #8]
 800851c:	b15a      	cbz	r2, 8008536 <_scanf_float+0x66>
 800851e:	f8d9 3000 	ldr.w	r3, [r9]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b4e      	cmp	r3, #78	@ 0x4e
 8008526:	d863      	bhi.n	80085f0 <_scanf_float+0x120>
 8008528:	2b40      	cmp	r3, #64	@ 0x40
 800852a:	d83b      	bhi.n	80085a4 <_scanf_float+0xd4>
 800852c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008530:	b2c8      	uxtb	r0, r1
 8008532:	280e      	cmp	r0, #14
 8008534:	d939      	bls.n	80085aa <_scanf_float+0xda>
 8008536:	b11f      	cbz	r7, 8008540 <_scanf_float+0x70>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008544:	f1ba 0f01 	cmp.w	sl, #1
 8008548:	f200 8114 	bhi.w	8008774 <_scanf_float+0x2a4>
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	429e      	cmp	r6, r3
 8008550:	f200 8105 	bhi.w	800875e <_scanf_float+0x28e>
 8008554:	2001      	movs	r0, #1
 8008556:	b007      	add	sp, #28
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008560:	2a0d      	cmp	r2, #13
 8008562:	d8e8      	bhi.n	8008536 <_scanf_float+0x66>
 8008564:	a101      	add	r1, pc, #4	@ (adr r1, 800856c <_scanf_float+0x9c>)
 8008566:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800856a:	bf00      	nop
 800856c:	080086b5 	.word	0x080086b5
 8008570:	08008537 	.word	0x08008537
 8008574:	08008537 	.word	0x08008537
 8008578:	08008537 	.word	0x08008537
 800857c:	08008711 	.word	0x08008711
 8008580:	080086eb 	.word	0x080086eb
 8008584:	08008537 	.word	0x08008537
 8008588:	08008537 	.word	0x08008537
 800858c:	080086c3 	.word	0x080086c3
 8008590:	08008537 	.word	0x08008537
 8008594:	08008537 	.word	0x08008537
 8008598:	08008537 	.word	0x08008537
 800859c:	08008537 	.word	0x08008537
 80085a0:	0800867f 	.word	0x0800867f
 80085a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80085a8:	e7da      	b.n	8008560 <_scanf_float+0x90>
 80085aa:	290e      	cmp	r1, #14
 80085ac:	d8c3      	bhi.n	8008536 <_scanf_float+0x66>
 80085ae:	a001      	add	r0, pc, #4	@ (adr r0, 80085b4 <_scanf_float+0xe4>)
 80085b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085b4:	0800866f 	.word	0x0800866f
 80085b8:	08008537 	.word	0x08008537
 80085bc:	0800866f 	.word	0x0800866f
 80085c0:	080086ff 	.word	0x080086ff
 80085c4:	08008537 	.word	0x08008537
 80085c8:	08008611 	.word	0x08008611
 80085cc:	08008655 	.word	0x08008655
 80085d0:	08008655 	.word	0x08008655
 80085d4:	08008655 	.word	0x08008655
 80085d8:	08008655 	.word	0x08008655
 80085dc:	08008655 	.word	0x08008655
 80085e0:	08008655 	.word	0x08008655
 80085e4:	08008655 	.word	0x08008655
 80085e8:	08008655 	.word	0x08008655
 80085ec:	08008655 	.word	0x08008655
 80085f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80085f2:	d809      	bhi.n	8008608 <_scanf_float+0x138>
 80085f4:	2b60      	cmp	r3, #96	@ 0x60
 80085f6:	d8b1      	bhi.n	800855c <_scanf_float+0x8c>
 80085f8:	2b54      	cmp	r3, #84	@ 0x54
 80085fa:	d07b      	beq.n	80086f4 <_scanf_float+0x224>
 80085fc:	2b59      	cmp	r3, #89	@ 0x59
 80085fe:	d19a      	bne.n	8008536 <_scanf_float+0x66>
 8008600:	2d07      	cmp	r5, #7
 8008602:	d198      	bne.n	8008536 <_scanf_float+0x66>
 8008604:	2508      	movs	r5, #8
 8008606:	e02f      	b.n	8008668 <_scanf_float+0x198>
 8008608:	2b74      	cmp	r3, #116	@ 0x74
 800860a:	d073      	beq.n	80086f4 <_scanf_float+0x224>
 800860c:	2b79      	cmp	r3, #121	@ 0x79
 800860e:	e7f6      	b.n	80085fe <_scanf_float+0x12e>
 8008610:	6821      	ldr	r1, [r4, #0]
 8008612:	05c8      	lsls	r0, r1, #23
 8008614:	d51e      	bpl.n	8008654 <_scanf_float+0x184>
 8008616:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800861a:	6021      	str	r1, [r4, #0]
 800861c:	3701      	adds	r7, #1
 800861e:	f1bb 0f00 	cmp.w	fp, #0
 8008622:	d003      	beq.n	800862c <_scanf_float+0x15c>
 8008624:	3201      	adds	r2, #1
 8008626:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800862a:	60a2      	str	r2, [r4, #8]
 800862c:	68a3      	ldr	r3, [r4, #8]
 800862e:	3b01      	subs	r3, #1
 8008630:	60a3      	str	r3, [r4, #8]
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	3301      	adds	r3, #1
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800863c:	3b01      	subs	r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	f8c9 3004 	str.w	r3, [r9, #4]
 8008644:	f340 8082 	ble.w	800874c <_scanf_float+0x27c>
 8008648:	f8d9 3000 	ldr.w	r3, [r9]
 800864c:	3301      	adds	r3, #1
 800864e:	f8c9 3000 	str.w	r3, [r9]
 8008652:	e762      	b.n	800851a <_scanf_float+0x4a>
 8008654:	eb1a 0105 	adds.w	r1, sl, r5
 8008658:	f47f af6d 	bne.w	8008536 <_scanf_float+0x66>
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008662:	6022      	str	r2, [r4, #0]
 8008664:	460d      	mov	r5, r1
 8008666:	468a      	mov	sl, r1
 8008668:	f806 3b01 	strb.w	r3, [r6], #1
 800866c:	e7de      	b.n	800862c <_scanf_float+0x15c>
 800866e:	6822      	ldr	r2, [r4, #0]
 8008670:	0610      	lsls	r0, r2, #24
 8008672:	f57f af60 	bpl.w	8008536 <_scanf_float+0x66>
 8008676:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800867a:	6022      	str	r2, [r4, #0]
 800867c:	e7f4      	b.n	8008668 <_scanf_float+0x198>
 800867e:	f1ba 0f00 	cmp.w	sl, #0
 8008682:	d10c      	bne.n	800869e <_scanf_float+0x1ce>
 8008684:	b977      	cbnz	r7, 80086a4 <_scanf_float+0x1d4>
 8008686:	6822      	ldr	r2, [r4, #0]
 8008688:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800868c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008690:	d108      	bne.n	80086a4 <_scanf_float+0x1d4>
 8008692:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008696:	6022      	str	r2, [r4, #0]
 8008698:	f04f 0a01 	mov.w	sl, #1
 800869c:	e7e4      	b.n	8008668 <_scanf_float+0x198>
 800869e:	f1ba 0f02 	cmp.w	sl, #2
 80086a2:	d050      	beq.n	8008746 <_scanf_float+0x276>
 80086a4:	2d01      	cmp	r5, #1
 80086a6:	d002      	beq.n	80086ae <_scanf_float+0x1de>
 80086a8:	2d04      	cmp	r5, #4
 80086aa:	f47f af44 	bne.w	8008536 <_scanf_float+0x66>
 80086ae:	3501      	adds	r5, #1
 80086b0:	b2ed      	uxtb	r5, r5
 80086b2:	e7d9      	b.n	8008668 <_scanf_float+0x198>
 80086b4:	f1ba 0f01 	cmp.w	sl, #1
 80086b8:	f47f af3d 	bne.w	8008536 <_scanf_float+0x66>
 80086bc:	f04f 0a02 	mov.w	sl, #2
 80086c0:	e7d2      	b.n	8008668 <_scanf_float+0x198>
 80086c2:	b975      	cbnz	r5, 80086e2 <_scanf_float+0x212>
 80086c4:	2f00      	cmp	r7, #0
 80086c6:	f47f af37 	bne.w	8008538 <_scanf_float+0x68>
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086d4:	f040 8103 	bne.w	80088de <_scanf_float+0x40e>
 80086d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086dc:	6022      	str	r2, [r4, #0]
 80086de:	2501      	movs	r5, #1
 80086e0:	e7c2      	b.n	8008668 <_scanf_float+0x198>
 80086e2:	2d03      	cmp	r5, #3
 80086e4:	d0e3      	beq.n	80086ae <_scanf_float+0x1de>
 80086e6:	2d05      	cmp	r5, #5
 80086e8:	e7df      	b.n	80086aa <_scanf_float+0x1da>
 80086ea:	2d02      	cmp	r5, #2
 80086ec:	f47f af23 	bne.w	8008536 <_scanf_float+0x66>
 80086f0:	2503      	movs	r5, #3
 80086f2:	e7b9      	b.n	8008668 <_scanf_float+0x198>
 80086f4:	2d06      	cmp	r5, #6
 80086f6:	f47f af1e 	bne.w	8008536 <_scanf_float+0x66>
 80086fa:	2507      	movs	r5, #7
 80086fc:	e7b4      	b.n	8008668 <_scanf_float+0x198>
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	0591      	lsls	r1, r2, #22
 8008702:	f57f af18 	bpl.w	8008536 <_scanf_float+0x66>
 8008706:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	9702      	str	r7, [sp, #8]
 800870e:	e7ab      	b.n	8008668 <_scanf_float+0x198>
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008716:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800871a:	d005      	beq.n	8008728 <_scanf_float+0x258>
 800871c:	0550      	lsls	r0, r2, #21
 800871e:	f57f af0a 	bpl.w	8008536 <_scanf_float+0x66>
 8008722:	2f00      	cmp	r7, #0
 8008724:	f000 80db 	beq.w	80088de <_scanf_float+0x40e>
 8008728:	0591      	lsls	r1, r2, #22
 800872a:	bf58      	it	pl
 800872c:	9902      	ldrpl	r1, [sp, #8]
 800872e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008732:	bf58      	it	pl
 8008734:	1a79      	subpl	r1, r7, r1
 8008736:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800873a:	bf58      	it	pl
 800873c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008740:	6022      	str	r2, [r4, #0]
 8008742:	2700      	movs	r7, #0
 8008744:	e790      	b.n	8008668 <_scanf_float+0x198>
 8008746:	f04f 0a03 	mov.w	sl, #3
 800874a:	e78d      	b.n	8008668 <_scanf_float+0x198>
 800874c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008750:	4649      	mov	r1, r9
 8008752:	4640      	mov	r0, r8
 8008754:	4798      	blx	r3
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f aedf 	beq.w	800851a <_scanf_float+0x4a>
 800875c:	e6eb      	b.n	8008536 <_scanf_float+0x66>
 800875e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008762:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008766:	464a      	mov	r2, r9
 8008768:	4640      	mov	r0, r8
 800876a:	4798      	blx	r3
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	3b01      	subs	r3, #1
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	e6eb      	b.n	800854c <_scanf_float+0x7c>
 8008774:	1e6b      	subs	r3, r5, #1
 8008776:	2b06      	cmp	r3, #6
 8008778:	d824      	bhi.n	80087c4 <_scanf_float+0x2f4>
 800877a:	2d02      	cmp	r5, #2
 800877c:	d836      	bhi.n	80087ec <_scanf_float+0x31c>
 800877e:	9b01      	ldr	r3, [sp, #4]
 8008780:	429e      	cmp	r6, r3
 8008782:	f67f aee7 	bls.w	8008554 <_scanf_float+0x84>
 8008786:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800878a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800878e:	464a      	mov	r2, r9
 8008790:	4640      	mov	r0, r8
 8008792:	4798      	blx	r3
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	3b01      	subs	r3, #1
 8008798:	6123      	str	r3, [r4, #16]
 800879a:	e7f0      	b.n	800877e <_scanf_float+0x2ae>
 800879c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80087a4:	464a      	mov	r2, r9
 80087a6:	4640      	mov	r0, r8
 80087a8:	4798      	blx	r3
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	6123      	str	r3, [r4, #16]
 80087b0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80087b4:	fa5f fa8a 	uxtb.w	sl, sl
 80087b8:	f1ba 0f02 	cmp.w	sl, #2
 80087bc:	d1ee      	bne.n	800879c <_scanf_float+0x2cc>
 80087be:	3d03      	subs	r5, #3
 80087c0:	b2ed      	uxtb	r5, r5
 80087c2:	1b76      	subs	r6, r6, r5
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	05da      	lsls	r2, r3, #23
 80087c8:	d530      	bpl.n	800882c <_scanf_float+0x35c>
 80087ca:	055b      	lsls	r3, r3, #21
 80087cc:	d511      	bpl.n	80087f2 <_scanf_float+0x322>
 80087ce:	9b01      	ldr	r3, [sp, #4]
 80087d0:	429e      	cmp	r6, r3
 80087d2:	f67f aebf 	bls.w	8008554 <_scanf_float+0x84>
 80087d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087de:	464a      	mov	r2, r9
 80087e0:	4640      	mov	r0, r8
 80087e2:	4798      	blx	r3
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	e7f0      	b.n	80087ce <_scanf_float+0x2fe>
 80087ec:	46aa      	mov	sl, r5
 80087ee:	46b3      	mov	fp, r6
 80087f0:	e7de      	b.n	80087b0 <_scanf_float+0x2e0>
 80087f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	2965      	cmp	r1, #101	@ 0x65
 80087fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80087fe:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008802:	6123      	str	r3, [r4, #16]
 8008804:	d00c      	beq.n	8008820 <_scanf_float+0x350>
 8008806:	2945      	cmp	r1, #69	@ 0x45
 8008808:	d00a      	beq.n	8008820 <_scanf_float+0x350>
 800880a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800880e:	464a      	mov	r2, r9
 8008810:	4640      	mov	r0, r8
 8008812:	4798      	blx	r3
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800881a:	3b01      	subs	r3, #1
 800881c:	1eb5      	subs	r5, r6, #2
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008824:	464a      	mov	r2, r9
 8008826:	4640      	mov	r0, r8
 8008828:	4798      	blx	r3
 800882a:	462e      	mov	r6, r5
 800882c:	6822      	ldr	r2, [r4, #0]
 800882e:	f012 0210 	ands.w	r2, r2, #16
 8008832:	d001      	beq.n	8008838 <_scanf_float+0x368>
 8008834:	2000      	movs	r0, #0
 8008836:	e68e      	b.n	8008556 <_scanf_float+0x86>
 8008838:	7032      	strb	r2, [r6, #0]
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008844:	d125      	bne.n	8008892 <_scanf_float+0x3c2>
 8008846:	9b02      	ldr	r3, [sp, #8]
 8008848:	429f      	cmp	r7, r3
 800884a:	d00a      	beq.n	8008862 <_scanf_float+0x392>
 800884c:	1bda      	subs	r2, r3, r7
 800884e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008852:	429e      	cmp	r6, r3
 8008854:	bf28      	it	cs
 8008856:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800885a:	4922      	ldr	r1, [pc, #136]	@ (80088e4 <_scanf_float+0x414>)
 800885c:	4630      	mov	r0, r6
 800885e:	f000 f93d 	bl	8008adc <siprintf>
 8008862:	9901      	ldr	r1, [sp, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	4640      	mov	r0, r8
 8008868:	f002 fcca 	bl	800b200 <_strtod_r>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	6821      	ldr	r1, [r4, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f011 0f02 	tst.w	r1, #2
 8008876:	ec57 6b10 	vmov	r6, r7, d0
 800887a:	f103 0204 	add.w	r2, r3, #4
 800887e:	d015      	beq.n	80088ac <_scanf_float+0x3dc>
 8008880:	9903      	ldr	r1, [sp, #12]
 8008882:	600a      	str	r2, [r1, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	e9c3 6700 	strd	r6, r7, [r3]
 800888a:	68e3      	ldr	r3, [r4, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	60e3      	str	r3, [r4, #12]
 8008890:	e7d0      	b.n	8008834 <_scanf_float+0x364>
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0e4      	beq.n	8008862 <_scanf_float+0x392>
 8008898:	9905      	ldr	r1, [sp, #20]
 800889a:	230a      	movs	r3, #10
 800889c:	3101      	adds	r1, #1
 800889e:	4640      	mov	r0, r8
 80088a0:	f002 fd2e 	bl	800b300 <_strtol_r>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	9e05      	ldr	r6, [sp, #20]
 80088a8:	1ac2      	subs	r2, r0, r3
 80088aa:	e7d0      	b.n	800884e <_scanf_float+0x37e>
 80088ac:	f011 0f04 	tst.w	r1, #4
 80088b0:	9903      	ldr	r1, [sp, #12]
 80088b2:	600a      	str	r2, [r1, #0]
 80088b4:	d1e6      	bne.n	8008884 <_scanf_float+0x3b4>
 80088b6:	681d      	ldr	r5, [r3, #0]
 80088b8:	4632      	mov	r2, r6
 80088ba:	463b      	mov	r3, r7
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f8 f95c 	bl	8000b7c <__aeabi_dcmpun>
 80088c4:	b128      	cbz	r0, 80088d2 <_scanf_float+0x402>
 80088c6:	4808      	ldr	r0, [pc, #32]	@ (80088e8 <_scanf_float+0x418>)
 80088c8:	f000 fa90 	bl	8008dec <nanf>
 80088cc:	ed85 0a00 	vstr	s0, [r5]
 80088d0:	e7db      	b.n	800888a <_scanf_float+0x3ba>
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f8 f9af 	bl	8000c38 <__aeabi_d2f>
 80088da:	6028      	str	r0, [r5, #0]
 80088dc:	e7d5      	b.n	800888a <_scanf_float+0x3ba>
 80088de:	2700      	movs	r7, #0
 80088e0:	e62e      	b.n	8008540 <_scanf_float+0x70>
 80088e2:	bf00      	nop
 80088e4:	0800c4a8 	.word	0x0800c4a8
 80088e8:	0800c5e9 	.word	0x0800c5e9

080088ec <std>:
 80088ec:	2300      	movs	r3, #0
 80088ee:	b510      	push	{r4, lr}
 80088f0:	4604      	mov	r4, r0
 80088f2:	e9c0 3300 	strd	r3, r3, [r0]
 80088f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088fa:	6083      	str	r3, [r0, #8]
 80088fc:	8181      	strh	r1, [r0, #12]
 80088fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008900:	81c2      	strh	r2, [r0, #14]
 8008902:	6183      	str	r3, [r0, #24]
 8008904:	4619      	mov	r1, r3
 8008906:	2208      	movs	r2, #8
 8008908:	305c      	adds	r0, #92	@ 0x5c
 800890a:	f000 f9e1 	bl	8008cd0 <memset>
 800890e:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <std+0x58>)
 8008910:	6263      	str	r3, [r4, #36]	@ 0x24
 8008912:	4b0d      	ldr	r3, [pc, #52]	@ (8008948 <std+0x5c>)
 8008914:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008916:	4b0d      	ldr	r3, [pc, #52]	@ (800894c <std+0x60>)
 8008918:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <std+0x64>)
 800891c:	6323      	str	r3, [r4, #48]	@ 0x30
 800891e:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <std+0x68>)
 8008920:	6224      	str	r4, [r4, #32]
 8008922:	429c      	cmp	r4, r3
 8008924:	d006      	beq.n	8008934 <std+0x48>
 8008926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800892a:	4294      	cmp	r4, r2
 800892c:	d002      	beq.n	8008934 <std+0x48>
 800892e:	33d0      	adds	r3, #208	@ 0xd0
 8008930:	429c      	cmp	r4, r3
 8008932:	d105      	bne.n	8008940 <std+0x54>
 8008934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800893c:	f000 ba44 	b.w	8008dc8 <__retarget_lock_init_recursive>
 8008940:	bd10      	pop	{r4, pc}
 8008942:	bf00      	nop
 8008944:	08008b21 	.word	0x08008b21
 8008948:	08008b43 	.word	0x08008b43
 800894c:	08008b7b 	.word	0x08008b7b
 8008950:	08008b9f 	.word	0x08008b9f
 8008954:	20000664 	.word	0x20000664

08008958 <stdio_exit_handler>:
 8008958:	4a02      	ldr	r2, [pc, #8]	@ (8008964 <stdio_exit_handler+0xc>)
 800895a:	4903      	ldr	r1, [pc, #12]	@ (8008968 <stdio_exit_handler+0x10>)
 800895c:	4803      	ldr	r0, [pc, #12]	@ (800896c <stdio_exit_handler+0x14>)
 800895e:	f000 b869 	b.w	8008a34 <_fwalk_sglue>
 8008962:	bf00      	nop
 8008964:	2000002c 	.word	0x2000002c
 8008968:	0800b941 	.word	0x0800b941
 800896c:	2000003c 	.word	0x2000003c

08008970 <cleanup_stdio>:
 8008970:	6841      	ldr	r1, [r0, #4]
 8008972:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <cleanup_stdio+0x34>)
 8008974:	4299      	cmp	r1, r3
 8008976:	b510      	push	{r4, lr}
 8008978:	4604      	mov	r4, r0
 800897a:	d001      	beq.n	8008980 <cleanup_stdio+0x10>
 800897c:	f002 ffe0 	bl	800b940 <_fflush_r>
 8008980:	68a1      	ldr	r1, [r4, #8]
 8008982:	4b09      	ldr	r3, [pc, #36]	@ (80089a8 <cleanup_stdio+0x38>)
 8008984:	4299      	cmp	r1, r3
 8008986:	d002      	beq.n	800898e <cleanup_stdio+0x1e>
 8008988:	4620      	mov	r0, r4
 800898a:	f002 ffd9 	bl	800b940 <_fflush_r>
 800898e:	68e1      	ldr	r1, [r4, #12]
 8008990:	4b06      	ldr	r3, [pc, #24]	@ (80089ac <cleanup_stdio+0x3c>)
 8008992:	4299      	cmp	r1, r3
 8008994:	d004      	beq.n	80089a0 <cleanup_stdio+0x30>
 8008996:	4620      	mov	r0, r4
 8008998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800899c:	f002 bfd0 	b.w	800b940 <_fflush_r>
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	bf00      	nop
 80089a4:	20000664 	.word	0x20000664
 80089a8:	200006cc 	.word	0x200006cc
 80089ac:	20000734 	.word	0x20000734

080089b0 <global_stdio_init.part.0>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <global_stdio_init.part.0+0x30>)
 80089b4:	4c0b      	ldr	r4, [pc, #44]	@ (80089e4 <global_stdio_init.part.0+0x34>)
 80089b6:	4a0c      	ldr	r2, [pc, #48]	@ (80089e8 <global_stdio_init.part.0+0x38>)
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	4620      	mov	r0, r4
 80089bc:	2200      	movs	r2, #0
 80089be:	2104      	movs	r1, #4
 80089c0:	f7ff ff94 	bl	80088ec <std>
 80089c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089c8:	2201      	movs	r2, #1
 80089ca:	2109      	movs	r1, #9
 80089cc:	f7ff ff8e 	bl	80088ec <std>
 80089d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089d4:	2202      	movs	r2, #2
 80089d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089da:	2112      	movs	r1, #18
 80089dc:	f7ff bf86 	b.w	80088ec <std>
 80089e0:	2000079c 	.word	0x2000079c
 80089e4:	20000664 	.word	0x20000664
 80089e8:	08008959 	.word	0x08008959

080089ec <__sfp_lock_acquire>:
 80089ec:	4801      	ldr	r0, [pc, #4]	@ (80089f4 <__sfp_lock_acquire+0x8>)
 80089ee:	f000 b9ec 	b.w	8008dca <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	200007a5 	.word	0x200007a5

080089f8 <__sfp_lock_release>:
 80089f8:	4801      	ldr	r0, [pc, #4]	@ (8008a00 <__sfp_lock_release+0x8>)
 80089fa:	f000 b9e7 	b.w	8008dcc <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	200007a5 	.word	0x200007a5

08008a04 <__sinit>:
 8008a04:	b510      	push	{r4, lr}
 8008a06:	4604      	mov	r4, r0
 8008a08:	f7ff fff0 	bl	80089ec <__sfp_lock_acquire>
 8008a0c:	6a23      	ldr	r3, [r4, #32]
 8008a0e:	b11b      	cbz	r3, 8008a18 <__sinit+0x14>
 8008a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a14:	f7ff bff0 	b.w	80089f8 <__sfp_lock_release>
 8008a18:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <__sinit+0x28>)
 8008a1a:	6223      	str	r3, [r4, #32]
 8008a1c:	4b04      	ldr	r3, [pc, #16]	@ (8008a30 <__sinit+0x2c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1f5      	bne.n	8008a10 <__sinit+0xc>
 8008a24:	f7ff ffc4 	bl	80089b0 <global_stdio_init.part.0>
 8008a28:	e7f2      	b.n	8008a10 <__sinit+0xc>
 8008a2a:	bf00      	nop
 8008a2c:	08008971 	.word	0x08008971
 8008a30:	2000079c 	.word	0x2000079c

08008a34 <_fwalk_sglue>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	4607      	mov	r7, r0
 8008a3a:	4688      	mov	r8, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	2600      	movs	r6, #0
 8008a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a44:	f1b9 0901 	subs.w	r9, r9, #1
 8008a48:	d505      	bpl.n	8008a56 <_fwalk_sglue+0x22>
 8008a4a:	6824      	ldr	r4, [r4, #0]
 8008a4c:	2c00      	cmp	r4, #0
 8008a4e:	d1f7      	bne.n	8008a40 <_fwalk_sglue+0xc>
 8008a50:	4630      	mov	r0, r6
 8008a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d907      	bls.n	8008a6c <_fwalk_sglue+0x38>
 8008a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a60:	3301      	adds	r3, #1
 8008a62:	d003      	beq.n	8008a6c <_fwalk_sglue+0x38>
 8008a64:	4629      	mov	r1, r5
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c0      	blx	r8
 8008a6a:	4306      	orrs	r6, r0
 8008a6c:	3568      	adds	r5, #104	@ 0x68
 8008a6e:	e7e9      	b.n	8008a44 <_fwalk_sglue+0x10>

08008a70 <sniprintf>:
 8008a70:	b40c      	push	{r2, r3}
 8008a72:	b530      	push	{r4, r5, lr}
 8008a74:	4b18      	ldr	r3, [pc, #96]	@ (8008ad8 <sniprintf+0x68>)
 8008a76:	1e0c      	subs	r4, r1, #0
 8008a78:	681d      	ldr	r5, [r3, #0]
 8008a7a:	b09d      	sub	sp, #116	@ 0x74
 8008a7c:	da08      	bge.n	8008a90 <sniprintf+0x20>
 8008a7e:	238b      	movs	r3, #139	@ 0x8b
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a86:	b01d      	add	sp, #116	@ 0x74
 8008a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a8c:	b002      	add	sp, #8
 8008a8e:	4770      	bx	lr
 8008a90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008a94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a98:	f04f 0300 	mov.w	r3, #0
 8008a9c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008a9e:	bf14      	ite	ne
 8008aa0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008aa4:	4623      	moveq	r3, r4
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	9307      	str	r3, [sp, #28]
 8008aaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008aae:	9002      	str	r0, [sp, #8]
 8008ab0:	9006      	str	r0, [sp, #24]
 8008ab2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ab6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ab8:	ab21      	add	r3, sp, #132	@ 0x84
 8008aba:	a902      	add	r1, sp, #8
 8008abc:	4628      	mov	r0, r5
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	f002 fc7c 	bl	800b3bc <_svfiprintf_r>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	bfbc      	itt	lt
 8008ac8:	238b      	movlt	r3, #139	@ 0x8b
 8008aca:	602b      	strlt	r3, [r5, #0]
 8008acc:	2c00      	cmp	r4, #0
 8008ace:	d0da      	beq.n	8008a86 <sniprintf+0x16>
 8008ad0:	9b02      	ldr	r3, [sp, #8]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e7d6      	b.n	8008a86 <sniprintf+0x16>
 8008ad8:	20000038 	.word	0x20000038

08008adc <siprintf>:
 8008adc:	b40e      	push	{r1, r2, r3}
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	b09d      	sub	sp, #116	@ 0x74
 8008ae2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ae4:	9002      	str	r0, [sp, #8]
 8008ae6:	9006      	str	r0, [sp, #24]
 8008ae8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008aec:	480a      	ldr	r0, [pc, #40]	@ (8008b18 <siprintf+0x3c>)
 8008aee:	9107      	str	r1, [sp, #28]
 8008af0:	9104      	str	r1, [sp, #16]
 8008af2:	490a      	ldr	r1, [pc, #40]	@ (8008b1c <siprintf+0x40>)
 8008af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af8:	9105      	str	r1, [sp, #20]
 8008afa:	2400      	movs	r4, #0
 8008afc:	a902      	add	r1, sp, #8
 8008afe:	6800      	ldr	r0, [r0, #0]
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008b04:	f002 fc5a 	bl	800b3bc <_svfiprintf_r>
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	701c      	strb	r4, [r3, #0]
 8008b0c:	b01d      	add	sp, #116	@ 0x74
 8008b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b12:	b003      	add	sp, #12
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000038 	.word	0x20000038
 8008b1c:	ffff0208 	.word	0xffff0208

08008b20 <__sread>:
 8008b20:	b510      	push	{r4, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	f000 f900 	bl	8008d2c <_read_r>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	bfab      	itete	ge
 8008b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b32:	89a3      	ldrhlt	r3, [r4, #12]
 8008b34:	181b      	addge	r3, r3, r0
 8008b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b3a:	bfac      	ite	ge
 8008b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b3e:	81a3      	strhlt	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__swrite>:
 8008b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	461f      	mov	r7, r3
 8008b48:	898b      	ldrh	r3, [r1, #12]
 8008b4a:	05db      	lsls	r3, r3, #23
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	4616      	mov	r6, r2
 8008b52:	d505      	bpl.n	8008b60 <__swrite+0x1e>
 8008b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b58:	2302      	movs	r3, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f000 f8d4 	bl	8008d08 <_lseek_r>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	4628      	mov	r0, r5
 8008b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b76:	f000 b8eb 	b.w	8008d50 <_write_r>

08008b7a <__sseek>:
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	f000 f8c1 	bl	8008d08 <_lseek_r>
 8008b86:	1c43      	adds	r3, r0, #1
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	bf15      	itete	ne
 8008b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b96:	81a3      	strheq	r3, [r4, #12]
 8008b98:	bf18      	it	ne
 8008b9a:	81a3      	strhne	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__sclose>:
 8008b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba2:	f000 b8a1 	b.w	8008ce8 <_close_r>

08008ba6 <__swbuf_r>:
 8008ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba8:	460e      	mov	r6, r1
 8008baa:	4614      	mov	r4, r2
 8008bac:	4605      	mov	r5, r0
 8008bae:	b118      	cbz	r0, 8008bb8 <__swbuf_r+0x12>
 8008bb0:	6a03      	ldr	r3, [r0, #32]
 8008bb2:	b90b      	cbnz	r3, 8008bb8 <__swbuf_r+0x12>
 8008bb4:	f7ff ff26 	bl	8008a04 <__sinit>
 8008bb8:	69a3      	ldr	r3, [r4, #24]
 8008bba:	60a3      	str	r3, [r4, #8]
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	071a      	lsls	r2, r3, #28
 8008bc0:	d501      	bpl.n	8008bc6 <__swbuf_r+0x20>
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	b943      	cbnz	r3, 8008bd8 <__swbuf_r+0x32>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 f82b 	bl	8008c24 <__swsetup_r>
 8008bce:	b118      	cbz	r0, 8008bd8 <__swbuf_r+0x32>
 8008bd0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	6922      	ldr	r2, [r4, #16]
 8008bdc:	1a98      	subs	r0, r3, r2
 8008bde:	6963      	ldr	r3, [r4, #20]
 8008be0:	b2f6      	uxtb	r6, r6
 8008be2:	4283      	cmp	r3, r0
 8008be4:	4637      	mov	r7, r6
 8008be6:	dc05      	bgt.n	8008bf4 <__swbuf_r+0x4e>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f002 fea8 	bl	800b940 <_fflush_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d1ed      	bne.n	8008bd0 <__swbuf_r+0x2a>
 8008bf4:	68a3      	ldr	r3, [r4, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	60a3      	str	r3, [r4, #8]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	701e      	strb	r6, [r3, #0]
 8008c02:	6962      	ldr	r2, [r4, #20]
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d004      	beq.n	8008c14 <__swbuf_r+0x6e>
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	07db      	lsls	r3, r3, #31
 8008c0e:	d5e1      	bpl.n	8008bd4 <__swbuf_r+0x2e>
 8008c10:	2e0a      	cmp	r6, #10
 8008c12:	d1df      	bne.n	8008bd4 <__swbuf_r+0x2e>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f002 fe92 	bl	800b940 <_fflush_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0d9      	beq.n	8008bd4 <__swbuf_r+0x2e>
 8008c20:	e7d6      	b.n	8008bd0 <__swbuf_r+0x2a>
	...

08008c24 <__swsetup_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4b29      	ldr	r3, [pc, #164]	@ (8008ccc <__swsetup_r+0xa8>)
 8008c28:	4605      	mov	r5, r0
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	b118      	cbz	r0, 8008c38 <__swsetup_r+0x14>
 8008c30:	6a03      	ldr	r3, [r0, #32]
 8008c32:	b90b      	cbnz	r3, 8008c38 <__swsetup_r+0x14>
 8008c34:	f7ff fee6 	bl	8008a04 <__sinit>
 8008c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c3c:	0719      	lsls	r1, r3, #28
 8008c3e:	d422      	bmi.n	8008c86 <__swsetup_r+0x62>
 8008c40:	06da      	lsls	r2, r3, #27
 8008c42:	d407      	bmi.n	8008c54 <__swsetup_r+0x30>
 8008c44:	2209      	movs	r2, #9
 8008c46:	602a      	str	r2, [r5, #0]
 8008c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c52:	e033      	b.n	8008cbc <__swsetup_r+0x98>
 8008c54:	0758      	lsls	r0, r3, #29
 8008c56:	d512      	bpl.n	8008c7e <__swsetup_r+0x5a>
 8008c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c5a:	b141      	cbz	r1, 8008c6e <__swsetup_r+0x4a>
 8008c5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d002      	beq.n	8008c6a <__swsetup_r+0x46>
 8008c64:	4628      	mov	r0, r5
 8008c66:	f000 ff1f 	bl	8009aa8 <_free_r>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	2300      	movs	r3, #0
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	f043 0308 	orr.w	r3, r3, #8
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	b94b      	cbnz	r3, 8008c9e <__swsetup_r+0x7a>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c94:	d003      	beq.n	8008c9e <__swsetup_r+0x7a>
 8008c96:	4621      	mov	r1, r4
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f002 fe9f 	bl	800b9dc <__smakebuf_r>
 8008c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca2:	f013 0201 	ands.w	r2, r3, #1
 8008ca6:	d00a      	beq.n	8008cbe <__swsetup_r+0x9a>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	60a2      	str	r2, [r4, #8]
 8008cac:	6962      	ldr	r2, [r4, #20]
 8008cae:	4252      	negs	r2, r2
 8008cb0:	61a2      	str	r2, [r4, #24]
 8008cb2:	6922      	ldr	r2, [r4, #16]
 8008cb4:	b942      	cbnz	r2, 8008cc8 <__swsetup_r+0xa4>
 8008cb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cba:	d1c5      	bne.n	8008c48 <__swsetup_r+0x24>
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	0799      	lsls	r1, r3, #30
 8008cc0:	bf58      	it	pl
 8008cc2:	6962      	ldrpl	r2, [r4, #20]
 8008cc4:	60a2      	str	r2, [r4, #8]
 8008cc6:	e7f4      	b.n	8008cb2 <__swsetup_r+0x8e>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7f7      	b.n	8008cbc <__swsetup_r+0x98>
 8008ccc:	20000038 	.word	0x20000038

08008cd0 <memset>:
 8008cd0:	4402      	add	r2, r0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d100      	bne.n	8008cda <memset+0xa>
 8008cd8:	4770      	bx	lr
 8008cda:	f803 1b01 	strb.w	r1, [r3], #1
 8008cde:	e7f9      	b.n	8008cd4 <memset+0x4>

08008ce0 <_localeconv_r>:
 8008ce0:	4800      	ldr	r0, [pc, #0]	@ (8008ce4 <_localeconv_r+0x4>)
 8008ce2:	4770      	bx	lr
 8008ce4:	20000178 	.word	0x20000178

08008ce8 <_close_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	@ (8008d04 <_close_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7fa fbb1 	bl	800345a <_close>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_close_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_close_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	200007a0 	.word	0x200007a0

08008d08 <_lseek_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d07      	ldr	r5, [pc, #28]	@ (8008d28 <_lseek_r+0x20>)
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7fa fbc6 	bl	80034a8 <_lseek>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_lseek_r+0x1e>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_lseek_r+0x1e>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	200007a0 	.word	0x200007a0

08008d2c <_read_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d07      	ldr	r5, [pc, #28]	@ (8008d4c <_read_r+0x20>)
 8008d30:	4604      	mov	r4, r0
 8008d32:	4608      	mov	r0, r1
 8008d34:	4611      	mov	r1, r2
 8008d36:	2200      	movs	r2, #0
 8008d38:	602a      	str	r2, [r5, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f7fa fb54 	bl	80033e8 <_read>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_read_r+0x1e>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_read_r+0x1e>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	200007a0 	.word	0x200007a0

08008d50 <_write_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d07      	ldr	r5, [pc, #28]	@ (8008d70 <_write_r+0x20>)
 8008d54:	4604      	mov	r4, r0
 8008d56:	4608      	mov	r0, r1
 8008d58:	4611      	mov	r1, r2
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	602a      	str	r2, [r5, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	f7fa fb5f 	bl	8003422 <_write>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_write_r+0x1e>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_write_r+0x1e>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200007a0 	.word	0x200007a0

08008d74 <__errno>:
 8008d74:	4b01      	ldr	r3, [pc, #4]	@ (8008d7c <__errno+0x8>)
 8008d76:	6818      	ldr	r0, [r3, #0]
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000038 	.word	0x20000038

08008d80 <__libc_init_array>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	4d0d      	ldr	r5, [pc, #52]	@ (8008db8 <__libc_init_array+0x38>)
 8008d84:	4c0d      	ldr	r4, [pc, #52]	@ (8008dbc <__libc_init_array+0x3c>)
 8008d86:	1b64      	subs	r4, r4, r5
 8008d88:	10a4      	asrs	r4, r4, #2
 8008d8a:	2600      	movs	r6, #0
 8008d8c:	42a6      	cmp	r6, r4
 8008d8e:	d109      	bne.n	8008da4 <__libc_init_array+0x24>
 8008d90:	4d0b      	ldr	r5, [pc, #44]	@ (8008dc0 <__libc_init_array+0x40>)
 8008d92:	4c0c      	ldr	r4, [pc, #48]	@ (8008dc4 <__libc_init_array+0x44>)
 8008d94:	f003 fae2 	bl	800c35c <_init>
 8008d98:	1b64      	subs	r4, r4, r5
 8008d9a:	10a4      	asrs	r4, r4, #2
 8008d9c:	2600      	movs	r6, #0
 8008d9e:	42a6      	cmp	r6, r4
 8008da0:	d105      	bne.n	8008dae <__libc_init_array+0x2e>
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
 8008da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da8:	4798      	blx	r3
 8008daa:	3601      	adds	r6, #1
 8008dac:	e7ee      	b.n	8008d8c <__libc_init_array+0xc>
 8008dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db2:	4798      	blx	r3
 8008db4:	3601      	adds	r6, #1
 8008db6:	e7f2      	b.n	8008d9e <__libc_init_array+0x1e>
 8008db8:	0800c8a4 	.word	0x0800c8a4
 8008dbc:	0800c8a4 	.word	0x0800c8a4
 8008dc0:	0800c8a4 	.word	0x0800c8a4
 8008dc4:	0800c8a8 	.word	0x0800c8a8

08008dc8 <__retarget_lock_init_recursive>:
 8008dc8:	4770      	bx	lr

08008dca <__retarget_lock_acquire_recursive>:
 8008dca:	4770      	bx	lr

08008dcc <__retarget_lock_release_recursive>:
 8008dcc:	4770      	bx	lr

08008dce <memcpy>:
 8008dce:	440a      	add	r2, r1
 8008dd0:	4291      	cmp	r1, r2
 8008dd2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008dd6:	d100      	bne.n	8008dda <memcpy+0xc>
 8008dd8:	4770      	bx	lr
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008de4:	4291      	cmp	r1, r2
 8008de6:	d1f9      	bne.n	8008ddc <memcpy+0xe>
 8008de8:	bd10      	pop	{r4, pc}
	...

08008dec <nanf>:
 8008dec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008df4 <nanf+0x8>
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	7fc00000 	.word	0x7fc00000

08008df8 <quorem>:
 8008df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	6903      	ldr	r3, [r0, #16]
 8008dfe:	690c      	ldr	r4, [r1, #16]
 8008e00:	42a3      	cmp	r3, r4
 8008e02:	4607      	mov	r7, r0
 8008e04:	db7e      	blt.n	8008f04 <quorem+0x10c>
 8008e06:	3c01      	subs	r4, #1
 8008e08:	f101 0814 	add.w	r8, r1, #20
 8008e0c:	00a3      	lsls	r3, r4, #2
 8008e0e:	f100 0514 	add.w	r5, r0, #20
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e18:	9301      	str	r3, [sp, #4]
 8008e1a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e22:	3301      	adds	r3, #1
 8008e24:	429a      	cmp	r2, r3
 8008e26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e2e:	d32e      	bcc.n	8008e8e <quorem+0x96>
 8008e30:	f04f 0a00 	mov.w	sl, #0
 8008e34:	46c4      	mov	ip, r8
 8008e36:	46ae      	mov	lr, r5
 8008e38:	46d3      	mov	fp, sl
 8008e3a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e3e:	b298      	uxth	r0, r3
 8008e40:	fb06 a000 	mla	r0, r6, r0, sl
 8008e44:	0c02      	lsrs	r2, r0, #16
 8008e46:	0c1b      	lsrs	r3, r3, #16
 8008e48:	fb06 2303 	mla	r3, r6, r3, r2
 8008e4c:	f8de 2000 	ldr.w	r2, [lr]
 8008e50:	b280      	uxth	r0, r0
 8008e52:	b292      	uxth	r2, r2
 8008e54:	1a12      	subs	r2, r2, r0
 8008e56:	445a      	add	r2, fp
 8008e58:	f8de 0000 	ldr.w	r0, [lr]
 8008e5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008e66:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008e6a:	b292      	uxth	r2, r2
 8008e6c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008e70:	45e1      	cmp	r9, ip
 8008e72:	f84e 2b04 	str.w	r2, [lr], #4
 8008e76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008e7a:	d2de      	bcs.n	8008e3a <quorem+0x42>
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	58eb      	ldr	r3, [r5, r3]
 8008e80:	b92b      	cbnz	r3, 8008e8e <quorem+0x96>
 8008e82:	9b01      	ldr	r3, [sp, #4]
 8008e84:	3b04      	subs	r3, #4
 8008e86:	429d      	cmp	r5, r3
 8008e88:	461a      	mov	r2, r3
 8008e8a:	d32f      	bcc.n	8008eec <quorem+0xf4>
 8008e8c:	613c      	str	r4, [r7, #16]
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f001 f9c6 	bl	800a220 <__mcmp>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	db25      	blt.n	8008ee4 <quorem+0xec>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ea0:	f8d1 c000 	ldr.w	ip, [r1]
 8008ea4:	fa1f fe82 	uxth.w	lr, r2
 8008ea8:	fa1f f38c 	uxth.w	r3, ip
 8008eac:	eba3 030e 	sub.w	r3, r3, lr
 8008eb0:	4403      	add	r3, r0
 8008eb2:	0c12      	lsrs	r2, r2, #16
 8008eb4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008eb8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ec2:	45c1      	cmp	r9, r8
 8008ec4:	f841 3b04 	str.w	r3, [r1], #4
 8008ec8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ecc:	d2e6      	bcs.n	8008e9c <quorem+0xa4>
 8008ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ed6:	b922      	cbnz	r2, 8008ee2 <quorem+0xea>
 8008ed8:	3b04      	subs	r3, #4
 8008eda:	429d      	cmp	r5, r3
 8008edc:	461a      	mov	r2, r3
 8008ede:	d30b      	bcc.n	8008ef8 <quorem+0x100>
 8008ee0:	613c      	str	r4, [r7, #16]
 8008ee2:	3601      	adds	r6, #1
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	b003      	add	sp, #12
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	3b04      	subs	r3, #4
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	d1cb      	bne.n	8008e8c <quorem+0x94>
 8008ef4:	3c01      	subs	r4, #1
 8008ef6:	e7c6      	b.n	8008e86 <quorem+0x8e>
 8008ef8:	6812      	ldr	r2, [r2, #0]
 8008efa:	3b04      	subs	r3, #4
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	d1ef      	bne.n	8008ee0 <quorem+0xe8>
 8008f00:	3c01      	subs	r4, #1
 8008f02:	e7ea      	b.n	8008eda <quorem+0xe2>
 8008f04:	2000      	movs	r0, #0
 8008f06:	e7ee      	b.n	8008ee6 <quorem+0xee>

08008f08 <_dtoa_r>:
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	69c7      	ldr	r7, [r0, #28]
 8008f0e:	b097      	sub	sp, #92	@ 0x5c
 8008f10:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f14:	ec55 4b10 	vmov	r4, r5, d0
 8008f18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008f1a:	9107      	str	r1, [sp, #28]
 8008f1c:	4681      	mov	r9, r0
 8008f1e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f20:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f22:	b97f      	cbnz	r7, 8008f44 <_dtoa_r+0x3c>
 8008f24:	2010      	movs	r0, #16
 8008f26:	f000 fe09 	bl	8009b3c <malloc>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008f30:	b920      	cbnz	r0, 8008f3c <_dtoa_r+0x34>
 8008f32:	4ba9      	ldr	r3, [pc, #676]	@ (80091d8 <_dtoa_r+0x2d0>)
 8008f34:	21ef      	movs	r1, #239	@ 0xef
 8008f36:	48a9      	ldr	r0, [pc, #676]	@ (80091dc <_dtoa_r+0x2d4>)
 8008f38:	f002 fdf2 	bl	800bb20 <__assert_func>
 8008f3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008f40:	6007      	str	r7, [r0, #0]
 8008f42:	60c7      	str	r7, [r0, #12]
 8008f44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f48:	6819      	ldr	r1, [r3, #0]
 8008f4a:	b159      	cbz	r1, 8008f64 <_dtoa_r+0x5c>
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	604a      	str	r2, [r1, #4]
 8008f50:	2301      	movs	r3, #1
 8008f52:	4093      	lsls	r3, r2
 8008f54:	608b      	str	r3, [r1, #8]
 8008f56:	4648      	mov	r0, r9
 8008f58:	f000 fee6 	bl	8009d28 <_Bfree>
 8008f5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	1e2b      	subs	r3, r5, #0
 8008f66:	bfb9      	ittee	lt
 8008f68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008f6c:	9305      	strlt	r3, [sp, #20]
 8008f6e:	2300      	movge	r3, #0
 8008f70:	6033      	strge	r3, [r6, #0]
 8008f72:	9f05      	ldr	r7, [sp, #20]
 8008f74:	4b9a      	ldr	r3, [pc, #616]	@ (80091e0 <_dtoa_r+0x2d8>)
 8008f76:	bfbc      	itt	lt
 8008f78:	2201      	movlt	r2, #1
 8008f7a:	6032      	strlt	r2, [r6, #0]
 8008f7c:	43bb      	bics	r3, r7
 8008f7e:	d112      	bne.n	8008fa6 <_dtoa_r+0x9e>
 8008f80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008f82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f8c:	4323      	orrs	r3, r4
 8008f8e:	f000 855a 	beq.w	8009a46 <_dtoa_r+0xb3e>
 8008f92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80091f4 <_dtoa_r+0x2ec>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 855c 	beq.w	8009a56 <_dtoa_r+0xb4e>
 8008f9e:	f10a 0303 	add.w	r3, sl, #3
 8008fa2:	f000 bd56 	b.w	8009a52 <_dtoa_r+0xb4a>
 8008fa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008faa:	2200      	movs	r2, #0
 8008fac:	ec51 0b17 	vmov	r0, r1, d7
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008fb6:	f7f7 fdaf 	bl	8000b18 <__aeabi_dcmpeq>
 8008fba:	4680      	mov	r8, r0
 8008fbc:	b158      	cbz	r0, 8008fd6 <_dtoa_r+0xce>
 8008fbe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fc6:	b113      	cbz	r3, 8008fce <_dtoa_r+0xc6>
 8008fc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008fca:	4b86      	ldr	r3, [pc, #536]	@ (80091e4 <_dtoa_r+0x2dc>)
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80091f8 <_dtoa_r+0x2f0>
 8008fd2:	f000 bd40 	b.w	8009a56 <_dtoa_r+0xb4e>
 8008fd6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008fda:	aa14      	add	r2, sp, #80	@ 0x50
 8008fdc:	a915      	add	r1, sp, #84	@ 0x54
 8008fde:	4648      	mov	r0, r9
 8008fe0:	f001 fa3e 	bl	800a460 <__d2b>
 8008fe4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008fe8:	9002      	str	r0, [sp, #8]
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d078      	beq.n	80090e0 <_dtoa_r+0x1d8>
 8008fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ff0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ffc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009000:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009004:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009008:	4619      	mov	r1, r3
 800900a:	2200      	movs	r2, #0
 800900c:	4b76      	ldr	r3, [pc, #472]	@ (80091e8 <_dtoa_r+0x2e0>)
 800900e:	f7f7 f963 	bl	80002d8 <__aeabi_dsub>
 8009012:	a36b      	add	r3, pc, #428	@ (adr r3, 80091c0 <_dtoa_r+0x2b8>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7f7 fb16 	bl	8000648 <__aeabi_dmul>
 800901c:	a36a      	add	r3, pc, #424	@ (adr r3, 80091c8 <_dtoa_r+0x2c0>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 f95b 	bl	80002dc <__adddf3>
 8009026:	4604      	mov	r4, r0
 8009028:	4630      	mov	r0, r6
 800902a:	460d      	mov	r5, r1
 800902c:	f7f7 faa2 	bl	8000574 <__aeabi_i2d>
 8009030:	a367      	add	r3, pc, #412	@ (adr r3, 80091d0 <_dtoa_r+0x2c8>)
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	f7f7 fb07 	bl	8000648 <__aeabi_dmul>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 f94b 	bl	80002dc <__adddf3>
 8009046:	4604      	mov	r4, r0
 8009048:	460d      	mov	r5, r1
 800904a:	f7f7 fdad 	bl	8000ba8 <__aeabi_d2iz>
 800904e:	2200      	movs	r2, #0
 8009050:	4607      	mov	r7, r0
 8009052:	2300      	movs	r3, #0
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fd68 	bl	8000b2c <__aeabi_dcmplt>
 800905c:	b140      	cbz	r0, 8009070 <_dtoa_r+0x168>
 800905e:	4638      	mov	r0, r7
 8009060:	f7f7 fa88 	bl	8000574 <__aeabi_i2d>
 8009064:	4622      	mov	r2, r4
 8009066:	462b      	mov	r3, r5
 8009068:	f7f7 fd56 	bl	8000b18 <__aeabi_dcmpeq>
 800906c:	b900      	cbnz	r0, 8009070 <_dtoa_r+0x168>
 800906e:	3f01      	subs	r7, #1
 8009070:	2f16      	cmp	r7, #22
 8009072:	d852      	bhi.n	800911a <_dtoa_r+0x212>
 8009074:	4b5d      	ldr	r3, [pc, #372]	@ (80091ec <_dtoa_r+0x2e4>)
 8009076:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800907a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009082:	f7f7 fd53 	bl	8000b2c <__aeabi_dcmplt>
 8009086:	2800      	cmp	r0, #0
 8009088:	d049      	beq.n	800911e <_dtoa_r+0x216>
 800908a:	3f01      	subs	r7, #1
 800908c:	2300      	movs	r3, #0
 800908e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009090:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009092:	1b9b      	subs	r3, r3, r6
 8009094:	1e5a      	subs	r2, r3, #1
 8009096:	bf45      	ittet	mi
 8009098:	f1c3 0301 	rsbmi	r3, r3, #1
 800909c:	9300      	strmi	r3, [sp, #0]
 800909e:	2300      	movpl	r3, #0
 80090a0:	2300      	movmi	r3, #0
 80090a2:	9206      	str	r2, [sp, #24]
 80090a4:	bf54      	ite	pl
 80090a6:	9300      	strpl	r3, [sp, #0]
 80090a8:	9306      	strmi	r3, [sp, #24]
 80090aa:	2f00      	cmp	r7, #0
 80090ac:	db39      	blt.n	8009122 <_dtoa_r+0x21a>
 80090ae:	9b06      	ldr	r3, [sp, #24]
 80090b0:	970d      	str	r7, [sp, #52]	@ 0x34
 80090b2:	443b      	add	r3, r7
 80090b4:	9306      	str	r3, [sp, #24]
 80090b6:	2300      	movs	r3, #0
 80090b8:	9308      	str	r3, [sp, #32]
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	2b09      	cmp	r3, #9
 80090be:	d863      	bhi.n	8009188 <_dtoa_r+0x280>
 80090c0:	2b05      	cmp	r3, #5
 80090c2:	bfc4      	itt	gt
 80090c4:	3b04      	subgt	r3, #4
 80090c6:	9307      	strgt	r3, [sp, #28]
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	f1a3 0302 	sub.w	r3, r3, #2
 80090ce:	bfcc      	ite	gt
 80090d0:	2400      	movgt	r4, #0
 80090d2:	2401      	movle	r4, #1
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d863      	bhi.n	80091a0 <_dtoa_r+0x298>
 80090d8:	e8df f003 	tbb	[pc, r3]
 80090dc:	2b375452 	.word	0x2b375452
 80090e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80090e4:	441e      	add	r6, r3
 80090e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	bfc1      	itttt	gt
 80090ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80090f2:	409f      	lslgt	r7, r3
 80090f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80090f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80090fc:	bfd6      	itet	le
 80090fe:	f1c3 0320 	rsble	r3, r3, #32
 8009102:	ea47 0003 	orrgt.w	r0, r7, r3
 8009106:	fa04 f003 	lslle.w	r0, r4, r3
 800910a:	f7f7 fa23 	bl	8000554 <__aeabi_ui2d>
 800910e:	2201      	movs	r2, #1
 8009110:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009114:	3e01      	subs	r6, #1
 8009116:	9212      	str	r2, [sp, #72]	@ 0x48
 8009118:	e776      	b.n	8009008 <_dtoa_r+0x100>
 800911a:	2301      	movs	r3, #1
 800911c:	e7b7      	b.n	800908e <_dtoa_r+0x186>
 800911e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009120:	e7b6      	b.n	8009090 <_dtoa_r+0x188>
 8009122:	9b00      	ldr	r3, [sp, #0]
 8009124:	1bdb      	subs	r3, r3, r7
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	427b      	negs	r3, r7
 800912a:	9308      	str	r3, [sp, #32]
 800912c:	2300      	movs	r3, #0
 800912e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009130:	e7c3      	b.n	80090ba <_dtoa_r+0x1b2>
 8009132:	2301      	movs	r3, #1
 8009134:	9309      	str	r3, [sp, #36]	@ 0x24
 8009136:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009138:	eb07 0b03 	add.w	fp, r7, r3
 800913c:	f10b 0301 	add.w	r3, fp, #1
 8009140:	2b01      	cmp	r3, #1
 8009142:	9303      	str	r3, [sp, #12]
 8009144:	bfb8      	it	lt
 8009146:	2301      	movlt	r3, #1
 8009148:	e006      	b.n	8009158 <_dtoa_r+0x250>
 800914a:	2301      	movs	r3, #1
 800914c:	9309      	str	r3, [sp, #36]	@ 0x24
 800914e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009150:	2b00      	cmp	r3, #0
 8009152:	dd28      	ble.n	80091a6 <_dtoa_r+0x29e>
 8009154:	469b      	mov	fp, r3
 8009156:	9303      	str	r3, [sp, #12]
 8009158:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800915c:	2100      	movs	r1, #0
 800915e:	2204      	movs	r2, #4
 8009160:	f102 0514 	add.w	r5, r2, #20
 8009164:	429d      	cmp	r5, r3
 8009166:	d926      	bls.n	80091b6 <_dtoa_r+0x2ae>
 8009168:	6041      	str	r1, [r0, #4]
 800916a:	4648      	mov	r0, r9
 800916c:	f000 fd9c 	bl	8009ca8 <_Balloc>
 8009170:	4682      	mov	sl, r0
 8009172:	2800      	cmp	r0, #0
 8009174:	d142      	bne.n	80091fc <_dtoa_r+0x2f4>
 8009176:	4b1e      	ldr	r3, [pc, #120]	@ (80091f0 <_dtoa_r+0x2e8>)
 8009178:	4602      	mov	r2, r0
 800917a:	f240 11af 	movw	r1, #431	@ 0x1af
 800917e:	e6da      	b.n	8008f36 <_dtoa_r+0x2e>
 8009180:	2300      	movs	r3, #0
 8009182:	e7e3      	b.n	800914c <_dtoa_r+0x244>
 8009184:	2300      	movs	r3, #0
 8009186:	e7d5      	b.n	8009134 <_dtoa_r+0x22c>
 8009188:	2401      	movs	r4, #1
 800918a:	2300      	movs	r3, #0
 800918c:	9307      	str	r3, [sp, #28]
 800918e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009190:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009194:	2200      	movs	r2, #0
 8009196:	f8cd b00c 	str.w	fp, [sp, #12]
 800919a:	2312      	movs	r3, #18
 800919c:	920c      	str	r2, [sp, #48]	@ 0x30
 800919e:	e7db      	b.n	8009158 <_dtoa_r+0x250>
 80091a0:	2301      	movs	r3, #1
 80091a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a4:	e7f4      	b.n	8009190 <_dtoa_r+0x288>
 80091a6:	f04f 0b01 	mov.w	fp, #1
 80091aa:	f8cd b00c 	str.w	fp, [sp, #12]
 80091ae:	465b      	mov	r3, fp
 80091b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80091b4:	e7d0      	b.n	8009158 <_dtoa_r+0x250>
 80091b6:	3101      	adds	r1, #1
 80091b8:	0052      	lsls	r2, r2, #1
 80091ba:	e7d1      	b.n	8009160 <_dtoa_r+0x258>
 80091bc:	f3af 8000 	nop.w
 80091c0:	636f4361 	.word	0x636f4361
 80091c4:	3fd287a7 	.word	0x3fd287a7
 80091c8:	8b60c8b3 	.word	0x8b60c8b3
 80091cc:	3fc68a28 	.word	0x3fc68a28
 80091d0:	509f79fb 	.word	0x509f79fb
 80091d4:	3fd34413 	.word	0x3fd34413
 80091d8:	0800c4ba 	.word	0x0800c4ba
 80091dc:	0800c4d1 	.word	0x0800c4d1
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	0800c485 	.word	0x0800c485
 80091e8:	3ff80000 	.word	0x3ff80000
 80091ec:	0800c680 	.word	0x0800c680
 80091f0:	0800c529 	.word	0x0800c529
 80091f4:	0800c4b6 	.word	0x0800c4b6
 80091f8:	0800c484 	.word	0x0800c484
 80091fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009200:	6018      	str	r0, [r3, #0]
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	2b0e      	cmp	r3, #14
 8009206:	f200 80a1 	bhi.w	800934c <_dtoa_r+0x444>
 800920a:	2c00      	cmp	r4, #0
 800920c:	f000 809e 	beq.w	800934c <_dtoa_r+0x444>
 8009210:	2f00      	cmp	r7, #0
 8009212:	dd33      	ble.n	800927c <_dtoa_r+0x374>
 8009214:	4b9c      	ldr	r3, [pc, #624]	@ (8009488 <_dtoa_r+0x580>)
 8009216:	f007 020f 	and.w	r2, r7, #15
 800921a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800921e:	ed93 7b00 	vldr	d7, [r3]
 8009222:	05f8      	lsls	r0, r7, #23
 8009224:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009228:	ea4f 1427 	mov.w	r4, r7, asr #4
 800922c:	d516      	bpl.n	800925c <_dtoa_r+0x354>
 800922e:	4b97      	ldr	r3, [pc, #604]	@ (800948c <_dtoa_r+0x584>)
 8009230:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009234:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009238:	f7f7 fb30 	bl	800089c <__aeabi_ddiv>
 800923c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009240:	f004 040f 	and.w	r4, r4, #15
 8009244:	2603      	movs	r6, #3
 8009246:	4d91      	ldr	r5, [pc, #580]	@ (800948c <_dtoa_r+0x584>)
 8009248:	b954      	cbnz	r4, 8009260 <_dtoa_r+0x358>
 800924a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800924e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009252:	f7f7 fb23 	bl	800089c <__aeabi_ddiv>
 8009256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800925a:	e028      	b.n	80092ae <_dtoa_r+0x3a6>
 800925c:	2602      	movs	r6, #2
 800925e:	e7f2      	b.n	8009246 <_dtoa_r+0x33e>
 8009260:	07e1      	lsls	r1, r4, #31
 8009262:	d508      	bpl.n	8009276 <_dtoa_r+0x36e>
 8009264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009268:	e9d5 2300 	ldrd	r2, r3, [r5]
 800926c:	f7f7 f9ec 	bl	8000648 <__aeabi_dmul>
 8009270:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009274:	3601      	adds	r6, #1
 8009276:	1064      	asrs	r4, r4, #1
 8009278:	3508      	adds	r5, #8
 800927a:	e7e5      	b.n	8009248 <_dtoa_r+0x340>
 800927c:	f000 80af 	beq.w	80093de <_dtoa_r+0x4d6>
 8009280:	427c      	negs	r4, r7
 8009282:	4b81      	ldr	r3, [pc, #516]	@ (8009488 <_dtoa_r+0x580>)
 8009284:	4d81      	ldr	r5, [pc, #516]	@ (800948c <_dtoa_r+0x584>)
 8009286:	f004 020f 	and.w	r2, r4, #15
 800928a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009296:	f7f7 f9d7 	bl	8000648 <__aeabi_dmul>
 800929a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800929e:	1124      	asrs	r4, r4, #4
 80092a0:	2300      	movs	r3, #0
 80092a2:	2602      	movs	r6, #2
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	f040 808f 	bne.w	80093c8 <_dtoa_r+0x4c0>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1d3      	bne.n	8009256 <_dtoa_r+0x34e>
 80092ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8094 	beq.w	80093e2 <_dtoa_r+0x4da>
 80092ba:	4b75      	ldr	r3, [pc, #468]	@ (8009490 <_dtoa_r+0x588>)
 80092bc:	2200      	movs	r2, #0
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fc33 	bl	8000b2c <__aeabi_dcmplt>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f000 808b 	beq.w	80093e2 <_dtoa_r+0x4da>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 8087 	beq.w	80093e2 <_dtoa_r+0x4da>
 80092d4:	f1bb 0f00 	cmp.w	fp, #0
 80092d8:	dd34      	ble.n	8009344 <_dtoa_r+0x43c>
 80092da:	4620      	mov	r0, r4
 80092dc:	4b6d      	ldr	r3, [pc, #436]	@ (8009494 <_dtoa_r+0x58c>)
 80092de:	2200      	movs	r2, #0
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f7 f9b1 	bl	8000648 <__aeabi_dmul>
 80092e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ea:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80092ee:	3601      	adds	r6, #1
 80092f0:	465c      	mov	r4, fp
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7f7 f93e 	bl	8000574 <__aeabi_i2d>
 80092f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092fc:	f7f7 f9a4 	bl	8000648 <__aeabi_dmul>
 8009300:	4b65      	ldr	r3, [pc, #404]	@ (8009498 <_dtoa_r+0x590>)
 8009302:	2200      	movs	r2, #0
 8009304:	f7f6 ffea 	bl	80002dc <__adddf3>
 8009308:	4605      	mov	r5, r0
 800930a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800930e:	2c00      	cmp	r4, #0
 8009310:	d16a      	bne.n	80093e8 <_dtoa_r+0x4e0>
 8009312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009316:	4b61      	ldr	r3, [pc, #388]	@ (800949c <_dtoa_r+0x594>)
 8009318:	2200      	movs	r2, #0
 800931a:	f7f6 ffdd 	bl	80002d8 <__aeabi_dsub>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009326:	462a      	mov	r2, r5
 8009328:	4633      	mov	r3, r6
 800932a:	f7f7 fc1d 	bl	8000b68 <__aeabi_dcmpgt>
 800932e:	2800      	cmp	r0, #0
 8009330:	f040 8298 	bne.w	8009864 <_dtoa_r+0x95c>
 8009334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009338:	462a      	mov	r2, r5
 800933a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800933e:	f7f7 fbf5 	bl	8000b2c <__aeabi_dcmplt>
 8009342:	bb38      	cbnz	r0, 8009394 <_dtoa_r+0x48c>
 8009344:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009348:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800934c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800934e:	2b00      	cmp	r3, #0
 8009350:	f2c0 8157 	blt.w	8009602 <_dtoa_r+0x6fa>
 8009354:	2f0e      	cmp	r7, #14
 8009356:	f300 8154 	bgt.w	8009602 <_dtoa_r+0x6fa>
 800935a:	4b4b      	ldr	r3, [pc, #300]	@ (8009488 <_dtoa_r+0x580>)
 800935c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009360:	ed93 7b00 	vldr	d7, [r3]
 8009364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009366:	2b00      	cmp	r3, #0
 8009368:	ed8d 7b00 	vstr	d7, [sp]
 800936c:	f280 80e5 	bge.w	800953a <_dtoa_r+0x632>
 8009370:	9b03      	ldr	r3, [sp, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f300 80e1 	bgt.w	800953a <_dtoa_r+0x632>
 8009378:	d10c      	bne.n	8009394 <_dtoa_r+0x48c>
 800937a:	4b48      	ldr	r3, [pc, #288]	@ (800949c <_dtoa_r+0x594>)
 800937c:	2200      	movs	r2, #0
 800937e:	ec51 0b17 	vmov	r0, r1, d7
 8009382:	f7f7 f961 	bl	8000648 <__aeabi_dmul>
 8009386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800938a:	f7f7 fbe3 	bl	8000b54 <__aeabi_dcmpge>
 800938e:	2800      	cmp	r0, #0
 8009390:	f000 8266 	beq.w	8009860 <_dtoa_r+0x958>
 8009394:	2400      	movs	r4, #0
 8009396:	4625      	mov	r5, r4
 8009398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800939a:	4656      	mov	r6, sl
 800939c:	ea6f 0803 	mvn.w	r8, r3
 80093a0:	2700      	movs	r7, #0
 80093a2:	4621      	mov	r1, r4
 80093a4:	4648      	mov	r0, r9
 80093a6:	f000 fcbf 	bl	8009d28 <_Bfree>
 80093aa:	2d00      	cmp	r5, #0
 80093ac:	f000 80bd 	beq.w	800952a <_dtoa_r+0x622>
 80093b0:	b12f      	cbz	r7, 80093be <_dtoa_r+0x4b6>
 80093b2:	42af      	cmp	r7, r5
 80093b4:	d003      	beq.n	80093be <_dtoa_r+0x4b6>
 80093b6:	4639      	mov	r1, r7
 80093b8:	4648      	mov	r0, r9
 80093ba:	f000 fcb5 	bl	8009d28 <_Bfree>
 80093be:	4629      	mov	r1, r5
 80093c0:	4648      	mov	r0, r9
 80093c2:	f000 fcb1 	bl	8009d28 <_Bfree>
 80093c6:	e0b0      	b.n	800952a <_dtoa_r+0x622>
 80093c8:	07e2      	lsls	r2, r4, #31
 80093ca:	d505      	bpl.n	80093d8 <_dtoa_r+0x4d0>
 80093cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093d0:	f7f7 f93a 	bl	8000648 <__aeabi_dmul>
 80093d4:	3601      	adds	r6, #1
 80093d6:	2301      	movs	r3, #1
 80093d8:	1064      	asrs	r4, r4, #1
 80093da:	3508      	adds	r5, #8
 80093dc:	e762      	b.n	80092a4 <_dtoa_r+0x39c>
 80093de:	2602      	movs	r6, #2
 80093e0:	e765      	b.n	80092ae <_dtoa_r+0x3a6>
 80093e2:	9c03      	ldr	r4, [sp, #12]
 80093e4:	46b8      	mov	r8, r7
 80093e6:	e784      	b.n	80092f2 <_dtoa_r+0x3ea>
 80093e8:	4b27      	ldr	r3, [pc, #156]	@ (8009488 <_dtoa_r+0x580>)
 80093ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093f4:	4454      	add	r4, sl
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d054      	beq.n	80094a4 <_dtoa_r+0x59c>
 80093fa:	4929      	ldr	r1, [pc, #164]	@ (80094a0 <_dtoa_r+0x598>)
 80093fc:	2000      	movs	r0, #0
 80093fe:	f7f7 fa4d 	bl	800089c <__aeabi_ddiv>
 8009402:	4633      	mov	r3, r6
 8009404:	462a      	mov	r2, r5
 8009406:	f7f6 ff67 	bl	80002d8 <__aeabi_dsub>
 800940a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800940e:	4656      	mov	r6, sl
 8009410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009414:	f7f7 fbc8 	bl	8000ba8 <__aeabi_d2iz>
 8009418:	4605      	mov	r5, r0
 800941a:	f7f7 f8ab 	bl	8000574 <__aeabi_i2d>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009426:	f7f6 ff57 	bl	80002d8 <__aeabi_dsub>
 800942a:	3530      	adds	r5, #48	@ 0x30
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009434:	f806 5b01 	strb.w	r5, [r6], #1
 8009438:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800943c:	f7f7 fb76 	bl	8000b2c <__aeabi_dcmplt>
 8009440:	2800      	cmp	r0, #0
 8009442:	d172      	bne.n	800952a <_dtoa_r+0x622>
 8009444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009448:	4911      	ldr	r1, [pc, #68]	@ (8009490 <_dtoa_r+0x588>)
 800944a:	2000      	movs	r0, #0
 800944c:	f7f6 ff44 	bl	80002d8 <__aeabi_dsub>
 8009450:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009454:	f7f7 fb6a 	bl	8000b2c <__aeabi_dcmplt>
 8009458:	2800      	cmp	r0, #0
 800945a:	f040 80b4 	bne.w	80095c6 <_dtoa_r+0x6be>
 800945e:	42a6      	cmp	r6, r4
 8009460:	f43f af70 	beq.w	8009344 <_dtoa_r+0x43c>
 8009464:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009468:	4b0a      	ldr	r3, [pc, #40]	@ (8009494 <_dtoa_r+0x58c>)
 800946a:	2200      	movs	r2, #0
 800946c:	f7f7 f8ec 	bl	8000648 <__aeabi_dmul>
 8009470:	4b08      	ldr	r3, [pc, #32]	@ (8009494 <_dtoa_r+0x58c>)
 8009472:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009476:	2200      	movs	r2, #0
 8009478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800947c:	f7f7 f8e4 	bl	8000648 <__aeabi_dmul>
 8009480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009484:	e7c4      	b.n	8009410 <_dtoa_r+0x508>
 8009486:	bf00      	nop
 8009488:	0800c680 	.word	0x0800c680
 800948c:	0800c658 	.word	0x0800c658
 8009490:	3ff00000 	.word	0x3ff00000
 8009494:	40240000 	.word	0x40240000
 8009498:	401c0000 	.word	0x401c0000
 800949c:	40140000 	.word	0x40140000
 80094a0:	3fe00000 	.word	0x3fe00000
 80094a4:	4631      	mov	r1, r6
 80094a6:	4628      	mov	r0, r5
 80094a8:	f7f7 f8ce 	bl	8000648 <__aeabi_dmul>
 80094ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80094b2:	4656      	mov	r6, sl
 80094b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094b8:	f7f7 fb76 	bl	8000ba8 <__aeabi_d2iz>
 80094bc:	4605      	mov	r5, r0
 80094be:	f7f7 f859 	bl	8000574 <__aeabi_i2d>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ca:	f7f6 ff05 	bl	80002d8 <__aeabi_dsub>
 80094ce:	3530      	adds	r5, #48	@ 0x30
 80094d0:	f806 5b01 	strb.w	r5, [r6], #1
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	42a6      	cmp	r6, r4
 80094da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094de:	f04f 0200 	mov.w	r2, #0
 80094e2:	d124      	bne.n	800952e <_dtoa_r+0x626>
 80094e4:	4baf      	ldr	r3, [pc, #700]	@ (80097a4 <_dtoa_r+0x89c>)
 80094e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80094ea:	f7f6 fef7 	bl	80002dc <__adddf3>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094f6:	f7f7 fb37 	bl	8000b68 <__aeabi_dcmpgt>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d163      	bne.n	80095c6 <_dtoa_r+0x6be>
 80094fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009502:	49a8      	ldr	r1, [pc, #672]	@ (80097a4 <_dtoa_r+0x89c>)
 8009504:	2000      	movs	r0, #0
 8009506:	f7f6 fee7 	bl	80002d8 <__aeabi_dsub>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009512:	f7f7 fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8009516:	2800      	cmp	r0, #0
 8009518:	f43f af14 	beq.w	8009344 <_dtoa_r+0x43c>
 800951c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800951e:	1e73      	subs	r3, r6, #1
 8009520:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009522:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009526:	2b30      	cmp	r3, #48	@ 0x30
 8009528:	d0f8      	beq.n	800951c <_dtoa_r+0x614>
 800952a:	4647      	mov	r7, r8
 800952c:	e03b      	b.n	80095a6 <_dtoa_r+0x69e>
 800952e:	4b9e      	ldr	r3, [pc, #632]	@ (80097a8 <_dtoa_r+0x8a0>)
 8009530:	f7f7 f88a 	bl	8000648 <__aeabi_dmul>
 8009534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009538:	e7bc      	b.n	80094b4 <_dtoa_r+0x5ac>
 800953a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800953e:	4656      	mov	r6, sl
 8009540:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	f7f7 f9a8 	bl	800089c <__aeabi_ddiv>
 800954c:	f7f7 fb2c 	bl	8000ba8 <__aeabi_d2iz>
 8009550:	4680      	mov	r8, r0
 8009552:	f7f7 f80f 	bl	8000574 <__aeabi_i2d>
 8009556:	e9dd 2300 	ldrd	r2, r3, [sp]
 800955a:	f7f7 f875 	bl	8000648 <__aeabi_dmul>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4620      	mov	r0, r4
 8009564:	4629      	mov	r1, r5
 8009566:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800956a:	f7f6 feb5 	bl	80002d8 <__aeabi_dsub>
 800956e:	f806 4b01 	strb.w	r4, [r6], #1
 8009572:	9d03      	ldr	r5, [sp, #12]
 8009574:	eba6 040a 	sub.w	r4, r6, sl
 8009578:	42a5      	cmp	r5, r4
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	d133      	bne.n	80095e8 <_dtoa_r+0x6e0>
 8009580:	f7f6 feac 	bl	80002dc <__adddf3>
 8009584:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009588:	4604      	mov	r4, r0
 800958a:	460d      	mov	r5, r1
 800958c:	f7f7 faec 	bl	8000b68 <__aeabi_dcmpgt>
 8009590:	b9c0      	cbnz	r0, 80095c4 <_dtoa_r+0x6bc>
 8009592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f7 fabd 	bl	8000b18 <__aeabi_dcmpeq>
 800959e:	b110      	cbz	r0, 80095a6 <_dtoa_r+0x69e>
 80095a0:	f018 0f01 	tst.w	r8, #1
 80095a4:	d10e      	bne.n	80095c4 <_dtoa_r+0x6bc>
 80095a6:	9902      	ldr	r1, [sp, #8]
 80095a8:	4648      	mov	r0, r9
 80095aa:	f000 fbbd 	bl	8009d28 <_Bfree>
 80095ae:	2300      	movs	r3, #0
 80095b0:	7033      	strb	r3, [r6, #0]
 80095b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095b4:	3701      	adds	r7, #1
 80095b6:	601f      	str	r7, [r3, #0]
 80095b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 824b 	beq.w	8009a56 <_dtoa_r+0xb4e>
 80095c0:	601e      	str	r6, [r3, #0]
 80095c2:	e248      	b.n	8009a56 <_dtoa_r+0xb4e>
 80095c4:	46b8      	mov	r8, r7
 80095c6:	4633      	mov	r3, r6
 80095c8:	461e      	mov	r6, r3
 80095ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ce:	2a39      	cmp	r2, #57	@ 0x39
 80095d0:	d106      	bne.n	80095e0 <_dtoa_r+0x6d8>
 80095d2:	459a      	cmp	sl, r3
 80095d4:	d1f8      	bne.n	80095c8 <_dtoa_r+0x6c0>
 80095d6:	2230      	movs	r2, #48	@ 0x30
 80095d8:	f108 0801 	add.w	r8, r8, #1
 80095dc:	f88a 2000 	strb.w	r2, [sl]
 80095e0:	781a      	ldrb	r2, [r3, #0]
 80095e2:	3201      	adds	r2, #1
 80095e4:	701a      	strb	r2, [r3, #0]
 80095e6:	e7a0      	b.n	800952a <_dtoa_r+0x622>
 80095e8:	4b6f      	ldr	r3, [pc, #444]	@ (80097a8 <_dtoa_r+0x8a0>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	f7f7 f82c 	bl	8000648 <__aeabi_dmul>
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	f7f7 fa8e 	bl	8000b18 <__aeabi_dcmpeq>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d09f      	beq.n	8009540 <_dtoa_r+0x638>
 8009600:	e7d1      	b.n	80095a6 <_dtoa_r+0x69e>
 8009602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009604:	2a00      	cmp	r2, #0
 8009606:	f000 80ea 	beq.w	80097de <_dtoa_r+0x8d6>
 800960a:	9a07      	ldr	r2, [sp, #28]
 800960c:	2a01      	cmp	r2, #1
 800960e:	f300 80cd 	bgt.w	80097ac <_dtoa_r+0x8a4>
 8009612:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009614:	2a00      	cmp	r2, #0
 8009616:	f000 80c1 	beq.w	800979c <_dtoa_r+0x894>
 800961a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800961e:	9c08      	ldr	r4, [sp, #32]
 8009620:	9e00      	ldr	r6, [sp, #0]
 8009622:	9a00      	ldr	r2, [sp, #0]
 8009624:	441a      	add	r2, r3
 8009626:	9200      	str	r2, [sp, #0]
 8009628:	9a06      	ldr	r2, [sp, #24]
 800962a:	2101      	movs	r1, #1
 800962c:	441a      	add	r2, r3
 800962e:	4648      	mov	r0, r9
 8009630:	9206      	str	r2, [sp, #24]
 8009632:	f000 fc77 	bl	8009f24 <__i2b>
 8009636:	4605      	mov	r5, r0
 8009638:	b166      	cbz	r6, 8009654 <_dtoa_r+0x74c>
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd09      	ble.n	8009654 <_dtoa_r+0x74c>
 8009640:	42b3      	cmp	r3, r6
 8009642:	9a00      	ldr	r2, [sp, #0]
 8009644:	bfa8      	it	ge
 8009646:	4633      	movge	r3, r6
 8009648:	1ad2      	subs	r2, r2, r3
 800964a:	9200      	str	r2, [sp, #0]
 800964c:	9a06      	ldr	r2, [sp, #24]
 800964e:	1af6      	subs	r6, r6, r3
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	9306      	str	r3, [sp, #24]
 8009654:	9b08      	ldr	r3, [sp, #32]
 8009656:	b30b      	cbz	r3, 800969c <_dtoa_r+0x794>
 8009658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80c6 	beq.w	80097ec <_dtoa_r+0x8e4>
 8009660:	2c00      	cmp	r4, #0
 8009662:	f000 80c0 	beq.w	80097e6 <_dtoa_r+0x8de>
 8009666:	4629      	mov	r1, r5
 8009668:	4622      	mov	r2, r4
 800966a:	4648      	mov	r0, r9
 800966c:	f000 fd12 	bl	800a094 <__pow5mult>
 8009670:	9a02      	ldr	r2, [sp, #8]
 8009672:	4601      	mov	r1, r0
 8009674:	4605      	mov	r5, r0
 8009676:	4648      	mov	r0, r9
 8009678:	f000 fc6a 	bl	8009f50 <__multiply>
 800967c:	9902      	ldr	r1, [sp, #8]
 800967e:	4680      	mov	r8, r0
 8009680:	4648      	mov	r0, r9
 8009682:	f000 fb51 	bl	8009d28 <_Bfree>
 8009686:	9b08      	ldr	r3, [sp, #32]
 8009688:	1b1b      	subs	r3, r3, r4
 800968a:	9308      	str	r3, [sp, #32]
 800968c:	f000 80b1 	beq.w	80097f2 <_dtoa_r+0x8ea>
 8009690:	9a08      	ldr	r2, [sp, #32]
 8009692:	4641      	mov	r1, r8
 8009694:	4648      	mov	r0, r9
 8009696:	f000 fcfd 	bl	800a094 <__pow5mult>
 800969a:	9002      	str	r0, [sp, #8]
 800969c:	2101      	movs	r1, #1
 800969e:	4648      	mov	r0, r9
 80096a0:	f000 fc40 	bl	8009f24 <__i2b>
 80096a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096a6:	4604      	mov	r4, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 81d8 	beq.w	8009a5e <_dtoa_r+0xb56>
 80096ae:	461a      	mov	r2, r3
 80096b0:	4601      	mov	r1, r0
 80096b2:	4648      	mov	r0, r9
 80096b4:	f000 fcee 	bl	800a094 <__pow5mult>
 80096b8:	9b07      	ldr	r3, [sp, #28]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	4604      	mov	r4, r0
 80096be:	f300 809f 	bgt.w	8009800 <_dtoa_r+0x8f8>
 80096c2:	9b04      	ldr	r3, [sp, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f040 8097 	bne.w	80097f8 <_dtoa_r+0x8f0>
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f040 8093 	bne.w	80097fc <_dtoa_r+0x8f4>
 80096d6:	9b05      	ldr	r3, [sp, #20]
 80096d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096dc:	0d1b      	lsrs	r3, r3, #20
 80096de:	051b      	lsls	r3, r3, #20
 80096e0:	b133      	cbz	r3, 80096f0 <_dtoa_r+0x7e8>
 80096e2:	9b00      	ldr	r3, [sp, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	9b06      	ldr	r3, [sp, #24]
 80096ea:	3301      	adds	r3, #1
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	2301      	movs	r3, #1
 80096f0:	9308      	str	r3, [sp, #32]
 80096f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 81b8 	beq.w	8009a6a <_dtoa_r+0xb62>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009700:	6918      	ldr	r0, [r3, #16]
 8009702:	f000 fbc3 	bl	8009e8c <__hi0bits>
 8009706:	f1c0 0020 	rsb	r0, r0, #32
 800970a:	9b06      	ldr	r3, [sp, #24]
 800970c:	4418      	add	r0, r3
 800970e:	f010 001f 	ands.w	r0, r0, #31
 8009712:	f000 8082 	beq.w	800981a <_dtoa_r+0x912>
 8009716:	f1c0 0320 	rsb	r3, r0, #32
 800971a:	2b04      	cmp	r3, #4
 800971c:	dd73      	ble.n	8009806 <_dtoa_r+0x8fe>
 800971e:	9b00      	ldr	r3, [sp, #0]
 8009720:	f1c0 001c 	rsb	r0, r0, #28
 8009724:	4403      	add	r3, r0
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	9b06      	ldr	r3, [sp, #24]
 800972a:	4403      	add	r3, r0
 800972c:	4406      	add	r6, r0
 800972e:	9306      	str	r3, [sp, #24]
 8009730:	9b00      	ldr	r3, [sp, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	dd05      	ble.n	8009742 <_dtoa_r+0x83a>
 8009736:	9902      	ldr	r1, [sp, #8]
 8009738:	461a      	mov	r2, r3
 800973a:	4648      	mov	r0, r9
 800973c:	f000 fd04 	bl	800a148 <__lshift>
 8009740:	9002      	str	r0, [sp, #8]
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd05      	ble.n	8009754 <_dtoa_r+0x84c>
 8009748:	4621      	mov	r1, r4
 800974a:	461a      	mov	r2, r3
 800974c:	4648      	mov	r0, r9
 800974e:	f000 fcfb 	bl	800a148 <__lshift>
 8009752:	4604      	mov	r4, r0
 8009754:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009756:	2b00      	cmp	r3, #0
 8009758:	d061      	beq.n	800981e <_dtoa_r+0x916>
 800975a:	9802      	ldr	r0, [sp, #8]
 800975c:	4621      	mov	r1, r4
 800975e:	f000 fd5f 	bl	800a220 <__mcmp>
 8009762:	2800      	cmp	r0, #0
 8009764:	da5b      	bge.n	800981e <_dtoa_r+0x916>
 8009766:	2300      	movs	r3, #0
 8009768:	9902      	ldr	r1, [sp, #8]
 800976a:	220a      	movs	r2, #10
 800976c:	4648      	mov	r0, r9
 800976e:	f000 fafd 	bl	8009d6c <__multadd>
 8009772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009774:	9002      	str	r0, [sp, #8]
 8009776:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 8177 	beq.w	8009a6e <_dtoa_r+0xb66>
 8009780:	4629      	mov	r1, r5
 8009782:	2300      	movs	r3, #0
 8009784:	220a      	movs	r2, #10
 8009786:	4648      	mov	r0, r9
 8009788:	f000 faf0 	bl	8009d6c <__multadd>
 800978c:	f1bb 0f00 	cmp.w	fp, #0
 8009790:	4605      	mov	r5, r0
 8009792:	dc6f      	bgt.n	8009874 <_dtoa_r+0x96c>
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	2b02      	cmp	r3, #2
 8009798:	dc49      	bgt.n	800982e <_dtoa_r+0x926>
 800979a:	e06b      	b.n	8009874 <_dtoa_r+0x96c>
 800979c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800979e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80097a2:	e73c      	b.n	800961e <_dtoa_r+0x716>
 80097a4:	3fe00000 	.word	0x3fe00000
 80097a8:	40240000 	.word	0x40240000
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	1e5c      	subs	r4, r3, #1
 80097b0:	9b08      	ldr	r3, [sp, #32]
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	db09      	blt.n	80097ca <_dtoa_r+0x8c2>
 80097b6:	1b1c      	subs	r4, r3, r4
 80097b8:	9b03      	ldr	r3, [sp, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f6bf af30 	bge.w	8009620 <_dtoa_r+0x718>
 80097c0:	9b00      	ldr	r3, [sp, #0]
 80097c2:	9a03      	ldr	r2, [sp, #12]
 80097c4:	1a9e      	subs	r6, r3, r2
 80097c6:	2300      	movs	r3, #0
 80097c8:	e72b      	b.n	8009622 <_dtoa_r+0x71a>
 80097ca:	9b08      	ldr	r3, [sp, #32]
 80097cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097ce:	9408      	str	r4, [sp, #32]
 80097d0:	1ae3      	subs	r3, r4, r3
 80097d2:	441a      	add	r2, r3
 80097d4:	9e00      	ldr	r6, [sp, #0]
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	920d      	str	r2, [sp, #52]	@ 0x34
 80097da:	2400      	movs	r4, #0
 80097dc:	e721      	b.n	8009622 <_dtoa_r+0x71a>
 80097de:	9c08      	ldr	r4, [sp, #32]
 80097e0:	9e00      	ldr	r6, [sp, #0]
 80097e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80097e4:	e728      	b.n	8009638 <_dtoa_r+0x730>
 80097e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80097ea:	e751      	b.n	8009690 <_dtoa_r+0x788>
 80097ec:	9a08      	ldr	r2, [sp, #32]
 80097ee:	9902      	ldr	r1, [sp, #8]
 80097f0:	e750      	b.n	8009694 <_dtoa_r+0x78c>
 80097f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80097f6:	e751      	b.n	800969c <_dtoa_r+0x794>
 80097f8:	2300      	movs	r3, #0
 80097fa:	e779      	b.n	80096f0 <_dtoa_r+0x7e8>
 80097fc:	9b04      	ldr	r3, [sp, #16]
 80097fe:	e777      	b.n	80096f0 <_dtoa_r+0x7e8>
 8009800:	2300      	movs	r3, #0
 8009802:	9308      	str	r3, [sp, #32]
 8009804:	e779      	b.n	80096fa <_dtoa_r+0x7f2>
 8009806:	d093      	beq.n	8009730 <_dtoa_r+0x828>
 8009808:	9a00      	ldr	r2, [sp, #0]
 800980a:	331c      	adds	r3, #28
 800980c:	441a      	add	r2, r3
 800980e:	9200      	str	r2, [sp, #0]
 8009810:	9a06      	ldr	r2, [sp, #24]
 8009812:	441a      	add	r2, r3
 8009814:	441e      	add	r6, r3
 8009816:	9206      	str	r2, [sp, #24]
 8009818:	e78a      	b.n	8009730 <_dtoa_r+0x828>
 800981a:	4603      	mov	r3, r0
 800981c:	e7f4      	b.n	8009808 <_dtoa_r+0x900>
 800981e:	9b03      	ldr	r3, [sp, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	46b8      	mov	r8, r7
 8009824:	dc20      	bgt.n	8009868 <_dtoa_r+0x960>
 8009826:	469b      	mov	fp, r3
 8009828:	9b07      	ldr	r3, [sp, #28]
 800982a:	2b02      	cmp	r3, #2
 800982c:	dd1e      	ble.n	800986c <_dtoa_r+0x964>
 800982e:	f1bb 0f00 	cmp.w	fp, #0
 8009832:	f47f adb1 	bne.w	8009398 <_dtoa_r+0x490>
 8009836:	4621      	mov	r1, r4
 8009838:	465b      	mov	r3, fp
 800983a:	2205      	movs	r2, #5
 800983c:	4648      	mov	r0, r9
 800983e:	f000 fa95 	bl	8009d6c <__multadd>
 8009842:	4601      	mov	r1, r0
 8009844:	4604      	mov	r4, r0
 8009846:	9802      	ldr	r0, [sp, #8]
 8009848:	f000 fcea 	bl	800a220 <__mcmp>
 800984c:	2800      	cmp	r0, #0
 800984e:	f77f ada3 	ble.w	8009398 <_dtoa_r+0x490>
 8009852:	4656      	mov	r6, sl
 8009854:	2331      	movs	r3, #49	@ 0x31
 8009856:	f806 3b01 	strb.w	r3, [r6], #1
 800985a:	f108 0801 	add.w	r8, r8, #1
 800985e:	e59f      	b.n	80093a0 <_dtoa_r+0x498>
 8009860:	9c03      	ldr	r4, [sp, #12]
 8009862:	46b8      	mov	r8, r7
 8009864:	4625      	mov	r5, r4
 8009866:	e7f4      	b.n	8009852 <_dtoa_r+0x94a>
 8009868:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800986c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 8101 	beq.w	8009a76 <_dtoa_r+0xb6e>
 8009874:	2e00      	cmp	r6, #0
 8009876:	dd05      	ble.n	8009884 <_dtoa_r+0x97c>
 8009878:	4629      	mov	r1, r5
 800987a:	4632      	mov	r2, r6
 800987c:	4648      	mov	r0, r9
 800987e:	f000 fc63 	bl	800a148 <__lshift>
 8009882:	4605      	mov	r5, r0
 8009884:	9b08      	ldr	r3, [sp, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d05c      	beq.n	8009944 <_dtoa_r+0xa3c>
 800988a:	6869      	ldr	r1, [r5, #4]
 800988c:	4648      	mov	r0, r9
 800988e:	f000 fa0b 	bl	8009ca8 <_Balloc>
 8009892:	4606      	mov	r6, r0
 8009894:	b928      	cbnz	r0, 80098a2 <_dtoa_r+0x99a>
 8009896:	4b82      	ldr	r3, [pc, #520]	@ (8009aa0 <_dtoa_r+0xb98>)
 8009898:	4602      	mov	r2, r0
 800989a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800989e:	f7ff bb4a 	b.w	8008f36 <_dtoa_r+0x2e>
 80098a2:	692a      	ldr	r2, [r5, #16]
 80098a4:	3202      	adds	r2, #2
 80098a6:	0092      	lsls	r2, r2, #2
 80098a8:	f105 010c 	add.w	r1, r5, #12
 80098ac:	300c      	adds	r0, #12
 80098ae:	f7ff fa8e 	bl	8008dce <memcpy>
 80098b2:	2201      	movs	r2, #1
 80098b4:	4631      	mov	r1, r6
 80098b6:	4648      	mov	r0, r9
 80098b8:	f000 fc46 	bl	800a148 <__lshift>
 80098bc:	f10a 0301 	add.w	r3, sl, #1
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	eb0a 030b 	add.w	r3, sl, fp
 80098c6:	9308      	str	r3, [sp, #32]
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	462f      	mov	r7, r5
 80098d0:	9306      	str	r3, [sp, #24]
 80098d2:	4605      	mov	r5, r0
 80098d4:	9b00      	ldr	r3, [sp, #0]
 80098d6:	9802      	ldr	r0, [sp, #8]
 80098d8:	4621      	mov	r1, r4
 80098da:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80098de:	f7ff fa8b 	bl	8008df8 <quorem>
 80098e2:	4603      	mov	r3, r0
 80098e4:	3330      	adds	r3, #48	@ 0x30
 80098e6:	9003      	str	r0, [sp, #12]
 80098e8:	4639      	mov	r1, r7
 80098ea:	9802      	ldr	r0, [sp, #8]
 80098ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ee:	f000 fc97 	bl	800a220 <__mcmp>
 80098f2:	462a      	mov	r2, r5
 80098f4:	9004      	str	r0, [sp, #16]
 80098f6:	4621      	mov	r1, r4
 80098f8:	4648      	mov	r0, r9
 80098fa:	f000 fcad 	bl	800a258 <__mdiff>
 80098fe:	68c2      	ldr	r2, [r0, #12]
 8009900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009902:	4606      	mov	r6, r0
 8009904:	bb02      	cbnz	r2, 8009948 <_dtoa_r+0xa40>
 8009906:	4601      	mov	r1, r0
 8009908:	9802      	ldr	r0, [sp, #8]
 800990a:	f000 fc89 	bl	800a220 <__mcmp>
 800990e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009910:	4602      	mov	r2, r0
 8009912:	4631      	mov	r1, r6
 8009914:	4648      	mov	r0, r9
 8009916:	920c      	str	r2, [sp, #48]	@ 0x30
 8009918:	9309      	str	r3, [sp, #36]	@ 0x24
 800991a:	f000 fa05 	bl	8009d28 <_Bfree>
 800991e:	9b07      	ldr	r3, [sp, #28]
 8009920:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009922:	9e00      	ldr	r6, [sp, #0]
 8009924:	ea42 0103 	orr.w	r1, r2, r3
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	4319      	orrs	r1, r3
 800992c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992e:	d10d      	bne.n	800994c <_dtoa_r+0xa44>
 8009930:	2b39      	cmp	r3, #57	@ 0x39
 8009932:	d027      	beq.n	8009984 <_dtoa_r+0xa7c>
 8009934:	9a04      	ldr	r2, [sp, #16]
 8009936:	2a00      	cmp	r2, #0
 8009938:	dd01      	ble.n	800993e <_dtoa_r+0xa36>
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	3331      	adds	r3, #49	@ 0x31
 800993e:	f88b 3000 	strb.w	r3, [fp]
 8009942:	e52e      	b.n	80093a2 <_dtoa_r+0x49a>
 8009944:	4628      	mov	r0, r5
 8009946:	e7b9      	b.n	80098bc <_dtoa_r+0x9b4>
 8009948:	2201      	movs	r2, #1
 800994a:	e7e2      	b.n	8009912 <_dtoa_r+0xa0a>
 800994c:	9904      	ldr	r1, [sp, #16]
 800994e:	2900      	cmp	r1, #0
 8009950:	db04      	blt.n	800995c <_dtoa_r+0xa54>
 8009952:	9807      	ldr	r0, [sp, #28]
 8009954:	4301      	orrs	r1, r0
 8009956:	9806      	ldr	r0, [sp, #24]
 8009958:	4301      	orrs	r1, r0
 800995a:	d120      	bne.n	800999e <_dtoa_r+0xa96>
 800995c:	2a00      	cmp	r2, #0
 800995e:	ddee      	ble.n	800993e <_dtoa_r+0xa36>
 8009960:	9902      	ldr	r1, [sp, #8]
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	2201      	movs	r2, #1
 8009966:	4648      	mov	r0, r9
 8009968:	f000 fbee 	bl	800a148 <__lshift>
 800996c:	4621      	mov	r1, r4
 800996e:	9002      	str	r0, [sp, #8]
 8009970:	f000 fc56 	bl	800a220 <__mcmp>
 8009974:	2800      	cmp	r0, #0
 8009976:	9b00      	ldr	r3, [sp, #0]
 8009978:	dc02      	bgt.n	8009980 <_dtoa_r+0xa78>
 800997a:	d1e0      	bne.n	800993e <_dtoa_r+0xa36>
 800997c:	07da      	lsls	r2, r3, #31
 800997e:	d5de      	bpl.n	800993e <_dtoa_r+0xa36>
 8009980:	2b39      	cmp	r3, #57	@ 0x39
 8009982:	d1da      	bne.n	800993a <_dtoa_r+0xa32>
 8009984:	2339      	movs	r3, #57	@ 0x39
 8009986:	f88b 3000 	strb.w	r3, [fp]
 800998a:	4633      	mov	r3, r6
 800998c:	461e      	mov	r6, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009994:	2a39      	cmp	r2, #57	@ 0x39
 8009996:	d04e      	beq.n	8009a36 <_dtoa_r+0xb2e>
 8009998:	3201      	adds	r2, #1
 800999a:	701a      	strb	r2, [r3, #0]
 800999c:	e501      	b.n	80093a2 <_dtoa_r+0x49a>
 800999e:	2a00      	cmp	r2, #0
 80099a0:	dd03      	ble.n	80099aa <_dtoa_r+0xaa2>
 80099a2:	2b39      	cmp	r3, #57	@ 0x39
 80099a4:	d0ee      	beq.n	8009984 <_dtoa_r+0xa7c>
 80099a6:	3301      	adds	r3, #1
 80099a8:	e7c9      	b.n	800993e <_dtoa_r+0xa36>
 80099aa:	9a00      	ldr	r2, [sp, #0]
 80099ac:	9908      	ldr	r1, [sp, #32]
 80099ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099b2:	428a      	cmp	r2, r1
 80099b4:	d028      	beq.n	8009a08 <_dtoa_r+0xb00>
 80099b6:	9902      	ldr	r1, [sp, #8]
 80099b8:	2300      	movs	r3, #0
 80099ba:	220a      	movs	r2, #10
 80099bc:	4648      	mov	r0, r9
 80099be:	f000 f9d5 	bl	8009d6c <__multadd>
 80099c2:	42af      	cmp	r7, r5
 80099c4:	9002      	str	r0, [sp, #8]
 80099c6:	f04f 0300 	mov.w	r3, #0
 80099ca:	f04f 020a 	mov.w	r2, #10
 80099ce:	4639      	mov	r1, r7
 80099d0:	4648      	mov	r0, r9
 80099d2:	d107      	bne.n	80099e4 <_dtoa_r+0xadc>
 80099d4:	f000 f9ca 	bl	8009d6c <__multadd>
 80099d8:	4607      	mov	r7, r0
 80099da:	4605      	mov	r5, r0
 80099dc:	9b00      	ldr	r3, [sp, #0]
 80099de:	3301      	adds	r3, #1
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	e777      	b.n	80098d4 <_dtoa_r+0x9cc>
 80099e4:	f000 f9c2 	bl	8009d6c <__multadd>
 80099e8:	4629      	mov	r1, r5
 80099ea:	4607      	mov	r7, r0
 80099ec:	2300      	movs	r3, #0
 80099ee:	220a      	movs	r2, #10
 80099f0:	4648      	mov	r0, r9
 80099f2:	f000 f9bb 	bl	8009d6c <__multadd>
 80099f6:	4605      	mov	r5, r0
 80099f8:	e7f0      	b.n	80099dc <_dtoa_r+0xad4>
 80099fa:	f1bb 0f00 	cmp.w	fp, #0
 80099fe:	bfcc      	ite	gt
 8009a00:	465e      	movgt	r6, fp
 8009a02:	2601      	movle	r6, #1
 8009a04:	4456      	add	r6, sl
 8009a06:	2700      	movs	r7, #0
 8009a08:	9902      	ldr	r1, [sp, #8]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	4648      	mov	r0, r9
 8009a10:	f000 fb9a 	bl	800a148 <__lshift>
 8009a14:	4621      	mov	r1, r4
 8009a16:	9002      	str	r0, [sp, #8]
 8009a18:	f000 fc02 	bl	800a220 <__mcmp>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	dcb4      	bgt.n	800998a <_dtoa_r+0xa82>
 8009a20:	d102      	bne.n	8009a28 <_dtoa_r+0xb20>
 8009a22:	9b00      	ldr	r3, [sp, #0]
 8009a24:	07db      	lsls	r3, r3, #31
 8009a26:	d4b0      	bmi.n	800998a <_dtoa_r+0xa82>
 8009a28:	4633      	mov	r3, r6
 8009a2a:	461e      	mov	r6, r3
 8009a2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a30:	2a30      	cmp	r2, #48	@ 0x30
 8009a32:	d0fa      	beq.n	8009a2a <_dtoa_r+0xb22>
 8009a34:	e4b5      	b.n	80093a2 <_dtoa_r+0x49a>
 8009a36:	459a      	cmp	sl, r3
 8009a38:	d1a8      	bne.n	800998c <_dtoa_r+0xa84>
 8009a3a:	2331      	movs	r3, #49	@ 0x31
 8009a3c:	f108 0801 	add.w	r8, r8, #1
 8009a40:	f88a 3000 	strb.w	r3, [sl]
 8009a44:	e4ad      	b.n	80093a2 <_dtoa_r+0x49a>
 8009a46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009aa4 <_dtoa_r+0xb9c>
 8009a4c:	b11b      	cbz	r3, 8009a56 <_dtoa_r+0xb4e>
 8009a4e:	f10a 0308 	add.w	r3, sl, #8
 8009a52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	4650      	mov	r0, sl
 8009a58:	b017      	add	sp, #92	@ 0x5c
 8009a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5e:	9b07      	ldr	r3, [sp, #28]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	f77f ae2e 	ble.w	80096c2 <_dtoa_r+0x7ba>
 8009a66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a68:	9308      	str	r3, [sp, #32]
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	e64d      	b.n	800970a <_dtoa_r+0x802>
 8009a6e:	f1bb 0f00 	cmp.w	fp, #0
 8009a72:	f77f aed9 	ble.w	8009828 <_dtoa_r+0x920>
 8009a76:	4656      	mov	r6, sl
 8009a78:	9802      	ldr	r0, [sp, #8]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	f7ff f9bc 	bl	8008df8 <quorem>
 8009a80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009a84:	f806 3b01 	strb.w	r3, [r6], #1
 8009a88:	eba6 020a 	sub.w	r2, r6, sl
 8009a8c:	4593      	cmp	fp, r2
 8009a8e:	ddb4      	ble.n	80099fa <_dtoa_r+0xaf2>
 8009a90:	9902      	ldr	r1, [sp, #8]
 8009a92:	2300      	movs	r3, #0
 8009a94:	220a      	movs	r2, #10
 8009a96:	4648      	mov	r0, r9
 8009a98:	f000 f968 	bl	8009d6c <__multadd>
 8009a9c:	9002      	str	r0, [sp, #8]
 8009a9e:	e7eb      	b.n	8009a78 <_dtoa_r+0xb70>
 8009aa0:	0800c529 	.word	0x0800c529
 8009aa4:	0800c4ad 	.word	0x0800c4ad

08009aa8 <_free_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4605      	mov	r5, r0
 8009aac:	2900      	cmp	r1, #0
 8009aae:	d041      	beq.n	8009b34 <_free_r+0x8c>
 8009ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab4:	1f0c      	subs	r4, r1, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bfb8      	it	lt
 8009aba:	18e4      	addlt	r4, r4, r3
 8009abc:	f000 f8e8 	bl	8009c90 <__malloc_lock>
 8009ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b38 <_free_r+0x90>)
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	b933      	cbnz	r3, 8009ad4 <_free_r+0x2c>
 8009ac6:	6063      	str	r3, [r4, #4]
 8009ac8:	6014      	str	r4, [r2, #0]
 8009aca:	4628      	mov	r0, r5
 8009acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad0:	f000 b8e4 	b.w	8009c9c <__malloc_unlock>
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d908      	bls.n	8009aea <_free_r+0x42>
 8009ad8:	6820      	ldr	r0, [r4, #0]
 8009ada:	1821      	adds	r1, r4, r0
 8009adc:	428b      	cmp	r3, r1
 8009ade:	bf01      	itttt	eq
 8009ae0:	6819      	ldreq	r1, [r3, #0]
 8009ae2:	685b      	ldreq	r3, [r3, #4]
 8009ae4:	1809      	addeq	r1, r1, r0
 8009ae6:	6021      	streq	r1, [r4, #0]
 8009ae8:	e7ed      	b.n	8009ac6 <_free_r+0x1e>
 8009aea:	461a      	mov	r2, r3
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	b10b      	cbz	r3, 8009af4 <_free_r+0x4c>
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d9fa      	bls.n	8009aea <_free_r+0x42>
 8009af4:	6811      	ldr	r1, [r2, #0]
 8009af6:	1850      	adds	r0, r2, r1
 8009af8:	42a0      	cmp	r0, r4
 8009afa:	d10b      	bne.n	8009b14 <_free_r+0x6c>
 8009afc:	6820      	ldr	r0, [r4, #0]
 8009afe:	4401      	add	r1, r0
 8009b00:	1850      	adds	r0, r2, r1
 8009b02:	4283      	cmp	r3, r0
 8009b04:	6011      	str	r1, [r2, #0]
 8009b06:	d1e0      	bne.n	8009aca <_free_r+0x22>
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	6053      	str	r3, [r2, #4]
 8009b0e:	4408      	add	r0, r1
 8009b10:	6010      	str	r0, [r2, #0]
 8009b12:	e7da      	b.n	8009aca <_free_r+0x22>
 8009b14:	d902      	bls.n	8009b1c <_free_r+0x74>
 8009b16:	230c      	movs	r3, #12
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	e7d6      	b.n	8009aca <_free_r+0x22>
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	1821      	adds	r1, r4, r0
 8009b20:	428b      	cmp	r3, r1
 8009b22:	bf04      	itt	eq
 8009b24:	6819      	ldreq	r1, [r3, #0]
 8009b26:	685b      	ldreq	r3, [r3, #4]
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	bf04      	itt	eq
 8009b2c:	1809      	addeq	r1, r1, r0
 8009b2e:	6021      	streq	r1, [r4, #0]
 8009b30:	6054      	str	r4, [r2, #4]
 8009b32:	e7ca      	b.n	8009aca <_free_r+0x22>
 8009b34:	bd38      	pop	{r3, r4, r5, pc}
 8009b36:	bf00      	nop
 8009b38:	200007ac 	.word	0x200007ac

08009b3c <malloc>:
 8009b3c:	4b02      	ldr	r3, [pc, #8]	@ (8009b48 <malloc+0xc>)
 8009b3e:	4601      	mov	r1, r0
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	f000 b825 	b.w	8009b90 <_malloc_r>
 8009b46:	bf00      	nop
 8009b48:	20000038 	.word	0x20000038

08009b4c <sbrk_aligned>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	4e0f      	ldr	r6, [pc, #60]	@ (8009b8c <sbrk_aligned+0x40>)
 8009b50:	460c      	mov	r4, r1
 8009b52:	6831      	ldr	r1, [r6, #0]
 8009b54:	4605      	mov	r5, r0
 8009b56:	b911      	cbnz	r1, 8009b5e <sbrk_aligned+0x12>
 8009b58:	f001 ffca 	bl	800baf0 <_sbrk_r>
 8009b5c:	6030      	str	r0, [r6, #0]
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4628      	mov	r0, r5
 8009b62:	f001 ffc5 	bl	800baf0 <_sbrk_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	d103      	bne.n	8009b72 <sbrk_aligned+0x26>
 8009b6a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009b6e:	4620      	mov	r0, r4
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	1cc4      	adds	r4, r0, #3
 8009b74:	f024 0403 	bic.w	r4, r4, #3
 8009b78:	42a0      	cmp	r0, r4
 8009b7a:	d0f8      	beq.n	8009b6e <sbrk_aligned+0x22>
 8009b7c:	1a21      	subs	r1, r4, r0
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f001 ffb6 	bl	800baf0 <_sbrk_r>
 8009b84:	3001      	adds	r0, #1
 8009b86:	d1f2      	bne.n	8009b6e <sbrk_aligned+0x22>
 8009b88:	e7ef      	b.n	8009b6a <sbrk_aligned+0x1e>
 8009b8a:	bf00      	nop
 8009b8c:	200007a8 	.word	0x200007a8

08009b90 <_malloc_r>:
 8009b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b94:	1ccd      	adds	r5, r1, #3
 8009b96:	f025 0503 	bic.w	r5, r5, #3
 8009b9a:	3508      	adds	r5, #8
 8009b9c:	2d0c      	cmp	r5, #12
 8009b9e:	bf38      	it	cc
 8009ba0:	250c      	movcc	r5, #12
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	db01      	blt.n	8009bac <_malloc_r+0x1c>
 8009ba8:	42a9      	cmp	r1, r5
 8009baa:	d904      	bls.n	8009bb6 <_malloc_r+0x26>
 8009bac:	230c      	movs	r3, #12
 8009bae:	6033      	str	r3, [r6, #0]
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c8c <_malloc_r+0xfc>
 8009bba:	f000 f869 	bl	8009c90 <__malloc_lock>
 8009bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8009bc2:	461c      	mov	r4, r3
 8009bc4:	bb44      	cbnz	r4, 8009c18 <_malloc_r+0x88>
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7ff ffbf 	bl	8009b4c <sbrk_aligned>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	d158      	bne.n	8009c86 <_malloc_r+0xf6>
 8009bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8009bd8:	4627      	mov	r7, r4
 8009bda:	2f00      	cmp	r7, #0
 8009bdc:	d143      	bne.n	8009c66 <_malloc_r+0xd6>
 8009bde:	2c00      	cmp	r4, #0
 8009be0:	d04b      	beq.n	8009c7a <_malloc_r+0xea>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	4639      	mov	r1, r7
 8009be6:	4630      	mov	r0, r6
 8009be8:	eb04 0903 	add.w	r9, r4, r3
 8009bec:	f001 ff80 	bl	800baf0 <_sbrk_r>
 8009bf0:	4581      	cmp	r9, r0
 8009bf2:	d142      	bne.n	8009c7a <_malloc_r+0xea>
 8009bf4:	6821      	ldr	r1, [r4, #0]
 8009bf6:	1a6d      	subs	r5, r5, r1
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7ff ffa6 	bl	8009b4c <sbrk_aligned>
 8009c00:	3001      	adds	r0, #1
 8009c02:	d03a      	beq.n	8009c7a <_malloc_r+0xea>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	442b      	add	r3, r5
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	bb62      	cbnz	r2, 8009c6c <_malloc_r+0xdc>
 8009c12:	f8c8 7000 	str.w	r7, [r8]
 8009c16:	e00f      	b.n	8009c38 <_malloc_r+0xa8>
 8009c18:	6822      	ldr	r2, [r4, #0]
 8009c1a:	1b52      	subs	r2, r2, r5
 8009c1c:	d420      	bmi.n	8009c60 <_malloc_r+0xd0>
 8009c1e:	2a0b      	cmp	r2, #11
 8009c20:	d917      	bls.n	8009c52 <_malloc_r+0xc2>
 8009c22:	1961      	adds	r1, r4, r5
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	6025      	str	r5, [r4, #0]
 8009c28:	bf18      	it	ne
 8009c2a:	6059      	strne	r1, [r3, #4]
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	bf08      	it	eq
 8009c30:	f8c8 1000 	streq.w	r1, [r8]
 8009c34:	5162      	str	r2, [r4, r5]
 8009c36:	604b      	str	r3, [r1, #4]
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f000 f82f 	bl	8009c9c <__malloc_unlock>
 8009c3e:	f104 000b 	add.w	r0, r4, #11
 8009c42:	1d23      	adds	r3, r4, #4
 8009c44:	f020 0007 	bic.w	r0, r0, #7
 8009c48:	1ac2      	subs	r2, r0, r3
 8009c4a:	bf1c      	itt	ne
 8009c4c:	1a1b      	subne	r3, r3, r0
 8009c4e:	50a3      	strne	r3, [r4, r2]
 8009c50:	e7af      	b.n	8009bb2 <_malloc_r+0x22>
 8009c52:	6862      	ldr	r2, [r4, #4]
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	bf0c      	ite	eq
 8009c58:	f8c8 2000 	streq.w	r2, [r8]
 8009c5c:	605a      	strne	r2, [r3, #4]
 8009c5e:	e7eb      	b.n	8009c38 <_malloc_r+0xa8>
 8009c60:	4623      	mov	r3, r4
 8009c62:	6864      	ldr	r4, [r4, #4]
 8009c64:	e7ae      	b.n	8009bc4 <_malloc_r+0x34>
 8009c66:	463c      	mov	r4, r7
 8009c68:	687f      	ldr	r7, [r7, #4]
 8009c6a:	e7b6      	b.n	8009bda <_malloc_r+0x4a>
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d1fb      	bne.n	8009c6c <_malloc_r+0xdc>
 8009c74:	2300      	movs	r3, #0
 8009c76:	6053      	str	r3, [r2, #4]
 8009c78:	e7de      	b.n	8009c38 <_malloc_r+0xa8>
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	6033      	str	r3, [r6, #0]
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f000 f80c 	bl	8009c9c <__malloc_unlock>
 8009c84:	e794      	b.n	8009bb0 <_malloc_r+0x20>
 8009c86:	6005      	str	r5, [r0, #0]
 8009c88:	e7d6      	b.n	8009c38 <_malloc_r+0xa8>
 8009c8a:	bf00      	nop
 8009c8c:	200007ac 	.word	0x200007ac

08009c90 <__malloc_lock>:
 8009c90:	4801      	ldr	r0, [pc, #4]	@ (8009c98 <__malloc_lock+0x8>)
 8009c92:	f7ff b89a 	b.w	8008dca <__retarget_lock_acquire_recursive>
 8009c96:	bf00      	nop
 8009c98:	200007a4 	.word	0x200007a4

08009c9c <__malloc_unlock>:
 8009c9c:	4801      	ldr	r0, [pc, #4]	@ (8009ca4 <__malloc_unlock+0x8>)
 8009c9e:	f7ff b895 	b.w	8008dcc <__retarget_lock_release_recursive>
 8009ca2:	bf00      	nop
 8009ca4:	200007a4 	.word	0x200007a4

08009ca8 <_Balloc>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	69c6      	ldr	r6, [r0, #28]
 8009cac:	4604      	mov	r4, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	b976      	cbnz	r6, 8009cd0 <_Balloc+0x28>
 8009cb2:	2010      	movs	r0, #16
 8009cb4:	f7ff ff42 	bl	8009b3c <malloc>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	61e0      	str	r0, [r4, #28]
 8009cbc:	b920      	cbnz	r0, 8009cc8 <_Balloc+0x20>
 8009cbe:	4b18      	ldr	r3, [pc, #96]	@ (8009d20 <_Balloc+0x78>)
 8009cc0:	4818      	ldr	r0, [pc, #96]	@ (8009d24 <_Balloc+0x7c>)
 8009cc2:	216b      	movs	r1, #107	@ 0x6b
 8009cc4:	f001 ff2c 	bl	800bb20 <__assert_func>
 8009cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ccc:	6006      	str	r6, [r0, #0]
 8009cce:	60c6      	str	r6, [r0, #12]
 8009cd0:	69e6      	ldr	r6, [r4, #28]
 8009cd2:	68f3      	ldr	r3, [r6, #12]
 8009cd4:	b183      	cbz	r3, 8009cf8 <_Balloc+0x50>
 8009cd6:	69e3      	ldr	r3, [r4, #28]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cde:	b9b8      	cbnz	r0, 8009d10 <_Balloc+0x68>
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ce6:	1d72      	adds	r2, r6, #5
 8009ce8:	0092      	lsls	r2, r2, #2
 8009cea:	4620      	mov	r0, r4
 8009cec:	f001 ff36 	bl	800bb5c <_calloc_r>
 8009cf0:	b160      	cbz	r0, 8009d0c <_Balloc+0x64>
 8009cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cf6:	e00e      	b.n	8009d16 <_Balloc+0x6e>
 8009cf8:	2221      	movs	r2, #33	@ 0x21
 8009cfa:	2104      	movs	r1, #4
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f001 ff2d 	bl	800bb5c <_calloc_r>
 8009d02:	69e3      	ldr	r3, [r4, #28]
 8009d04:	60f0      	str	r0, [r6, #12]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e4      	bne.n	8009cd6 <_Balloc+0x2e>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	6802      	ldr	r2, [r0, #0]
 8009d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d16:	2300      	movs	r3, #0
 8009d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d1c:	e7f7      	b.n	8009d0e <_Balloc+0x66>
 8009d1e:	bf00      	nop
 8009d20:	0800c4ba 	.word	0x0800c4ba
 8009d24:	0800c53a 	.word	0x0800c53a

08009d28 <_Bfree>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	69c6      	ldr	r6, [r0, #28]
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	b976      	cbnz	r6, 8009d50 <_Bfree+0x28>
 8009d32:	2010      	movs	r0, #16
 8009d34:	f7ff ff02 	bl	8009b3c <malloc>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	61e8      	str	r0, [r5, #28]
 8009d3c:	b920      	cbnz	r0, 8009d48 <_Bfree+0x20>
 8009d3e:	4b09      	ldr	r3, [pc, #36]	@ (8009d64 <_Bfree+0x3c>)
 8009d40:	4809      	ldr	r0, [pc, #36]	@ (8009d68 <_Bfree+0x40>)
 8009d42:	218f      	movs	r1, #143	@ 0x8f
 8009d44:	f001 feec 	bl	800bb20 <__assert_func>
 8009d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d4c:	6006      	str	r6, [r0, #0]
 8009d4e:	60c6      	str	r6, [r0, #12]
 8009d50:	b13c      	cbz	r4, 8009d62 <_Bfree+0x3a>
 8009d52:	69eb      	ldr	r3, [r5, #28]
 8009d54:	6862      	ldr	r2, [r4, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d5c:	6021      	str	r1, [r4, #0]
 8009d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d62:	bd70      	pop	{r4, r5, r6, pc}
 8009d64:	0800c4ba 	.word	0x0800c4ba
 8009d68:	0800c53a 	.word	0x0800c53a

08009d6c <__multadd>:
 8009d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d70:	690d      	ldr	r5, [r1, #16]
 8009d72:	4607      	mov	r7, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	461e      	mov	r6, r3
 8009d78:	f101 0c14 	add.w	ip, r1, #20
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8009d82:	b299      	uxth	r1, r3
 8009d84:	fb02 6101 	mla	r1, r2, r1, r6
 8009d88:	0c1e      	lsrs	r6, r3, #16
 8009d8a:	0c0b      	lsrs	r3, r1, #16
 8009d8c:	fb02 3306 	mla	r3, r2, r6, r3
 8009d90:	b289      	uxth	r1, r1
 8009d92:	3001      	adds	r0, #1
 8009d94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d98:	4285      	cmp	r5, r0
 8009d9a:	f84c 1b04 	str.w	r1, [ip], #4
 8009d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009da2:	dcec      	bgt.n	8009d7e <__multadd+0x12>
 8009da4:	b30e      	cbz	r6, 8009dea <__multadd+0x7e>
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	42ab      	cmp	r3, r5
 8009daa:	dc19      	bgt.n	8009de0 <__multadd+0x74>
 8009dac:	6861      	ldr	r1, [r4, #4]
 8009dae:	4638      	mov	r0, r7
 8009db0:	3101      	adds	r1, #1
 8009db2:	f7ff ff79 	bl	8009ca8 <_Balloc>
 8009db6:	4680      	mov	r8, r0
 8009db8:	b928      	cbnz	r0, 8009dc6 <__multadd+0x5a>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8009df0 <__multadd+0x84>)
 8009dbe:	480d      	ldr	r0, [pc, #52]	@ (8009df4 <__multadd+0x88>)
 8009dc0:	21ba      	movs	r1, #186	@ 0xba
 8009dc2:	f001 fead 	bl	800bb20 <__assert_func>
 8009dc6:	6922      	ldr	r2, [r4, #16]
 8009dc8:	3202      	adds	r2, #2
 8009dca:	f104 010c 	add.w	r1, r4, #12
 8009dce:	0092      	lsls	r2, r2, #2
 8009dd0:	300c      	adds	r0, #12
 8009dd2:	f7fe fffc 	bl	8008dce <memcpy>
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff ffa5 	bl	8009d28 <_Bfree>
 8009dde:	4644      	mov	r4, r8
 8009de0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009de4:	3501      	adds	r5, #1
 8009de6:	615e      	str	r6, [r3, #20]
 8009de8:	6125      	str	r5, [r4, #16]
 8009dea:	4620      	mov	r0, r4
 8009dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df0:	0800c529 	.word	0x0800c529
 8009df4:	0800c53a 	.word	0x0800c53a

08009df8 <__s2b>:
 8009df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	4615      	mov	r5, r2
 8009e00:	461f      	mov	r7, r3
 8009e02:	2209      	movs	r2, #9
 8009e04:	3308      	adds	r3, #8
 8009e06:	4606      	mov	r6, r0
 8009e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	2201      	movs	r2, #1
 8009e10:	429a      	cmp	r2, r3
 8009e12:	db09      	blt.n	8009e28 <__s2b+0x30>
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff ff47 	bl	8009ca8 <_Balloc>
 8009e1a:	b940      	cbnz	r0, 8009e2e <__s2b+0x36>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	4b19      	ldr	r3, [pc, #100]	@ (8009e84 <__s2b+0x8c>)
 8009e20:	4819      	ldr	r0, [pc, #100]	@ (8009e88 <__s2b+0x90>)
 8009e22:	21d3      	movs	r1, #211	@ 0xd3
 8009e24:	f001 fe7c 	bl	800bb20 <__assert_func>
 8009e28:	0052      	lsls	r2, r2, #1
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	e7f0      	b.n	8009e10 <__s2b+0x18>
 8009e2e:	9b08      	ldr	r3, [sp, #32]
 8009e30:	6143      	str	r3, [r0, #20]
 8009e32:	2d09      	cmp	r5, #9
 8009e34:	f04f 0301 	mov.w	r3, #1
 8009e38:	6103      	str	r3, [r0, #16]
 8009e3a:	dd16      	ble.n	8009e6a <__s2b+0x72>
 8009e3c:	f104 0909 	add.w	r9, r4, #9
 8009e40:	46c8      	mov	r8, r9
 8009e42:	442c      	add	r4, r5
 8009e44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e48:	4601      	mov	r1, r0
 8009e4a:	3b30      	subs	r3, #48	@ 0x30
 8009e4c:	220a      	movs	r2, #10
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ff8c 	bl	8009d6c <__multadd>
 8009e54:	45a0      	cmp	r8, r4
 8009e56:	d1f5      	bne.n	8009e44 <__s2b+0x4c>
 8009e58:	f1a5 0408 	sub.w	r4, r5, #8
 8009e5c:	444c      	add	r4, r9
 8009e5e:	1b2d      	subs	r5, r5, r4
 8009e60:	1963      	adds	r3, r4, r5
 8009e62:	42bb      	cmp	r3, r7
 8009e64:	db04      	blt.n	8009e70 <__s2b+0x78>
 8009e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6a:	340a      	adds	r4, #10
 8009e6c:	2509      	movs	r5, #9
 8009e6e:	e7f6      	b.n	8009e5e <__s2b+0x66>
 8009e70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e74:	4601      	mov	r1, r0
 8009e76:	3b30      	subs	r3, #48	@ 0x30
 8009e78:	220a      	movs	r2, #10
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7ff ff76 	bl	8009d6c <__multadd>
 8009e80:	e7ee      	b.n	8009e60 <__s2b+0x68>
 8009e82:	bf00      	nop
 8009e84:	0800c529 	.word	0x0800c529
 8009e88:	0800c53a 	.word	0x0800c53a

08009e8c <__hi0bits>:
 8009e8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009e90:	4603      	mov	r3, r0
 8009e92:	bf36      	itet	cc
 8009e94:	0403      	lslcc	r3, r0, #16
 8009e96:	2000      	movcs	r0, #0
 8009e98:	2010      	movcc	r0, #16
 8009e9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e9e:	bf3c      	itt	cc
 8009ea0:	021b      	lslcc	r3, r3, #8
 8009ea2:	3008      	addcc	r0, #8
 8009ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ea8:	bf3c      	itt	cc
 8009eaa:	011b      	lslcc	r3, r3, #4
 8009eac:	3004      	addcc	r0, #4
 8009eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eb2:	bf3c      	itt	cc
 8009eb4:	009b      	lslcc	r3, r3, #2
 8009eb6:	3002      	addcc	r0, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	db05      	blt.n	8009ec8 <__hi0bits+0x3c>
 8009ebc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ec0:	f100 0001 	add.w	r0, r0, #1
 8009ec4:	bf08      	it	eq
 8009ec6:	2020      	moveq	r0, #32
 8009ec8:	4770      	bx	lr

08009eca <__lo0bits>:
 8009eca:	6803      	ldr	r3, [r0, #0]
 8009ecc:	4602      	mov	r2, r0
 8009ece:	f013 0007 	ands.w	r0, r3, #7
 8009ed2:	d00b      	beq.n	8009eec <__lo0bits+0x22>
 8009ed4:	07d9      	lsls	r1, r3, #31
 8009ed6:	d421      	bmi.n	8009f1c <__lo0bits+0x52>
 8009ed8:	0798      	lsls	r0, r3, #30
 8009eda:	bf49      	itett	mi
 8009edc:	085b      	lsrmi	r3, r3, #1
 8009ede:	089b      	lsrpl	r3, r3, #2
 8009ee0:	2001      	movmi	r0, #1
 8009ee2:	6013      	strmi	r3, [r2, #0]
 8009ee4:	bf5c      	itt	pl
 8009ee6:	6013      	strpl	r3, [r2, #0]
 8009ee8:	2002      	movpl	r0, #2
 8009eea:	4770      	bx	lr
 8009eec:	b299      	uxth	r1, r3
 8009eee:	b909      	cbnz	r1, 8009ef4 <__lo0bits+0x2a>
 8009ef0:	0c1b      	lsrs	r3, r3, #16
 8009ef2:	2010      	movs	r0, #16
 8009ef4:	b2d9      	uxtb	r1, r3
 8009ef6:	b909      	cbnz	r1, 8009efc <__lo0bits+0x32>
 8009ef8:	3008      	adds	r0, #8
 8009efa:	0a1b      	lsrs	r3, r3, #8
 8009efc:	0719      	lsls	r1, r3, #28
 8009efe:	bf04      	itt	eq
 8009f00:	091b      	lsreq	r3, r3, #4
 8009f02:	3004      	addeq	r0, #4
 8009f04:	0799      	lsls	r1, r3, #30
 8009f06:	bf04      	itt	eq
 8009f08:	089b      	lsreq	r3, r3, #2
 8009f0a:	3002      	addeq	r0, #2
 8009f0c:	07d9      	lsls	r1, r3, #31
 8009f0e:	d403      	bmi.n	8009f18 <__lo0bits+0x4e>
 8009f10:	085b      	lsrs	r3, r3, #1
 8009f12:	f100 0001 	add.w	r0, r0, #1
 8009f16:	d003      	beq.n	8009f20 <__lo0bits+0x56>
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	4770      	bx	lr
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	4770      	bx	lr
 8009f20:	2020      	movs	r0, #32
 8009f22:	4770      	bx	lr

08009f24 <__i2b>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	460c      	mov	r4, r1
 8009f28:	2101      	movs	r1, #1
 8009f2a:	f7ff febd 	bl	8009ca8 <_Balloc>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	b928      	cbnz	r0, 8009f3e <__i2b+0x1a>
 8009f32:	4b05      	ldr	r3, [pc, #20]	@ (8009f48 <__i2b+0x24>)
 8009f34:	4805      	ldr	r0, [pc, #20]	@ (8009f4c <__i2b+0x28>)
 8009f36:	f240 1145 	movw	r1, #325	@ 0x145
 8009f3a:	f001 fdf1 	bl	800bb20 <__assert_func>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	6144      	str	r4, [r0, #20]
 8009f42:	6103      	str	r3, [r0, #16]
 8009f44:	bd10      	pop	{r4, pc}
 8009f46:	bf00      	nop
 8009f48:	0800c529 	.word	0x0800c529
 8009f4c:	0800c53a 	.word	0x0800c53a

08009f50 <__multiply>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	4617      	mov	r7, r2
 8009f56:	690a      	ldr	r2, [r1, #16]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	bfa8      	it	ge
 8009f5e:	463b      	movge	r3, r7
 8009f60:	4689      	mov	r9, r1
 8009f62:	bfa4      	itt	ge
 8009f64:	460f      	movge	r7, r1
 8009f66:	4699      	movge	r9, r3
 8009f68:	693d      	ldr	r5, [r7, #16]
 8009f6a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	eb05 060a 	add.w	r6, r5, sl
 8009f76:	42b3      	cmp	r3, r6
 8009f78:	b085      	sub	sp, #20
 8009f7a:	bfb8      	it	lt
 8009f7c:	3101      	addlt	r1, #1
 8009f7e:	f7ff fe93 	bl	8009ca8 <_Balloc>
 8009f82:	b930      	cbnz	r0, 8009f92 <__multiply+0x42>
 8009f84:	4602      	mov	r2, r0
 8009f86:	4b41      	ldr	r3, [pc, #260]	@ (800a08c <__multiply+0x13c>)
 8009f88:	4841      	ldr	r0, [pc, #260]	@ (800a090 <__multiply+0x140>)
 8009f8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009f8e:	f001 fdc7 	bl	800bb20 <__assert_func>
 8009f92:	f100 0414 	add.w	r4, r0, #20
 8009f96:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009f9a:	4623      	mov	r3, r4
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4573      	cmp	r3, lr
 8009fa0:	d320      	bcc.n	8009fe4 <__multiply+0x94>
 8009fa2:	f107 0814 	add.w	r8, r7, #20
 8009fa6:	f109 0114 	add.w	r1, r9, #20
 8009faa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009fae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009fb2:	9302      	str	r3, [sp, #8]
 8009fb4:	1beb      	subs	r3, r5, r7
 8009fb6:	3b15      	subs	r3, #21
 8009fb8:	f023 0303 	bic.w	r3, r3, #3
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	3715      	adds	r7, #21
 8009fc0:	42bd      	cmp	r5, r7
 8009fc2:	bf38      	it	cc
 8009fc4:	2304      	movcc	r3, #4
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	9103      	str	r1, [sp, #12]
 8009fcc:	428b      	cmp	r3, r1
 8009fce:	d80c      	bhi.n	8009fea <__multiply+0x9a>
 8009fd0:	2e00      	cmp	r6, #0
 8009fd2:	dd03      	ble.n	8009fdc <__multiply+0x8c>
 8009fd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d055      	beq.n	800a088 <__multiply+0x138>
 8009fdc:	6106      	str	r6, [r0, #16]
 8009fde:	b005      	add	sp, #20
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	f843 2b04 	str.w	r2, [r3], #4
 8009fe8:	e7d9      	b.n	8009f9e <__multiply+0x4e>
 8009fea:	f8b1 a000 	ldrh.w	sl, [r1]
 8009fee:	f1ba 0f00 	cmp.w	sl, #0
 8009ff2:	d01f      	beq.n	800a034 <__multiply+0xe4>
 8009ff4:	46c4      	mov	ip, r8
 8009ff6:	46a1      	mov	r9, r4
 8009ff8:	2700      	movs	r7, #0
 8009ffa:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ffe:	f8d9 3000 	ldr.w	r3, [r9]
 800a002:	fa1f fb82 	uxth.w	fp, r2
 800a006:	b29b      	uxth	r3, r3
 800a008:	fb0a 330b 	mla	r3, sl, fp, r3
 800a00c:	443b      	add	r3, r7
 800a00e:	f8d9 7000 	ldr.w	r7, [r9]
 800a012:	0c12      	lsrs	r2, r2, #16
 800a014:	0c3f      	lsrs	r7, r7, #16
 800a016:	fb0a 7202 	mla	r2, sl, r2, r7
 800a01a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a01e:	b29b      	uxth	r3, r3
 800a020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a024:	4565      	cmp	r5, ip
 800a026:	f849 3b04 	str.w	r3, [r9], #4
 800a02a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a02e:	d8e4      	bhi.n	8009ffa <__multiply+0xaa>
 800a030:	9b01      	ldr	r3, [sp, #4]
 800a032:	50e7      	str	r7, [r4, r3]
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a03a:	3104      	adds	r1, #4
 800a03c:	f1b9 0f00 	cmp.w	r9, #0
 800a040:	d020      	beq.n	800a084 <__multiply+0x134>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	4647      	mov	r7, r8
 800a046:	46a4      	mov	ip, r4
 800a048:	f04f 0a00 	mov.w	sl, #0
 800a04c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a050:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a054:	fb09 220b 	mla	r2, r9, fp, r2
 800a058:	4452      	add	r2, sl
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a060:	f84c 3b04 	str.w	r3, [ip], #4
 800a064:	f857 3b04 	ldr.w	r3, [r7], #4
 800a068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a06c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a070:	fb09 330a 	mla	r3, r9, sl, r3
 800a074:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a078:	42bd      	cmp	r5, r7
 800a07a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a07e:	d8e5      	bhi.n	800a04c <__multiply+0xfc>
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	50a3      	str	r3, [r4, r2]
 800a084:	3404      	adds	r4, #4
 800a086:	e79f      	b.n	8009fc8 <__multiply+0x78>
 800a088:	3e01      	subs	r6, #1
 800a08a:	e7a1      	b.n	8009fd0 <__multiply+0x80>
 800a08c:	0800c529 	.word	0x0800c529
 800a090:	0800c53a 	.word	0x0800c53a

0800a094 <__pow5mult>:
 800a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a098:	4615      	mov	r5, r2
 800a09a:	f012 0203 	ands.w	r2, r2, #3
 800a09e:	4607      	mov	r7, r0
 800a0a0:	460e      	mov	r6, r1
 800a0a2:	d007      	beq.n	800a0b4 <__pow5mult+0x20>
 800a0a4:	4c25      	ldr	r4, [pc, #148]	@ (800a13c <__pow5mult+0xa8>)
 800a0a6:	3a01      	subs	r2, #1
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0ae:	f7ff fe5d 	bl	8009d6c <__multadd>
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	10ad      	asrs	r5, r5, #2
 800a0b6:	d03d      	beq.n	800a134 <__pow5mult+0xa0>
 800a0b8:	69fc      	ldr	r4, [r7, #28]
 800a0ba:	b97c      	cbnz	r4, 800a0dc <__pow5mult+0x48>
 800a0bc:	2010      	movs	r0, #16
 800a0be:	f7ff fd3d 	bl	8009b3c <malloc>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	61f8      	str	r0, [r7, #28]
 800a0c6:	b928      	cbnz	r0, 800a0d4 <__pow5mult+0x40>
 800a0c8:	4b1d      	ldr	r3, [pc, #116]	@ (800a140 <__pow5mult+0xac>)
 800a0ca:	481e      	ldr	r0, [pc, #120]	@ (800a144 <__pow5mult+0xb0>)
 800a0cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a0d0:	f001 fd26 	bl	800bb20 <__assert_func>
 800a0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0d8:	6004      	str	r4, [r0, #0]
 800a0da:	60c4      	str	r4, [r0, #12]
 800a0dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0e4:	b94c      	cbnz	r4, 800a0fa <__pow5mult+0x66>
 800a0e6:	f240 2171 	movw	r1, #625	@ 0x271
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	f7ff ff1a 	bl	8009f24 <__i2b>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	f04f 0900 	mov.w	r9, #0
 800a0fe:	07eb      	lsls	r3, r5, #31
 800a100:	d50a      	bpl.n	800a118 <__pow5mult+0x84>
 800a102:	4631      	mov	r1, r6
 800a104:	4622      	mov	r2, r4
 800a106:	4638      	mov	r0, r7
 800a108:	f7ff ff22 	bl	8009f50 <__multiply>
 800a10c:	4631      	mov	r1, r6
 800a10e:	4680      	mov	r8, r0
 800a110:	4638      	mov	r0, r7
 800a112:	f7ff fe09 	bl	8009d28 <_Bfree>
 800a116:	4646      	mov	r6, r8
 800a118:	106d      	asrs	r5, r5, #1
 800a11a:	d00b      	beq.n	800a134 <__pow5mult+0xa0>
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	b938      	cbnz	r0, 800a130 <__pow5mult+0x9c>
 800a120:	4622      	mov	r2, r4
 800a122:	4621      	mov	r1, r4
 800a124:	4638      	mov	r0, r7
 800a126:	f7ff ff13 	bl	8009f50 <__multiply>
 800a12a:	6020      	str	r0, [r4, #0]
 800a12c:	f8c0 9000 	str.w	r9, [r0]
 800a130:	4604      	mov	r4, r0
 800a132:	e7e4      	b.n	800a0fe <__pow5mult+0x6a>
 800a134:	4630      	mov	r0, r6
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	bf00      	nop
 800a13c:	0800c64c 	.word	0x0800c64c
 800a140:	0800c4ba 	.word	0x0800c4ba
 800a144:	0800c53a 	.word	0x0800c53a

0800a148 <__lshift>:
 800a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	460c      	mov	r4, r1
 800a14e:	6849      	ldr	r1, [r1, #4]
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	4607      	mov	r7, r0
 800a15a:	4691      	mov	r9, r2
 800a15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a160:	f108 0601 	add.w	r6, r8, #1
 800a164:	42b3      	cmp	r3, r6
 800a166:	db0b      	blt.n	800a180 <__lshift+0x38>
 800a168:	4638      	mov	r0, r7
 800a16a:	f7ff fd9d 	bl	8009ca8 <_Balloc>
 800a16e:	4605      	mov	r5, r0
 800a170:	b948      	cbnz	r0, 800a186 <__lshift+0x3e>
 800a172:	4602      	mov	r2, r0
 800a174:	4b28      	ldr	r3, [pc, #160]	@ (800a218 <__lshift+0xd0>)
 800a176:	4829      	ldr	r0, [pc, #164]	@ (800a21c <__lshift+0xd4>)
 800a178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a17c:	f001 fcd0 	bl	800bb20 <__assert_func>
 800a180:	3101      	adds	r1, #1
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	e7ee      	b.n	800a164 <__lshift+0x1c>
 800a186:	2300      	movs	r3, #0
 800a188:	f100 0114 	add.w	r1, r0, #20
 800a18c:	f100 0210 	add.w	r2, r0, #16
 800a190:	4618      	mov	r0, r3
 800a192:	4553      	cmp	r3, sl
 800a194:	db33      	blt.n	800a1fe <__lshift+0xb6>
 800a196:	6920      	ldr	r0, [r4, #16]
 800a198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a19c:	f104 0314 	add.w	r3, r4, #20
 800a1a0:	f019 091f 	ands.w	r9, r9, #31
 800a1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1ac:	d02b      	beq.n	800a206 <__lshift+0xbe>
 800a1ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a1b2:	468a      	mov	sl, r1
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	6818      	ldr	r0, [r3, #0]
 800a1b8:	fa00 f009 	lsl.w	r0, r0, r9
 800a1bc:	4310      	orrs	r0, r2
 800a1be:	f84a 0b04 	str.w	r0, [sl], #4
 800a1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c6:	459c      	cmp	ip, r3
 800a1c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1cc:	d8f3      	bhi.n	800a1b6 <__lshift+0x6e>
 800a1ce:	ebac 0304 	sub.w	r3, ip, r4
 800a1d2:	3b15      	subs	r3, #21
 800a1d4:	f023 0303 	bic.w	r3, r3, #3
 800a1d8:	3304      	adds	r3, #4
 800a1da:	f104 0015 	add.w	r0, r4, #21
 800a1de:	4560      	cmp	r0, ip
 800a1e0:	bf88      	it	hi
 800a1e2:	2304      	movhi	r3, #4
 800a1e4:	50ca      	str	r2, [r1, r3]
 800a1e6:	b10a      	cbz	r2, 800a1ec <__lshift+0xa4>
 800a1e8:	f108 0602 	add.w	r6, r8, #2
 800a1ec:	3e01      	subs	r6, #1
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	612e      	str	r6, [r5, #16]
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	f7ff fd98 	bl	8009d28 <_Bfree>
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800a202:	3301      	adds	r3, #1
 800a204:	e7c5      	b.n	800a192 <__lshift+0x4a>
 800a206:	3904      	subs	r1, #4
 800a208:	f853 2b04 	ldr.w	r2, [r3], #4
 800a20c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a210:	459c      	cmp	ip, r3
 800a212:	d8f9      	bhi.n	800a208 <__lshift+0xc0>
 800a214:	e7ea      	b.n	800a1ec <__lshift+0xa4>
 800a216:	bf00      	nop
 800a218:	0800c529 	.word	0x0800c529
 800a21c:	0800c53a 	.word	0x0800c53a

0800a220 <__mcmp>:
 800a220:	690a      	ldr	r2, [r1, #16]
 800a222:	4603      	mov	r3, r0
 800a224:	6900      	ldr	r0, [r0, #16]
 800a226:	1a80      	subs	r0, r0, r2
 800a228:	b530      	push	{r4, r5, lr}
 800a22a:	d10e      	bne.n	800a24a <__mcmp+0x2a>
 800a22c:	3314      	adds	r3, #20
 800a22e:	3114      	adds	r1, #20
 800a230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a23c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a240:	4295      	cmp	r5, r2
 800a242:	d003      	beq.n	800a24c <__mcmp+0x2c>
 800a244:	d205      	bcs.n	800a252 <__mcmp+0x32>
 800a246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a24a:	bd30      	pop	{r4, r5, pc}
 800a24c:	42a3      	cmp	r3, r4
 800a24e:	d3f3      	bcc.n	800a238 <__mcmp+0x18>
 800a250:	e7fb      	b.n	800a24a <__mcmp+0x2a>
 800a252:	2001      	movs	r0, #1
 800a254:	e7f9      	b.n	800a24a <__mcmp+0x2a>
	...

0800a258 <__mdiff>:
 800a258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	4689      	mov	r9, r1
 800a25e:	4606      	mov	r6, r0
 800a260:	4611      	mov	r1, r2
 800a262:	4648      	mov	r0, r9
 800a264:	4614      	mov	r4, r2
 800a266:	f7ff ffdb 	bl	800a220 <__mcmp>
 800a26a:	1e05      	subs	r5, r0, #0
 800a26c:	d112      	bne.n	800a294 <__mdiff+0x3c>
 800a26e:	4629      	mov	r1, r5
 800a270:	4630      	mov	r0, r6
 800a272:	f7ff fd19 	bl	8009ca8 <_Balloc>
 800a276:	4602      	mov	r2, r0
 800a278:	b928      	cbnz	r0, 800a286 <__mdiff+0x2e>
 800a27a:	4b3f      	ldr	r3, [pc, #252]	@ (800a378 <__mdiff+0x120>)
 800a27c:	f240 2137 	movw	r1, #567	@ 0x237
 800a280:	483e      	ldr	r0, [pc, #248]	@ (800a37c <__mdiff+0x124>)
 800a282:	f001 fc4d 	bl	800bb20 <__assert_func>
 800a286:	2301      	movs	r3, #1
 800a288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a28c:	4610      	mov	r0, r2
 800a28e:	b003      	add	sp, #12
 800a290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a294:	bfbc      	itt	lt
 800a296:	464b      	movlt	r3, r9
 800a298:	46a1      	movlt	r9, r4
 800a29a:	4630      	mov	r0, r6
 800a29c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a2a0:	bfba      	itte	lt
 800a2a2:	461c      	movlt	r4, r3
 800a2a4:	2501      	movlt	r5, #1
 800a2a6:	2500      	movge	r5, #0
 800a2a8:	f7ff fcfe 	bl	8009ca8 <_Balloc>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	b918      	cbnz	r0, 800a2b8 <__mdiff+0x60>
 800a2b0:	4b31      	ldr	r3, [pc, #196]	@ (800a378 <__mdiff+0x120>)
 800a2b2:	f240 2145 	movw	r1, #581	@ 0x245
 800a2b6:	e7e3      	b.n	800a280 <__mdiff+0x28>
 800a2b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a2bc:	6926      	ldr	r6, [r4, #16]
 800a2be:	60c5      	str	r5, [r0, #12]
 800a2c0:	f109 0310 	add.w	r3, r9, #16
 800a2c4:	f109 0514 	add.w	r5, r9, #20
 800a2c8:	f104 0e14 	add.w	lr, r4, #20
 800a2cc:	f100 0b14 	add.w	fp, r0, #20
 800a2d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a2d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	46d9      	mov	r9, fp
 800a2dc:	f04f 0c00 	mov.w	ip, #0
 800a2e0:	9b01      	ldr	r3, [sp, #4]
 800a2e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a2e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	fa1f f38a 	uxth.w	r3, sl
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	b283      	uxth	r3, r0
 800a2f4:	1acb      	subs	r3, r1, r3
 800a2f6:	0c00      	lsrs	r0, r0, #16
 800a2f8:	4463      	add	r3, ip
 800a2fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a2fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a302:	b29b      	uxth	r3, r3
 800a304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a308:	4576      	cmp	r6, lr
 800a30a:	f849 3b04 	str.w	r3, [r9], #4
 800a30e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a312:	d8e5      	bhi.n	800a2e0 <__mdiff+0x88>
 800a314:	1b33      	subs	r3, r6, r4
 800a316:	3b15      	subs	r3, #21
 800a318:	f023 0303 	bic.w	r3, r3, #3
 800a31c:	3415      	adds	r4, #21
 800a31e:	3304      	adds	r3, #4
 800a320:	42a6      	cmp	r6, r4
 800a322:	bf38      	it	cc
 800a324:	2304      	movcc	r3, #4
 800a326:	441d      	add	r5, r3
 800a328:	445b      	add	r3, fp
 800a32a:	461e      	mov	r6, r3
 800a32c:	462c      	mov	r4, r5
 800a32e:	4544      	cmp	r4, r8
 800a330:	d30e      	bcc.n	800a350 <__mdiff+0xf8>
 800a332:	f108 0103 	add.w	r1, r8, #3
 800a336:	1b49      	subs	r1, r1, r5
 800a338:	f021 0103 	bic.w	r1, r1, #3
 800a33c:	3d03      	subs	r5, #3
 800a33e:	45a8      	cmp	r8, r5
 800a340:	bf38      	it	cc
 800a342:	2100      	movcc	r1, #0
 800a344:	440b      	add	r3, r1
 800a346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a34a:	b191      	cbz	r1, 800a372 <__mdiff+0x11a>
 800a34c:	6117      	str	r7, [r2, #16]
 800a34e:	e79d      	b.n	800a28c <__mdiff+0x34>
 800a350:	f854 1b04 	ldr.w	r1, [r4], #4
 800a354:	46e6      	mov	lr, ip
 800a356:	0c08      	lsrs	r0, r1, #16
 800a358:	fa1c fc81 	uxtah	ip, ip, r1
 800a35c:	4471      	add	r1, lr
 800a35e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a362:	b289      	uxth	r1, r1
 800a364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a368:	f846 1b04 	str.w	r1, [r6], #4
 800a36c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a370:	e7dd      	b.n	800a32e <__mdiff+0xd6>
 800a372:	3f01      	subs	r7, #1
 800a374:	e7e7      	b.n	800a346 <__mdiff+0xee>
 800a376:	bf00      	nop
 800a378:	0800c529 	.word	0x0800c529
 800a37c:	0800c53a 	.word	0x0800c53a

0800a380 <__ulp>:
 800a380:	b082      	sub	sp, #8
 800a382:	ed8d 0b00 	vstr	d0, [sp]
 800a386:	9a01      	ldr	r2, [sp, #4]
 800a388:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c8 <__ulp+0x48>)
 800a38a:	4013      	ands	r3, r2
 800a38c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a390:	2b00      	cmp	r3, #0
 800a392:	dc08      	bgt.n	800a3a6 <__ulp+0x26>
 800a394:	425b      	negs	r3, r3
 800a396:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a39a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a39e:	da04      	bge.n	800a3aa <__ulp+0x2a>
 800a3a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a3a4:	4113      	asrs	r3, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	e008      	b.n	800a3bc <__ulp+0x3c>
 800a3aa:	f1a2 0314 	sub.w	r3, r2, #20
 800a3ae:	2b1e      	cmp	r3, #30
 800a3b0:	bfda      	itte	le
 800a3b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a3b6:	40da      	lsrle	r2, r3
 800a3b8:	2201      	movgt	r2, #1
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	ec41 0b10 	vmov	d0, r0, r1
 800a3c4:	b002      	add	sp, #8
 800a3c6:	4770      	bx	lr
 800a3c8:	7ff00000 	.word	0x7ff00000

0800a3cc <__b2d>:
 800a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d0:	6906      	ldr	r6, [r0, #16]
 800a3d2:	f100 0814 	add.w	r8, r0, #20
 800a3d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a3da:	1f37      	subs	r7, r6, #4
 800a3dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	f7ff fd53 	bl	8009e8c <__hi0bits>
 800a3e6:	f1c0 0320 	rsb	r3, r0, #32
 800a3ea:	280a      	cmp	r0, #10
 800a3ec:	600b      	str	r3, [r1, #0]
 800a3ee:	491b      	ldr	r1, [pc, #108]	@ (800a45c <__b2d+0x90>)
 800a3f0:	dc15      	bgt.n	800a41e <__b2d+0x52>
 800a3f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a3f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a3fa:	45b8      	cmp	r8, r7
 800a3fc:	ea43 0501 	orr.w	r5, r3, r1
 800a400:	bf34      	ite	cc
 800a402:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a406:	2300      	movcs	r3, #0
 800a408:	3015      	adds	r0, #21
 800a40a:	fa02 f000 	lsl.w	r0, r2, r0
 800a40e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a412:	4303      	orrs	r3, r0
 800a414:	461c      	mov	r4, r3
 800a416:	ec45 4b10 	vmov	d0, r4, r5
 800a41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41e:	45b8      	cmp	r8, r7
 800a420:	bf3a      	itte	cc
 800a422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a426:	f1a6 0708 	subcc.w	r7, r6, #8
 800a42a:	2300      	movcs	r3, #0
 800a42c:	380b      	subs	r0, #11
 800a42e:	d012      	beq.n	800a456 <__b2d+0x8a>
 800a430:	f1c0 0120 	rsb	r1, r0, #32
 800a434:	fa23 f401 	lsr.w	r4, r3, r1
 800a438:	4082      	lsls	r2, r0
 800a43a:	4322      	orrs	r2, r4
 800a43c:	4547      	cmp	r7, r8
 800a43e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a442:	bf8c      	ite	hi
 800a444:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a448:	2200      	movls	r2, #0
 800a44a:	4083      	lsls	r3, r0
 800a44c:	40ca      	lsrs	r2, r1
 800a44e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a452:	4313      	orrs	r3, r2
 800a454:	e7de      	b.n	800a414 <__b2d+0x48>
 800a456:	ea42 0501 	orr.w	r5, r2, r1
 800a45a:	e7db      	b.n	800a414 <__b2d+0x48>
 800a45c:	3ff00000 	.word	0x3ff00000

0800a460 <__d2b>:
 800a460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a464:	460f      	mov	r7, r1
 800a466:	2101      	movs	r1, #1
 800a468:	ec59 8b10 	vmov	r8, r9, d0
 800a46c:	4616      	mov	r6, r2
 800a46e:	f7ff fc1b 	bl	8009ca8 <_Balloc>
 800a472:	4604      	mov	r4, r0
 800a474:	b930      	cbnz	r0, 800a484 <__d2b+0x24>
 800a476:	4602      	mov	r2, r0
 800a478:	4b23      	ldr	r3, [pc, #140]	@ (800a508 <__d2b+0xa8>)
 800a47a:	4824      	ldr	r0, [pc, #144]	@ (800a50c <__d2b+0xac>)
 800a47c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a480:	f001 fb4e 	bl	800bb20 <__assert_func>
 800a484:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a48c:	b10d      	cbz	r5, 800a492 <__d2b+0x32>
 800a48e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a492:	9301      	str	r3, [sp, #4]
 800a494:	f1b8 0300 	subs.w	r3, r8, #0
 800a498:	d023      	beq.n	800a4e2 <__d2b+0x82>
 800a49a:	4668      	mov	r0, sp
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	f7ff fd14 	bl	8009eca <__lo0bits>
 800a4a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4a6:	b1d0      	cbz	r0, 800a4de <__d2b+0x7e>
 800a4a8:	f1c0 0320 	rsb	r3, r0, #32
 800a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	40c2      	lsrs	r2, r0
 800a4b4:	6163      	str	r3, [r4, #20]
 800a4b6:	9201      	str	r2, [sp, #4]
 800a4b8:	9b01      	ldr	r3, [sp, #4]
 800a4ba:	61a3      	str	r3, [r4, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bf0c      	ite	eq
 800a4c0:	2201      	moveq	r2, #1
 800a4c2:	2202      	movne	r2, #2
 800a4c4:	6122      	str	r2, [r4, #16]
 800a4c6:	b1a5      	cbz	r5, 800a4f2 <__d2b+0x92>
 800a4c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a4cc:	4405      	add	r5, r0
 800a4ce:	603d      	str	r5, [r7, #0]
 800a4d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a4d4:	6030      	str	r0, [r6, #0]
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	b003      	add	sp, #12
 800a4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4de:	6161      	str	r1, [r4, #20]
 800a4e0:	e7ea      	b.n	800a4b8 <__d2b+0x58>
 800a4e2:	a801      	add	r0, sp, #4
 800a4e4:	f7ff fcf1 	bl	8009eca <__lo0bits>
 800a4e8:	9b01      	ldr	r3, [sp, #4]
 800a4ea:	6163      	str	r3, [r4, #20]
 800a4ec:	3020      	adds	r0, #32
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	e7e8      	b.n	800a4c4 <__d2b+0x64>
 800a4f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4fa:	6038      	str	r0, [r7, #0]
 800a4fc:	6918      	ldr	r0, [r3, #16]
 800a4fe:	f7ff fcc5 	bl	8009e8c <__hi0bits>
 800a502:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a506:	e7e5      	b.n	800a4d4 <__d2b+0x74>
 800a508:	0800c529 	.word	0x0800c529
 800a50c:	0800c53a 	.word	0x0800c53a

0800a510 <__ratio>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	b085      	sub	sp, #20
 800a516:	e9cd 1000 	strd	r1, r0, [sp]
 800a51a:	a902      	add	r1, sp, #8
 800a51c:	f7ff ff56 	bl	800a3cc <__b2d>
 800a520:	9800      	ldr	r0, [sp, #0]
 800a522:	a903      	add	r1, sp, #12
 800a524:	ec55 4b10 	vmov	r4, r5, d0
 800a528:	f7ff ff50 	bl	800a3cc <__b2d>
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	6919      	ldr	r1, [r3, #16]
 800a530:	9b00      	ldr	r3, [sp, #0]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	1ac9      	subs	r1, r1, r3
 800a536:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	ec5b ab10 	vmov	sl, fp, d0
 800a540:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a544:	2b00      	cmp	r3, #0
 800a546:	bfce      	itee	gt
 800a548:	462a      	movgt	r2, r5
 800a54a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a54e:	465a      	movle	r2, fp
 800a550:	462f      	mov	r7, r5
 800a552:	46d9      	mov	r9, fp
 800a554:	bfcc      	ite	gt
 800a556:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a55a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a55e:	464b      	mov	r3, r9
 800a560:	4652      	mov	r2, sl
 800a562:	4620      	mov	r0, r4
 800a564:	4639      	mov	r1, r7
 800a566:	f7f6 f999 	bl	800089c <__aeabi_ddiv>
 800a56a:	ec41 0b10 	vmov	d0, r0, r1
 800a56e:	b005      	add	sp, #20
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a574 <__copybits>:
 800a574:	3901      	subs	r1, #1
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	1149      	asrs	r1, r1, #5
 800a57a:	6914      	ldr	r4, [r2, #16]
 800a57c:	3101      	adds	r1, #1
 800a57e:	f102 0314 	add.w	r3, r2, #20
 800a582:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a586:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a58a:	1f05      	subs	r5, r0, #4
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	d30c      	bcc.n	800a5aa <__copybits+0x36>
 800a590:	1aa3      	subs	r3, r4, r2
 800a592:	3b11      	subs	r3, #17
 800a594:	f023 0303 	bic.w	r3, r3, #3
 800a598:	3211      	adds	r2, #17
 800a59a:	42a2      	cmp	r2, r4
 800a59c:	bf88      	it	hi
 800a59e:	2300      	movhi	r3, #0
 800a5a0:	4418      	add	r0, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4288      	cmp	r0, r1
 800a5a6:	d305      	bcc.n	800a5b4 <__copybits+0x40>
 800a5a8:	bd70      	pop	{r4, r5, r6, pc}
 800a5aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5b2:	e7eb      	b.n	800a58c <__copybits+0x18>
 800a5b4:	f840 3b04 	str.w	r3, [r0], #4
 800a5b8:	e7f4      	b.n	800a5a4 <__copybits+0x30>

0800a5ba <__any_on>:
 800a5ba:	f100 0214 	add.w	r2, r0, #20
 800a5be:	6900      	ldr	r0, [r0, #16]
 800a5c0:	114b      	asrs	r3, r1, #5
 800a5c2:	4298      	cmp	r0, r3
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	db11      	blt.n	800a5ec <__any_on+0x32>
 800a5c8:	dd0a      	ble.n	800a5e0 <__any_on+0x26>
 800a5ca:	f011 011f 	ands.w	r1, r1, #31
 800a5ce:	d007      	beq.n	800a5e0 <__any_on+0x26>
 800a5d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5d4:	fa24 f001 	lsr.w	r0, r4, r1
 800a5d8:	fa00 f101 	lsl.w	r1, r0, r1
 800a5dc:	428c      	cmp	r4, r1
 800a5de:	d10b      	bne.n	800a5f8 <__any_on+0x3e>
 800a5e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d803      	bhi.n	800a5f0 <__any_on+0x36>
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	bd10      	pop	{r4, pc}
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	e7f7      	b.n	800a5e0 <__any_on+0x26>
 800a5f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	d0f5      	beq.n	800a5e4 <__any_on+0x2a>
 800a5f8:	2001      	movs	r0, #1
 800a5fa:	e7f6      	b.n	800a5ea <__any_on+0x30>

0800a5fc <sulp>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4604      	mov	r4, r0
 800a600:	460d      	mov	r5, r1
 800a602:	ec45 4b10 	vmov	d0, r4, r5
 800a606:	4616      	mov	r6, r2
 800a608:	f7ff feba 	bl	800a380 <__ulp>
 800a60c:	ec51 0b10 	vmov	r0, r1, d0
 800a610:	b17e      	cbz	r6, 800a632 <sulp+0x36>
 800a612:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a616:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dd09      	ble.n	800a632 <sulp+0x36>
 800a61e:	051b      	lsls	r3, r3, #20
 800a620:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a624:	2400      	movs	r4, #0
 800a626:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a62a:	4622      	mov	r2, r4
 800a62c:	462b      	mov	r3, r5
 800a62e:	f7f6 f80b 	bl	8000648 <__aeabi_dmul>
 800a632:	ec41 0b10 	vmov	d0, r0, r1
 800a636:	bd70      	pop	{r4, r5, r6, pc}

0800a638 <_strtod_l>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	b09f      	sub	sp, #124	@ 0x7c
 800a63e:	460c      	mov	r4, r1
 800a640:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a642:	2200      	movs	r2, #0
 800a644:	921a      	str	r2, [sp, #104]	@ 0x68
 800a646:	9005      	str	r0, [sp, #20]
 800a648:	f04f 0a00 	mov.w	sl, #0
 800a64c:	f04f 0b00 	mov.w	fp, #0
 800a650:	460a      	mov	r2, r1
 800a652:	9219      	str	r2, [sp, #100]	@ 0x64
 800a654:	7811      	ldrb	r1, [r2, #0]
 800a656:	292b      	cmp	r1, #43	@ 0x2b
 800a658:	d04a      	beq.n	800a6f0 <_strtod_l+0xb8>
 800a65a:	d838      	bhi.n	800a6ce <_strtod_l+0x96>
 800a65c:	290d      	cmp	r1, #13
 800a65e:	d832      	bhi.n	800a6c6 <_strtod_l+0x8e>
 800a660:	2908      	cmp	r1, #8
 800a662:	d832      	bhi.n	800a6ca <_strtod_l+0x92>
 800a664:	2900      	cmp	r1, #0
 800a666:	d03b      	beq.n	800a6e0 <_strtod_l+0xa8>
 800a668:	2200      	movs	r2, #0
 800a66a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a66c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a66e:	782a      	ldrb	r2, [r5, #0]
 800a670:	2a30      	cmp	r2, #48	@ 0x30
 800a672:	f040 80b2 	bne.w	800a7da <_strtod_l+0x1a2>
 800a676:	786a      	ldrb	r2, [r5, #1]
 800a678:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a67c:	2a58      	cmp	r2, #88	@ 0x58
 800a67e:	d16e      	bne.n	800a75e <_strtod_l+0x126>
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	ab1a      	add	r3, sp, #104	@ 0x68
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4a8f      	ldr	r2, [pc, #572]	@ (800a8c8 <_strtod_l+0x290>)
 800a68c:	9805      	ldr	r0, [sp, #20]
 800a68e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a690:	a919      	add	r1, sp, #100	@ 0x64
 800a692:	f001 fadf 	bl	800bc54 <__gethex>
 800a696:	f010 060f 	ands.w	r6, r0, #15
 800a69a:	4604      	mov	r4, r0
 800a69c:	d005      	beq.n	800a6aa <_strtod_l+0x72>
 800a69e:	2e06      	cmp	r6, #6
 800a6a0:	d128      	bne.n	800a6f4 <_strtod_l+0xbc>
 800a6a2:	3501      	adds	r5, #1
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a6a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a6aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f040 858e 	bne.w	800b1ce <_strtod_l+0xb96>
 800a6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b4:	b1cb      	cbz	r3, 800a6ea <_strtod_l+0xb2>
 800a6b6:	4652      	mov	r2, sl
 800a6b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a6bc:	ec43 2b10 	vmov	d0, r2, r3
 800a6c0:	b01f      	add	sp, #124	@ 0x7c
 800a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c6:	2920      	cmp	r1, #32
 800a6c8:	d1ce      	bne.n	800a668 <_strtod_l+0x30>
 800a6ca:	3201      	adds	r2, #1
 800a6cc:	e7c1      	b.n	800a652 <_strtod_l+0x1a>
 800a6ce:	292d      	cmp	r1, #45	@ 0x2d
 800a6d0:	d1ca      	bne.n	800a668 <_strtod_l+0x30>
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	910e      	str	r1, [sp, #56]	@ 0x38
 800a6d6:	1c51      	adds	r1, r2, #1
 800a6d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6da:	7852      	ldrb	r2, [r2, #1]
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	d1c5      	bne.n	800a66c <_strtod_l+0x34>
 800a6e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 8570 	bne.w	800b1ca <_strtod_l+0xb92>
 800a6ea:	4652      	mov	r2, sl
 800a6ec:	465b      	mov	r3, fp
 800a6ee:	e7e5      	b.n	800a6bc <_strtod_l+0x84>
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	e7ef      	b.n	800a6d4 <_strtod_l+0x9c>
 800a6f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6f6:	b13a      	cbz	r2, 800a708 <_strtod_l+0xd0>
 800a6f8:	2135      	movs	r1, #53	@ 0x35
 800a6fa:	a81c      	add	r0, sp, #112	@ 0x70
 800a6fc:	f7ff ff3a 	bl	800a574 <__copybits>
 800a700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a702:	9805      	ldr	r0, [sp, #20]
 800a704:	f7ff fb10 	bl	8009d28 <_Bfree>
 800a708:	3e01      	subs	r6, #1
 800a70a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a70c:	2e04      	cmp	r6, #4
 800a70e:	d806      	bhi.n	800a71e <_strtod_l+0xe6>
 800a710:	e8df f006 	tbb	[pc, r6]
 800a714:	201d0314 	.word	0x201d0314
 800a718:	14          	.byte	0x14
 800a719:	00          	.byte	0x00
 800a71a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a71e:	05e1      	lsls	r1, r4, #23
 800a720:	bf48      	it	mi
 800a722:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a726:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a72a:	0d1b      	lsrs	r3, r3, #20
 800a72c:	051b      	lsls	r3, r3, #20
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1bb      	bne.n	800a6aa <_strtod_l+0x72>
 800a732:	f7fe fb1f 	bl	8008d74 <__errno>
 800a736:	2322      	movs	r3, #34	@ 0x22
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	e7b6      	b.n	800a6aa <_strtod_l+0x72>
 800a73c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a740:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a744:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a748:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a74c:	e7e7      	b.n	800a71e <_strtod_l+0xe6>
 800a74e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a8d0 <_strtod_l+0x298>
 800a752:	e7e4      	b.n	800a71e <_strtod_l+0xe6>
 800a754:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a758:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a75c:	e7df      	b.n	800a71e <_strtod_l+0xe6>
 800a75e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	9219      	str	r2, [sp, #100]	@ 0x64
 800a764:	785b      	ldrb	r3, [r3, #1]
 800a766:	2b30      	cmp	r3, #48	@ 0x30
 800a768:	d0f9      	beq.n	800a75e <_strtod_l+0x126>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d09d      	beq.n	800a6aa <_strtod_l+0x72>
 800a76e:	2301      	movs	r3, #1
 800a770:	2700      	movs	r7, #0
 800a772:	9308      	str	r3, [sp, #32]
 800a774:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a776:	930c      	str	r3, [sp, #48]	@ 0x30
 800a778:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a77a:	46b9      	mov	r9, r7
 800a77c:	220a      	movs	r2, #10
 800a77e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a780:	7805      	ldrb	r5, [r0, #0]
 800a782:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a786:	b2d9      	uxtb	r1, r3
 800a788:	2909      	cmp	r1, #9
 800a78a:	d928      	bls.n	800a7de <_strtod_l+0x1a6>
 800a78c:	494f      	ldr	r1, [pc, #316]	@ (800a8cc <_strtod_l+0x294>)
 800a78e:	2201      	movs	r2, #1
 800a790:	f001 f97a 	bl	800ba88 <strncmp>
 800a794:	2800      	cmp	r0, #0
 800a796:	d032      	beq.n	800a7fe <_strtod_l+0x1c6>
 800a798:	2000      	movs	r0, #0
 800a79a:	462a      	mov	r2, r5
 800a79c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a79e:	464d      	mov	r5, r9
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2a65      	cmp	r2, #101	@ 0x65
 800a7a4:	d001      	beq.n	800a7aa <_strtod_l+0x172>
 800a7a6:	2a45      	cmp	r2, #69	@ 0x45
 800a7a8:	d114      	bne.n	800a7d4 <_strtod_l+0x19c>
 800a7aa:	b91d      	cbnz	r5, 800a7b4 <_strtod_l+0x17c>
 800a7ac:	9a08      	ldr	r2, [sp, #32]
 800a7ae:	4302      	orrs	r2, r0
 800a7b0:	d096      	beq.n	800a6e0 <_strtod_l+0xa8>
 800a7b2:	2500      	movs	r5, #0
 800a7b4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a7b6:	1c62      	adds	r2, r4, #1
 800a7b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7ba:	7862      	ldrb	r2, [r4, #1]
 800a7bc:	2a2b      	cmp	r2, #43	@ 0x2b
 800a7be:	d07a      	beq.n	800a8b6 <_strtod_l+0x27e>
 800a7c0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a7c2:	d07e      	beq.n	800a8c2 <_strtod_l+0x28a>
 800a7c4:	f04f 0c00 	mov.w	ip, #0
 800a7c8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a7cc:	2909      	cmp	r1, #9
 800a7ce:	f240 8085 	bls.w	800a8dc <_strtod_l+0x2a4>
 800a7d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a7d4:	f04f 0800 	mov.w	r8, #0
 800a7d8:	e0a5      	b.n	800a926 <_strtod_l+0x2ee>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e7c8      	b.n	800a770 <_strtod_l+0x138>
 800a7de:	f1b9 0f08 	cmp.w	r9, #8
 800a7e2:	bfd8      	it	le
 800a7e4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a7e6:	f100 0001 	add.w	r0, r0, #1
 800a7ea:	bfda      	itte	le
 800a7ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800a7f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a7f2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a7f6:	f109 0901 	add.w	r9, r9, #1
 800a7fa:	9019      	str	r0, [sp, #100]	@ 0x64
 800a7fc:	e7bf      	b.n	800a77e <_strtod_l+0x146>
 800a7fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	9219      	str	r2, [sp, #100]	@ 0x64
 800a804:	785a      	ldrb	r2, [r3, #1]
 800a806:	f1b9 0f00 	cmp.w	r9, #0
 800a80a:	d03b      	beq.n	800a884 <_strtod_l+0x24c>
 800a80c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a80e:	464d      	mov	r5, r9
 800a810:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a814:	2b09      	cmp	r3, #9
 800a816:	d912      	bls.n	800a83e <_strtod_l+0x206>
 800a818:	2301      	movs	r3, #1
 800a81a:	e7c2      	b.n	800a7a2 <_strtod_l+0x16a>
 800a81c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	9219      	str	r2, [sp, #100]	@ 0x64
 800a822:	785a      	ldrb	r2, [r3, #1]
 800a824:	3001      	adds	r0, #1
 800a826:	2a30      	cmp	r2, #48	@ 0x30
 800a828:	d0f8      	beq.n	800a81c <_strtod_l+0x1e4>
 800a82a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a82e:	2b08      	cmp	r3, #8
 800a830:	f200 84d2 	bhi.w	800b1d8 <_strtod_l+0xba0>
 800a834:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a836:	900a      	str	r0, [sp, #40]	@ 0x28
 800a838:	2000      	movs	r0, #0
 800a83a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a83c:	4605      	mov	r5, r0
 800a83e:	3a30      	subs	r2, #48	@ 0x30
 800a840:	f100 0301 	add.w	r3, r0, #1
 800a844:	d018      	beq.n	800a878 <_strtod_l+0x240>
 800a846:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a848:	4419      	add	r1, r3
 800a84a:	910a      	str	r1, [sp, #40]	@ 0x28
 800a84c:	462e      	mov	r6, r5
 800a84e:	f04f 0e0a 	mov.w	lr, #10
 800a852:	1c71      	adds	r1, r6, #1
 800a854:	eba1 0c05 	sub.w	ip, r1, r5
 800a858:	4563      	cmp	r3, ip
 800a85a:	dc15      	bgt.n	800a888 <_strtod_l+0x250>
 800a85c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a860:	182b      	adds	r3, r5, r0
 800a862:	2b08      	cmp	r3, #8
 800a864:	f105 0501 	add.w	r5, r5, #1
 800a868:	4405      	add	r5, r0
 800a86a:	dc1a      	bgt.n	800a8a2 <_strtod_l+0x26a>
 800a86c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a86e:	230a      	movs	r3, #10
 800a870:	fb03 2301 	mla	r3, r3, r1, r2
 800a874:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a876:	2300      	movs	r3, #0
 800a878:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a87a:	1c51      	adds	r1, r2, #1
 800a87c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a87e:	7852      	ldrb	r2, [r2, #1]
 800a880:	4618      	mov	r0, r3
 800a882:	e7c5      	b.n	800a810 <_strtod_l+0x1d8>
 800a884:	4648      	mov	r0, r9
 800a886:	e7ce      	b.n	800a826 <_strtod_l+0x1ee>
 800a888:	2e08      	cmp	r6, #8
 800a88a:	dc05      	bgt.n	800a898 <_strtod_l+0x260>
 800a88c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a88e:	fb0e f606 	mul.w	r6, lr, r6
 800a892:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a894:	460e      	mov	r6, r1
 800a896:	e7dc      	b.n	800a852 <_strtod_l+0x21a>
 800a898:	2910      	cmp	r1, #16
 800a89a:	bfd8      	it	le
 800a89c:	fb0e f707 	mulle.w	r7, lr, r7
 800a8a0:	e7f8      	b.n	800a894 <_strtod_l+0x25c>
 800a8a2:	2b0f      	cmp	r3, #15
 800a8a4:	bfdc      	itt	le
 800a8a6:	230a      	movle	r3, #10
 800a8a8:	fb03 2707 	mlale	r7, r3, r7, r2
 800a8ac:	e7e3      	b.n	800a876 <_strtod_l+0x23e>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e77a      	b.n	800a7ac <_strtod_l+0x174>
 800a8b6:	f04f 0c00 	mov.w	ip, #0
 800a8ba:	1ca2      	adds	r2, r4, #2
 800a8bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8be:	78a2      	ldrb	r2, [r4, #2]
 800a8c0:	e782      	b.n	800a7c8 <_strtod_l+0x190>
 800a8c2:	f04f 0c01 	mov.w	ip, #1
 800a8c6:	e7f8      	b.n	800a8ba <_strtod_l+0x282>
 800a8c8:	0800c75c 	.word	0x0800c75c
 800a8cc:	0800c593 	.word	0x0800c593
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8d6:	1c51      	adds	r1, r2, #1
 800a8d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8da:	7852      	ldrb	r2, [r2, #1]
 800a8dc:	2a30      	cmp	r2, #48	@ 0x30
 800a8de:	d0f9      	beq.n	800a8d4 <_strtod_l+0x29c>
 800a8e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a8e4:	2908      	cmp	r1, #8
 800a8e6:	f63f af75 	bhi.w	800a7d4 <_strtod_l+0x19c>
 800a8ea:	3a30      	subs	r2, #48	@ 0x30
 800a8ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a8f2:	f04f 080a 	mov.w	r8, #10
 800a8f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8f8:	1c56      	adds	r6, r2, #1
 800a8fa:	9619      	str	r6, [sp, #100]	@ 0x64
 800a8fc:	7852      	ldrb	r2, [r2, #1]
 800a8fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a902:	f1be 0f09 	cmp.w	lr, #9
 800a906:	d939      	bls.n	800a97c <_strtod_l+0x344>
 800a908:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a90a:	1a76      	subs	r6, r6, r1
 800a90c:	2e08      	cmp	r6, #8
 800a90e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a912:	dc03      	bgt.n	800a91c <_strtod_l+0x2e4>
 800a914:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a916:	4588      	cmp	r8, r1
 800a918:	bfa8      	it	ge
 800a91a:	4688      	movge	r8, r1
 800a91c:	f1bc 0f00 	cmp.w	ip, #0
 800a920:	d001      	beq.n	800a926 <_strtod_l+0x2ee>
 800a922:	f1c8 0800 	rsb	r8, r8, #0
 800a926:	2d00      	cmp	r5, #0
 800a928:	d14e      	bne.n	800a9c8 <_strtod_l+0x390>
 800a92a:	9908      	ldr	r1, [sp, #32]
 800a92c:	4308      	orrs	r0, r1
 800a92e:	f47f aebc 	bne.w	800a6aa <_strtod_l+0x72>
 800a932:	2b00      	cmp	r3, #0
 800a934:	f47f aed4 	bne.w	800a6e0 <_strtod_l+0xa8>
 800a938:	2a69      	cmp	r2, #105	@ 0x69
 800a93a:	d028      	beq.n	800a98e <_strtod_l+0x356>
 800a93c:	dc25      	bgt.n	800a98a <_strtod_l+0x352>
 800a93e:	2a49      	cmp	r2, #73	@ 0x49
 800a940:	d025      	beq.n	800a98e <_strtod_l+0x356>
 800a942:	2a4e      	cmp	r2, #78	@ 0x4e
 800a944:	f47f aecc 	bne.w	800a6e0 <_strtod_l+0xa8>
 800a948:	499a      	ldr	r1, [pc, #616]	@ (800abb4 <_strtod_l+0x57c>)
 800a94a:	a819      	add	r0, sp, #100	@ 0x64
 800a94c:	f001 fba4 	bl	800c098 <__match>
 800a950:	2800      	cmp	r0, #0
 800a952:	f43f aec5 	beq.w	800a6e0 <_strtod_l+0xa8>
 800a956:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b28      	cmp	r3, #40	@ 0x28
 800a95c:	d12e      	bne.n	800a9bc <_strtod_l+0x384>
 800a95e:	4996      	ldr	r1, [pc, #600]	@ (800abb8 <_strtod_l+0x580>)
 800a960:	aa1c      	add	r2, sp, #112	@ 0x70
 800a962:	a819      	add	r0, sp, #100	@ 0x64
 800a964:	f001 fbac 	bl	800c0c0 <__hexnan>
 800a968:	2805      	cmp	r0, #5
 800a96a:	d127      	bne.n	800a9bc <_strtod_l+0x384>
 800a96c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a96e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a972:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a976:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a97a:	e696      	b.n	800a6aa <_strtod_l+0x72>
 800a97c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a97e:	fb08 2101 	mla	r1, r8, r1, r2
 800a982:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a986:	9209      	str	r2, [sp, #36]	@ 0x24
 800a988:	e7b5      	b.n	800a8f6 <_strtod_l+0x2be>
 800a98a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a98c:	e7da      	b.n	800a944 <_strtod_l+0x30c>
 800a98e:	498b      	ldr	r1, [pc, #556]	@ (800abbc <_strtod_l+0x584>)
 800a990:	a819      	add	r0, sp, #100	@ 0x64
 800a992:	f001 fb81 	bl	800c098 <__match>
 800a996:	2800      	cmp	r0, #0
 800a998:	f43f aea2 	beq.w	800a6e0 <_strtod_l+0xa8>
 800a99c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a99e:	4988      	ldr	r1, [pc, #544]	@ (800abc0 <_strtod_l+0x588>)
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	a819      	add	r0, sp, #100	@ 0x64
 800a9a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9a6:	f001 fb77 	bl	800c098 <__match>
 800a9aa:	b910      	cbnz	r0, 800a9b2 <_strtod_l+0x37a>
 800a9ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800abd0 <_strtod_l+0x598>
 800a9b6:	f04f 0a00 	mov.w	sl, #0
 800a9ba:	e676      	b.n	800a6aa <_strtod_l+0x72>
 800a9bc:	4881      	ldr	r0, [pc, #516]	@ (800abc4 <_strtod_l+0x58c>)
 800a9be:	f001 f8a7 	bl	800bb10 <nan>
 800a9c2:	ec5b ab10 	vmov	sl, fp, d0
 800a9c6:	e670      	b.n	800a6aa <_strtod_l+0x72>
 800a9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a9cc:	eba8 0303 	sub.w	r3, r8, r3
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	bf08      	it	eq
 800a9d6:	46a9      	moveq	r9, r5
 800a9d8:	2d10      	cmp	r5, #16
 800a9da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9dc:	462c      	mov	r4, r5
 800a9de:	bfa8      	it	ge
 800a9e0:	2410      	movge	r4, #16
 800a9e2:	f7f5 fdb7 	bl	8000554 <__aeabi_ui2d>
 800a9e6:	2d09      	cmp	r5, #9
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	468b      	mov	fp, r1
 800a9ec:	dc13      	bgt.n	800aa16 <_strtod_l+0x3de>
 800a9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f43f ae5a 	beq.w	800a6aa <_strtod_l+0x72>
 800a9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f8:	dd78      	ble.n	800aaec <_strtod_l+0x4b4>
 800a9fa:	2b16      	cmp	r3, #22
 800a9fc:	dc5f      	bgt.n	800aabe <_strtod_l+0x486>
 800a9fe:	4972      	ldr	r1, [pc, #456]	@ (800abc8 <_strtod_l+0x590>)
 800aa00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa08:	4652      	mov	r2, sl
 800aa0a:	465b      	mov	r3, fp
 800aa0c:	f7f5 fe1c 	bl	8000648 <__aeabi_dmul>
 800aa10:	4682      	mov	sl, r0
 800aa12:	468b      	mov	fp, r1
 800aa14:	e649      	b.n	800a6aa <_strtod_l+0x72>
 800aa16:	4b6c      	ldr	r3, [pc, #432]	@ (800abc8 <_strtod_l+0x590>)
 800aa18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa20:	f7f5 fe12 	bl	8000648 <__aeabi_dmul>
 800aa24:	4682      	mov	sl, r0
 800aa26:	4638      	mov	r0, r7
 800aa28:	468b      	mov	fp, r1
 800aa2a:	f7f5 fd93 	bl	8000554 <__aeabi_ui2d>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	4650      	mov	r0, sl
 800aa34:	4659      	mov	r1, fp
 800aa36:	f7f5 fc51 	bl	80002dc <__adddf3>
 800aa3a:	2d0f      	cmp	r5, #15
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	468b      	mov	fp, r1
 800aa40:	ddd5      	ble.n	800a9ee <_strtod_l+0x3b6>
 800aa42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa44:	1b2c      	subs	r4, r5, r4
 800aa46:	441c      	add	r4, r3
 800aa48:	2c00      	cmp	r4, #0
 800aa4a:	f340 8093 	ble.w	800ab74 <_strtod_l+0x53c>
 800aa4e:	f014 030f 	ands.w	r3, r4, #15
 800aa52:	d00a      	beq.n	800aa6a <_strtod_l+0x432>
 800aa54:	495c      	ldr	r1, [pc, #368]	@ (800abc8 <_strtod_l+0x590>)
 800aa56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa5a:	4652      	mov	r2, sl
 800aa5c:	465b      	mov	r3, fp
 800aa5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa62:	f7f5 fdf1 	bl	8000648 <__aeabi_dmul>
 800aa66:	4682      	mov	sl, r0
 800aa68:	468b      	mov	fp, r1
 800aa6a:	f034 040f 	bics.w	r4, r4, #15
 800aa6e:	d073      	beq.n	800ab58 <_strtod_l+0x520>
 800aa70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aa74:	dd49      	ble.n	800ab0a <_strtod_l+0x4d2>
 800aa76:	2400      	movs	r4, #0
 800aa78:	46a0      	mov	r8, r4
 800aa7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa7c:	46a1      	mov	r9, r4
 800aa7e:	9a05      	ldr	r2, [sp, #20]
 800aa80:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800abd0 <_strtod_l+0x598>
 800aa84:	2322      	movs	r3, #34	@ 0x22
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	f04f 0a00 	mov.w	sl, #0
 800aa8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f43f ae0b 	beq.w	800a6aa <_strtod_l+0x72>
 800aa94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa96:	9805      	ldr	r0, [sp, #20]
 800aa98:	f7ff f946 	bl	8009d28 <_Bfree>
 800aa9c:	9805      	ldr	r0, [sp, #20]
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	f7ff f942 	bl	8009d28 <_Bfree>
 800aaa4:	9805      	ldr	r0, [sp, #20]
 800aaa6:	4641      	mov	r1, r8
 800aaa8:	f7ff f93e 	bl	8009d28 <_Bfree>
 800aaac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aaae:	9805      	ldr	r0, [sp, #20]
 800aab0:	f7ff f93a 	bl	8009d28 <_Bfree>
 800aab4:	9805      	ldr	r0, [sp, #20]
 800aab6:	4621      	mov	r1, r4
 800aab8:	f7ff f936 	bl	8009d28 <_Bfree>
 800aabc:	e5f5      	b.n	800a6aa <_strtod_l+0x72>
 800aabe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aac0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800aac4:	4293      	cmp	r3, r2
 800aac6:	dbbc      	blt.n	800aa42 <_strtod_l+0x40a>
 800aac8:	4c3f      	ldr	r4, [pc, #252]	@ (800abc8 <_strtod_l+0x590>)
 800aaca:	f1c5 050f 	rsb	r5, r5, #15
 800aace:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aad2:	4652      	mov	r2, sl
 800aad4:	465b      	mov	r3, fp
 800aad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aada:	f7f5 fdb5 	bl	8000648 <__aeabi_dmul>
 800aade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae0:	1b5d      	subs	r5, r3, r5
 800aae2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aae6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aaea:	e78f      	b.n	800aa0c <_strtod_l+0x3d4>
 800aaec:	3316      	adds	r3, #22
 800aaee:	dba8      	blt.n	800aa42 <_strtod_l+0x40a>
 800aaf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf2:	eba3 0808 	sub.w	r8, r3, r8
 800aaf6:	4b34      	ldr	r3, [pc, #208]	@ (800abc8 <_strtod_l+0x590>)
 800aaf8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aafc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab00:	4650      	mov	r0, sl
 800ab02:	4659      	mov	r1, fp
 800ab04:	f7f5 feca 	bl	800089c <__aeabi_ddiv>
 800ab08:	e782      	b.n	800aa10 <_strtod_l+0x3d8>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4f2f      	ldr	r7, [pc, #188]	@ (800abcc <_strtod_l+0x594>)
 800ab0e:	1124      	asrs	r4, r4, #4
 800ab10:	4650      	mov	r0, sl
 800ab12:	4659      	mov	r1, fp
 800ab14:	461e      	mov	r6, r3
 800ab16:	2c01      	cmp	r4, #1
 800ab18:	dc21      	bgt.n	800ab5e <_strtod_l+0x526>
 800ab1a:	b10b      	cbz	r3, 800ab20 <_strtod_l+0x4e8>
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	468b      	mov	fp, r1
 800ab20:	492a      	ldr	r1, [pc, #168]	@ (800abcc <_strtod_l+0x594>)
 800ab22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab32:	f7f5 fd89 	bl	8000648 <__aeabi_dmul>
 800ab36:	4b26      	ldr	r3, [pc, #152]	@ (800abd0 <_strtod_l+0x598>)
 800ab38:	460a      	mov	r2, r1
 800ab3a:	400b      	ands	r3, r1
 800ab3c:	4925      	ldr	r1, [pc, #148]	@ (800abd4 <_strtod_l+0x59c>)
 800ab3e:	428b      	cmp	r3, r1
 800ab40:	4682      	mov	sl, r0
 800ab42:	d898      	bhi.n	800aa76 <_strtod_l+0x43e>
 800ab44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab48:	428b      	cmp	r3, r1
 800ab4a:	bf86      	itte	hi
 800ab4c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800abd8 <_strtod_l+0x5a0>
 800ab50:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ab54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab58:	2300      	movs	r3, #0
 800ab5a:	9308      	str	r3, [sp, #32]
 800ab5c:	e076      	b.n	800ac4c <_strtod_l+0x614>
 800ab5e:	07e2      	lsls	r2, r4, #31
 800ab60:	d504      	bpl.n	800ab6c <_strtod_l+0x534>
 800ab62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab66:	f7f5 fd6f 	bl	8000648 <__aeabi_dmul>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	3601      	adds	r6, #1
 800ab6e:	1064      	asrs	r4, r4, #1
 800ab70:	3708      	adds	r7, #8
 800ab72:	e7d0      	b.n	800ab16 <_strtod_l+0x4de>
 800ab74:	d0f0      	beq.n	800ab58 <_strtod_l+0x520>
 800ab76:	4264      	negs	r4, r4
 800ab78:	f014 020f 	ands.w	r2, r4, #15
 800ab7c:	d00a      	beq.n	800ab94 <_strtod_l+0x55c>
 800ab7e:	4b12      	ldr	r3, [pc, #72]	@ (800abc8 <_strtod_l+0x590>)
 800ab80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab84:	4650      	mov	r0, sl
 800ab86:	4659      	mov	r1, fp
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 fe86 	bl	800089c <__aeabi_ddiv>
 800ab90:	4682      	mov	sl, r0
 800ab92:	468b      	mov	fp, r1
 800ab94:	1124      	asrs	r4, r4, #4
 800ab96:	d0df      	beq.n	800ab58 <_strtod_l+0x520>
 800ab98:	2c1f      	cmp	r4, #31
 800ab9a:	dd1f      	ble.n	800abdc <_strtod_l+0x5a4>
 800ab9c:	2400      	movs	r4, #0
 800ab9e:	46a0      	mov	r8, r4
 800aba0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aba2:	46a1      	mov	r9, r4
 800aba4:	9a05      	ldr	r2, [sp, #20]
 800aba6:	2322      	movs	r3, #34	@ 0x22
 800aba8:	f04f 0a00 	mov.w	sl, #0
 800abac:	f04f 0b00 	mov.w	fp, #0
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	e76b      	b.n	800aa8c <_strtod_l+0x454>
 800abb4:	0800c481 	.word	0x0800c481
 800abb8:	0800c748 	.word	0x0800c748
 800abbc:	0800c479 	.word	0x0800c479
 800abc0:	0800c4b0 	.word	0x0800c4b0
 800abc4:	0800c5e9 	.word	0x0800c5e9
 800abc8:	0800c680 	.word	0x0800c680
 800abcc:	0800c658 	.word	0x0800c658
 800abd0:	7ff00000 	.word	0x7ff00000
 800abd4:	7ca00000 	.word	0x7ca00000
 800abd8:	7fefffff 	.word	0x7fefffff
 800abdc:	f014 0310 	ands.w	r3, r4, #16
 800abe0:	bf18      	it	ne
 800abe2:	236a      	movne	r3, #106	@ 0x6a
 800abe4:	4ea9      	ldr	r6, [pc, #676]	@ (800ae8c <_strtod_l+0x854>)
 800abe6:	9308      	str	r3, [sp, #32]
 800abe8:	4650      	mov	r0, sl
 800abea:	4659      	mov	r1, fp
 800abec:	2300      	movs	r3, #0
 800abee:	07e7      	lsls	r7, r4, #31
 800abf0:	d504      	bpl.n	800abfc <_strtod_l+0x5c4>
 800abf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abf6:	f7f5 fd27 	bl	8000648 <__aeabi_dmul>
 800abfa:	2301      	movs	r3, #1
 800abfc:	1064      	asrs	r4, r4, #1
 800abfe:	f106 0608 	add.w	r6, r6, #8
 800ac02:	d1f4      	bne.n	800abee <_strtod_l+0x5b6>
 800ac04:	b10b      	cbz	r3, 800ac0a <_strtod_l+0x5d2>
 800ac06:	4682      	mov	sl, r0
 800ac08:	468b      	mov	fp, r1
 800ac0a:	9b08      	ldr	r3, [sp, #32]
 800ac0c:	b1b3      	cbz	r3, 800ac3c <_strtod_l+0x604>
 800ac0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	4659      	mov	r1, fp
 800ac1a:	dd0f      	ble.n	800ac3c <_strtod_l+0x604>
 800ac1c:	2b1f      	cmp	r3, #31
 800ac1e:	dd56      	ble.n	800acce <_strtod_l+0x696>
 800ac20:	2b34      	cmp	r3, #52	@ 0x34
 800ac22:	bfde      	ittt	le
 800ac24:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ac28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac2c:	4093      	lslle	r3, r2
 800ac2e:	f04f 0a00 	mov.w	sl, #0
 800ac32:	bfcc      	ite	gt
 800ac34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac38:	ea03 0b01 	andle.w	fp, r3, r1
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4650      	mov	r0, sl
 800ac42:	4659      	mov	r1, fp
 800ac44:	f7f5 ff68 	bl	8000b18 <__aeabi_dcmpeq>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d1a7      	bne.n	800ab9c <_strtod_l+0x564>
 800ac4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac52:	9805      	ldr	r0, [sp, #20]
 800ac54:	462b      	mov	r3, r5
 800ac56:	464a      	mov	r2, r9
 800ac58:	f7ff f8ce 	bl	8009df8 <__s2b>
 800ac5c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f af09 	beq.w	800aa76 <_strtod_l+0x43e>
 800ac64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	eba3 0308 	sub.w	r3, r3, r8
 800ac6e:	bfa8      	it	ge
 800ac70:	2300      	movge	r3, #0
 800ac72:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac74:	2400      	movs	r4, #0
 800ac76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac7a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ac7c:	46a0      	mov	r8, r4
 800ac7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac80:	9805      	ldr	r0, [sp, #20]
 800ac82:	6859      	ldr	r1, [r3, #4]
 800ac84:	f7ff f810 	bl	8009ca8 <_Balloc>
 800ac88:	4681      	mov	r9, r0
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f43f aef7 	beq.w	800aa7e <_strtod_l+0x446>
 800ac90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	3202      	adds	r2, #2
 800ac96:	f103 010c 	add.w	r1, r3, #12
 800ac9a:	0092      	lsls	r2, r2, #2
 800ac9c:	300c      	adds	r0, #12
 800ac9e:	f7fe f896 	bl	8008dce <memcpy>
 800aca2:	ec4b ab10 	vmov	d0, sl, fp
 800aca6:	9805      	ldr	r0, [sp, #20]
 800aca8:	aa1c      	add	r2, sp, #112	@ 0x70
 800acaa:	a91b      	add	r1, sp, #108	@ 0x6c
 800acac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800acb0:	f7ff fbd6 	bl	800a460 <__d2b>
 800acb4:	901a      	str	r0, [sp, #104]	@ 0x68
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f43f aee1 	beq.w	800aa7e <_strtod_l+0x446>
 800acbc:	9805      	ldr	r0, [sp, #20]
 800acbe:	2101      	movs	r1, #1
 800acc0:	f7ff f930 	bl	8009f24 <__i2b>
 800acc4:	4680      	mov	r8, r0
 800acc6:	b948      	cbnz	r0, 800acdc <_strtod_l+0x6a4>
 800acc8:	f04f 0800 	mov.w	r8, #0
 800accc:	e6d7      	b.n	800aa7e <_strtod_l+0x446>
 800acce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acd2:	fa02 f303 	lsl.w	r3, r2, r3
 800acd6:	ea03 0a0a 	and.w	sl, r3, sl
 800acda:	e7af      	b.n	800ac3c <_strtod_l+0x604>
 800acdc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800acde:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ace0:	2d00      	cmp	r5, #0
 800ace2:	bfab      	itete	ge
 800ace4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ace6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ace8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800acea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800acec:	bfac      	ite	ge
 800acee:	18ef      	addge	r7, r5, r3
 800acf0:	1b5e      	sublt	r6, r3, r5
 800acf2:	9b08      	ldr	r3, [sp, #32]
 800acf4:	1aed      	subs	r5, r5, r3
 800acf6:	4415      	add	r5, r2
 800acf8:	4b65      	ldr	r3, [pc, #404]	@ (800ae90 <_strtod_l+0x858>)
 800acfa:	3d01      	subs	r5, #1
 800acfc:	429d      	cmp	r5, r3
 800acfe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad02:	da50      	bge.n	800ada6 <_strtod_l+0x76e>
 800ad04:	1b5b      	subs	r3, r3, r5
 800ad06:	2b1f      	cmp	r3, #31
 800ad08:	eba2 0203 	sub.w	r2, r2, r3
 800ad0c:	f04f 0101 	mov.w	r1, #1
 800ad10:	dc3d      	bgt.n	800ad8e <_strtod_l+0x756>
 800ad12:	fa01 f303 	lsl.w	r3, r1, r3
 800ad16:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad18:	2300      	movs	r3, #0
 800ad1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad1c:	18bd      	adds	r5, r7, r2
 800ad1e:	9b08      	ldr	r3, [sp, #32]
 800ad20:	42af      	cmp	r7, r5
 800ad22:	4416      	add	r6, r2
 800ad24:	441e      	add	r6, r3
 800ad26:	463b      	mov	r3, r7
 800ad28:	bfa8      	it	ge
 800ad2a:	462b      	movge	r3, r5
 800ad2c:	42b3      	cmp	r3, r6
 800ad2e:	bfa8      	it	ge
 800ad30:	4633      	movge	r3, r6
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bfc2      	ittt	gt
 800ad36:	1aed      	subgt	r5, r5, r3
 800ad38:	1af6      	subgt	r6, r6, r3
 800ad3a:	1aff      	subgt	r7, r7, r3
 800ad3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dd16      	ble.n	800ad70 <_strtod_l+0x738>
 800ad42:	4641      	mov	r1, r8
 800ad44:	9805      	ldr	r0, [sp, #20]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f7ff f9a4 	bl	800a094 <__pow5mult>
 800ad4c:	4680      	mov	r8, r0
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d0ba      	beq.n	800acc8 <_strtod_l+0x690>
 800ad52:	4601      	mov	r1, r0
 800ad54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad56:	9805      	ldr	r0, [sp, #20]
 800ad58:	f7ff f8fa 	bl	8009f50 <__multiply>
 800ad5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f43f ae8d 	beq.w	800aa7e <_strtod_l+0x446>
 800ad64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad66:	9805      	ldr	r0, [sp, #20]
 800ad68:	f7fe ffde 	bl	8009d28 <_Bfree>
 800ad6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad70:	2d00      	cmp	r5, #0
 800ad72:	dc1d      	bgt.n	800adb0 <_strtod_l+0x778>
 800ad74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	dd23      	ble.n	800adc2 <_strtod_l+0x78a>
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ad7e:	9805      	ldr	r0, [sp, #20]
 800ad80:	f7ff f988 	bl	800a094 <__pow5mult>
 800ad84:	4681      	mov	r9, r0
 800ad86:	b9e0      	cbnz	r0, 800adc2 <_strtod_l+0x78a>
 800ad88:	f04f 0900 	mov.w	r9, #0
 800ad8c:	e677      	b.n	800aa7e <_strtod_l+0x446>
 800ad8e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ad92:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ad96:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ad9a:	35e2      	adds	r5, #226	@ 0xe2
 800ad9c:	fa01 f305 	lsl.w	r3, r1, r5
 800ada0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ada2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ada4:	e7ba      	b.n	800ad1c <_strtod_l+0x6e4>
 800ada6:	2300      	movs	r3, #0
 800ada8:	9310      	str	r3, [sp, #64]	@ 0x40
 800adaa:	2301      	movs	r3, #1
 800adac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adae:	e7b5      	b.n	800ad1c <_strtod_l+0x6e4>
 800adb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adb2:	9805      	ldr	r0, [sp, #20]
 800adb4:	462a      	mov	r2, r5
 800adb6:	f7ff f9c7 	bl	800a148 <__lshift>
 800adba:	901a      	str	r0, [sp, #104]	@ 0x68
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d1d9      	bne.n	800ad74 <_strtod_l+0x73c>
 800adc0:	e65d      	b.n	800aa7e <_strtod_l+0x446>
 800adc2:	2e00      	cmp	r6, #0
 800adc4:	dd07      	ble.n	800add6 <_strtod_l+0x79e>
 800adc6:	4649      	mov	r1, r9
 800adc8:	9805      	ldr	r0, [sp, #20]
 800adca:	4632      	mov	r2, r6
 800adcc:	f7ff f9bc 	bl	800a148 <__lshift>
 800add0:	4681      	mov	r9, r0
 800add2:	2800      	cmp	r0, #0
 800add4:	d0d8      	beq.n	800ad88 <_strtod_l+0x750>
 800add6:	2f00      	cmp	r7, #0
 800add8:	dd08      	ble.n	800adec <_strtod_l+0x7b4>
 800adda:	4641      	mov	r1, r8
 800addc:	9805      	ldr	r0, [sp, #20]
 800adde:	463a      	mov	r2, r7
 800ade0:	f7ff f9b2 	bl	800a148 <__lshift>
 800ade4:	4680      	mov	r8, r0
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f ae49 	beq.w	800aa7e <_strtod_l+0x446>
 800adec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adee:	9805      	ldr	r0, [sp, #20]
 800adf0:	464a      	mov	r2, r9
 800adf2:	f7ff fa31 	bl	800a258 <__mdiff>
 800adf6:	4604      	mov	r4, r0
 800adf8:	2800      	cmp	r0, #0
 800adfa:	f43f ae40 	beq.w	800aa7e <_strtod_l+0x446>
 800adfe:	68c3      	ldr	r3, [r0, #12]
 800ae00:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae02:	2300      	movs	r3, #0
 800ae04:	60c3      	str	r3, [r0, #12]
 800ae06:	4641      	mov	r1, r8
 800ae08:	f7ff fa0a 	bl	800a220 <__mcmp>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	da45      	bge.n	800ae9c <_strtod_l+0x864>
 800ae10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae12:	ea53 030a 	orrs.w	r3, r3, sl
 800ae16:	d16b      	bne.n	800aef0 <_strtod_l+0x8b8>
 800ae18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d167      	bne.n	800aef0 <_strtod_l+0x8b8>
 800ae20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae24:	0d1b      	lsrs	r3, r3, #20
 800ae26:	051b      	lsls	r3, r3, #20
 800ae28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae2c:	d960      	bls.n	800aef0 <_strtod_l+0x8b8>
 800ae2e:	6963      	ldr	r3, [r4, #20]
 800ae30:	b913      	cbnz	r3, 800ae38 <_strtod_l+0x800>
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	dd5b      	ble.n	800aef0 <_strtod_l+0x8b8>
 800ae38:	4621      	mov	r1, r4
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	9805      	ldr	r0, [sp, #20]
 800ae3e:	f7ff f983 	bl	800a148 <__lshift>
 800ae42:	4641      	mov	r1, r8
 800ae44:	4604      	mov	r4, r0
 800ae46:	f7ff f9eb 	bl	800a220 <__mcmp>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	dd50      	ble.n	800aef0 <_strtod_l+0x8b8>
 800ae4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae52:	9a08      	ldr	r2, [sp, #32]
 800ae54:	0d1b      	lsrs	r3, r3, #20
 800ae56:	051b      	lsls	r3, r3, #20
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	d06a      	beq.n	800af32 <_strtod_l+0x8fa>
 800ae5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae60:	d867      	bhi.n	800af32 <_strtod_l+0x8fa>
 800ae62:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ae66:	f67f ae9d 	bls.w	800aba4 <_strtod_l+0x56c>
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae94 <_strtod_l+0x85c>)
 800ae6c:	4650      	mov	r0, sl
 800ae6e:	4659      	mov	r1, fp
 800ae70:	2200      	movs	r2, #0
 800ae72:	f7f5 fbe9 	bl	8000648 <__aeabi_dmul>
 800ae76:	4b08      	ldr	r3, [pc, #32]	@ (800ae98 <_strtod_l+0x860>)
 800ae78:	400b      	ands	r3, r1
 800ae7a:	4682      	mov	sl, r0
 800ae7c:	468b      	mov	fp, r1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f47f ae08 	bne.w	800aa94 <_strtod_l+0x45c>
 800ae84:	9a05      	ldr	r2, [sp, #20]
 800ae86:	2322      	movs	r3, #34	@ 0x22
 800ae88:	6013      	str	r3, [r2, #0]
 800ae8a:	e603      	b.n	800aa94 <_strtod_l+0x45c>
 800ae8c:	0800c770 	.word	0x0800c770
 800ae90:	fffffc02 	.word	0xfffffc02
 800ae94:	39500000 	.word	0x39500000
 800ae98:	7ff00000 	.word	0x7ff00000
 800ae9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aea0:	d165      	bne.n	800af6e <_strtod_l+0x936>
 800aea2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aea8:	b35a      	cbz	r2, 800af02 <_strtod_l+0x8ca>
 800aeaa:	4a9f      	ldr	r2, [pc, #636]	@ (800b128 <_strtod_l+0xaf0>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d12b      	bne.n	800af08 <_strtod_l+0x8d0>
 800aeb0:	9b08      	ldr	r3, [sp, #32]
 800aeb2:	4651      	mov	r1, sl
 800aeb4:	b303      	cbz	r3, 800aef8 <_strtod_l+0x8c0>
 800aeb6:	4b9d      	ldr	r3, [pc, #628]	@ (800b12c <_strtod_l+0xaf4>)
 800aeb8:	465a      	mov	r2, fp
 800aeba:	4013      	ands	r3, r2
 800aebc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aec4:	d81b      	bhi.n	800aefe <_strtod_l+0x8c6>
 800aec6:	0d1b      	lsrs	r3, r3, #20
 800aec8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aecc:	fa02 f303 	lsl.w	r3, r2, r3
 800aed0:	4299      	cmp	r1, r3
 800aed2:	d119      	bne.n	800af08 <_strtod_l+0x8d0>
 800aed4:	4b96      	ldr	r3, [pc, #600]	@ (800b130 <_strtod_l+0xaf8>)
 800aed6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d102      	bne.n	800aee2 <_strtod_l+0x8aa>
 800aedc:	3101      	adds	r1, #1
 800aede:	f43f adce 	beq.w	800aa7e <_strtod_l+0x446>
 800aee2:	4b92      	ldr	r3, [pc, #584]	@ (800b12c <_strtod_l+0xaf4>)
 800aee4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aee6:	401a      	ands	r2, r3
 800aee8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aeec:	f04f 0a00 	mov.w	sl, #0
 800aef0:	9b08      	ldr	r3, [sp, #32]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1b9      	bne.n	800ae6a <_strtod_l+0x832>
 800aef6:	e5cd      	b.n	800aa94 <_strtod_l+0x45c>
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aefc:	e7e8      	b.n	800aed0 <_strtod_l+0x898>
 800aefe:	4613      	mov	r3, r2
 800af00:	e7e6      	b.n	800aed0 <_strtod_l+0x898>
 800af02:	ea53 030a 	orrs.w	r3, r3, sl
 800af06:	d0a2      	beq.n	800ae4e <_strtod_l+0x816>
 800af08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af0a:	b1db      	cbz	r3, 800af44 <_strtod_l+0x90c>
 800af0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af0e:	4213      	tst	r3, r2
 800af10:	d0ee      	beq.n	800aef0 <_strtod_l+0x8b8>
 800af12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af14:	9a08      	ldr	r2, [sp, #32]
 800af16:	4650      	mov	r0, sl
 800af18:	4659      	mov	r1, fp
 800af1a:	b1bb      	cbz	r3, 800af4c <_strtod_l+0x914>
 800af1c:	f7ff fb6e 	bl	800a5fc <sulp>
 800af20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af24:	ec53 2b10 	vmov	r2, r3, d0
 800af28:	f7f5 f9d8 	bl	80002dc <__adddf3>
 800af2c:	4682      	mov	sl, r0
 800af2e:	468b      	mov	fp, r1
 800af30:	e7de      	b.n	800aef0 <_strtod_l+0x8b8>
 800af32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af3e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800af42:	e7d5      	b.n	800aef0 <_strtod_l+0x8b8>
 800af44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af46:	ea13 0f0a 	tst.w	r3, sl
 800af4a:	e7e1      	b.n	800af10 <_strtod_l+0x8d8>
 800af4c:	f7ff fb56 	bl	800a5fc <sulp>
 800af50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af54:	ec53 2b10 	vmov	r2, r3, d0
 800af58:	f7f5 f9be 	bl	80002d8 <__aeabi_dsub>
 800af5c:	2200      	movs	r2, #0
 800af5e:	2300      	movs	r3, #0
 800af60:	4682      	mov	sl, r0
 800af62:	468b      	mov	fp, r1
 800af64:	f7f5 fdd8 	bl	8000b18 <__aeabi_dcmpeq>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d0c1      	beq.n	800aef0 <_strtod_l+0x8b8>
 800af6c:	e61a      	b.n	800aba4 <_strtod_l+0x56c>
 800af6e:	4641      	mov	r1, r8
 800af70:	4620      	mov	r0, r4
 800af72:	f7ff facd 	bl	800a510 <__ratio>
 800af76:	ec57 6b10 	vmov	r6, r7, d0
 800af7a:	2200      	movs	r2, #0
 800af7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af80:	4630      	mov	r0, r6
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 fddc 	bl	8000b40 <__aeabi_dcmple>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d06f      	beq.n	800b06c <_strtod_l+0xa34>
 800af8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d17a      	bne.n	800b088 <_strtod_l+0xa50>
 800af92:	f1ba 0f00 	cmp.w	sl, #0
 800af96:	d158      	bne.n	800b04a <_strtod_l+0xa12>
 800af98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d15a      	bne.n	800b058 <_strtod_l+0xa20>
 800afa2:	4b64      	ldr	r3, [pc, #400]	@ (800b134 <_strtod_l+0xafc>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	4630      	mov	r0, r6
 800afa8:	4639      	mov	r1, r7
 800afaa:	f7f5 fdbf 	bl	8000b2c <__aeabi_dcmplt>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d159      	bne.n	800b066 <_strtod_l+0xa2e>
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	4b60      	ldr	r3, [pc, #384]	@ (800b138 <_strtod_l+0xb00>)
 800afb8:	2200      	movs	r2, #0
 800afba:	f7f5 fb45 	bl	8000648 <__aeabi_dmul>
 800afbe:	4606      	mov	r6, r0
 800afc0:	460f      	mov	r7, r1
 800afc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800afc6:	9606      	str	r6, [sp, #24]
 800afc8:	9307      	str	r3, [sp, #28]
 800afca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afce:	4d57      	ldr	r5, [pc, #348]	@ (800b12c <_strtod_l+0xaf4>)
 800afd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afd6:	401d      	ands	r5, r3
 800afd8:	4b58      	ldr	r3, [pc, #352]	@ (800b13c <_strtod_l+0xb04>)
 800afda:	429d      	cmp	r5, r3
 800afdc:	f040 80b2 	bne.w	800b144 <_strtod_l+0xb0c>
 800afe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afe2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800afe6:	ec4b ab10 	vmov	d0, sl, fp
 800afea:	f7ff f9c9 	bl	800a380 <__ulp>
 800afee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aff2:	ec51 0b10 	vmov	r0, r1, d0
 800aff6:	f7f5 fb27 	bl	8000648 <__aeabi_dmul>
 800affa:	4652      	mov	r2, sl
 800affc:	465b      	mov	r3, fp
 800affe:	f7f5 f96d 	bl	80002dc <__adddf3>
 800b002:	460b      	mov	r3, r1
 800b004:	4949      	ldr	r1, [pc, #292]	@ (800b12c <_strtod_l+0xaf4>)
 800b006:	4a4e      	ldr	r2, [pc, #312]	@ (800b140 <_strtod_l+0xb08>)
 800b008:	4019      	ands	r1, r3
 800b00a:	4291      	cmp	r1, r2
 800b00c:	4682      	mov	sl, r0
 800b00e:	d942      	bls.n	800b096 <_strtod_l+0xa5e>
 800b010:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b012:	4b47      	ldr	r3, [pc, #284]	@ (800b130 <_strtod_l+0xaf8>)
 800b014:	429a      	cmp	r2, r3
 800b016:	d103      	bne.n	800b020 <_strtod_l+0x9e8>
 800b018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b01a:	3301      	adds	r3, #1
 800b01c:	f43f ad2f 	beq.w	800aa7e <_strtod_l+0x446>
 800b020:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b130 <_strtod_l+0xaf8>
 800b024:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b028:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b02a:	9805      	ldr	r0, [sp, #20]
 800b02c:	f7fe fe7c 	bl	8009d28 <_Bfree>
 800b030:	9805      	ldr	r0, [sp, #20]
 800b032:	4649      	mov	r1, r9
 800b034:	f7fe fe78 	bl	8009d28 <_Bfree>
 800b038:	9805      	ldr	r0, [sp, #20]
 800b03a:	4641      	mov	r1, r8
 800b03c:	f7fe fe74 	bl	8009d28 <_Bfree>
 800b040:	9805      	ldr	r0, [sp, #20]
 800b042:	4621      	mov	r1, r4
 800b044:	f7fe fe70 	bl	8009d28 <_Bfree>
 800b048:	e619      	b.n	800ac7e <_strtod_l+0x646>
 800b04a:	f1ba 0f01 	cmp.w	sl, #1
 800b04e:	d103      	bne.n	800b058 <_strtod_l+0xa20>
 800b050:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b052:	2b00      	cmp	r3, #0
 800b054:	f43f ada6 	beq.w	800aba4 <_strtod_l+0x56c>
 800b058:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b108 <_strtod_l+0xad0>
 800b05c:	4f35      	ldr	r7, [pc, #212]	@ (800b134 <_strtod_l+0xafc>)
 800b05e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b062:	2600      	movs	r6, #0
 800b064:	e7b1      	b.n	800afca <_strtod_l+0x992>
 800b066:	4f34      	ldr	r7, [pc, #208]	@ (800b138 <_strtod_l+0xb00>)
 800b068:	2600      	movs	r6, #0
 800b06a:	e7aa      	b.n	800afc2 <_strtod_l+0x98a>
 800b06c:	4b32      	ldr	r3, [pc, #200]	@ (800b138 <_strtod_l+0xb00>)
 800b06e:	4630      	mov	r0, r6
 800b070:	4639      	mov	r1, r7
 800b072:	2200      	movs	r2, #0
 800b074:	f7f5 fae8 	bl	8000648 <__aeabi_dmul>
 800b078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b07a:	4606      	mov	r6, r0
 800b07c:	460f      	mov	r7, r1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d09f      	beq.n	800afc2 <_strtod_l+0x98a>
 800b082:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b086:	e7a0      	b.n	800afca <_strtod_l+0x992>
 800b088:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b110 <_strtod_l+0xad8>
 800b08c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b090:	ec57 6b17 	vmov	r6, r7, d7
 800b094:	e799      	b.n	800afca <_strtod_l+0x992>
 800b096:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b09a:	9b08      	ldr	r3, [sp, #32]
 800b09c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1c1      	bne.n	800b028 <_strtod_l+0x9f0>
 800b0a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0a8:	0d1b      	lsrs	r3, r3, #20
 800b0aa:	051b      	lsls	r3, r3, #20
 800b0ac:	429d      	cmp	r5, r3
 800b0ae:	d1bb      	bne.n	800b028 <_strtod_l+0x9f0>
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 fe28 	bl	8000d08 <__aeabi_d2lz>
 800b0b8:	f7f5 fa98 	bl	80005ec <__aeabi_l2d>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	4639      	mov	r1, r7
 800b0c4:	f7f5 f908 	bl	80002d8 <__aeabi_dsub>
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b0d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b0d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0d6:	ea46 060a 	orr.w	r6, r6, sl
 800b0da:	431e      	orrs	r6, r3
 800b0dc:	d06f      	beq.n	800b1be <_strtod_l+0xb86>
 800b0de:	a30e      	add	r3, pc, #56	@ (adr r3, 800b118 <_strtod_l+0xae0>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 fd22 	bl	8000b2c <__aeabi_dcmplt>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	f47f acd3 	bne.w	800aa94 <_strtod_l+0x45c>
 800b0ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800b120 <_strtod_l+0xae8>)
 800b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0f8:	f7f5 fd36 	bl	8000b68 <__aeabi_dcmpgt>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d093      	beq.n	800b028 <_strtod_l+0x9f0>
 800b100:	e4c8      	b.n	800aa94 <_strtod_l+0x45c>
 800b102:	bf00      	nop
 800b104:	f3af 8000 	nop.w
 800b108:	00000000 	.word	0x00000000
 800b10c:	bff00000 	.word	0xbff00000
 800b110:	00000000 	.word	0x00000000
 800b114:	3ff00000 	.word	0x3ff00000
 800b118:	94a03595 	.word	0x94a03595
 800b11c:	3fdfffff 	.word	0x3fdfffff
 800b120:	35afe535 	.word	0x35afe535
 800b124:	3fe00000 	.word	0x3fe00000
 800b128:	000fffff 	.word	0x000fffff
 800b12c:	7ff00000 	.word	0x7ff00000
 800b130:	7fefffff 	.word	0x7fefffff
 800b134:	3ff00000 	.word	0x3ff00000
 800b138:	3fe00000 	.word	0x3fe00000
 800b13c:	7fe00000 	.word	0x7fe00000
 800b140:	7c9fffff 	.word	0x7c9fffff
 800b144:	9b08      	ldr	r3, [sp, #32]
 800b146:	b323      	cbz	r3, 800b192 <_strtod_l+0xb5a>
 800b148:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b14c:	d821      	bhi.n	800b192 <_strtod_l+0xb5a>
 800b14e:	a328      	add	r3, pc, #160	@ (adr r3, 800b1f0 <_strtod_l+0xbb8>)
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 fcf2 	bl	8000b40 <__aeabi_dcmple>
 800b15c:	b1a0      	cbz	r0, 800b188 <_strtod_l+0xb50>
 800b15e:	4639      	mov	r1, r7
 800b160:	4630      	mov	r0, r6
 800b162:	f7f5 fd49 	bl	8000bf8 <__aeabi_d2uiz>
 800b166:	2801      	cmp	r0, #1
 800b168:	bf38      	it	cc
 800b16a:	2001      	movcc	r0, #1
 800b16c:	f7f5 f9f2 	bl	8000554 <__aeabi_ui2d>
 800b170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b172:	4606      	mov	r6, r0
 800b174:	460f      	mov	r7, r1
 800b176:	b9fb      	cbnz	r3, 800b1b8 <_strtod_l+0xb80>
 800b178:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b17c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b17e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b180:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b184:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b188:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b18a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b18e:	1b5b      	subs	r3, r3, r5
 800b190:	9311      	str	r3, [sp, #68]	@ 0x44
 800b192:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b196:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b19a:	f7ff f8f1 	bl	800a380 <__ulp>
 800b19e:	4650      	mov	r0, sl
 800b1a0:	ec53 2b10 	vmov	r2, r3, d0
 800b1a4:	4659      	mov	r1, fp
 800b1a6:	f7f5 fa4f 	bl	8000648 <__aeabi_dmul>
 800b1aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1ae:	f7f5 f895 	bl	80002dc <__adddf3>
 800b1b2:	4682      	mov	sl, r0
 800b1b4:	468b      	mov	fp, r1
 800b1b6:	e770      	b.n	800b09a <_strtod_l+0xa62>
 800b1b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b1bc:	e7e0      	b.n	800b180 <_strtod_l+0xb48>
 800b1be:	a30e      	add	r3, pc, #56	@ (adr r3, 800b1f8 <_strtod_l+0xbc0>)
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	f7f5 fcb2 	bl	8000b2c <__aeabi_dcmplt>
 800b1c8:	e798      	b.n	800b0fc <_strtod_l+0xac4>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b1d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	f7ff ba6d 	b.w	800a6b2 <_strtod_l+0x7a>
 800b1d8:	2a65      	cmp	r2, #101	@ 0x65
 800b1da:	f43f ab68 	beq.w	800a8ae <_strtod_l+0x276>
 800b1de:	2a45      	cmp	r2, #69	@ 0x45
 800b1e0:	f43f ab65 	beq.w	800a8ae <_strtod_l+0x276>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f7ff bba0 	b.w	800a92a <_strtod_l+0x2f2>
 800b1ea:	bf00      	nop
 800b1ec:	f3af 8000 	nop.w
 800b1f0:	ffc00000 	.word	0xffc00000
 800b1f4:	41dfffff 	.word	0x41dfffff
 800b1f8:	94a03595 	.word	0x94a03595
 800b1fc:	3fcfffff 	.word	0x3fcfffff

0800b200 <_strtod_r>:
 800b200:	4b01      	ldr	r3, [pc, #4]	@ (800b208 <_strtod_r+0x8>)
 800b202:	f7ff ba19 	b.w	800a638 <_strtod_l>
 800b206:	bf00      	nop
 800b208:	20000088 	.word	0x20000088

0800b20c <_strtol_l.isra.0>:
 800b20c:	2b24      	cmp	r3, #36	@ 0x24
 800b20e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b212:	4686      	mov	lr, r0
 800b214:	4690      	mov	r8, r2
 800b216:	d801      	bhi.n	800b21c <_strtol_l.isra.0+0x10>
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d106      	bne.n	800b22a <_strtol_l.isra.0+0x1e>
 800b21c:	f7fd fdaa 	bl	8008d74 <__errno>
 800b220:	2316      	movs	r3, #22
 800b222:	6003      	str	r3, [r0, #0]
 800b224:	2000      	movs	r0, #0
 800b226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b22a:	4834      	ldr	r0, [pc, #208]	@ (800b2fc <_strtol_l.isra.0+0xf0>)
 800b22c:	460d      	mov	r5, r1
 800b22e:	462a      	mov	r2, r5
 800b230:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b234:	5d06      	ldrb	r6, [r0, r4]
 800b236:	f016 0608 	ands.w	r6, r6, #8
 800b23a:	d1f8      	bne.n	800b22e <_strtol_l.isra.0+0x22>
 800b23c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b23e:	d110      	bne.n	800b262 <_strtol_l.isra.0+0x56>
 800b240:	782c      	ldrb	r4, [r5, #0]
 800b242:	2601      	movs	r6, #1
 800b244:	1c95      	adds	r5, r2, #2
 800b246:	f033 0210 	bics.w	r2, r3, #16
 800b24a:	d115      	bne.n	800b278 <_strtol_l.isra.0+0x6c>
 800b24c:	2c30      	cmp	r4, #48	@ 0x30
 800b24e:	d10d      	bne.n	800b26c <_strtol_l.isra.0+0x60>
 800b250:	782a      	ldrb	r2, [r5, #0]
 800b252:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b256:	2a58      	cmp	r2, #88	@ 0x58
 800b258:	d108      	bne.n	800b26c <_strtol_l.isra.0+0x60>
 800b25a:	786c      	ldrb	r4, [r5, #1]
 800b25c:	3502      	adds	r5, #2
 800b25e:	2310      	movs	r3, #16
 800b260:	e00a      	b.n	800b278 <_strtol_l.isra.0+0x6c>
 800b262:	2c2b      	cmp	r4, #43	@ 0x2b
 800b264:	bf04      	itt	eq
 800b266:	782c      	ldrbeq	r4, [r5, #0]
 800b268:	1c95      	addeq	r5, r2, #2
 800b26a:	e7ec      	b.n	800b246 <_strtol_l.isra.0+0x3a>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1f6      	bne.n	800b25e <_strtol_l.isra.0+0x52>
 800b270:	2c30      	cmp	r4, #48	@ 0x30
 800b272:	bf14      	ite	ne
 800b274:	230a      	movne	r3, #10
 800b276:	2308      	moveq	r3, #8
 800b278:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b27c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b280:	2200      	movs	r2, #0
 800b282:	fbbc f9f3 	udiv	r9, ip, r3
 800b286:	4610      	mov	r0, r2
 800b288:	fb03 ca19 	mls	sl, r3, r9, ip
 800b28c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b290:	2f09      	cmp	r7, #9
 800b292:	d80f      	bhi.n	800b2b4 <_strtol_l.isra.0+0xa8>
 800b294:	463c      	mov	r4, r7
 800b296:	42a3      	cmp	r3, r4
 800b298:	dd1b      	ble.n	800b2d2 <_strtol_l.isra.0+0xc6>
 800b29a:	1c57      	adds	r7, r2, #1
 800b29c:	d007      	beq.n	800b2ae <_strtol_l.isra.0+0xa2>
 800b29e:	4581      	cmp	r9, r0
 800b2a0:	d314      	bcc.n	800b2cc <_strtol_l.isra.0+0xc0>
 800b2a2:	d101      	bne.n	800b2a8 <_strtol_l.isra.0+0x9c>
 800b2a4:	45a2      	cmp	sl, r4
 800b2a6:	db11      	blt.n	800b2cc <_strtol_l.isra.0+0xc0>
 800b2a8:	fb00 4003 	mla	r0, r0, r3, r4
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2b2:	e7eb      	b.n	800b28c <_strtol_l.isra.0+0x80>
 800b2b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2b8:	2f19      	cmp	r7, #25
 800b2ba:	d801      	bhi.n	800b2c0 <_strtol_l.isra.0+0xb4>
 800b2bc:	3c37      	subs	r4, #55	@ 0x37
 800b2be:	e7ea      	b.n	800b296 <_strtol_l.isra.0+0x8a>
 800b2c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b2c4:	2f19      	cmp	r7, #25
 800b2c6:	d804      	bhi.n	800b2d2 <_strtol_l.isra.0+0xc6>
 800b2c8:	3c57      	subs	r4, #87	@ 0x57
 800b2ca:	e7e4      	b.n	800b296 <_strtol_l.isra.0+0x8a>
 800b2cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2d0:	e7ed      	b.n	800b2ae <_strtol_l.isra.0+0xa2>
 800b2d2:	1c53      	adds	r3, r2, #1
 800b2d4:	d108      	bne.n	800b2e8 <_strtol_l.isra.0+0xdc>
 800b2d6:	2322      	movs	r3, #34	@ 0x22
 800b2d8:	f8ce 3000 	str.w	r3, [lr]
 800b2dc:	4660      	mov	r0, ip
 800b2de:	f1b8 0f00 	cmp.w	r8, #0
 800b2e2:	d0a0      	beq.n	800b226 <_strtol_l.isra.0+0x1a>
 800b2e4:	1e69      	subs	r1, r5, #1
 800b2e6:	e006      	b.n	800b2f6 <_strtol_l.isra.0+0xea>
 800b2e8:	b106      	cbz	r6, 800b2ec <_strtol_l.isra.0+0xe0>
 800b2ea:	4240      	negs	r0, r0
 800b2ec:	f1b8 0f00 	cmp.w	r8, #0
 800b2f0:	d099      	beq.n	800b226 <_strtol_l.isra.0+0x1a>
 800b2f2:	2a00      	cmp	r2, #0
 800b2f4:	d1f6      	bne.n	800b2e4 <_strtol_l.isra.0+0xd8>
 800b2f6:	f8c8 1000 	str.w	r1, [r8]
 800b2fa:	e794      	b.n	800b226 <_strtol_l.isra.0+0x1a>
 800b2fc:	0800c799 	.word	0x0800c799

0800b300 <_strtol_r>:
 800b300:	f7ff bf84 	b.w	800b20c <_strtol_l.isra.0>

0800b304 <__ssputs_r>:
 800b304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b308:	688e      	ldr	r6, [r1, #8]
 800b30a:	461f      	mov	r7, r3
 800b30c:	42be      	cmp	r6, r7
 800b30e:	680b      	ldr	r3, [r1, #0]
 800b310:	4682      	mov	sl, r0
 800b312:	460c      	mov	r4, r1
 800b314:	4690      	mov	r8, r2
 800b316:	d82d      	bhi.n	800b374 <__ssputs_r+0x70>
 800b318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b31c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b320:	d026      	beq.n	800b370 <__ssputs_r+0x6c>
 800b322:	6965      	ldr	r5, [r4, #20]
 800b324:	6909      	ldr	r1, [r1, #16]
 800b326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b32a:	eba3 0901 	sub.w	r9, r3, r1
 800b32e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b332:	1c7b      	adds	r3, r7, #1
 800b334:	444b      	add	r3, r9
 800b336:	106d      	asrs	r5, r5, #1
 800b338:	429d      	cmp	r5, r3
 800b33a:	bf38      	it	cc
 800b33c:	461d      	movcc	r5, r3
 800b33e:	0553      	lsls	r3, r2, #21
 800b340:	d527      	bpl.n	800b392 <__ssputs_r+0x8e>
 800b342:	4629      	mov	r1, r5
 800b344:	f7fe fc24 	bl	8009b90 <_malloc_r>
 800b348:	4606      	mov	r6, r0
 800b34a:	b360      	cbz	r0, 800b3a6 <__ssputs_r+0xa2>
 800b34c:	6921      	ldr	r1, [r4, #16]
 800b34e:	464a      	mov	r2, r9
 800b350:	f7fd fd3d 	bl	8008dce <memcpy>
 800b354:	89a3      	ldrh	r3, [r4, #12]
 800b356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b35a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b35e:	81a3      	strh	r3, [r4, #12]
 800b360:	6126      	str	r6, [r4, #16]
 800b362:	6165      	str	r5, [r4, #20]
 800b364:	444e      	add	r6, r9
 800b366:	eba5 0509 	sub.w	r5, r5, r9
 800b36a:	6026      	str	r6, [r4, #0]
 800b36c:	60a5      	str	r5, [r4, #8]
 800b36e:	463e      	mov	r6, r7
 800b370:	42be      	cmp	r6, r7
 800b372:	d900      	bls.n	800b376 <__ssputs_r+0x72>
 800b374:	463e      	mov	r6, r7
 800b376:	6820      	ldr	r0, [r4, #0]
 800b378:	4632      	mov	r2, r6
 800b37a:	4641      	mov	r1, r8
 800b37c:	f000 fb6a 	bl	800ba54 <memmove>
 800b380:	68a3      	ldr	r3, [r4, #8]
 800b382:	1b9b      	subs	r3, r3, r6
 800b384:	60a3      	str	r3, [r4, #8]
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	4433      	add	r3, r6
 800b38a:	6023      	str	r3, [r4, #0]
 800b38c:	2000      	movs	r0, #0
 800b38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b392:	462a      	mov	r2, r5
 800b394:	f000 ff41 	bl	800c21a <_realloc_r>
 800b398:	4606      	mov	r6, r0
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d1e0      	bne.n	800b360 <__ssputs_r+0x5c>
 800b39e:	6921      	ldr	r1, [r4, #16]
 800b3a0:	4650      	mov	r0, sl
 800b3a2:	f7fe fb81 	bl	8009aa8 <_free_r>
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	f8ca 3000 	str.w	r3, [sl]
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3b8:	e7e9      	b.n	800b38e <__ssputs_r+0x8a>
	...

0800b3bc <_svfiprintf_r>:
 800b3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c0:	4698      	mov	r8, r3
 800b3c2:	898b      	ldrh	r3, [r1, #12]
 800b3c4:	061b      	lsls	r3, r3, #24
 800b3c6:	b09d      	sub	sp, #116	@ 0x74
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	d510      	bpl.n	800b3f2 <_svfiprintf_r+0x36>
 800b3d0:	690b      	ldr	r3, [r1, #16]
 800b3d2:	b973      	cbnz	r3, 800b3f2 <_svfiprintf_r+0x36>
 800b3d4:	2140      	movs	r1, #64	@ 0x40
 800b3d6:	f7fe fbdb 	bl	8009b90 <_malloc_r>
 800b3da:	6028      	str	r0, [r5, #0]
 800b3dc:	6128      	str	r0, [r5, #16]
 800b3de:	b930      	cbnz	r0, 800b3ee <_svfiprintf_r+0x32>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3e8:	b01d      	add	sp, #116	@ 0x74
 800b3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ee:	2340      	movs	r3, #64	@ 0x40
 800b3f0:	616b      	str	r3, [r5, #20]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f6:	2320      	movs	r3, #32
 800b3f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b400:	2330      	movs	r3, #48	@ 0x30
 800b402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5a0 <_svfiprintf_r+0x1e4>
 800b406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b40a:	f04f 0901 	mov.w	r9, #1
 800b40e:	4623      	mov	r3, r4
 800b410:	469a      	mov	sl, r3
 800b412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b416:	b10a      	cbz	r2, 800b41c <_svfiprintf_r+0x60>
 800b418:	2a25      	cmp	r2, #37	@ 0x25
 800b41a:	d1f9      	bne.n	800b410 <_svfiprintf_r+0x54>
 800b41c:	ebba 0b04 	subs.w	fp, sl, r4
 800b420:	d00b      	beq.n	800b43a <_svfiprintf_r+0x7e>
 800b422:	465b      	mov	r3, fp
 800b424:	4622      	mov	r2, r4
 800b426:	4629      	mov	r1, r5
 800b428:	4638      	mov	r0, r7
 800b42a:	f7ff ff6b 	bl	800b304 <__ssputs_r>
 800b42e:	3001      	adds	r0, #1
 800b430:	f000 80a7 	beq.w	800b582 <_svfiprintf_r+0x1c6>
 800b434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b436:	445a      	add	r2, fp
 800b438:	9209      	str	r2, [sp, #36]	@ 0x24
 800b43a:	f89a 3000 	ldrb.w	r3, [sl]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 809f 	beq.w	800b582 <_svfiprintf_r+0x1c6>
 800b444:	2300      	movs	r3, #0
 800b446:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b44a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b44e:	f10a 0a01 	add.w	sl, sl, #1
 800b452:	9304      	str	r3, [sp, #16]
 800b454:	9307      	str	r3, [sp, #28]
 800b456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b45a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b45c:	4654      	mov	r4, sl
 800b45e:	2205      	movs	r2, #5
 800b460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b464:	484e      	ldr	r0, [pc, #312]	@ (800b5a0 <_svfiprintf_r+0x1e4>)
 800b466:	f7f4 fedb 	bl	8000220 <memchr>
 800b46a:	9a04      	ldr	r2, [sp, #16]
 800b46c:	b9d8      	cbnz	r0, 800b4a6 <_svfiprintf_r+0xea>
 800b46e:	06d0      	lsls	r0, r2, #27
 800b470:	bf44      	itt	mi
 800b472:	2320      	movmi	r3, #32
 800b474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b478:	0711      	lsls	r1, r2, #28
 800b47a:	bf44      	itt	mi
 800b47c:	232b      	movmi	r3, #43	@ 0x2b
 800b47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b482:	f89a 3000 	ldrb.w	r3, [sl]
 800b486:	2b2a      	cmp	r3, #42	@ 0x2a
 800b488:	d015      	beq.n	800b4b6 <_svfiprintf_r+0xfa>
 800b48a:	9a07      	ldr	r2, [sp, #28]
 800b48c:	4654      	mov	r4, sl
 800b48e:	2000      	movs	r0, #0
 800b490:	f04f 0c0a 	mov.w	ip, #10
 800b494:	4621      	mov	r1, r4
 800b496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b49a:	3b30      	subs	r3, #48	@ 0x30
 800b49c:	2b09      	cmp	r3, #9
 800b49e:	d94b      	bls.n	800b538 <_svfiprintf_r+0x17c>
 800b4a0:	b1b0      	cbz	r0, 800b4d0 <_svfiprintf_r+0x114>
 800b4a2:	9207      	str	r2, [sp, #28]
 800b4a4:	e014      	b.n	800b4d0 <_svfiprintf_r+0x114>
 800b4a6:	eba0 0308 	sub.w	r3, r0, r8
 800b4aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	46a2      	mov	sl, r4
 800b4b4:	e7d2      	b.n	800b45c <_svfiprintf_r+0xa0>
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	1d19      	adds	r1, r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	9103      	str	r1, [sp, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bfbb      	ittet	lt
 800b4c2:	425b      	neglt	r3, r3
 800b4c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b4c8:	9307      	strge	r3, [sp, #28]
 800b4ca:	9307      	strlt	r3, [sp, #28]
 800b4cc:	bfb8      	it	lt
 800b4ce:	9204      	strlt	r2, [sp, #16]
 800b4d0:	7823      	ldrb	r3, [r4, #0]
 800b4d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4d4:	d10a      	bne.n	800b4ec <_svfiprintf_r+0x130>
 800b4d6:	7863      	ldrb	r3, [r4, #1]
 800b4d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4da:	d132      	bne.n	800b542 <_svfiprintf_r+0x186>
 800b4dc:	9b03      	ldr	r3, [sp, #12]
 800b4de:	1d1a      	adds	r2, r3, #4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	9203      	str	r2, [sp, #12]
 800b4e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4e8:	3402      	adds	r4, #2
 800b4ea:	9305      	str	r3, [sp, #20]
 800b4ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5b0 <_svfiprintf_r+0x1f4>
 800b4f0:	7821      	ldrb	r1, [r4, #0]
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	4650      	mov	r0, sl
 800b4f6:	f7f4 fe93 	bl	8000220 <memchr>
 800b4fa:	b138      	cbz	r0, 800b50c <_svfiprintf_r+0x150>
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	eba0 000a 	sub.w	r0, r0, sl
 800b502:	2240      	movs	r2, #64	@ 0x40
 800b504:	4082      	lsls	r2, r0
 800b506:	4313      	orrs	r3, r2
 800b508:	3401      	adds	r4, #1
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b510:	4824      	ldr	r0, [pc, #144]	@ (800b5a4 <_svfiprintf_r+0x1e8>)
 800b512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b516:	2206      	movs	r2, #6
 800b518:	f7f4 fe82 	bl	8000220 <memchr>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d036      	beq.n	800b58e <_svfiprintf_r+0x1d2>
 800b520:	4b21      	ldr	r3, [pc, #132]	@ (800b5a8 <_svfiprintf_r+0x1ec>)
 800b522:	bb1b      	cbnz	r3, 800b56c <_svfiprintf_r+0x1b0>
 800b524:	9b03      	ldr	r3, [sp, #12]
 800b526:	3307      	adds	r3, #7
 800b528:	f023 0307 	bic.w	r3, r3, #7
 800b52c:	3308      	adds	r3, #8
 800b52e:	9303      	str	r3, [sp, #12]
 800b530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b532:	4433      	add	r3, r6
 800b534:	9309      	str	r3, [sp, #36]	@ 0x24
 800b536:	e76a      	b.n	800b40e <_svfiprintf_r+0x52>
 800b538:	fb0c 3202 	mla	r2, ip, r2, r3
 800b53c:	460c      	mov	r4, r1
 800b53e:	2001      	movs	r0, #1
 800b540:	e7a8      	b.n	800b494 <_svfiprintf_r+0xd8>
 800b542:	2300      	movs	r3, #0
 800b544:	3401      	adds	r4, #1
 800b546:	9305      	str	r3, [sp, #20]
 800b548:	4619      	mov	r1, r3
 800b54a:	f04f 0c0a 	mov.w	ip, #10
 800b54e:	4620      	mov	r0, r4
 800b550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b554:	3a30      	subs	r2, #48	@ 0x30
 800b556:	2a09      	cmp	r2, #9
 800b558:	d903      	bls.n	800b562 <_svfiprintf_r+0x1a6>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d0c6      	beq.n	800b4ec <_svfiprintf_r+0x130>
 800b55e:	9105      	str	r1, [sp, #20]
 800b560:	e7c4      	b.n	800b4ec <_svfiprintf_r+0x130>
 800b562:	fb0c 2101 	mla	r1, ip, r1, r2
 800b566:	4604      	mov	r4, r0
 800b568:	2301      	movs	r3, #1
 800b56a:	e7f0      	b.n	800b54e <_svfiprintf_r+0x192>
 800b56c:	ab03      	add	r3, sp, #12
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	462a      	mov	r2, r5
 800b572:	4b0e      	ldr	r3, [pc, #56]	@ (800b5ac <_svfiprintf_r+0x1f0>)
 800b574:	a904      	add	r1, sp, #16
 800b576:	4638      	mov	r0, r7
 800b578:	f7fc fbf4 	bl	8007d64 <_printf_float>
 800b57c:	1c42      	adds	r2, r0, #1
 800b57e:	4606      	mov	r6, r0
 800b580:	d1d6      	bne.n	800b530 <_svfiprintf_r+0x174>
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	065b      	lsls	r3, r3, #25
 800b586:	f53f af2d 	bmi.w	800b3e4 <_svfiprintf_r+0x28>
 800b58a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b58c:	e72c      	b.n	800b3e8 <_svfiprintf_r+0x2c>
 800b58e:	ab03      	add	r3, sp, #12
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	462a      	mov	r2, r5
 800b594:	4b05      	ldr	r3, [pc, #20]	@ (800b5ac <_svfiprintf_r+0x1f0>)
 800b596:	a904      	add	r1, sp, #16
 800b598:	4638      	mov	r0, r7
 800b59a:	f7fc fe7b 	bl	8008294 <_printf_i>
 800b59e:	e7ed      	b.n	800b57c <_svfiprintf_r+0x1c0>
 800b5a0:	0800c595 	.word	0x0800c595
 800b5a4:	0800c59f 	.word	0x0800c59f
 800b5a8:	08007d65 	.word	0x08007d65
 800b5ac:	0800b305 	.word	0x0800b305
 800b5b0:	0800c59b 	.word	0x0800c59b

0800b5b4 <__sfputc_r>:
 800b5b4:	6893      	ldr	r3, [r2, #8]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	b410      	push	{r4}
 800b5bc:	6093      	str	r3, [r2, #8]
 800b5be:	da08      	bge.n	800b5d2 <__sfputc_r+0x1e>
 800b5c0:	6994      	ldr	r4, [r2, #24]
 800b5c2:	42a3      	cmp	r3, r4
 800b5c4:	db01      	blt.n	800b5ca <__sfputc_r+0x16>
 800b5c6:	290a      	cmp	r1, #10
 800b5c8:	d103      	bne.n	800b5d2 <__sfputc_r+0x1e>
 800b5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5ce:	f7fd baea 	b.w	8008ba6 <__swbuf_r>
 800b5d2:	6813      	ldr	r3, [r2, #0]
 800b5d4:	1c58      	adds	r0, r3, #1
 800b5d6:	6010      	str	r0, [r2, #0]
 800b5d8:	7019      	strb	r1, [r3, #0]
 800b5da:	4608      	mov	r0, r1
 800b5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <__sfputs_r>:
 800b5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	460f      	mov	r7, r1
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	18d5      	adds	r5, r2, r3
 800b5ec:	42ac      	cmp	r4, r5
 800b5ee:	d101      	bne.n	800b5f4 <__sfputs_r+0x12>
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	e007      	b.n	800b604 <__sfputs_r+0x22>
 800b5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f8:	463a      	mov	r2, r7
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7ff ffda 	bl	800b5b4 <__sfputc_r>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d1f3      	bne.n	800b5ec <__sfputs_r+0xa>
 800b604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b608 <_vfiprintf_r>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	460d      	mov	r5, r1
 800b60e:	b09d      	sub	sp, #116	@ 0x74
 800b610:	4614      	mov	r4, r2
 800b612:	4698      	mov	r8, r3
 800b614:	4606      	mov	r6, r0
 800b616:	b118      	cbz	r0, 800b620 <_vfiprintf_r+0x18>
 800b618:	6a03      	ldr	r3, [r0, #32]
 800b61a:	b90b      	cbnz	r3, 800b620 <_vfiprintf_r+0x18>
 800b61c:	f7fd f9f2 	bl	8008a04 <__sinit>
 800b620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b622:	07d9      	lsls	r1, r3, #31
 800b624:	d405      	bmi.n	800b632 <_vfiprintf_r+0x2a>
 800b626:	89ab      	ldrh	r3, [r5, #12]
 800b628:	059a      	lsls	r2, r3, #22
 800b62a:	d402      	bmi.n	800b632 <_vfiprintf_r+0x2a>
 800b62c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b62e:	f7fd fbcc 	bl	8008dca <__retarget_lock_acquire_recursive>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	071b      	lsls	r3, r3, #28
 800b636:	d501      	bpl.n	800b63c <_vfiprintf_r+0x34>
 800b638:	692b      	ldr	r3, [r5, #16]
 800b63a:	b99b      	cbnz	r3, 800b664 <_vfiprintf_r+0x5c>
 800b63c:	4629      	mov	r1, r5
 800b63e:	4630      	mov	r0, r6
 800b640:	f7fd faf0 	bl	8008c24 <__swsetup_r>
 800b644:	b170      	cbz	r0, 800b664 <_vfiprintf_r+0x5c>
 800b646:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b648:	07dc      	lsls	r4, r3, #31
 800b64a:	d504      	bpl.n	800b656 <_vfiprintf_r+0x4e>
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b650:	b01d      	add	sp, #116	@ 0x74
 800b652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b656:	89ab      	ldrh	r3, [r5, #12]
 800b658:	0598      	lsls	r0, r3, #22
 800b65a:	d4f7      	bmi.n	800b64c <_vfiprintf_r+0x44>
 800b65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b65e:	f7fd fbb5 	bl	8008dcc <__retarget_lock_release_recursive>
 800b662:	e7f3      	b.n	800b64c <_vfiprintf_r+0x44>
 800b664:	2300      	movs	r3, #0
 800b666:	9309      	str	r3, [sp, #36]	@ 0x24
 800b668:	2320      	movs	r3, #32
 800b66a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b66e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b672:	2330      	movs	r3, #48	@ 0x30
 800b674:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b824 <_vfiprintf_r+0x21c>
 800b678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b67c:	f04f 0901 	mov.w	r9, #1
 800b680:	4623      	mov	r3, r4
 800b682:	469a      	mov	sl, r3
 800b684:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b688:	b10a      	cbz	r2, 800b68e <_vfiprintf_r+0x86>
 800b68a:	2a25      	cmp	r2, #37	@ 0x25
 800b68c:	d1f9      	bne.n	800b682 <_vfiprintf_r+0x7a>
 800b68e:	ebba 0b04 	subs.w	fp, sl, r4
 800b692:	d00b      	beq.n	800b6ac <_vfiprintf_r+0xa4>
 800b694:	465b      	mov	r3, fp
 800b696:	4622      	mov	r2, r4
 800b698:	4629      	mov	r1, r5
 800b69a:	4630      	mov	r0, r6
 800b69c:	f7ff ffa1 	bl	800b5e2 <__sfputs_r>
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	f000 80a7 	beq.w	800b7f4 <_vfiprintf_r+0x1ec>
 800b6a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6a8:	445a      	add	r2, fp
 800b6aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 809f 	beq.w	800b7f4 <_vfiprintf_r+0x1ec>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c0:	f10a 0a01 	add.w	sl, sl, #1
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	9307      	str	r3, [sp, #28]
 800b6c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6ce:	4654      	mov	r4, sl
 800b6d0:	2205      	movs	r2, #5
 800b6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d6:	4853      	ldr	r0, [pc, #332]	@ (800b824 <_vfiprintf_r+0x21c>)
 800b6d8:	f7f4 fda2 	bl	8000220 <memchr>
 800b6dc:	9a04      	ldr	r2, [sp, #16]
 800b6de:	b9d8      	cbnz	r0, 800b718 <_vfiprintf_r+0x110>
 800b6e0:	06d1      	lsls	r1, r2, #27
 800b6e2:	bf44      	itt	mi
 800b6e4:	2320      	movmi	r3, #32
 800b6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6ea:	0713      	lsls	r3, r2, #28
 800b6ec:	bf44      	itt	mi
 800b6ee:	232b      	movmi	r3, #43	@ 0x2b
 800b6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6fa:	d015      	beq.n	800b728 <_vfiprintf_r+0x120>
 800b6fc:	9a07      	ldr	r2, [sp, #28]
 800b6fe:	4654      	mov	r4, sl
 800b700:	2000      	movs	r0, #0
 800b702:	f04f 0c0a 	mov.w	ip, #10
 800b706:	4621      	mov	r1, r4
 800b708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b70c:	3b30      	subs	r3, #48	@ 0x30
 800b70e:	2b09      	cmp	r3, #9
 800b710:	d94b      	bls.n	800b7aa <_vfiprintf_r+0x1a2>
 800b712:	b1b0      	cbz	r0, 800b742 <_vfiprintf_r+0x13a>
 800b714:	9207      	str	r2, [sp, #28]
 800b716:	e014      	b.n	800b742 <_vfiprintf_r+0x13a>
 800b718:	eba0 0308 	sub.w	r3, r0, r8
 800b71c:	fa09 f303 	lsl.w	r3, r9, r3
 800b720:	4313      	orrs	r3, r2
 800b722:	9304      	str	r3, [sp, #16]
 800b724:	46a2      	mov	sl, r4
 800b726:	e7d2      	b.n	800b6ce <_vfiprintf_r+0xc6>
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	1d19      	adds	r1, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	9103      	str	r1, [sp, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	bfbb      	ittet	lt
 800b734:	425b      	neglt	r3, r3
 800b736:	f042 0202 	orrlt.w	r2, r2, #2
 800b73a:	9307      	strge	r3, [sp, #28]
 800b73c:	9307      	strlt	r3, [sp, #28]
 800b73e:	bfb8      	it	lt
 800b740:	9204      	strlt	r2, [sp, #16]
 800b742:	7823      	ldrb	r3, [r4, #0]
 800b744:	2b2e      	cmp	r3, #46	@ 0x2e
 800b746:	d10a      	bne.n	800b75e <_vfiprintf_r+0x156>
 800b748:	7863      	ldrb	r3, [r4, #1]
 800b74a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b74c:	d132      	bne.n	800b7b4 <_vfiprintf_r+0x1ac>
 800b74e:	9b03      	ldr	r3, [sp, #12]
 800b750:	1d1a      	adds	r2, r3, #4
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	9203      	str	r2, [sp, #12]
 800b756:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b75a:	3402      	adds	r4, #2
 800b75c:	9305      	str	r3, [sp, #20]
 800b75e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b834 <_vfiprintf_r+0x22c>
 800b762:	7821      	ldrb	r1, [r4, #0]
 800b764:	2203      	movs	r2, #3
 800b766:	4650      	mov	r0, sl
 800b768:	f7f4 fd5a 	bl	8000220 <memchr>
 800b76c:	b138      	cbz	r0, 800b77e <_vfiprintf_r+0x176>
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	eba0 000a 	sub.w	r0, r0, sl
 800b774:	2240      	movs	r2, #64	@ 0x40
 800b776:	4082      	lsls	r2, r0
 800b778:	4313      	orrs	r3, r2
 800b77a:	3401      	adds	r4, #1
 800b77c:	9304      	str	r3, [sp, #16]
 800b77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b782:	4829      	ldr	r0, [pc, #164]	@ (800b828 <_vfiprintf_r+0x220>)
 800b784:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b788:	2206      	movs	r2, #6
 800b78a:	f7f4 fd49 	bl	8000220 <memchr>
 800b78e:	2800      	cmp	r0, #0
 800b790:	d03f      	beq.n	800b812 <_vfiprintf_r+0x20a>
 800b792:	4b26      	ldr	r3, [pc, #152]	@ (800b82c <_vfiprintf_r+0x224>)
 800b794:	bb1b      	cbnz	r3, 800b7de <_vfiprintf_r+0x1d6>
 800b796:	9b03      	ldr	r3, [sp, #12]
 800b798:	3307      	adds	r3, #7
 800b79a:	f023 0307 	bic.w	r3, r3, #7
 800b79e:	3308      	adds	r3, #8
 800b7a0:	9303      	str	r3, [sp, #12]
 800b7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a4:	443b      	add	r3, r7
 800b7a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7a8:	e76a      	b.n	800b680 <_vfiprintf_r+0x78>
 800b7aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	e7a8      	b.n	800b706 <_vfiprintf_r+0xfe>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	3401      	adds	r4, #1
 800b7b8:	9305      	str	r3, [sp, #20]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	f04f 0c0a 	mov.w	ip, #10
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7c6:	3a30      	subs	r2, #48	@ 0x30
 800b7c8:	2a09      	cmp	r2, #9
 800b7ca:	d903      	bls.n	800b7d4 <_vfiprintf_r+0x1cc>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d0c6      	beq.n	800b75e <_vfiprintf_r+0x156>
 800b7d0:	9105      	str	r1, [sp, #20]
 800b7d2:	e7c4      	b.n	800b75e <_vfiprintf_r+0x156>
 800b7d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7d8:	4604      	mov	r4, r0
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e7f0      	b.n	800b7c0 <_vfiprintf_r+0x1b8>
 800b7de:	ab03      	add	r3, sp, #12
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	462a      	mov	r2, r5
 800b7e4:	4b12      	ldr	r3, [pc, #72]	@ (800b830 <_vfiprintf_r+0x228>)
 800b7e6:	a904      	add	r1, sp, #16
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7fc fabb 	bl	8007d64 <_printf_float>
 800b7ee:	4607      	mov	r7, r0
 800b7f0:	1c78      	adds	r0, r7, #1
 800b7f2:	d1d6      	bne.n	800b7a2 <_vfiprintf_r+0x19a>
 800b7f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7f6:	07d9      	lsls	r1, r3, #31
 800b7f8:	d405      	bmi.n	800b806 <_vfiprintf_r+0x1fe>
 800b7fa:	89ab      	ldrh	r3, [r5, #12]
 800b7fc:	059a      	lsls	r2, r3, #22
 800b7fe:	d402      	bmi.n	800b806 <_vfiprintf_r+0x1fe>
 800b800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b802:	f7fd fae3 	bl	8008dcc <__retarget_lock_release_recursive>
 800b806:	89ab      	ldrh	r3, [r5, #12]
 800b808:	065b      	lsls	r3, r3, #25
 800b80a:	f53f af1f 	bmi.w	800b64c <_vfiprintf_r+0x44>
 800b80e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b810:	e71e      	b.n	800b650 <_vfiprintf_r+0x48>
 800b812:	ab03      	add	r3, sp, #12
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	462a      	mov	r2, r5
 800b818:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <_vfiprintf_r+0x228>)
 800b81a:	a904      	add	r1, sp, #16
 800b81c:	4630      	mov	r0, r6
 800b81e:	f7fc fd39 	bl	8008294 <_printf_i>
 800b822:	e7e4      	b.n	800b7ee <_vfiprintf_r+0x1e6>
 800b824:	0800c595 	.word	0x0800c595
 800b828:	0800c59f 	.word	0x0800c59f
 800b82c:	08007d65 	.word	0x08007d65
 800b830:	0800b5e3 	.word	0x0800b5e3
 800b834:	0800c59b 	.word	0x0800c59b

0800b838 <__sflush_r>:
 800b838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b840:	0716      	lsls	r6, r2, #28
 800b842:	4605      	mov	r5, r0
 800b844:	460c      	mov	r4, r1
 800b846:	d454      	bmi.n	800b8f2 <__sflush_r+0xba>
 800b848:	684b      	ldr	r3, [r1, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	dc02      	bgt.n	800b854 <__sflush_r+0x1c>
 800b84e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b850:	2b00      	cmp	r3, #0
 800b852:	dd48      	ble.n	800b8e6 <__sflush_r+0xae>
 800b854:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b856:	2e00      	cmp	r6, #0
 800b858:	d045      	beq.n	800b8e6 <__sflush_r+0xae>
 800b85a:	2300      	movs	r3, #0
 800b85c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b860:	682f      	ldr	r7, [r5, #0]
 800b862:	6a21      	ldr	r1, [r4, #32]
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	d030      	beq.n	800b8ca <__sflush_r+0x92>
 800b868:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	0759      	lsls	r1, r3, #29
 800b86e:	d505      	bpl.n	800b87c <__sflush_r+0x44>
 800b870:	6863      	ldr	r3, [r4, #4]
 800b872:	1ad2      	subs	r2, r2, r3
 800b874:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b876:	b10b      	cbz	r3, 800b87c <__sflush_r+0x44>
 800b878:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b87a:	1ad2      	subs	r2, r2, r3
 800b87c:	2300      	movs	r3, #0
 800b87e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b880:	6a21      	ldr	r1, [r4, #32]
 800b882:	4628      	mov	r0, r5
 800b884:	47b0      	blx	r6
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	d106      	bne.n	800b89a <__sflush_r+0x62>
 800b88c:	6829      	ldr	r1, [r5, #0]
 800b88e:	291d      	cmp	r1, #29
 800b890:	d82b      	bhi.n	800b8ea <__sflush_r+0xb2>
 800b892:	4a2a      	ldr	r2, [pc, #168]	@ (800b93c <__sflush_r+0x104>)
 800b894:	40ca      	lsrs	r2, r1
 800b896:	07d6      	lsls	r6, r2, #31
 800b898:	d527      	bpl.n	800b8ea <__sflush_r+0xb2>
 800b89a:	2200      	movs	r2, #0
 800b89c:	6062      	str	r2, [r4, #4]
 800b89e:	04d9      	lsls	r1, r3, #19
 800b8a0:	6922      	ldr	r2, [r4, #16]
 800b8a2:	6022      	str	r2, [r4, #0]
 800b8a4:	d504      	bpl.n	800b8b0 <__sflush_r+0x78>
 800b8a6:	1c42      	adds	r2, r0, #1
 800b8a8:	d101      	bne.n	800b8ae <__sflush_r+0x76>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	b903      	cbnz	r3, 800b8b0 <__sflush_r+0x78>
 800b8ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8b2:	602f      	str	r7, [r5, #0]
 800b8b4:	b1b9      	cbz	r1, 800b8e6 <__sflush_r+0xae>
 800b8b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8ba:	4299      	cmp	r1, r3
 800b8bc:	d002      	beq.n	800b8c4 <__sflush_r+0x8c>
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f7fe f8f2 	bl	8009aa8 <_free_r>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8c8:	e00d      	b.n	800b8e6 <__sflush_r+0xae>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	47b0      	blx	r6
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	1c50      	adds	r0, r2, #1
 800b8d4:	d1c9      	bne.n	800b86a <__sflush_r+0x32>
 800b8d6:	682b      	ldr	r3, [r5, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d0c6      	beq.n	800b86a <__sflush_r+0x32>
 800b8dc:	2b1d      	cmp	r3, #29
 800b8de:	d001      	beq.n	800b8e4 <__sflush_r+0xac>
 800b8e0:	2b16      	cmp	r3, #22
 800b8e2:	d11e      	bne.n	800b922 <__sflush_r+0xea>
 800b8e4:	602f      	str	r7, [r5, #0]
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	e022      	b.n	800b930 <__sflush_r+0xf8>
 800b8ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ee:	b21b      	sxth	r3, r3
 800b8f0:	e01b      	b.n	800b92a <__sflush_r+0xf2>
 800b8f2:	690f      	ldr	r7, [r1, #16]
 800b8f4:	2f00      	cmp	r7, #0
 800b8f6:	d0f6      	beq.n	800b8e6 <__sflush_r+0xae>
 800b8f8:	0793      	lsls	r3, r2, #30
 800b8fa:	680e      	ldr	r6, [r1, #0]
 800b8fc:	bf08      	it	eq
 800b8fe:	694b      	ldreq	r3, [r1, #20]
 800b900:	600f      	str	r7, [r1, #0]
 800b902:	bf18      	it	ne
 800b904:	2300      	movne	r3, #0
 800b906:	eba6 0807 	sub.w	r8, r6, r7
 800b90a:	608b      	str	r3, [r1, #8]
 800b90c:	f1b8 0f00 	cmp.w	r8, #0
 800b910:	dde9      	ble.n	800b8e6 <__sflush_r+0xae>
 800b912:	6a21      	ldr	r1, [r4, #32]
 800b914:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b916:	4643      	mov	r3, r8
 800b918:	463a      	mov	r2, r7
 800b91a:	4628      	mov	r0, r5
 800b91c:	47b0      	blx	r6
 800b91e:	2800      	cmp	r0, #0
 800b920:	dc08      	bgt.n	800b934 <__sflush_r+0xfc>
 800b922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b934:	4407      	add	r7, r0
 800b936:	eba8 0800 	sub.w	r8, r8, r0
 800b93a:	e7e7      	b.n	800b90c <__sflush_r+0xd4>
 800b93c:	20400001 	.word	0x20400001

0800b940 <_fflush_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	690b      	ldr	r3, [r1, #16]
 800b944:	4605      	mov	r5, r0
 800b946:	460c      	mov	r4, r1
 800b948:	b913      	cbnz	r3, 800b950 <_fflush_r+0x10>
 800b94a:	2500      	movs	r5, #0
 800b94c:	4628      	mov	r0, r5
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	b118      	cbz	r0, 800b95a <_fflush_r+0x1a>
 800b952:	6a03      	ldr	r3, [r0, #32]
 800b954:	b90b      	cbnz	r3, 800b95a <_fflush_r+0x1a>
 800b956:	f7fd f855 	bl	8008a04 <__sinit>
 800b95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0f3      	beq.n	800b94a <_fflush_r+0xa>
 800b962:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b964:	07d0      	lsls	r0, r2, #31
 800b966:	d404      	bmi.n	800b972 <_fflush_r+0x32>
 800b968:	0599      	lsls	r1, r3, #22
 800b96a:	d402      	bmi.n	800b972 <_fflush_r+0x32>
 800b96c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b96e:	f7fd fa2c 	bl	8008dca <__retarget_lock_acquire_recursive>
 800b972:	4628      	mov	r0, r5
 800b974:	4621      	mov	r1, r4
 800b976:	f7ff ff5f 	bl	800b838 <__sflush_r>
 800b97a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b97c:	07da      	lsls	r2, r3, #31
 800b97e:	4605      	mov	r5, r0
 800b980:	d4e4      	bmi.n	800b94c <_fflush_r+0xc>
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	059b      	lsls	r3, r3, #22
 800b986:	d4e1      	bmi.n	800b94c <_fflush_r+0xc>
 800b988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b98a:	f7fd fa1f 	bl	8008dcc <__retarget_lock_release_recursive>
 800b98e:	e7dd      	b.n	800b94c <_fflush_r+0xc>

0800b990 <__swhatbuf_r>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	460c      	mov	r4, r1
 800b994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b998:	2900      	cmp	r1, #0
 800b99a:	b096      	sub	sp, #88	@ 0x58
 800b99c:	4615      	mov	r5, r2
 800b99e:	461e      	mov	r6, r3
 800b9a0:	da0d      	bge.n	800b9be <__swhatbuf_r+0x2e>
 800b9a2:	89a3      	ldrh	r3, [r4, #12]
 800b9a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9a8:	f04f 0100 	mov.w	r1, #0
 800b9ac:	bf14      	ite	ne
 800b9ae:	2340      	movne	r3, #64	@ 0x40
 800b9b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	6031      	str	r1, [r6, #0]
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	b016      	add	sp, #88	@ 0x58
 800b9bc:	bd70      	pop	{r4, r5, r6, pc}
 800b9be:	466a      	mov	r2, sp
 800b9c0:	f000 f874 	bl	800baac <_fstat_r>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	dbec      	blt.n	800b9a2 <__swhatbuf_r+0x12>
 800b9c8:	9901      	ldr	r1, [sp, #4]
 800b9ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9d2:	4259      	negs	r1, r3
 800b9d4:	4159      	adcs	r1, r3
 800b9d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9da:	e7eb      	b.n	800b9b4 <__swhatbuf_r+0x24>

0800b9dc <__smakebuf_r>:
 800b9dc:	898b      	ldrh	r3, [r1, #12]
 800b9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9e0:	079d      	lsls	r5, r3, #30
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	d507      	bpl.n	800b9f8 <__smakebuf_r+0x1c>
 800b9e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	6163      	str	r3, [r4, #20]
 800b9f4:	b003      	add	sp, #12
 800b9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9f8:	ab01      	add	r3, sp, #4
 800b9fa:	466a      	mov	r2, sp
 800b9fc:	f7ff ffc8 	bl	800b990 <__swhatbuf_r>
 800ba00:	9f00      	ldr	r7, [sp, #0]
 800ba02:	4605      	mov	r5, r0
 800ba04:	4639      	mov	r1, r7
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7fe f8c2 	bl	8009b90 <_malloc_r>
 800ba0c:	b948      	cbnz	r0, 800ba22 <__smakebuf_r+0x46>
 800ba0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba12:	059a      	lsls	r2, r3, #22
 800ba14:	d4ee      	bmi.n	800b9f4 <__smakebuf_r+0x18>
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	f043 0302 	orr.w	r3, r3, #2
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	e7e2      	b.n	800b9e8 <__smakebuf_r+0xc>
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	6020      	str	r0, [r4, #0]
 800ba26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	9b01      	ldr	r3, [sp, #4]
 800ba2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba32:	b15b      	cbz	r3, 800ba4c <__smakebuf_r+0x70>
 800ba34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f000 f849 	bl	800bad0 <_isatty_r>
 800ba3e:	b128      	cbz	r0, 800ba4c <__smakebuf_r+0x70>
 800ba40:	89a3      	ldrh	r3, [r4, #12]
 800ba42:	f023 0303 	bic.w	r3, r3, #3
 800ba46:	f043 0301 	orr.w	r3, r3, #1
 800ba4a:	81a3      	strh	r3, [r4, #12]
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	431d      	orrs	r5, r3
 800ba50:	81a5      	strh	r5, [r4, #12]
 800ba52:	e7cf      	b.n	800b9f4 <__smakebuf_r+0x18>

0800ba54 <memmove>:
 800ba54:	4288      	cmp	r0, r1
 800ba56:	b510      	push	{r4, lr}
 800ba58:	eb01 0402 	add.w	r4, r1, r2
 800ba5c:	d902      	bls.n	800ba64 <memmove+0x10>
 800ba5e:	4284      	cmp	r4, r0
 800ba60:	4623      	mov	r3, r4
 800ba62:	d807      	bhi.n	800ba74 <memmove+0x20>
 800ba64:	1e43      	subs	r3, r0, #1
 800ba66:	42a1      	cmp	r1, r4
 800ba68:	d008      	beq.n	800ba7c <memmove+0x28>
 800ba6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba72:	e7f8      	b.n	800ba66 <memmove+0x12>
 800ba74:	4402      	add	r2, r0
 800ba76:	4601      	mov	r1, r0
 800ba78:	428a      	cmp	r2, r1
 800ba7a:	d100      	bne.n	800ba7e <memmove+0x2a>
 800ba7c:	bd10      	pop	{r4, pc}
 800ba7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba86:	e7f7      	b.n	800ba78 <memmove+0x24>

0800ba88 <strncmp>:
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	b16a      	cbz	r2, 800baa8 <strncmp+0x20>
 800ba8c:	3901      	subs	r1, #1
 800ba8e:	1884      	adds	r4, r0, r2
 800ba90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d103      	bne.n	800baa4 <strncmp+0x1c>
 800ba9c:	42a0      	cmp	r0, r4
 800ba9e:	d001      	beq.n	800baa4 <strncmp+0x1c>
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	d1f5      	bne.n	800ba90 <strncmp+0x8>
 800baa4:	1ad0      	subs	r0, r2, r3
 800baa6:	bd10      	pop	{r4, pc}
 800baa8:	4610      	mov	r0, r2
 800baaa:	e7fc      	b.n	800baa6 <strncmp+0x1e>

0800baac <_fstat_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d07      	ldr	r5, [pc, #28]	@ (800bacc <_fstat_r+0x20>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	f7f7 fcda 	bl	8003472 <_fstat>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d102      	bne.n	800bac8 <_fstat_r+0x1c>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	b103      	cbz	r3, 800bac8 <_fstat_r+0x1c>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	200007a0 	.word	0x200007a0

0800bad0 <_isatty_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d06      	ldr	r5, [pc, #24]	@ (800baec <_isatty_r+0x1c>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f7 fcd9 	bl	8003492 <_isatty>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_isatty_r+0x1a>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_isatty_r+0x1a>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	200007a0 	.word	0x200007a0

0800baf0 <_sbrk_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d06      	ldr	r5, [pc, #24]	@ (800bb0c <_sbrk_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f7 fce2 	bl	80034c4 <_sbrk>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_sbrk_r+0x1a>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_sbrk_r+0x1a>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	200007a0 	.word	0x200007a0

0800bb10 <nan>:
 800bb10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb18 <nan+0x8>
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	00000000 	.word	0x00000000
 800bb1c:	7ff80000 	.word	0x7ff80000

0800bb20 <__assert_func>:
 800bb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb22:	4614      	mov	r4, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4b09      	ldr	r3, [pc, #36]	@ (800bb4c <__assert_func+0x2c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	68d8      	ldr	r0, [r3, #12]
 800bb2e:	b14c      	cbz	r4, 800bb44 <__assert_func+0x24>
 800bb30:	4b07      	ldr	r3, [pc, #28]	@ (800bb50 <__assert_func+0x30>)
 800bb32:	9100      	str	r1, [sp, #0]
 800bb34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb38:	4906      	ldr	r1, [pc, #24]	@ (800bb54 <__assert_func+0x34>)
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f000 fba8 	bl	800c290 <fiprintf>
 800bb40:	f000 fbb8 	bl	800c2b4 <abort>
 800bb44:	4b04      	ldr	r3, [pc, #16]	@ (800bb58 <__assert_func+0x38>)
 800bb46:	461c      	mov	r4, r3
 800bb48:	e7f3      	b.n	800bb32 <__assert_func+0x12>
 800bb4a:	bf00      	nop
 800bb4c:	20000038 	.word	0x20000038
 800bb50:	0800c5ae 	.word	0x0800c5ae
 800bb54:	0800c5bb 	.word	0x0800c5bb
 800bb58:	0800c5e9 	.word	0x0800c5e9

0800bb5c <_calloc_r>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	fba1 5402 	umull	r5, r4, r1, r2
 800bb62:	b934      	cbnz	r4, 800bb72 <_calloc_r+0x16>
 800bb64:	4629      	mov	r1, r5
 800bb66:	f7fe f813 	bl	8009b90 <_malloc_r>
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <_calloc_r+0x1e>
 800bb6e:	4630      	mov	r0, r6
 800bb70:	bd70      	pop	{r4, r5, r6, pc}
 800bb72:	220c      	movs	r2, #12
 800bb74:	6002      	str	r2, [r0, #0]
 800bb76:	2600      	movs	r6, #0
 800bb78:	e7f9      	b.n	800bb6e <_calloc_r+0x12>
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	4621      	mov	r1, r4
 800bb7e:	f7fd f8a7 	bl	8008cd0 <memset>
 800bb82:	e7f4      	b.n	800bb6e <_calloc_r+0x12>

0800bb84 <rshift>:
 800bb84:	6903      	ldr	r3, [r0, #16]
 800bb86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb92:	f100 0414 	add.w	r4, r0, #20
 800bb96:	dd45      	ble.n	800bc24 <rshift+0xa0>
 800bb98:	f011 011f 	ands.w	r1, r1, #31
 800bb9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bba0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bba4:	d10c      	bne.n	800bbc0 <rshift+0x3c>
 800bba6:	f100 0710 	add.w	r7, r0, #16
 800bbaa:	4629      	mov	r1, r5
 800bbac:	42b1      	cmp	r1, r6
 800bbae:	d334      	bcc.n	800bc1a <rshift+0x96>
 800bbb0:	1a9b      	subs	r3, r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	1eea      	subs	r2, r5, #3
 800bbb6:	4296      	cmp	r6, r2
 800bbb8:	bf38      	it	cc
 800bbba:	2300      	movcc	r3, #0
 800bbbc:	4423      	add	r3, r4
 800bbbe:	e015      	b.n	800bbec <rshift+0x68>
 800bbc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbc4:	f1c1 0820 	rsb	r8, r1, #32
 800bbc8:	40cf      	lsrs	r7, r1
 800bbca:	f105 0e04 	add.w	lr, r5, #4
 800bbce:	46a1      	mov	r9, r4
 800bbd0:	4576      	cmp	r6, lr
 800bbd2:	46f4      	mov	ip, lr
 800bbd4:	d815      	bhi.n	800bc02 <rshift+0x7e>
 800bbd6:	1a9a      	subs	r2, r3, r2
 800bbd8:	0092      	lsls	r2, r2, #2
 800bbda:	3a04      	subs	r2, #4
 800bbdc:	3501      	adds	r5, #1
 800bbde:	42ae      	cmp	r6, r5
 800bbe0:	bf38      	it	cc
 800bbe2:	2200      	movcc	r2, #0
 800bbe4:	18a3      	adds	r3, r4, r2
 800bbe6:	50a7      	str	r7, [r4, r2]
 800bbe8:	b107      	cbz	r7, 800bbec <rshift+0x68>
 800bbea:	3304      	adds	r3, #4
 800bbec:	1b1a      	subs	r2, r3, r4
 800bbee:	42a3      	cmp	r3, r4
 800bbf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbf4:	bf08      	it	eq
 800bbf6:	2300      	moveq	r3, #0
 800bbf8:	6102      	str	r2, [r0, #16]
 800bbfa:	bf08      	it	eq
 800bbfc:	6143      	streq	r3, [r0, #20]
 800bbfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc02:	f8dc c000 	ldr.w	ip, [ip]
 800bc06:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc0a:	ea4c 0707 	orr.w	r7, ip, r7
 800bc0e:	f849 7b04 	str.w	r7, [r9], #4
 800bc12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc16:	40cf      	lsrs	r7, r1
 800bc18:	e7da      	b.n	800bbd0 <rshift+0x4c>
 800bc1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc22:	e7c3      	b.n	800bbac <rshift+0x28>
 800bc24:	4623      	mov	r3, r4
 800bc26:	e7e1      	b.n	800bbec <rshift+0x68>

0800bc28 <__hexdig_fun>:
 800bc28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc2c:	2b09      	cmp	r3, #9
 800bc2e:	d802      	bhi.n	800bc36 <__hexdig_fun+0xe>
 800bc30:	3820      	subs	r0, #32
 800bc32:	b2c0      	uxtb	r0, r0
 800bc34:	4770      	bx	lr
 800bc36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc3a:	2b05      	cmp	r3, #5
 800bc3c:	d801      	bhi.n	800bc42 <__hexdig_fun+0x1a>
 800bc3e:	3847      	subs	r0, #71	@ 0x47
 800bc40:	e7f7      	b.n	800bc32 <__hexdig_fun+0xa>
 800bc42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc46:	2b05      	cmp	r3, #5
 800bc48:	d801      	bhi.n	800bc4e <__hexdig_fun+0x26>
 800bc4a:	3827      	subs	r0, #39	@ 0x27
 800bc4c:	e7f1      	b.n	800bc32 <__hexdig_fun+0xa>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	4770      	bx	lr
	...

0800bc54 <__gethex>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	468a      	mov	sl, r1
 800bc5c:	9302      	str	r3, [sp, #8]
 800bc5e:	680b      	ldr	r3, [r1, #0]
 800bc60:	9001      	str	r0, [sp, #4]
 800bc62:	4690      	mov	r8, r2
 800bc64:	1c9c      	adds	r4, r3, #2
 800bc66:	46a1      	mov	r9, r4
 800bc68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc6c:	2830      	cmp	r0, #48	@ 0x30
 800bc6e:	d0fa      	beq.n	800bc66 <__gethex+0x12>
 800bc70:	eba9 0303 	sub.w	r3, r9, r3
 800bc74:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc78:	f7ff ffd6 	bl	800bc28 <__hexdig_fun>
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d168      	bne.n	800bd54 <__gethex+0x100>
 800bc82:	49a0      	ldr	r1, [pc, #640]	@ (800bf04 <__gethex+0x2b0>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	4648      	mov	r0, r9
 800bc88:	f7ff fefe 	bl	800ba88 <strncmp>
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d167      	bne.n	800bd62 <__gethex+0x10e>
 800bc92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc96:	4626      	mov	r6, r4
 800bc98:	f7ff ffc6 	bl	800bc28 <__hexdig_fun>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d062      	beq.n	800bd66 <__gethex+0x112>
 800bca0:	4623      	mov	r3, r4
 800bca2:	7818      	ldrb	r0, [r3, #0]
 800bca4:	2830      	cmp	r0, #48	@ 0x30
 800bca6:	4699      	mov	r9, r3
 800bca8:	f103 0301 	add.w	r3, r3, #1
 800bcac:	d0f9      	beq.n	800bca2 <__gethex+0x4e>
 800bcae:	f7ff ffbb 	bl	800bc28 <__hexdig_fun>
 800bcb2:	fab0 f580 	clz	r5, r0
 800bcb6:	096d      	lsrs	r5, r5, #5
 800bcb8:	f04f 0b01 	mov.w	fp, #1
 800bcbc:	464a      	mov	r2, r9
 800bcbe:	4616      	mov	r6, r2
 800bcc0:	3201      	adds	r2, #1
 800bcc2:	7830      	ldrb	r0, [r6, #0]
 800bcc4:	f7ff ffb0 	bl	800bc28 <__hexdig_fun>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d1f8      	bne.n	800bcbe <__gethex+0x6a>
 800bccc:	498d      	ldr	r1, [pc, #564]	@ (800bf04 <__gethex+0x2b0>)
 800bcce:	2201      	movs	r2, #1
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7ff fed9 	bl	800ba88 <strncmp>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d13f      	bne.n	800bd5a <__gethex+0x106>
 800bcda:	b944      	cbnz	r4, 800bcee <__gethex+0x9a>
 800bcdc:	1c74      	adds	r4, r6, #1
 800bcde:	4622      	mov	r2, r4
 800bce0:	4616      	mov	r6, r2
 800bce2:	3201      	adds	r2, #1
 800bce4:	7830      	ldrb	r0, [r6, #0]
 800bce6:	f7ff ff9f 	bl	800bc28 <__hexdig_fun>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d1f8      	bne.n	800bce0 <__gethex+0x8c>
 800bcee:	1ba4      	subs	r4, r4, r6
 800bcf0:	00a7      	lsls	r7, r4, #2
 800bcf2:	7833      	ldrb	r3, [r6, #0]
 800bcf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bcf8:	2b50      	cmp	r3, #80	@ 0x50
 800bcfa:	d13e      	bne.n	800bd7a <__gethex+0x126>
 800bcfc:	7873      	ldrb	r3, [r6, #1]
 800bcfe:	2b2b      	cmp	r3, #43	@ 0x2b
 800bd00:	d033      	beq.n	800bd6a <__gethex+0x116>
 800bd02:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd04:	d034      	beq.n	800bd70 <__gethex+0x11c>
 800bd06:	1c71      	adds	r1, r6, #1
 800bd08:	2400      	movs	r4, #0
 800bd0a:	7808      	ldrb	r0, [r1, #0]
 800bd0c:	f7ff ff8c 	bl	800bc28 <__hexdig_fun>
 800bd10:	1e43      	subs	r3, r0, #1
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b18      	cmp	r3, #24
 800bd16:	d830      	bhi.n	800bd7a <__gethex+0x126>
 800bd18:	f1a0 0210 	sub.w	r2, r0, #16
 800bd1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd20:	f7ff ff82 	bl	800bc28 <__hexdig_fun>
 800bd24:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bd28:	fa5f fc8c 	uxtb.w	ip, ip
 800bd2c:	f1bc 0f18 	cmp.w	ip, #24
 800bd30:	f04f 030a 	mov.w	r3, #10
 800bd34:	d91e      	bls.n	800bd74 <__gethex+0x120>
 800bd36:	b104      	cbz	r4, 800bd3a <__gethex+0xe6>
 800bd38:	4252      	negs	r2, r2
 800bd3a:	4417      	add	r7, r2
 800bd3c:	f8ca 1000 	str.w	r1, [sl]
 800bd40:	b1ed      	cbz	r5, 800bd7e <__gethex+0x12a>
 800bd42:	f1bb 0f00 	cmp.w	fp, #0
 800bd46:	bf0c      	ite	eq
 800bd48:	2506      	moveq	r5, #6
 800bd4a:	2500      	movne	r5, #0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	b005      	add	sp, #20
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	2500      	movs	r5, #0
 800bd56:	462c      	mov	r4, r5
 800bd58:	e7b0      	b.n	800bcbc <__gethex+0x68>
 800bd5a:	2c00      	cmp	r4, #0
 800bd5c:	d1c7      	bne.n	800bcee <__gethex+0x9a>
 800bd5e:	4627      	mov	r7, r4
 800bd60:	e7c7      	b.n	800bcf2 <__gethex+0x9e>
 800bd62:	464e      	mov	r6, r9
 800bd64:	462f      	mov	r7, r5
 800bd66:	2501      	movs	r5, #1
 800bd68:	e7c3      	b.n	800bcf2 <__gethex+0x9e>
 800bd6a:	2400      	movs	r4, #0
 800bd6c:	1cb1      	adds	r1, r6, #2
 800bd6e:	e7cc      	b.n	800bd0a <__gethex+0xb6>
 800bd70:	2401      	movs	r4, #1
 800bd72:	e7fb      	b.n	800bd6c <__gethex+0x118>
 800bd74:	fb03 0002 	mla	r0, r3, r2, r0
 800bd78:	e7ce      	b.n	800bd18 <__gethex+0xc4>
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	e7de      	b.n	800bd3c <__gethex+0xe8>
 800bd7e:	eba6 0309 	sub.w	r3, r6, r9
 800bd82:	3b01      	subs	r3, #1
 800bd84:	4629      	mov	r1, r5
 800bd86:	2b07      	cmp	r3, #7
 800bd88:	dc0a      	bgt.n	800bda0 <__gethex+0x14c>
 800bd8a:	9801      	ldr	r0, [sp, #4]
 800bd8c:	f7fd ff8c 	bl	8009ca8 <_Balloc>
 800bd90:	4604      	mov	r4, r0
 800bd92:	b940      	cbnz	r0, 800bda6 <__gethex+0x152>
 800bd94:	4b5c      	ldr	r3, [pc, #368]	@ (800bf08 <__gethex+0x2b4>)
 800bd96:	4602      	mov	r2, r0
 800bd98:	21e4      	movs	r1, #228	@ 0xe4
 800bd9a:	485c      	ldr	r0, [pc, #368]	@ (800bf0c <__gethex+0x2b8>)
 800bd9c:	f7ff fec0 	bl	800bb20 <__assert_func>
 800bda0:	3101      	adds	r1, #1
 800bda2:	105b      	asrs	r3, r3, #1
 800bda4:	e7ef      	b.n	800bd86 <__gethex+0x132>
 800bda6:	f100 0a14 	add.w	sl, r0, #20
 800bdaa:	2300      	movs	r3, #0
 800bdac:	4655      	mov	r5, sl
 800bdae:	469b      	mov	fp, r3
 800bdb0:	45b1      	cmp	r9, r6
 800bdb2:	d337      	bcc.n	800be24 <__gethex+0x1d0>
 800bdb4:	f845 bb04 	str.w	fp, [r5], #4
 800bdb8:	eba5 050a 	sub.w	r5, r5, sl
 800bdbc:	10ad      	asrs	r5, r5, #2
 800bdbe:	6125      	str	r5, [r4, #16]
 800bdc0:	4658      	mov	r0, fp
 800bdc2:	f7fe f863 	bl	8009e8c <__hi0bits>
 800bdc6:	016d      	lsls	r5, r5, #5
 800bdc8:	f8d8 6000 	ldr.w	r6, [r8]
 800bdcc:	1a2d      	subs	r5, r5, r0
 800bdce:	42b5      	cmp	r5, r6
 800bdd0:	dd54      	ble.n	800be7c <__gethex+0x228>
 800bdd2:	1bad      	subs	r5, r5, r6
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7fe fbef 	bl	800a5ba <__any_on>
 800bddc:	4681      	mov	r9, r0
 800bdde:	b178      	cbz	r0, 800be00 <__gethex+0x1ac>
 800bde0:	1e6b      	subs	r3, r5, #1
 800bde2:	1159      	asrs	r1, r3, #5
 800bde4:	f003 021f 	and.w	r2, r3, #31
 800bde8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bdec:	f04f 0901 	mov.w	r9, #1
 800bdf0:	fa09 f202 	lsl.w	r2, r9, r2
 800bdf4:	420a      	tst	r2, r1
 800bdf6:	d003      	beq.n	800be00 <__gethex+0x1ac>
 800bdf8:	454b      	cmp	r3, r9
 800bdfa:	dc36      	bgt.n	800be6a <__gethex+0x216>
 800bdfc:	f04f 0902 	mov.w	r9, #2
 800be00:	4629      	mov	r1, r5
 800be02:	4620      	mov	r0, r4
 800be04:	f7ff febe 	bl	800bb84 <rshift>
 800be08:	442f      	add	r7, r5
 800be0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be0e:	42bb      	cmp	r3, r7
 800be10:	da42      	bge.n	800be98 <__gethex+0x244>
 800be12:	9801      	ldr	r0, [sp, #4]
 800be14:	4621      	mov	r1, r4
 800be16:	f7fd ff87 	bl	8009d28 <_Bfree>
 800be1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be1c:	2300      	movs	r3, #0
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	25a3      	movs	r5, #163	@ 0xa3
 800be22:	e793      	b.n	800bd4c <__gethex+0xf8>
 800be24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be28:	2a2e      	cmp	r2, #46	@ 0x2e
 800be2a:	d012      	beq.n	800be52 <__gethex+0x1fe>
 800be2c:	2b20      	cmp	r3, #32
 800be2e:	d104      	bne.n	800be3a <__gethex+0x1e6>
 800be30:	f845 bb04 	str.w	fp, [r5], #4
 800be34:	f04f 0b00 	mov.w	fp, #0
 800be38:	465b      	mov	r3, fp
 800be3a:	7830      	ldrb	r0, [r6, #0]
 800be3c:	9303      	str	r3, [sp, #12]
 800be3e:	f7ff fef3 	bl	800bc28 <__hexdig_fun>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	f000 000f 	and.w	r0, r0, #15
 800be48:	4098      	lsls	r0, r3
 800be4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800be4e:	3304      	adds	r3, #4
 800be50:	e7ae      	b.n	800bdb0 <__gethex+0x15c>
 800be52:	45b1      	cmp	r9, r6
 800be54:	d8ea      	bhi.n	800be2c <__gethex+0x1d8>
 800be56:	492b      	ldr	r1, [pc, #172]	@ (800bf04 <__gethex+0x2b0>)
 800be58:	9303      	str	r3, [sp, #12]
 800be5a:	2201      	movs	r2, #1
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff fe13 	bl	800ba88 <strncmp>
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	2800      	cmp	r0, #0
 800be66:	d1e1      	bne.n	800be2c <__gethex+0x1d8>
 800be68:	e7a2      	b.n	800bdb0 <__gethex+0x15c>
 800be6a:	1ea9      	subs	r1, r5, #2
 800be6c:	4620      	mov	r0, r4
 800be6e:	f7fe fba4 	bl	800a5ba <__any_on>
 800be72:	2800      	cmp	r0, #0
 800be74:	d0c2      	beq.n	800bdfc <__gethex+0x1a8>
 800be76:	f04f 0903 	mov.w	r9, #3
 800be7a:	e7c1      	b.n	800be00 <__gethex+0x1ac>
 800be7c:	da09      	bge.n	800be92 <__gethex+0x23e>
 800be7e:	1b75      	subs	r5, r6, r5
 800be80:	4621      	mov	r1, r4
 800be82:	9801      	ldr	r0, [sp, #4]
 800be84:	462a      	mov	r2, r5
 800be86:	f7fe f95f 	bl	800a148 <__lshift>
 800be8a:	1b7f      	subs	r7, r7, r5
 800be8c:	4604      	mov	r4, r0
 800be8e:	f100 0a14 	add.w	sl, r0, #20
 800be92:	f04f 0900 	mov.w	r9, #0
 800be96:	e7b8      	b.n	800be0a <__gethex+0x1b6>
 800be98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be9c:	42bd      	cmp	r5, r7
 800be9e:	dd6f      	ble.n	800bf80 <__gethex+0x32c>
 800bea0:	1bed      	subs	r5, r5, r7
 800bea2:	42ae      	cmp	r6, r5
 800bea4:	dc34      	bgt.n	800bf10 <__gethex+0x2bc>
 800bea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d022      	beq.n	800bef4 <__gethex+0x2a0>
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d024      	beq.n	800befc <__gethex+0x2a8>
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d115      	bne.n	800bee2 <__gethex+0x28e>
 800beb6:	42ae      	cmp	r6, r5
 800beb8:	d113      	bne.n	800bee2 <__gethex+0x28e>
 800beba:	2e01      	cmp	r6, #1
 800bebc:	d10b      	bne.n	800bed6 <__gethex+0x282>
 800bebe:	9a02      	ldr	r2, [sp, #8]
 800bec0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bec4:	6013      	str	r3, [r2, #0]
 800bec6:	2301      	movs	r3, #1
 800bec8:	6123      	str	r3, [r4, #16]
 800beca:	f8ca 3000 	str.w	r3, [sl]
 800bece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bed0:	2562      	movs	r5, #98	@ 0x62
 800bed2:	601c      	str	r4, [r3, #0]
 800bed4:	e73a      	b.n	800bd4c <__gethex+0xf8>
 800bed6:	1e71      	subs	r1, r6, #1
 800bed8:	4620      	mov	r0, r4
 800beda:	f7fe fb6e 	bl	800a5ba <__any_on>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d1ed      	bne.n	800bebe <__gethex+0x26a>
 800bee2:	9801      	ldr	r0, [sp, #4]
 800bee4:	4621      	mov	r1, r4
 800bee6:	f7fd ff1f 	bl	8009d28 <_Bfree>
 800beea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beec:	2300      	movs	r3, #0
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	2550      	movs	r5, #80	@ 0x50
 800bef2:	e72b      	b.n	800bd4c <__gethex+0xf8>
 800bef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1f3      	bne.n	800bee2 <__gethex+0x28e>
 800befa:	e7e0      	b.n	800bebe <__gethex+0x26a>
 800befc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1dd      	bne.n	800bebe <__gethex+0x26a>
 800bf02:	e7ee      	b.n	800bee2 <__gethex+0x28e>
 800bf04:	0800c593 	.word	0x0800c593
 800bf08:	0800c529 	.word	0x0800c529
 800bf0c:	0800c5ea 	.word	0x0800c5ea
 800bf10:	1e6f      	subs	r7, r5, #1
 800bf12:	f1b9 0f00 	cmp.w	r9, #0
 800bf16:	d130      	bne.n	800bf7a <__gethex+0x326>
 800bf18:	b127      	cbz	r7, 800bf24 <__gethex+0x2d0>
 800bf1a:	4639      	mov	r1, r7
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f7fe fb4c 	bl	800a5ba <__any_on>
 800bf22:	4681      	mov	r9, r0
 800bf24:	117a      	asrs	r2, r7, #5
 800bf26:	2301      	movs	r3, #1
 800bf28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf2c:	f007 071f 	and.w	r7, r7, #31
 800bf30:	40bb      	lsls	r3, r7
 800bf32:	4213      	tst	r3, r2
 800bf34:	4629      	mov	r1, r5
 800bf36:	4620      	mov	r0, r4
 800bf38:	bf18      	it	ne
 800bf3a:	f049 0902 	orrne.w	r9, r9, #2
 800bf3e:	f7ff fe21 	bl	800bb84 <rshift>
 800bf42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf46:	1b76      	subs	r6, r6, r5
 800bf48:	2502      	movs	r5, #2
 800bf4a:	f1b9 0f00 	cmp.w	r9, #0
 800bf4e:	d047      	beq.n	800bfe0 <__gethex+0x38c>
 800bf50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d015      	beq.n	800bf84 <__gethex+0x330>
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d017      	beq.n	800bf8c <__gethex+0x338>
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d109      	bne.n	800bf74 <__gethex+0x320>
 800bf60:	f019 0f02 	tst.w	r9, #2
 800bf64:	d006      	beq.n	800bf74 <__gethex+0x320>
 800bf66:	f8da 3000 	ldr.w	r3, [sl]
 800bf6a:	ea49 0903 	orr.w	r9, r9, r3
 800bf6e:	f019 0f01 	tst.w	r9, #1
 800bf72:	d10e      	bne.n	800bf92 <__gethex+0x33e>
 800bf74:	f045 0510 	orr.w	r5, r5, #16
 800bf78:	e032      	b.n	800bfe0 <__gethex+0x38c>
 800bf7a:	f04f 0901 	mov.w	r9, #1
 800bf7e:	e7d1      	b.n	800bf24 <__gethex+0x2d0>
 800bf80:	2501      	movs	r5, #1
 800bf82:	e7e2      	b.n	800bf4a <__gethex+0x2f6>
 800bf84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf86:	f1c3 0301 	rsb	r3, r3, #1
 800bf8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0f0      	beq.n	800bf74 <__gethex+0x320>
 800bf92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf96:	f104 0314 	add.w	r3, r4, #20
 800bf9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bfa2:	f04f 0c00 	mov.w	ip, #0
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfac:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800bfb0:	d01b      	beq.n	800bfea <__gethex+0x396>
 800bfb2:	3201      	adds	r2, #1
 800bfb4:	6002      	str	r2, [r0, #0]
 800bfb6:	2d02      	cmp	r5, #2
 800bfb8:	f104 0314 	add.w	r3, r4, #20
 800bfbc:	d13c      	bne.n	800c038 <__gethex+0x3e4>
 800bfbe:	f8d8 2000 	ldr.w	r2, [r8]
 800bfc2:	3a01      	subs	r2, #1
 800bfc4:	42b2      	cmp	r2, r6
 800bfc6:	d109      	bne.n	800bfdc <__gethex+0x388>
 800bfc8:	1171      	asrs	r1, r6, #5
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfd0:	f006 061f 	and.w	r6, r6, #31
 800bfd4:	fa02 f606 	lsl.w	r6, r2, r6
 800bfd8:	421e      	tst	r6, r3
 800bfda:	d13a      	bne.n	800c052 <__gethex+0x3fe>
 800bfdc:	f045 0520 	orr.w	r5, r5, #32
 800bfe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfe2:	601c      	str	r4, [r3, #0]
 800bfe4:	9b02      	ldr	r3, [sp, #8]
 800bfe6:	601f      	str	r7, [r3, #0]
 800bfe8:	e6b0      	b.n	800bd4c <__gethex+0xf8>
 800bfea:	4299      	cmp	r1, r3
 800bfec:	f843 cc04 	str.w	ip, [r3, #-4]
 800bff0:	d8d9      	bhi.n	800bfa6 <__gethex+0x352>
 800bff2:	68a3      	ldr	r3, [r4, #8]
 800bff4:	459b      	cmp	fp, r3
 800bff6:	db17      	blt.n	800c028 <__gethex+0x3d4>
 800bff8:	6861      	ldr	r1, [r4, #4]
 800bffa:	9801      	ldr	r0, [sp, #4]
 800bffc:	3101      	adds	r1, #1
 800bffe:	f7fd fe53 	bl	8009ca8 <_Balloc>
 800c002:	4681      	mov	r9, r0
 800c004:	b918      	cbnz	r0, 800c00e <__gethex+0x3ba>
 800c006:	4b1a      	ldr	r3, [pc, #104]	@ (800c070 <__gethex+0x41c>)
 800c008:	4602      	mov	r2, r0
 800c00a:	2184      	movs	r1, #132	@ 0x84
 800c00c:	e6c5      	b.n	800bd9a <__gethex+0x146>
 800c00e:	6922      	ldr	r2, [r4, #16]
 800c010:	3202      	adds	r2, #2
 800c012:	f104 010c 	add.w	r1, r4, #12
 800c016:	0092      	lsls	r2, r2, #2
 800c018:	300c      	adds	r0, #12
 800c01a:	f7fc fed8 	bl	8008dce <memcpy>
 800c01e:	4621      	mov	r1, r4
 800c020:	9801      	ldr	r0, [sp, #4]
 800c022:	f7fd fe81 	bl	8009d28 <_Bfree>
 800c026:	464c      	mov	r4, r9
 800c028:	6923      	ldr	r3, [r4, #16]
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c030:	6122      	str	r2, [r4, #16]
 800c032:	2201      	movs	r2, #1
 800c034:	615a      	str	r2, [r3, #20]
 800c036:	e7be      	b.n	800bfb6 <__gethex+0x362>
 800c038:	6922      	ldr	r2, [r4, #16]
 800c03a:	455a      	cmp	r2, fp
 800c03c:	dd0b      	ble.n	800c056 <__gethex+0x402>
 800c03e:	2101      	movs	r1, #1
 800c040:	4620      	mov	r0, r4
 800c042:	f7ff fd9f 	bl	800bb84 <rshift>
 800c046:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c04a:	3701      	adds	r7, #1
 800c04c:	42bb      	cmp	r3, r7
 800c04e:	f6ff aee0 	blt.w	800be12 <__gethex+0x1be>
 800c052:	2501      	movs	r5, #1
 800c054:	e7c2      	b.n	800bfdc <__gethex+0x388>
 800c056:	f016 061f 	ands.w	r6, r6, #31
 800c05a:	d0fa      	beq.n	800c052 <__gethex+0x3fe>
 800c05c:	4453      	add	r3, sl
 800c05e:	f1c6 0620 	rsb	r6, r6, #32
 800c062:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c066:	f7fd ff11 	bl	8009e8c <__hi0bits>
 800c06a:	42b0      	cmp	r0, r6
 800c06c:	dbe7      	blt.n	800c03e <__gethex+0x3ea>
 800c06e:	e7f0      	b.n	800c052 <__gethex+0x3fe>
 800c070:	0800c529 	.word	0x0800c529

0800c074 <L_shift>:
 800c074:	f1c2 0208 	rsb	r2, r2, #8
 800c078:	0092      	lsls	r2, r2, #2
 800c07a:	b570      	push	{r4, r5, r6, lr}
 800c07c:	f1c2 0620 	rsb	r6, r2, #32
 800c080:	6843      	ldr	r3, [r0, #4]
 800c082:	6804      	ldr	r4, [r0, #0]
 800c084:	fa03 f506 	lsl.w	r5, r3, r6
 800c088:	432c      	orrs	r4, r5
 800c08a:	40d3      	lsrs	r3, r2
 800c08c:	6004      	str	r4, [r0, #0]
 800c08e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c092:	4288      	cmp	r0, r1
 800c094:	d3f4      	bcc.n	800c080 <L_shift+0xc>
 800c096:	bd70      	pop	{r4, r5, r6, pc}

0800c098 <__match>:
 800c098:	b530      	push	{r4, r5, lr}
 800c09a:	6803      	ldr	r3, [r0, #0]
 800c09c:	3301      	adds	r3, #1
 800c09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0a2:	b914      	cbnz	r4, 800c0aa <__match+0x12>
 800c0a4:	6003      	str	r3, [r0, #0]
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	bd30      	pop	{r4, r5, pc}
 800c0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c0b2:	2d19      	cmp	r5, #25
 800c0b4:	bf98      	it	ls
 800c0b6:	3220      	addls	r2, #32
 800c0b8:	42a2      	cmp	r2, r4
 800c0ba:	d0f0      	beq.n	800c09e <__match+0x6>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7f3      	b.n	800c0a8 <__match+0x10>

0800c0c0 <__hexnan>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	680b      	ldr	r3, [r1, #0]
 800c0c6:	6801      	ldr	r1, [r0, #0]
 800c0c8:	115e      	asrs	r6, r3, #5
 800c0ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0ce:	f013 031f 	ands.w	r3, r3, #31
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	bf18      	it	ne
 800c0d6:	3604      	addne	r6, #4
 800c0d8:	2500      	movs	r5, #0
 800c0da:	1f37      	subs	r7, r6, #4
 800c0dc:	4682      	mov	sl, r0
 800c0de:	4690      	mov	r8, r2
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0e6:	46b9      	mov	r9, r7
 800c0e8:	463c      	mov	r4, r7
 800c0ea:	9502      	str	r5, [sp, #8]
 800c0ec:	46ab      	mov	fp, r5
 800c0ee:	784a      	ldrb	r2, [r1, #1]
 800c0f0:	1c4b      	adds	r3, r1, #1
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	b342      	cbz	r2, 800c148 <__hexnan+0x88>
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	9105      	str	r1, [sp, #20]
 800c0fa:	9204      	str	r2, [sp, #16]
 800c0fc:	f7ff fd94 	bl	800bc28 <__hexdig_fun>
 800c100:	2800      	cmp	r0, #0
 800c102:	d151      	bne.n	800c1a8 <__hexnan+0xe8>
 800c104:	9a04      	ldr	r2, [sp, #16]
 800c106:	9905      	ldr	r1, [sp, #20]
 800c108:	2a20      	cmp	r2, #32
 800c10a:	d818      	bhi.n	800c13e <__hexnan+0x7e>
 800c10c:	9b02      	ldr	r3, [sp, #8]
 800c10e:	459b      	cmp	fp, r3
 800c110:	dd13      	ble.n	800c13a <__hexnan+0x7a>
 800c112:	454c      	cmp	r4, r9
 800c114:	d206      	bcs.n	800c124 <__hexnan+0x64>
 800c116:	2d07      	cmp	r5, #7
 800c118:	dc04      	bgt.n	800c124 <__hexnan+0x64>
 800c11a:	462a      	mov	r2, r5
 800c11c:	4649      	mov	r1, r9
 800c11e:	4620      	mov	r0, r4
 800c120:	f7ff ffa8 	bl	800c074 <L_shift>
 800c124:	4544      	cmp	r4, r8
 800c126:	d952      	bls.n	800c1ce <__hexnan+0x10e>
 800c128:	2300      	movs	r3, #0
 800c12a:	f1a4 0904 	sub.w	r9, r4, #4
 800c12e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c132:	f8cd b008 	str.w	fp, [sp, #8]
 800c136:	464c      	mov	r4, r9
 800c138:	461d      	mov	r5, r3
 800c13a:	9903      	ldr	r1, [sp, #12]
 800c13c:	e7d7      	b.n	800c0ee <__hexnan+0x2e>
 800c13e:	2a29      	cmp	r2, #41	@ 0x29
 800c140:	d157      	bne.n	800c1f2 <__hexnan+0x132>
 800c142:	3102      	adds	r1, #2
 800c144:	f8ca 1000 	str.w	r1, [sl]
 800c148:	f1bb 0f00 	cmp.w	fp, #0
 800c14c:	d051      	beq.n	800c1f2 <__hexnan+0x132>
 800c14e:	454c      	cmp	r4, r9
 800c150:	d206      	bcs.n	800c160 <__hexnan+0xa0>
 800c152:	2d07      	cmp	r5, #7
 800c154:	dc04      	bgt.n	800c160 <__hexnan+0xa0>
 800c156:	462a      	mov	r2, r5
 800c158:	4649      	mov	r1, r9
 800c15a:	4620      	mov	r0, r4
 800c15c:	f7ff ff8a 	bl	800c074 <L_shift>
 800c160:	4544      	cmp	r4, r8
 800c162:	d936      	bls.n	800c1d2 <__hexnan+0x112>
 800c164:	f1a8 0204 	sub.w	r2, r8, #4
 800c168:	4623      	mov	r3, r4
 800c16a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c16e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c172:	429f      	cmp	r7, r3
 800c174:	d2f9      	bcs.n	800c16a <__hexnan+0xaa>
 800c176:	1b3b      	subs	r3, r7, r4
 800c178:	f023 0303 	bic.w	r3, r3, #3
 800c17c:	3304      	adds	r3, #4
 800c17e:	3401      	adds	r4, #1
 800c180:	3e03      	subs	r6, #3
 800c182:	42b4      	cmp	r4, r6
 800c184:	bf88      	it	hi
 800c186:	2304      	movhi	r3, #4
 800c188:	4443      	add	r3, r8
 800c18a:	2200      	movs	r2, #0
 800c18c:	f843 2b04 	str.w	r2, [r3], #4
 800c190:	429f      	cmp	r7, r3
 800c192:	d2fb      	bcs.n	800c18c <__hexnan+0xcc>
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	b91b      	cbnz	r3, 800c1a0 <__hexnan+0xe0>
 800c198:	4547      	cmp	r7, r8
 800c19a:	d128      	bne.n	800c1ee <__hexnan+0x12e>
 800c19c:	2301      	movs	r3, #1
 800c19e:	603b      	str	r3, [r7, #0]
 800c1a0:	2005      	movs	r0, #5
 800c1a2:	b007      	add	sp, #28
 800c1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a8:	3501      	adds	r5, #1
 800c1aa:	2d08      	cmp	r5, #8
 800c1ac:	f10b 0b01 	add.w	fp, fp, #1
 800c1b0:	dd06      	ble.n	800c1c0 <__hexnan+0x100>
 800c1b2:	4544      	cmp	r4, r8
 800c1b4:	d9c1      	bls.n	800c13a <__hexnan+0x7a>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1bc:	2501      	movs	r5, #1
 800c1be:	3c04      	subs	r4, #4
 800c1c0:	6822      	ldr	r2, [r4, #0]
 800c1c2:	f000 000f 	and.w	r0, r0, #15
 800c1c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1ca:	6020      	str	r0, [r4, #0]
 800c1cc:	e7b5      	b.n	800c13a <__hexnan+0x7a>
 800c1ce:	2508      	movs	r5, #8
 800c1d0:	e7b3      	b.n	800c13a <__hexnan+0x7a>
 800c1d2:	9b01      	ldr	r3, [sp, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0dd      	beq.n	800c194 <__hexnan+0xd4>
 800c1d8:	f1c3 0320 	rsb	r3, r3, #32
 800c1dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c1e0:	40da      	lsrs	r2, r3
 800c1e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1ec:	e7d2      	b.n	800c194 <__hexnan+0xd4>
 800c1ee:	3f04      	subs	r7, #4
 800c1f0:	e7d0      	b.n	800c194 <__hexnan+0xd4>
 800c1f2:	2004      	movs	r0, #4
 800c1f4:	e7d5      	b.n	800c1a2 <__hexnan+0xe2>

0800c1f6 <__ascii_mbtowc>:
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	b901      	cbnz	r1, 800c1fc <__ascii_mbtowc+0x6>
 800c1fa:	a901      	add	r1, sp, #4
 800c1fc:	b142      	cbz	r2, 800c210 <__ascii_mbtowc+0x1a>
 800c1fe:	b14b      	cbz	r3, 800c214 <__ascii_mbtowc+0x1e>
 800c200:	7813      	ldrb	r3, [r2, #0]
 800c202:	600b      	str	r3, [r1, #0]
 800c204:	7812      	ldrb	r2, [r2, #0]
 800c206:	1e10      	subs	r0, r2, #0
 800c208:	bf18      	it	ne
 800c20a:	2001      	movne	r0, #1
 800c20c:	b002      	add	sp, #8
 800c20e:	4770      	bx	lr
 800c210:	4610      	mov	r0, r2
 800c212:	e7fb      	b.n	800c20c <__ascii_mbtowc+0x16>
 800c214:	f06f 0001 	mvn.w	r0, #1
 800c218:	e7f8      	b.n	800c20c <__ascii_mbtowc+0x16>

0800c21a <_realloc_r>:
 800c21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	4607      	mov	r7, r0
 800c220:	4614      	mov	r4, r2
 800c222:	460d      	mov	r5, r1
 800c224:	b921      	cbnz	r1, 800c230 <_realloc_r+0x16>
 800c226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c22a:	4611      	mov	r1, r2
 800c22c:	f7fd bcb0 	b.w	8009b90 <_malloc_r>
 800c230:	b92a      	cbnz	r2, 800c23e <_realloc_r+0x24>
 800c232:	f7fd fc39 	bl	8009aa8 <_free_r>
 800c236:	4625      	mov	r5, r4
 800c238:	4628      	mov	r0, r5
 800c23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c23e:	f000 f840 	bl	800c2c2 <_malloc_usable_size_r>
 800c242:	4284      	cmp	r4, r0
 800c244:	4606      	mov	r6, r0
 800c246:	d802      	bhi.n	800c24e <_realloc_r+0x34>
 800c248:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c24c:	d8f4      	bhi.n	800c238 <_realloc_r+0x1e>
 800c24e:	4621      	mov	r1, r4
 800c250:	4638      	mov	r0, r7
 800c252:	f7fd fc9d 	bl	8009b90 <_malloc_r>
 800c256:	4680      	mov	r8, r0
 800c258:	b908      	cbnz	r0, 800c25e <_realloc_r+0x44>
 800c25a:	4645      	mov	r5, r8
 800c25c:	e7ec      	b.n	800c238 <_realloc_r+0x1e>
 800c25e:	42b4      	cmp	r4, r6
 800c260:	4622      	mov	r2, r4
 800c262:	4629      	mov	r1, r5
 800c264:	bf28      	it	cs
 800c266:	4632      	movcs	r2, r6
 800c268:	f7fc fdb1 	bl	8008dce <memcpy>
 800c26c:	4629      	mov	r1, r5
 800c26e:	4638      	mov	r0, r7
 800c270:	f7fd fc1a 	bl	8009aa8 <_free_r>
 800c274:	e7f1      	b.n	800c25a <_realloc_r+0x40>

0800c276 <__ascii_wctomb>:
 800c276:	4603      	mov	r3, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	b141      	cbz	r1, 800c28e <__ascii_wctomb+0x18>
 800c27c:	2aff      	cmp	r2, #255	@ 0xff
 800c27e:	d904      	bls.n	800c28a <__ascii_wctomb+0x14>
 800c280:	228a      	movs	r2, #138	@ 0x8a
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c288:	4770      	bx	lr
 800c28a:	700a      	strb	r2, [r1, #0]
 800c28c:	2001      	movs	r0, #1
 800c28e:	4770      	bx	lr

0800c290 <fiprintf>:
 800c290:	b40e      	push	{r1, r2, r3}
 800c292:	b503      	push	{r0, r1, lr}
 800c294:	4601      	mov	r1, r0
 800c296:	ab03      	add	r3, sp, #12
 800c298:	4805      	ldr	r0, [pc, #20]	@ (800c2b0 <fiprintf+0x20>)
 800c29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c29e:	6800      	ldr	r0, [r0, #0]
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	f7ff f9b1 	bl	800b608 <_vfiprintf_r>
 800c2a6:	b002      	add	sp, #8
 800c2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2ac:	b003      	add	sp, #12
 800c2ae:	4770      	bx	lr
 800c2b0:	20000038 	.word	0x20000038

0800c2b4 <abort>:
 800c2b4:	b508      	push	{r3, lr}
 800c2b6:	2006      	movs	r0, #6
 800c2b8:	f000 f834 	bl	800c324 <raise>
 800c2bc:	2001      	movs	r0, #1
 800c2be:	f7f7 f888 	bl	80033d2 <_exit>

0800c2c2 <_malloc_usable_size_r>:
 800c2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c6:	1f18      	subs	r0, r3, #4
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	bfbc      	itt	lt
 800c2cc:	580b      	ldrlt	r3, [r1, r0]
 800c2ce:	18c0      	addlt	r0, r0, r3
 800c2d0:	4770      	bx	lr

0800c2d2 <_raise_r>:
 800c2d2:	291f      	cmp	r1, #31
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	460c      	mov	r4, r1
 800c2da:	d904      	bls.n	800c2e6 <_raise_r+0x14>
 800c2dc:	2316      	movs	r3, #22
 800c2de:	6003      	str	r3, [r0, #0]
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2e4:	bd38      	pop	{r3, r4, r5, pc}
 800c2e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2e8:	b112      	cbz	r2, 800c2f0 <_raise_r+0x1e>
 800c2ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2ee:	b94b      	cbnz	r3, 800c304 <_raise_r+0x32>
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f000 f831 	bl	800c358 <_getpid_r>
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	4601      	mov	r1, r0
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c300:	f000 b818 	b.w	800c334 <_kill_r>
 800c304:	2b01      	cmp	r3, #1
 800c306:	d00a      	beq.n	800c31e <_raise_r+0x4c>
 800c308:	1c59      	adds	r1, r3, #1
 800c30a:	d103      	bne.n	800c314 <_raise_r+0x42>
 800c30c:	2316      	movs	r3, #22
 800c30e:	6003      	str	r3, [r0, #0]
 800c310:	2001      	movs	r0, #1
 800c312:	e7e7      	b.n	800c2e4 <_raise_r+0x12>
 800c314:	2100      	movs	r1, #0
 800c316:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c31a:	4620      	mov	r0, r4
 800c31c:	4798      	blx	r3
 800c31e:	2000      	movs	r0, #0
 800c320:	e7e0      	b.n	800c2e4 <_raise_r+0x12>
	...

0800c324 <raise>:
 800c324:	4b02      	ldr	r3, [pc, #8]	@ (800c330 <raise+0xc>)
 800c326:	4601      	mov	r1, r0
 800c328:	6818      	ldr	r0, [r3, #0]
 800c32a:	f7ff bfd2 	b.w	800c2d2 <_raise_r>
 800c32e:	bf00      	nop
 800c330:	20000038 	.word	0x20000038

0800c334 <_kill_r>:
 800c334:	b538      	push	{r3, r4, r5, lr}
 800c336:	4d07      	ldr	r5, [pc, #28]	@ (800c354 <_kill_r+0x20>)
 800c338:	2300      	movs	r3, #0
 800c33a:	4604      	mov	r4, r0
 800c33c:	4608      	mov	r0, r1
 800c33e:	4611      	mov	r1, r2
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	f7f7 f836 	bl	80033b2 <_kill>
 800c346:	1c43      	adds	r3, r0, #1
 800c348:	d102      	bne.n	800c350 <_kill_r+0x1c>
 800c34a:	682b      	ldr	r3, [r5, #0]
 800c34c:	b103      	cbz	r3, 800c350 <_kill_r+0x1c>
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	bd38      	pop	{r3, r4, r5, pc}
 800c352:	bf00      	nop
 800c354:	200007a0 	.word	0x200007a0

0800c358 <_getpid_r>:
 800c358:	f7f7 b823 	b.w	80033a2 <_getpid>

0800c35c <_init>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	bf00      	nop
 800c360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c362:	bc08      	pop	{r3}
 800c364:	469e      	mov	lr, r3
 800c366:	4770      	bx	lr

0800c368 <_fini>:
 800c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36a:	bf00      	nop
 800c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36e:	bc08      	pop	{r3}
 800c370:	469e      	mov	lr, r3
 800c372:	4770      	bx	lr
