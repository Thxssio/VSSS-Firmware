
VSSS_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5c0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800d7a0  0800d7a0  0000e7a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de90  0800de90  0000f1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800de90  0800de90  0000ee90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de98  0800de98  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de98  0800de98  0000ee98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de9c  0800de9c  0000ee9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800dea0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  200001f8  0800e094  0000f1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800e094  0000f7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001848d  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003698  00000000  00000000  000276b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0002ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001053  00000000  00000000  0002c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021040  00000000  00000000  0002d29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a65  00000000  00000000  0004e2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb645  00000000  00000000  00066d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef0  00000000  00000000  001323c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001392b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d788 	.word	0x0800d788

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800d788 	.word	0x0800d788

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <NormalizeAngle>:


const float R[1][1] = {{0.01}};


float NormalizeAngle(float angle) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle > M_PI)  angle -= 2.0 * M_PI;
 800107a:	e00f      	b.n	800109c <NormalizeAngle+0x2c>
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fa8b 	bl	8000598 <__aeabi_f2d>
 8001082:	a31f      	add	r3, pc, #124	@ (adr r3, 8001100 <NormalizeAngle+0x90>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f926 	bl	80002d8 <__aeabi_dsub>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fdd0 	bl	8000c38 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fa7b 	bl	8000598 <__aeabi_f2d>
 80010a2:	a319      	add	r3, pc, #100	@ (adr r3, 8001108 <NormalizeAngle+0x98>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff fd5e 	bl	8000b68 <__aeabi_dcmpgt>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1e4      	bne.n	800107c <NormalizeAngle+0xc>
    while (angle < -M_PI) angle += 2.0 * M_PI;
 80010b2:	e00f      	b.n	80010d4 <NormalizeAngle+0x64>
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fa6f 	bl	8000598 <__aeabi_f2d>
 80010ba:	a311      	add	r3, pc, #68	@ (adr r3, 8001100 <NormalizeAngle+0x90>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff f90c 	bl	80002dc <__adddf3>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fdb4 	bl	8000c38 <__aeabi_d2f>
 80010d0:	4603      	mov	r3, r0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fa5f 	bl	8000598 <__aeabi_f2d>
 80010da:	a30d      	add	r3, pc, #52	@ (adr r3, 8001110 <NormalizeAngle+0xa0>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fd24 	bl	8000b2c <__aeabi_dcmplt>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1e4      	bne.n	80010b4 <NormalizeAngle+0x44>
    return angle;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	ee07 3a90 	vmov	s15, r3
}
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	54442d18 	.word	0x54442d18
 8001104:	401921fb 	.word	0x401921fb
 8001108:	54442d18 	.word	0x54442d18
 800110c:	400921fb 	.word	0x400921fb
 8001110:	54442d18 	.word	0x54442d18
 8001114:	c00921fb 	.word	0xc00921fb

08001118 <EKF_Init>:


void EKF_Init(EKF_State *ekf) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    ekf->x = 0.0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
    ekf->y = 0.0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
    ekf->theta = 0.0;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    ekf->v = 0.0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	60da      	str	r2, [r3, #12]

    memset(ekf->P, 0, sizeof(ekf->P));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3310      	adds	r3, #16
 8001144:	2240      	movs	r2, #64	@ 0x40
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fec8 	bl	8008ede <memset>
    ekf->P[0][0] = 0.1;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <EKF_Init+0x58>)
 8001152:	611a      	str	r2, [r3, #16]
    ekf->P[1][1] = 0.1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a06      	ldr	r2, [pc, #24]	@ (8001170 <EKF_Init+0x58>)
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
    ekf->P[2][2] = 0.1;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <EKF_Init+0x58>)
 800115e:	639a      	str	r2, [r3, #56]	@ 0x38
    ekf->P[3][3] = 0.1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a03      	ldr	r2, [pc, #12]	@ (8001170 <EKF_Init+0x58>)
 8001164:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	3dcccccd 	.word	0x3dcccccd
 8001174:	00000000 	.word	0x00000000

08001178 <EKF_Predict>:


void EKF_Predict(EKF_State *ekf, float vL, float vR, float dt) {
 8001178:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800117c:	b088      	sub	sp, #32
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	ed87 0a02 	vstr	s0, [r7, #8]
 8001186:	edc7 0a01 	vstr	s1, [r7, #4]
 800118a:	ed87 1a00 	vstr	s2, [r7]
    float v = (vR + vL) / 2.0;
 800118e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001192:	edd7 7a02 	vldr	s15, [r7, #8]
 8001196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800119e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a2:	edc7 7a05 	vstr	s15, [r7, #20]
    float omega = (vR - vL) / WHEEL_BASE;
 80011a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	ee17 0a90 	vmov	r0, s15
 80011b6:	f7ff f9ef 	bl	8000598 <__aeabi_f2d>
 80011ba:	a36c      	add	r3, pc, #432	@ (adr r3, 800136c <EKF_Predict+0x1f4>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fd34 	bl	8000c38 <__aeabi_d2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]


    ekf->x += v * cos(ekf->theta) * dt;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9dd 	bl	8000598 <__aeabi_f2d>
 80011de:	4604      	mov	r4, r0
 80011e0:	460d      	mov	r5, r1
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff f9d8 	bl	8000598 <__aeabi_f2d>
 80011e8:	4680      	mov	r8, r0
 80011ea:	4689      	mov	r9, r1
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f9d1 	bl	8000598 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	ec43 2b10 	vmov	d0, r2, r3
 80011fe:	f00b fa4b 	bl	800c698 <cos>
 8001202:	ec53 2b10 	vmov	r2, r3, d0
 8001206:	4640      	mov	r0, r8
 8001208:	4649      	mov	r1, r9
 800120a:	f7ff fa1d 	bl	8000648 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4690      	mov	r8, r2
 8001214:	4699      	mov	r9, r3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f9be 	bl	8000598 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4640      	mov	r0, r8
 8001222:	4649      	mov	r1, r9
 8001224:	f7ff fa10 	bl	8000648 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f854 	bl	80002dc <__adddf3>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fcfc 	bl	8000c38 <__aeabi_d2f>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	601a      	str	r2, [r3, #0]
    ekf->y += v * sin(ekf->theta) * dt;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f9a4 	bl	8000598 <__aeabi_f2d>
 8001250:	4604      	mov	r4, r0
 8001252:	460d      	mov	r5, r1
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f7ff f99f 	bl	8000598 <__aeabi_f2d>
 800125a:	4680      	mov	r8, r0
 800125c:	4689      	mov	r9, r1
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f998 	bl	8000598 <__aeabi_f2d>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	ec43 2b10 	vmov	d0, r2, r3
 8001270:	f00b fa66 	bl	800c740 <sin>
 8001274:	ec53 2b10 	vmov	r2, r3, d0
 8001278:	4640      	mov	r0, r8
 800127a:	4649      	mov	r1, r9
 800127c:	f7ff f9e4 	bl	8000648 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4690      	mov	r8, r2
 8001286:	4699      	mov	r9, r3
 8001288:	6838      	ldr	r0, [r7, #0]
 800128a:	f7ff f985 	bl	8000598 <__aeabi_f2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4640      	mov	r0, r8
 8001294:	4649      	mov	r1, r9
 8001296:	f7ff f9d7 	bl	8000648 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4620      	mov	r0, r4
 80012a0:	4629      	mov	r1, r5
 80012a2:	f7ff f81b 	bl	80002dc <__adddf3>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fcc3 	bl	8000c38 <__aeabi_d2f>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	605a      	str	r2, [r3, #4]
    ekf->theta += omega * dt;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80012be:	edd7 6a04 	vldr	s13, [r7, #16]
 80012c2:	edd7 7a00 	vldr	s15, [r7]
 80012c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	edc3 7a02 	vstr	s15, [r3, #8]
    ekf->v = v;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	60da      	str	r2, [r3, #12]


    ekf->theta = NormalizeAngle(ekf->theta);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	f7ff fec4 	bl	8001070 <NormalizeAngle>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	edc3 7a02 	vstr	s15, [r3, #8]


    for (int i = 0; i < 4; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e02e      	b.n	8001356 <EKF_Predict+0x1de>
        for (int j = 0; j < 4; j++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	e025      	b.n	800134a <EKF_Predict+0x1d2>
            ekf->P[i][j] += Q[i][j] * dt;
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	0099      	lsls	r1, r3, #2
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	440b      	add	r3, r1
 8001308:	3304      	adds	r3, #4
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	4915      	ldr	r1, [pc, #84]	@ (8001368 <EKF_Predict+0x1f0>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	009a      	lsls	r2, r3, #2
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	edd3 6a00 	vldr	s13, [r3]
 8001324:	edd7 7a00 	vldr	s15, [r7]
 8001328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	0099      	lsls	r1, r3, #2
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	440b      	add	r3, r1
 800133a:	3304      	adds	r3, #4
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	3301      	adds	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b03      	cmp	r3, #3
 800134e:	ddd6      	ble.n	80012fe <EKF_Predict+0x186>
    for (int i = 0; i < 4; i++) {
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3301      	adds	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2b03      	cmp	r3, #3
 800135a:	ddcd      	ble.n	80012f8 <EKF_Predict+0x180>
        }
    }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001368:	0800d80c 	.word	0x0800d80c
 800136c:	eb851eb8 	.word	0xeb851eb8
 8001370:	3faeb851 	.word	0x3faeb851

08001374 <EKF_Update>:


void EKF_Update(EKF_State *ekf, float theta_imu, float ax, float ay) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001380:	edc7 0a01 	vstr	s1, [r7, #4]
 8001384:	ed87 1a00 	vstr	s2, [r7]
    float K_theta;

    K_theta = 0.5;
 8001388:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800138c:	617b      	str	r3, [r7, #20]
    float theta_error = theta_imu - ekf->theta;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	edd3 7a02 	vldr	s15, [r3, #8]
 8001394:	ed97 7a02 	vldr	s14, [r7, #8]
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	edc7 7a04 	vstr	s15, [r7, #16]
    ekf->theta += K_theta * theta_error;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80013a6:	edd7 6a05 	vldr	s13, [r7, #20]
 80013aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	edc3 7a02 	vstr	s15, [r3, #8]


    ekf->theta = NormalizeAngle(ekf->theta);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	f7ff fe53 	bl	8001070 <NormalizeAngle>
 80013ca:	eef0 7a40 	vmov.f32	s15, s0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edc3 7a02 	vstr	s15, [r3, #8]
    ekf->P[2][2] += R[0][0];
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80013da:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80013f0 <EKF_Update+0x7c>
 80013de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	3c23d70a 	.word	0x3c23d70a

080013f4 <IMU_Init>:


float GYRO_SCALE = 65.5;
float ACCEL_SCALE = 8192.0;

void IMU_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
    uint8_t check;
    uint8_t data;

    check = IMU_ReadReg(IMU_WHO_AM_I);
 80013fa:	2075      	movs	r0, #117	@ 0x75
 80013fc:	f000 f8a0 	bl	8001540 <IMU_ReadReg>
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
    if (check == 0x70) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b70      	cmp	r3, #112	@ 0x70
 8001408:	d162      	bne.n	80014d0 <IMU_Init+0xdc>
        IMU_WriteReg(IMU_PWR_MGMT_1, 0x00);
 800140a:	2100      	movs	r1, #0
 800140c:	206b      	movs	r0, #107	@ 0x6b
 800140e:	f000 f86f 	bl	80014f0 <IMU_WriteReg>
        IMU_WriteReg(IMU_GYRO_CONFIG, (1 << 3));
 8001412:	2108      	movs	r1, #8
 8001414:	201b      	movs	r0, #27
 8001416:	f000 f86b 	bl	80014f0 <IMU_WriteReg>
        IMU_WriteReg(IMU_ACCEL_CONFIG, (1 << 3));
 800141a:	2108      	movs	r1, #8
 800141c:	201c      	movs	r0, #28
 800141e:	f000 f867 	bl	80014f0 <IMU_WriteReg>

        uint8_t gyro_config = IMU_ReadReg(IMU_GYRO_CONFIG);
 8001422:	201b      	movs	r0, #27
 8001424:	f000 f88c 	bl	8001540 <IMU_ReadReg>
 8001428:	4603      	mov	r3, r0
 800142a:	71bb      	strb	r3, [r7, #6]
        uint8_t fs_sel = (gyro_config >> 3) & 0x03;
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	717b      	strb	r3, [r7, #5]

        switch(fs_sel) {
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d81a      	bhi.n	8001474 <IMU_Init+0x80>
 800143e:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <IMU_Init+0x50>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	0800145d 	.word	0x0800145d
 800144c:	08001465 	.word	0x08001465
 8001450:	0800146d 	.word	0x0800146d
            case 0: GYRO_SCALE = 131.0; break;  // ±250°/s
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <IMU_Init+0xe4>)
 8001456:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <IMU_Init+0xe8>)
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e00b      	b.n	8001474 <IMU_Init+0x80>
            case 1: GYRO_SCALE = 65.5;  break;  // ±500°/s
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <IMU_Init+0xe4>)
 800145e:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <IMU_Init+0xec>)
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e007      	b.n	8001474 <IMU_Init+0x80>
            case 2: GYRO_SCALE = 32.8;  break;  // ±1000°/s
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <IMU_Init+0xe4>)
 8001466:	4a1f      	ldr	r2, [pc, #124]	@ (80014e4 <IMU_Init+0xf0>)
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e003      	b.n	8001474 <IMU_Init+0x80>
            case 3: GYRO_SCALE = 16.4;  break;  // ±2000°/s
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <IMU_Init+0xe4>)
 800146e:	4a1e      	ldr	r2, [pc, #120]	@ (80014e8 <IMU_Init+0xf4>)
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	bf00      	nop
        }

        uint8_t accel_config = IMU_ReadReg(IMU_ACCEL_CONFIG);
 8001474:	201c      	movs	r0, #28
 8001476:	f000 f863 	bl	8001540 <IMU_ReadReg>
 800147a:	4603      	mov	r3, r0
 800147c:	713b      	strb	r3, [r7, #4]
        uint8_t afs_sel = (accel_config >> 3) & 0x03;
 800147e:	793b      	ldrb	r3, [r7, #4]
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	70fb      	strb	r3, [r7, #3]

        switch(afs_sel) {
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d81f      	bhi.n	80014d0 <IMU_Init+0xdc>
 8001490:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <IMU_Init+0xa4>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014b3 	.word	0x080014b3
 80014a0:	080014bd 	.word	0x080014bd
 80014a4:	080014c7 	.word	0x080014c7
            case 0: ACCEL_SCALE = 16384.0; break;  // ±2g
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <IMU_Init+0xf8>)
 80014aa:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e00e      	b.n	80014d0 <IMU_Init+0xdc>
            case 1: ACCEL_SCALE = 8192.0;  break;  // ±4g
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <IMU_Init+0xf8>)
 80014b4:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e009      	b.n	80014d0 <IMU_Init+0xdc>
            case 2: ACCEL_SCALE = 4096.0;  break;  // ±8g
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <IMU_Init+0xf8>)
 80014be:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e004      	b.n	80014d0 <IMU_Init+0xdc>
            case 3: ACCEL_SCALE = 2048.0;  break;  // ±16g
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <IMU_Init+0xf8>)
 80014c8:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	bf00      	nop
        }
    }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	43030000 	.word	0x43030000
 80014e0:	42830000 	.word	0x42830000
 80014e4:	42033333 	.word	0x42033333
 80014e8:	41833333 	.word	0x41833333
 80014ec:	20000004 	.word	0x20000004

080014f0 <IMU_WriteReg>:

void IMU_WriteReg(uint8_t reg, uint8_t data) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	460a      	mov	r2, r1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {reg, data};
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	733b      	strb	r3, [r7, #12]
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800150e:	480a      	ldr	r0, [pc, #40]	@ (8001538 <IMU_WriteReg+0x48>)
 8001510:	f002 fcde 	bl	8003ed0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, txData, 2, HAL_MAX_DELAY);
 8001514:	f107 010c 	add.w	r1, r7, #12
 8001518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800151c:	2202      	movs	r2, #2
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <IMU_WriteReg+0x4c>)
 8001520:	f003 fd6b 	bl	8004ffa <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152a:	4803      	ldr	r0, [pc, #12]	@ (8001538 <IMU_WriteReg+0x48>)
 800152c:	f002 fcd0 	bl	8003ed0 <HAL_GPIO_WritePin>
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	48000400 	.word	0x48000400
 800153c:	20000444 	.word	0x20000444

08001540 <IMU_ReadReg>:

uint8_t IMU_ReadReg(uint8_t reg) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = reg | 0x80;
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001550:	b2db      	uxtb	r3, r3
 8001552:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData;
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800155a:	480f      	ldr	r0, [pc, #60]	@ (8001598 <IMU_ReadReg+0x58>)
 800155c:	f002 fcb8 	bl	8003ed0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, &txData, 1, HAL_MAX_DELAY);
 8001560:	f107 010f 	add.w	r1, r7, #15
 8001564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001568:	2201      	movs	r2, #1
 800156a:	480c      	ldr	r0, [pc, #48]	@ (800159c <IMU_ReadReg+0x5c>)
 800156c:	f003 fd45 	bl	8004ffa <HAL_SPI_Transmit>
    HAL_SPI_Receive(IMU_SPI, &rxData, 1, HAL_MAX_DELAY);
 8001570:	f107 010e 	add.w	r1, r7, #14
 8001574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001578:	2201      	movs	r2, #1
 800157a:	4808      	ldr	r0, [pc, #32]	@ (800159c <IMU_ReadReg+0x5c>)
 800157c:	f003 feb3 	bl	80052e6 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001586:	4804      	ldr	r0, [pc, #16]	@ (8001598 <IMU_ReadReg+0x58>)
 8001588:	f002 fca2 	bl	8003ed0 <HAL_GPIO_WritePin>
    return rxData;
 800158c:	7bbb      	ldrb	r3, [r7, #14]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	48000400 	.word	0x48000400
 800159c:	20000444 	.word	0x20000444

080015a0 <IMU_ReadAccelData>:

void IMU_ReadAccelData(int16_t *accelData) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_ACCEL_XOUT_H);
 80015a8:	203b      	movs	r0, #59	@ 0x3b
 80015aa:	f7ff ffc9 	bl	8001540 <IMU_ReadReg>
 80015ae:	4603      	mov	r3, r0
 80015b0:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_ACCEL_XOUT_L);
 80015b2:	203c      	movs	r0, #60	@ 0x3c
 80015b4:	f7ff ffc4 	bl	8001540 <IMU_ReadReg>
 80015b8:	4603      	mov	r3, r0
 80015ba:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_ACCEL_YOUT_H);
 80015bc:	203d      	movs	r0, #61	@ 0x3d
 80015be:	f7ff ffbf 	bl	8001540 <IMU_ReadReg>
 80015c2:	4603      	mov	r3, r0
 80015c4:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_ACCEL_YOUT_L);
 80015c6:	203e      	movs	r0, #62	@ 0x3e
 80015c8:	f7ff ffba 	bl	8001540 <IMU_ReadReg>
 80015cc:	4603      	mov	r3, r0
 80015ce:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_ACCEL_ZOUT_H);
 80015d0:	203f      	movs	r0, #63	@ 0x3f
 80015d2:	f7ff ffb5 	bl	8001540 <IMU_ReadReg>
 80015d6:	4603      	mov	r3, r0
 80015d8:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_ACCEL_ZOUT_L);
 80015da:	2040      	movs	r0, #64	@ 0x40
 80015dc:	f7ff ffb0 	bl	8001540 <IMU_ReadReg>
 80015e0:	4603      	mov	r3, r0
 80015e2:	737b      	strb	r3, [r7, #13]

    accelData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 80015e4:	7a3b      	ldrb	r3, [r7, #8]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7a7b      	ldrb	r3, [r7, #9]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	801a      	strh	r2, [r3, #0]
    accelData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 80015f8:	7abb      	ldrb	r3, [r7, #10]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b219      	sxth	r1, r3
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	b21a      	sxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3302      	adds	r3, #2
 8001608:	430a      	orrs	r2, r1
 800160a:	b212      	sxth	r2, r2
 800160c:	801a      	strh	r2, [r3, #0]
    accelData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 800160e:	7b3b      	ldrb	r3, [r7, #12]
 8001610:	b21b      	sxth	r3, r3
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b219      	sxth	r1, r3
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	b21a      	sxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	430a      	orrs	r2, r1
 8001620:	b212      	sxth	r2, r2
 8001622:	801a      	strh	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <IMU_ReadGyroData>:

void IMU_ReadGyroData(int16_t *gyroData) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_GYRO_XOUT_H);
 8001634:	2043      	movs	r0, #67	@ 0x43
 8001636:	f7ff ff83 	bl	8001540 <IMU_ReadReg>
 800163a:	4603      	mov	r3, r0
 800163c:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_GYRO_XOUT_L);
 800163e:	2044      	movs	r0, #68	@ 0x44
 8001640:	f7ff ff7e 	bl	8001540 <IMU_ReadReg>
 8001644:	4603      	mov	r3, r0
 8001646:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_GYRO_YOUT_H);
 8001648:	2045      	movs	r0, #69	@ 0x45
 800164a:	f7ff ff79 	bl	8001540 <IMU_ReadReg>
 800164e:	4603      	mov	r3, r0
 8001650:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_GYRO_YOUT_L);
 8001652:	2046      	movs	r0, #70	@ 0x46
 8001654:	f7ff ff74 	bl	8001540 <IMU_ReadReg>
 8001658:	4603      	mov	r3, r0
 800165a:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_GYRO_ZOUT_H);
 800165c:	2047      	movs	r0, #71	@ 0x47
 800165e:	f7ff ff6f 	bl	8001540 <IMU_ReadReg>
 8001662:	4603      	mov	r3, r0
 8001664:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_GYRO_ZOUT_L);
 8001666:	2048      	movs	r0, #72	@ 0x48
 8001668:	f7ff ff6a 	bl	8001540 <IMU_ReadReg>
 800166c:	4603      	mov	r3, r0
 800166e:	737b      	strb	r3, [r7, #13]

    gyroData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 8001670:	7a3b      	ldrb	r3, [r7, #8]
 8001672:	b21b      	sxth	r3, r3
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21a      	sxth	r2, r3
 8001678:	7a7b      	ldrb	r3, [r7, #9]
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21a      	sxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	801a      	strh	r2, [r3, #0]
    gyroData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 8001684:	7abb      	ldrb	r3, [r7, #10]
 8001686:	b21b      	sxth	r3, r3
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	b219      	sxth	r1, r3
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	b21a      	sxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3302      	adds	r3, #2
 8001694:	430a      	orrs	r2, r1
 8001696:	b212      	sxth	r2, r2
 8001698:	801a      	strh	r2, [r3, #0]
    gyroData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 800169a:	7b3b      	ldrb	r3, [r7, #12]
 800169c:	b21b      	sxth	r3, r3
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b219      	sxth	r1, r3
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	430a      	orrs	r2, r1
 80016ac:	b212      	sxth	r2, r2
 80016ae:	801a      	strh	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <IMU_GetConvertedData>:

void IMU_GetConvertedData(float *accel, float *gyro) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    int16_t accelData[3], gyroData[3];
    IMU_ReadAccelData(accelData);
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff6a 	bl	80015a0 <IMU_ReadAccelData>
    IMU_ReadGyroData(gyroData);
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffab 	bl	800162c <IMU_ReadGyroData>

    accel[0] = (float)accelData[0] / ACCEL_SCALE * 9.81;
 80016d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001858 <IMU_GetConvertedData+0x1a0>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ec:	ee16 0a90 	vmov	r0, s13
 80016f0:	f7fe ff52 	bl	8000598 <__aeabi_f2d>
 80016f4:	a354      	add	r3, pc, #336	@ (adr r3, 8001848 <IMU_GetConvertedData+0x190>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ffa5 	bl	8000648 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fa97 	bl	8000c38 <__aeabi_d2f>
 800170a:	4602      	mov	r2, r0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	601a      	str	r2, [r3, #0]
    accel[1] = (float)accelData[1] / ACCEL_SCALE * 9.81;
 8001710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171c:	4b4e      	ldr	r3, [pc, #312]	@ (8001858 <IMU_GetConvertedData+0x1a0>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001726:	ee16 0a90 	vmov	r0, s13
 800172a:	f7fe ff35 	bl	8000598 <__aeabi_f2d>
 800172e:	a346      	add	r3, pc, #280	@ (adr r3, 8001848 <IMU_GetConvertedData+0x190>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff88 	bl	8000648 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	1d1c      	adds	r4, r3, #4
 8001744:	f7ff fa78 	bl	8000c38 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	6023      	str	r3, [r4, #0]
    accel[2] = (float)accelData[2] / ACCEL_SCALE * 9.81;
 800174c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001758:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <IMU_GetConvertedData+0x1a0>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001762:	ee16 0a90 	vmov	r0, s13
 8001766:	f7fe ff17 	bl	8000598 <__aeabi_f2d>
 800176a:	a337      	add	r3, pc, #220	@ (adr r3, 8001848 <IMU_GetConvertedData+0x190>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff6a 	bl	8000648 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0408 	add.w	r4, r3, #8
 8001782:	f7ff fa59 	bl	8000c38 <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
 8001788:	6023      	str	r3, [r4, #0]

    gyro[0] = (float)gyroData[0] / GYRO_SCALE * (M_PI / 180.0);
 800178a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001796:	4b31      	ldr	r3, [pc, #196]	@ (800185c <IMU_GetConvertedData+0x1a4>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017a0:	ee16 0a90 	vmov	r0, s13
 80017a4:	f7fe fef8 	bl	8000598 <__aeabi_f2d>
 80017a8:	a329      	add	r3, pc, #164	@ (adr r3, 8001850 <IMU_GetConvertedData+0x198>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff4b 	bl	8000648 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fa3d 	bl	8000c38 <__aeabi_d2f>
 80017be:	4602      	mov	r2, r0
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	601a      	str	r2, [r3, #0]
    gyro[1] = (float)gyroData[1] / GYRO_SCALE * (M_PI / 180.0);
 80017c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <IMU_GetConvertedData+0x1a4>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017da:	ee16 0a90 	vmov	r0, s13
 80017de:	f7fe fedb 	bl	8000598 <__aeabi_f2d>
 80017e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001850 <IMU_GetConvertedData+0x198>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ff2e 	bl	8000648 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	1d1c      	adds	r4, r3, #4
 80017f8:	f7ff fa1e 	bl	8000c38 <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	6023      	str	r3, [r4, #0]
    gyro[2] = (float)gyroData[2] / GYRO_SCALE * (M_PI / 180.0);
 8001800:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <IMU_GetConvertedData+0x1a4>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001816:	ee16 0a90 	vmov	r0, s13
 800181a:	f7fe febd 	bl	8000598 <__aeabi_f2d>
 800181e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001850 <IMU_GetConvertedData+0x198>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe ff10 	bl	8000648 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f103 0408 	add.w	r4, r3, #8
 8001836:	f7ff f9ff 	bl	8000c38 <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	6023      	str	r3, [r4, #0]
}
 800183e:	bf00      	nop
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	51eb851f 	.word	0x51eb851f
 800184c:	40239eb8 	.word	0x40239eb8
 8001850:	a2529d39 	.word	0xa2529d39
 8001854:	3f91df46 	.word	0x3f91df46
 8001858:	20000004 	.word	0x20000004
 800185c:	20000000 	.word	0x20000000

08001860 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001890:	f7ff f96a 	bl	8000b68 <__aeabi_dcmpgt>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80018a6:	e011      	b.n	80018cc <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018b4:	f7ff f93a 	bl	8000b2c <__aeabi_dcmplt>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d100      	bne.n	80018c0 <PID_Init+0x60>
}
 80018be:	e005      	b.n	80018cc <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	0000      	movs	r0, r0
	...

080018d8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6278      	str	r0, [r7, #36]	@ 0x24
 80018e0:	6239      	str	r1, [r7, #32]
 80018e2:	61fa      	str	r2, [r7, #28]
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	ed87 0b04 	vstr	d0, [r7, #16]
 80018ea:	ed87 1b02 	vstr	d1, [r7, #8]
 80018ee:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	6a3a      	ldr	r2, [r7, #32]
 80018fc:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800190a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001960 <PID+0x88>
 800190e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001968 <PID+0x90>
 8001912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001914:	f000 f956 	bl	8001bc4 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	2264      	movs	r2, #100	@ 0x64
 800191c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800191e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001922:	4619      	mov	r1, r3
 8001924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001926:	f000 fa63 	bl	8001df0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800192a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800192e:	4619      	mov	r1, r3
 8001930:	ed97 2b00 	vldr	d2, [r7]
 8001934:	ed97 1b02 	vldr	d1, [r7, #8]
 8001938:	ed97 0b04 	vldr	d0, [r7, #16]
 800193c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800193e:	f000 f9af 	bl	8001ca0 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001942:	f002 f831 	bl	80039a8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	1ad2      	subs	r2, r2, r3
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	605a      	str	r2, [r3, #4]

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	@ 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	f3af 8000 	nop.w
 8001960:	00000000 	.word	0x00000000
 8001964:	406fe000 	.word	0x406fe000
	...

08001970 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	@ 0x30
 8001974:	af02      	add	r7, sp, #8
 8001976:	6278      	str	r0, [r7, #36]	@ 0x24
 8001978:	6239      	str	r1, [r7, #32]
 800197a:	61fa      	str	r2, [r7, #28]
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001982:	ed87 1b02 	vstr	d1, [r7, #8]
 8001986:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 800198a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2301      	movs	r3, #1
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	ed97 2b00 	vldr	d2, [r7]
 8001998:	ed97 1b02 	vldr	d1, [r7, #8]
 800199c:	ed97 0b04 	vldr	d0, [r7, #16]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019a8:	f7ff ff96 	bl	80018d8 <PID>
}
 80019ac:	bf00      	nop
 80019ae:	3728      	adds	r7, #40	@ 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b08c      	sub	sp, #48	@ 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <PID_Compute+0x14>
	{
		return _FALSE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e0db      	b.n	8001b80 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80019c8:	f001 ffee 	bl	80039a8 <HAL_GetTick>
 80019cc:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	6a3a      	ldr	r2, [r7, #32]
 80019de:	429a      	cmp	r2, r3
 80019e0:	f0c0 80cd 	bcc.w	8001b7e <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	f7fe fc6c 	bl	80002d8 <__aeabi_dsub>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001a0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a12:	f7fe fc61 	bl	80002d8 <__aeabi_dsub>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001a2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a2e:	f7fe fe0b 	bl	8000648 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fc4f 	bl	80002dc <__adddf3>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d114      	bne.n	8001a7a <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a60:	f7fe fdf2 	bl	8000648 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fc34 	bl	80002d8 <__aeabi_dsub>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001a86:	f7ff f86f 	bl	8000b68 <__aeabi_dcmpgt>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001a9c:	e010      	b.n	8001ac0 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001aaa:	f7ff f83f 	bl	8000b2c <__aeabi_dcmplt>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00b      	beq.n	8001ae0 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ace:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ad2:	f7fe fdb9 	bl	8000648 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001ade:	e005      	b.n	8001aec <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001afc:	f7fe fda4 	bl	8000648 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4620      	mov	r0, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7fe fbe6 	bl	80002d8 <__aeabi_dsub>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b14:	f7fe fbe2 	bl	80002dc <__adddf3>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001b26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b2a:	f7ff f81d 	bl	8000b68 <__aeabi_dcmpgt>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001b3a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001b3e:	e00e      	b.n	8001b5e <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001b46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b4a:	f7fe ffef 	bl	8000b2c <__aeabi_dcmplt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001b5a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b66:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b70:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b78:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8001b7e:	2300      	movs	r3, #0
	}

}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3730      	adds	r7, #48	@ 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}

08001b88 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <PID_SetMode+0x2e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fe55 	bl	8001860 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	705a      	strb	r2, [r3, #1]

}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6178      	str	r0, [r7, #20]
 8001bcc:	ed87 0b02 	vstr	d0, [r7, #8]
 8001bd0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bdc:	f7fe ffba 	bl	8000b54 <__aeabi_dcmpge>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d158      	bne.n	8001c98 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8001be6:	6979      	ldr	r1, [r7, #20]
 8001be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bec:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001bf0:	6979      	ldr	r1, [r7, #20]
 8001bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bf6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d04b      	beq.n	8001c9a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c10:	f7fe ffaa 	bl	8000b68 <__aeabi_dcmpgt>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c24:	e9c1 2300 	strd	r2, r3, [r1]
 8001c28:	e012      	b.n	8001c50 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c38:	f7fe ff78 	bl	8000b2c <__aeabi_dcmplt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c5c:	f7fe ff84 	bl	8000b68 <__aeabi_dcmpgt>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c6c:	6979      	ldr	r1, [r7, #20]
 8001c6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c72:	e012      	b.n	8001c9a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c80:	f7fe ff54 	bl	8000b2c <__aeabi_dcmplt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c90:	6979      	ldr	r1, [r7, #20]
 8001c92:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c96:	e000      	b.n	8001c9a <PID_SetOutputLimits+0xd6>
		return;
 8001c98:	bf00      	nop
		}
		else { }

	}

}
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	61f8      	str	r0, [r7, #28]
 8001ca8:	ed87 0b04 	vstr	d0, [r7, #16]
 8001cac:	ed87 1b02 	vstr	d1, [r7, #8]
 8001cb0:	ed87 2b00 	vstr	d2, [r7]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc4:	f7fe ff32 	bl	8000b2c <__aeabi_dcmplt>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8089 	bne.w	8001de2 <PID_SetTunings2+0x142>
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cdc:	f7fe ff26 	bl	8000b2c <__aeabi_dcmplt>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d17d      	bne.n	8001de2 <PID_SetTunings2+0x142>
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf2:	f7fe ff1b 	bl	8000b2c <__aeabi_dcmplt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d172      	bne.n	8001de2 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	7efa      	ldrb	r2, [r7, #27]
 8001d00:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001d02:	7efb      	ldrb	r3, [r7, #27]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001d14:	69f9      	ldr	r1, [r7, #28]
 8001d16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001d1e:	69f9      	ldr	r1, [r7, #28]
 8001d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d24:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001d28:	69f9      	ldr	r1, [r7, #28]
 8001d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d2e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_ui2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <PID_SetTunings2+0x14c>)
 8001d42:	f7fe fdab 	bl	800089c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8001d4e:	69f9      	ldr	r1, [r7, #28]
 8001d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d54:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001d58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d60:	f7fe fc72 	bl	8000648 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	69f9      	ldr	r1, [r7, #28]
 8001d6a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d76:	f7fe fd91 	bl	800089c <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	69f9      	ldr	r1, [r7, #28]
 8001d80:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	78db      	ldrb	r3, [r3, #3]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d12b      	bne.n	8001de4 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d92:	f04f 0000 	mov.w	r0, #0
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	f7fe fa9d 	bl	80002d8 <__aeabi_dsub>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	69f9      	ldr	r1, [r7, #28]
 8001da4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001dae:	f04f 0000 	mov.w	r0, #0
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	f7fe fa8f 	bl	80002d8 <__aeabi_dsub>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	69f9      	ldr	r1, [r7, #28]
 8001dc0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f7fe fa81 	bl	80002d8 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	69f9      	ldr	r1, [r7, #28]
 8001ddc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001de0:	e000      	b.n	8001de4 <PID_SetTunings2+0x144>
		return;
 8001de2:	bf00      	nop

	}

}
 8001de4:	3728      	adds	r7, #40	@ 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	408f4000 	.word	0x408f4000

08001df0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	785b      	ldrb	r3, [r3, #1]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d02e      	beq.n	8001e62 <PID_SetControllerDirection+0x72>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	78db      	ldrb	r3, [r3, #3]
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d029      	beq.n	8001e62 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	f7fe fa5c 	bl	80002d8 <__aeabi_dsub>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001e30:	f04f 0000 	mov.w	r0, #0
 8001e34:	f04f 0100 	mov.w	r1, #0
 8001e38:	f7fe fa4e 	bl	80002d8 <__aeabi_dsub>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	f7fe fa40 	bl	80002d8 <__aeabi_dsub>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	70da      	strb	r2, [r3, #3]

}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	dd2e      	ble.n	8001ede <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	f7fe fb77 	bl	8000574 <__aeabi_i2d>
 8001e86:	4604      	mov	r4, r0
 8001e88:	460d      	mov	r5, r1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb60 	bl	8000554 <__aeabi_ui2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe fcfe 	bl	800089c <__aeabi_ddiv>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb2:	f7fe fbc9 	bl	8000648 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eca:	f7fe fce7 	bl	800089c <__aeabi_ddiv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]

	}

}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ee8 <VSSS_Init>:
uint8_t RxAddress[] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
char msg[] = "VSSS Ready\r\n";

#define ROBOT_ID 0

void VSSS_Init(void) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
    Kinematics_Init();
 8001eec:	f000 f95c 	bl	80021a8 <Kinematics_Init>
    NRF24_Init();
 8001ef0:	f001 f8e8 	bl	80030c4 <NRF24_Init>
    NRF24_RxMode(RxAddress, 125);
 8001ef4:	217d      	movs	r1, #125	@ 0x7d
 8001ef6:	4808      	ldr	r0, [pc, #32]	@ (8001f18 <VSSS_Init+0x30>)
 8001ef8:	f001 f90b 	bl	8003112 <NRF24_RxMode>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001efc:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <VSSS_Init+0x34>)
 8001efe:	f7fe f9df 	bl	80002c0 <strlen>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0a:	4904      	ldr	r1, [pc, #16]	@ (8001f1c <VSSS_Init+0x34>)
 8001f0c:	4804      	ldr	r0, [pc, #16]	@ (8001f20 <VSSS_Init+0x38>)
 8001f0e:	f005 f9a9 	bl	8007264 <HAL_UART_Transmit>

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000010 	.word	0x20000010
 8001f20:	200005d8 	.word	0x200005d8

08001f24 <VSSS_Run>:


void VSSS_Run(void) {
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b093      	sub	sp, #76	@ 0x4c
 8001f28:	af04      	add	r7, sp, #16
   if (isDataAvailable(2) == 1) {
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f001 f930 	bl	8003190 <isDataAvailable>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d168      	bne.n	8002008 <VSSS_Run+0xe4>
        NRF24_Receive(robot.RxData);
 8001f36:	4836      	ldr	r0, [pc, #216]	@ (8002010 <VSSS_Run+0xec>)
 8001f38:	f001 f94a 	bl	80031d0 <NRF24_Receive>
        uint8_t real_size = robot.RxData[0];
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <VSSS_Run+0xf0>)
 8001f3e:	7b1b      	ldrb	r3, [r3, #12]
 8001f40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (real_size >= sizeof(int) + 2 * sizeof(float)) {
 8001f44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f48:	2b0b      	cmp	r3, #11
 8001f4a:	d956      	bls.n	8001ffa <VSSS_Run+0xd6>

            memcpy(&robot.id, &robot.RxData[1], sizeof(int));
 8001f4c:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <VSSS_Run+0xf0>)
 8001f4e:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <VSSS_Run+0xf0>)
 8001f56:	601a      	str	r2, [r3, #0]
            robot.id = __builtin_bswap32(robot.id);
 8001f58:	4b2e      	ldr	r3, [pc, #184]	@ (8002014 <VSSS_Run+0xf0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	ba1b      	rev	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b2c      	ldr	r3, [pc, #176]	@ (8002014 <VSSS_Run+0xf0>)
 8001f62:	601a      	str	r2, [r3, #0]
            memcpy(&robot.vL, &robot.RxData[5], sizeof(float));
 8001f64:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <VSSS_Run+0xf0>)
 8001f66:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b29      	ldr	r3, [pc, #164]	@ (8002014 <VSSS_Run+0xf0>)
 8001f6e:	605a      	str	r2, [r3, #4]
            memcpy(&robot.vR, &robot.RxData[9], sizeof(float));
 8001f70:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <VSSS_Run+0xf0>)
 8001f72:	f8d3 3015 	ldr.w	r3, [r3, #21]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <VSSS_Run+0xf0>)
 8001f7a:	609a      	str	r2, [r3, #8]

            if (robot.id == ROBOT_ID) {
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <VSSS_Run+0xf0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d132      	bne.n	8001fea <VSSS_Run+0xc6>
                char buffer[50];
                snprintf(buffer, sizeof(buffer), "ID: %d, VL: %.2f, VR: %.2f\r\n", robot.id, robot.vL, robot.vR);
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <VSSS_Run+0xf0>)
 8001f86:	681e      	ldr	r6, [r3, #0]
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <VSSS_Run+0xf0>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fb03 	bl	8000598 <__aeabi_f2d>
 8001f92:	4604      	mov	r4, r0
 8001f94:	460d      	mov	r5, r1
 8001f96:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <VSSS_Run+0xf0>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fafc 	bl	8000598 <__aeabi_f2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	1d38      	adds	r0, r7, #4
 8001fa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001faa:	e9cd 4500 	strd	r4, r5, [sp]
 8001fae:	4633      	mov	r3, r6
 8001fb0:	4a19      	ldr	r2, [pc, #100]	@ (8002018 <VSSS_Run+0xf4>)
 8001fb2:	2132      	movs	r1, #50	@ 0x32
 8001fb4:	f006 fef8 	bl	8008da8 <sniprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe f980 	bl	80002c0 <strlen>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	1d39      	adds	r1, r7, #4
 8001fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fca:	4814      	ldr	r0, [pc, #80]	@ (800201c <VSSS_Run+0xf8>)
 8001fcc:	f005 f94a 	bl	8007264 <HAL_UART_Transmit>
                Kinematics_SetSpeeds(robot.vL, robot.vR);
 8001fd0:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <VSSS_Run+0xf0>)
 8001fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <VSSS_Run+0xf0>)
 8001fd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fdc:	eef0 0a47 	vmov.f32	s1, s14
 8001fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe4:	f000 f9f0 	bl	80023c8 <Kinematics_SetSpeeds>
            }
        } else {
            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid data received!\r\n", 24, 1000);
        }
    }
}
 8001fe8:	e00e      	b.n	8002008 <VSSS_Run+0xe4>
                HAL_UART_Transmit(&huart1, (uint8_t*)"Message ignored (wrong ID)\r\n", 29, 1000);
 8001fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fee:	221d      	movs	r2, #29
 8001ff0:	490b      	ldr	r1, [pc, #44]	@ (8002020 <VSSS_Run+0xfc>)
 8001ff2:	480a      	ldr	r0, [pc, #40]	@ (800201c <VSSS_Run+0xf8>)
 8001ff4:	f005 f936 	bl	8007264 <HAL_UART_Transmit>
}
 8001ff8:	e006      	b.n	8002008 <VSSS_Run+0xe4>
            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid data received!\r\n", 24, 1000);
 8001ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffe:	2218      	movs	r2, #24
 8002000:	4908      	ldr	r1, [pc, #32]	@ (8002024 <VSSS_Run+0x100>)
 8002002:	4806      	ldr	r0, [pc, #24]	@ (800201c <VSSS_Run+0xf8>)
 8002004:	f005 f92e 	bl	8007264 <HAL_UART_Transmit>
}
 8002008:	bf00      	nop
 800200a:	373c      	adds	r7, #60	@ 0x3c
 800200c:	46bd      	mov	sp, r7
 800200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002010:	20000220 	.word	0x20000220
 8002014:	20000214 	.word	0x20000214
 8002018:	0800d7a0 	.word	0x0800d7a0
 800201c:	200005d8 	.word	0x200005d8
 8002020:	0800d7c0 	.word	0x0800d7c0
 8002024:	0800d7e0 	.word	0x0800d7e0

08002028 <Encoder_Init>:

Encoder left_encoder;
Encoder right_encoder;

void Encoder_Init(Encoder *encoder, TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	601a      	str	r2, [r3, #0]
    encoder->last_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	b21a      	sxth	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	809a      	strh	r2, [r3, #4]
    encoder->last_time = HAL_GetTick();
 8002044:	f001 fcb0 	bl	80039a8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	609a      	str	r2, [r3, #8]
    encoder->rpm = 0.0f;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <Encoder_Calculate_RPM>:

void Encoder_Calculate_RPM(Encoder *encoder)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

    uint32_t current_time = HAL_GetTick();
 8002068:	f001 fc9e 	bl	80039a8 <HAL_GetTick>
 800206c:	61b8      	str	r0, [r7, #24]
    uint32_t delta_time = current_time - encoder->last_time;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]


    if (delta_time == 0) {
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d044      	beq.n	8002108 <Encoder_Calculate_RPM+0xa8>
        return;
    }

    int16_t current_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	827b      	strh	r3, [r7, #18]
    int16_t delta_encoder = current_encoder_value - encoder->last_encoder_value;
 8002088:	8a7a      	ldrh	r2, [r7, #18]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002090:	b29b      	uxth	r3, r3
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	b29b      	uxth	r3, r3
 8002096:	83fb      	strh	r3, [r7, #30]

    if (delta_encoder > (ENCODER_PULSES_PER_REV / 2)) {
 8002098:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800209c:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 80020a0:	db05      	blt.n	80020ae <Encoder_Calculate_RPM+0x4e>
        delta_encoder -= ENCODER_PULSES_PER_REV;
 80020a2:	8bfb      	ldrh	r3, [r7, #30]
 80020a4:	f6a3 23be 	subw	r3, r3, #2750	@ 0xabe
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	83fb      	strh	r3, [r7, #30]
 80020ac:	e009      	b.n	80020c2 <Encoder_Calculate_RPM+0x62>
    }
    else if (delta_encoder < -(ENCODER_PULSES_PER_REV / 2)) {
 80020ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020b2:	f513 6fac 	cmn.w	r3, #1376	@ 0x560
 80020b6:	dc04      	bgt.n	80020c2 <Encoder_Calculate_RPM+0x62>
        delta_encoder += ENCODER_PULSES_PER_REV;
 80020b8:	8bfb      	ldrh	r3, [r7, #30]
 80020ba:	f603 23be 	addw	r3, r3, #2750	@ 0xabe
 80020be:	b29b      	uxth	r3, r3
 80020c0:	83fb      	strh	r3, [r7, #30]
    }

    float dt_min = (float)delta_time / 60000.0f;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020cc:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002110 <Encoder_Calculate_RPM+0xb0>
 80020d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020d4:	edc7 7a03 	vstr	s15, [r7, #12]

    encoder->rpm = ((float)delta_encoder / (float)ENCODER_PULSES_PER_REV) / dt_min;
 80020d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002114 <Encoder_Calculate_RPM+0xb4>
 80020e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80020f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	edc3 7a03 	vstr	s15, [r3, #12]


    encoder->last_encoder_value = current_encoder_value;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8a7a      	ldrh	r2, [r7, #18]
 80020fe:	809a      	strh	r2, [r3, #4]
    encoder->last_time = current_time;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	e000      	b.n	800210a <Encoder_Calculate_RPM+0xaa>
        return;
 8002108:	bf00      	nop
}
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	476a6000 	.word	0x476a6000
 8002114:	452be000 	.word	0x452be000

08002118 <Encoder_Update>:

void Encoder_Update(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
    Encoder_Calculate_RPM(&left_encoder);
 800211c:	4803      	ldr	r0, [pc, #12]	@ (800212c <Encoder_Update+0x14>)
 800211e:	f7ff ff9f 	bl	8002060 <Encoder_Calculate_RPM>
    Encoder_Calculate_RPM(&right_encoder);
 8002122:	4803      	ldr	r0, [pc, #12]	@ (8002130 <Encoder_Update+0x18>)
 8002124:	f7ff ff9c 	bl	8002060 <Encoder_Calculate_RPM>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000240 	.word	0x20000240
 8002130:	20000250 	.word	0x20000250

08002134 <CalibrateGyro>:
char debug_imu[150];

static float theta_imu = 0.0;
static float gyro_bias = 0.0; // Compensação do giroscópio

void CalibrateGyro(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
    float sum = 0.0;
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
    int samples = 1000;
 8002140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002144:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < samples; i++) {
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	e012      	b.n	8002172 <CalibrateGyro+0x3e>
        IMU_GetConvertedData(accel, gyro);
 800214c:	4913      	ldr	r1, [pc, #76]	@ (800219c <CalibrateGyro+0x68>)
 800214e:	4814      	ldr	r0, [pc, #80]	@ (80021a0 <CalibrateGyro+0x6c>)
 8002150:	f7ff fab2 	bl	80016b8 <IMU_GetConvertedData>
        sum += gyro[2]; // Captura o bias do giroscópio
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <CalibrateGyro+0x68>)
 8002156:	edd3 7a02 	vldr	s15, [r3, #8]
 800215a:	ed97 7a03 	vldr	s14, [r7, #12]
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(1);
 8002166:	2001      	movs	r0, #1
 8002168:	f001 fc2a 	bl	80039c0 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3301      	adds	r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	dbe8      	blt.n	800214c <CalibrateGyro+0x18>
    }

    gyro_bias = sum / samples; // Calcula a média
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002184:	edd7 6a03 	vldr	s13, [r7, #12]
 8002188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <CalibrateGyro+0x70>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200003cc 	.word	0x200003cc
 80021a0:	200003c0 	.word	0x200003c0
 80021a4:	200003dc 	.word	0x200003dc

080021a8 <Kinematics_Init>:

void Kinematics_Init(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af04      	add	r7, sp, #16
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80021ae:	213c      	movs	r1, #60	@ 0x3c
 80021b0:	4847      	ldr	r0, [pc, #284]	@ (80022d0 <Kinematics_Init+0x128>)
 80021b2:	f004 f809 	bl	80061c8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80021b6:	213c      	movs	r1, #60	@ 0x3c
 80021b8:	4846      	ldr	r0, [pc, #280]	@ (80022d4 <Kinematics_Init+0x12c>)
 80021ba:	f004 f805 	bl	80061c8 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80021be:	2100      	movs	r1, #0
 80021c0:	4845      	ldr	r0, [pc, #276]	@ (80022d8 <Kinematics_Init+0x130>)
 80021c2:	f003 fe5b 	bl	8005e7c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021c6:	2100      	movs	r1, #0
 80021c8:	4844      	ldr	r0, [pc, #272]	@ (80022dc <Kinematics_Init+0x134>)
 80021ca:	f003 fe57 	bl	8005e7c <HAL_TIM_PWM_Start>

    IMU_Init();
 80021ce:	f7ff f911 	bl	80013f4 <IMU_Init>
    EKF_Init(&ekf);
 80021d2:	4843      	ldr	r0, [pc, #268]	@ (80022e0 <Kinematics_Init+0x138>)
 80021d4:	f7fe ffa0 	bl	8001118 <EKF_Init>
    CalibrateGyro(); // Calibra a IMU antes de começar
 80021d8:	f7ff ffac 	bl	8002134 <CalibrateGyro>

    Encoder_Init(&left_encoder, &htim3);
 80021dc:	493c      	ldr	r1, [pc, #240]	@ (80022d0 <Kinematics_Init+0x128>)
 80021de:	4841      	ldr	r0, [pc, #260]	@ (80022e4 <Kinematics_Init+0x13c>)
 80021e0:	f7ff ff22 	bl	8002028 <Encoder_Init>
    Encoder_Init(&right_encoder, &htim4);
 80021e4:	493b      	ldr	r1, [pc, #236]	@ (80022d4 <Kinematics_Init+0x12c>)
 80021e6:	4840      	ldr	r0, [pc, #256]	@ (80022e8 <Kinematics_Init+0x140>)
 80021e8:	f7ff ff1e 	bl	8002028 <Encoder_Init>

    Motor_Init(&motorLeft, &htim2, TIM_CHANNEL_1, INA1_GPIO_Port, INA1_Pin, INA2_GPIO_Port, INA2_Pin);
 80021ec:	2304      	movs	r3, #4
 80021ee:	9302      	str	r3, [sp, #8]
 80021f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	2302      	movs	r3, #2
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80021fe:	2200      	movs	r2, #0
 8002200:	4936      	ldr	r1, [pc, #216]	@ (80022dc <Kinematics_Init+0x134>)
 8002202:	483a      	ldr	r0, [pc, #232]	@ (80022ec <Kinematics_Init+0x144>)
 8002204:	f000 fda2 	bl	8002d4c <Motor_Init>
    Motor_Init(&motorRight, &htim1, TIM_CHANNEL_1, INB1_GPIO_Port, INB1_Pin, INB2_GPIO_Port, INB2_Pin);
 8002208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800221e:	2200      	movs	r2, #0
 8002220:	492d      	ldr	r1, [pc, #180]	@ (80022d8 <Kinematics_Init+0x130>)
 8002222:	4833      	ldr	r0, [pc, #204]	@ (80022f0 <Kinematics_Init+0x148>)
 8002224:	f000 fd92 	bl	8002d4c <Motor_Init>

    PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8002228:	2300      	movs	r3, #0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 80022a8 <Kinematics_Init+0x100>
 8002230:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 80022b0 <Kinematics_Init+0x108>
 8002234:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 80022b8 <Kinematics_Init+0x110>
 8002238:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <Kinematics_Init+0x14c>)
 800223a:	4a2f      	ldr	r2, [pc, #188]	@ (80022f8 <Kinematics_Init+0x150>)
 800223c:	492f      	ldr	r1, [pc, #188]	@ (80022fc <Kinematics_Init+0x154>)
 800223e:	4830      	ldr	r0, [pc, #192]	@ (8002300 <Kinematics_Init+0x158>)
 8002240:	f7ff fb96 	bl	8001970 <PID2>
    PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 1.378, 390.3, 0.001194, _PID_CD_DIRECT);
 8002244:	2300      	movs	r3, #0
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 80022a8 <Kinematics_Init+0x100>
 800224c:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 80022b0 <Kinematics_Init+0x108>
 8002250:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 80022b8 <Kinematics_Init+0x110>
 8002254:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <Kinematics_Init+0x15c>)
 8002256:	4a2c      	ldr	r2, [pc, #176]	@ (8002308 <Kinematics_Init+0x160>)
 8002258:	492c      	ldr	r1, [pc, #176]	@ (800230c <Kinematics_Init+0x164>)
 800225a:	482d      	ldr	r0, [pc, #180]	@ (8002310 <Kinematics_Init+0x168>)
 800225c:	f7ff fb88 	bl	8001970 <PID2>

    PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8002260:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 80022c0 <Kinematics_Init+0x118>
 8002264:	ed9f 0b18 	vldr	d0, [pc, #96]	@ 80022c8 <Kinematics_Init+0x120>
 8002268:	4825      	ldr	r0, [pc, #148]	@ (8002300 <Kinematics_Init+0x158>)
 800226a:	f7ff fcab 	bl	8001bc4 <PID_SetOutputLimits>
    PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 800226e:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80022c0 <Kinematics_Init+0x118>
 8002272:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 80022c8 <Kinematics_Init+0x120>
 8002276:	4826      	ldr	r0, [pc, #152]	@ (8002310 <Kinematics_Init+0x168>)
 8002278:	f7ff fca4 	bl	8001bc4 <PID_SetOutputLimits>

    PID_SetSampleTime(&pidLeft, 1);
 800227c:	2101      	movs	r1, #1
 800227e:	4820      	ldr	r0, [pc, #128]	@ (8002300 <Kinematics_Init+0x158>)
 8002280:	f7ff fdf6 	bl	8001e70 <PID_SetSampleTime>
    PID_SetSampleTime(&pidRight, 1);
 8002284:	2101      	movs	r1, #1
 8002286:	4822      	ldr	r0, [pc, #136]	@ (8002310 <Kinematics_Init+0x168>)
 8002288:	f7ff fdf2 	bl	8001e70 <PID_SetSampleTime>

    PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 800228c:	2101      	movs	r1, #1
 800228e:	481c      	ldr	r0, [pc, #112]	@ (8002300 <Kinematics_Init+0x158>)
 8002290:	f7ff fc7a 	bl	8001b88 <PID_SetMode>
    PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8002294:	2101      	movs	r1, #1
 8002296:	481e      	ldr	r0, [pc, #120]	@ (8002310 <Kinematics_Init+0x168>)
 8002298:	f7ff fc76 	bl	8001b88 <PID_SetMode>
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	f3af 8000 	nop.w
 80022a8:	bce4217d 	.word	0xbce4217d
 80022ac:	3f538fff 	.word	0x3f538fff
 80022b0:	cccccccd 	.word	0xcccccccd
 80022b4:	407864cc 	.word	0x407864cc
 80022b8:	ba5e353f 	.word	0xba5e353f
 80022bc:	3ff60c49 	.word	0x3ff60c49
 80022c0:	00000000 	.word	0x00000000
 80022c4:	409a8c00 	.word	0x409a8c00
 80022c8:	00000000 	.word	0x00000000
 80022cc:	c09a8c00 	.word	0xc09a8c00
 80022d0:	20000540 	.word	0x20000540
 80022d4:	2000058c 	.word	0x2000058c
 80022d8:	200004a8 	.word	0x200004a8
 80022dc:	200004f4 	.word	0x200004f4
 80022e0:	20000370 	.word	0x20000370
 80022e4:	20000240 	.word	0x20000240
 80022e8:	20000250 	.word	0x20000250
 80022ec:	2000066c 	.word	0x2000066c
 80022f0:	20000684 	.word	0x20000684
 80022f4:	20000260 	.word	0x20000260
 80022f8:	20000270 	.word	0x20000270
 80022fc:	20000280 	.word	0x20000280
 8002300:	20000290 	.word	0x20000290
 8002304:	20000268 	.word	0x20000268
 8002308:	20000278 	.word	0x20000278
 800230c:	20000288 	.word	0x20000288
 8002310:	20000300 	.word	0x20000300
 8002314:	00000000 	.word	0x00000000

08002318 <LinearToRPM>:

/**
 * @brief Converte velocidade linear para RPM.
 */
float LinearToRPM(float v) {
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (v * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <LinearToRPM+0x50>)
 800232e:	f7fe f98b 	bl	8000648 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	a309      	add	r3, pc, #36	@ (adr r3, 8002360 <LinearToRPM+0x48>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe faac 	bl	800089c <__aeabi_ddiv>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f7fe fc74 	bl	8000c38 <__aeabi_d2f>
 8002350:	4603      	mov	r3, r0
 8002352:	ee07 3a90 	vmov	s15, r3
}
 8002356:	eeb0 0a67 	vmov.f32	s0, s15
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	5b22baa6 	.word	0x5b22baa6
 8002364:	3fd8209f 	.word	0x3fd8209f
 8002368:	404e0000 	.word	0x404e0000
 800236c:	00000000 	.word	0x00000000

08002370 <RPMToLinear>:

float RPMToLinear(double RPM){
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	ed87 0b00 	vstr	d0, [r7]
	return (RPM * (2 * M_PI * WHEEL_RADIUS) / 60.0);
 800237a:	a310      	add	r3, pc, #64	@ (adr r3, 80023bc <RPMToLinear+0x4c>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002384:	f7fe f960 	bl	8000648 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <RPMToLinear+0x48>)
 8002396:	f7fe fa81 	bl	800089c <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fc49 	bl	8000c38 <__aeabi_d2f>
 80023a6:	4603      	mov	r3, r0
 80023a8:	ee07 3a90 	vmov	s15, r3
}
 80023ac:	eeb0 0a67 	vmov.f32	s0, s15
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	404e0000 	.word	0x404e0000
 80023bc:	5b22baa6 	.word	0x5b22baa6
 80023c0:	3fd8209f 	.word	0x3fd8209f
 80023c4:	00000000 	.word	0x00000000

080023c8 <Kinematics_SetSpeeds>:
/**
 * @brief Define as velocidades do robô com base em velocidades lineares (m/s).
 *        Chama `Set_Motor_Speeds()` do `motor_control.c` para aplicar nos motores.
 */
void Kinematics_SetSpeeds(float vL, float vR) {
 80023c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023cc:	b087      	sub	sp, #28
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	ed87 0a01 	vstr	s0, [r7, #4]
 80023d4:	edc7 0a00 	vstr	s1, [r7]
    Encoder_Update();
 80023d8:	f7ff fe9e 	bl	8002118 <Encoder_Update>
    IMU_GetConvertedData(accel, gyro);
 80023dc:	4986      	ldr	r1, [pc, #536]	@ (80025f8 <Kinematics_SetSpeeds+0x230>)
 80023de:	4887      	ldr	r0, [pc, #540]	@ (80025fc <Kinematics_SetSpeeds+0x234>)
 80023e0:	f7ff f96a 	bl	80016b8 <IMU_GetConvertedData>

    theta_imu += (gyro[2] - gyro_bias) * 0.01;
 80023e4:	4b86      	ldr	r3, [pc, #536]	@ (8002600 <Kinematics_SetSpeeds+0x238>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8d5 	bl	8000598 <__aeabi_f2d>
 80023ee:	4682      	mov	sl, r0
 80023f0:	468b      	mov	fp, r1
 80023f2:	4b81      	ldr	r3, [pc, #516]	@ (80025f8 <Kinematics_SetSpeeds+0x230>)
 80023f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80023f8:	4b82      	ldr	r3, [pc, #520]	@ (8002604 <Kinematics_SetSpeeds+0x23c>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002402:	ee17 0a90 	vmov	r0, s15
 8002406:	f7fe f8c7 	bl	8000598 <__aeabi_f2d>
 800240a:	a377      	add	r3, pc, #476	@ (adr r3, 80025e8 <Kinematics_SetSpeeds+0x220>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe f91a 	bl	8000648 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4650      	mov	r0, sl
 800241a:	4659      	mov	r1, fp
 800241c:	f7fd ff5e 	bl	80002dc <__adddf3>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fc06 	bl	8000c38 <__aeabi_d2f>
 800242c:	4603      	mov	r3, r0
 800242e:	4a74      	ldr	r2, [pc, #464]	@ (8002600 <Kinematics_SetSpeeds+0x238>)
 8002430:	6013      	str	r3, [r2, #0]
    float vL_real = RPMToLinear(left_encoder.rpm);
 8002432:	4b75      	ldr	r3, [pc, #468]	@ (8002608 <Kinematics_SetSpeeds+0x240>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f8ae 	bl	8000598 <__aeabi_f2d>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	ec43 2b10 	vmov	d0, r2, r3
 8002444:	f7ff ff94 	bl	8002370 <RPMToLinear>
 8002448:	ed87 0a05 	vstr	s0, [r7, #20]
    float vR_real = RPMToLinear(right_encoder.rpm);
 800244c:	4b6f      	ldr	r3, [pc, #444]	@ (800260c <Kinematics_SetSpeeds+0x244>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f8a1 	bl	8000598 <__aeabi_f2d>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	ec43 2b10 	vmov	d0, r2, r3
 800245e:	f7ff ff87 	bl	8002370 <RPMToLinear>
 8002462:	ed87 0a04 	vstr	s0, [r7, #16]


    if (fabs(vL_real) < 0.001 && fabs(vR_real) < 0.001) {
 8002466:	edd7 7a05 	vldr	s15, [r7, #20]
 800246a:	eef0 7ae7 	vabs.f32	s15, s15
 800246e:	ee17 0a90 	vmov	r0, s15
 8002472:	f7fe f891 	bl	8000598 <__aeabi_f2d>
 8002476:	a35e      	add	r3, pc, #376	@ (adr r3, 80025f0 <Kinematics_SetSpeeds+0x228>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe fb56 	bl	8000b2c <__aeabi_dcmplt>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d013      	beq.n	80024ae <Kinematics_SetSpeeds+0xe6>
 8002486:	edd7 7a04 	vldr	s15, [r7, #16]
 800248a:	eef0 7ae7 	vabs.f32	s15, s15
 800248e:	ee17 0a90 	vmov	r0, s15
 8002492:	f7fe f881 	bl	8000598 <__aeabi_f2d>
 8002496:	a356      	add	r3, pc, #344	@ (adr r3, 80025f0 <Kinematics_SetSpeeds+0x228>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe fb46 	bl	8000b2c <__aeabi_dcmplt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <Kinematics_SetSpeeds+0xe6>
        theta_imu = ekf.theta;
 80024a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002610 <Kinematics_SetSpeeds+0x248>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	4a55      	ldr	r2, [pc, #340]	@ (8002600 <Kinematics_SetSpeeds+0x238>)
 80024ac:	6013      	str	r3, [r2, #0]
    }


    EKF_Predict(&ekf, vL_real, vR_real, 0.01);
 80024ae:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 8002614 <Kinematics_SetSpeeds+0x24c>
 80024b2:	edd7 0a04 	vldr	s1, [r7, #16]
 80024b6:	ed97 0a05 	vldr	s0, [r7, #20]
 80024ba:	4855      	ldr	r0, [pc, #340]	@ (8002610 <Kinematics_SetSpeeds+0x248>)
 80024bc:	f7fe fe5c 	bl	8001178 <EKF_Predict>
    EKF_Update(&ekf, theta_imu, accel[0], accel[1]);
 80024c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002600 <Kinematics_SetSpeeds+0x238>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <Kinematics_SetSpeeds+0x234>)
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	4b4b      	ldr	r3, [pc, #300]	@ (80025fc <Kinematics_SetSpeeds+0x234>)
 80024ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80024d2:	eeb0 1a66 	vmov.f32	s2, s13
 80024d6:	eef0 0a47 	vmov.f32	s1, s14
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	484c      	ldr	r0, [pc, #304]	@ (8002610 <Kinematics_SetSpeeds+0x248>)
 80024e0:	f7fe ff48 	bl	8001374 <EKF_Update>
//    snprintf(debug_imu, sizeof(debug_imu),
//             "EKF: X = %.2f, Y = %.2f, Theta = %.2f rad, Vel = %.2f m/s\r\n",
//             ekf.x, ekf.y, ekf.theta, ekf.v);
//    HAL_UART_Transmit(&huart1, (uint8_t*)debug_imu, strlen(debug_imu), HAL_MAX_DELAY);

    float target_rpm_left = LinearToRPM(vL);
 80024e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80024e8:	f7ff ff16 	bl	8002318 <LinearToRPM>
 80024ec:	ed87 0a03 	vstr	s0, [r7, #12]
    float target_rpm_right = LinearToRPM(vR);
 80024f0:	ed97 0a00 	vldr	s0, [r7]
 80024f4:	f7ff ff10 	bl	8002318 <LinearToRPM>
 80024f8:	ed87 0a02 	vstr	s0, [r7, #8]

    setpoint_left_rpm  = target_rpm_left;
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7fe f84b 	bl	8000598 <__aeabi_f2d>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4944      	ldr	r1, [pc, #272]	@ (8002618 <Kinematics_SetSpeeds+0x250>)
 8002508:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	f7fe f843 	bl	8000598 <__aeabi_f2d>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4941      	ldr	r1, [pc, #260]	@ (800261c <Kinematics_SetSpeeds+0x254>)
 8002518:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_encoder.rpm;
 800251c:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <Kinematics_SetSpeeds+0x240>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f839 	bl	8000598 <__aeabi_f2d>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	493d      	ldr	r1, [pc, #244]	@ (8002620 <Kinematics_SetSpeeds+0x258>)
 800252c:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_encoder.rpm;
 8002530:	4b36      	ldr	r3, [pc, #216]	@ (800260c <Kinematics_SetSpeeds+0x244>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f82f 	bl	8000598 <__aeabi_f2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4939      	ldr	r1, [pc, #228]	@ (8002624 <Kinematics_SetSpeeds+0x25c>)
 8002540:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 8002544:	4838      	ldr	r0, [pc, #224]	@ (8002628 <Kinematics_SetSpeeds+0x260>)
 8002546:	f7ff fa35 	bl	80019b4 <PID_Compute>
    PID_Compute(&pidRight);
 800254a:	4838      	ldr	r0, [pc, #224]	@ (800262c <Kinematics_SetSpeeds+0x264>)
 800254c:	f7ff fa32 	bl	80019b4 <PID_Compute>

    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8002550:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <Kinematics_SetSpeeds+0x268>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	4690      	mov	r8, r2
 8002558:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800255c:	4640      	mov	r0, r8
 800255e:	4649      	mov	r1, r9
 8002560:	f7fe fb4a 	bl	8000bf8 <__aeabi_d2uiz>
 8002564:	4680      	mov	r8, r0
 8002566:	4b32      	ldr	r3, [pc, #200]	@ (8002630 <Kinematics_SetSpeeds+0x268>)
 8002568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800256c:	2301      	movs	r3, #1
 800256e:	461e      	mov	r6, r3
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	f7fe faec 	bl	8000b54 <__aeabi_dcmpge>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <Kinematics_SetSpeeds+0x1be>
 8002582:	2300      	movs	r3, #0
 8002584:	461e      	mov	r6, r3
 8002586:	b2f3      	uxtb	r3, r6
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	b2de      	uxtb	r6, r3
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 8002590:	4b28      	ldr	r3, [pc, #160]	@ (8002634 <Kinematics_SetSpeeds+0x26c>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	4614      	mov	r4, r2
 8002598:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	f7fe fb2a 	bl	8000bf8 <__aeabi_d2uiz>
 80025a4:	4604      	mov	r4, r0
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 80025a6:	4b23      	ldr	r3, [pc, #140]	@ (8002634 <Kinematics_SetSpeeds+0x26c>)
 80025a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ac:	2301      	movs	r3, #1
 80025ae:	461d      	mov	r5, r3
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	f7fe facc 	bl	8000b54 <__aeabi_dcmpge>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <Kinematics_SetSpeeds+0x1fe>
 80025c2:	2300      	movs	r3, #0
 80025c4:	461d      	mov	r5, r3
 80025c6:	b2eb      	uxtb	r3, r5
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4622      	mov	r2, r4
 80025d2:	4631      	mov	r1, r6
 80025d4:	4640      	mov	r0, r8
 80025d6:	f000 fbdf 	bl	8002d98 <Motor_Control>
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e4:	f3af 8000 	nop.w
 80025e8:	47ae147b 	.word	0x47ae147b
 80025ec:	3f847ae1 	.word	0x3f847ae1
 80025f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80025f4:	3f50624d 	.word	0x3f50624d
 80025f8:	200003cc 	.word	0x200003cc
 80025fc:	200003c0 	.word	0x200003c0
 8002600:	200003d8 	.word	0x200003d8
 8002604:	200003dc 	.word	0x200003dc
 8002608:	20000240 	.word	0x20000240
 800260c:	20000250 	.word	0x20000250
 8002610:	20000370 	.word	0x20000370
 8002614:	3c23d70a 	.word	0x3c23d70a
 8002618:	20000260 	.word	0x20000260
 800261c:	20000268 	.word	0x20000268
 8002620:	20000280 	.word	0x20000280
 8002624:	20000288 	.word	0x20000288
 8002628:	20000290 	.word	0x20000290
 800262c:	20000300 	.word	0x20000300
 8002630:	20000270 	.word	0x20000270
 8002634:	20000278 	.word	0x20000278

08002638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f001 f94f 	bl	80038de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f815 	bl	800266e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f000 faf8 	bl	8002c38 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002648:	f000 f8d6 	bl	80027f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800264c:	f000 f984 	bl	8002958 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002650:	f000 f9f8 	bl	8002a44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002654:	f000 fa4c 	bl	8002af0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002658:	f000 f852 	bl	8002700 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800265c:	f000 fa9e 	bl	8002b9c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002660:	f000 f88c 	bl	800277c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  VSSS_Init();
 8002664:	f7ff fc40 	bl	8001ee8 <VSSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VSSS_Run();
 8002668:	f7ff fc5c 	bl	8001f24 <VSSS_Run>
 800266c:	e7fc      	b.n	8002668 <main+0x30>

0800266e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b094      	sub	sp, #80	@ 0x50
 8002672:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	2238      	movs	r2, #56	@ 0x38
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f006 fc2e 	bl	8008ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002690:	2000      	movs	r0, #0
 8002692:	f001 fc35 	bl	8003f00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002696:	2301      	movs	r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800269a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800269e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a0:	2302      	movs	r3, #2
 80026a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a4:	2303      	movs	r3, #3
 80026a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80026a8:	2302      	movs	r3, #2
 80026aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80026ac:	2355      	movs	r3, #85	@ 0x55
 80026ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b0:	2302      	movs	r3, #2
 80026b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026b8:	2302      	movs	r3, #2
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 0318 	add.w	r3, r7, #24
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 fcd1 	bl	8004068 <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80026cc:	f000 fb38 	bl	8002d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
 80026d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	2303      	movs	r3, #3
 80026d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2104      	movs	r1, #4
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 ffcf 	bl	800468c <HAL_RCC_ClockConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80026f4:	f000 fb24 	bl	8002d40 <Error_Handler>
  }
}
 80026f8:	bf00      	nop
 80026fa:	3750      	adds	r7, #80	@ 0x50
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002706:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <MX_SPI1_Init+0x78>)
 8002708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800270a:	4b1a      	ldr	r3, [pc, #104]	@ (8002774 <MX_SPI1_Init+0x74>)
 800270c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002710:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002712:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002718:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <MX_SPI1_Init+0x74>)
 800271a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800271e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002720:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002726:	4b13      	ldr	r3, [pc, #76]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <MX_SPI1_Init+0x74>)
 800272e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002732:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002734:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002736:	2220      	movs	r2, #32
 8002738:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273a:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <MX_SPI1_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002748:	2200      	movs	r2, #0
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800274c:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <MX_SPI1_Init+0x74>)
 800274e:	2207      	movs	r2, #7
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002752:	4b08      	ldr	r3, [pc, #32]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <MX_SPI1_Init+0x74>)
 800275a:	2208      	movs	r2, #8
 800275c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800275e:	4805      	ldr	r0, [pc, #20]	@ (8002774 <MX_SPI1_Init+0x74>)
 8002760:	f002 fba0 	bl	8004ea4 <HAL_SPI_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800276a:	f000 fae9 	bl	8002d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200003e0 	.word	0x200003e0
 8002778:	40013000 	.word	0x40013000

0800277c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002782:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <MX_SPI2_Init+0x78>)
 8002784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002786:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002788:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800278c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002794:	4b16      	ldr	r3, [pc, #88]	@ (80027f0 <MX_SPI2_Init+0x74>)
 8002796:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800279a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <MX_SPI2_Init+0x74>)
 800279e:	2202      	movs	r2, #2
 80027a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027b2:	2228      	movs	r2, #40	@ 0x28
 80027b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027be:	2200      	movs	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027ca:	2207      	movs	r2, #7
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <MX_SPI2_Init+0x74>)
 80027dc:	f002 fb62 	bl	8004ea4 <HAL_SPI_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80027e6:	f000 faab 	bl	8002d40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000444 	.word	0x20000444
 80027f4:	40003800 	.word	0x40003800

080027f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b09c      	sub	sp, #112	@ 0x70
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002818:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	615a      	str	r2, [r3, #20]
 800282a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800282c:	1d3b      	adds	r3, r7, #4
 800282e:	2234      	movs	r2, #52	@ 0x34
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f006 fb53 	bl	8008ede <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002838:	4b45      	ldr	r3, [pc, #276]	@ (8002950 <MX_TIM1_Init+0x158>)
 800283a:	4a46      	ldr	r2, [pc, #280]	@ (8002954 <MX_TIM1_Init+0x15c>)
 800283c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800283e:	4b44      	ldr	r3, [pc, #272]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b42      	ldr	r3, [pc, #264]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 800284a:	4b41      	ldr	r3, [pc, #260]	@ (8002950 <MX_TIM1_Init+0x158>)
 800284c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002850:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002858:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <MX_TIM1_Init+0x158>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285e:	4b3c      	ldr	r3, [pc, #240]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002864:	483a      	ldr	r0, [pc, #232]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002866:	f003 fa51 	bl	8005d0c <HAL_TIM_Base_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002870:	f000 fa66 	bl	8002d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002878:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800287a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800287e:	4619      	mov	r1, r3
 8002880:	4833      	ldr	r0, [pc, #204]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002882:	f003 fe43 	bl	800650c <HAL_TIM_ConfigClockSource>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800288c:	f000 fa58 	bl	8002d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002890:	482f      	ldr	r0, [pc, #188]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002892:	f003 fa92 	bl	8005dba <HAL_TIM_PWM_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800289c:	f000 fa50 	bl	8002d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028b0:	4619      	mov	r1, r3
 80028b2:	4827      	ldr	r0, [pc, #156]	@ (8002950 <MX_TIM1_Init+0x158>)
 80028b4:	f004 fb78 	bl	8006fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80028be:	f000 fa3f 	bl	8002d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c2:	2360      	movs	r3, #96	@ 0x60
 80028c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ca:	2300      	movs	r3, #0
 80028cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028ce:	2300      	movs	r3, #0
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	481a      	ldr	r0, [pc, #104]	@ (8002950 <MX_TIM1_Init+0x158>)
 80028e8:	f003 fcfc 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80028f2:	f000 fa25 	bl	8002d40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800290a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800290e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800291c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002926:	2300      	movs	r3, #0
 8002928:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4807      	ldr	r0, [pc, #28]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002934:	f004 fbba 	bl	80070ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800293e:	f000 f9ff 	bl	8002d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002942:	4803      	ldr	r0, [pc, #12]	@ (8002950 <MX_TIM1_Init+0x158>)
 8002944:	f000 fdca 	bl	80034dc <HAL_TIM_MspPostInit>

}
 8002948:	bf00      	nop
 800294a:	3770      	adds	r7, #112	@ 0x70
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200004a8 	.word	0x200004a8
 8002954:	40012c00 	.word	0x40012c00

08002958 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	@ 0x38
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800295e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002978:	463b      	mov	r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	615a      	str	r2, [r3, #20]
 8002988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800298a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 800298c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002990:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002992:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 800299e:	4b28      	ldr	r3, [pc, #160]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 80029a0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80029a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b26      	ldr	r3, [pc, #152]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ac:	4b24      	ldr	r3, [pc, #144]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029b2:	4823      	ldr	r0, [pc, #140]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 80029b4:	f003 f9aa 	bl	8005d0c <HAL_TIM_Base_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80029be:	f000 f9bf 	bl	8002d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029cc:	4619      	mov	r1, r3
 80029ce:	481c      	ldr	r0, [pc, #112]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 80029d0:	f003 fd9c 	bl	800650c <HAL_TIM_ConfigClockSource>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80029da:	f000 f9b1 	bl	8002d40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029de:	4818      	ldr	r0, [pc, #96]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 80029e0:	f003 f9eb 	bl	8005dba <HAL_TIM_PWM_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80029ea:	f000 f9a9 	bl	8002d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4810      	ldr	r0, [pc, #64]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 80029fe:	f004 fad3 	bl	8006fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a08:	f000 f99a 	bl	8002d40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0c:	2360      	movs	r3, #96	@ 0x60
 8002a0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4619      	mov	r1, r3
 8002a22:	4807      	ldr	r0, [pc, #28]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 8002a24:	f003 fc5e 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a2e:	f000 f987 	bl	8002d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a32:	4803      	ldr	r0, [pc, #12]	@ (8002a40 <MX_TIM2_Init+0xe8>)
 8002a34:	f000 fd52 	bl	80034dc <HAL_TIM_MspPostInit>

}
 8002a38:	bf00      	nop
 8002a3a:	3738      	adds	r7, #56	@ 0x38
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200004f4 	.word	0x200004f4

08002a44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08c      	sub	sp, #48	@ 0x30
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	2224      	movs	r2, #36	@ 0x24
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f006 fa43 	bl	8008ede <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a58:	463b      	mov	r3, r7
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a62:	4b21      	ldr	r3, [pc, #132]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002a64:	4a21      	ldr	r2, [pc, #132]	@ (8002aec <MX_TIM3_Init+0xa8>)
 8002a66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a82:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a90:	2301      	movs	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480d      	ldr	r0, [pc, #52]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002ab4:	f003 fae2 	bl	800607c <HAL_TIM_Encoder_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002abe:	f000 f93f 	bl	8002d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aca:	463b      	mov	r3, r7
 8002acc:	4619      	mov	r1, r3
 8002ace:	4806      	ldr	r0, [pc, #24]	@ (8002ae8 <MX_TIM3_Init+0xa4>)
 8002ad0:	f004 fa6a 	bl	8006fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002ada:	f000 f931 	bl	8002d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	3730      	adds	r7, #48	@ 0x30
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000540 	.word	0x20000540
 8002aec:	40000400 	.word	0x40000400

08002af0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	@ 0x30
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	2224      	movs	r2, #36	@ 0x24
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f006 f9ed 	bl	8008ede <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b04:	463b      	mov	r3, r7
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b0e:	4b21      	ldr	r3, [pc, #132]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b10:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <MX_TIM4_Init+0xa8>)
 8002b12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b20:	4b1c      	ldr	r3, [pc, #112]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2e:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b34:	2303      	movs	r3, #3
 8002b36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480d      	ldr	r0, [pc, #52]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b60:	f003 fa8c 	bl	800607c <HAL_TIM_Encoder_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002b6a:	f000 f8e9 	bl	8002d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b76:	463b      	mov	r3, r7
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4806      	ldr	r0, [pc, #24]	@ (8002b94 <MX_TIM4_Init+0xa4>)
 8002b7c:	f004 fa14 	bl	8006fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002b86:	f000 f8db 	bl	8002d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	3730      	adds	r7, #48	@ 0x30
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2000058c 	.word	0x2000058c
 8002b98:	40000800 	.word	0x40000800

08002b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ba0:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002ba2:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <MX_USART1_UART_Init+0x94>)
 8002ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002ba8:	4a22      	ldr	r2, [pc, #136]	@ (8002c34 <MX_USART1_UART_Init+0x98>)
 8002baa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bca:	4b18      	ldr	r3, [pc, #96]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002be2:	4812      	ldr	r0, [pc, #72]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002be4:	f004 faee 	bl	80071c4 <HAL_UART_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8002bee:	f000 f8a7 	bl	8002d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	480d      	ldr	r0, [pc, #52]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002bf6:	f005 f8e7 	bl	8007dc8 <HAL_UARTEx_SetTxFifoThreshold>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8002c00:	f000 f89e 	bl	8002d40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c04:	2100      	movs	r1, #0
 8002c06:	4809      	ldr	r0, [pc, #36]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002c08:	f005 f91c 	bl	8007e44 <HAL_UARTEx_SetRxFifoThreshold>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002c12:	f000 f895 	bl	8002d40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c16:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <MX_USART1_UART_Init+0x90>)
 8002c18:	f005 f89d 	bl	8007d56 <HAL_UARTEx_DisableFifoMode>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002c22:	f000 f88d 	bl	8002d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200005d8 	.word	0x200005d8
 8002c30:	40013800 	.word	0x40013800
 8002c34:	000f4240 	.word	0x000f4240

08002c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3e:	f107 0314 	add.w	r3, r7, #20
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	60da      	str	r2, [r3, #12]
 8002c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c4e:	4b39      	ldr	r3, [pc, #228]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	4a38      	ldr	r2, [pc, #224]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c54:	f043 0320 	orr.w	r3, r3, #32
 8002c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5a:	4b36      	ldr	r3, [pc, #216]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6a:	4a32      	ldr	r2, [pc, #200]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c72:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c82:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c96:	4b27      	ldr	r3, [pc, #156]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	4a26      	ldr	r2, [pc, #152]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ca2:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <MX_GPIO_Init+0xfc>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f240 6106 	movw	r1, #1542	@ 0x606
 8002cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cb8:	f001 f90a 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin|CS_Pin, GPIO_PIN_RESET);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f241 0103 	movw	r1, #4099	@ 0x1003
 8002cc2:	481d      	ldr	r0, [pc, #116]	@ (8002d38 <MX_GPIO_Init+0x100>)
 8002cc4:	f001 f904 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2140      	movs	r1, #64	@ 0x40
 8002ccc:	481b      	ldr	r0, [pc, #108]	@ (8002d3c <MX_GPIO_Init+0x104>)
 8002cce:	f001 f8ff 	bl	8003ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 8002cd2:	f240 6306 	movw	r3, #1542	@ 0x606
 8002cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cee:	f000 ff6d 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin|CS_Pin;
 8002cf2:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4619      	mov	r1, r3
 8002d0a:	480b      	ldr	r0, [pc, #44]	@ (8002d38 <MX_GPIO_Init+0x100>)
 8002d0c:	f000 ff5e 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002d10:	2340      	movs	r3, #64	@ 0x40
 8002d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4619      	mov	r1, r3
 8002d26:	4805      	ldr	r0, [pc, #20]	@ (8002d3c <MX_GPIO_Init+0x104>)
 8002d28:	f000 ff50 	bl	8003bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3728      	adds	r7, #40	@ 0x28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	48000800 	.word	0x48000800

08002d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d44:	b672      	cpsid	i
}
 8002d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <Error_Handler+0x8>

08002d4c <Motor_Init>:
Motor_t motorLeft;
Motor_t motorRight;

void Motor_Init(Motor_t *motor, TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel,
                GPIO_TypeDef *gpio_port1, uint16_t gpio_pin1,
                GPIO_TypeDef *gpio_port2, uint16_t gpio_pin2) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
    motor->pwm_timer = pwm_timer;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	601a      	str	r2, [r3, #0]
    motor->pwm_channel = pwm_channel;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	605a      	str	r2, [r3, #4]
    motor->gpio_port1 = gpio_port1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	609a      	str	r2, [r3, #8]
    motor->gpio_pin1 = gpio_pin1;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8b3a      	ldrh	r2, [r7, #24]
 8002d70:	819a      	strh	r2, [r3, #12]
    motor->gpio_port2 = gpio_port2;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	611a      	str	r2, [r3, #16]
    motor->gpio_pin2 = gpio_pin2;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8c3a      	ldrh	r2, [r7, #32]
 8002d7c:	829a      	strh	r2, [r3, #20]

    HAL_TIM_PWM_Start(motor->pwm_timer, motor->pwm_channel);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f003 f877 	bl	8005e7c <HAL_TIM_PWM_Start>
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <Motor_Control>:

void Motor_Control(uint32_t pwm_left, uint8_t dir_left, uint32_t pwm_right, uint8_t dir_right) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	460b      	mov	r3, r1
 8002da6:	72fb      	strb	r3, [r7, #11]
 8002da8:	4613      	mov	r3, r2
 8002daa:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
    */

    // Motor Esquerdo
    HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 8002dac:	7afb      	ldrb	r3, [r7, #11]
 8002dae:	461a      	mov	r2, r3
 8002db0:	2102      	movs	r1, #2
 8002db2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002db6:	f001 f88b 	bl	8003ed0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2104      	movs	r1, #4
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dce:	f001 f87f 	bl	8003ed0 <HAL_GPIO_WritePin>

    // Motor Direito
    HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin,  (GPIO_PinState)(dir_right));
 8002dd2:	7abb      	ldrb	r3, [r7, #10]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dde:	f001 f877 	bl	8003ed0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 8002de2:	7abb      	ldrb	r3, [r7, #10]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002df8:	f001 f86a 	bl	8003ed0 <HAL_GPIO_WritePin>

    // PWM
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <Motor_Control+0x7c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 8002e04:	4b04      	ldr	r3, [pc, #16]	@ (8002e18 <Motor_Control+0x80>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200004f4 	.word	0x200004f4
 8002e18:	200004a8 	.word	0x200004a8

08002e1c <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_0


void CS_Select (void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2101      	movs	r1, #1
 8002e24:	4802      	ldr	r0, [pc, #8]	@ (8002e30 <CS_Select+0x14>)
 8002e26:	f001 f853 	bl	8003ed0 <HAL_GPIO_WritePin>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	48000400 	.word	0x48000400

08002e34 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8002e38:	2201      	movs	r2, #1
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4802      	ldr	r0, [pc, #8]	@ (8002e48 <CS_UnSelect+0x14>)
 8002e3e:	f001 f847 	bl	8003ed0 <HAL_GPIO_WritePin>
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	48000400 	.word	0x48000400

08002e4c <CE_Enable>:


void CE_Enable (void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8002e50:	2201      	movs	r2, #1
 8002e52:	2102      	movs	r1, #2
 8002e54:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <CE_Enable+0x14>)
 8002e56:	f001 f83b 	bl	8003ed0 <HAL_GPIO_WritePin>
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	48000400 	.word	0x48000400

08002e64 <CE_Disable>:

void CE_Disable (void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	4802      	ldr	r0, [pc, #8]	@ (8002e78 <CE_Disable+0x14>)
 8002e6e:	f001 f82f 	bl	8003ed0 <HAL_GPIO_WritePin>
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	48000400 	.word	0x48000400

08002e7c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	460a      	mov	r2, r1
 8002e86:	71fb      	strb	r3, [r7, #7]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f043 0320 	orr.w	r3, r3, #32
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8002e96:	79bb      	ldrb	r3, [r7, #6]
 8002e98:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002e9a:	f7ff ffbf 	bl	8002e1c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8002e9e:	f107 010c 	add.w	r1, r7, #12
 8002ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4804      	ldr	r0, [pc, #16]	@ (8002ebc <nrf24_WriteReg+0x40>)
 8002eaa:	f002 f8a6 	bl	8004ffa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002eae:	f7ff ffc1 	bl	8002e34 <CS_UnSelect>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200003e0 	.word	0x200003e0

08002ec0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	f043 0320 	orr.w	r3, r3, #32
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002ed8:	f7ff ffa0 	bl	8002e1c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8002edc:	f107 0114 	add.w	r1, r7, #20
 8002ee0:	2364      	movs	r3, #100	@ 0x64
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4808      	ldr	r0, [pc, #32]	@ (8002f08 <nrf24_WriteRegMulti+0x48>)
 8002ee6:	f002 f888 	bl	8004ffa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	4804      	ldr	r0, [pc, #16]	@ (8002f08 <nrf24_WriteRegMulti+0x48>)
 8002ef6:	f002 f880 	bl	8004ffa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002efa:	f7ff ff9b 	bl	8002e34 <CS_UnSelect>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200003e0 	.word	0x200003e0

08002f0c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002f1a:	f7ff ff7f 	bl	8002e1c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8002f1e:	1df9      	adds	r1, r7, #7
 8002f20:	2364      	movs	r3, #100	@ 0x64
 8002f22:	2201      	movs	r2, #1
 8002f24:	4808      	ldr	r0, [pc, #32]	@ (8002f48 <nrf24_ReadReg+0x3c>)
 8002f26:	f002 f868 	bl	8004ffa <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8002f2a:	f107 010f 	add.w	r1, r7, #15
 8002f2e:	2364      	movs	r3, #100	@ 0x64
 8002f30:	2201      	movs	r2, #1
 8002f32:	4805      	ldr	r0, [pc, #20]	@ (8002f48 <nrf24_ReadReg+0x3c>)
 8002f34:	f002 f9d7 	bl	80052e6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002f38:	f7ff ff7c 	bl	8002e34 <CS_UnSelect>

	return data;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200003e0 	.word	0x200003e0

08002f4c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002f56:	f7ff ff61 	bl	8002e1c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8002f5a:	1df9      	adds	r1, r7, #7
 8002f5c:	2364      	movs	r3, #100	@ 0x64
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4804      	ldr	r0, [pc, #16]	@ (8002f74 <nrfsendCmd+0x28>)
 8002f62:	f002 f84a 	bl	8004ffa <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002f66:	f7ff ff65 	bl	8002e34 <CS_UnSelect>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200003e0 	.word	0x200003e0

08002f78 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d104      	bne.n	8002f92 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2007      	movs	r0, #7
 8002f8c:	f7ff ff76 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);

	}
}
 8002f90:	e090      	b.n	80030b4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b17      	cmp	r3, #23
 8002f96:	d104      	bne.n	8002fa2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002f98:	2111      	movs	r1, #17
 8002f9a:	2017      	movs	r0, #23
 8002f9c:	f7ff ff6e 	bl	8002e7c <nrf24_WriteReg>
}
 8002fa0:	e088      	b.n	80030b4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8002fa2:	2108      	movs	r1, #8
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7ff ff69 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F); // Enable all the data pipes
 8002faa:	213f      	movs	r1, #63	@ 0x3f
 8002fac:	2001      	movs	r0, #1
 8002fae:	f7ff ff65 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8002fb2:	2103      	movs	r1, #3
 8002fb4:	2002      	movs	r0, #2
 8002fb6:	f7ff ff61 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8002fba:	2103      	movs	r1, #3
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f7ff ff5d 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03); // 0x3F = 4000us delay, 15 retransmission
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	2004      	movs	r0, #4
 8002fc6:	f7ff ff59 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8002fca:	2102      	movs	r1, #2
 8002fcc:	2005      	movs	r0, #5
 8002fce:	f7ff ff55 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E); // 0x0E = 2Mbps ||  0x06 = 1Mbps
 8002fd2:	210e      	movs	r1, #14
 8002fd4:	2006      	movs	r0, #6
 8002fd6:	f7ff ff51 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2007      	movs	r0, #7
 8002fde:	f7ff ff4d 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	2008      	movs	r0, #8
 8002fe6:	f7ff ff49 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8002fea:	2100      	movs	r1, #0
 8002fec:	2009      	movs	r0, #9
 8002fee:	f7ff ff45 	bl	8002e7c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8002ff2:	4a32      	ldr	r2, [pc, #200]	@ (80030bc <nrf24_reset+0x144>)
 8002ff4:	f107 0318 	add.w	r3, r7, #24
 8002ff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ffc:	6018      	str	r0, [r3, #0]
 8002ffe:	3304      	adds	r3, #4
 8003000:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8003002:	f107 0318 	add.w	r3, r7, #24
 8003006:	2205      	movs	r2, #5
 8003008:	4619      	mov	r1, r3
 800300a:	200a      	movs	r0, #10
 800300c:	f7ff ff58 	bl	8002ec0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8003010:	4a2b      	ldr	r2, [pc, #172]	@ (80030c0 <nrf24_reset+0x148>)
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	e892 0003 	ldmia.w	r2, {r0, r1}
 800301a:	6018      	str	r0, [r3, #0]
 800301c:	3304      	adds	r3, #4
 800301e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8003020:	f107 0310 	add.w	r3, r7, #16
 8003024:	2205      	movs	r2, #5
 8003026:	4619      	mov	r1, r3
 8003028:	200b      	movs	r0, #11
 800302a:	f7ff ff49 	bl	8002ec0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800302e:	21c3      	movs	r1, #195	@ 0xc3
 8003030:	200c      	movs	r0, #12
 8003032:	f7ff ff23 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8003036:	21c4      	movs	r1, #196	@ 0xc4
 8003038:	200d      	movs	r0, #13
 800303a:	f7ff ff1f 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800303e:	21c5      	movs	r1, #197	@ 0xc5
 8003040:	200e      	movs	r0, #14
 8003042:	f7ff ff1b 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8003046:	21c6      	movs	r1, #198	@ 0xc6
 8003048:	200f      	movs	r0, #15
 800304a:	f7ff ff17 	bl	8002e7c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800304e:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <nrf24_reset+0x144>)
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003058:	6018      	str	r0, [r3, #0]
 800305a:	3304      	adds	r3, #4
 800305c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	2205      	movs	r2, #5
 8003064:	4619      	mov	r1, r3
 8003066:	2010      	movs	r0, #16
 8003068:	f7ff ff2a 	bl	8002ec0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800306c:	2100      	movs	r1, #0
 800306e:	2011      	movs	r0, #17
 8003070:	f7ff ff04 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8003074:	2100      	movs	r1, #0
 8003076:	2012      	movs	r0, #18
 8003078:	f7ff ff00 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800307c:	2100      	movs	r1, #0
 800307e:	2013      	movs	r0, #19
 8003080:	f7ff fefc 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8003084:	2100      	movs	r1, #0
 8003086:	2014      	movs	r0, #20
 8003088:	f7ff fef8 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800308c:	2100      	movs	r1, #0
 800308e:	2015      	movs	r0, #21
 8003090:	f7ff fef4 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8003094:	2100      	movs	r1, #0
 8003096:	2016      	movs	r0, #22
 8003098:	f7ff fef0 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800309c:	2111      	movs	r1, #17
 800309e:	2017      	movs	r0, #23
 80030a0:	f7ff feec 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80030a4:	2100      	movs	r1, #0
 80030a6:	201c      	movs	r0, #28
 80030a8:	f7ff fee8 	bl	8002e7c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80030ac:	2100      	movs	r1, #0
 80030ae:	201d      	movs	r0, #29
 80030b0:	f7ff fee4 	bl	8002e7c <nrf24_WriteReg>
}
 80030b4:	bf00      	nop
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	0800d7fc 	.word	0x0800d7fc
 80030c0:	0800d804 	.word	0x0800d804

080030c4 <NRF24_Init>:




void NRF24_Init (void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80030c8:	f7ff fecc 	bl	8002e64 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7ff ff53 	bl	8002f78 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80030d2:	2100      	movs	r1, #0
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7ff fed1 	bl	8002e7c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80030da:	2100      	movs	r1, #0
 80030dc:	2001      	movs	r0, #1
 80030de:	f7ff fecd 	bl	8002e7c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80030e2:	2100      	movs	r1, #0
 80030e4:	2002      	movs	r0, #2
 80030e6:	f7ff fec9 	bl	8002e7c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80030ea:	2103      	movs	r1, #3
 80030ec:	2003      	movs	r0, #3
 80030ee:	f7ff fec5 	bl	8002e7c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80030f2:	2100      	movs	r1, #0
 80030f4:	2004      	movs	r0, #4
 80030f6:	f7ff fec1 	bl	8002e7c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80030fa:	2100      	movs	r1, #0
 80030fc:	2005      	movs	r0, #5
 80030fe:	f7ff febd 	bl	8002e7c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps || 0x06 = 1Mbps
 8003102:	210e      	movs	r1, #14
 8003104:	2006      	movs	r0, #6
 8003106:	f7ff feb9 	bl	8002e7c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800310a:	f7ff fe9f 	bl	8002e4c <CE_Enable>

}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}

08003112 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800311e:	f7ff fea1 	bl	8002e64 <CE_Disable>

	nrf24_reset (STATUS);
 8003122:	2007      	movs	r0, #7
 8003124:	f7ff ff28 	bl	8002f78 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	4619      	mov	r1, r3
 800312c:	2005      	movs	r0, #5
 800312e:	f7ff fea5 	bl	8002e7c <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8003132:	2002      	movs	r0, #2
 8003134:	f7ff feea 	bl	8002f0c <nrf24_ReadReg>
 8003138:	4603      	mov	r3, r0
 800313a:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	4619      	mov	r1, r3
 8003148:	2002      	movs	r0, #2
 800314a:	f7ff fe97 	bl	8002e7c <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800314e:	2205      	movs	r2, #5
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	200b      	movs	r0, #11
 8003154:	f7ff feb4 	bl	8002ec0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8003158:	21ee      	movs	r1, #238	@ 0xee
 800315a:	200c      	movs	r0, #12
 800315c:	f7ff fe8e 	bl	8002e7c <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8003160:	2120      	movs	r1, #32
 8003162:	2013      	movs	r0, #19
 8003164:	f7ff fe8a 	bl	8002e7c <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8003168:	2000      	movs	r0, #0
 800316a:	f7ff fecf 	bl	8002f0c <nrf24_ReadReg>
 800316e:	4603      	mov	r3, r0
 8003170:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8003172:	7bbb      	ldrb	r3, [r7, #14]
 8003174:	f043 0303 	orr.w	r3, r3, #3
 8003178:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	4619      	mov	r1, r3
 800317e:	2000      	movs	r0, #0
 8003180:	f7ff fe7c 	bl	8002e7c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8003184:	f7ff fe62 	bl	8002e4c <CE_Enable>
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8003198:	2007      	movs	r0, #7
 800319a:	f7ff feb7 	bl	8002f0c <nrf24_ReadReg>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <isDataAvailable+0x34>
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80031b8:	2140      	movs	r1, #64	@ 0x40
 80031ba:	2007      	movs	r0, #7
 80031bc:	f7ff fe5e 	bl	8002e7c <nrf24_WriteReg>

		return 1;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <isDataAvailable+0x36>
	}

	return 0;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80031dc:	f7ff fe1e 	bl	8002e1c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80031e0:	2361      	movs	r3, #97	@ 0x61
 80031e2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80031e4:	f107 010f 	add.w	r1, r7, #15
 80031e8:	2364      	movs	r3, #100	@ 0x64
 80031ea:	2201      	movs	r2, #1
 80031ec:	480c      	ldr	r0, [pc, #48]	@ (8003220 <NRF24_Receive+0x50>)
 80031ee:	f001 ff04 	bl	8004ffa <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80031f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031f6:	2220      	movs	r2, #32
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4809      	ldr	r0, [pc, #36]	@ (8003220 <NRF24_Receive+0x50>)
 80031fc:	f002 f873 	bl	80052e6 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8003200:	f7ff fe18 	bl	8002e34 <CS_UnSelect>

	HAL_Delay(1);
 8003204:	2001      	movs	r0, #1
 8003206:	f000 fbdb 	bl	80039c0 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800320a:	23e2      	movs	r3, #226	@ 0xe2
 800320c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fe9b 	bl	8002f4c <nrfsendCmd>
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200003e0 	.word	0x200003e0

08003224 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <HAL_MspInit+0x44>)
 800322c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <HAL_MspInit+0x44>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6613      	str	r3, [r2, #96]	@ 0x60
 8003236:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <HAL_MspInit+0x44>)
 8003238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_MspInit+0x44>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	4a08      	ldr	r2, [pc, #32]	@ (8003268 <HAL_MspInit+0x44>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	@ 0x58
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_MspInit+0x44>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800325a:	f000 fef5 	bl	8004048 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	@ 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3d      	ldr	r2, [pc, #244]	@ (8003380 <HAL_SPI_MspInit+0x114>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d145      	bne.n	800331a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800328e:	4b3d      	ldr	r3, [pc, #244]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	4a3c      	ldr	r2, [pc, #240]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 8003294:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003298:	6613      	str	r3, [r2, #96]	@ 0x60
 800329a:	4b3a      	ldr	r3, [pc, #232]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a6:	4b37      	ldr	r3, [pc, #220]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	4a36      	ldr	r2, [pc, #216]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b2:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c2:	4a30      	ldr	r2, [pc, #192]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 80032d6:	23a0      	movs	r3, #160	@ 0xa0
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032e6:	2305      	movs	r3, #5
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4619      	mov	r1, r3
 80032f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032f4:	f000 fc6a 	bl	8003bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 80032f8:	2310      	movs	r3, #16
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003308:	2305      	movs	r3, #5
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	4619      	mov	r1, r3
 8003312:	481d      	ldr	r0, [pc, #116]	@ (8003388 <HAL_SPI_MspInit+0x11c>)
 8003314:	f000 fc5a 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003318:	e02d      	b.n	8003376 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1b      	ldr	r2, [pc, #108]	@ (800338c <HAL_SPI_MspInit+0x120>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d128      	bne.n	8003376 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003324:	4b17      	ldr	r3, [pc, #92]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	4a16      	ldr	r2, [pc, #88]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 800332a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800332e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003330:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003340:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003348:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <HAL_SPI_MspInit+0x118>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003354:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003366:	2305      	movs	r3, #5
 8003368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	4805      	ldr	r0, [pc, #20]	@ (8003388 <HAL_SPI_MspInit+0x11c>)
 8003372:	f000 fc2b 	bl	8003bcc <HAL_GPIO_Init>
}
 8003376:	bf00      	nop
 8003378:	3730      	adds	r7, #48	@ 0x30
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40013000 	.word	0x40013000
 8003384:	40021000 	.word	0x40021000
 8003388:	48000400 	.word	0x48000400
 800338c:	40003800 	.word	0x40003800

08003390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a13      	ldr	r2, [pc, #76]	@ (80033ec <HAL_TIM_Base_MspInit+0x5c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10c      	bne.n	80033bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033a2:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <HAL_TIM_Base_MspInit+0x60>)
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <HAL_TIM_Base_MspInit+0x60>)
 80033a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <HAL_TIM_Base_MspInit+0x60>)
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80033ba:	e010      	b.n	80033de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c4:	d10b      	bne.n	80033de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033c6:	4b0a      	ldr	r3, [pc, #40]	@ (80033f0 <HAL_TIM_Base_MspInit+0x60>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	4a09      	ldr	r2, [pc, #36]	@ (80033f0 <HAL_TIM_Base_MspInit+0x60>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d2:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <HAL_TIM_Base_MspInit+0x60>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	@ 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2f      	ldr	r2, [pc, #188]	@ (80034d0 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d129      	bne.n	800346a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003416:	4b2f      	ldr	r3, [pc, #188]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	4a2e      	ldr	r2, [pc, #184]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	6593      	str	r3, [r2, #88]	@ 0x58
 8003422:	4b2c      	ldr	r3, [pc, #176]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	4a28      	ldr	r2, [pc, #160]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800343a:	4b26      	ldr	r3, [pc, #152]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 8003446:	2350      	movs	r3, #80	@ 0x50
 8003448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003452:	2300      	movs	r3, #0
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003456:	2302      	movs	r3, #2
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345a:	f107 031c 	add.w	r3, r7, #28
 800345e:	4619      	mov	r1, r3
 8003460:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003464:	f000 fbb2 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003468:	e02e      	b.n	80034c8 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1a      	ldr	r2, [pc, #104]	@ (80034d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d129      	bne.n	80034c8 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003474:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	4a16      	ldr	r2, [pc, #88]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800347a:	f043 0304 	orr.w	r3, r3, #4
 800347e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003480:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003490:	4a10      	ldr	r2, [pc, #64]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003498:	4b0e      	ldr	r3, [pc, #56]	@ (80034d4 <HAL_TIM_Encoder_MspInit+0xe0>)
 800349a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 80034a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80034a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80034b6:	230a      	movs	r3, #10
 80034b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	f107 031c 	add.w	r3, r7, #28
 80034be:	4619      	mov	r1, r3
 80034c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c4:	f000 fb82 	bl	8003bcc <HAL_GPIO_Init>
}
 80034c8:	bf00      	nop
 80034ca:	3730      	adds	r7, #48	@ 0x30
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40000800 	.word	0x40000800

080034dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	@ 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a23      	ldr	r2, [pc, #140]	@ (8003588 <HAL_TIM_MspPostInit+0xac>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d11e      	bne.n	800353c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fe:	4b23      	ldr	r3, [pc, #140]	@ (800358c <HAL_TIM_MspPostInit+0xb0>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	4a22      	ldr	r2, [pc, #136]	@ (800358c <HAL_TIM_MspPostInit+0xb0>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <HAL_TIM_MspPostInit+0xb0>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 8003516:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003524:	2302      	movs	r3, #2
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003528:	2306      	movs	r3, #6
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003536:	f000 fb49 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800353a:	e021      	b.n	8003580 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003544:	d11c      	bne.n	8003580 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_TIM_MspPostInit+0xb0>)
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	4a10      	ldr	r2, [pc, #64]	@ (800358c <HAL_TIM_MspPostInit+0xb0>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <HAL_TIM_MspPostInit+0xb0>)
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 800355e:	2301      	movs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800356e:	2301      	movs	r3, #1
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800357c:	f000 fb26 	bl	8003bcc <HAL_GPIO_Init>
}
 8003580:	bf00      	nop
 8003582:	3728      	adds	r7, #40	@ 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40021000 	.word	0x40021000

08003590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b09c      	sub	sp, #112	@ 0x70
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035a8:	f107 0318 	add.w	r3, r7, #24
 80035ac:	2244      	movs	r2, #68	@ 0x44
 80035ae:	2100      	movs	r1, #0
 80035b0:	4618      	mov	r0, r3
 80035b2:	f005 fc94 	bl	8008ede <memset>
  if(huart->Instance==USART1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2c      	ldr	r2, [pc, #176]	@ (800366c <HAL_UART_MspInit+0xdc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d151      	bne.n	8003664 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035c8:	f107 0318 	add.w	r3, r7, #24
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 fa79 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035d8:	f7ff fbb2 	bl	8002d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035dc:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 80035e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80035e8:	4b21      	ldr	r3, [pc, #132]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 80035ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 80035f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 8003602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	613b      	str	r3, [r7, #16]
 800360a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360c:	4b18      	ldr	r3, [pc, #96]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 800360e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003610:	4a17      	ldr	r2, [pc, #92]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003618:	4b15      	ldr	r3, [pc, #84]	@ (8003670 <HAL_UART_MspInit+0xe0>)
 800361a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8003624:	2310      	movs	r3, #16
 8003626:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003630:	2300      	movs	r3, #0
 8003632:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003634:	2307      	movs	r3, #7
 8003636:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8003638:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800363c:	4619      	mov	r1, r3
 800363e:	480d      	ldr	r0, [pc, #52]	@ (8003674 <HAL_UART_MspInit+0xe4>)
 8003640:	f000 fac4 	bl	8003bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8003644:	2380      	movs	r3, #128	@ 0x80
 8003646:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2300      	movs	r3, #0
 8003652:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003654:	2307      	movs	r3, #7
 8003656:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8003658:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800365c:	4619      	mov	r1, r3
 800365e:	4806      	ldr	r0, [pc, #24]	@ (8003678 <HAL_UART_MspInit+0xe8>)
 8003660:	f000 fab4 	bl	8003bcc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003664:	bf00      	nop
 8003666:	3770      	adds	r7, #112	@ 0x70
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40013800 	.word	0x40013800
 8003670:	40021000 	.word	0x40021000
 8003674:	48000800 	.word	0x48000800
 8003678:	48000400 	.word	0x48000400

0800367c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <NMI_Handler+0x4>

08003684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <HardFault_Handler+0x4>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <MemManage_Handler+0x4>

08003694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <BusFault_Handler+0x4>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <UsageFault_Handler+0x4>

080036a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d2:	f000 f957 	bl	8003984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}

080036da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  return 1;
 80036de:	2301      	movs	r3, #1
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <_kill>:

int _kill(int pid, int sig)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036f4:	f005 fc46 	bl	8008f84 <__errno>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2216      	movs	r2, #22
 80036fc:	601a      	str	r2, [r3, #0]
  return -1;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <_exit>:

void _exit (int status)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003712:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffe7 	bl	80036ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <_exit+0x12>

08003720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e00a      	b.n	8003748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003732:	f3af 8000 	nop.w
 8003736:	4601      	mov	r1, r0
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	60ba      	str	r2, [r7, #8]
 800373e:	b2ca      	uxtb	r2, r1
 8003740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3301      	adds	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	dbf0      	blt.n	8003732 <_read+0x12>
  }

  return len;
 8003750:	687b      	ldr	r3, [r7, #4]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e009      	b.n	8003780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	60ba      	str	r2, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	3301      	adds	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	429a      	cmp	r2, r3
 8003786:	dbf1      	blt.n	800376c <_write+0x12>
  }
  return len;
 8003788:	687b      	ldr	r3, [r7, #4]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <_close>:

int _close(int file)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800379a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037ba:	605a      	str	r2, [r3, #4]
  return 0;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <_isatty>:

int _isatty(int file)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037d2:	2301      	movs	r3, #1
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003804:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <_sbrk+0x5c>)
 8003806:	4b15      	ldr	r3, [pc, #84]	@ (800385c <_sbrk+0x60>)
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003810:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <_sbrk+0x64>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <_sbrk+0x64>)
 800381a:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <_sbrk+0x68>)
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800381e:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <_sbrk+0x64>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	429a      	cmp	r2, r3
 800382a:	d207      	bcs.n	800383c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800382c:	f005 fbaa 	bl	8008f84 <__errno>
 8003830:	4603      	mov	r3, r0
 8003832:	220c      	movs	r2, #12
 8003834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800383a:	e009      	b.n	8003850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003842:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <_sbrk+0x64>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	4a05      	ldr	r2, [pc, #20]	@ (8003860 <_sbrk+0x64>)
 800384c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800384e:	68fb      	ldr	r3, [r7, #12]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20008000 	.word	0x20008000
 800385c:	00000400 	.word	0x00000400
 8003860:	2000069c 	.word	0x2000069c
 8003864:	200007f0 	.word	0x200007f0

08003868 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <SystemInit+0x20>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003872:	4a05      	ldr	r2, [pc, #20]	@ (8003888 <SystemInit+0x20>)
 8003874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 800388c:	480d      	ldr	r0, [pc, #52]	@ (80038c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800388e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003890:	f7ff ffea 	bl	8003868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003894:	480c      	ldr	r0, [pc, #48]	@ (80038c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003896:	490d      	ldr	r1, [pc, #52]	@ (80038cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003898:	4a0d      	ldr	r2, [pc, #52]	@ (80038d0 <LoopForever+0xe>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800389c:	e002      	b.n	80038a4 <LoopCopyDataInit>

0800389e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800389e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038a2:	3304      	adds	r3, #4

080038a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038a8:	d3f9      	bcc.n	800389e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038aa:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038ac:	4c0a      	ldr	r4, [pc, #40]	@ (80038d8 <LoopForever+0x16>)
  movs r3, #0
 80038ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b0:	e001      	b.n	80038b6 <LoopFillZerobss>

080038b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038b4:	3204      	adds	r2, #4

080038b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038b8:	d3fb      	bcc.n	80038b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80038ba:	f005 fb69 	bl	8008f90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038be:	f7fe febb 	bl	8002638 <main>

080038c2 <LoopForever>:

LoopForever:
    b LoopForever
 80038c2:	e7fe      	b.n	80038c2 <LoopForever>
 ldr   r0, =_estack
 80038c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80038c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038cc:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80038d0:	0800dea0 	.word	0x0800dea0
  ldr r2, =_sbss
 80038d4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80038d8:	200007f0 	.word	0x200007f0

080038dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038dc:	e7fe      	b.n	80038dc <ADC1_2_IRQHandler>

080038de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e8:	2003      	movs	r0, #3
 80038ea:	f000 f93d 	bl	8003b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ee:	200f      	movs	r0, #15
 80038f0:	f000 f80e 	bl	8003910 <HAL_InitTick>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	71fb      	strb	r3, [r7, #7]
 80038fe:	e001      	b.n	8003904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003900:	f7ff fc90 	bl	8003224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003904:	79fb      	ldrb	r3, [r7, #7]

}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <HAL_InitTick+0x68>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d022      	beq.n	800396a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003924:	4b15      	ldr	r3, [pc, #84]	@ (800397c <HAL_InitTick+0x6c>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <HAL_InitTick+0x68>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003930:	fbb1 f3f3 	udiv	r3, r1, r3
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f93a 	bl	8003bb2 <HAL_SYSTICK_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10f      	bne.n	8003964 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d809      	bhi.n	800395e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800394a:	2200      	movs	r2, #0
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003952:	f000 f914 	bl	8003b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003956:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <HAL_InitTick+0x70>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e007      	b.n	800396e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e004      	b.n	800396e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
 8003968:	e001      	b.n	800396e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000028 	.word	0x20000028
 800397c:	20000020 	.word	0x20000020
 8003980:	20000024 	.word	0x20000024

08003984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_IncTick+0x1c>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_IncTick+0x20>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4413      	add	r3, r2
 8003992:	4a03      	ldr	r2, [pc, #12]	@ (80039a0 <HAL_IncTick+0x1c>)
 8003994:	6013      	str	r3, [r2, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	200006a0 	.word	0x200006a0
 80039a4:	20000028 	.word	0x20000028

080039a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return uwTick;
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_GetTick+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	200006a0 	.word	0x200006a0

080039c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f7ff ffee 	bl	80039a8 <HAL_GetTick>
 80039cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d8:	d004      	beq.n	80039e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_Delay+0x40>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039e4:	bf00      	nop
 80039e6:	f7ff ffdf 	bl	80039a8 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d8f7      	bhi.n	80039e6 <HAL_Delay+0x26>
  {
  }
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000028 	.word	0x20000028

08003a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a36:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	60d3      	str	r3, [r2, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <__NVIC_GetPriorityGrouping+0x18>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0307 	and.w	r3, r3, #7
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	db0a      	blt.n	8003a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	490c      	ldr	r1, [pc, #48]	@ (8003ab4 <__NVIC_SetPriority+0x4c>)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a90:	e00a      	b.n	8003aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	4908      	ldr	r1, [pc, #32]	@ (8003ab8 <__NVIC_SetPriority+0x50>)
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	3b04      	subs	r3, #4
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	761a      	strb	r2, [r3, #24]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000e100 	.word	0xe000e100
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	@ 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f1c3 0307 	rsb	r3, r3, #7
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	bf28      	it	cs
 8003ada:	2304      	movcs	r3, #4
 8003adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d902      	bls.n	8003aec <NVIC_EncodePriority+0x30>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3b03      	subs	r3, #3
 8003aea:	e000      	b.n	8003aee <NVIC_EncodePriority+0x32>
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	401a      	ands	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	43d9      	mvns	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b14:	4313      	orrs	r3, r2
         );
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	@ 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b34:	d301      	bcc.n	8003b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00f      	b.n	8003b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <SysTick_Config+0x40>)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b42:	210f      	movs	r1, #15
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b48:	f7ff ff8e 	bl	8003a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <SysTick_Config+0x40>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b52:	4b04      	ldr	r3, [pc, #16]	@ (8003b64 <SysTick_Config+0x40>)
 8003b54:	2207      	movs	r2, #7
 8003b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	e000e010 	.word	0xe000e010

08003b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff47 	bl	8003a04 <__NVIC_SetPriorityGrouping>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	4603      	mov	r3, r0
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b8c:	f7ff ff5e 	bl	8003a4c <__NVIC_GetPriorityGrouping>
 8003b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff90 	bl	8003abc <NVIC_EncodePriority>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff5f 	bl	8003a68 <__NVIC_SetPriority>
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ffb2 	bl	8003b24 <SysTick_Config>
 8003bc0:	4603      	mov	r3, r0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bda:	e15a      	b.n	8003e92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2101      	movs	r1, #1
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	4013      	ands	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 814c 	beq.w	8003e8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d130      	bne.n	8003c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c42:	2201      	movs	r2, #1
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	f003 0201 	and.w	r2, r3, #1
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d017      	beq.n	8003caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d123      	bne.n	8003cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	08da      	lsrs	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3208      	adds	r2, #8
 8003cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	220f      	movs	r2, #15
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	08da      	lsrs	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3208      	adds	r2, #8
 8003cf8:	6939      	ldr	r1, [r7, #16]
 8003cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0203 	and.w	r2, r3, #3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80a6 	beq.w	8003e8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d40:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb0 <HAL_GPIO_Init+0x2e4>)
 8003d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d44:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb0 <HAL_GPIO_Init+0x2e4>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d4c:	4b58      	ldr	r3, [pc, #352]	@ (8003eb0 <HAL_GPIO_Init+0x2e4>)
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d58:	4a56      	ldr	r2, [pc, #344]	@ (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	220f      	movs	r2, #15
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d82:	d01f      	beq.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a4c      	ldr	r2, [pc, #304]	@ (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d019      	beq.n	8003dc0 <HAL_GPIO_Init+0x1f4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a4b      	ldr	r2, [pc, #300]	@ (8003ebc <HAL_GPIO_Init+0x2f0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_GPIO_Init+0x1f0>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a4a      	ldr	r2, [pc, #296]	@ (8003ec0 <HAL_GPIO_Init+0x2f4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00d      	beq.n	8003db8 <HAL_GPIO_Init+0x1ec>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a49      	ldr	r2, [pc, #292]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <HAL_GPIO_Init+0x1e8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a48      	ldr	r2, [pc, #288]	@ (8003ec8 <HAL_GPIO_Init+0x2fc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_GPIO_Init+0x1e4>
 8003dac:	2305      	movs	r3, #5
 8003dae:	e00a      	b.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003db0:	2306      	movs	r3, #6
 8003db2:	e008      	b.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003db4:	2304      	movs	r3, #4
 8003db6:	e006      	b.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003db8:	2303      	movs	r3, #3
 8003dba:	e004      	b.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e002      	b.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_GPIO_Init+0x1fa>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	f002 0203 	and.w	r2, r2, #3
 8003dcc:	0092      	lsls	r2, r2, #2
 8003dce:	4093      	lsls	r3, r2
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd6:	4937      	ldr	r1, [pc, #220]	@ (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	3302      	adds	r3, #2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003de4:	4b39      	ldr	r3, [pc, #228]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e08:	4a30      	ldr	r2, [pc, #192]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e32:	4a26      	ldr	r2, [pc, #152]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e38:	4b24      	ldr	r3, [pc, #144]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e86:	4a11      	ldr	r2, [pc, #68]	@ (8003ecc <HAL_GPIO_Init+0x300>)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f47f ae9d 	bne.w	8003bdc <HAL_GPIO_Init+0x10>
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40010000 	.word	0x40010000
 8003eb8:	48000400 	.word	0x48000400
 8003ebc:	48000800 	.word	0x48000800
 8003ec0:	48000c00 	.word	0x48000c00
 8003ec4:	48001000 	.word	0x48001000
 8003ec8:	48001400 	.word	0x48001400
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	807b      	strh	r3, [r7, #2]
 8003edc:	4613      	mov	r3, r2
 8003ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee0:	787b      	ldrb	r3, [r7, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eec:	e002      	b.n	8003ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d141      	bne.n	8003f92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1a:	d131      	bne.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f1c:	4b47      	ldr	r3, [pc, #284]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f22:	4a46      	ldr	r2, [pc, #280]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2c:	4b43      	ldr	r3, [pc, #268]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f34:	4a41      	ldr	r2, [pc, #260]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f3c:	4b40      	ldr	r3, [pc, #256]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2232      	movs	r2, #50	@ 0x32
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	4a3f      	ldr	r2, [pc, #252]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	0c9b      	lsrs	r3, r3, #18
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f52:	e002      	b.n	8003f5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5a:	4b38      	ldr	r3, [pc, #224]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f66:	d102      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f2      	bne.n	8003f54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6e:	4b33      	ldr	r3, [pc, #204]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7a:	d158      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e057      	b.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f80:	4b2e      	ldr	r3, [pc, #184]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f86:	4a2d      	ldr	r2, [pc, #180]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f90:	e04d      	b.n	800402e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f98:	d141      	bne.n	800401e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9a:	4b28      	ldr	r3, [pc, #160]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa6:	d131      	bne.n	800400c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fa8:	4b24      	ldr	r3, [pc, #144]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fae:	4a23      	ldr	r2, [pc, #140]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fb8:	4b20      	ldr	r3, [pc, #128]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2232      	movs	r2, #50	@ 0x32
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8004044 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	0c9b      	lsrs	r3, r3, #18
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fde:	e002      	b.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe6:	4b15      	ldr	r3, [pc, #84]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ff2:	d102      	bne.n	8003ffa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f2      	bne.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ffa:	4b10      	ldr	r3, [pc, #64]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d112      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e011      	b.n	8004030 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004012:	4a0a      	ldr	r2, [pc, #40]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800401c:	e007      	b.n	800402e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800401e:	4b07      	ldr	r3, [pc, #28]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004026:	4a05      	ldr	r2, [pc, #20]	@ (800403c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004028:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800402c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40007000 	.word	0x40007000
 8004040:	20000020 	.word	0x20000020
 8004044:	431bde83 	.word	0x431bde83

08004048 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a04      	ldr	r2, [pc, #16]	@ (8004064 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004056:	6093      	str	r3, [r2, #8]
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40007000 	.word	0x40007000

08004068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e2fe      	b.n	8004678 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d075      	beq.n	8004172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004086:	4b97      	ldr	r3, [pc, #604]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004090:	4b94      	ldr	r3, [pc, #592]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d102      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3e>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d002      	beq.n	80040ac <HAL_RCC_OscConfig+0x44>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	4b8d      	ldr	r3, [pc, #564]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d05b      	beq.n	8004170 <HAL_RCC_OscConfig+0x108>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d157      	bne.n	8004170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e2d9      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040cc:	d106      	bne.n	80040dc <HAL_RCC_OscConfig+0x74>
 80040ce:	4b85      	ldr	r3, [pc, #532]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a84      	ldr	r2, [pc, #528]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x98>
 80040e6:	4b7f      	ldr	r3, [pc, #508]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7e      	ldr	r2, [pc, #504]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b7c      	ldr	r3, [pc, #496]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a7b      	ldr	r2, [pc, #492]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0xb0>
 8004100:	4b78      	ldr	r3, [pc, #480]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a77      	ldr	r2, [pc, #476]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b75      	ldr	r3, [pc, #468]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a74      	ldr	r2, [pc, #464]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7ff fc42 	bl	80039a8 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7ff fc3e 	bl	80039a8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	@ 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e29e      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413a:	4b6a      	ldr	r3, [pc, #424]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xc0>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7ff fc2e 	bl	80039a8 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7ff fc2a 	bl	80039a8 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	@ 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e28a      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004162:	4b60      	ldr	r3, [pc, #384]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0xe8>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d075      	beq.n	800426a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417e:	4b59      	ldr	r3, [pc, #356]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004188:	4b56      	ldr	r3, [pc, #344]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d102      	bne.n	800419e <HAL_RCC_OscConfig+0x136>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_OscConfig+0x13c>
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d11f      	bne.n	80041e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a4:	4b4f      	ldr	r3, [pc, #316]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_OscConfig+0x154>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e25d      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041bc:	4b49      	ldr	r3, [pc, #292]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	4946      	ldr	r1, [pc, #280]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041d0:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <HAL_RCC_OscConfig+0x280>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fb9b 	bl	8003910 <HAL_InitTick>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d043      	beq.n	8004268 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e249      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d023      	beq.n	8004234 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b3d      	ldr	r3, [pc, #244]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3c      	ldr	r2, [pc, #240]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7ff fbd6 	bl	80039a8 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004200:	f7ff fbd2 	bl	80039a8 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e232      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004212:	4b34      	ldr	r3, [pc, #208]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421e:	4b31      	ldr	r3, [pc, #196]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	061b      	lsls	r3, r3, #24
 800422c:	492d      	ldr	r1, [pc, #180]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
 8004232:	e01a      	b.n	800426a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004234:	4b2b      	ldr	r3, [pc, #172]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2a      	ldr	r2, [pc, #168]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 800423a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800423e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7ff fbb2 	bl	80039a8 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7ff fbae 	bl	80039a8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e20e      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800425a:	4b22      	ldr	r3, [pc, #136]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x1e0>
 8004266:	e000      	b.n	800426a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d041      	beq.n	80042fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427e:	4b19      	ldr	r3, [pc, #100]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004284:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7ff fb8b 	bl	80039a8 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004296:	f7ff fb87 	bl	80039a8 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e1e7      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a8:	4b0e      	ldr	r3, [pc, #56]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ef      	beq.n	8004296 <HAL_RCC_OscConfig+0x22e>
 80042b6:	e020      	b.n	80042fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b8:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042be:	4a09      	ldr	r2, [pc, #36]	@ (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7ff fb6e 	bl	80039a8 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ce:	e00d      	b.n	80042ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d0:	f7ff fb6a 	bl	80039a8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d906      	bls.n	80042ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1ca      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ea      	bne.n	80042d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80a6 	beq.w	8004454 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800430c:	4b84      	ldr	r3, [pc, #528]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 800430e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_OscConfig+0x2b4>
 8004318:	2301      	movs	r3, #1
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x2b6>
 800431c:	2300      	movs	r3, #0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4b7f      	ldr	r3, [pc, #508]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004326:	4a7e      	ldr	r2, [pc, #504]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432c:	6593      	str	r3, [r2, #88]	@ 0x58
 800432e:	4b7c      	ldr	r3, [pc, #496]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800433a:	2301      	movs	r3, #1
 800433c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b79      	ldr	r3, [pc, #484]	@ (8004524 <HAL_RCC_OscConfig+0x4bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d118      	bne.n	800437c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434a:	4b76      	ldr	r3, [pc, #472]	@ (8004524 <HAL_RCC_OscConfig+0x4bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a75      	ldr	r2, [pc, #468]	@ (8004524 <HAL_RCC_OscConfig+0x4bc>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7ff fb27 	bl	80039a8 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7ff fb23 	bl	80039a8 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e183      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004370:	4b6c      	ldr	r3, [pc, #432]	@ (8004524 <HAL_RCC_OscConfig+0x4bc>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d108      	bne.n	8004396 <HAL_RCC_OscConfig+0x32e>
 8004384:	4b66      	ldr	r3, [pc, #408]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	4a65      	ldr	r2, [pc, #404]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 800438c:	f043 0301 	orr.w	r3, r3, #1
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004394:	e024      	b.n	80043e0 <HAL_RCC_OscConfig+0x378>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b05      	cmp	r3, #5
 800439c:	d110      	bne.n	80043c0 <HAL_RCC_OscConfig+0x358>
 800439e:	4b60      	ldr	r3, [pc, #384]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043be:	e00f      	b.n	80043e0 <HAL_RCC_OscConfig+0x378>
 80043c0:	4b57      	ldr	r3, [pc, #348]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	4a56      	ldr	r2, [pc, #344]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043d0:	4b53      	ldr	r3, [pc, #332]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	4a52      	ldr	r2, [pc, #328]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d016      	beq.n	8004416 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7ff fade 	bl	80039a8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7ff fada 	bl	80039a8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e138      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004406:	4b46      	ldr	r3, [pc, #280]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ed      	beq.n	80043f0 <HAL_RCC_OscConfig+0x388>
 8004414:	e015      	b.n	8004442 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004416:	f7ff fac7 	bl	80039a8 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800441c:	e00a      	b.n	8004434 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7ff fac3 	bl	80039a8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e121      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004434:	4b3a      	ldr	r3, [pc, #232]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ed      	bne.n	800441e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b35      	ldr	r3, [pc, #212]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444c:	4a34      	ldr	r2, [pc, #208]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d03c      	beq.n	80044da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004468:	4b2d      	ldr	r3, [pc, #180]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 800446a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800446e:	4a2c      	ldr	r2, [pc, #176]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7ff fa96 	bl	80039a8 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004480:	f7ff fa92 	bl	80039a8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0f2      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004492:	4b23      	ldr	r3, [pc, #140]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004494:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0ef      	beq.n	8004480 <HAL_RCC_OscConfig+0x418>
 80044a0:	e01b      	b.n	80044da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80044a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7ff fa79 	bl	80039a8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ba:	f7ff fa75 	bl	80039a8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e0d5      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044cc:	4b14      	ldr	r3, [pc, #80]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1ef      	bne.n	80044ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80c9 	beq.w	8004676 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	f000 8083 	beq.w	80045f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d15e      	bne.n	80045b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a08      	ldr	r2, [pc, #32]	@ (8004520 <HAL_RCC_OscConfig+0x4b8>)
 8004500:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7ff fa4f 	bl	80039a8 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800450c:	e00c      	b.n	8004528 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7ff fa4b 	bl	80039a8 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d905      	bls.n	8004528 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0ab      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
 8004520:	40021000 	.word	0x40021000
 8004524:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004528:	4b55      	ldr	r3, [pc, #340]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1ec      	bne.n	800450e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004534:	4b52      	ldr	r3, [pc, #328]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b52      	ldr	r3, [pc, #328]	@ (8004684 <HAL_RCC_OscConfig+0x61c>)
 800453a:	4013      	ands	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6a11      	ldr	r1, [r2, #32]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004544:	3a01      	subs	r2, #1
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	4311      	orrs	r1, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800454e:	0212      	lsls	r2, r2, #8
 8004550:	4311      	orrs	r1, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004556:	0852      	lsrs	r2, r2, #1
 8004558:	3a01      	subs	r2, #1
 800455a:	0552      	lsls	r2, r2, #21
 800455c:	4311      	orrs	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004562:	0852      	lsrs	r2, r2, #1
 8004564:	3a01      	subs	r2, #1
 8004566:	0652      	lsls	r2, r2, #25
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800456e:	06d2      	lsls	r2, r2, #27
 8004570:	430a      	orrs	r2, r1
 8004572:	4943      	ldr	r1, [pc, #268]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 8004574:	4313      	orrs	r3, r2
 8004576:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004578:	4b41      	ldr	r3, [pc, #260]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a40      	ldr	r2, [pc, #256]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 800457e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004582:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004584:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a3d      	ldr	r2, [pc, #244]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800458e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7ff fa0a 	bl	80039a8 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004598:	f7ff fa06 	bl	80039a8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e066      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045aa:	4b35      	ldr	r3, [pc, #212]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x530>
 80045b6:	e05e      	b.n	8004676 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b8:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a30      	ldr	r2, [pc, #192]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 80045be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7ff f9f0 	bl	80039a8 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045cc:	f7ff f9ec 	bl	80039a8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e04c      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045de:	4b28      	ldr	r3, [pc, #160]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045ea:	4b25      	ldr	r3, [pc, #148]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	4924      	ldr	r1, [pc, #144]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <HAL_RCC_OscConfig+0x620>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	60cb      	str	r3, [r1, #12]
 80045f6:	e03e      	b.n	8004676 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e039      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004604:	4b1e      	ldr	r3, [pc, #120]	@ (8004680 <HAL_RCC_OscConfig+0x618>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	429a      	cmp	r2, r3
 8004616:	d12c      	bne.n	8004672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	3b01      	subs	r3, #1
 8004624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d123      	bne.n	8004672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d11b      	bne.n	8004672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d113      	bne.n	8004672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	3b01      	subs	r3, #1
 8004658:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d109      	bne.n	8004672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	019f800c 	.word	0x019f800c
 8004688:	feeefffc 	.word	0xfeeefffc

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e11e      	b.n	80048e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b91      	ldr	r3, [pc, #580]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d910      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b8e      	ldr	r3, [pc, #568]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 020f 	bic.w	r2, r3, #15
 80046ba:	498c      	ldr	r1, [pc, #560]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b8a      	ldr	r3, [pc, #552]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e106      	b.n	80048e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d073      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d129      	bne.n	800473c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e8:	4b81      	ldr	r3, [pc, #516]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0f4      	b.n	80048e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046f8:	f000 f99e 	bl	8004a38 <RCC_GetSysClockFreqFromPLLSource>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4a7c      	ldr	r2, [pc, #496]	@ (80048f4 <HAL_RCC_ClockConfig+0x268>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d93f      	bls.n	8004786 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004706:	4b7a      	ldr	r3, [pc, #488]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800471a:	2b00      	cmp	r3, #0
 800471c:	d033      	beq.n	8004786 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004722:	2b00      	cmp	r3, #0
 8004724:	d12f      	bne.n	8004786 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004726:	4b72      	ldr	r3, [pc, #456]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800472e:	4a70      	ldr	r2, [pc, #448]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004734:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004736:	2380      	movs	r3, #128	@ 0x80
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e024      	b.n	8004786 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d107      	bne.n	8004754 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004744:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0c6      	b.n	80048e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004754:	4b66      	ldr	r3, [pc, #408]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0be      	b.n	80048e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004764:	f000 f8ce 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8004768:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4a61      	ldr	r2, [pc, #388]	@ (80048f4 <HAL_RCC_ClockConfig+0x268>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d909      	bls.n	8004786 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004772:	4b5f      	ldr	r3, [pc, #380]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800477a:	4a5d      	ldr	r2, [pc, #372]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 800477c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004780:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004782:	2380      	movs	r3, #128	@ 0x80
 8004784:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004786:	4b5a      	ldr	r3, [pc, #360]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 0203 	bic.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	4957      	ldr	r1, [pc, #348]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004798:	f7ff f906 	bl	80039a8 <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a0:	f7ff f902 	bl	80039a8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e095      	b.n	80048e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	4b4e      	ldr	r3, [pc, #312]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 020c 	and.w	r2, r3, #12
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d1eb      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d023      	beq.n	800481c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e0:	4b43      	ldr	r3, [pc, #268]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a42      	ldr	r2, [pc, #264]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047f8:	4b3d      	ldr	r3, [pc, #244]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004800:	4a3b      	ldr	r2, [pc, #236]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004802:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004806:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b39      	ldr	r3, [pc, #228]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4936      	ldr	r1, [pc, #216]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
 800481a:	e008      	b.n	800482e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b80      	cmp	r3, #128	@ 0x80
 8004820:	d105      	bne.n	800482e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004822:	4b33      	ldr	r3, [pc, #204]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4a32      	ldr	r2, [pc, #200]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004828:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800482c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800482e:	4b2f      	ldr	r3, [pc, #188]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d21d      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483c:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 020f 	bic.w	r2, r3, #15
 8004844:	4929      	ldr	r1, [pc, #164]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800484c:	f7ff f8ac 	bl	80039a8 <HAL_GetTick>
 8004850:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	e00a      	b.n	800486a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004854:	f7ff f8a8 	bl	80039a8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e03b      	b.n	80048e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <HAL_RCC_ClockConfig+0x260>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d1ed      	bne.n	8004854 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4917      	ldr	r1, [pc, #92]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a2:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	490f      	ldr	r1, [pc, #60]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048b6:	f000 f825 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048ba:	4602      	mov	r2, r0
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <HAL_RCC_ClockConfig+0x264>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	490c      	ldr	r1, [pc, #48]	@ (80048f8 <HAL_RCC_ClockConfig+0x26c>)
 80048c8:	5ccb      	ldrb	r3, [r1, r3]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <HAL_RCC_ClockConfig+0x270>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004900 <HAL_RCC_ClockConfig+0x274>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f818 	bl	8003910 <HAL_InitTick>
 80048e0:	4603      	mov	r3, r0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40022000 	.word	0x40022000
 80048f0:	40021000 	.word	0x40021000
 80048f4:	04c4b400 	.word	0x04c4b400
 80048f8:	0800d84c 	.word	0x0800d84c
 80048fc:	20000020 	.word	0x20000020
 8004900:	20000024 	.word	0x20000024

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800490a:	4b2c      	ldr	r3, [pc, #176]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d102      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004916:	4b2a      	ldr	r3, [pc, #168]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e047      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800491c:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b08      	cmp	r3, #8
 8004926:	d102      	bne.n	800492e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004928:	4b26      	ldr	r3, [pc, #152]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e03e      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800492e:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d136      	bne.n	80049a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004944:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	3301      	adds	r3, #1
 8004950:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d10c      	bne.n	8004972 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004958:	4a1a      	ldr	r2, [pc, #104]	@ (80049c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	4a16      	ldr	r2, [pc, #88]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004962:	68d2      	ldr	r2, [r2, #12]
 8004964:	0a12      	lsrs	r2, r2, #8
 8004966:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	617b      	str	r3, [r7, #20]
      break;
 8004970:	e00c      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004972:	4a13      	ldr	r2, [pc, #76]	@ (80049c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	fbb2 f3f3 	udiv	r3, r2, r3
 800497a:	4a10      	ldr	r2, [pc, #64]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800497c:	68d2      	ldr	r2, [r2, #12]
 800497e:	0a12      	lsrs	r2, r2, #8
 8004980:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004984:	fb02 f303 	mul.w	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]
      break;
 800498a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	0e5b      	lsrs	r3, r3, #25
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e001      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049ac:	693b      	ldr	r3, [r7, #16]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000020 	.word	0x20000020

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049e4:	f7ff fff0 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4904      	ldr	r1, [pc, #16]	@ (8004a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	0800d85c 	.word	0x0800d85c

08004a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a10:	f7ff ffda 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	0adb      	lsrs	r3, r3, #11
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4904      	ldr	r1, [pc, #16]	@ (8004a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	0800d85c 	.word	0x0800d85c

08004a38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a48:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d10c      	bne.n	8004a76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a5c:	4a17      	ldr	r2, [pc, #92]	@ (8004abc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	4a14      	ldr	r2, [pc, #80]	@ (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a66:	68d2      	ldr	r2, [r2, #12]
 8004a68:	0a12      	lsrs	r2, r2, #8
 8004a6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	617b      	str	r3, [r7, #20]
    break;
 8004a74:	e00c      	b.n	8004a90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a76:	4a12      	ldr	r2, [pc, #72]	@ (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a80:	68d2      	ldr	r2, [r2, #12]
 8004a82:	0a12      	lsrs	r2, r2, #8
 8004a84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a88:	fb02 f303 	mul.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
    break;
 8004a8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a90:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	0e5b      	lsrs	r3, r3, #25
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004aaa:	687b      	ldr	r3, [r7, #4]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	007a1200 	.word	0x007a1200
 8004ac0:	00f42400 	.word	0x00f42400

08004ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004acc:	2300      	movs	r3, #0
 8004ace:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8098 	beq.w	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b43      	ldr	r3, [pc, #268]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10d      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	4b40      	ldr	r3, [pc, #256]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af6:	4a3f      	ldr	r2, [pc, #252]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004afe:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a39      	ldr	r2, [pc, #228]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b1a:	f7fe ff45 	bl	80039a8 <HAL_GetTick>
 8004b1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b20:	e009      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b22:	f7fe ff41 	bl	80039a8 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d902      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	74fb      	strb	r3, [r7, #19]
        break;
 8004b34:	e005      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b36:	4b30      	ldr	r3, [pc, #192]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0ef      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d159      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b48:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01e      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d019      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b64:	4b23      	ldr	r3, [pc, #140]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b70:	4b20      	ldr	r3, [pc, #128]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b80:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b86:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b90:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d016      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fe ff01 	bl	80039a8 <HAL_GetTick>
 8004ba6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fe fefd 	bl	80039a8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d902      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	74fb      	strb	r3, [r7, #19]
            break;
 8004bc0:	e006      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0ec      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bd6:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	4903      	ldr	r1, [pc, #12]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bec:	e008      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	74bb      	strb	r3, [r7, #18]
 8004bf2:	e005      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c00:	7c7b      	ldrb	r3, [r7, #17]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c06:	4ba6      	ldr	r3, [pc, #664]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0a:	4aa5      	ldr	r2, [pc, #660]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c1e:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	f023 0203 	bic.w	r2, r3, #3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	499c      	ldr	r1, [pc, #624]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c40:	4b97      	ldr	r3, [pc, #604]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f023 020c 	bic.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4994      	ldr	r1, [pc, #592]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c62:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	498b      	ldr	r1, [pc, #556]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c84:	4b86      	ldr	r3, [pc, #536]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4983      	ldr	r1, [pc, #524]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ca6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	497a      	ldr	r1, [pc, #488]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cc8:	4b75      	ldr	r3, [pc, #468]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	4972      	ldr	r1, [pc, #456]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	4969      	ldr	r1, [pc, #420]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d0c:	4b64      	ldr	r3, [pc, #400]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4961      	ldr	r1, [pc, #388]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	4958      	ldr	r1, [pc, #352]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d015      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d50:	4b53      	ldr	r3, [pc, #332]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	4950      	ldr	r1, [pc, #320]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d7a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d015      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d88:	4b45      	ldr	r3, [pc, #276]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	4942      	ldr	r1, [pc, #264]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004da6:	d105      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	4a3c      	ldr	r2, [pc, #240]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004db2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d015      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dc0:	4b37      	ldr	r3, [pc, #220]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dce:	4934      	ldr	r1, [pc, #208]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dde:	d105      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004df8:	4b29      	ldr	r3, [pc, #164]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e06:	4926      	ldr	r1, [pc, #152]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e16:	d105      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e18:	4b21      	ldr	r3, [pc, #132]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d015      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3e:	4918      	ldr	r1, [pc, #96]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e4e:	d105      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e50:	4b13      	ldr	r3, [pc, #76]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a12      	ldr	r2, [pc, #72]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d015      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e76:	490a      	ldr	r1, [pc, #40]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e86:	d105      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e88:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	.word	0x40021000

08004ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e09d      	b.n	8004ff2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d108      	bne.n	8004ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ec6:	d009      	beq.n	8004edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	61da      	str	r2, [r3, #28]
 8004ece:	e005      	b.n	8004edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fe f9b8 	bl	800326c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f1c:	d902      	bls.n	8004f24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e002      	b.n	8004f2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f32:	d007      	beq.n	8004f44 <HAL_SPI_Init+0xa0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	ea42 0103 	orr.w	r1, r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	0c1b      	lsrs	r3, r3, #16
 8004fa0:	f003 0204 	and.w	r2, r3, #4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004fc0:	ea42 0103 	orr.w	r1, r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b088      	sub	sp, #32
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800500a:	f7fe fccd 	bl	80039a8 <HAL_GetTick>
 800500e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005020:	2302      	movs	r3, #2
 8005022:	e15c      	b.n	80052de <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Transmit+0x36>
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e154      	b.n	80052de <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_SPI_Transmit+0x48>
 800503e:	2302      	movs	r3, #2
 8005040:	e14d      	b.n	80052de <HAL_SPI_Transmit+0x2e4>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2203      	movs	r2, #3
 800504e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005094:	d10f      	bne.n	80050b6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	d007      	beq.n	80050d4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050dc:	d952      	bls.n	8005184 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_SPI_Transmit+0xf2>
 80050e6:	8b7b      	ldrh	r3, [r7, #26]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d145      	bne.n	8005178 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f0:	881a      	ldrh	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	1c9a      	adds	r2, r3, #2
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005110:	e032      	b.n	8005178 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d112      	bne.n	8005146 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005144:	e018      	b.n	8005178 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005146:	f7fe fc2f 	bl	80039a8 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d803      	bhi.n	800515e <HAL_SPI_Transmit+0x164>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800515c:	d102      	bne.n	8005164 <HAL_SPI_Transmit+0x16a>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0b2      	b.n	80052de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1c7      	bne.n	8005112 <HAL_SPI_Transmit+0x118>
 8005182:	e083      	b.n	800528c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_SPI_Transmit+0x198>
 800518c:	8b7b      	ldrh	r3, [r7, #26]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d177      	bne.n	8005282 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d912      	bls.n	80051c2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	881a      	ldrh	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ac:	1c9a      	adds	r2, r3, #2
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b02      	subs	r3, #2
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051c0:	e05f      	b.n	8005282 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051e8:	e04b      	b.n	8005282 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d12b      	bne.n	8005250 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d912      	bls.n	8005228 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	881a      	ldrh	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005212:	1c9a      	adds	r2, r3, #2
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b02      	subs	r3, #2
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005226:	e02c      	b.n	8005282 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800524e:	e018      	b.n	8005282 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005250:	f7fe fbaa 	bl	80039a8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d803      	bhi.n	8005268 <HAL_SPI_Transmit+0x26e>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005266:	d102      	bne.n	800526e <HAL_SPI_Transmit+0x274>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e02d      	b.n	80052de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ae      	bne.n	80051ea <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fcf5 	bl	8005c80 <SPI_EndRxTxTransaction>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80052dc:	2300      	movs	r3, #0
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b088      	sub	sp, #32
 80052ea:	af02      	add	r7, sp, #8
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d001      	beq.n	8005306 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
 8005304:	e123      	b.n	800554e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_SPI_Receive+0x2c>
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e11b      	b.n	800554e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800531e:	d112      	bne.n	8005346 <HAL_SPI_Receive+0x60>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10e      	bne.n	8005346 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2204      	movs	r2, #4
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f90a 	bl	8005556 <HAL_SPI_TransmitReceive>
 8005342:	4603      	mov	r3, r0
 8005344:	e103      	b.n	800554e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005346:	f7fe fb2f 	bl	80039a8 <HAL_GetTick>
 800534a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_SPI_Receive+0x74>
 8005356:	2302      	movs	r3, #2
 8005358:	e0f9      	b.n	800554e <HAL_SPI_Receive+0x268>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2204      	movs	r2, #4
 8005366:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80053ac:	d908      	bls.n	80053c0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	e007      	b.n	80053d0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053d8:	d10f      	bne.n	80053fa <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005404:	2b40      	cmp	r3, #64	@ 0x40
 8005406:	d007      	beq.n	8005418 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005416:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005420:	d875      	bhi.n	800550e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005422:	e037      	b.n	8005494 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d117      	bne.n	8005462 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f103 020c 	add.w	r2, r3, #12
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	7812      	ldrb	r2, [r2, #0]
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005460:	e018      	b.n	8005494 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005462:	f7fe faa1 	bl	80039a8 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d803      	bhi.n	800547a <HAL_SPI_Receive+0x194>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005478:	d102      	bne.n	8005480 <HAL_SPI_Receive+0x19a>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e05c      	b.n	800554e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1c1      	bne.n	8005424 <HAL_SPI_Receive+0x13e>
 80054a0:	e03b      	b.n	800551a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d115      	bne.n	80054dc <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	b292      	uxth	r2, r2
 80054bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80054da:	e018      	b.n	800550e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054dc:	f7fe fa64 	bl	80039a8 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d803      	bhi.n	80054f4 <HAL_SPI_Receive+0x20e>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054f2:	d102      	bne.n	80054fa <HAL_SPI_Receive+0x214>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e01f      	b.n	800554e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1c3      	bne.n	80054a2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fb56 	bl	8005bd0 <SPI_EndRxTransaction>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800554c:	2300      	movs	r3, #0
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b08a      	sub	sp, #40	@ 0x28
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005564:	2301      	movs	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005568:	f7fe fa1e 	bl	80039a8 <HAL_GetTick>
 800556c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005574:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005580:	887b      	ldrh	r3, [r7, #2]
 8005582:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005584:	7ffb      	ldrb	r3, [r7, #31]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d00c      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x4e>
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005590:	d106      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x4a>
 800559a:	7ffb      	ldrb	r3, [r7, #31]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d001      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
 80055a2:	e1f3      	b.n	800598c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x60>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x60>
 80055b0:	887b      	ldrh	r3, [r7, #2]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e1e8      	b.n	800598c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x72>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e1e1      	b.n	800598c <HAL_SPI_TransmitReceive+0x436>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d003      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2205      	movs	r2, #5
 80055e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	887a      	ldrh	r2, [r7, #2]
 80055f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	887a      	ldrh	r2, [r7, #2]
 800560a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005626:	d802      	bhi.n	800562e <HAL_SPI_TransmitReceive+0xd8>
 8005628:	8abb      	ldrh	r3, [r7, #20]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d908      	bls.n	8005640 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	e007      	b.n	8005650 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800564e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565a:	2b40      	cmp	r3, #64	@ 0x40
 800565c:	d007      	beq.n	800566e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800566c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005676:	f240 8083 	bls.w	8005780 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x132>
 8005682:	8afb      	ldrh	r3, [r7, #22]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d16f      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ac:	e05c      	b.n	8005768 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d11b      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x19e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d016      	beq.n	80056f4 <HAL_SPI_TransmitReceive+0x19e>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d113      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	881a      	ldrh	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d11c      	bne.n	800573c <HAL_SPI_TransmitReceive+0x1e6>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	b292      	uxth	r2, r2
 800571a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	1c9a      	adds	r2, r3, #2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005738:	2301      	movs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800573c:	f7fe f934 	bl	80039a8 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005748:	429a      	cmp	r2, r3
 800574a:	d80d      	bhi.n	8005768 <HAL_SPI_TransmitReceive+0x212>
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005752:	d009      	beq.n	8005768 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e111      	b.n	800598c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d19d      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x158>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d197      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x158>
 800577e:	e0e5      	b.n	800594c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_SPI_TransmitReceive+0x23a>
 8005788:	8afb      	ldrh	r3, [r7, #22]
 800578a:	2b01      	cmp	r3, #1
 800578c:	f040 80d1 	bne.w	8005932 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	d912      	bls.n	80057c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579e:	881a      	ldrh	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b02      	subs	r3, #2
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057be:	e0b8      	b.n	8005932 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e6:	e0a4      	b.n	8005932 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d134      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x30a>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d02f      	beq.n	8005860 <HAL_SPI_TransmitReceive+0x30a>
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	2b01      	cmp	r3, #1
 8005804:	d12c      	bne.n	8005860 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d912      	bls.n	8005836 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005814:	881a      	ldrh	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b02      	subs	r3, #2
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005834:	e012      	b.n	800585c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	330c      	adds	r3, #12
 8005840:	7812      	ldrb	r2, [r2, #0]
 8005842:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005848:	1c5a      	adds	r2, r3, #1
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b01      	cmp	r3, #1
 800586c:	d148      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x3aa>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d042      	beq.n	8005900 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	d923      	bls.n	80058ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	b292      	uxth	r2, r2
 8005892:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	1c9a      	adds	r2, r3, #2
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b02      	subs	r3, #2
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d81f      	bhi.n	80058fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	e016      	b.n	80058fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f103 020c 	add.w	r2, r3, #12
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	7812      	ldrb	r2, [r2, #0]
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058fc:	2301      	movs	r3, #1
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005900:	f7fe f852 	bl	80039a8 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590c:	429a      	cmp	r2, r3
 800590e:	d803      	bhi.n	8005918 <HAL_SPI_TransmitReceive+0x3c2>
 8005910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005916:	d102      	bne.n	800591e <HAL_SPI_TransmitReceive+0x3c8>
 8005918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e02c      	b.n	800598c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	f47f af55 	bne.w	80057e8 <HAL_SPI_TransmitReceive+0x292>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	f47f af4e 	bne.w	80057e8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f995 	bl	8005c80 <SPI_EndRxTxTransaction>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e00e      	b.n	800598c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800598a:	2300      	movs	r3, #0
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	@ 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059a4:	f7fe f800 	bl	80039a8 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80059b4:	f7fd fff8 	bl	80039a8 <HAL_GetTick>
 80059b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80059ba:	4b39      	ldr	r3, [pc, #228]	@ (8005aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	015b      	lsls	r3, r3, #5
 80059c0:	0d1b      	lsrs	r3, r3, #20
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059ca:	e054      	b.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059d2:	d050      	beq.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80059d4:	f7fd ffe8 	bl	80039a8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d902      	bls.n	80059ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d13d      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80059f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a02:	d111      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a0c:	d004      	beq.n	8005a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a16:	d107      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a30:	d10f      	bne.n	8005a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e017      	b.n	8005a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d19b      	bne.n	80059cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000020 	.word	0x20000020

08005aa4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	@ 0x28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ab6:	f7fd ff77 	bl	80039a8 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005ac6:	f7fd ff6f 	bl	80039a8 <HAL_GetTick>
 8005aca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8005bcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	00da      	lsls	r2, r3, #3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	0d1b      	lsrs	r3, r3, #20
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae6:	fb02 f303 	mul.w	r3, r2, r3
 8005aea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005aec:	e060      	b.n	8005bb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005af4:	d107      	bne.n	8005b06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b0c:	d050      	beq.n	8005bb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b0e:	f7fd ff4b 	bl	80039a8 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d902      	bls.n	8005b24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d13d      	bne.n	8005ba0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b3c:	d111      	bne.n	8005b62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b46:	d004      	beq.n	8005b52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b50:	d107      	bne.n	8005b62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b6a:	d10f      	bne.n	8005b8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e010      	b.n	8005bc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d196      	bne.n	8005aee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3728      	adds	r7, #40	@ 0x28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000020 	.word	0x20000020

08005bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be4:	d111      	bne.n	8005c0a <SPI_EndRxTransaction+0x3a>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bee:	d004      	beq.n	8005bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf8:	d107      	bne.n	8005c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c08:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2180      	movs	r1, #128	@ 0x80
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff febd 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d007      	beq.n	8005c30 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c24:	f043 0220 	orr.w	r2, r3, #32
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e023      	b.n	8005c78 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c38:	d11d      	bne.n	8005c76 <SPI_EndRxTransaction+0xa6>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c42:	d004      	beq.n	8005c4e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c4c:	d113      	bne.n	8005c76 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff ff22 	bl	8005aa4 <SPI_WaitFifoStateUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c6a:	f043 0220 	orr.w	r2, r3, #32
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e000      	b.n	8005c78 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff ff03 	bl	8005aa4 <SPI_WaitFifoStateUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ca8:	f043 0220 	orr.w	r2, r3, #32
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e027      	b.n	8005d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2180      	movs	r1, #128	@ 0x80
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff fe68 	bl	8005994 <SPI_WaitFlagStateUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e014      	b.n	8005d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fedc 	bl	8005aa4 <SPI_WaitFifoStateUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e000      	b.n	8005d04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e049      	b.n	8005db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fd fb2c 	bl	8003390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 fcd8 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e049      	b.n	8005e60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f841 	bl	8005e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f000 fc81 	bl	8006700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x24>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e03c      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d109      	bne.n	8005eba <HAL_TIM_PWM_Start+0x3e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	e02f      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d109      	bne.n	8005ed4 <HAL_TIM_PWM_Start+0x58>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	bf14      	ite	ne
 8005ecc:	2301      	movne	r3, #1
 8005ece:	2300      	moveq	r3, #0
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e022      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d109      	bne.n	8005eee <HAL_TIM_PWM_Start+0x72>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	bf14      	ite	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	2300      	moveq	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	e015      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d109      	bne.n	8005f08 <HAL_TIM_PWM_Start+0x8c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	bf14      	ite	ne
 8005f00:	2301      	movne	r3, #1
 8005f02:	2300      	moveq	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	e008      	b.n	8005f1a <HAL_TIM_PWM_Start+0x9e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e097      	b.n	8006052 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_PWM_Start+0xb6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f30:	e023      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_PWM_Start+0xc6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f40:	e01b      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_PWM_Start+0xd6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f50:	e013      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_PWM_Start+0xe6>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f60:	e00b      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d104      	bne.n	8005f72 <HAL_TIM_PWM_Start+0xf6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f70:	e003      	b.n	8005f7a <HAL_TIM_PWM_Start+0xfe>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2202      	movs	r2, #2
 8005f76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 ffea 	bl	8006f5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a33      	ldr	r2, [pc, #204]	@ (800605c <HAL_TIM_PWM_Start+0x1e0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d013      	beq.n	8005fba <HAL_TIM_PWM_Start+0x13e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a32      	ldr	r2, [pc, #200]	@ (8006060 <HAL_TIM_PWM_Start+0x1e4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00e      	beq.n	8005fba <HAL_TIM_PWM_Start+0x13e>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a30      	ldr	r2, [pc, #192]	@ (8006064 <HAL_TIM_PWM_Start+0x1e8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d009      	beq.n	8005fba <HAL_TIM_PWM_Start+0x13e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a2f      	ldr	r2, [pc, #188]	@ (8006068 <HAL_TIM_PWM_Start+0x1ec>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d004      	beq.n	8005fba <HAL_TIM_PWM_Start+0x13e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800606c <HAL_TIM_PWM_Start+0x1f0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_PWM_Start+0x142>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <HAL_TIM_PWM_Start+0x144>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a20      	ldr	r2, [pc, #128]	@ (800605c <HAL_TIM_PWM_Start+0x1e0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_TIM_PWM_Start+0x194>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d013      	beq.n	8006010 <HAL_TIM_PWM_Start+0x194>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a20      	ldr	r2, [pc, #128]	@ (8006070 <HAL_TIM_PWM_Start+0x1f4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_TIM_PWM_Start+0x194>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8006074 <HAL_TIM_PWM_Start+0x1f8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_TIM_PWM_Start+0x194>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a17      	ldr	r2, [pc, #92]	@ (8006060 <HAL_TIM_PWM_Start+0x1e4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIM_PWM_Start+0x194>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a16      	ldr	r2, [pc, #88]	@ (8006064 <HAL_TIM_PWM_Start+0x1e8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d115      	bne.n	800603c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	4b18      	ldr	r3, [pc, #96]	@ (8006078 <HAL_TIM_PWM_Start+0x1fc>)
 8006018:	4013      	ands	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b06      	cmp	r3, #6
 8006020:	d015      	beq.n	800604e <HAL_TIM_PWM_Start+0x1d2>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006028:	d011      	beq.n	800604e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	e008      	b.n	800604e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e000      	b.n	8006050 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40013400 	.word	0x40013400
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	00010007 	.word	0x00010007

0800607c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e097      	b.n	80061c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fd f9a5 	bl	80033f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80060c0:	f023 0307 	bic.w	r3, r3, #7
 80060c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f000 fb15 	bl	8006700 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	4313      	orrs	r3, r2
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800611c:	f023 030c 	bic.w	r3, r3, #12
 8006120:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800612c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	4313      	orrs	r3, r2
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	031b      	lsls	r3, r3, #12
 800614c:	4313      	orrs	r3, r2
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	4313      	orrs	r3, r2
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d110      	bne.n	800621a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d102      	bne.n	8006204 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80061fe:	7b7b      	ldrb	r3, [r7, #13]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d001      	beq.n	8006208 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e069      	b.n	80062dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006218:	e031      	b.n	800627e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d110      	bne.n	8006242 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d102      	bne.n	800622c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006226:	7b3b      	ldrb	r3, [r7, #12]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d001      	beq.n	8006230 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e055      	b.n	80062dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006240:	e01d      	b.n	800627e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d108      	bne.n	800625a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d105      	bne.n	800625a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800624e:	7b7b      	ldrb	r3, [r7, #13]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d102      	bne.n	800625a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006254:	7b3b      	ldrb	r3, [r7, #12]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d001      	beq.n	800625e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e03e      	b.n	80062dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2202      	movs	r2, #2
 800626a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_TIM_Encoder_Start+0xc4>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d008      	beq.n	800629c <HAL_TIM_Encoder_Start+0xd4>
 800628a:	e00f      	b.n	80062ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2201      	movs	r2, #1
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fe61 	bl	8006f5c <TIM_CCxChannelCmd>
      break;
 800629a:	e016      	b.n	80062ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2201      	movs	r2, #1
 80062a2:	2104      	movs	r1, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fe59 	bl	8006f5c <TIM_CCxChannelCmd>
      break;
 80062aa:	e00e      	b.n	80062ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2201      	movs	r2, #1
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fe51 	bl	8006f5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	2104      	movs	r1, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fe4a 	bl	8006f5c <TIM_CCxChannelCmd>
      break;
 80062c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0201 	orr.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062fe:	2302      	movs	r3, #2
 8006300:	e0ff      	b.n	8006502 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b14      	cmp	r3, #20
 800630e:	f200 80f0 	bhi.w	80064f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006312:	a201      	add	r2, pc, #4	@ (adr r2, 8006318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	0800636d 	.word	0x0800636d
 800631c:	080064f3 	.word	0x080064f3
 8006320:	080064f3 	.word	0x080064f3
 8006324:	080064f3 	.word	0x080064f3
 8006328:	080063ad 	.word	0x080063ad
 800632c:	080064f3 	.word	0x080064f3
 8006330:	080064f3 	.word	0x080064f3
 8006334:	080064f3 	.word	0x080064f3
 8006338:	080063ef 	.word	0x080063ef
 800633c:	080064f3 	.word	0x080064f3
 8006340:	080064f3 	.word	0x080064f3
 8006344:	080064f3 	.word	0x080064f3
 8006348:	0800642f 	.word	0x0800642f
 800634c:	080064f3 	.word	0x080064f3
 8006350:	080064f3 	.word	0x080064f3
 8006354:	080064f3 	.word	0x080064f3
 8006358:	08006471 	.word	0x08006471
 800635c:	080064f3 	.word	0x080064f3
 8006360:	080064f3 	.word	0x080064f3
 8006364:	080064f3 	.word	0x080064f3
 8006368:	080064b1 	.word	0x080064b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fa60 	bl	8006838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0208 	orr.w	r2, r2, #8
 8006386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0204 	bic.w	r2, r2, #4
 8006396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6999      	ldr	r1, [r3, #24]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	691a      	ldr	r2, [r3, #16]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	619a      	str	r2, [r3, #24]
      break;
 80063aa:	e0a5      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fad0 	bl	8006958 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6999      	ldr	r1, [r3, #24]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	021a      	lsls	r2, r3, #8
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	619a      	str	r2, [r3, #24]
      break;
 80063ec:	e084      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fb39 	bl	8006a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0208 	orr.w	r2, r2, #8
 8006408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0204 	bic.w	r2, r2, #4
 8006418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69d9      	ldr	r1, [r3, #28]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	61da      	str	r2, [r3, #28]
      break;
 800642c:	e064      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fba1 	bl	8006b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69d9      	ldr	r1, [r3, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	021a      	lsls	r2, r3, #8
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	61da      	str	r2, [r3, #28]
      break;
 800646e:	e043      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fc0a 	bl	8006c90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0208 	orr.w	r2, r2, #8
 800648a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0204 	bic.w	r2, r2, #4
 800649a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064ae:	e023      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fc4e 	bl	8006d58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064f0:	e002      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	75fb      	strb	r3, [r7, #23]
      break;
 80064f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop

0800650c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_TIM_ConfigClockSource+0x1c>
 8006524:	2302      	movs	r3, #2
 8006526:	e0de      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x1da>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006546:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800654a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a63      	ldr	r2, [pc, #396]	@ (80066f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	f000 80a9 	beq.w	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 8006568:	4a61      	ldr	r2, [pc, #388]	@ (80066f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	f200 80ae 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 8006570:	4a60      	ldr	r2, [pc, #384]	@ (80066f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	f000 80a1 	beq.w	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 8006578:	4a5e      	ldr	r2, [pc, #376]	@ (80066f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	f200 80a6 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 8006580:	4a5d      	ldr	r2, [pc, #372]	@ (80066f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f000 8099 	beq.w	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 8006588:	4a5b      	ldr	r2, [pc, #364]	@ (80066f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800658a:	4293      	cmp	r3, r2
 800658c:	f200 809e 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 8006590:	4a5a      	ldr	r2, [pc, #360]	@ (80066fc <HAL_TIM_ConfigClockSource+0x1f0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	f000 8091 	beq.w	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 8006598:	4a58      	ldr	r2, [pc, #352]	@ (80066fc <HAL_TIM_ConfigClockSource+0x1f0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	f200 8096 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065a4:	f000 8089 	beq.w	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 80065a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065ac:	f200 808e 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b4:	d03e      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0x128>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ba:	f200 8087 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c2:	f000 8086 	beq.w	80066d2 <HAL_TIM_ConfigClockSource+0x1c6>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ca:	d87f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065cc:	2b70      	cmp	r3, #112	@ 0x70
 80065ce:	d01a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xfa>
 80065d0:	2b70      	cmp	r3, #112	@ 0x70
 80065d2:	d87b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065d4:	2b60      	cmp	r3, #96	@ 0x60
 80065d6:	d050      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x16e>
 80065d8:	2b60      	cmp	r3, #96	@ 0x60
 80065da:	d877      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065dc:	2b50      	cmp	r3, #80	@ 0x50
 80065de:	d03c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x14e>
 80065e0:	2b50      	cmp	r3, #80	@ 0x50
 80065e2:	d873      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065e4:	2b40      	cmp	r3, #64	@ 0x40
 80065e6:	d058      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x18e>
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d86f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065ec:	2b30      	cmp	r3, #48	@ 0x30
 80065ee:	d064      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 80065f0:	2b30      	cmp	r3, #48	@ 0x30
 80065f2:	d86b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d060      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d867      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d05a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x1ae>
 8006604:	e062      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	f000 fc81 	bl	8006f1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e04f      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	f000 fc6a 	bl	8006f1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006656:	609a      	str	r2, [r3, #8]
      break;
 8006658:	e03c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 fbdc 	bl	8006e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2150      	movs	r1, #80	@ 0x50
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fc35 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006678:	e02c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fbfb 	bl	8006e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2160      	movs	r1, #96	@ 0x60
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fc25 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 8006698:	e01c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fbbc 	bl	8006e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	@ 0x40
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fc15 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 80066b8:	e00c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 fc0c 	bl	8006ee2 <TIM_ITRx_SetConfig>
      break;
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80066d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	00100070 	.word	0x00100070
 80066f4:	00100040 	.word	0x00100040
 80066f8:	00100030 	.word	0x00100030
 80066fc:	00100020 	.word	0x00100020

08006700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a42      	ldr	r2, [pc, #264]	@ (800681c <TIM_Base_SetConfig+0x11c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00f      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671e:	d00b      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3f      	ldr	r2, [pc, #252]	@ (8006820 <TIM_Base_SetConfig+0x120>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3e      	ldr	r2, [pc, #248]	@ (8006824 <TIM_Base_SetConfig+0x124>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x38>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3d      	ldr	r2, [pc, #244]	@ (8006828 <TIM_Base_SetConfig+0x128>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a33      	ldr	r2, [pc, #204]	@ (800681c <TIM_Base_SetConfig+0x11c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01b      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006758:	d017      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a30      	ldr	r2, [pc, #192]	@ (8006820 <TIM_Base_SetConfig+0x120>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2f      	ldr	r2, [pc, #188]	@ (8006824 <TIM_Base_SetConfig+0x124>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2e      	ldr	r2, [pc, #184]	@ (8006828 <TIM_Base_SetConfig+0x128>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2d      	ldr	r2, [pc, #180]	@ (800682c <TIM_Base_SetConfig+0x12c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2c      	ldr	r2, [pc, #176]	@ (8006830 <TIM_Base_SetConfig+0x130>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0x8a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2b      	ldr	r2, [pc, #172]	@ (8006834 <TIM_Base_SetConfig+0x134>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a16      	ldr	r2, [pc, #88]	@ (800681c <TIM_Base_SetConfig+0x11c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00f      	beq.n	80067e8 <TIM_Base_SetConfig+0xe8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a17      	ldr	r2, [pc, #92]	@ (8006828 <TIM_Base_SetConfig+0x128>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00b      	beq.n	80067e8 <TIM_Base_SetConfig+0xe8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a16      	ldr	r2, [pc, #88]	@ (800682c <TIM_Base_SetConfig+0x12c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d007      	beq.n	80067e8 <TIM_Base_SetConfig+0xe8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a15      	ldr	r2, [pc, #84]	@ (8006830 <TIM_Base_SetConfig+0x130>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_Base_SetConfig+0xe8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a14      	ldr	r2, [pc, #80]	@ (8006834 <TIM_Base_SetConfig+0x134>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d103      	bne.n	80067f0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f023 0201 	bic.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	611a      	str	r2, [r3, #16]
  }
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40013400 	.word	0x40013400
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800

08006838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f023 0201 	bic.w	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 0302 	bic.w	r3, r3, #2
 8006884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a2c      	ldr	r2, [pc, #176]	@ (8006944 <TIM_OC1_SetConfig+0x10c>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_OC1_SetConfig+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2b      	ldr	r2, [pc, #172]	@ (8006948 <TIM_OC1_SetConfig+0x110>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_OC1_SetConfig+0x80>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2a      	ldr	r2, [pc, #168]	@ (800694c <TIM_OC1_SetConfig+0x114>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC1_SetConfig+0x80>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a29      	ldr	r2, [pc, #164]	@ (8006950 <TIM_OC1_SetConfig+0x118>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC1_SetConfig+0x80>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a28      	ldr	r2, [pc, #160]	@ (8006954 <TIM_OC1_SetConfig+0x11c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d10c      	bne.n	80068d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0308 	bic.w	r3, r3, #8
 80068be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f023 0304 	bic.w	r3, r3, #4
 80068d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006944 <TIM_OC1_SetConfig+0x10c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00f      	beq.n	80068fa <TIM_OC1_SetConfig+0xc2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006948 <TIM_OC1_SetConfig+0x110>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00b      	beq.n	80068fa <TIM_OC1_SetConfig+0xc2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a19      	ldr	r2, [pc, #100]	@ (800694c <TIM_OC1_SetConfig+0x114>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d007      	beq.n	80068fa <TIM_OC1_SetConfig+0xc2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a18      	ldr	r2, [pc, #96]	@ (8006950 <TIM_OC1_SetConfig+0x118>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d003      	beq.n	80068fa <TIM_OC1_SetConfig+0xc2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a17      	ldr	r2, [pc, #92]	@ (8006954 <TIM_OC1_SetConfig+0x11c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d111      	bne.n	800691e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800

08006958 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f023 0210 	bic.w	r2, r3, #16
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f023 0320 	bic.w	r3, r3, #32
 80069a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a28      	ldr	r2, [pc, #160]	@ (8006a58 <TIM_OC2_SetConfig+0x100>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_OC2_SetConfig+0x6c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a27      	ldr	r2, [pc, #156]	@ (8006a5c <TIM_OC2_SetConfig+0x104>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d10d      	bne.n	80069e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <TIM_OC2_SetConfig+0x100>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00f      	beq.n	8006a08 <TIM_OC2_SetConfig+0xb0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a1c      	ldr	r2, [pc, #112]	@ (8006a5c <TIM_OC2_SetConfig+0x104>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00b      	beq.n	8006a08 <TIM_OC2_SetConfig+0xb0>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <TIM_OC2_SetConfig+0x108>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <TIM_OC2_SetConfig+0xb0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006a64 <TIM_OC2_SetConfig+0x10c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_OC2_SetConfig+0xb0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a19      	ldr	r2, [pc, #100]	@ (8006a68 <TIM_OC2_SetConfig+0x110>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d113      	bne.n	8006a30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40013400 	.word	0x40013400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a27      	ldr	r2, [pc, #156]	@ (8006b68 <TIM_OC3_SetConfig+0xfc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d003      	beq.n	8006ad6 <TIM_OC3_SetConfig+0x6a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a26      	ldr	r2, [pc, #152]	@ (8006b6c <TIM_OC3_SetConfig+0x100>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10d      	bne.n	8006af2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b68 <TIM_OC3_SetConfig+0xfc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00f      	beq.n	8006b1a <TIM_OC3_SetConfig+0xae>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b6c <TIM_OC3_SetConfig+0x100>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_OC3_SetConfig+0xae>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	@ (8006b70 <TIM_OC3_SetConfig+0x104>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <TIM_OC3_SetConfig+0xae>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	@ (8006b74 <TIM_OC3_SetConfig+0x108>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_OC3_SetConfig+0xae>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a18      	ldr	r2, [pc, #96]	@ (8006b78 <TIM_OC3_SetConfig+0x10c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d113      	bne.n	8006b42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	621a      	str	r2, [r3, #32]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40014000 	.word	0x40014000
 8006b74:	40014400 	.word	0x40014400
 8006b78:	40014800 	.word	0x40014800

08006b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	031b      	lsls	r3, r3, #12
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a28      	ldr	r2, [pc, #160]	@ (8006c7c <TIM_OC4_SetConfig+0x100>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC4_SetConfig+0x6c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a27      	ldr	r2, [pc, #156]	@ (8006c80 <TIM_OC4_SetConfig+0x104>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d10d      	bne.n	8006c04 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1d      	ldr	r2, [pc, #116]	@ (8006c7c <TIM_OC4_SetConfig+0x100>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00f      	beq.n	8006c2c <TIM_OC4_SetConfig+0xb0>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006c80 <TIM_OC4_SetConfig+0x104>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00b      	beq.n	8006c2c <TIM_OC4_SetConfig+0xb0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a1b      	ldr	r2, [pc, #108]	@ (8006c84 <TIM_OC4_SetConfig+0x108>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d007      	beq.n	8006c2c <TIM_OC4_SetConfig+0xb0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c88 <TIM_OC4_SetConfig+0x10c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC4_SetConfig+0xb0>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a19      	ldr	r2, [pc, #100]	@ (8006c8c <TIM_OC4_SetConfig+0x110>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d113      	bne.n	8006c54 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	019b      	lsls	r3, r3, #6
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	019b      	lsls	r3, r3, #6
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40013400 	.word	0x40013400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	041b      	lsls	r3, r3, #16
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a17      	ldr	r2, [pc, #92]	@ (8006d44 <TIM_OC5_SetConfig+0xb4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00f      	beq.n	8006d0a <TIM_OC5_SetConfig+0x7a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a16      	ldr	r2, [pc, #88]	@ (8006d48 <TIM_OC5_SetConfig+0xb8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00b      	beq.n	8006d0a <TIM_OC5_SetConfig+0x7a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <TIM_OC5_SetConfig+0xbc>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_OC5_SetConfig+0x7a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a14      	ldr	r2, [pc, #80]	@ (8006d50 <TIM_OC5_SetConfig+0xc0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC5_SetConfig+0x7a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a13      	ldr	r2, [pc, #76]	@ (8006d54 <TIM_OC5_SetConfig+0xc4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d109      	bne.n	8006d1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	621a      	str	r2, [r3, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40012c00 	.word	0x40012c00
 8006d48:	40013400 	.word	0x40013400
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800

08006d58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	051b      	lsls	r3, r3, #20
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a18      	ldr	r2, [pc, #96]	@ (8006e10 <TIM_OC6_SetConfig+0xb8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00f      	beq.n	8006dd4 <TIM_OC6_SetConfig+0x7c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a17      	ldr	r2, [pc, #92]	@ (8006e14 <TIM_OC6_SetConfig+0xbc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00b      	beq.n	8006dd4 <TIM_OC6_SetConfig+0x7c>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a16      	ldr	r2, [pc, #88]	@ (8006e18 <TIM_OC6_SetConfig+0xc0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d007      	beq.n	8006dd4 <TIM_OC6_SetConfig+0x7c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a15      	ldr	r2, [pc, #84]	@ (8006e1c <TIM_OC6_SetConfig+0xc4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC6_SetConfig+0x7c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a14      	ldr	r2, [pc, #80]	@ (8006e20 <TIM_OC6_SetConfig+0xc8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d109      	bne.n	8006de8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	029b      	lsls	r3, r3, #10
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40013400 	.word	0x40013400
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40014400 	.word	0x40014400
 8006e20:	40014800 	.word	0x40014800

08006e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0201 	bic.w	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 030a 	bic.w	r3, r3, #10
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f023 0210 	bic.w	r2, r3, #16
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	031b      	lsls	r3, r3, #12
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f043 0307 	orr.w	r3, r3, #7
 8006f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	021a      	lsls	r2, r3, #8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	609a      	str	r2, [r3, #8]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	2201      	movs	r2, #1
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	401a      	ands	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	fa01 f303 	lsl.w	r3, r1, r3
 8006f94:	431a      	orrs	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e065      	b.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a2b      	ldr	r2, [pc, #172]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d108      	bne.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ffa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800700c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1b      	ldr	r2, [pc, #108]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007036:	d013      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a18      	ldr	r2, [pc, #96]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a12      	ldr	r2, [pc, #72]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a13      	ldr	r2, [pc, #76]	@ (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10c      	bne.n	800707a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007066:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	4313      	orrs	r3, r2
 8007070:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	40012c00 	.word	0x40012c00
 800709c:	40013400 	.word	0x40013400
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40014000 	.word	0x40014000

080070ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e073      	b.n	80071b0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a19      	ldr	r2, [pc, #100]	@ (80071bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a18      	ldr	r2, [pc, #96]	@ (80071c0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d11c      	bne.n	800719e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716e:	051b      	lsls	r3, r3, #20
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400

080071c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e042      	b.n	800725c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7fc f9d1 	bl	8003590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2224      	movs	r2, #36	@ 0x24
 80071f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0201 	bic.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fb82 	bl	8007918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f8b3 	bl	8007380 <UART_SetConfig>
 800721a:	4603      	mov	r3, r0
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e01b      	b.n	800725c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fc01 	bl	8007a5c <UART_CheckIdleState>
 800725a:	4603      	mov	r3, r0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	@ 0x28
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800727a:	2b20      	cmp	r3, #32
 800727c:	d17b      	bne.n	8007376 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_UART_Transmit+0x26>
 8007284:	88fb      	ldrh	r3, [r7, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e074      	b.n	8007378 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2221      	movs	r2, #33	@ 0x21
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800729e:	f7fc fb83 	bl	80039a8 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	88fa      	ldrh	r2, [r7, #6]
 80072a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072bc:	d108      	bne.n	80072d0 <HAL_UART_Transmit+0x6c>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e003      	b.n	80072d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072d8:	e030      	b.n	800733c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	2180      	movs	r1, #128	@ 0x80
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fc63 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e03d      	b.n	8007378 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007310:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	3302      	adds	r3, #2
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	e007      	b.n	800732a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	3301      	adds	r3, #1
 8007328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1c8      	bne.n	80072da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2200      	movs	r2, #0
 8007350:	2140      	movs	r1, #64	@ 0x40
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fc2c 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2220      	movs	r2, #32
 8007362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e006      	b.n	8007378 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3720      	adds	r7, #32
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007384:	b08c      	sub	sp, #48	@ 0x30
 8007386:	af00      	add	r7, sp, #0
 8007388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	431a      	orrs	r2, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	431a      	orrs	r2, r3
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4bab      	ldr	r3, [pc, #684]	@ (800765c <UART_SetConfig+0x2dc>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4aa0      	ldr	r2, [pc, #640]	@ (8007660 <UART_SetConfig+0x2e0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d004      	beq.n	80073ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e8:	4313      	orrs	r3, r2
 80073ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80073f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007400:	430b      	orrs	r3, r1
 8007402:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	f023 010f 	bic.w	r1, r3, #15
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a91      	ldr	r2, [pc, #580]	@ (8007664 <UART_SetConfig+0x2e4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d125      	bne.n	8007470 <UART_SetConfig+0xf0>
 8007424:	4b90      	ldr	r3, [pc, #576]	@ (8007668 <UART_SetConfig+0x2e8>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	2b03      	cmp	r3, #3
 8007430:	d81a      	bhi.n	8007468 <UART_SetConfig+0xe8>
 8007432:	a201      	add	r2, pc, #4	@ (adr r2, 8007438 <UART_SetConfig+0xb8>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007449 	.word	0x08007449
 800743c:	08007459 	.word	0x08007459
 8007440:	08007451 	.word	0x08007451
 8007444:	08007461 	.word	0x08007461
 8007448:	2301      	movs	r3, #1
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800744e:	e0d6      	b.n	80075fe <UART_SetConfig+0x27e>
 8007450:	2302      	movs	r3, #2
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007456:	e0d2      	b.n	80075fe <UART_SetConfig+0x27e>
 8007458:	2304      	movs	r3, #4
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745e:	e0ce      	b.n	80075fe <UART_SetConfig+0x27e>
 8007460:	2308      	movs	r3, #8
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007466:	e0ca      	b.n	80075fe <UART_SetConfig+0x27e>
 8007468:	2310      	movs	r3, #16
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746e:	e0c6      	b.n	80075fe <UART_SetConfig+0x27e>
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a7d      	ldr	r2, [pc, #500]	@ (800766c <UART_SetConfig+0x2ec>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d138      	bne.n	80074ec <UART_SetConfig+0x16c>
 800747a:	4b7b      	ldr	r3, [pc, #492]	@ (8007668 <UART_SetConfig+0x2e8>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007480:	f003 030c 	and.w	r3, r3, #12
 8007484:	2b0c      	cmp	r3, #12
 8007486:	d82d      	bhi.n	80074e4 <UART_SetConfig+0x164>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <UART_SetConfig+0x110>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074c5 	.word	0x080074c5
 8007494:	080074e5 	.word	0x080074e5
 8007498:	080074e5 	.word	0x080074e5
 800749c:	080074e5 	.word	0x080074e5
 80074a0:	080074d5 	.word	0x080074d5
 80074a4:	080074e5 	.word	0x080074e5
 80074a8:	080074e5 	.word	0x080074e5
 80074ac:	080074e5 	.word	0x080074e5
 80074b0:	080074cd 	.word	0x080074cd
 80074b4:	080074e5 	.word	0x080074e5
 80074b8:	080074e5 	.word	0x080074e5
 80074bc:	080074e5 	.word	0x080074e5
 80074c0:	080074dd 	.word	0x080074dd
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e098      	b.n	80075fe <UART_SetConfig+0x27e>
 80074cc:	2302      	movs	r3, #2
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e094      	b.n	80075fe <UART_SetConfig+0x27e>
 80074d4:	2304      	movs	r3, #4
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e090      	b.n	80075fe <UART_SetConfig+0x27e>
 80074dc:	2308      	movs	r3, #8
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e2:	e08c      	b.n	80075fe <UART_SetConfig+0x27e>
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ea:	e088      	b.n	80075fe <UART_SetConfig+0x27e>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a5f      	ldr	r2, [pc, #380]	@ (8007670 <UART_SetConfig+0x2f0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d125      	bne.n	8007542 <UART_SetConfig+0x1c2>
 80074f6:	4b5c      	ldr	r3, [pc, #368]	@ (8007668 <UART_SetConfig+0x2e8>)
 80074f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007500:	2b30      	cmp	r3, #48	@ 0x30
 8007502:	d016      	beq.n	8007532 <UART_SetConfig+0x1b2>
 8007504:	2b30      	cmp	r3, #48	@ 0x30
 8007506:	d818      	bhi.n	800753a <UART_SetConfig+0x1ba>
 8007508:	2b20      	cmp	r3, #32
 800750a:	d00a      	beq.n	8007522 <UART_SetConfig+0x1a2>
 800750c:	2b20      	cmp	r3, #32
 800750e:	d814      	bhi.n	800753a <UART_SetConfig+0x1ba>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <UART_SetConfig+0x19a>
 8007514:	2b10      	cmp	r3, #16
 8007516:	d008      	beq.n	800752a <UART_SetConfig+0x1aa>
 8007518:	e00f      	b.n	800753a <UART_SetConfig+0x1ba>
 800751a:	2300      	movs	r3, #0
 800751c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007520:	e06d      	b.n	80075fe <UART_SetConfig+0x27e>
 8007522:	2302      	movs	r3, #2
 8007524:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007528:	e069      	b.n	80075fe <UART_SetConfig+0x27e>
 800752a:	2304      	movs	r3, #4
 800752c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007530:	e065      	b.n	80075fe <UART_SetConfig+0x27e>
 8007532:	2308      	movs	r3, #8
 8007534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007538:	e061      	b.n	80075fe <UART_SetConfig+0x27e>
 800753a:	2310      	movs	r3, #16
 800753c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007540:	e05d      	b.n	80075fe <UART_SetConfig+0x27e>
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a4b      	ldr	r2, [pc, #300]	@ (8007674 <UART_SetConfig+0x2f4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d125      	bne.n	8007598 <UART_SetConfig+0x218>
 800754c:	4b46      	ldr	r3, [pc, #280]	@ (8007668 <UART_SetConfig+0x2e8>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007552:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007556:	2bc0      	cmp	r3, #192	@ 0xc0
 8007558:	d016      	beq.n	8007588 <UART_SetConfig+0x208>
 800755a:	2bc0      	cmp	r3, #192	@ 0xc0
 800755c:	d818      	bhi.n	8007590 <UART_SetConfig+0x210>
 800755e:	2b80      	cmp	r3, #128	@ 0x80
 8007560:	d00a      	beq.n	8007578 <UART_SetConfig+0x1f8>
 8007562:	2b80      	cmp	r3, #128	@ 0x80
 8007564:	d814      	bhi.n	8007590 <UART_SetConfig+0x210>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <UART_SetConfig+0x1f0>
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d008      	beq.n	8007580 <UART_SetConfig+0x200>
 800756e:	e00f      	b.n	8007590 <UART_SetConfig+0x210>
 8007570:	2300      	movs	r3, #0
 8007572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007576:	e042      	b.n	80075fe <UART_SetConfig+0x27e>
 8007578:	2302      	movs	r3, #2
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757e:	e03e      	b.n	80075fe <UART_SetConfig+0x27e>
 8007580:	2304      	movs	r3, #4
 8007582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007586:	e03a      	b.n	80075fe <UART_SetConfig+0x27e>
 8007588:	2308      	movs	r3, #8
 800758a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758e:	e036      	b.n	80075fe <UART_SetConfig+0x27e>
 8007590:	2310      	movs	r3, #16
 8007592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007596:	e032      	b.n	80075fe <UART_SetConfig+0x27e>
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a30      	ldr	r2, [pc, #192]	@ (8007660 <UART_SetConfig+0x2e0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d12a      	bne.n	80075f8 <UART_SetConfig+0x278>
 80075a2:	4b31      	ldr	r3, [pc, #196]	@ (8007668 <UART_SetConfig+0x2e8>)
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075b0:	d01a      	beq.n	80075e8 <UART_SetConfig+0x268>
 80075b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075b6:	d81b      	bhi.n	80075f0 <UART_SetConfig+0x270>
 80075b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075bc:	d00c      	beq.n	80075d8 <UART_SetConfig+0x258>
 80075be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c2:	d815      	bhi.n	80075f0 <UART_SetConfig+0x270>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <UART_SetConfig+0x250>
 80075c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075cc:	d008      	beq.n	80075e0 <UART_SetConfig+0x260>
 80075ce:	e00f      	b.n	80075f0 <UART_SetConfig+0x270>
 80075d0:	2300      	movs	r3, #0
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d6:	e012      	b.n	80075fe <UART_SetConfig+0x27e>
 80075d8:	2302      	movs	r3, #2
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075de:	e00e      	b.n	80075fe <UART_SetConfig+0x27e>
 80075e0:	2304      	movs	r3, #4
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e6:	e00a      	b.n	80075fe <UART_SetConfig+0x27e>
 80075e8:	2308      	movs	r3, #8
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ee:	e006      	b.n	80075fe <UART_SetConfig+0x27e>
 80075f0:	2310      	movs	r3, #16
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075f6:	e002      	b.n	80075fe <UART_SetConfig+0x27e>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a17      	ldr	r2, [pc, #92]	@ (8007660 <UART_SetConfig+0x2e0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	f040 80a8 	bne.w	800775a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800760a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800760e:	2b08      	cmp	r3, #8
 8007610:	d834      	bhi.n	800767c <UART_SetConfig+0x2fc>
 8007612:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <UART_SetConfig+0x298>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	0800763d 	.word	0x0800763d
 800761c:	0800767d 	.word	0x0800767d
 8007620:	08007645 	.word	0x08007645
 8007624:	0800767d 	.word	0x0800767d
 8007628:	0800764b 	.word	0x0800764b
 800762c:	0800767d 	.word	0x0800767d
 8007630:	0800767d 	.word	0x0800767d
 8007634:	0800767d 	.word	0x0800767d
 8007638:	08007653 	.word	0x08007653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800763c:	f7fd f9d0 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8007640:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007642:	e021      	b.n	8007688 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007644:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <UART_SetConfig+0x2f8>)
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007648:	e01e      	b.n	8007688 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764a:	f7fd f95b 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 800764e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007650:	e01a      	b.n	8007688 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007658:	e016      	b.n	8007688 <UART_SetConfig+0x308>
 800765a:	bf00      	nop
 800765c:	cfff69f3 	.word	0xcfff69f3
 8007660:	40008000 	.word	0x40008000
 8007664:	40013800 	.word	0x40013800
 8007668:	40021000 	.word	0x40021000
 800766c:	40004400 	.word	0x40004400
 8007670:	40004800 	.word	0x40004800
 8007674:	40004c00 	.word	0x40004c00
 8007678:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007686:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 812a 	beq.w	80078e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007694:	4a9e      	ldr	r2, [pc, #632]	@ (8007910 <UART_SetConfig+0x590>)
 8007696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800769a:	461a      	mov	r2, r3
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	4413      	add	r3, r2
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d305      	bcc.n	80076c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d903      	bls.n	80076c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076c6:	e10d      	b.n	80078e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	2200      	movs	r2, #0
 80076cc:	60bb      	str	r3, [r7, #8]
 80076ce:	60fa      	str	r2, [r7, #12]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d4:	4a8e      	ldr	r2, [pc, #568]	@ (8007910 <UART_SetConfig+0x590>)
 80076d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2200      	movs	r2, #0
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076ea:	f7f9 faf5 	bl	8000cd8 <__aeabi_uldivmod>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4610      	mov	r0, r2
 80076f4:	4619      	mov	r1, r3
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	020b      	lsls	r3, r1, #8
 8007700:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007704:	0202      	lsls	r2, r0, #8
 8007706:	6979      	ldr	r1, [r7, #20]
 8007708:	6849      	ldr	r1, [r1, #4]
 800770a:	0849      	lsrs	r1, r1, #1
 800770c:	2000      	movs	r0, #0
 800770e:	460c      	mov	r4, r1
 8007710:	4605      	mov	r5, r0
 8007712:	eb12 0804 	adds.w	r8, r2, r4
 8007716:	eb43 0905 	adc.w	r9, r3, r5
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	469a      	mov	sl, r3
 8007722:	4693      	mov	fp, r2
 8007724:	4652      	mov	r2, sl
 8007726:	465b      	mov	r3, fp
 8007728:	4640      	mov	r0, r8
 800772a:	4649      	mov	r1, r9
 800772c:	f7f9 fad4 	bl	8000cd8 <__aeabi_uldivmod>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4613      	mov	r3, r2
 8007736:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800773e:	d308      	bcc.n	8007752 <UART_SetConfig+0x3d2>
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007746:	d204      	bcs.n	8007752 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a3a      	ldr	r2, [r7, #32]
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	e0c8      	b.n	80078e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007758:	e0c4      	b.n	80078e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007762:	d167      	bne.n	8007834 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007764:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007768:	2b08      	cmp	r3, #8
 800776a:	d828      	bhi.n	80077be <UART_SetConfig+0x43e>
 800776c:	a201      	add	r2, pc, #4	@ (adr r2, 8007774 <UART_SetConfig+0x3f4>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	08007799 	.word	0x08007799
 8007778:	080077a1 	.word	0x080077a1
 800777c:	080077a9 	.word	0x080077a9
 8007780:	080077bf 	.word	0x080077bf
 8007784:	080077af 	.word	0x080077af
 8007788:	080077bf 	.word	0x080077bf
 800778c:	080077bf 	.word	0x080077bf
 8007790:	080077bf 	.word	0x080077bf
 8007794:	080077b7 	.word	0x080077b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007798:	f7fd f922 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 800779c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800779e:	e014      	b.n	80077ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a0:	f7fd f934 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 80077a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077a6:	e010      	b.n	80077ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007914 <UART_SetConfig+0x594>)
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077ac:	e00d      	b.n	80077ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ae:	f7fd f8a9 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80077b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077b4:	e009      	b.n	80077ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077bc:	e005      	b.n	80077ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8089 	beq.w	80078e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007910 <UART_SetConfig+0x590>)
 80077d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077dc:	461a      	mov	r2, r3
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80077e4:	005a      	lsls	r2, r3, #1
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	441a      	add	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	2b0f      	cmp	r3, #15
 80077fc:	d916      	bls.n	800782c <UART_SetConfig+0x4ac>
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007804:	d212      	bcs.n	800782c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f023 030f 	bic.w	r3, r3, #15
 800780e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	085b      	lsrs	r3, r3, #1
 8007814:	b29b      	uxth	r3, r3
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	b29a      	uxth	r2, r3
 800781c:	8bfb      	ldrh	r3, [r7, #30]
 800781e:	4313      	orrs	r3, r2
 8007820:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	8bfa      	ldrh	r2, [r7, #30]
 8007828:	60da      	str	r2, [r3, #12]
 800782a:	e05b      	b.n	80078e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007832:	e057      	b.n	80078e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007834:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007838:	2b08      	cmp	r3, #8
 800783a:	d828      	bhi.n	800788e <UART_SetConfig+0x50e>
 800783c:	a201      	add	r2, pc, #4	@ (adr r2, 8007844 <UART_SetConfig+0x4c4>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007869 	.word	0x08007869
 8007848:	08007871 	.word	0x08007871
 800784c:	08007879 	.word	0x08007879
 8007850:	0800788f 	.word	0x0800788f
 8007854:	0800787f 	.word	0x0800787f
 8007858:	0800788f 	.word	0x0800788f
 800785c:	0800788f 	.word	0x0800788f
 8007860:	0800788f 	.word	0x0800788f
 8007864:	08007887 	.word	0x08007887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007868:	f7fd f8ba 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 800786c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800786e:	e014      	b.n	800789a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007870:	f7fd f8cc 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 8007874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007876:	e010      	b.n	800789a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007878:	4b26      	ldr	r3, [pc, #152]	@ (8007914 <UART_SetConfig+0x594>)
 800787a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800787c:	e00d      	b.n	800789a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800787e:	f7fd f841 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8007882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007884:	e009      	b.n	800789a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800788a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800788c:	e005      	b.n	800789a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007898:	bf00      	nop
    }

    if (pclk != 0U)
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d021      	beq.n	80078e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007910 <UART_SetConfig+0x590>)
 80078a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	085b      	lsrs	r3, r3, #1
 80078b8:	441a      	add	r2, r3
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	2b0f      	cmp	r3, #15
 80078c8:	d909      	bls.n	80078de <UART_SetConfig+0x55e>
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d0:	d205      	bcs.n	80078de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60da      	str	r2, [r3, #12]
 80078dc:	e002      	b.n	80078e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2200      	movs	r2, #0
 80078f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2200      	movs	r2, #0
 80078fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007900:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007904:	4618      	mov	r0, r3
 8007906:	3730      	adds	r7, #48	@ 0x30
 8007908:	46bd      	mov	sp, r7
 800790a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800790e:	bf00      	nop
 8007910:	0800d864 	.word	0x0800d864
 8007914:	00f42400 	.word	0x00f42400

08007918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00a      	beq.n	8007942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01a      	beq.n	8007a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a16:	d10a      	bne.n	8007a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  }
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b098      	sub	sp, #96	@ 0x60
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a6c:	f7fb ff9c 	bl	80039a8 <HAL_GetTick>
 8007a70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d12f      	bne.n	8007ae0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f88e 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d022      	beq.n	8007ae0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e063      	b.n	8007ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d149      	bne.n	8007b82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af6:	2200      	movs	r2, #0
 8007af8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f857 	bl	8007bb0 <UART_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d03c      	beq.n	8007b82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	623b      	str	r3, [r7, #32]
   return(result);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e6      	bne.n	8007b08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3308      	adds	r3, #8
 8007b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b5a:	61fa      	str	r2, [r7, #28]
 8007b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	69b9      	ldr	r1, [r7, #24]
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	617b      	str	r3, [r7, #20]
   return(result);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e012      	b.n	8007ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3758      	adds	r7, #88	@ 0x58
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc0:	e04f      	b.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bc8:	d04b      	beq.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bca:	f7fb feed 	bl	80039a8 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d302      	bcc.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e04e      	b.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d037      	beq.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b80      	cmp	r3, #128	@ 0x80
 8007bf6:	d034      	beq.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b40      	cmp	r3, #64	@ 0x40
 8007bfc:	d031      	beq.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69db      	ldr	r3, [r3, #28]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d110      	bne.n	8007c2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2208      	movs	r2, #8
 8007c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f838 	bl	8007c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e029      	b.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c3c:	d111      	bne.n	8007c62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f81e 	bl	8007c8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e00f      	b.n	8007c82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	bf0c      	ite	eq
 8007c72:	2301      	moveq	r3, #1
 8007c74:	2300      	movne	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d0a0      	beq.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b095      	sub	sp, #84	@ 0x54
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cda:	f023 0301 	bic.w	r3, r3, #1
 8007cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e3      	bne.n	8007cc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d118      	bne.n	8007d36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f023 0310 	bic.w	r3, r3, #16
 8007d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6979      	ldr	r1, [r7, #20]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d4a:	bf00      	nop
 8007d4c:	3754      	adds	r7, #84	@ 0x54
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_UARTEx_DisableFifoMode+0x16>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e027      	b.n	8007dbc <HAL_UARTEx_DisableFifoMode+0x66>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2224      	movs	r2, #36	@ 0x24
 8007d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0201 	bic.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e02d      	b.n	8007e3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2224      	movs	r2, #36	@ 0x24
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0201 	bic.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f84f 	bl	8007ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e02d      	b.n	8007eb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2224      	movs	r2, #36	@ 0x24
 8007e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0201 	bic.w	r2, r2, #1
 8007e82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f811 	bl	8007ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d108      	bne.n	8007ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ee0:	e031      	b.n	8007f46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	0e5b      	lsrs	r3, r3, #25
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	0f5b      	lsrs	r3, r3, #29
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	7b3a      	ldrb	r2, [r7, #12]
 8007f0e:	4911      	ldr	r1, [pc, #68]	@ (8007f54 <UARTEx_SetNbDataToProcess+0x94>)
 8007f10:	5c8a      	ldrb	r2, [r1, r2]
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f16:	7b3a      	ldrb	r2, [r7, #12]
 8007f18:	490f      	ldr	r1, [pc, #60]	@ (8007f58 <UARTEx_SetNbDataToProcess+0x98>)
 8007f1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	7b7a      	ldrb	r2, [r7, #13]
 8007f2c:	4909      	ldr	r1, [pc, #36]	@ (8007f54 <UARTEx_SetNbDataToProcess+0x94>)
 8007f2e:	5c8a      	ldrb	r2, [r1, r2]
 8007f30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f34:	7b7a      	ldrb	r2, [r7, #13]
 8007f36:	4908      	ldr	r1, [pc, #32]	@ (8007f58 <UARTEx_SetNbDataToProcess+0x98>)
 8007f38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	0800d87c 	.word	0x0800d87c
 8007f58:	0800d884 	.word	0x0800d884

08007f5c <__cvt>:
 8007f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	ec57 6b10 	vmov	r6, r7, d0
 8007f64:	2f00      	cmp	r7, #0
 8007f66:	460c      	mov	r4, r1
 8007f68:	4619      	mov	r1, r3
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	bfbb      	ittet	lt
 8007f6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f72:	461f      	movlt	r7, r3
 8007f74:	2300      	movge	r3, #0
 8007f76:	232d      	movlt	r3, #45	@ 0x2d
 8007f78:	700b      	strb	r3, [r1, #0]
 8007f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f80:	4691      	mov	r9, r2
 8007f82:	f023 0820 	bic.w	r8, r3, #32
 8007f86:	bfbc      	itt	lt
 8007f88:	4632      	movlt	r2, r6
 8007f8a:	4616      	movlt	r6, r2
 8007f8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f90:	d005      	beq.n	8007f9e <__cvt+0x42>
 8007f92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f96:	d100      	bne.n	8007f9a <__cvt+0x3e>
 8007f98:	3401      	adds	r4, #1
 8007f9a:	2102      	movs	r1, #2
 8007f9c:	e000      	b.n	8007fa0 <__cvt+0x44>
 8007f9e:	2103      	movs	r1, #3
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	ab02      	add	r3, sp, #8
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	ec47 6b10 	vmov	d0, r6, r7
 8007fac:	4653      	mov	r3, sl
 8007fae:	4622      	mov	r2, r4
 8007fb0:	f001 f8b2 	bl	8009118 <_dtoa_r>
 8007fb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007fb8:	4605      	mov	r5, r0
 8007fba:	d119      	bne.n	8007ff0 <__cvt+0x94>
 8007fbc:	f019 0f01 	tst.w	r9, #1
 8007fc0:	d00e      	beq.n	8007fe0 <__cvt+0x84>
 8007fc2:	eb00 0904 	add.w	r9, r0, r4
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f8 fda3 	bl	8000b18 <__aeabi_dcmpeq>
 8007fd2:	b108      	cbz	r0, 8007fd8 <__cvt+0x7c>
 8007fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fd8:	2230      	movs	r2, #48	@ 0x30
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	454b      	cmp	r3, r9
 8007fde:	d31e      	bcc.n	800801e <__cvt+0xc2>
 8007fe0:	9b03      	ldr	r3, [sp, #12]
 8007fe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fe4:	1b5b      	subs	r3, r3, r5
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	b004      	add	sp, #16
 8007fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007ff4:	eb00 0904 	add.w	r9, r0, r4
 8007ff8:	d1e5      	bne.n	8007fc6 <__cvt+0x6a>
 8007ffa:	7803      	ldrb	r3, [r0, #0]
 8007ffc:	2b30      	cmp	r3, #48	@ 0x30
 8007ffe:	d10a      	bne.n	8008016 <__cvt+0xba>
 8008000:	2200      	movs	r2, #0
 8008002:	2300      	movs	r3, #0
 8008004:	4630      	mov	r0, r6
 8008006:	4639      	mov	r1, r7
 8008008:	f7f8 fd86 	bl	8000b18 <__aeabi_dcmpeq>
 800800c:	b918      	cbnz	r0, 8008016 <__cvt+0xba>
 800800e:	f1c4 0401 	rsb	r4, r4, #1
 8008012:	f8ca 4000 	str.w	r4, [sl]
 8008016:	f8da 3000 	ldr.w	r3, [sl]
 800801a:	4499      	add	r9, r3
 800801c:	e7d3      	b.n	8007fc6 <__cvt+0x6a>
 800801e:	1c59      	adds	r1, r3, #1
 8008020:	9103      	str	r1, [sp, #12]
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	e7d9      	b.n	8007fda <__cvt+0x7e>

08008026 <__exponent>:
 8008026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008028:	2900      	cmp	r1, #0
 800802a:	bfba      	itte	lt
 800802c:	4249      	neglt	r1, r1
 800802e:	232d      	movlt	r3, #45	@ 0x2d
 8008030:	232b      	movge	r3, #43	@ 0x2b
 8008032:	2909      	cmp	r1, #9
 8008034:	7002      	strb	r2, [r0, #0]
 8008036:	7043      	strb	r3, [r0, #1]
 8008038:	dd29      	ble.n	800808e <__exponent+0x68>
 800803a:	f10d 0307 	add.w	r3, sp, #7
 800803e:	461d      	mov	r5, r3
 8008040:	270a      	movs	r7, #10
 8008042:	461a      	mov	r2, r3
 8008044:	fbb1 f6f7 	udiv	r6, r1, r7
 8008048:	fb07 1416 	mls	r4, r7, r6, r1
 800804c:	3430      	adds	r4, #48	@ 0x30
 800804e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008052:	460c      	mov	r4, r1
 8008054:	2c63      	cmp	r4, #99	@ 0x63
 8008056:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800805a:	4631      	mov	r1, r6
 800805c:	dcf1      	bgt.n	8008042 <__exponent+0x1c>
 800805e:	3130      	adds	r1, #48	@ 0x30
 8008060:	1e94      	subs	r4, r2, #2
 8008062:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008066:	1c41      	adds	r1, r0, #1
 8008068:	4623      	mov	r3, r4
 800806a:	42ab      	cmp	r3, r5
 800806c:	d30a      	bcc.n	8008084 <__exponent+0x5e>
 800806e:	f10d 0309 	add.w	r3, sp, #9
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	42ac      	cmp	r4, r5
 8008076:	bf88      	it	hi
 8008078:	2300      	movhi	r3, #0
 800807a:	3302      	adds	r3, #2
 800807c:	4403      	add	r3, r0
 800807e:	1a18      	subs	r0, r3, r0
 8008080:	b003      	add	sp, #12
 8008082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008084:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008088:	f801 6f01 	strb.w	r6, [r1, #1]!
 800808c:	e7ed      	b.n	800806a <__exponent+0x44>
 800808e:	2330      	movs	r3, #48	@ 0x30
 8008090:	3130      	adds	r1, #48	@ 0x30
 8008092:	7083      	strb	r3, [r0, #2]
 8008094:	70c1      	strb	r1, [r0, #3]
 8008096:	1d03      	adds	r3, r0, #4
 8008098:	e7f1      	b.n	800807e <__exponent+0x58>
	...

0800809c <_printf_float>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	b08d      	sub	sp, #52	@ 0x34
 80080a2:	460c      	mov	r4, r1
 80080a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80080a8:	4616      	mov	r6, r2
 80080aa:	461f      	mov	r7, r3
 80080ac:	4605      	mov	r5, r0
 80080ae:	f000 ff1f 	bl	8008ef0 <_localeconv_r>
 80080b2:	6803      	ldr	r3, [r0, #0]
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f8 f902 	bl	80002c0 <strlen>
 80080bc:	2300      	movs	r3, #0
 80080be:	930a      	str	r3, [sp, #40]	@ 0x28
 80080c0:	f8d8 3000 	ldr.w	r3, [r8]
 80080c4:	9005      	str	r0, [sp, #20]
 80080c6:	3307      	adds	r3, #7
 80080c8:	f023 0307 	bic.w	r3, r3, #7
 80080cc:	f103 0208 	add.w	r2, r3, #8
 80080d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080d4:	f8d4 b000 	ldr.w	fp, [r4]
 80080d8:	f8c8 2000 	str.w	r2, [r8]
 80080dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080e4:	9307      	str	r3, [sp, #28]
 80080e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80080ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80080ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080f2:	4b9c      	ldr	r3, [pc, #624]	@ (8008364 <_printf_float+0x2c8>)
 80080f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080f8:	f7f8 fd40 	bl	8000b7c <__aeabi_dcmpun>
 80080fc:	bb70      	cbnz	r0, 800815c <_printf_float+0xc0>
 80080fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008102:	4b98      	ldr	r3, [pc, #608]	@ (8008364 <_printf_float+0x2c8>)
 8008104:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008108:	f7f8 fd1a 	bl	8000b40 <__aeabi_dcmple>
 800810c:	bb30      	cbnz	r0, 800815c <_printf_float+0xc0>
 800810e:	2200      	movs	r2, #0
 8008110:	2300      	movs	r3, #0
 8008112:	4640      	mov	r0, r8
 8008114:	4649      	mov	r1, r9
 8008116:	f7f8 fd09 	bl	8000b2c <__aeabi_dcmplt>
 800811a:	b110      	cbz	r0, 8008122 <_printf_float+0x86>
 800811c:	232d      	movs	r3, #45	@ 0x2d
 800811e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008122:	4a91      	ldr	r2, [pc, #580]	@ (8008368 <_printf_float+0x2cc>)
 8008124:	4b91      	ldr	r3, [pc, #580]	@ (800836c <_printf_float+0x2d0>)
 8008126:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800812a:	bf8c      	ite	hi
 800812c:	4690      	movhi	r8, r2
 800812e:	4698      	movls	r8, r3
 8008130:	2303      	movs	r3, #3
 8008132:	6123      	str	r3, [r4, #16]
 8008134:	f02b 0304 	bic.w	r3, fp, #4
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	f04f 0900 	mov.w	r9, #0
 800813e:	9700      	str	r7, [sp, #0]
 8008140:	4633      	mov	r3, r6
 8008142:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008144:	4621      	mov	r1, r4
 8008146:	4628      	mov	r0, r5
 8008148:	f000 f9d2 	bl	80084f0 <_printf_common>
 800814c:	3001      	adds	r0, #1
 800814e:	f040 808d 	bne.w	800826c <_printf_float+0x1d0>
 8008152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008156:	b00d      	add	sp, #52	@ 0x34
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	4642      	mov	r2, r8
 800815e:	464b      	mov	r3, r9
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	f7f8 fd0a 	bl	8000b7c <__aeabi_dcmpun>
 8008168:	b140      	cbz	r0, 800817c <_printf_float+0xe0>
 800816a:	464b      	mov	r3, r9
 800816c:	2b00      	cmp	r3, #0
 800816e:	bfbc      	itt	lt
 8008170:	232d      	movlt	r3, #45	@ 0x2d
 8008172:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008176:	4a7e      	ldr	r2, [pc, #504]	@ (8008370 <_printf_float+0x2d4>)
 8008178:	4b7e      	ldr	r3, [pc, #504]	@ (8008374 <_printf_float+0x2d8>)
 800817a:	e7d4      	b.n	8008126 <_printf_float+0x8a>
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008182:	9206      	str	r2, [sp, #24]
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	d13b      	bne.n	8008200 <_printf_float+0x164>
 8008188:	2306      	movs	r3, #6
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008190:	2300      	movs	r3, #0
 8008192:	6022      	str	r2, [r4, #0]
 8008194:	9303      	str	r3, [sp, #12]
 8008196:	ab0a      	add	r3, sp, #40	@ 0x28
 8008198:	e9cd a301 	strd	sl, r3, [sp, #4]
 800819c:	ab09      	add	r3, sp, #36	@ 0x24
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	6861      	ldr	r1, [r4, #4]
 80081a2:	ec49 8b10 	vmov	d0, r8, r9
 80081a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff fed6 	bl	8007f5c <__cvt>
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081b4:	2b47      	cmp	r3, #71	@ 0x47
 80081b6:	4680      	mov	r8, r0
 80081b8:	d129      	bne.n	800820e <_printf_float+0x172>
 80081ba:	1cc8      	adds	r0, r1, #3
 80081bc:	db02      	blt.n	80081c4 <_printf_float+0x128>
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	4299      	cmp	r1, r3
 80081c2:	dd41      	ble.n	8008248 <_printf_float+0x1ac>
 80081c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80081c8:	fa5f fa8a 	uxtb.w	sl, sl
 80081cc:	3901      	subs	r1, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80081d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80081d6:	f7ff ff26 	bl	8008026 <__exponent>
 80081da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081dc:	1813      	adds	r3, r2, r0
 80081de:	2a01      	cmp	r2, #1
 80081e0:	4681      	mov	r9, r0
 80081e2:	6123      	str	r3, [r4, #16]
 80081e4:	dc02      	bgt.n	80081ec <_printf_float+0x150>
 80081e6:	6822      	ldr	r2, [r4, #0]
 80081e8:	07d2      	lsls	r2, r2, #31
 80081ea:	d501      	bpl.n	80081f0 <_printf_float+0x154>
 80081ec:	3301      	adds	r3, #1
 80081ee:	6123      	str	r3, [r4, #16]
 80081f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0a2      	beq.n	800813e <_printf_float+0xa2>
 80081f8:	232d      	movs	r3, #45	@ 0x2d
 80081fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081fe:	e79e      	b.n	800813e <_printf_float+0xa2>
 8008200:	9a06      	ldr	r2, [sp, #24]
 8008202:	2a47      	cmp	r2, #71	@ 0x47
 8008204:	d1c2      	bne.n	800818c <_printf_float+0xf0>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1c0      	bne.n	800818c <_printf_float+0xf0>
 800820a:	2301      	movs	r3, #1
 800820c:	e7bd      	b.n	800818a <_printf_float+0xee>
 800820e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008212:	d9db      	bls.n	80081cc <_printf_float+0x130>
 8008214:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008218:	d118      	bne.n	800824c <_printf_float+0x1b0>
 800821a:	2900      	cmp	r1, #0
 800821c:	6863      	ldr	r3, [r4, #4]
 800821e:	dd0b      	ble.n	8008238 <_printf_float+0x19c>
 8008220:	6121      	str	r1, [r4, #16]
 8008222:	b913      	cbnz	r3, 800822a <_printf_float+0x18e>
 8008224:	6822      	ldr	r2, [r4, #0]
 8008226:	07d0      	lsls	r0, r2, #31
 8008228:	d502      	bpl.n	8008230 <_printf_float+0x194>
 800822a:	3301      	adds	r3, #1
 800822c:	440b      	add	r3, r1
 800822e:	6123      	str	r3, [r4, #16]
 8008230:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008232:	f04f 0900 	mov.w	r9, #0
 8008236:	e7db      	b.n	80081f0 <_printf_float+0x154>
 8008238:	b913      	cbnz	r3, 8008240 <_printf_float+0x1a4>
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	07d2      	lsls	r2, r2, #31
 800823e:	d501      	bpl.n	8008244 <_printf_float+0x1a8>
 8008240:	3302      	adds	r3, #2
 8008242:	e7f4      	b.n	800822e <_printf_float+0x192>
 8008244:	2301      	movs	r3, #1
 8008246:	e7f2      	b.n	800822e <_printf_float+0x192>
 8008248:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800824c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800824e:	4299      	cmp	r1, r3
 8008250:	db05      	blt.n	800825e <_printf_float+0x1c2>
 8008252:	6823      	ldr	r3, [r4, #0]
 8008254:	6121      	str	r1, [r4, #16]
 8008256:	07d8      	lsls	r0, r3, #31
 8008258:	d5ea      	bpl.n	8008230 <_printf_float+0x194>
 800825a:	1c4b      	adds	r3, r1, #1
 800825c:	e7e7      	b.n	800822e <_printf_float+0x192>
 800825e:	2900      	cmp	r1, #0
 8008260:	bfd4      	ite	le
 8008262:	f1c1 0202 	rsble	r2, r1, #2
 8008266:	2201      	movgt	r2, #1
 8008268:	4413      	add	r3, r2
 800826a:	e7e0      	b.n	800822e <_printf_float+0x192>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	055a      	lsls	r2, r3, #21
 8008270:	d407      	bmi.n	8008282 <_printf_float+0x1e6>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	4642      	mov	r2, r8
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	d12b      	bne.n	80082d8 <_printf_float+0x23c>
 8008280:	e767      	b.n	8008152 <_printf_float+0xb6>
 8008282:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008286:	f240 80dd 	bls.w	8008444 <_printf_float+0x3a8>
 800828a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	f7f8 fc41 	bl	8000b18 <__aeabi_dcmpeq>
 8008296:	2800      	cmp	r0, #0
 8008298:	d033      	beq.n	8008302 <_printf_float+0x266>
 800829a:	4a37      	ldr	r2, [pc, #220]	@ (8008378 <_printf_float+0x2dc>)
 800829c:	2301      	movs	r3, #1
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	f43f af54 	beq.w	8008152 <_printf_float+0xb6>
 80082aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80082ae:	4543      	cmp	r3, r8
 80082b0:	db02      	blt.n	80082b8 <_printf_float+0x21c>
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	07d8      	lsls	r0, r3, #31
 80082b6:	d50f      	bpl.n	80082d8 <_printf_float+0x23c>
 80082b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	f43f af45 	beq.w	8008152 <_printf_float+0xb6>
 80082c8:	f04f 0900 	mov.w	r9, #0
 80082cc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80082d0:	f104 0a1a 	add.w	sl, r4, #26
 80082d4:	45c8      	cmp	r8, r9
 80082d6:	dc09      	bgt.n	80082ec <_printf_float+0x250>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	f100 8103 	bmi.w	80084e6 <_printf_float+0x44a>
 80082e0:	68e0      	ldr	r0, [r4, #12]
 80082e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082e4:	4298      	cmp	r0, r3
 80082e6:	bfb8      	it	lt
 80082e8:	4618      	movlt	r0, r3
 80082ea:	e734      	b.n	8008156 <_printf_float+0xba>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4652      	mov	r2, sl
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f af2b 	beq.w	8008152 <_printf_float+0xb6>
 80082fc:	f109 0901 	add.w	r9, r9, #1
 8008300:	e7e8      	b.n	80082d4 <_printf_float+0x238>
 8008302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc39      	bgt.n	800837c <_printf_float+0x2e0>
 8008308:	4a1b      	ldr	r2, [pc, #108]	@ (8008378 <_printf_float+0x2dc>)
 800830a:	2301      	movs	r3, #1
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af1d 	beq.w	8008152 <_printf_float+0xb6>
 8008318:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800831c:	ea59 0303 	orrs.w	r3, r9, r3
 8008320:	d102      	bne.n	8008328 <_printf_float+0x28c>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	07d9      	lsls	r1, r3, #31
 8008326:	d5d7      	bpl.n	80082d8 <_printf_float+0x23c>
 8008328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f af0d 	beq.w	8008152 <_printf_float+0xb6>
 8008338:	f04f 0a00 	mov.w	sl, #0
 800833c:	f104 0b1a 	add.w	fp, r4, #26
 8008340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008342:	425b      	negs	r3, r3
 8008344:	4553      	cmp	r3, sl
 8008346:	dc01      	bgt.n	800834c <_printf_float+0x2b0>
 8008348:	464b      	mov	r3, r9
 800834a:	e793      	b.n	8008274 <_printf_float+0x1d8>
 800834c:	2301      	movs	r3, #1
 800834e:	465a      	mov	r2, fp
 8008350:	4631      	mov	r1, r6
 8008352:	4628      	mov	r0, r5
 8008354:	47b8      	blx	r7
 8008356:	3001      	adds	r0, #1
 8008358:	f43f aefb 	beq.w	8008152 <_printf_float+0xb6>
 800835c:	f10a 0a01 	add.w	sl, sl, #1
 8008360:	e7ee      	b.n	8008340 <_printf_float+0x2a4>
 8008362:	bf00      	nop
 8008364:	7fefffff 	.word	0x7fefffff
 8008368:	0800d890 	.word	0x0800d890
 800836c:	0800d88c 	.word	0x0800d88c
 8008370:	0800d898 	.word	0x0800d898
 8008374:	0800d894 	.word	0x0800d894
 8008378:	0800d89c 	.word	0x0800d89c
 800837c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800837e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008382:	4553      	cmp	r3, sl
 8008384:	bfa8      	it	ge
 8008386:	4653      	movge	r3, sl
 8008388:	2b00      	cmp	r3, #0
 800838a:	4699      	mov	r9, r3
 800838c:	dc36      	bgt.n	80083fc <_printf_float+0x360>
 800838e:	f04f 0b00 	mov.w	fp, #0
 8008392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008396:	f104 021a 	add.w	r2, r4, #26
 800839a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800839c:	9306      	str	r3, [sp, #24]
 800839e:	eba3 0309 	sub.w	r3, r3, r9
 80083a2:	455b      	cmp	r3, fp
 80083a4:	dc31      	bgt.n	800840a <_printf_float+0x36e>
 80083a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a8:	459a      	cmp	sl, r3
 80083aa:	dc3a      	bgt.n	8008422 <_printf_float+0x386>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07da      	lsls	r2, r3, #31
 80083b0:	d437      	bmi.n	8008422 <_printf_float+0x386>
 80083b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b4:	ebaa 0903 	sub.w	r9, sl, r3
 80083b8:	9b06      	ldr	r3, [sp, #24]
 80083ba:	ebaa 0303 	sub.w	r3, sl, r3
 80083be:	4599      	cmp	r9, r3
 80083c0:	bfa8      	it	ge
 80083c2:	4699      	movge	r9, r3
 80083c4:	f1b9 0f00 	cmp.w	r9, #0
 80083c8:	dc33      	bgt.n	8008432 <_printf_float+0x396>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083d2:	f104 0b1a 	add.w	fp, r4, #26
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	ebaa 0303 	sub.w	r3, sl, r3
 80083dc:	eba3 0309 	sub.w	r3, r3, r9
 80083e0:	4543      	cmp	r3, r8
 80083e2:	f77f af79 	ble.w	80082d8 <_printf_float+0x23c>
 80083e6:	2301      	movs	r3, #1
 80083e8:	465a      	mov	r2, fp
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f aeae 	beq.w	8008152 <_printf_float+0xb6>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	e7ec      	b.n	80083d6 <_printf_float+0x33a>
 80083fc:	4642      	mov	r2, r8
 80083fe:	4631      	mov	r1, r6
 8008400:	4628      	mov	r0, r5
 8008402:	47b8      	blx	r7
 8008404:	3001      	adds	r0, #1
 8008406:	d1c2      	bne.n	800838e <_printf_float+0x2f2>
 8008408:	e6a3      	b.n	8008152 <_printf_float+0xb6>
 800840a:	2301      	movs	r3, #1
 800840c:	4631      	mov	r1, r6
 800840e:	4628      	mov	r0, r5
 8008410:	9206      	str	r2, [sp, #24]
 8008412:	47b8      	blx	r7
 8008414:	3001      	adds	r0, #1
 8008416:	f43f ae9c 	beq.w	8008152 <_printf_float+0xb6>
 800841a:	9a06      	ldr	r2, [sp, #24]
 800841c:	f10b 0b01 	add.w	fp, fp, #1
 8008420:	e7bb      	b.n	800839a <_printf_float+0x2fe>
 8008422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008426:	4631      	mov	r1, r6
 8008428:	4628      	mov	r0, r5
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	d1c0      	bne.n	80083b2 <_printf_float+0x316>
 8008430:	e68f      	b.n	8008152 <_printf_float+0xb6>
 8008432:	9a06      	ldr	r2, [sp, #24]
 8008434:	464b      	mov	r3, r9
 8008436:	4442      	add	r2, r8
 8008438:	4631      	mov	r1, r6
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	d1c3      	bne.n	80083ca <_printf_float+0x32e>
 8008442:	e686      	b.n	8008152 <_printf_float+0xb6>
 8008444:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008448:	f1ba 0f01 	cmp.w	sl, #1
 800844c:	dc01      	bgt.n	8008452 <_printf_float+0x3b6>
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d536      	bpl.n	80084c0 <_printf_float+0x424>
 8008452:	2301      	movs	r3, #1
 8008454:	4642      	mov	r2, r8
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae78 	beq.w	8008152 <_printf_float+0xb6>
 8008462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	f43f ae70 	beq.w	8008152 <_printf_float+0xb6>
 8008472:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008476:	2200      	movs	r2, #0
 8008478:	2300      	movs	r3, #0
 800847a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800847e:	f7f8 fb4b 	bl	8000b18 <__aeabi_dcmpeq>
 8008482:	b9c0      	cbnz	r0, 80084b6 <_printf_float+0x41a>
 8008484:	4653      	mov	r3, sl
 8008486:	f108 0201 	add.w	r2, r8, #1
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	d10c      	bne.n	80084ae <_printf_float+0x412>
 8008494:	e65d      	b.n	8008152 <_printf_float+0xb6>
 8008496:	2301      	movs	r3, #1
 8008498:	465a      	mov	r2, fp
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	f43f ae56 	beq.w	8008152 <_printf_float+0xb6>
 80084a6:	f108 0801 	add.w	r8, r8, #1
 80084aa:	45d0      	cmp	r8, sl
 80084ac:	dbf3      	blt.n	8008496 <_printf_float+0x3fa>
 80084ae:	464b      	mov	r3, r9
 80084b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80084b4:	e6df      	b.n	8008276 <_printf_float+0x1da>
 80084b6:	f04f 0800 	mov.w	r8, #0
 80084ba:	f104 0b1a 	add.w	fp, r4, #26
 80084be:	e7f4      	b.n	80084aa <_printf_float+0x40e>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4642      	mov	r2, r8
 80084c4:	e7e1      	b.n	800848a <_printf_float+0x3ee>
 80084c6:	2301      	movs	r3, #1
 80084c8:	464a      	mov	r2, r9
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	f43f ae3e 	beq.w	8008152 <_printf_float+0xb6>
 80084d6:	f108 0801 	add.w	r8, r8, #1
 80084da:	68e3      	ldr	r3, [r4, #12]
 80084dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084de:	1a5b      	subs	r3, r3, r1
 80084e0:	4543      	cmp	r3, r8
 80084e2:	dcf0      	bgt.n	80084c6 <_printf_float+0x42a>
 80084e4:	e6fc      	b.n	80082e0 <_printf_float+0x244>
 80084e6:	f04f 0800 	mov.w	r8, #0
 80084ea:	f104 0919 	add.w	r9, r4, #25
 80084ee:	e7f4      	b.n	80084da <_printf_float+0x43e>

080084f0 <_printf_common>:
 80084f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f4:	4616      	mov	r6, r2
 80084f6:	4698      	mov	r8, r3
 80084f8:	688a      	ldr	r2, [r1, #8]
 80084fa:	690b      	ldr	r3, [r1, #16]
 80084fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008500:	4293      	cmp	r3, r2
 8008502:	bfb8      	it	lt
 8008504:	4613      	movlt	r3, r2
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800850c:	4607      	mov	r7, r0
 800850e:	460c      	mov	r4, r1
 8008510:	b10a      	cbz	r2, 8008516 <_printf_common+0x26>
 8008512:	3301      	adds	r3, #1
 8008514:	6033      	str	r3, [r6, #0]
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	0699      	lsls	r1, r3, #26
 800851a:	bf42      	ittt	mi
 800851c:	6833      	ldrmi	r3, [r6, #0]
 800851e:	3302      	addmi	r3, #2
 8008520:	6033      	strmi	r3, [r6, #0]
 8008522:	6825      	ldr	r5, [r4, #0]
 8008524:	f015 0506 	ands.w	r5, r5, #6
 8008528:	d106      	bne.n	8008538 <_printf_common+0x48>
 800852a:	f104 0a19 	add.w	sl, r4, #25
 800852e:	68e3      	ldr	r3, [r4, #12]
 8008530:	6832      	ldr	r2, [r6, #0]
 8008532:	1a9b      	subs	r3, r3, r2
 8008534:	42ab      	cmp	r3, r5
 8008536:	dc26      	bgt.n	8008586 <_printf_common+0x96>
 8008538:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	3b00      	subs	r3, #0
 8008540:	bf18      	it	ne
 8008542:	2301      	movne	r3, #1
 8008544:	0692      	lsls	r2, r2, #26
 8008546:	d42b      	bmi.n	80085a0 <_printf_common+0xb0>
 8008548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800854c:	4641      	mov	r1, r8
 800854e:	4638      	mov	r0, r7
 8008550:	47c8      	blx	r9
 8008552:	3001      	adds	r0, #1
 8008554:	d01e      	beq.n	8008594 <_printf_common+0xa4>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	6922      	ldr	r2, [r4, #16]
 800855a:	f003 0306 	and.w	r3, r3, #6
 800855e:	2b04      	cmp	r3, #4
 8008560:	bf02      	ittt	eq
 8008562:	68e5      	ldreq	r5, [r4, #12]
 8008564:	6833      	ldreq	r3, [r6, #0]
 8008566:	1aed      	subeq	r5, r5, r3
 8008568:	68a3      	ldr	r3, [r4, #8]
 800856a:	bf0c      	ite	eq
 800856c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008570:	2500      	movne	r5, #0
 8008572:	4293      	cmp	r3, r2
 8008574:	bfc4      	itt	gt
 8008576:	1a9b      	subgt	r3, r3, r2
 8008578:	18ed      	addgt	r5, r5, r3
 800857a:	2600      	movs	r6, #0
 800857c:	341a      	adds	r4, #26
 800857e:	42b5      	cmp	r5, r6
 8008580:	d11a      	bne.n	80085b8 <_printf_common+0xc8>
 8008582:	2000      	movs	r0, #0
 8008584:	e008      	b.n	8008598 <_printf_common+0xa8>
 8008586:	2301      	movs	r3, #1
 8008588:	4652      	mov	r2, sl
 800858a:	4641      	mov	r1, r8
 800858c:	4638      	mov	r0, r7
 800858e:	47c8      	blx	r9
 8008590:	3001      	adds	r0, #1
 8008592:	d103      	bne.n	800859c <_printf_common+0xac>
 8008594:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859c:	3501      	adds	r5, #1
 800859e:	e7c6      	b.n	800852e <_printf_common+0x3e>
 80085a0:	18e1      	adds	r1, r4, r3
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	2030      	movs	r0, #48	@ 0x30
 80085a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085aa:	4422      	add	r2, r4
 80085ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085b4:	3302      	adds	r3, #2
 80085b6:	e7c7      	b.n	8008548 <_printf_common+0x58>
 80085b8:	2301      	movs	r3, #1
 80085ba:	4622      	mov	r2, r4
 80085bc:	4641      	mov	r1, r8
 80085be:	4638      	mov	r0, r7
 80085c0:	47c8      	blx	r9
 80085c2:	3001      	adds	r0, #1
 80085c4:	d0e6      	beq.n	8008594 <_printf_common+0xa4>
 80085c6:	3601      	adds	r6, #1
 80085c8:	e7d9      	b.n	800857e <_printf_common+0x8e>
	...

080085cc <_printf_i>:
 80085cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	7e0f      	ldrb	r7, [r1, #24]
 80085d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085d4:	2f78      	cmp	r7, #120	@ 0x78
 80085d6:	4691      	mov	r9, r2
 80085d8:	4680      	mov	r8, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	469a      	mov	sl, r3
 80085de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085e2:	d807      	bhi.n	80085f4 <_printf_i+0x28>
 80085e4:	2f62      	cmp	r7, #98	@ 0x62
 80085e6:	d80a      	bhi.n	80085fe <_printf_i+0x32>
 80085e8:	2f00      	cmp	r7, #0
 80085ea:	f000 80d1 	beq.w	8008790 <_printf_i+0x1c4>
 80085ee:	2f58      	cmp	r7, #88	@ 0x58
 80085f0:	f000 80b8 	beq.w	8008764 <_printf_i+0x198>
 80085f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085fc:	e03a      	b.n	8008674 <_printf_i+0xa8>
 80085fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008602:	2b15      	cmp	r3, #21
 8008604:	d8f6      	bhi.n	80085f4 <_printf_i+0x28>
 8008606:	a101      	add	r1, pc, #4	@ (adr r1, 800860c <_printf_i+0x40>)
 8008608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800860c:	08008665 	.word	0x08008665
 8008610:	08008679 	.word	0x08008679
 8008614:	080085f5 	.word	0x080085f5
 8008618:	080085f5 	.word	0x080085f5
 800861c:	080085f5 	.word	0x080085f5
 8008620:	080085f5 	.word	0x080085f5
 8008624:	08008679 	.word	0x08008679
 8008628:	080085f5 	.word	0x080085f5
 800862c:	080085f5 	.word	0x080085f5
 8008630:	080085f5 	.word	0x080085f5
 8008634:	080085f5 	.word	0x080085f5
 8008638:	08008777 	.word	0x08008777
 800863c:	080086a3 	.word	0x080086a3
 8008640:	08008731 	.word	0x08008731
 8008644:	080085f5 	.word	0x080085f5
 8008648:	080085f5 	.word	0x080085f5
 800864c:	08008799 	.word	0x08008799
 8008650:	080085f5 	.word	0x080085f5
 8008654:	080086a3 	.word	0x080086a3
 8008658:	080085f5 	.word	0x080085f5
 800865c:	080085f5 	.word	0x080085f5
 8008660:	08008739 	.word	0x08008739
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	1d1a      	adds	r2, r3, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6032      	str	r2, [r6, #0]
 800866c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008670:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008674:	2301      	movs	r3, #1
 8008676:	e09c      	b.n	80087b2 <_printf_i+0x1e6>
 8008678:	6833      	ldr	r3, [r6, #0]
 800867a:	6820      	ldr	r0, [r4, #0]
 800867c:	1d19      	adds	r1, r3, #4
 800867e:	6031      	str	r1, [r6, #0]
 8008680:	0606      	lsls	r6, r0, #24
 8008682:	d501      	bpl.n	8008688 <_printf_i+0xbc>
 8008684:	681d      	ldr	r5, [r3, #0]
 8008686:	e003      	b.n	8008690 <_printf_i+0xc4>
 8008688:	0645      	lsls	r5, r0, #25
 800868a:	d5fb      	bpl.n	8008684 <_printf_i+0xb8>
 800868c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008690:	2d00      	cmp	r5, #0
 8008692:	da03      	bge.n	800869c <_printf_i+0xd0>
 8008694:	232d      	movs	r3, #45	@ 0x2d
 8008696:	426d      	negs	r5, r5
 8008698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800869c:	4858      	ldr	r0, [pc, #352]	@ (8008800 <_printf_i+0x234>)
 800869e:	230a      	movs	r3, #10
 80086a0:	e011      	b.n	80086c6 <_printf_i+0xfa>
 80086a2:	6821      	ldr	r1, [r4, #0]
 80086a4:	6833      	ldr	r3, [r6, #0]
 80086a6:	0608      	lsls	r0, r1, #24
 80086a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80086ac:	d402      	bmi.n	80086b4 <_printf_i+0xe8>
 80086ae:	0649      	lsls	r1, r1, #25
 80086b0:	bf48      	it	mi
 80086b2:	b2ad      	uxthmi	r5, r5
 80086b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80086b6:	4852      	ldr	r0, [pc, #328]	@ (8008800 <_printf_i+0x234>)
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	bf14      	ite	ne
 80086bc:	230a      	movne	r3, #10
 80086be:	2308      	moveq	r3, #8
 80086c0:	2100      	movs	r1, #0
 80086c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086c6:	6866      	ldr	r6, [r4, #4]
 80086c8:	60a6      	str	r6, [r4, #8]
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	db05      	blt.n	80086da <_printf_i+0x10e>
 80086ce:	6821      	ldr	r1, [r4, #0]
 80086d0:	432e      	orrs	r6, r5
 80086d2:	f021 0104 	bic.w	r1, r1, #4
 80086d6:	6021      	str	r1, [r4, #0]
 80086d8:	d04b      	beq.n	8008772 <_printf_i+0x1a6>
 80086da:	4616      	mov	r6, r2
 80086dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80086e0:	fb03 5711 	mls	r7, r3, r1, r5
 80086e4:	5dc7      	ldrb	r7, [r0, r7]
 80086e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086ea:	462f      	mov	r7, r5
 80086ec:	42bb      	cmp	r3, r7
 80086ee:	460d      	mov	r5, r1
 80086f0:	d9f4      	bls.n	80086dc <_printf_i+0x110>
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d10b      	bne.n	800870e <_printf_i+0x142>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	07df      	lsls	r7, r3, #31
 80086fa:	d508      	bpl.n	800870e <_printf_i+0x142>
 80086fc:	6923      	ldr	r3, [r4, #16]
 80086fe:	6861      	ldr	r1, [r4, #4]
 8008700:	4299      	cmp	r1, r3
 8008702:	bfde      	ittt	le
 8008704:	2330      	movle	r3, #48	@ 0x30
 8008706:	f806 3c01 	strble.w	r3, [r6, #-1]
 800870a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800870e:	1b92      	subs	r2, r2, r6
 8008710:	6122      	str	r2, [r4, #16]
 8008712:	f8cd a000 	str.w	sl, [sp]
 8008716:	464b      	mov	r3, r9
 8008718:	aa03      	add	r2, sp, #12
 800871a:	4621      	mov	r1, r4
 800871c:	4640      	mov	r0, r8
 800871e:	f7ff fee7 	bl	80084f0 <_printf_common>
 8008722:	3001      	adds	r0, #1
 8008724:	d14a      	bne.n	80087bc <_printf_i+0x1f0>
 8008726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800872a:	b004      	add	sp, #16
 800872c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	f043 0320 	orr.w	r3, r3, #32
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	4832      	ldr	r0, [pc, #200]	@ (8008804 <_printf_i+0x238>)
 800873a:	2778      	movs	r7, #120	@ 0x78
 800873c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	6831      	ldr	r1, [r6, #0]
 8008744:	061f      	lsls	r7, r3, #24
 8008746:	f851 5b04 	ldr.w	r5, [r1], #4
 800874a:	d402      	bmi.n	8008752 <_printf_i+0x186>
 800874c:	065f      	lsls	r7, r3, #25
 800874e:	bf48      	it	mi
 8008750:	b2ad      	uxthmi	r5, r5
 8008752:	6031      	str	r1, [r6, #0]
 8008754:	07d9      	lsls	r1, r3, #31
 8008756:	bf44      	itt	mi
 8008758:	f043 0320 	orrmi.w	r3, r3, #32
 800875c:	6023      	strmi	r3, [r4, #0]
 800875e:	b11d      	cbz	r5, 8008768 <_printf_i+0x19c>
 8008760:	2310      	movs	r3, #16
 8008762:	e7ad      	b.n	80086c0 <_printf_i+0xf4>
 8008764:	4826      	ldr	r0, [pc, #152]	@ (8008800 <_printf_i+0x234>)
 8008766:	e7e9      	b.n	800873c <_printf_i+0x170>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	f023 0320 	bic.w	r3, r3, #32
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	e7f6      	b.n	8008760 <_printf_i+0x194>
 8008772:	4616      	mov	r6, r2
 8008774:	e7bd      	b.n	80086f2 <_printf_i+0x126>
 8008776:	6833      	ldr	r3, [r6, #0]
 8008778:	6825      	ldr	r5, [r4, #0]
 800877a:	6961      	ldr	r1, [r4, #20]
 800877c:	1d18      	adds	r0, r3, #4
 800877e:	6030      	str	r0, [r6, #0]
 8008780:	062e      	lsls	r6, r5, #24
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	d501      	bpl.n	800878a <_printf_i+0x1be>
 8008786:	6019      	str	r1, [r3, #0]
 8008788:	e002      	b.n	8008790 <_printf_i+0x1c4>
 800878a:	0668      	lsls	r0, r5, #25
 800878c:	d5fb      	bpl.n	8008786 <_printf_i+0x1ba>
 800878e:	8019      	strh	r1, [r3, #0]
 8008790:	2300      	movs	r3, #0
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	4616      	mov	r6, r2
 8008796:	e7bc      	b.n	8008712 <_printf_i+0x146>
 8008798:	6833      	ldr	r3, [r6, #0]
 800879a:	1d1a      	adds	r2, r3, #4
 800879c:	6032      	str	r2, [r6, #0]
 800879e:	681e      	ldr	r6, [r3, #0]
 80087a0:	6862      	ldr	r2, [r4, #4]
 80087a2:	2100      	movs	r1, #0
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7f7 fd3b 	bl	8000220 <memchr>
 80087aa:	b108      	cbz	r0, 80087b0 <_printf_i+0x1e4>
 80087ac:	1b80      	subs	r0, r0, r6
 80087ae:	6060      	str	r0, [r4, #4]
 80087b0:	6863      	ldr	r3, [r4, #4]
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	2300      	movs	r3, #0
 80087b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ba:	e7aa      	b.n	8008712 <_printf_i+0x146>
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	4632      	mov	r2, r6
 80087c0:	4649      	mov	r1, r9
 80087c2:	4640      	mov	r0, r8
 80087c4:	47d0      	blx	sl
 80087c6:	3001      	adds	r0, #1
 80087c8:	d0ad      	beq.n	8008726 <_printf_i+0x15a>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	079b      	lsls	r3, r3, #30
 80087ce:	d413      	bmi.n	80087f8 <_printf_i+0x22c>
 80087d0:	68e0      	ldr	r0, [r4, #12]
 80087d2:	9b03      	ldr	r3, [sp, #12]
 80087d4:	4298      	cmp	r0, r3
 80087d6:	bfb8      	it	lt
 80087d8:	4618      	movlt	r0, r3
 80087da:	e7a6      	b.n	800872a <_printf_i+0x15e>
 80087dc:	2301      	movs	r3, #1
 80087de:	4632      	mov	r2, r6
 80087e0:	4649      	mov	r1, r9
 80087e2:	4640      	mov	r0, r8
 80087e4:	47d0      	blx	sl
 80087e6:	3001      	adds	r0, #1
 80087e8:	d09d      	beq.n	8008726 <_printf_i+0x15a>
 80087ea:	3501      	adds	r5, #1
 80087ec:	68e3      	ldr	r3, [r4, #12]
 80087ee:	9903      	ldr	r1, [sp, #12]
 80087f0:	1a5b      	subs	r3, r3, r1
 80087f2:	42ab      	cmp	r3, r5
 80087f4:	dcf2      	bgt.n	80087dc <_printf_i+0x210>
 80087f6:	e7eb      	b.n	80087d0 <_printf_i+0x204>
 80087f8:	2500      	movs	r5, #0
 80087fa:	f104 0619 	add.w	r6, r4, #25
 80087fe:	e7f5      	b.n	80087ec <_printf_i+0x220>
 8008800:	0800d89e 	.word	0x0800d89e
 8008804:	0800d8af 	.word	0x0800d8af

08008808 <_scanf_float>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b087      	sub	sp, #28
 800880e:	4691      	mov	r9, r2
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	688b      	ldr	r3, [r1, #8]
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800881a:	bf81      	itttt	hi
 800881c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008820:	eb03 0b05 	addhi.w	fp, r3, r5
 8008824:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008828:	608b      	strhi	r3, [r1, #8]
 800882a:	680b      	ldr	r3, [r1, #0]
 800882c:	460a      	mov	r2, r1
 800882e:	f04f 0500 	mov.w	r5, #0
 8008832:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008836:	f842 3b1c 	str.w	r3, [r2], #28
 800883a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800883e:	4680      	mov	r8, r0
 8008840:	460c      	mov	r4, r1
 8008842:	bf98      	it	ls
 8008844:	f04f 0b00 	movls.w	fp, #0
 8008848:	9201      	str	r2, [sp, #4]
 800884a:	4616      	mov	r6, r2
 800884c:	46aa      	mov	sl, r5
 800884e:	462f      	mov	r7, r5
 8008850:	9502      	str	r5, [sp, #8]
 8008852:	68a2      	ldr	r2, [r4, #8]
 8008854:	b15a      	cbz	r2, 800886e <_scanf_float+0x66>
 8008856:	f8d9 3000 	ldr.w	r3, [r9]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b4e      	cmp	r3, #78	@ 0x4e
 800885e:	d863      	bhi.n	8008928 <_scanf_float+0x120>
 8008860:	2b40      	cmp	r3, #64	@ 0x40
 8008862:	d83b      	bhi.n	80088dc <_scanf_float+0xd4>
 8008864:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008868:	b2c8      	uxtb	r0, r1
 800886a:	280e      	cmp	r0, #14
 800886c:	d939      	bls.n	80088e2 <_scanf_float+0xda>
 800886e:	b11f      	cbz	r7, 8008878 <_scanf_float+0x70>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800887c:	f1ba 0f01 	cmp.w	sl, #1
 8008880:	f200 8114 	bhi.w	8008aac <_scanf_float+0x2a4>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	429e      	cmp	r6, r3
 8008888:	f200 8105 	bhi.w	8008a96 <_scanf_float+0x28e>
 800888c:	2001      	movs	r0, #1
 800888e:	b007      	add	sp, #28
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008894:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008898:	2a0d      	cmp	r2, #13
 800889a:	d8e8      	bhi.n	800886e <_scanf_float+0x66>
 800889c:	a101      	add	r1, pc, #4	@ (adr r1, 80088a4 <_scanf_float+0x9c>)
 800889e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080089ed 	.word	0x080089ed
 80088a8:	0800886f 	.word	0x0800886f
 80088ac:	0800886f 	.word	0x0800886f
 80088b0:	0800886f 	.word	0x0800886f
 80088b4:	08008a49 	.word	0x08008a49
 80088b8:	08008a23 	.word	0x08008a23
 80088bc:	0800886f 	.word	0x0800886f
 80088c0:	0800886f 	.word	0x0800886f
 80088c4:	080089fb 	.word	0x080089fb
 80088c8:	0800886f 	.word	0x0800886f
 80088cc:	0800886f 	.word	0x0800886f
 80088d0:	0800886f 	.word	0x0800886f
 80088d4:	0800886f 	.word	0x0800886f
 80088d8:	080089b7 	.word	0x080089b7
 80088dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80088e0:	e7da      	b.n	8008898 <_scanf_float+0x90>
 80088e2:	290e      	cmp	r1, #14
 80088e4:	d8c3      	bhi.n	800886e <_scanf_float+0x66>
 80088e6:	a001      	add	r0, pc, #4	@ (adr r0, 80088ec <_scanf_float+0xe4>)
 80088e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088ec:	080089a7 	.word	0x080089a7
 80088f0:	0800886f 	.word	0x0800886f
 80088f4:	080089a7 	.word	0x080089a7
 80088f8:	08008a37 	.word	0x08008a37
 80088fc:	0800886f 	.word	0x0800886f
 8008900:	08008949 	.word	0x08008949
 8008904:	0800898d 	.word	0x0800898d
 8008908:	0800898d 	.word	0x0800898d
 800890c:	0800898d 	.word	0x0800898d
 8008910:	0800898d 	.word	0x0800898d
 8008914:	0800898d 	.word	0x0800898d
 8008918:	0800898d 	.word	0x0800898d
 800891c:	0800898d 	.word	0x0800898d
 8008920:	0800898d 	.word	0x0800898d
 8008924:	0800898d 	.word	0x0800898d
 8008928:	2b6e      	cmp	r3, #110	@ 0x6e
 800892a:	d809      	bhi.n	8008940 <_scanf_float+0x138>
 800892c:	2b60      	cmp	r3, #96	@ 0x60
 800892e:	d8b1      	bhi.n	8008894 <_scanf_float+0x8c>
 8008930:	2b54      	cmp	r3, #84	@ 0x54
 8008932:	d07b      	beq.n	8008a2c <_scanf_float+0x224>
 8008934:	2b59      	cmp	r3, #89	@ 0x59
 8008936:	d19a      	bne.n	800886e <_scanf_float+0x66>
 8008938:	2d07      	cmp	r5, #7
 800893a:	d198      	bne.n	800886e <_scanf_float+0x66>
 800893c:	2508      	movs	r5, #8
 800893e:	e02f      	b.n	80089a0 <_scanf_float+0x198>
 8008940:	2b74      	cmp	r3, #116	@ 0x74
 8008942:	d073      	beq.n	8008a2c <_scanf_float+0x224>
 8008944:	2b79      	cmp	r3, #121	@ 0x79
 8008946:	e7f6      	b.n	8008936 <_scanf_float+0x12e>
 8008948:	6821      	ldr	r1, [r4, #0]
 800894a:	05c8      	lsls	r0, r1, #23
 800894c:	d51e      	bpl.n	800898c <_scanf_float+0x184>
 800894e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008952:	6021      	str	r1, [r4, #0]
 8008954:	3701      	adds	r7, #1
 8008956:	f1bb 0f00 	cmp.w	fp, #0
 800895a:	d003      	beq.n	8008964 <_scanf_float+0x15c>
 800895c:	3201      	adds	r2, #1
 800895e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008962:	60a2      	str	r2, [r4, #8]
 8008964:	68a3      	ldr	r3, [r4, #8]
 8008966:	3b01      	subs	r3, #1
 8008968:	60a3      	str	r3, [r4, #8]
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	3301      	adds	r3, #1
 800896e:	6123      	str	r3, [r4, #16]
 8008970:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008974:	3b01      	subs	r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	f8c9 3004 	str.w	r3, [r9, #4]
 800897c:	f340 8082 	ble.w	8008a84 <_scanf_float+0x27c>
 8008980:	f8d9 3000 	ldr.w	r3, [r9]
 8008984:	3301      	adds	r3, #1
 8008986:	f8c9 3000 	str.w	r3, [r9]
 800898a:	e762      	b.n	8008852 <_scanf_float+0x4a>
 800898c:	eb1a 0105 	adds.w	r1, sl, r5
 8008990:	f47f af6d 	bne.w	800886e <_scanf_float+0x66>
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800899a:	6022      	str	r2, [r4, #0]
 800899c:	460d      	mov	r5, r1
 800899e:	468a      	mov	sl, r1
 80089a0:	f806 3b01 	strb.w	r3, [r6], #1
 80089a4:	e7de      	b.n	8008964 <_scanf_float+0x15c>
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	0610      	lsls	r0, r2, #24
 80089aa:	f57f af60 	bpl.w	800886e <_scanf_float+0x66>
 80089ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089b2:	6022      	str	r2, [r4, #0]
 80089b4:	e7f4      	b.n	80089a0 <_scanf_float+0x198>
 80089b6:	f1ba 0f00 	cmp.w	sl, #0
 80089ba:	d10c      	bne.n	80089d6 <_scanf_float+0x1ce>
 80089bc:	b977      	cbnz	r7, 80089dc <_scanf_float+0x1d4>
 80089be:	6822      	ldr	r2, [r4, #0]
 80089c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80089c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80089c8:	d108      	bne.n	80089dc <_scanf_float+0x1d4>
 80089ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089ce:	6022      	str	r2, [r4, #0]
 80089d0:	f04f 0a01 	mov.w	sl, #1
 80089d4:	e7e4      	b.n	80089a0 <_scanf_float+0x198>
 80089d6:	f1ba 0f02 	cmp.w	sl, #2
 80089da:	d050      	beq.n	8008a7e <_scanf_float+0x276>
 80089dc:	2d01      	cmp	r5, #1
 80089de:	d002      	beq.n	80089e6 <_scanf_float+0x1de>
 80089e0:	2d04      	cmp	r5, #4
 80089e2:	f47f af44 	bne.w	800886e <_scanf_float+0x66>
 80089e6:	3501      	adds	r5, #1
 80089e8:	b2ed      	uxtb	r5, r5
 80089ea:	e7d9      	b.n	80089a0 <_scanf_float+0x198>
 80089ec:	f1ba 0f01 	cmp.w	sl, #1
 80089f0:	f47f af3d 	bne.w	800886e <_scanf_float+0x66>
 80089f4:	f04f 0a02 	mov.w	sl, #2
 80089f8:	e7d2      	b.n	80089a0 <_scanf_float+0x198>
 80089fa:	b975      	cbnz	r5, 8008a1a <_scanf_float+0x212>
 80089fc:	2f00      	cmp	r7, #0
 80089fe:	f47f af37 	bne.w	8008870 <_scanf_float+0x68>
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008a08:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008a0c:	f040 8103 	bne.w	8008c16 <_scanf_float+0x40e>
 8008a10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a14:	6022      	str	r2, [r4, #0]
 8008a16:	2501      	movs	r5, #1
 8008a18:	e7c2      	b.n	80089a0 <_scanf_float+0x198>
 8008a1a:	2d03      	cmp	r5, #3
 8008a1c:	d0e3      	beq.n	80089e6 <_scanf_float+0x1de>
 8008a1e:	2d05      	cmp	r5, #5
 8008a20:	e7df      	b.n	80089e2 <_scanf_float+0x1da>
 8008a22:	2d02      	cmp	r5, #2
 8008a24:	f47f af23 	bne.w	800886e <_scanf_float+0x66>
 8008a28:	2503      	movs	r5, #3
 8008a2a:	e7b9      	b.n	80089a0 <_scanf_float+0x198>
 8008a2c:	2d06      	cmp	r5, #6
 8008a2e:	f47f af1e 	bne.w	800886e <_scanf_float+0x66>
 8008a32:	2507      	movs	r5, #7
 8008a34:	e7b4      	b.n	80089a0 <_scanf_float+0x198>
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	0591      	lsls	r1, r2, #22
 8008a3a:	f57f af18 	bpl.w	800886e <_scanf_float+0x66>
 8008a3e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	9702      	str	r7, [sp, #8]
 8008a46:	e7ab      	b.n	80089a0 <_scanf_float+0x198>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008a4e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008a52:	d005      	beq.n	8008a60 <_scanf_float+0x258>
 8008a54:	0550      	lsls	r0, r2, #21
 8008a56:	f57f af0a 	bpl.w	800886e <_scanf_float+0x66>
 8008a5a:	2f00      	cmp	r7, #0
 8008a5c:	f000 80db 	beq.w	8008c16 <_scanf_float+0x40e>
 8008a60:	0591      	lsls	r1, r2, #22
 8008a62:	bf58      	it	pl
 8008a64:	9902      	ldrpl	r1, [sp, #8]
 8008a66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a6a:	bf58      	it	pl
 8008a6c:	1a79      	subpl	r1, r7, r1
 8008a6e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008a72:	bf58      	it	pl
 8008a74:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a78:	6022      	str	r2, [r4, #0]
 8008a7a:	2700      	movs	r7, #0
 8008a7c:	e790      	b.n	80089a0 <_scanf_float+0x198>
 8008a7e:	f04f 0a03 	mov.w	sl, #3
 8008a82:	e78d      	b.n	80089a0 <_scanf_float+0x198>
 8008a84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4798      	blx	r3
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f aedf 	beq.w	8008852 <_scanf_float+0x4a>
 8008a94:	e6eb      	b.n	800886e <_scanf_float+0x66>
 8008a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a9e:	464a      	mov	r2, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4798      	blx	r3
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	e6eb      	b.n	8008884 <_scanf_float+0x7c>
 8008aac:	1e6b      	subs	r3, r5, #1
 8008aae:	2b06      	cmp	r3, #6
 8008ab0:	d824      	bhi.n	8008afc <_scanf_float+0x2f4>
 8008ab2:	2d02      	cmp	r5, #2
 8008ab4:	d836      	bhi.n	8008b24 <_scanf_float+0x31c>
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	429e      	cmp	r6, r3
 8008aba:	f67f aee7 	bls.w	800888c <_scanf_float+0x84>
 8008abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ac2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ac6:	464a      	mov	r2, r9
 8008ac8:	4640      	mov	r0, r8
 8008aca:	4798      	blx	r3
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	e7f0      	b.n	8008ab6 <_scanf_float+0x2ae>
 8008ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ad8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008adc:	464a      	mov	r2, r9
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4798      	blx	r3
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	6123      	str	r3, [r4, #16]
 8008ae8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008aec:	fa5f fa8a 	uxtb.w	sl, sl
 8008af0:	f1ba 0f02 	cmp.w	sl, #2
 8008af4:	d1ee      	bne.n	8008ad4 <_scanf_float+0x2cc>
 8008af6:	3d03      	subs	r5, #3
 8008af8:	b2ed      	uxtb	r5, r5
 8008afa:	1b76      	subs	r6, r6, r5
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	05da      	lsls	r2, r3, #23
 8008b00:	d530      	bpl.n	8008b64 <_scanf_float+0x35c>
 8008b02:	055b      	lsls	r3, r3, #21
 8008b04:	d511      	bpl.n	8008b2a <_scanf_float+0x322>
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	429e      	cmp	r6, r3
 8008b0a:	f67f aebf 	bls.w	800888c <_scanf_float+0x84>
 8008b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b16:	464a      	mov	r2, r9
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4798      	blx	r3
 8008b1c:	6923      	ldr	r3, [r4, #16]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	6123      	str	r3, [r4, #16]
 8008b22:	e7f0      	b.n	8008b06 <_scanf_float+0x2fe>
 8008b24:	46aa      	mov	sl, r5
 8008b26:	46b3      	mov	fp, r6
 8008b28:	e7de      	b.n	8008ae8 <_scanf_float+0x2e0>
 8008b2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	2965      	cmp	r1, #101	@ 0x65
 8008b32:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008b36:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	d00c      	beq.n	8008b58 <_scanf_float+0x350>
 8008b3e:	2945      	cmp	r1, #69	@ 0x45
 8008b40:	d00a      	beq.n	8008b58 <_scanf_float+0x350>
 8008b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b46:	464a      	mov	r2, r9
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4798      	blx	r3
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	1eb5      	subs	r5, r6, #2
 8008b56:	6123      	str	r3, [r4, #16]
 8008b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b5c:	464a      	mov	r2, r9
 8008b5e:	4640      	mov	r0, r8
 8008b60:	4798      	blx	r3
 8008b62:	462e      	mov	r6, r5
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	f012 0210 	ands.w	r2, r2, #16
 8008b6a:	d001      	beq.n	8008b70 <_scanf_float+0x368>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e68e      	b.n	800888e <_scanf_float+0x86>
 8008b70:	7032      	strb	r2, [r6, #0]
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b7c:	d125      	bne.n	8008bca <_scanf_float+0x3c2>
 8008b7e:	9b02      	ldr	r3, [sp, #8]
 8008b80:	429f      	cmp	r7, r3
 8008b82:	d00a      	beq.n	8008b9a <_scanf_float+0x392>
 8008b84:	1bda      	subs	r2, r3, r7
 8008b86:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008b8a:	429e      	cmp	r6, r3
 8008b8c:	bf28      	it	cs
 8008b8e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008b92:	4922      	ldr	r1, [pc, #136]	@ (8008c1c <_scanf_float+0x414>)
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 f93d 	bl	8008e14 <siprintf>
 8008b9a:	9901      	ldr	r1, [sp, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f002 fc36 	bl	800b410 <_strtod_r>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	6821      	ldr	r1, [r4, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f011 0f02 	tst.w	r1, #2
 8008bae:	ec57 6b10 	vmov	r6, r7, d0
 8008bb2:	f103 0204 	add.w	r2, r3, #4
 8008bb6:	d015      	beq.n	8008be4 <_scanf_float+0x3dc>
 8008bb8:	9903      	ldr	r1, [sp, #12]
 8008bba:	600a      	str	r2, [r1, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	e9c3 6700 	strd	r6, r7, [r3]
 8008bc2:	68e3      	ldr	r3, [r4, #12]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	60e3      	str	r3, [r4, #12]
 8008bc8:	e7d0      	b.n	8008b6c <_scanf_float+0x364>
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0e4      	beq.n	8008b9a <_scanf_float+0x392>
 8008bd0:	9905      	ldr	r1, [sp, #20]
 8008bd2:	230a      	movs	r3, #10
 8008bd4:	3101      	adds	r1, #1
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f002 fc9a 	bl	800b510 <_strtol_r>
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	9e05      	ldr	r6, [sp, #20]
 8008be0:	1ac2      	subs	r2, r0, r3
 8008be2:	e7d0      	b.n	8008b86 <_scanf_float+0x37e>
 8008be4:	f011 0f04 	tst.w	r1, #4
 8008be8:	9903      	ldr	r1, [sp, #12]
 8008bea:	600a      	str	r2, [r1, #0]
 8008bec:	d1e6      	bne.n	8008bbc <_scanf_float+0x3b4>
 8008bee:	681d      	ldr	r5, [r3, #0]
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	f7f7 ffc0 	bl	8000b7c <__aeabi_dcmpun>
 8008bfc:	b128      	cbz	r0, 8008c0a <_scanf_float+0x402>
 8008bfe:	4808      	ldr	r0, [pc, #32]	@ (8008c20 <_scanf_float+0x418>)
 8008c00:	f000 f9fc 	bl	8008ffc <nanf>
 8008c04:	ed85 0a00 	vstr	s0, [r5]
 8008c08:	e7db      	b.n	8008bc2 <_scanf_float+0x3ba>
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	f7f8 f813 	bl	8000c38 <__aeabi_d2f>
 8008c12:	6028      	str	r0, [r5, #0]
 8008c14:	e7d5      	b.n	8008bc2 <_scanf_float+0x3ba>
 8008c16:	2700      	movs	r7, #0
 8008c18:	e62e      	b.n	8008878 <_scanf_float+0x70>
 8008c1a:	bf00      	nop
 8008c1c:	0800d8c0 	.word	0x0800d8c0
 8008c20:	0800da01 	.word	0x0800da01

08008c24 <std>:
 8008c24:	2300      	movs	r3, #0
 8008c26:	b510      	push	{r4, lr}
 8008c28:	4604      	mov	r4, r0
 8008c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c32:	6083      	str	r3, [r0, #8]
 8008c34:	8181      	strh	r1, [r0, #12]
 8008c36:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c38:	81c2      	strh	r2, [r0, #14]
 8008c3a:	6183      	str	r3, [r0, #24]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	2208      	movs	r2, #8
 8008c40:	305c      	adds	r0, #92	@ 0x5c
 8008c42:	f000 f94c 	bl	8008ede <memset>
 8008c46:	4b0d      	ldr	r3, [pc, #52]	@ (8008c7c <std+0x58>)
 8008c48:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c80 <std+0x5c>)
 8008c4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <std+0x60>)
 8008c50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c52:	4b0d      	ldr	r3, [pc, #52]	@ (8008c88 <std+0x64>)
 8008c54:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c56:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <std+0x68>)
 8008c58:	6224      	str	r4, [r4, #32]
 8008c5a:	429c      	cmp	r4, r3
 8008c5c:	d006      	beq.n	8008c6c <std+0x48>
 8008c5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c62:	4294      	cmp	r4, r2
 8008c64:	d002      	beq.n	8008c6c <std+0x48>
 8008c66:	33d0      	adds	r3, #208	@ 0xd0
 8008c68:	429c      	cmp	r4, r3
 8008c6a:	d105      	bne.n	8008c78 <std+0x54>
 8008c6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c74:	f000 b9b0 	b.w	8008fd8 <__retarget_lock_init_recursive>
 8008c78:	bd10      	pop	{r4, pc}
 8008c7a:	bf00      	nop
 8008c7c:	08008e59 	.word	0x08008e59
 8008c80:	08008e7b 	.word	0x08008e7b
 8008c84:	08008eb3 	.word	0x08008eb3
 8008c88:	08008ed7 	.word	0x08008ed7
 8008c8c:	200006a4 	.word	0x200006a4

08008c90 <stdio_exit_handler>:
 8008c90:	4a02      	ldr	r2, [pc, #8]	@ (8008c9c <stdio_exit_handler+0xc>)
 8008c92:	4903      	ldr	r1, [pc, #12]	@ (8008ca0 <stdio_exit_handler+0x10>)
 8008c94:	4803      	ldr	r0, [pc, #12]	@ (8008ca4 <stdio_exit_handler+0x14>)
 8008c96:	f000 b869 	b.w	8008d6c <_fwalk_sglue>
 8008c9a:	bf00      	nop
 8008c9c:	2000002c 	.word	0x2000002c
 8008ca0:	0800b8cd 	.word	0x0800b8cd
 8008ca4:	2000003c 	.word	0x2000003c

08008ca8 <cleanup_stdio>:
 8008ca8:	6841      	ldr	r1, [r0, #4]
 8008caa:	4b0c      	ldr	r3, [pc, #48]	@ (8008cdc <cleanup_stdio+0x34>)
 8008cac:	4299      	cmp	r1, r3
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	d001      	beq.n	8008cb8 <cleanup_stdio+0x10>
 8008cb4:	f002 fe0a 	bl	800b8cc <_fflush_r>
 8008cb8:	68a1      	ldr	r1, [r4, #8]
 8008cba:	4b09      	ldr	r3, [pc, #36]	@ (8008ce0 <cleanup_stdio+0x38>)
 8008cbc:	4299      	cmp	r1, r3
 8008cbe:	d002      	beq.n	8008cc6 <cleanup_stdio+0x1e>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f002 fe03 	bl	800b8cc <_fflush_r>
 8008cc6:	68e1      	ldr	r1, [r4, #12]
 8008cc8:	4b06      	ldr	r3, [pc, #24]	@ (8008ce4 <cleanup_stdio+0x3c>)
 8008cca:	4299      	cmp	r1, r3
 8008ccc:	d004      	beq.n	8008cd8 <cleanup_stdio+0x30>
 8008cce:	4620      	mov	r0, r4
 8008cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd4:	f002 bdfa 	b.w	800b8cc <_fflush_r>
 8008cd8:	bd10      	pop	{r4, pc}
 8008cda:	bf00      	nop
 8008cdc:	200006a4 	.word	0x200006a4
 8008ce0:	2000070c 	.word	0x2000070c
 8008ce4:	20000774 	.word	0x20000774

08008ce8 <global_stdio_init.part.0>:
 8008ce8:	b510      	push	{r4, lr}
 8008cea:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <global_stdio_init.part.0+0x30>)
 8008cec:	4c0b      	ldr	r4, [pc, #44]	@ (8008d1c <global_stdio_init.part.0+0x34>)
 8008cee:	4a0c      	ldr	r2, [pc, #48]	@ (8008d20 <global_stdio_init.part.0+0x38>)
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2104      	movs	r1, #4
 8008cf8:	f7ff ff94 	bl	8008c24 <std>
 8008cfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d00:	2201      	movs	r2, #1
 8008d02:	2109      	movs	r1, #9
 8008d04:	f7ff ff8e 	bl	8008c24 <std>
 8008d08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d12:	2112      	movs	r1, #18
 8008d14:	f7ff bf86 	b.w	8008c24 <std>
 8008d18:	200007dc 	.word	0x200007dc
 8008d1c:	200006a4 	.word	0x200006a4
 8008d20:	08008c91 	.word	0x08008c91

08008d24 <__sfp_lock_acquire>:
 8008d24:	4801      	ldr	r0, [pc, #4]	@ (8008d2c <__sfp_lock_acquire+0x8>)
 8008d26:	f000 b958 	b.w	8008fda <__retarget_lock_acquire_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	200007e5 	.word	0x200007e5

08008d30 <__sfp_lock_release>:
 8008d30:	4801      	ldr	r0, [pc, #4]	@ (8008d38 <__sfp_lock_release+0x8>)
 8008d32:	f000 b953 	b.w	8008fdc <__retarget_lock_release_recursive>
 8008d36:	bf00      	nop
 8008d38:	200007e5 	.word	0x200007e5

08008d3c <__sinit>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	4604      	mov	r4, r0
 8008d40:	f7ff fff0 	bl	8008d24 <__sfp_lock_acquire>
 8008d44:	6a23      	ldr	r3, [r4, #32]
 8008d46:	b11b      	cbz	r3, 8008d50 <__sinit+0x14>
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4c:	f7ff bff0 	b.w	8008d30 <__sfp_lock_release>
 8008d50:	4b04      	ldr	r3, [pc, #16]	@ (8008d64 <__sinit+0x28>)
 8008d52:	6223      	str	r3, [r4, #32]
 8008d54:	4b04      	ldr	r3, [pc, #16]	@ (8008d68 <__sinit+0x2c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1f5      	bne.n	8008d48 <__sinit+0xc>
 8008d5c:	f7ff ffc4 	bl	8008ce8 <global_stdio_init.part.0>
 8008d60:	e7f2      	b.n	8008d48 <__sinit+0xc>
 8008d62:	bf00      	nop
 8008d64:	08008ca9 	.word	0x08008ca9
 8008d68:	200007dc 	.word	0x200007dc

08008d6c <_fwalk_sglue>:
 8008d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d70:	4607      	mov	r7, r0
 8008d72:	4688      	mov	r8, r1
 8008d74:	4614      	mov	r4, r2
 8008d76:	2600      	movs	r6, #0
 8008d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8008d80:	d505      	bpl.n	8008d8e <_fwalk_sglue+0x22>
 8008d82:	6824      	ldr	r4, [r4, #0]
 8008d84:	2c00      	cmp	r4, #0
 8008d86:	d1f7      	bne.n	8008d78 <_fwalk_sglue+0xc>
 8008d88:	4630      	mov	r0, r6
 8008d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d8e:	89ab      	ldrh	r3, [r5, #12]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d907      	bls.n	8008da4 <_fwalk_sglue+0x38>
 8008d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	d003      	beq.n	8008da4 <_fwalk_sglue+0x38>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4638      	mov	r0, r7
 8008da0:	47c0      	blx	r8
 8008da2:	4306      	orrs	r6, r0
 8008da4:	3568      	adds	r5, #104	@ 0x68
 8008da6:	e7e9      	b.n	8008d7c <_fwalk_sglue+0x10>

08008da8 <sniprintf>:
 8008da8:	b40c      	push	{r2, r3}
 8008daa:	b530      	push	{r4, r5, lr}
 8008dac:	4b18      	ldr	r3, [pc, #96]	@ (8008e10 <sniprintf+0x68>)
 8008dae:	1e0c      	subs	r4, r1, #0
 8008db0:	681d      	ldr	r5, [r3, #0]
 8008db2:	b09d      	sub	sp, #116	@ 0x74
 8008db4:	da08      	bge.n	8008dc8 <sniprintf+0x20>
 8008db6:	238b      	movs	r3, #139	@ 0x8b
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dbe:	b01d      	add	sp, #116	@ 0x74
 8008dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dc4:	b002      	add	sp, #8
 8008dc6:	4770      	bx	lr
 8008dc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008dcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008dd6:	bf14      	ite	ne
 8008dd8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008ddc:	4623      	moveq	r3, r4
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008de6:	9002      	str	r0, [sp, #8]
 8008de8:	9006      	str	r0, [sp, #24]
 8008dea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008dee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008df0:	ab21      	add	r3, sp, #132	@ 0x84
 8008df2:	a902      	add	r1, sp, #8
 8008df4:	4628      	mov	r0, r5
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	f002 fbe8 	bl	800b5cc <_svfiprintf_r>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	bfbc      	itt	lt
 8008e00:	238b      	movlt	r3, #139	@ 0x8b
 8008e02:	602b      	strlt	r3, [r5, #0]
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	d0da      	beq.n	8008dbe <sniprintf+0x16>
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	e7d6      	b.n	8008dbe <sniprintf+0x16>
 8008e10:	20000038 	.word	0x20000038

08008e14 <siprintf>:
 8008e14:	b40e      	push	{r1, r2, r3}
 8008e16:	b510      	push	{r4, lr}
 8008e18:	b09d      	sub	sp, #116	@ 0x74
 8008e1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008e1c:	9002      	str	r0, [sp, #8]
 8008e1e:	9006      	str	r0, [sp, #24]
 8008e20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e24:	480a      	ldr	r0, [pc, #40]	@ (8008e50 <siprintf+0x3c>)
 8008e26:	9107      	str	r1, [sp, #28]
 8008e28:	9104      	str	r1, [sp, #16]
 8008e2a:	490a      	ldr	r1, [pc, #40]	@ (8008e54 <siprintf+0x40>)
 8008e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e30:	9105      	str	r1, [sp, #20]
 8008e32:	2400      	movs	r4, #0
 8008e34:	a902      	add	r1, sp, #8
 8008e36:	6800      	ldr	r0, [r0, #0]
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008e3c:	f002 fbc6 	bl	800b5cc <_svfiprintf_r>
 8008e40:	9b02      	ldr	r3, [sp, #8]
 8008e42:	701c      	strb	r4, [r3, #0]
 8008e44:	b01d      	add	sp, #116	@ 0x74
 8008e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e4a:	b003      	add	sp, #12
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000038 	.word	0x20000038
 8008e54:	ffff0208 	.word	0xffff0208

08008e58 <__sread>:
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e60:	f000 f86c 	bl	8008f3c <_read_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	bfab      	itete	ge
 8008e68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e6c:	181b      	addge	r3, r3, r0
 8008e6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e72:	bfac      	ite	ge
 8008e74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e76:	81a3      	strhlt	r3, [r4, #12]
 8008e78:	bd10      	pop	{r4, pc}

08008e7a <__swrite>:
 8008e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7e:	461f      	mov	r7, r3
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	05db      	lsls	r3, r3, #23
 8008e84:	4605      	mov	r5, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	4616      	mov	r6, r2
 8008e8a:	d505      	bpl.n	8008e98 <__swrite+0x1e>
 8008e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e90:	2302      	movs	r3, #2
 8008e92:	2200      	movs	r2, #0
 8008e94:	f000 f840 	bl	8008f18 <_lseek_r>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	4632      	mov	r2, r6
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eae:	f000 b857 	b.w	8008f60 <_write_r>

08008eb2 <__sseek>:
 8008eb2:	b510      	push	{r4, lr}
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eba:	f000 f82d 	bl	8008f18 <_lseek_r>
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	bf15      	itete	ne
 8008ec4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ec6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008eca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008ece:	81a3      	strheq	r3, [r4, #12]
 8008ed0:	bf18      	it	ne
 8008ed2:	81a3      	strhne	r3, [r4, #12]
 8008ed4:	bd10      	pop	{r4, pc}

08008ed6 <__sclose>:
 8008ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eda:	f000 b80d 	b.w	8008ef8 <_close_r>

08008ede <memset>:
 8008ede:	4402      	add	r2, r0
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d100      	bne.n	8008ee8 <memset+0xa>
 8008ee6:	4770      	bx	lr
 8008ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8008eec:	e7f9      	b.n	8008ee2 <memset+0x4>
	...

08008ef0 <_localeconv_r>:
 8008ef0:	4800      	ldr	r0, [pc, #0]	@ (8008ef4 <_localeconv_r+0x4>)
 8008ef2:	4770      	bx	lr
 8008ef4:	20000178 	.word	0x20000178

08008ef8 <_close_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d06      	ldr	r5, [pc, #24]	@ (8008f14 <_close_r+0x1c>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7fa fc45 	bl	8003792 <_close>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_close_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_close_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	200007e0 	.word	0x200007e0

08008f18 <_lseek_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	@ (8008f38 <_lseek_r+0x20>)
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7fa fc5a 	bl	80037e0 <_lseek>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_lseek_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_lseek_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	200007e0 	.word	0x200007e0

08008f3c <_read_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d07      	ldr	r5, [pc, #28]	@ (8008f5c <_read_r+0x20>)
 8008f40:	4604      	mov	r4, r0
 8008f42:	4608      	mov	r0, r1
 8008f44:	4611      	mov	r1, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	602a      	str	r2, [r5, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f7fa fbe8 	bl	8003720 <_read>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	d102      	bne.n	8008f5a <_read_r+0x1e>
 8008f54:	682b      	ldr	r3, [r5, #0]
 8008f56:	b103      	cbz	r3, 8008f5a <_read_r+0x1e>
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	bd38      	pop	{r3, r4, r5, pc}
 8008f5c:	200007e0 	.word	0x200007e0

08008f60 <_write_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	@ (8008f80 <_write_r+0x20>)
 8008f64:	4604      	mov	r4, r0
 8008f66:	4608      	mov	r0, r1
 8008f68:	4611      	mov	r1, r2
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	602a      	str	r2, [r5, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f7fa fbf3 	bl	800375a <_write>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d102      	bne.n	8008f7e <_write_r+0x1e>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	b103      	cbz	r3, 8008f7e <_write_r+0x1e>
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}
 8008f80:	200007e0 	.word	0x200007e0

08008f84 <__errno>:
 8008f84:	4b01      	ldr	r3, [pc, #4]	@ (8008f8c <__errno+0x8>)
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	20000038 	.word	0x20000038

08008f90 <__libc_init_array>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4d0d      	ldr	r5, [pc, #52]	@ (8008fc8 <__libc_init_array+0x38>)
 8008f94:	4c0d      	ldr	r4, [pc, #52]	@ (8008fcc <__libc_init_array+0x3c>)
 8008f96:	1b64      	subs	r4, r4, r5
 8008f98:	10a4      	asrs	r4, r4, #2
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	42a6      	cmp	r6, r4
 8008f9e:	d109      	bne.n	8008fb4 <__libc_init_array+0x24>
 8008fa0:	4d0b      	ldr	r5, [pc, #44]	@ (8008fd0 <__libc_init_array+0x40>)
 8008fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8008fd4 <__libc_init_array+0x44>)
 8008fa4:	f004 fbf0 	bl	800d788 <_init>
 8008fa8:	1b64      	subs	r4, r4, r5
 8008faa:	10a4      	asrs	r4, r4, #2
 8008fac:	2600      	movs	r6, #0
 8008fae:	42a6      	cmp	r6, r4
 8008fb0:	d105      	bne.n	8008fbe <__libc_init_array+0x2e>
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
 8008fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb8:	4798      	blx	r3
 8008fba:	3601      	adds	r6, #1
 8008fbc:	e7ee      	b.n	8008f9c <__libc_init_array+0xc>
 8008fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fc2:	4798      	blx	r3
 8008fc4:	3601      	adds	r6, #1
 8008fc6:	e7f2      	b.n	8008fae <__libc_init_array+0x1e>
 8008fc8:	0800de98 	.word	0x0800de98
 8008fcc:	0800de98 	.word	0x0800de98
 8008fd0:	0800de98 	.word	0x0800de98
 8008fd4:	0800de9c 	.word	0x0800de9c

08008fd8 <__retarget_lock_init_recursive>:
 8008fd8:	4770      	bx	lr

08008fda <__retarget_lock_acquire_recursive>:
 8008fda:	4770      	bx	lr

08008fdc <__retarget_lock_release_recursive>:
 8008fdc:	4770      	bx	lr

08008fde <memcpy>:
 8008fde:	440a      	add	r2, r1
 8008fe0:	4291      	cmp	r1, r2
 8008fe2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008fe6:	d100      	bne.n	8008fea <memcpy+0xc>
 8008fe8:	4770      	bx	lr
 8008fea:	b510      	push	{r4, lr}
 8008fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff4:	4291      	cmp	r1, r2
 8008ff6:	d1f9      	bne.n	8008fec <memcpy+0xe>
 8008ff8:	bd10      	pop	{r4, pc}
	...

08008ffc <nanf>:
 8008ffc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009004 <nanf+0x8>
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	7fc00000 	.word	0x7fc00000

08009008 <quorem>:
 8009008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	6903      	ldr	r3, [r0, #16]
 800900e:	690c      	ldr	r4, [r1, #16]
 8009010:	42a3      	cmp	r3, r4
 8009012:	4607      	mov	r7, r0
 8009014:	db7e      	blt.n	8009114 <quorem+0x10c>
 8009016:	3c01      	subs	r4, #1
 8009018:	f101 0814 	add.w	r8, r1, #20
 800901c:	00a3      	lsls	r3, r4, #2
 800901e:	f100 0514 	add.w	r5, r0, #20
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800902e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009032:	3301      	adds	r3, #1
 8009034:	429a      	cmp	r2, r3
 8009036:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800903a:	fbb2 f6f3 	udiv	r6, r2, r3
 800903e:	d32e      	bcc.n	800909e <quorem+0x96>
 8009040:	f04f 0a00 	mov.w	sl, #0
 8009044:	46c4      	mov	ip, r8
 8009046:	46ae      	mov	lr, r5
 8009048:	46d3      	mov	fp, sl
 800904a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800904e:	b298      	uxth	r0, r3
 8009050:	fb06 a000 	mla	r0, r6, r0, sl
 8009054:	0c02      	lsrs	r2, r0, #16
 8009056:	0c1b      	lsrs	r3, r3, #16
 8009058:	fb06 2303 	mla	r3, r6, r3, r2
 800905c:	f8de 2000 	ldr.w	r2, [lr]
 8009060:	b280      	uxth	r0, r0
 8009062:	b292      	uxth	r2, r2
 8009064:	1a12      	subs	r2, r2, r0
 8009066:	445a      	add	r2, fp
 8009068:	f8de 0000 	ldr.w	r0, [lr]
 800906c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009070:	b29b      	uxth	r3, r3
 8009072:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009076:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800907a:	b292      	uxth	r2, r2
 800907c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009080:	45e1      	cmp	r9, ip
 8009082:	f84e 2b04 	str.w	r2, [lr], #4
 8009086:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800908a:	d2de      	bcs.n	800904a <quorem+0x42>
 800908c:	9b00      	ldr	r3, [sp, #0]
 800908e:	58eb      	ldr	r3, [r5, r3]
 8009090:	b92b      	cbnz	r3, 800909e <quorem+0x96>
 8009092:	9b01      	ldr	r3, [sp, #4]
 8009094:	3b04      	subs	r3, #4
 8009096:	429d      	cmp	r5, r3
 8009098:	461a      	mov	r2, r3
 800909a:	d32f      	bcc.n	80090fc <quorem+0xf4>
 800909c:	613c      	str	r4, [r7, #16]
 800909e:	4638      	mov	r0, r7
 80090a0:	f001 f9c6 	bl	800a430 <__mcmp>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	db25      	blt.n	80090f4 <quorem+0xec>
 80090a8:	4629      	mov	r1, r5
 80090aa:	2000      	movs	r0, #0
 80090ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80090b0:	f8d1 c000 	ldr.w	ip, [r1]
 80090b4:	fa1f fe82 	uxth.w	lr, r2
 80090b8:	fa1f f38c 	uxth.w	r3, ip
 80090bc:	eba3 030e 	sub.w	r3, r3, lr
 80090c0:	4403      	add	r3, r0
 80090c2:	0c12      	lsrs	r2, r2, #16
 80090c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80090c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090d2:	45c1      	cmp	r9, r8
 80090d4:	f841 3b04 	str.w	r3, [r1], #4
 80090d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090dc:	d2e6      	bcs.n	80090ac <quorem+0xa4>
 80090de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090e6:	b922      	cbnz	r2, 80090f2 <quorem+0xea>
 80090e8:	3b04      	subs	r3, #4
 80090ea:	429d      	cmp	r5, r3
 80090ec:	461a      	mov	r2, r3
 80090ee:	d30b      	bcc.n	8009108 <quorem+0x100>
 80090f0:	613c      	str	r4, [r7, #16]
 80090f2:	3601      	adds	r6, #1
 80090f4:	4630      	mov	r0, r6
 80090f6:	b003      	add	sp, #12
 80090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fc:	6812      	ldr	r2, [r2, #0]
 80090fe:	3b04      	subs	r3, #4
 8009100:	2a00      	cmp	r2, #0
 8009102:	d1cb      	bne.n	800909c <quorem+0x94>
 8009104:	3c01      	subs	r4, #1
 8009106:	e7c6      	b.n	8009096 <quorem+0x8e>
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	3b04      	subs	r3, #4
 800910c:	2a00      	cmp	r2, #0
 800910e:	d1ef      	bne.n	80090f0 <quorem+0xe8>
 8009110:	3c01      	subs	r4, #1
 8009112:	e7ea      	b.n	80090ea <quorem+0xe2>
 8009114:	2000      	movs	r0, #0
 8009116:	e7ee      	b.n	80090f6 <quorem+0xee>

08009118 <_dtoa_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	69c7      	ldr	r7, [r0, #28]
 800911e:	b097      	sub	sp, #92	@ 0x5c
 8009120:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009124:	ec55 4b10 	vmov	r4, r5, d0
 8009128:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800912a:	9107      	str	r1, [sp, #28]
 800912c:	4681      	mov	r9, r0
 800912e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009130:	9311      	str	r3, [sp, #68]	@ 0x44
 8009132:	b97f      	cbnz	r7, 8009154 <_dtoa_r+0x3c>
 8009134:	2010      	movs	r0, #16
 8009136:	f000 fe09 	bl	8009d4c <malloc>
 800913a:	4602      	mov	r2, r0
 800913c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009140:	b920      	cbnz	r0, 800914c <_dtoa_r+0x34>
 8009142:	4ba9      	ldr	r3, [pc, #676]	@ (80093e8 <_dtoa_r+0x2d0>)
 8009144:	21ef      	movs	r1, #239	@ 0xef
 8009146:	48a9      	ldr	r0, [pc, #676]	@ (80093ec <_dtoa_r+0x2d4>)
 8009148:	f002 fc2e 	bl	800b9a8 <__assert_func>
 800914c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009150:	6007      	str	r7, [r0, #0]
 8009152:	60c7      	str	r7, [r0, #12]
 8009154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009158:	6819      	ldr	r1, [r3, #0]
 800915a:	b159      	cbz	r1, 8009174 <_dtoa_r+0x5c>
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	604a      	str	r2, [r1, #4]
 8009160:	2301      	movs	r3, #1
 8009162:	4093      	lsls	r3, r2
 8009164:	608b      	str	r3, [r1, #8]
 8009166:	4648      	mov	r0, r9
 8009168:	f000 fee6 	bl	8009f38 <_Bfree>
 800916c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009170:	2200      	movs	r2, #0
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	1e2b      	subs	r3, r5, #0
 8009176:	bfb9      	ittee	lt
 8009178:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800917c:	9305      	strlt	r3, [sp, #20]
 800917e:	2300      	movge	r3, #0
 8009180:	6033      	strge	r3, [r6, #0]
 8009182:	9f05      	ldr	r7, [sp, #20]
 8009184:	4b9a      	ldr	r3, [pc, #616]	@ (80093f0 <_dtoa_r+0x2d8>)
 8009186:	bfbc      	itt	lt
 8009188:	2201      	movlt	r2, #1
 800918a:	6032      	strlt	r2, [r6, #0]
 800918c:	43bb      	bics	r3, r7
 800918e:	d112      	bne.n	80091b6 <_dtoa_r+0x9e>
 8009190:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009192:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800919c:	4323      	orrs	r3, r4
 800919e:	f000 855a 	beq.w	8009c56 <_dtoa_r+0xb3e>
 80091a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009404 <_dtoa_r+0x2ec>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 855c 	beq.w	8009c66 <_dtoa_r+0xb4e>
 80091ae:	f10a 0303 	add.w	r3, sl, #3
 80091b2:	f000 bd56 	b.w	8009c62 <_dtoa_r+0xb4a>
 80091b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80091ba:	2200      	movs	r2, #0
 80091bc:	ec51 0b17 	vmov	r0, r1, d7
 80091c0:	2300      	movs	r3, #0
 80091c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80091c6:	f7f7 fca7 	bl	8000b18 <__aeabi_dcmpeq>
 80091ca:	4680      	mov	r8, r0
 80091cc:	b158      	cbz	r0, 80091e6 <_dtoa_r+0xce>
 80091ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80091d0:	2301      	movs	r3, #1
 80091d2:	6013      	str	r3, [r2, #0]
 80091d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80091d6:	b113      	cbz	r3, 80091de <_dtoa_r+0xc6>
 80091d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80091da:	4b86      	ldr	r3, [pc, #536]	@ (80093f4 <_dtoa_r+0x2dc>)
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009408 <_dtoa_r+0x2f0>
 80091e2:	f000 bd40 	b.w	8009c66 <_dtoa_r+0xb4e>
 80091e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80091ea:	aa14      	add	r2, sp, #80	@ 0x50
 80091ec:	a915      	add	r1, sp, #84	@ 0x54
 80091ee:	4648      	mov	r0, r9
 80091f0:	f001 fa3e 	bl	800a670 <__d2b>
 80091f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091f8:	9002      	str	r0, [sp, #8]
 80091fa:	2e00      	cmp	r6, #0
 80091fc:	d078      	beq.n	80092f0 <_dtoa_r+0x1d8>
 80091fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009200:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800920c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009210:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009214:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009218:	4619      	mov	r1, r3
 800921a:	2200      	movs	r2, #0
 800921c:	4b76      	ldr	r3, [pc, #472]	@ (80093f8 <_dtoa_r+0x2e0>)
 800921e:	f7f7 f85b 	bl	80002d8 <__aeabi_dsub>
 8009222:	a36b      	add	r3, pc, #428	@ (adr r3, 80093d0 <_dtoa_r+0x2b8>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 fa0e 	bl	8000648 <__aeabi_dmul>
 800922c:	a36a      	add	r3, pc, #424	@ (adr r3, 80093d8 <_dtoa_r+0x2c0>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f7f7 f853 	bl	80002dc <__adddf3>
 8009236:	4604      	mov	r4, r0
 8009238:	4630      	mov	r0, r6
 800923a:	460d      	mov	r5, r1
 800923c:	f7f7 f99a 	bl	8000574 <__aeabi_i2d>
 8009240:	a367      	add	r3, pc, #412	@ (adr r3, 80093e0 <_dtoa_r+0x2c8>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 f9ff 	bl	8000648 <__aeabi_dmul>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f7 f843 	bl	80002dc <__adddf3>
 8009256:	4604      	mov	r4, r0
 8009258:	460d      	mov	r5, r1
 800925a:	f7f7 fca5 	bl	8000ba8 <__aeabi_d2iz>
 800925e:	2200      	movs	r2, #0
 8009260:	4607      	mov	r7, r0
 8009262:	2300      	movs	r3, #0
 8009264:	4620      	mov	r0, r4
 8009266:	4629      	mov	r1, r5
 8009268:	f7f7 fc60 	bl	8000b2c <__aeabi_dcmplt>
 800926c:	b140      	cbz	r0, 8009280 <_dtoa_r+0x168>
 800926e:	4638      	mov	r0, r7
 8009270:	f7f7 f980 	bl	8000574 <__aeabi_i2d>
 8009274:	4622      	mov	r2, r4
 8009276:	462b      	mov	r3, r5
 8009278:	f7f7 fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 800927c:	b900      	cbnz	r0, 8009280 <_dtoa_r+0x168>
 800927e:	3f01      	subs	r7, #1
 8009280:	2f16      	cmp	r7, #22
 8009282:	d852      	bhi.n	800932a <_dtoa_r+0x212>
 8009284:	4b5d      	ldr	r3, [pc, #372]	@ (80093fc <_dtoa_r+0x2e4>)
 8009286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009292:	f7f7 fc4b 	bl	8000b2c <__aeabi_dcmplt>
 8009296:	2800      	cmp	r0, #0
 8009298:	d049      	beq.n	800932e <_dtoa_r+0x216>
 800929a:	3f01      	subs	r7, #1
 800929c:	2300      	movs	r3, #0
 800929e:	9310      	str	r3, [sp, #64]	@ 0x40
 80092a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80092a2:	1b9b      	subs	r3, r3, r6
 80092a4:	1e5a      	subs	r2, r3, #1
 80092a6:	bf45      	ittet	mi
 80092a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80092ac:	9300      	strmi	r3, [sp, #0]
 80092ae:	2300      	movpl	r3, #0
 80092b0:	2300      	movmi	r3, #0
 80092b2:	9206      	str	r2, [sp, #24]
 80092b4:	bf54      	ite	pl
 80092b6:	9300      	strpl	r3, [sp, #0]
 80092b8:	9306      	strmi	r3, [sp, #24]
 80092ba:	2f00      	cmp	r7, #0
 80092bc:	db39      	blt.n	8009332 <_dtoa_r+0x21a>
 80092be:	9b06      	ldr	r3, [sp, #24]
 80092c0:	970d      	str	r7, [sp, #52]	@ 0x34
 80092c2:	443b      	add	r3, r7
 80092c4:	9306      	str	r3, [sp, #24]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9308      	str	r3, [sp, #32]
 80092ca:	9b07      	ldr	r3, [sp, #28]
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	d863      	bhi.n	8009398 <_dtoa_r+0x280>
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	bfc4      	itt	gt
 80092d4:	3b04      	subgt	r3, #4
 80092d6:	9307      	strgt	r3, [sp, #28]
 80092d8:	9b07      	ldr	r3, [sp, #28]
 80092da:	f1a3 0302 	sub.w	r3, r3, #2
 80092de:	bfcc      	ite	gt
 80092e0:	2400      	movgt	r4, #0
 80092e2:	2401      	movle	r4, #1
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d863      	bhi.n	80093b0 <_dtoa_r+0x298>
 80092e8:	e8df f003 	tbb	[pc, r3]
 80092ec:	2b375452 	.word	0x2b375452
 80092f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80092f4:	441e      	add	r6, r3
 80092f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	bfc1      	itttt	gt
 80092fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009302:	409f      	lslgt	r7, r3
 8009304:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009308:	fa24 f303 	lsrgt.w	r3, r4, r3
 800930c:	bfd6      	itet	le
 800930e:	f1c3 0320 	rsble	r3, r3, #32
 8009312:	ea47 0003 	orrgt.w	r0, r7, r3
 8009316:	fa04 f003 	lslle.w	r0, r4, r3
 800931a:	f7f7 f91b 	bl	8000554 <__aeabi_ui2d>
 800931e:	2201      	movs	r2, #1
 8009320:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009324:	3e01      	subs	r6, #1
 8009326:	9212      	str	r2, [sp, #72]	@ 0x48
 8009328:	e776      	b.n	8009218 <_dtoa_r+0x100>
 800932a:	2301      	movs	r3, #1
 800932c:	e7b7      	b.n	800929e <_dtoa_r+0x186>
 800932e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009330:	e7b6      	b.n	80092a0 <_dtoa_r+0x188>
 8009332:	9b00      	ldr	r3, [sp, #0]
 8009334:	1bdb      	subs	r3, r3, r7
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	427b      	negs	r3, r7
 800933a:	9308      	str	r3, [sp, #32]
 800933c:	2300      	movs	r3, #0
 800933e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009340:	e7c3      	b.n	80092ca <_dtoa_r+0x1b2>
 8009342:	2301      	movs	r3, #1
 8009344:	9309      	str	r3, [sp, #36]	@ 0x24
 8009346:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009348:	eb07 0b03 	add.w	fp, r7, r3
 800934c:	f10b 0301 	add.w	r3, fp, #1
 8009350:	2b01      	cmp	r3, #1
 8009352:	9303      	str	r3, [sp, #12]
 8009354:	bfb8      	it	lt
 8009356:	2301      	movlt	r3, #1
 8009358:	e006      	b.n	8009368 <_dtoa_r+0x250>
 800935a:	2301      	movs	r3, #1
 800935c:	9309      	str	r3, [sp, #36]	@ 0x24
 800935e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009360:	2b00      	cmp	r3, #0
 8009362:	dd28      	ble.n	80093b6 <_dtoa_r+0x29e>
 8009364:	469b      	mov	fp, r3
 8009366:	9303      	str	r3, [sp, #12]
 8009368:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800936c:	2100      	movs	r1, #0
 800936e:	2204      	movs	r2, #4
 8009370:	f102 0514 	add.w	r5, r2, #20
 8009374:	429d      	cmp	r5, r3
 8009376:	d926      	bls.n	80093c6 <_dtoa_r+0x2ae>
 8009378:	6041      	str	r1, [r0, #4]
 800937a:	4648      	mov	r0, r9
 800937c:	f000 fd9c 	bl	8009eb8 <_Balloc>
 8009380:	4682      	mov	sl, r0
 8009382:	2800      	cmp	r0, #0
 8009384:	d142      	bne.n	800940c <_dtoa_r+0x2f4>
 8009386:	4b1e      	ldr	r3, [pc, #120]	@ (8009400 <_dtoa_r+0x2e8>)
 8009388:	4602      	mov	r2, r0
 800938a:	f240 11af 	movw	r1, #431	@ 0x1af
 800938e:	e6da      	b.n	8009146 <_dtoa_r+0x2e>
 8009390:	2300      	movs	r3, #0
 8009392:	e7e3      	b.n	800935c <_dtoa_r+0x244>
 8009394:	2300      	movs	r3, #0
 8009396:	e7d5      	b.n	8009344 <_dtoa_r+0x22c>
 8009398:	2401      	movs	r4, #1
 800939a:	2300      	movs	r3, #0
 800939c:	9307      	str	r3, [sp, #28]
 800939e:	9409      	str	r4, [sp, #36]	@ 0x24
 80093a0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80093aa:	2312      	movs	r3, #18
 80093ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80093ae:	e7db      	b.n	8009368 <_dtoa_r+0x250>
 80093b0:	2301      	movs	r3, #1
 80093b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093b4:	e7f4      	b.n	80093a0 <_dtoa_r+0x288>
 80093b6:	f04f 0b01 	mov.w	fp, #1
 80093ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80093be:	465b      	mov	r3, fp
 80093c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80093c4:	e7d0      	b.n	8009368 <_dtoa_r+0x250>
 80093c6:	3101      	adds	r1, #1
 80093c8:	0052      	lsls	r2, r2, #1
 80093ca:	e7d1      	b.n	8009370 <_dtoa_r+0x258>
 80093cc:	f3af 8000 	nop.w
 80093d0:	636f4361 	.word	0x636f4361
 80093d4:	3fd287a7 	.word	0x3fd287a7
 80093d8:	8b60c8b3 	.word	0x8b60c8b3
 80093dc:	3fc68a28 	.word	0x3fc68a28
 80093e0:	509f79fb 	.word	0x509f79fb
 80093e4:	3fd34413 	.word	0x3fd34413
 80093e8:	0800d8d2 	.word	0x0800d8d2
 80093ec:	0800d8e9 	.word	0x0800d8e9
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	0800d89d 	.word	0x0800d89d
 80093f8:	3ff80000 	.word	0x3ff80000
 80093fc:	0800da98 	.word	0x0800da98
 8009400:	0800d941 	.word	0x0800d941
 8009404:	0800d8ce 	.word	0x0800d8ce
 8009408:	0800d89c 	.word	0x0800d89c
 800940c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009410:	6018      	str	r0, [r3, #0]
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	2b0e      	cmp	r3, #14
 8009416:	f200 80a1 	bhi.w	800955c <_dtoa_r+0x444>
 800941a:	2c00      	cmp	r4, #0
 800941c:	f000 809e 	beq.w	800955c <_dtoa_r+0x444>
 8009420:	2f00      	cmp	r7, #0
 8009422:	dd33      	ble.n	800948c <_dtoa_r+0x374>
 8009424:	4b9c      	ldr	r3, [pc, #624]	@ (8009698 <_dtoa_r+0x580>)
 8009426:	f007 020f 	and.w	r2, r7, #15
 800942a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800942e:	ed93 7b00 	vldr	d7, [r3]
 8009432:	05f8      	lsls	r0, r7, #23
 8009434:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009438:	ea4f 1427 	mov.w	r4, r7, asr #4
 800943c:	d516      	bpl.n	800946c <_dtoa_r+0x354>
 800943e:	4b97      	ldr	r3, [pc, #604]	@ (800969c <_dtoa_r+0x584>)
 8009440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009448:	f7f7 fa28 	bl	800089c <__aeabi_ddiv>
 800944c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009450:	f004 040f 	and.w	r4, r4, #15
 8009454:	2603      	movs	r6, #3
 8009456:	4d91      	ldr	r5, [pc, #580]	@ (800969c <_dtoa_r+0x584>)
 8009458:	b954      	cbnz	r4, 8009470 <_dtoa_r+0x358>
 800945a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800945e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009462:	f7f7 fa1b 	bl	800089c <__aeabi_ddiv>
 8009466:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800946a:	e028      	b.n	80094be <_dtoa_r+0x3a6>
 800946c:	2602      	movs	r6, #2
 800946e:	e7f2      	b.n	8009456 <_dtoa_r+0x33e>
 8009470:	07e1      	lsls	r1, r4, #31
 8009472:	d508      	bpl.n	8009486 <_dtoa_r+0x36e>
 8009474:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800947c:	f7f7 f8e4 	bl	8000648 <__aeabi_dmul>
 8009480:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009484:	3601      	adds	r6, #1
 8009486:	1064      	asrs	r4, r4, #1
 8009488:	3508      	adds	r5, #8
 800948a:	e7e5      	b.n	8009458 <_dtoa_r+0x340>
 800948c:	f000 80af 	beq.w	80095ee <_dtoa_r+0x4d6>
 8009490:	427c      	negs	r4, r7
 8009492:	4b81      	ldr	r3, [pc, #516]	@ (8009698 <_dtoa_r+0x580>)
 8009494:	4d81      	ldr	r5, [pc, #516]	@ (800969c <_dtoa_r+0x584>)
 8009496:	f004 020f 	and.w	r2, r4, #15
 800949a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094a6:	f7f7 f8cf 	bl	8000648 <__aeabi_dmul>
 80094aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094ae:	1124      	asrs	r4, r4, #4
 80094b0:	2300      	movs	r3, #0
 80094b2:	2602      	movs	r6, #2
 80094b4:	2c00      	cmp	r4, #0
 80094b6:	f040 808f 	bne.w	80095d8 <_dtoa_r+0x4c0>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1d3      	bne.n	8009466 <_dtoa_r+0x34e>
 80094be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 8094 	beq.w	80095f2 <_dtoa_r+0x4da>
 80094ca:	4b75      	ldr	r3, [pc, #468]	@ (80096a0 <_dtoa_r+0x588>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7f7 fb2b 	bl	8000b2c <__aeabi_dcmplt>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f000 808b 	beq.w	80095f2 <_dtoa_r+0x4da>
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 8087 	beq.w	80095f2 <_dtoa_r+0x4da>
 80094e4:	f1bb 0f00 	cmp.w	fp, #0
 80094e8:	dd34      	ble.n	8009554 <_dtoa_r+0x43c>
 80094ea:	4620      	mov	r0, r4
 80094ec:	4b6d      	ldr	r3, [pc, #436]	@ (80096a4 <_dtoa_r+0x58c>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	4629      	mov	r1, r5
 80094f2:	f7f7 f8a9 	bl	8000648 <__aeabi_dmul>
 80094f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094fa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80094fe:	3601      	adds	r6, #1
 8009500:	465c      	mov	r4, fp
 8009502:	4630      	mov	r0, r6
 8009504:	f7f7 f836 	bl	8000574 <__aeabi_i2d>
 8009508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800950c:	f7f7 f89c 	bl	8000648 <__aeabi_dmul>
 8009510:	4b65      	ldr	r3, [pc, #404]	@ (80096a8 <_dtoa_r+0x590>)
 8009512:	2200      	movs	r2, #0
 8009514:	f7f6 fee2 	bl	80002dc <__adddf3>
 8009518:	4605      	mov	r5, r0
 800951a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800951e:	2c00      	cmp	r4, #0
 8009520:	d16a      	bne.n	80095f8 <_dtoa_r+0x4e0>
 8009522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009526:	4b61      	ldr	r3, [pc, #388]	@ (80096ac <_dtoa_r+0x594>)
 8009528:	2200      	movs	r2, #0
 800952a:	f7f6 fed5 	bl	80002d8 <__aeabi_dsub>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009536:	462a      	mov	r2, r5
 8009538:	4633      	mov	r3, r6
 800953a:	f7f7 fb15 	bl	8000b68 <__aeabi_dcmpgt>
 800953e:	2800      	cmp	r0, #0
 8009540:	f040 8298 	bne.w	8009a74 <_dtoa_r+0x95c>
 8009544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009548:	462a      	mov	r2, r5
 800954a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800954e:	f7f7 faed 	bl	8000b2c <__aeabi_dcmplt>
 8009552:	bb38      	cbnz	r0, 80095a4 <_dtoa_r+0x48c>
 8009554:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009558:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800955c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800955e:	2b00      	cmp	r3, #0
 8009560:	f2c0 8157 	blt.w	8009812 <_dtoa_r+0x6fa>
 8009564:	2f0e      	cmp	r7, #14
 8009566:	f300 8154 	bgt.w	8009812 <_dtoa_r+0x6fa>
 800956a:	4b4b      	ldr	r3, [pc, #300]	@ (8009698 <_dtoa_r+0x580>)
 800956c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009570:	ed93 7b00 	vldr	d7, [r3]
 8009574:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009576:	2b00      	cmp	r3, #0
 8009578:	ed8d 7b00 	vstr	d7, [sp]
 800957c:	f280 80e5 	bge.w	800974a <_dtoa_r+0x632>
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f300 80e1 	bgt.w	800974a <_dtoa_r+0x632>
 8009588:	d10c      	bne.n	80095a4 <_dtoa_r+0x48c>
 800958a:	4b48      	ldr	r3, [pc, #288]	@ (80096ac <_dtoa_r+0x594>)
 800958c:	2200      	movs	r2, #0
 800958e:	ec51 0b17 	vmov	r0, r1, d7
 8009592:	f7f7 f859 	bl	8000648 <__aeabi_dmul>
 8009596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800959a:	f7f7 fadb 	bl	8000b54 <__aeabi_dcmpge>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f000 8266 	beq.w	8009a70 <_dtoa_r+0x958>
 80095a4:	2400      	movs	r4, #0
 80095a6:	4625      	mov	r5, r4
 80095a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095aa:	4656      	mov	r6, sl
 80095ac:	ea6f 0803 	mvn.w	r8, r3
 80095b0:	2700      	movs	r7, #0
 80095b2:	4621      	mov	r1, r4
 80095b4:	4648      	mov	r0, r9
 80095b6:	f000 fcbf 	bl	8009f38 <_Bfree>
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	f000 80bd 	beq.w	800973a <_dtoa_r+0x622>
 80095c0:	b12f      	cbz	r7, 80095ce <_dtoa_r+0x4b6>
 80095c2:	42af      	cmp	r7, r5
 80095c4:	d003      	beq.n	80095ce <_dtoa_r+0x4b6>
 80095c6:	4639      	mov	r1, r7
 80095c8:	4648      	mov	r0, r9
 80095ca:	f000 fcb5 	bl	8009f38 <_Bfree>
 80095ce:	4629      	mov	r1, r5
 80095d0:	4648      	mov	r0, r9
 80095d2:	f000 fcb1 	bl	8009f38 <_Bfree>
 80095d6:	e0b0      	b.n	800973a <_dtoa_r+0x622>
 80095d8:	07e2      	lsls	r2, r4, #31
 80095da:	d505      	bpl.n	80095e8 <_dtoa_r+0x4d0>
 80095dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095e0:	f7f7 f832 	bl	8000648 <__aeabi_dmul>
 80095e4:	3601      	adds	r6, #1
 80095e6:	2301      	movs	r3, #1
 80095e8:	1064      	asrs	r4, r4, #1
 80095ea:	3508      	adds	r5, #8
 80095ec:	e762      	b.n	80094b4 <_dtoa_r+0x39c>
 80095ee:	2602      	movs	r6, #2
 80095f0:	e765      	b.n	80094be <_dtoa_r+0x3a6>
 80095f2:	9c03      	ldr	r4, [sp, #12]
 80095f4:	46b8      	mov	r8, r7
 80095f6:	e784      	b.n	8009502 <_dtoa_r+0x3ea>
 80095f8:	4b27      	ldr	r3, [pc, #156]	@ (8009698 <_dtoa_r+0x580>)
 80095fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009604:	4454      	add	r4, sl
 8009606:	2900      	cmp	r1, #0
 8009608:	d054      	beq.n	80096b4 <_dtoa_r+0x59c>
 800960a:	4929      	ldr	r1, [pc, #164]	@ (80096b0 <_dtoa_r+0x598>)
 800960c:	2000      	movs	r0, #0
 800960e:	f7f7 f945 	bl	800089c <__aeabi_ddiv>
 8009612:	4633      	mov	r3, r6
 8009614:	462a      	mov	r2, r5
 8009616:	f7f6 fe5f 	bl	80002d8 <__aeabi_dsub>
 800961a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800961e:	4656      	mov	r6, sl
 8009620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009624:	f7f7 fac0 	bl	8000ba8 <__aeabi_d2iz>
 8009628:	4605      	mov	r5, r0
 800962a:	f7f6 ffa3 	bl	8000574 <__aeabi_i2d>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009636:	f7f6 fe4f 	bl	80002d8 <__aeabi_dsub>
 800963a:	3530      	adds	r5, #48	@ 0x30
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009644:	f806 5b01 	strb.w	r5, [r6], #1
 8009648:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800964c:	f7f7 fa6e 	bl	8000b2c <__aeabi_dcmplt>
 8009650:	2800      	cmp	r0, #0
 8009652:	d172      	bne.n	800973a <_dtoa_r+0x622>
 8009654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009658:	4911      	ldr	r1, [pc, #68]	@ (80096a0 <_dtoa_r+0x588>)
 800965a:	2000      	movs	r0, #0
 800965c:	f7f6 fe3c 	bl	80002d8 <__aeabi_dsub>
 8009660:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009664:	f7f7 fa62 	bl	8000b2c <__aeabi_dcmplt>
 8009668:	2800      	cmp	r0, #0
 800966a:	f040 80b4 	bne.w	80097d6 <_dtoa_r+0x6be>
 800966e:	42a6      	cmp	r6, r4
 8009670:	f43f af70 	beq.w	8009554 <_dtoa_r+0x43c>
 8009674:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009678:	4b0a      	ldr	r3, [pc, #40]	@ (80096a4 <_dtoa_r+0x58c>)
 800967a:	2200      	movs	r2, #0
 800967c:	f7f6 ffe4 	bl	8000648 <__aeabi_dmul>
 8009680:	4b08      	ldr	r3, [pc, #32]	@ (80096a4 <_dtoa_r+0x58c>)
 8009682:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009686:	2200      	movs	r2, #0
 8009688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800968c:	f7f6 ffdc 	bl	8000648 <__aeabi_dmul>
 8009690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009694:	e7c4      	b.n	8009620 <_dtoa_r+0x508>
 8009696:	bf00      	nop
 8009698:	0800da98 	.word	0x0800da98
 800969c:	0800da70 	.word	0x0800da70
 80096a0:	3ff00000 	.word	0x3ff00000
 80096a4:	40240000 	.word	0x40240000
 80096a8:	401c0000 	.word	0x401c0000
 80096ac:	40140000 	.word	0x40140000
 80096b0:	3fe00000 	.word	0x3fe00000
 80096b4:	4631      	mov	r1, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	f7f6 ffc6 	bl	8000648 <__aeabi_dmul>
 80096bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80096c2:	4656      	mov	r6, sl
 80096c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096c8:	f7f7 fa6e 	bl	8000ba8 <__aeabi_d2iz>
 80096cc:	4605      	mov	r5, r0
 80096ce:	f7f6 ff51 	bl	8000574 <__aeabi_i2d>
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096da:	f7f6 fdfd 	bl	80002d8 <__aeabi_dsub>
 80096de:	3530      	adds	r5, #48	@ 0x30
 80096e0:	f806 5b01 	strb.w	r5, [r6], #1
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	42a6      	cmp	r6, r4
 80096ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096ee:	f04f 0200 	mov.w	r2, #0
 80096f2:	d124      	bne.n	800973e <_dtoa_r+0x626>
 80096f4:	4baf      	ldr	r3, [pc, #700]	@ (80099b4 <_dtoa_r+0x89c>)
 80096f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096fa:	f7f6 fdef 	bl	80002dc <__adddf3>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009706:	f7f7 fa2f 	bl	8000b68 <__aeabi_dcmpgt>
 800970a:	2800      	cmp	r0, #0
 800970c:	d163      	bne.n	80097d6 <_dtoa_r+0x6be>
 800970e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009712:	49a8      	ldr	r1, [pc, #672]	@ (80099b4 <_dtoa_r+0x89c>)
 8009714:	2000      	movs	r0, #0
 8009716:	f7f6 fddf 	bl	80002d8 <__aeabi_dsub>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009722:	f7f7 fa03 	bl	8000b2c <__aeabi_dcmplt>
 8009726:	2800      	cmp	r0, #0
 8009728:	f43f af14 	beq.w	8009554 <_dtoa_r+0x43c>
 800972c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800972e:	1e73      	subs	r3, r6, #1
 8009730:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009732:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009736:	2b30      	cmp	r3, #48	@ 0x30
 8009738:	d0f8      	beq.n	800972c <_dtoa_r+0x614>
 800973a:	4647      	mov	r7, r8
 800973c:	e03b      	b.n	80097b6 <_dtoa_r+0x69e>
 800973e:	4b9e      	ldr	r3, [pc, #632]	@ (80099b8 <_dtoa_r+0x8a0>)
 8009740:	f7f6 ff82 	bl	8000648 <__aeabi_dmul>
 8009744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009748:	e7bc      	b.n	80096c4 <_dtoa_r+0x5ac>
 800974a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800974e:	4656      	mov	r6, sl
 8009750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009754:	4620      	mov	r0, r4
 8009756:	4629      	mov	r1, r5
 8009758:	f7f7 f8a0 	bl	800089c <__aeabi_ddiv>
 800975c:	f7f7 fa24 	bl	8000ba8 <__aeabi_d2iz>
 8009760:	4680      	mov	r8, r0
 8009762:	f7f6 ff07 	bl	8000574 <__aeabi_i2d>
 8009766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800976a:	f7f6 ff6d 	bl	8000648 <__aeabi_dmul>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	4620      	mov	r0, r4
 8009774:	4629      	mov	r1, r5
 8009776:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800977a:	f7f6 fdad 	bl	80002d8 <__aeabi_dsub>
 800977e:	f806 4b01 	strb.w	r4, [r6], #1
 8009782:	9d03      	ldr	r5, [sp, #12]
 8009784:	eba6 040a 	sub.w	r4, r6, sl
 8009788:	42a5      	cmp	r5, r4
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	d133      	bne.n	80097f8 <_dtoa_r+0x6e0>
 8009790:	f7f6 fda4 	bl	80002dc <__adddf3>
 8009794:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009798:	4604      	mov	r4, r0
 800979a:	460d      	mov	r5, r1
 800979c:	f7f7 f9e4 	bl	8000b68 <__aeabi_dcmpgt>
 80097a0:	b9c0      	cbnz	r0, 80097d4 <_dtoa_r+0x6bc>
 80097a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	f7f7 f9b5 	bl	8000b18 <__aeabi_dcmpeq>
 80097ae:	b110      	cbz	r0, 80097b6 <_dtoa_r+0x69e>
 80097b0:	f018 0f01 	tst.w	r8, #1
 80097b4:	d10e      	bne.n	80097d4 <_dtoa_r+0x6bc>
 80097b6:	9902      	ldr	r1, [sp, #8]
 80097b8:	4648      	mov	r0, r9
 80097ba:	f000 fbbd 	bl	8009f38 <_Bfree>
 80097be:	2300      	movs	r3, #0
 80097c0:	7033      	strb	r3, [r6, #0]
 80097c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097c4:	3701      	adds	r7, #1
 80097c6:	601f      	str	r7, [r3, #0]
 80097c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 824b 	beq.w	8009c66 <_dtoa_r+0xb4e>
 80097d0:	601e      	str	r6, [r3, #0]
 80097d2:	e248      	b.n	8009c66 <_dtoa_r+0xb4e>
 80097d4:	46b8      	mov	r8, r7
 80097d6:	4633      	mov	r3, r6
 80097d8:	461e      	mov	r6, r3
 80097da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097de:	2a39      	cmp	r2, #57	@ 0x39
 80097e0:	d106      	bne.n	80097f0 <_dtoa_r+0x6d8>
 80097e2:	459a      	cmp	sl, r3
 80097e4:	d1f8      	bne.n	80097d8 <_dtoa_r+0x6c0>
 80097e6:	2230      	movs	r2, #48	@ 0x30
 80097e8:	f108 0801 	add.w	r8, r8, #1
 80097ec:	f88a 2000 	strb.w	r2, [sl]
 80097f0:	781a      	ldrb	r2, [r3, #0]
 80097f2:	3201      	adds	r2, #1
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	e7a0      	b.n	800973a <_dtoa_r+0x622>
 80097f8:	4b6f      	ldr	r3, [pc, #444]	@ (80099b8 <_dtoa_r+0x8a0>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	f7f6 ff24 	bl	8000648 <__aeabi_dmul>
 8009800:	2200      	movs	r2, #0
 8009802:	2300      	movs	r3, #0
 8009804:	4604      	mov	r4, r0
 8009806:	460d      	mov	r5, r1
 8009808:	f7f7 f986 	bl	8000b18 <__aeabi_dcmpeq>
 800980c:	2800      	cmp	r0, #0
 800980e:	d09f      	beq.n	8009750 <_dtoa_r+0x638>
 8009810:	e7d1      	b.n	80097b6 <_dtoa_r+0x69e>
 8009812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009814:	2a00      	cmp	r2, #0
 8009816:	f000 80ea 	beq.w	80099ee <_dtoa_r+0x8d6>
 800981a:	9a07      	ldr	r2, [sp, #28]
 800981c:	2a01      	cmp	r2, #1
 800981e:	f300 80cd 	bgt.w	80099bc <_dtoa_r+0x8a4>
 8009822:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009824:	2a00      	cmp	r2, #0
 8009826:	f000 80c1 	beq.w	80099ac <_dtoa_r+0x894>
 800982a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800982e:	9c08      	ldr	r4, [sp, #32]
 8009830:	9e00      	ldr	r6, [sp, #0]
 8009832:	9a00      	ldr	r2, [sp, #0]
 8009834:	441a      	add	r2, r3
 8009836:	9200      	str	r2, [sp, #0]
 8009838:	9a06      	ldr	r2, [sp, #24]
 800983a:	2101      	movs	r1, #1
 800983c:	441a      	add	r2, r3
 800983e:	4648      	mov	r0, r9
 8009840:	9206      	str	r2, [sp, #24]
 8009842:	f000 fc77 	bl	800a134 <__i2b>
 8009846:	4605      	mov	r5, r0
 8009848:	b166      	cbz	r6, 8009864 <_dtoa_r+0x74c>
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	dd09      	ble.n	8009864 <_dtoa_r+0x74c>
 8009850:	42b3      	cmp	r3, r6
 8009852:	9a00      	ldr	r2, [sp, #0]
 8009854:	bfa8      	it	ge
 8009856:	4633      	movge	r3, r6
 8009858:	1ad2      	subs	r2, r2, r3
 800985a:	9200      	str	r2, [sp, #0]
 800985c:	9a06      	ldr	r2, [sp, #24]
 800985e:	1af6      	subs	r6, r6, r3
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	9306      	str	r3, [sp, #24]
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	b30b      	cbz	r3, 80098ac <_dtoa_r+0x794>
 8009868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 80c6 	beq.w	80099fc <_dtoa_r+0x8e4>
 8009870:	2c00      	cmp	r4, #0
 8009872:	f000 80c0 	beq.w	80099f6 <_dtoa_r+0x8de>
 8009876:	4629      	mov	r1, r5
 8009878:	4622      	mov	r2, r4
 800987a:	4648      	mov	r0, r9
 800987c:	f000 fd12 	bl	800a2a4 <__pow5mult>
 8009880:	9a02      	ldr	r2, [sp, #8]
 8009882:	4601      	mov	r1, r0
 8009884:	4605      	mov	r5, r0
 8009886:	4648      	mov	r0, r9
 8009888:	f000 fc6a 	bl	800a160 <__multiply>
 800988c:	9902      	ldr	r1, [sp, #8]
 800988e:	4680      	mov	r8, r0
 8009890:	4648      	mov	r0, r9
 8009892:	f000 fb51 	bl	8009f38 <_Bfree>
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	1b1b      	subs	r3, r3, r4
 800989a:	9308      	str	r3, [sp, #32]
 800989c:	f000 80b1 	beq.w	8009a02 <_dtoa_r+0x8ea>
 80098a0:	9a08      	ldr	r2, [sp, #32]
 80098a2:	4641      	mov	r1, r8
 80098a4:	4648      	mov	r0, r9
 80098a6:	f000 fcfd 	bl	800a2a4 <__pow5mult>
 80098aa:	9002      	str	r0, [sp, #8]
 80098ac:	2101      	movs	r1, #1
 80098ae:	4648      	mov	r0, r9
 80098b0:	f000 fc40 	bl	800a134 <__i2b>
 80098b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098b6:	4604      	mov	r4, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 81d8 	beq.w	8009c6e <_dtoa_r+0xb56>
 80098be:	461a      	mov	r2, r3
 80098c0:	4601      	mov	r1, r0
 80098c2:	4648      	mov	r0, r9
 80098c4:	f000 fcee 	bl	800a2a4 <__pow5mult>
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	4604      	mov	r4, r0
 80098ce:	f300 809f 	bgt.w	8009a10 <_dtoa_r+0x8f8>
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f040 8097 	bne.w	8009a08 <_dtoa_r+0x8f0>
 80098da:	9b05      	ldr	r3, [sp, #20]
 80098dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f040 8093 	bne.w	8009a0c <_dtoa_r+0x8f4>
 80098e6:	9b05      	ldr	r3, [sp, #20]
 80098e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098ec:	0d1b      	lsrs	r3, r3, #20
 80098ee:	051b      	lsls	r3, r3, #20
 80098f0:	b133      	cbz	r3, 8009900 <_dtoa_r+0x7e8>
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	3301      	adds	r3, #1
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	9b06      	ldr	r3, [sp, #24]
 80098fa:	3301      	adds	r3, #1
 80098fc:	9306      	str	r3, [sp, #24]
 80098fe:	2301      	movs	r3, #1
 8009900:	9308      	str	r3, [sp, #32]
 8009902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 81b8 	beq.w	8009c7a <_dtoa_r+0xb62>
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009910:	6918      	ldr	r0, [r3, #16]
 8009912:	f000 fbc3 	bl	800a09c <__hi0bits>
 8009916:	f1c0 0020 	rsb	r0, r0, #32
 800991a:	9b06      	ldr	r3, [sp, #24]
 800991c:	4418      	add	r0, r3
 800991e:	f010 001f 	ands.w	r0, r0, #31
 8009922:	f000 8082 	beq.w	8009a2a <_dtoa_r+0x912>
 8009926:	f1c0 0320 	rsb	r3, r0, #32
 800992a:	2b04      	cmp	r3, #4
 800992c:	dd73      	ble.n	8009a16 <_dtoa_r+0x8fe>
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	f1c0 001c 	rsb	r0, r0, #28
 8009934:	4403      	add	r3, r0
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	9b06      	ldr	r3, [sp, #24]
 800993a:	4403      	add	r3, r0
 800993c:	4406      	add	r6, r0
 800993e:	9306      	str	r3, [sp, #24]
 8009940:	9b00      	ldr	r3, [sp, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	dd05      	ble.n	8009952 <_dtoa_r+0x83a>
 8009946:	9902      	ldr	r1, [sp, #8]
 8009948:	461a      	mov	r2, r3
 800994a:	4648      	mov	r0, r9
 800994c:	f000 fd04 	bl	800a358 <__lshift>
 8009950:	9002      	str	r0, [sp, #8]
 8009952:	9b06      	ldr	r3, [sp, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	dd05      	ble.n	8009964 <_dtoa_r+0x84c>
 8009958:	4621      	mov	r1, r4
 800995a:	461a      	mov	r2, r3
 800995c:	4648      	mov	r0, r9
 800995e:	f000 fcfb 	bl	800a358 <__lshift>
 8009962:	4604      	mov	r4, r0
 8009964:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009966:	2b00      	cmp	r3, #0
 8009968:	d061      	beq.n	8009a2e <_dtoa_r+0x916>
 800996a:	9802      	ldr	r0, [sp, #8]
 800996c:	4621      	mov	r1, r4
 800996e:	f000 fd5f 	bl	800a430 <__mcmp>
 8009972:	2800      	cmp	r0, #0
 8009974:	da5b      	bge.n	8009a2e <_dtoa_r+0x916>
 8009976:	2300      	movs	r3, #0
 8009978:	9902      	ldr	r1, [sp, #8]
 800997a:	220a      	movs	r2, #10
 800997c:	4648      	mov	r0, r9
 800997e:	f000 fafd 	bl	8009f7c <__multadd>
 8009982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009984:	9002      	str	r0, [sp, #8]
 8009986:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 8177 	beq.w	8009c7e <_dtoa_r+0xb66>
 8009990:	4629      	mov	r1, r5
 8009992:	2300      	movs	r3, #0
 8009994:	220a      	movs	r2, #10
 8009996:	4648      	mov	r0, r9
 8009998:	f000 faf0 	bl	8009f7c <__multadd>
 800999c:	f1bb 0f00 	cmp.w	fp, #0
 80099a0:	4605      	mov	r5, r0
 80099a2:	dc6f      	bgt.n	8009a84 <_dtoa_r+0x96c>
 80099a4:	9b07      	ldr	r3, [sp, #28]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	dc49      	bgt.n	8009a3e <_dtoa_r+0x926>
 80099aa:	e06b      	b.n	8009a84 <_dtoa_r+0x96c>
 80099ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099b2:	e73c      	b.n	800982e <_dtoa_r+0x716>
 80099b4:	3fe00000 	.word	0x3fe00000
 80099b8:	40240000 	.word	0x40240000
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	1e5c      	subs	r4, r3, #1
 80099c0:	9b08      	ldr	r3, [sp, #32]
 80099c2:	42a3      	cmp	r3, r4
 80099c4:	db09      	blt.n	80099da <_dtoa_r+0x8c2>
 80099c6:	1b1c      	subs	r4, r3, r4
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f6bf af30 	bge.w	8009830 <_dtoa_r+0x718>
 80099d0:	9b00      	ldr	r3, [sp, #0]
 80099d2:	9a03      	ldr	r2, [sp, #12]
 80099d4:	1a9e      	subs	r6, r3, r2
 80099d6:	2300      	movs	r3, #0
 80099d8:	e72b      	b.n	8009832 <_dtoa_r+0x71a>
 80099da:	9b08      	ldr	r3, [sp, #32]
 80099dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099de:	9408      	str	r4, [sp, #32]
 80099e0:	1ae3      	subs	r3, r4, r3
 80099e2:	441a      	add	r2, r3
 80099e4:	9e00      	ldr	r6, [sp, #0]
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	920d      	str	r2, [sp, #52]	@ 0x34
 80099ea:	2400      	movs	r4, #0
 80099ec:	e721      	b.n	8009832 <_dtoa_r+0x71a>
 80099ee:	9c08      	ldr	r4, [sp, #32]
 80099f0:	9e00      	ldr	r6, [sp, #0]
 80099f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80099f4:	e728      	b.n	8009848 <_dtoa_r+0x730>
 80099f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80099fa:	e751      	b.n	80098a0 <_dtoa_r+0x788>
 80099fc:	9a08      	ldr	r2, [sp, #32]
 80099fe:	9902      	ldr	r1, [sp, #8]
 8009a00:	e750      	b.n	80098a4 <_dtoa_r+0x78c>
 8009a02:	f8cd 8008 	str.w	r8, [sp, #8]
 8009a06:	e751      	b.n	80098ac <_dtoa_r+0x794>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e779      	b.n	8009900 <_dtoa_r+0x7e8>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	e777      	b.n	8009900 <_dtoa_r+0x7e8>
 8009a10:	2300      	movs	r3, #0
 8009a12:	9308      	str	r3, [sp, #32]
 8009a14:	e779      	b.n	800990a <_dtoa_r+0x7f2>
 8009a16:	d093      	beq.n	8009940 <_dtoa_r+0x828>
 8009a18:	9a00      	ldr	r2, [sp, #0]
 8009a1a:	331c      	adds	r3, #28
 8009a1c:	441a      	add	r2, r3
 8009a1e:	9200      	str	r2, [sp, #0]
 8009a20:	9a06      	ldr	r2, [sp, #24]
 8009a22:	441a      	add	r2, r3
 8009a24:	441e      	add	r6, r3
 8009a26:	9206      	str	r2, [sp, #24]
 8009a28:	e78a      	b.n	8009940 <_dtoa_r+0x828>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	e7f4      	b.n	8009a18 <_dtoa_r+0x900>
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	46b8      	mov	r8, r7
 8009a34:	dc20      	bgt.n	8009a78 <_dtoa_r+0x960>
 8009a36:	469b      	mov	fp, r3
 8009a38:	9b07      	ldr	r3, [sp, #28]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	dd1e      	ble.n	8009a7c <_dtoa_r+0x964>
 8009a3e:	f1bb 0f00 	cmp.w	fp, #0
 8009a42:	f47f adb1 	bne.w	80095a8 <_dtoa_r+0x490>
 8009a46:	4621      	mov	r1, r4
 8009a48:	465b      	mov	r3, fp
 8009a4a:	2205      	movs	r2, #5
 8009a4c:	4648      	mov	r0, r9
 8009a4e:	f000 fa95 	bl	8009f7c <__multadd>
 8009a52:	4601      	mov	r1, r0
 8009a54:	4604      	mov	r4, r0
 8009a56:	9802      	ldr	r0, [sp, #8]
 8009a58:	f000 fcea 	bl	800a430 <__mcmp>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f77f ada3 	ble.w	80095a8 <_dtoa_r+0x490>
 8009a62:	4656      	mov	r6, sl
 8009a64:	2331      	movs	r3, #49	@ 0x31
 8009a66:	f806 3b01 	strb.w	r3, [r6], #1
 8009a6a:	f108 0801 	add.w	r8, r8, #1
 8009a6e:	e59f      	b.n	80095b0 <_dtoa_r+0x498>
 8009a70:	9c03      	ldr	r4, [sp, #12]
 8009a72:	46b8      	mov	r8, r7
 8009a74:	4625      	mov	r5, r4
 8009a76:	e7f4      	b.n	8009a62 <_dtoa_r+0x94a>
 8009a78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 8101 	beq.w	8009c86 <_dtoa_r+0xb6e>
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	dd05      	ble.n	8009a94 <_dtoa_r+0x97c>
 8009a88:	4629      	mov	r1, r5
 8009a8a:	4632      	mov	r2, r6
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f000 fc63 	bl	800a358 <__lshift>
 8009a92:	4605      	mov	r5, r0
 8009a94:	9b08      	ldr	r3, [sp, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d05c      	beq.n	8009b54 <_dtoa_r+0xa3c>
 8009a9a:	6869      	ldr	r1, [r5, #4]
 8009a9c:	4648      	mov	r0, r9
 8009a9e:	f000 fa0b 	bl	8009eb8 <_Balloc>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <_dtoa_r+0x99a>
 8009aa6:	4b82      	ldr	r3, [pc, #520]	@ (8009cb0 <_dtoa_r+0xb98>)
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009aae:	f7ff bb4a 	b.w	8009146 <_dtoa_r+0x2e>
 8009ab2:	692a      	ldr	r2, [r5, #16]
 8009ab4:	3202      	adds	r2, #2
 8009ab6:	0092      	lsls	r2, r2, #2
 8009ab8:	f105 010c 	add.w	r1, r5, #12
 8009abc:	300c      	adds	r0, #12
 8009abe:	f7ff fa8e 	bl	8008fde <memcpy>
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4648      	mov	r0, r9
 8009ac8:	f000 fc46 	bl	800a358 <__lshift>
 8009acc:	f10a 0301 	add.w	r3, sl, #1
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	eb0a 030b 	add.w	r3, sl, fp
 8009ad6:	9308      	str	r3, [sp, #32]
 8009ad8:	9b04      	ldr	r3, [sp, #16]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	462f      	mov	r7, r5
 8009ae0:	9306      	str	r3, [sp, #24]
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	9b00      	ldr	r3, [sp, #0]
 8009ae6:	9802      	ldr	r0, [sp, #8]
 8009ae8:	4621      	mov	r1, r4
 8009aea:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009aee:	f7ff fa8b 	bl	8009008 <quorem>
 8009af2:	4603      	mov	r3, r0
 8009af4:	3330      	adds	r3, #48	@ 0x30
 8009af6:	9003      	str	r0, [sp, #12]
 8009af8:	4639      	mov	r1, r7
 8009afa:	9802      	ldr	r0, [sp, #8]
 8009afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009afe:	f000 fc97 	bl	800a430 <__mcmp>
 8009b02:	462a      	mov	r2, r5
 8009b04:	9004      	str	r0, [sp, #16]
 8009b06:	4621      	mov	r1, r4
 8009b08:	4648      	mov	r0, r9
 8009b0a:	f000 fcad 	bl	800a468 <__mdiff>
 8009b0e:	68c2      	ldr	r2, [r0, #12]
 8009b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b12:	4606      	mov	r6, r0
 8009b14:	bb02      	cbnz	r2, 8009b58 <_dtoa_r+0xa40>
 8009b16:	4601      	mov	r1, r0
 8009b18:	9802      	ldr	r0, [sp, #8]
 8009b1a:	f000 fc89 	bl	800a430 <__mcmp>
 8009b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b20:	4602      	mov	r2, r0
 8009b22:	4631      	mov	r1, r6
 8009b24:	4648      	mov	r0, r9
 8009b26:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2a:	f000 fa05 	bl	8009f38 <_Bfree>
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009b32:	9e00      	ldr	r6, [sp, #0]
 8009b34:	ea42 0103 	orr.w	r1, r2, r3
 8009b38:	9b06      	ldr	r3, [sp, #24]
 8009b3a:	4319      	orrs	r1, r3
 8009b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3e:	d10d      	bne.n	8009b5c <_dtoa_r+0xa44>
 8009b40:	2b39      	cmp	r3, #57	@ 0x39
 8009b42:	d027      	beq.n	8009b94 <_dtoa_r+0xa7c>
 8009b44:	9a04      	ldr	r2, [sp, #16]
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	dd01      	ble.n	8009b4e <_dtoa_r+0xa36>
 8009b4a:	9b03      	ldr	r3, [sp, #12]
 8009b4c:	3331      	adds	r3, #49	@ 0x31
 8009b4e:	f88b 3000 	strb.w	r3, [fp]
 8009b52:	e52e      	b.n	80095b2 <_dtoa_r+0x49a>
 8009b54:	4628      	mov	r0, r5
 8009b56:	e7b9      	b.n	8009acc <_dtoa_r+0x9b4>
 8009b58:	2201      	movs	r2, #1
 8009b5a:	e7e2      	b.n	8009b22 <_dtoa_r+0xa0a>
 8009b5c:	9904      	ldr	r1, [sp, #16]
 8009b5e:	2900      	cmp	r1, #0
 8009b60:	db04      	blt.n	8009b6c <_dtoa_r+0xa54>
 8009b62:	9807      	ldr	r0, [sp, #28]
 8009b64:	4301      	orrs	r1, r0
 8009b66:	9806      	ldr	r0, [sp, #24]
 8009b68:	4301      	orrs	r1, r0
 8009b6a:	d120      	bne.n	8009bae <_dtoa_r+0xa96>
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	ddee      	ble.n	8009b4e <_dtoa_r+0xa36>
 8009b70:	9902      	ldr	r1, [sp, #8]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2201      	movs	r2, #1
 8009b76:	4648      	mov	r0, r9
 8009b78:	f000 fbee 	bl	800a358 <__lshift>
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	9002      	str	r0, [sp, #8]
 8009b80:	f000 fc56 	bl	800a430 <__mcmp>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	dc02      	bgt.n	8009b90 <_dtoa_r+0xa78>
 8009b8a:	d1e0      	bne.n	8009b4e <_dtoa_r+0xa36>
 8009b8c:	07da      	lsls	r2, r3, #31
 8009b8e:	d5de      	bpl.n	8009b4e <_dtoa_r+0xa36>
 8009b90:	2b39      	cmp	r3, #57	@ 0x39
 8009b92:	d1da      	bne.n	8009b4a <_dtoa_r+0xa32>
 8009b94:	2339      	movs	r3, #57	@ 0x39
 8009b96:	f88b 3000 	strb.w	r3, [fp]
 8009b9a:	4633      	mov	r3, r6
 8009b9c:	461e      	mov	r6, r3
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ba4:	2a39      	cmp	r2, #57	@ 0x39
 8009ba6:	d04e      	beq.n	8009c46 <_dtoa_r+0xb2e>
 8009ba8:	3201      	adds	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	e501      	b.n	80095b2 <_dtoa_r+0x49a>
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	dd03      	ble.n	8009bba <_dtoa_r+0xaa2>
 8009bb2:	2b39      	cmp	r3, #57	@ 0x39
 8009bb4:	d0ee      	beq.n	8009b94 <_dtoa_r+0xa7c>
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	e7c9      	b.n	8009b4e <_dtoa_r+0xa36>
 8009bba:	9a00      	ldr	r2, [sp, #0]
 8009bbc:	9908      	ldr	r1, [sp, #32]
 8009bbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bc2:	428a      	cmp	r2, r1
 8009bc4:	d028      	beq.n	8009c18 <_dtoa_r+0xb00>
 8009bc6:	9902      	ldr	r1, [sp, #8]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	220a      	movs	r2, #10
 8009bcc:	4648      	mov	r0, r9
 8009bce:	f000 f9d5 	bl	8009f7c <__multadd>
 8009bd2:	42af      	cmp	r7, r5
 8009bd4:	9002      	str	r0, [sp, #8]
 8009bd6:	f04f 0300 	mov.w	r3, #0
 8009bda:	f04f 020a 	mov.w	r2, #10
 8009bde:	4639      	mov	r1, r7
 8009be0:	4648      	mov	r0, r9
 8009be2:	d107      	bne.n	8009bf4 <_dtoa_r+0xadc>
 8009be4:	f000 f9ca 	bl	8009f7c <__multadd>
 8009be8:	4607      	mov	r7, r0
 8009bea:	4605      	mov	r5, r0
 8009bec:	9b00      	ldr	r3, [sp, #0]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	e777      	b.n	8009ae4 <_dtoa_r+0x9cc>
 8009bf4:	f000 f9c2 	bl	8009f7c <__multadd>
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	220a      	movs	r2, #10
 8009c00:	4648      	mov	r0, r9
 8009c02:	f000 f9bb 	bl	8009f7c <__multadd>
 8009c06:	4605      	mov	r5, r0
 8009c08:	e7f0      	b.n	8009bec <_dtoa_r+0xad4>
 8009c0a:	f1bb 0f00 	cmp.w	fp, #0
 8009c0e:	bfcc      	ite	gt
 8009c10:	465e      	movgt	r6, fp
 8009c12:	2601      	movle	r6, #1
 8009c14:	4456      	add	r6, sl
 8009c16:	2700      	movs	r7, #0
 8009c18:	9902      	ldr	r1, [sp, #8]
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	4648      	mov	r0, r9
 8009c20:	f000 fb9a 	bl	800a358 <__lshift>
 8009c24:	4621      	mov	r1, r4
 8009c26:	9002      	str	r0, [sp, #8]
 8009c28:	f000 fc02 	bl	800a430 <__mcmp>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	dcb4      	bgt.n	8009b9a <_dtoa_r+0xa82>
 8009c30:	d102      	bne.n	8009c38 <_dtoa_r+0xb20>
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	07db      	lsls	r3, r3, #31
 8009c36:	d4b0      	bmi.n	8009b9a <_dtoa_r+0xa82>
 8009c38:	4633      	mov	r3, r6
 8009c3a:	461e      	mov	r6, r3
 8009c3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c40:	2a30      	cmp	r2, #48	@ 0x30
 8009c42:	d0fa      	beq.n	8009c3a <_dtoa_r+0xb22>
 8009c44:	e4b5      	b.n	80095b2 <_dtoa_r+0x49a>
 8009c46:	459a      	cmp	sl, r3
 8009c48:	d1a8      	bne.n	8009b9c <_dtoa_r+0xa84>
 8009c4a:	2331      	movs	r3, #49	@ 0x31
 8009c4c:	f108 0801 	add.w	r8, r8, #1
 8009c50:	f88a 3000 	strb.w	r3, [sl]
 8009c54:	e4ad      	b.n	80095b2 <_dtoa_r+0x49a>
 8009c56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009cb4 <_dtoa_r+0xb9c>
 8009c5c:	b11b      	cbz	r3, 8009c66 <_dtoa_r+0xb4e>
 8009c5e:	f10a 0308 	add.w	r3, sl, #8
 8009c62:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	4650      	mov	r0, sl
 8009c68:	b017      	add	sp, #92	@ 0x5c
 8009c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6e:	9b07      	ldr	r3, [sp, #28]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	f77f ae2e 	ble.w	80098d2 <_dtoa_r+0x7ba>
 8009c76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c78:	9308      	str	r3, [sp, #32]
 8009c7a:	2001      	movs	r0, #1
 8009c7c:	e64d      	b.n	800991a <_dtoa_r+0x802>
 8009c7e:	f1bb 0f00 	cmp.w	fp, #0
 8009c82:	f77f aed9 	ble.w	8009a38 <_dtoa_r+0x920>
 8009c86:	4656      	mov	r6, sl
 8009c88:	9802      	ldr	r0, [sp, #8]
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	f7ff f9bc 	bl	8009008 <quorem>
 8009c90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009c94:	f806 3b01 	strb.w	r3, [r6], #1
 8009c98:	eba6 020a 	sub.w	r2, r6, sl
 8009c9c:	4593      	cmp	fp, r2
 8009c9e:	ddb4      	ble.n	8009c0a <_dtoa_r+0xaf2>
 8009ca0:	9902      	ldr	r1, [sp, #8]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	220a      	movs	r2, #10
 8009ca6:	4648      	mov	r0, r9
 8009ca8:	f000 f968 	bl	8009f7c <__multadd>
 8009cac:	9002      	str	r0, [sp, #8]
 8009cae:	e7eb      	b.n	8009c88 <_dtoa_r+0xb70>
 8009cb0:	0800d941 	.word	0x0800d941
 8009cb4:	0800d8c5 	.word	0x0800d8c5

08009cb8 <_free_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4605      	mov	r5, r0
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	d041      	beq.n	8009d44 <_free_r+0x8c>
 8009cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc4:	1f0c      	subs	r4, r1, #4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bfb8      	it	lt
 8009cca:	18e4      	addlt	r4, r4, r3
 8009ccc:	f000 f8e8 	bl	8009ea0 <__malloc_lock>
 8009cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009d48 <_free_r+0x90>)
 8009cd2:	6813      	ldr	r3, [r2, #0]
 8009cd4:	b933      	cbnz	r3, 8009ce4 <_free_r+0x2c>
 8009cd6:	6063      	str	r3, [r4, #4]
 8009cd8:	6014      	str	r4, [r2, #0]
 8009cda:	4628      	mov	r0, r5
 8009cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ce0:	f000 b8e4 	b.w	8009eac <__malloc_unlock>
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	d908      	bls.n	8009cfa <_free_r+0x42>
 8009ce8:	6820      	ldr	r0, [r4, #0]
 8009cea:	1821      	adds	r1, r4, r0
 8009cec:	428b      	cmp	r3, r1
 8009cee:	bf01      	itttt	eq
 8009cf0:	6819      	ldreq	r1, [r3, #0]
 8009cf2:	685b      	ldreq	r3, [r3, #4]
 8009cf4:	1809      	addeq	r1, r1, r0
 8009cf6:	6021      	streq	r1, [r4, #0]
 8009cf8:	e7ed      	b.n	8009cd6 <_free_r+0x1e>
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	b10b      	cbz	r3, 8009d04 <_free_r+0x4c>
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	d9fa      	bls.n	8009cfa <_free_r+0x42>
 8009d04:	6811      	ldr	r1, [r2, #0]
 8009d06:	1850      	adds	r0, r2, r1
 8009d08:	42a0      	cmp	r0, r4
 8009d0a:	d10b      	bne.n	8009d24 <_free_r+0x6c>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	4401      	add	r1, r0
 8009d10:	1850      	adds	r0, r2, r1
 8009d12:	4283      	cmp	r3, r0
 8009d14:	6011      	str	r1, [r2, #0]
 8009d16:	d1e0      	bne.n	8009cda <_free_r+0x22>
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	6053      	str	r3, [r2, #4]
 8009d1e:	4408      	add	r0, r1
 8009d20:	6010      	str	r0, [r2, #0]
 8009d22:	e7da      	b.n	8009cda <_free_r+0x22>
 8009d24:	d902      	bls.n	8009d2c <_free_r+0x74>
 8009d26:	230c      	movs	r3, #12
 8009d28:	602b      	str	r3, [r5, #0]
 8009d2a:	e7d6      	b.n	8009cda <_free_r+0x22>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	1821      	adds	r1, r4, r0
 8009d30:	428b      	cmp	r3, r1
 8009d32:	bf04      	itt	eq
 8009d34:	6819      	ldreq	r1, [r3, #0]
 8009d36:	685b      	ldreq	r3, [r3, #4]
 8009d38:	6063      	str	r3, [r4, #4]
 8009d3a:	bf04      	itt	eq
 8009d3c:	1809      	addeq	r1, r1, r0
 8009d3e:	6021      	streq	r1, [r4, #0]
 8009d40:	6054      	str	r4, [r2, #4]
 8009d42:	e7ca      	b.n	8009cda <_free_r+0x22>
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	bf00      	nop
 8009d48:	200007ec 	.word	0x200007ec

08009d4c <malloc>:
 8009d4c:	4b02      	ldr	r3, [pc, #8]	@ (8009d58 <malloc+0xc>)
 8009d4e:	4601      	mov	r1, r0
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f000 b825 	b.w	8009da0 <_malloc_r>
 8009d56:	bf00      	nop
 8009d58:	20000038 	.word	0x20000038

08009d5c <sbrk_aligned>:
 8009d5c:	b570      	push	{r4, r5, r6, lr}
 8009d5e:	4e0f      	ldr	r6, [pc, #60]	@ (8009d9c <sbrk_aligned+0x40>)
 8009d60:	460c      	mov	r4, r1
 8009d62:	6831      	ldr	r1, [r6, #0]
 8009d64:	4605      	mov	r5, r0
 8009d66:	b911      	cbnz	r1, 8009d6e <sbrk_aligned+0x12>
 8009d68:	f001 fe04 	bl	800b974 <_sbrk_r>
 8009d6c:	6030      	str	r0, [r6, #0]
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4628      	mov	r0, r5
 8009d72:	f001 fdff 	bl	800b974 <_sbrk_r>
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	d103      	bne.n	8009d82 <sbrk_aligned+0x26>
 8009d7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009d7e:	4620      	mov	r0, r4
 8009d80:	bd70      	pop	{r4, r5, r6, pc}
 8009d82:	1cc4      	adds	r4, r0, #3
 8009d84:	f024 0403 	bic.w	r4, r4, #3
 8009d88:	42a0      	cmp	r0, r4
 8009d8a:	d0f8      	beq.n	8009d7e <sbrk_aligned+0x22>
 8009d8c:	1a21      	subs	r1, r4, r0
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f001 fdf0 	bl	800b974 <_sbrk_r>
 8009d94:	3001      	adds	r0, #1
 8009d96:	d1f2      	bne.n	8009d7e <sbrk_aligned+0x22>
 8009d98:	e7ef      	b.n	8009d7a <sbrk_aligned+0x1e>
 8009d9a:	bf00      	nop
 8009d9c:	200007e8 	.word	0x200007e8

08009da0 <_malloc_r>:
 8009da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da4:	1ccd      	adds	r5, r1, #3
 8009da6:	f025 0503 	bic.w	r5, r5, #3
 8009daa:	3508      	adds	r5, #8
 8009dac:	2d0c      	cmp	r5, #12
 8009dae:	bf38      	it	cc
 8009db0:	250c      	movcc	r5, #12
 8009db2:	2d00      	cmp	r5, #0
 8009db4:	4606      	mov	r6, r0
 8009db6:	db01      	blt.n	8009dbc <_malloc_r+0x1c>
 8009db8:	42a9      	cmp	r1, r5
 8009dba:	d904      	bls.n	8009dc6 <_malloc_r+0x26>
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	6033      	str	r3, [r6, #0]
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e9c <_malloc_r+0xfc>
 8009dca:	f000 f869 	bl	8009ea0 <__malloc_lock>
 8009dce:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd2:	461c      	mov	r4, r3
 8009dd4:	bb44      	cbnz	r4, 8009e28 <_malloc_r+0x88>
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff ffbf 	bl	8009d5c <sbrk_aligned>
 8009dde:	1c43      	adds	r3, r0, #1
 8009de0:	4604      	mov	r4, r0
 8009de2:	d158      	bne.n	8009e96 <_malloc_r+0xf6>
 8009de4:	f8d8 4000 	ldr.w	r4, [r8]
 8009de8:	4627      	mov	r7, r4
 8009dea:	2f00      	cmp	r7, #0
 8009dec:	d143      	bne.n	8009e76 <_malloc_r+0xd6>
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d04b      	beq.n	8009e8a <_malloc_r+0xea>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	4639      	mov	r1, r7
 8009df6:	4630      	mov	r0, r6
 8009df8:	eb04 0903 	add.w	r9, r4, r3
 8009dfc:	f001 fdba 	bl	800b974 <_sbrk_r>
 8009e00:	4581      	cmp	r9, r0
 8009e02:	d142      	bne.n	8009e8a <_malloc_r+0xea>
 8009e04:	6821      	ldr	r1, [r4, #0]
 8009e06:	1a6d      	subs	r5, r5, r1
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff ffa6 	bl	8009d5c <sbrk_aligned>
 8009e10:	3001      	adds	r0, #1
 8009e12:	d03a      	beq.n	8009e8a <_malloc_r+0xea>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	442b      	add	r3, r5
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	bb62      	cbnz	r2, 8009e7c <_malloc_r+0xdc>
 8009e22:	f8c8 7000 	str.w	r7, [r8]
 8009e26:	e00f      	b.n	8009e48 <_malloc_r+0xa8>
 8009e28:	6822      	ldr	r2, [r4, #0]
 8009e2a:	1b52      	subs	r2, r2, r5
 8009e2c:	d420      	bmi.n	8009e70 <_malloc_r+0xd0>
 8009e2e:	2a0b      	cmp	r2, #11
 8009e30:	d917      	bls.n	8009e62 <_malloc_r+0xc2>
 8009e32:	1961      	adds	r1, r4, r5
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	6025      	str	r5, [r4, #0]
 8009e38:	bf18      	it	ne
 8009e3a:	6059      	strne	r1, [r3, #4]
 8009e3c:	6863      	ldr	r3, [r4, #4]
 8009e3e:	bf08      	it	eq
 8009e40:	f8c8 1000 	streq.w	r1, [r8]
 8009e44:	5162      	str	r2, [r4, r5]
 8009e46:	604b      	str	r3, [r1, #4]
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f000 f82f 	bl	8009eac <__malloc_unlock>
 8009e4e:	f104 000b 	add.w	r0, r4, #11
 8009e52:	1d23      	adds	r3, r4, #4
 8009e54:	f020 0007 	bic.w	r0, r0, #7
 8009e58:	1ac2      	subs	r2, r0, r3
 8009e5a:	bf1c      	itt	ne
 8009e5c:	1a1b      	subne	r3, r3, r0
 8009e5e:	50a3      	strne	r3, [r4, r2]
 8009e60:	e7af      	b.n	8009dc2 <_malloc_r+0x22>
 8009e62:	6862      	ldr	r2, [r4, #4]
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	bf0c      	ite	eq
 8009e68:	f8c8 2000 	streq.w	r2, [r8]
 8009e6c:	605a      	strne	r2, [r3, #4]
 8009e6e:	e7eb      	b.n	8009e48 <_malloc_r+0xa8>
 8009e70:	4623      	mov	r3, r4
 8009e72:	6864      	ldr	r4, [r4, #4]
 8009e74:	e7ae      	b.n	8009dd4 <_malloc_r+0x34>
 8009e76:	463c      	mov	r4, r7
 8009e78:	687f      	ldr	r7, [r7, #4]
 8009e7a:	e7b6      	b.n	8009dea <_malloc_r+0x4a>
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	d1fb      	bne.n	8009e7c <_malloc_r+0xdc>
 8009e84:	2300      	movs	r3, #0
 8009e86:	6053      	str	r3, [r2, #4]
 8009e88:	e7de      	b.n	8009e48 <_malloc_r+0xa8>
 8009e8a:	230c      	movs	r3, #12
 8009e8c:	6033      	str	r3, [r6, #0]
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f000 f80c 	bl	8009eac <__malloc_unlock>
 8009e94:	e794      	b.n	8009dc0 <_malloc_r+0x20>
 8009e96:	6005      	str	r5, [r0, #0]
 8009e98:	e7d6      	b.n	8009e48 <_malloc_r+0xa8>
 8009e9a:	bf00      	nop
 8009e9c:	200007ec 	.word	0x200007ec

08009ea0 <__malloc_lock>:
 8009ea0:	4801      	ldr	r0, [pc, #4]	@ (8009ea8 <__malloc_lock+0x8>)
 8009ea2:	f7ff b89a 	b.w	8008fda <__retarget_lock_acquire_recursive>
 8009ea6:	bf00      	nop
 8009ea8:	200007e4 	.word	0x200007e4

08009eac <__malloc_unlock>:
 8009eac:	4801      	ldr	r0, [pc, #4]	@ (8009eb4 <__malloc_unlock+0x8>)
 8009eae:	f7ff b895 	b.w	8008fdc <__retarget_lock_release_recursive>
 8009eb2:	bf00      	nop
 8009eb4:	200007e4 	.word	0x200007e4

08009eb8 <_Balloc>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	69c6      	ldr	r6, [r0, #28]
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	b976      	cbnz	r6, 8009ee0 <_Balloc+0x28>
 8009ec2:	2010      	movs	r0, #16
 8009ec4:	f7ff ff42 	bl	8009d4c <malloc>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	61e0      	str	r0, [r4, #28]
 8009ecc:	b920      	cbnz	r0, 8009ed8 <_Balloc+0x20>
 8009ece:	4b18      	ldr	r3, [pc, #96]	@ (8009f30 <_Balloc+0x78>)
 8009ed0:	4818      	ldr	r0, [pc, #96]	@ (8009f34 <_Balloc+0x7c>)
 8009ed2:	216b      	movs	r1, #107	@ 0x6b
 8009ed4:	f001 fd68 	bl	800b9a8 <__assert_func>
 8009ed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009edc:	6006      	str	r6, [r0, #0]
 8009ede:	60c6      	str	r6, [r0, #12]
 8009ee0:	69e6      	ldr	r6, [r4, #28]
 8009ee2:	68f3      	ldr	r3, [r6, #12]
 8009ee4:	b183      	cbz	r3, 8009f08 <_Balloc+0x50>
 8009ee6:	69e3      	ldr	r3, [r4, #28]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009eee:	b9b8      	cbnz	r0, 8009f20 <_Balloc+0x68>
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ef6:	1d72      	adds	r2, r6, #5
 8009ef8:	0092      	lsls	r2, r2, #2
 8009efa:	4620      	mov	r0, r4
 8009efc:	f001 fd72 	bl	800b9e4 <_calloc_r>
 8009f00:	b160      	cbz	r0, 8009f1c <_Balloc+0x64>
 8009f02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f06:	e00e      	b.n	8009f26 <_Balloc+0x6e>
 8009f08:	2221      	movs	r2, #33	@ 0x21
 8009f0a:	2104      	movs	r1, #4
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f001 fd69 	bl	800b9e4 <_calloc_r>
 8009f12:	69e3      	ldr	r3, [r4, #28]
 8009f14:	60f0      	str	r0, [r6, #12]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1e4      	bne.n	8009ee6 <_Balloc+0x2e>
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	6802      	ldr	r2, [r0, #0]
 8009f22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f26:	2300      	movs	r3, #0
 8009f28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f2c:	e7f7      	b.n	8009f1e <_Balloc+0x66>
 8009f2e:	bf00      	nop
 8009f30:	0800d8d2 	.word	0x0800d8d2
 8009f34:	0800d952 	.word	0x0800d952

08009f38 <_Bfree>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	69c6      	ldr	r6, [r0, #28]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	460c      	mov	r4, r1
 8009f40:	b976      	cbnz	r6, 8009f60 <_Bfree+0x28>
 8009f42:	2010      	movs	r0, #16
 8009f44:	f7ff ff02 	bl	8009d4c <malloc>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	61e8      	str	r0, [r5, #28]
 8009f4c:	b920      	cbnz	r0, 8009f58 <_Bfree+0x20>
 8009f4e:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <_Bfree+0x3c>)
 8009f50:	4809      	ldr	r0, [pc, #36]	@ (8009f78 <_Bfree+0x40>)
 8009f52:	218f      	movs	r1, #143	@ 0x8f
 8009f54:	f001 fd28 	bl	800b9a8 <__assert_func>
 8009f58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f5c:	6006      	str	r6, [r0, #0]
 8009f5e:	60c6      	str	r6, [r0, #12]
 8009f60:	b13c      	cbz	r4, 8009f72 <_Bfree+0x3a>
 8009f62:	69eb      	ldr	r3, [r5, #28]
 8009f64:	6862      	ldr	r2, [r4, #4]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f6c:	6021      	str	r1, [r4, #0]
 8009f6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	0800d8d2 	.word	0x0800d8d2
 8009f78:	0800d952 	.word	0x0800d952

08009f7c <__multadd>:
 8009f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f80:	690d      	ldr	r5, [r1, #16]
 8009f82:	4607      	mov	r7, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	461e      	mov	r6, r3
 8009f88:	f101 0c14 	add.w	ip, r1, #20
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f92:	b299      	uxth	r1, r3
 8009f94:	fb02 6101 	mla	r1, r2, r1, r6
 8009f98:	0c1e      	lsrs	r6, r3, #16
 8009f9a:	0c0b      	lsrs	r3, r1, #16
 8009f9c:	fb02 3306 	mla	r3, r2, r6, r3
 8009fa0:	b289      	uxth	r1, r1
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fa8:	4285      	cmp	r5, r0
 8009faa:	f84c 1b04 	str.w	r1, [ip], #4
 8009fae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fb2:	dcec      	bgt.n	8009f8e <__multadd+0x12>
 8009fb4:	b30e      	cbz	r6, 8009ffa <__multadd+0x7e>
 8009fb6:	68a3      	ldr	r3, [r4, #8]
 8009fb8:	42ab      	cmp	r3, r5
 8009fba:	dc19      	bgt.n	8009ff0 <__multadd+0x74>
 8009fbc:	6861      	ldr	r1, [r4, #4]
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	3101      	adds	r1, #1
 8009fc2:	f7ff ff79 	bl	8009eb8 <_Balloc>
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	b928      	cbnz	r0, 8009fd6 <__multadd+0x5a>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	4b0c      	ldr	r3, [pc, #48]	@ (800a000 <__multadd+0x84>)
 8009fce:	480d      	ldr	r0, [pc, #52]	@ (800a004 <__multadd+0x88>)
 8009fd0:	21ba      	movs	r1, #186	@ 0xba
 8009fd2:	f001 fce9 	bl	800b9a8 <__assert_func>
 8009fd6:	6922      	ldr	r2, [r4, #16]
 8009fd8:	3202      	adds	r2, #2
 8009fda:	f104 010c 	add.w	r1, r4, #12
 8009fde:	0092      	lsls	r2, r2, #2
 8009fe0:	300c      	adds	r0, #12
 8009fe2:	f7fe fffc 	bl	8008fde <memcpy>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4638      	mov	r0, r7
 8009fea:	f7ff ffa5 	bl	8009f38 <_Bfree>
 8009fee:	4644      	mov	r4, r8
 8009ff0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	615e      	str	r6, [r3, #20]
 8009ff8:	6125      	str	r5, [r4, #16]
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a000:	0800d941 	.word	0x0800d941
 800a004:	0800d952 	.word	0x0800d952

0800a008 <__s2b>:
 800a008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a00c:	460c      	mov	r4, r1
 800a00e:	4615      	mov	r5, r2
 800a010:	461f      	mov	r7, r3
 800a012:	2209      	movs	r2, #9
 800a014:	3308      	adds	r3, #8
 800a016:	4606      	mov	r6, r0
 800a018:	fb93 f3f2 	sdiv	r3, r3, r2
 800a01c:	2100      	movs	r1, #0
 800a01e:	2201      	movs	r2, #1
 800a020:	429a      	cmp	r2, r3
 800a022:	db09      	blt.n	800a038 <__s2b+0x30>
 800a024:	4630      	mov	r0, r6
 800a026:	f7ff ff47 	bl	8009eb8 <_Balloc>
 800a02a:	b940      	cbnz	r0, 800a03e <__s2b+0x36>
 800a02c:	4602      	mov	r2, r0
 800a02e:	4b19      	ldr	r3, [pc, #100]	@ (800a094 <__s2b+0x8c>)
 800a030:	4819      	ldr	r0, [pc, #100]	@ (800a098 <__s2b+0x90>)
 800a032:	21d3      	movs	r1, #211	@ 0xd3
 800a034:	f001 fcb8 	bl	800b9a8 <__assert_func>
 800a038:	0052      	lsls	r2, r2, #1
 800a03a:	3101      	adds	r1, #1
 800a03c:	e7f0      	b.n	800a020 <__s2b+0x18>
 800a03e:	9b08      	ldr	r3, [sp, #32]
 800a040:	6143      	str	r3, [r0, #20]
 800a042:	2d09      	cmp	r5, #9
 800a044:	f04f 0301 	mov.w	r3, #1
 800a048:	6103      	str	r3, [r0, #16]
 800a04a:	dd16      	ble.n	800a07a <__s2b+0x72>
 800a04c:	f104 0909 	add.w	r9, r4, #9
 800a050:	46c8      	mov	r8, r9
 800a052:	442c      	add	r4, r5
 800a054:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a058:	4601      	mov	r1, r0
 800a05a:	3b30      	subs	r3, #48	@ 0x30
 800a05c:	220a      	movs	r2, #10
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ff8c 	bl	8009f7c <__multadd>
 800a064:	45a0      	cmp	r8, r4
 800a066:	d1f5      	bne.n	800a054 <__s2b+0x4c>
 800a068:	f1a5 0408 	sub.w	r4, r5, #8
 800a06c:	444c      	add	r4, r9
 800a06e:	1b2d      	subs	r5, r5, r4
 800a070:	1963      	adds	r3, r4, r5
 800a072:	42bb      	cmp	r3, r7
 800a074:	db04      	blt.n	800a080 <__s2b+0x78>
 800a076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a07a:	340a      	adds	r4, #10
 800a07c:	2509      	movs	r5, #9
 800a07e:	e7f6      	b.n	800a06e <__s2b+0x66>
 800a080:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a084:	4601      	mov	r1, r0
 800a086:	3b30      	subs	r3, #48	@ 0x30
 800a088:	220a      	movs	r2, #10
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ff76 	bl	8009f7c <__multadd>
 800a090:	e7ee      	b.n	800a070 <__s2b+0x68>
 800a092:	bf00      	nop
 800a094:	0800d941 	.word	0x0800d941
 800a098:	0800d952 	.word	0x0800d952

0800a09c <__hi0bits>:
 800a09c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	bf36      	itet	cc
 800a0a4:	0403      	lslcc	r3, r0, #16
 800a0a6:	2000      	movcs	r0, #0
 800a0a8:	2010      	movcc	r0, #16
 800a0aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0ae:	bf3c      	itt	cc
 800a0b0:	021b      	lslcc	r3, r3, #8
 800a0b2:	3008      	addcc	r0, #8
 800a0b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0b8:	bf3c      	itt	cc
 800a0ba:	011b      	lslcc	r3, r3, #4
 800a0bc:	3004      	addcc	r0, #4
 800a0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c2:	bf3c      	itt	cc
 800a0c4:	009b      	lslcc	r3, r3, #2
 800a0c6:	3002      	addcc	r0, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	db05      	blt.n	800a0d8 <__hi0bits+0x3c>
 800a0cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0d0:	f100 0001 	add.w	r0, r0, #1
 800a0d4:	bf08      	it	eq
 800a0d6:	2020      	moveq	r0, #32
 800a0d8:	4770      	bx	lr

0800a0da <__lo0bits>:
 800a0da:	6803      	ldr	r3, [r0, #0]
 800a0dc:	4602      	mov	r2, r0
 800a0de:	f013 0007 	ands.w	r0, r3, #7
 800a0e2:	d00b      	beq.n	800a0fc <__lo0bits+0x22>
 800a0e4:	07d9      	lsls	r1, r3, #31
 800a0e6:	d421      	bmi.n	800a12c <__lo0bits+0x52>
 800a0e8:	0798      	lsls	r0, r3, #30
 800a0ea:	bf49      	itett	mi
 800a0ec:	085b      	lsrmi	r3, r3, #1
 800a0ee:	089b      	lsrpl	r3, r3, #2
 800a0f0:	2001      	movmi	r0, #1
 800a0f2:	6013      	strmi	r3, [r2, #0]
 800a0f4:	bf5c      	itt	pl
 800a0f6:	6013      	strpl	r3, [r2, #0]
 800a0f8:	2002      	movpl	r0, #2
 800a0fa:	4770      	bx	lr
 800a0fc:	b299      	uxth	r1, r3
 800a0fe:	b909      	cbnz	r1, 800a104 <__lo0bits+0x2a>
 800a100:	0c1b      	lsrs	r3, r3, #16
 800a102:	2010      	movs	r0, #16
 800a104:	b2d9      	uxtb	r1, r3
 800a106:	b909      	cbnz	r1, 800a10c <__lo0bits+0x32>
 800a108:	3008      	adds	r0, #8
 800a10a:	0a1b      	lsrs	r3, r3, #8
 800a10c:	0719      	lsls	r1, r3, #28
 800a10e:	bf04      	itt	eq
 800a110:	091b      	lsreq	r3, r3, #4
 800a112:	3004      	addeq	r0, #4
 800a114:	0799      	lsls	r1, r3, #30
 800a116:	bf04      	itt	eq
 800a118:	089b      	lsreq	r3, r3, #2
 800a11a:	3002      	addeq	r0, #2
 800a11c:	07d9      	lsls	r1, r3, #31
 800a11e:	d403      	bmi.n	800a128 <__lo0bits+0x4e>
 800a120:	085b      	lsrs	r3, r3, #1
 800a122:	f100 0001 	add.w	r0, r0, #1
 800a126:	d003      	beq.n	800a130 <__lo0bits+0x56>
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	4770      	bx	lr
 800a12c:	2000      	movs	r0, #0
 800a12e:	4770      	bx	lr
 800a130:	2020      	movs	r0, #32
 800a132:	4770      	bx	lr

0800a134 <__i2b>:
 800a134:	b510      	push	{r4, lr}
 800a136:	460c      	mov	r4, r1
 800a138:	2101      	movs	r1, #1
 800a13a:	f7ff febd 	bl	8009eb8 <_Balloc>
 800a13e:	4602      	mov	r2, r0
 800a140:	b928      	cbnz	r0, 800a14e <__i2b+0x1a>
 800a142:	4b05      	ldr	r3, [pc, #20]	@ (800a158 <__i2b+0x24>)
 800a144:	4805      	ldr	r0, [pc, #20]	@ (800a15c <__i2b+0x28>)
 800a146:	f240 1145 	movw	r1, #325	@ 0x145
 800a14a:	f001 fc2d 	bl	800b9a8 <__assert_func>
 800a14e:	2301      	movs	r3, #1
 800a150:	6144      	str	r4, [r0, #20]
 800a152:	6103      	str	r3, [r0, #16]
 800a154:	bd10      	pop	{r4, pc}
 800a156:	bf00      	nop
 800a158:	0800d941 	.word	0x0800d941
 800a15c:	0800d952 	.word	0x0800d952

0800a160 <__multiply>:
 800a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	4617      	mov	r7, r2
 800a166:	690a      	ldr	r2, [r1, #16]
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	bfa8      	it	ge
 800a16e:	463b      	movge	r3, r7
 800a170:	4689      	mov	r9, r1
 800a172:	bfa4      	itt	ge
 800a174:	460f      	movge	r7, r1
 800a176:	4699      	movge	r9, r3
 800a178:	693d      	ldr	r5, [r7, #16]
 800a17a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	eb05 060a 	add.w	r6, r5, sl
 800a186:	42b3      	cmp	r3, r6
 800a188:	b085      	sub	sp, #20
 800a18a:	bfb8      	it	lt
 800a18c:	3101      	addlt	r1, #1
 800a18e:	f7ff fe93 	bl	8009eb8 <_Balloc>
 800a192:	b930      	cbnz	r0, 800a1a2 <__multiply+0x42>
 800a194:	4602      	mov	r2, r0
 800a196:	4b41      	ldr	r3, [pc, #260]	@ (800a29c <__multiply+0x13c>)
 800a198:	4841      	ldr	r0, [pc, #260]	@ (800a2a0 <__multiply+0x140>)
 800a19a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a19e:	f001 fc03 	bl	800b9a8 <__assert_func>
 800a1a2:	f100 0414 	add.w	r4, r0, #20
 800a1a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a1aa:	4623      	mov	r3, r4
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	4573      	cmp	r3, lr
 800a1b0:	d320      	bcc.n	800a1f4 <__multiply+0x94>
 800a1b2:	f107 0814 	add.w	r8, r7, #20
 800a1b6:	f109 0114 	add.w	r1, r9, #20
 800a1ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a1be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a1c2:	9302      	str	r3, [sp, #8]
 800a1c4:	1beb      	subs	r3, r5, r7
 800a1c6:	3b15      	subs	r3, #21
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	3715      	adds	r7, #21
 800a1d0:	42bd      	cmp	r5, r7
 800a1d2:	bf38      	it	cc
 800a1d4:	2304      	movcc	r3, #4
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	9b02      	ldr	r3, [sp, #8]
 800a1da:	9103      	str	r1, [sp, #12]
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	d80c      	bhi.n	800a1fa <__multiply+0x9a>
 800a1e0:	2e00      	cmp	r6, #0
 800a1e2:	dd03      	ble.n	800a1ec <__multiply+0x8c>
 800a1e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d055      	beq.n	800a298 <__multiply+0x138>
 800a1ec:	6106      	str	r6, [r0, #16]
 800a1ee:	b005      	add	sp, #20
 800a1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f4:	f843 2b04 	str.w	r2, [r3], #4
 800a1f8:	e7d9      	b.n	800a1ae <__multiply+0x4e>
 800a1fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1fe:	f1ba 0f00 	cmp.w	sl, #0
 800a202:	d01f      	beq.n	800a244 <__multiply+0xe4>
 800a204:	46c4      	mov	ip, r8
 800a206:	46a1      	mov	r9, r4
 800a208:	2700      	movs	r7, #0
 800a20a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a20e:	f8d9 3000 	ldr.w	r3, [r9]
 800a212:	fa1f fb82 	uxth.w	fp, r2
 800a216:	b29b      	uxth	r3, r3
 800a218:	fb0a 330b 	mla	r3, sl, fp, r3
 800a21c:	443b      	add	r3, r7
 800a21e:	f8d9 7000 	ldr.w	r7, [r9]
 800a222:	0c12      	lsrs	r2, r2, #16
 800a224:	0c3f      	lsrs	r7, r7, #16
 800a226:	fb0a 7202 	mla	r2, sl, r2, r7
 800a22a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a22e:	b29b      	uxth	r3, r3
 800a230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a234:	4565      	cmp	r5, ip
 800a236:	f849 3b04 	str.w	r3, [r9], #4
 800a23a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a23e:	d8e4      	bhi.n	800a20a <__multiply+0xaa>
 800a240:	9b01      	ldr	r3, [sp, #4]
 800a242:	50e7      	str	r7, [r4, r3]
 800a244:	9b03      	ldr	r3, [sp, #12]
 800a246:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a24a:	3104      	adds	r1, #4
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	d020      	beq.n	800a294 <__multiply+0x134>
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	4647      	mov	r7, r8
 800a256:	46a4      	mov	ip, r4
 800a258:	f04f 0a00 	mov.w	sl, #0
 800a25c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a260:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a264:	fb09 220b 	mla	r2, r9, fp, r2
 800a268:	4452      	add	r2, sl
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a270:	f84c 3b04 	str.w	r3, [ip], #4
 800a274:	f857 3b04 	ldr.w	r3, [r7], #4
 800a278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a27c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a280:	fb09 330a 	mla	r3, r9, sl, r3
 800a284:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a288:	42bd      	cmp	r5, r7
 800a28a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a28e:	d8e5      	bhi.n	800a25c <__multiply+0xfc>
 800a290:	9a01      	ldr	r2, [sp, #4]
 800a292:	50a3      	str	r3, [r4, r2]
 800a294:	3404      	adds	r4, #4
 800a296:	e79f      	b.n	800a1d8 <__multiply+0x78>
 800a298:	3e01      	subs	r6, #1
 800a29a:	e7a1      	b.n	800a1e0 <__multiply+0x80>
 800a29c:	0800d941 	.word	0x0800d941
 800a2a0:	0800d952 	.word	0x0800d952

0800a2a4 <__pow5mult>:
 800a2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	4615      	mov	r5, r2
 800a2aa:	f012 0203 	ands.w	r2, r2, #3
 800a2ae:	4607      	mov	r7, r0
 800a2b0:	460e      	mov	r6, r1
 800a2b2:	d007      	beq.n	800a2c4 <__pow5mult+0x20>
 800a2b4:	4c25      	ldr	r4, [pc, #148]	@ (800a34c <__pow5mult+0xa8>)
 800a2b6:	3a01      	subs	r2, #1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2be:	f7ff fe5d 	bl	8009f7c <__multadd>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	10ad      	asrs	r5, r5, #2
 800a2c6:	d03d      	beq.n	800a344 <__pow5mult+0xa0>
 800a2c8:	69fc      	ldr	r4, [r7, #28]
 800a2ca:	b97c      	cbnz	r4, 800a2ec <__pow5mult+0x48>
 800a2cc:	2010      	movs	r0, #16
 800a2ce:	f7ff fd3d 	bl	8009d4c <malloc>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	61f8      	str	r0, [r7, #28]
 800a2d6:	b928      	cbnz	r0, 800a2e4 <__pow5mult+0x40>
 800a2d8:	4b1d      	ldr	r3, [pc, #116]	@ (800a350 <__pow5mult+0xac>)
 800a2da:	481e      	ldr	r0, [pc, #120]	@ (800a354 <__pow5mult+0xb0>)
 800a2dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2e0:	f001 fb62 	bl	800b9a8 <__assert_func>
 800a2e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2e8:	6004      	str	r4, [r0, #0]
 800a2ea:	60c4      	str	r4, [r0, #12]
 800a2ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2f4:	b94c      	cbnz	r4, 800a30a <__pow5mult+0x66>
 800a2f6:	f240 2171 	movw	r1, #625	@ 0x271
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	f7ff ff1a 	bl	800a134 <__i2b>
 800a300:	2300      	movs	r3, #0
 800a302:	f8c8 0008 	str.w	r0, [r8, #8]
 800a306:	4604      	mov	r4, r0
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	f04f 0900 	mov.w	r9, #0
 800a30e:	07eb      	lsls	r3, r5, #31
 800a310:	d50a      	bpl.n	800a328 <__pow5mult+0x84>
 800a312:	4631      	mov	r1, r6
 800a314:	4622      	mov	r2, r4
 800a316:	4638      	mov	r0, r7
 800a318:	f7ff ff22 	bl	800a160 <__multiply>
 800a31c:	4631      	mov	r1, r6
 800a31e:	4680      	mov	r8, r0
 800a320:	4638      	mov	r0, r7
 800a322:	f7ff fe09 	bl	8009f38 <_Bfree>
 800a326:	4646      	mov	r6, r8
 800a328:	106d      	asrs	r5, r5, #1
 800a32a:	d00b      	beq.n	800a344 <__pow5mult+0xa0>
 800a32c:	6820      	ldr	r0, [r4, #0]
 800a32e:	b938      	cbnz	r0, 800a340 <__pow5mult+0x9c>
 800a330:	4622      	mov	r2, r4
 800a332:	4621      	mov	r1, r4
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff ff13 	bl	800a160 <__multiply>
 800a33a:	6020      	str	r0, [r4, #0]
 800a33c:	f8c0 9000 	str.w	r9, [r0]
 800a340:	4604      	mov	r4, r0
 800a342:	e7e4      	b.n	800a30e <__pow5mult+0x6a>
 800a344:	4630      	mov	r0, r6
 800a346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34a:	bf00      	nop
 800a34c:	0800da64 	.word	0x0800da64
 800a350:	0800d8d2 	.word	0x0800d8d2
 800a354:	0800d952 	.word	0x0800d952

0800a358 <__lshift>:
 800a358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	460c      	mov	r4, r1
 800a35e:	6849      	ldr	r1, [r1, #4]
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a366:	68a3      	ldr	r3, [r4, #8]
 800a368:	4607      	mov	r7, r0
 800a36a:	4691      	mov	r9, r2
 800a36c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a370:	f108 0601 	add.w	r6, r8, #1
 800a374:	42b3      	cmp	r3, r6
 800a376:	db0b      	blt.n	800a390 <__lshift+0x38>
 800a378:	4638      	mov	r0, r7
 800a37a:	f7ff fd9d 	bl	8009eb8 <_Balloc>
 800a37e:	4605      	mov	r5, r0
 800a380:	b948      	cbnz	r0, 800a396 <__lshift+0x3e>
 800a382:	4602      	mov	r2, r0
 800a384:	4b28      	ldr	r3, [pc, #160]	@ (800a428 <__lshift+0xd0>)
 800a386:	4829      	ldr	r0, [pc, #164]	@ (800a42c <__lshift+0xd4>)
 800a388:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a38c:	f001 fb0c 	bl	800b9a8 <__assert_func>
 800a390:	3101      	adds	r1, #1
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	e7ee      	b.n	800a374 <__lshift+0x1c>
 800a396:	2300      	movs	r3, #0
 800a398:	f100 0114 	add.w	r1, r0, #20
 800a39c:	f100 0210 	add.w	r2, r0, #16
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	4553      	cmp	r3, sl
 800a3a4:	db33      	blt.n	800a40e <__lshift+0xb6>
 800a3a6:	6920      	ldr	r0, [r4, #16]
 800a3a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3ac:	f104 0314 	add.w	r3, r4, #20
 800a3b0:	f019 091f 	ands.w	r9, r9, #31
 800a3b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3bc:	d02b      	beq.n	800a416 <__lshift+0xbe>
 800a3be:	f1c9 0e20 	rsb	lr, r9, #32
 800a3c2:	468a      	mov	sl, r1
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a3cc:	4310      	orrs	r0, r2
 800a3ce:	f84a 0b04 	str.w	r0, [sl], #4
 800a3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3d6:	459c      	cmp	ip, r3
 800a3d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3dc:	d8f3      	bhi.n	800a3c6 <__lshift+0x6e>
 800a3de:	ebac 0304 	sub.w	r3, ip, r4
 800a3e2:	3b15      	subs	r3, #21
 800a3e4:	f023 0303 	bic.w	r3, r3, #3
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	f104 0015 	add.w	r0, r4, #21
 800a3ee:	4560      	cmp	r0, ip
 800a3f0:	bf88      	it	hi
 800a3f2:	2304      	movhi	r3, #4
 800a3f4:	50ca      	str	r2, [r1, r3]
 800a3f6:	b10a      	cbz	r2, 800a3fc <__lshift+0xa4>
 800a3f8:	f108 0602 	add.w	r6, r8, #2
 800a3fc:	3e01      	subs	r6, #1
 800a3fe:	4638      	mov	r0, r7
 800a400:	612e      	str	r6, [r5, #16]
 800a402:	4621      	mov	r1, r4
 800a404:	f7ff fd98 	bl	8009f38 <_Bfree>
 800a408:	4628      	mov	r0, r5
 800a40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a412:	3301      	adds	r3, #1
 800a414:	e7c5      	b.n	800a3a2 <__lshift+0x4a>
 800a416:	3904      	subs	r1, #4
 800a418:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a420:	459c      	cmp	ip, r3
 800a422:	d8f9      	bhi.n	800a418 <__lshift+0xc0>
 800a424:	e7ea      	b.n	800a3fc <__lshift+0xa4>
 800a426:	bf00      	nop
 800a428:	0800d941 	.word	0x0800d941
 800a42c:	0800d952 	.word	0x0800d952

0800a430 <__mcmp>:
 800a430:	690a      	ldr	r2, [r1, #16]
 800a432:	4603      	mov	r3, r0
 800a434:	6900      	ldr	r0, [r0, #16]
 800a436:	1a80      	subs	r0, r0, r2
 800a438:	b530      	push	{r4, r5, lr}
 800a43a:	d10e      	bne.n	800a45a <__mcmp+0x2a>
 800a43c:	3314      	adds	r3, #20
 800a43e:	3114      	adds	r1, #20
 800a440:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a444:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a44c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a450:	4295      	cmp	r5, r2
 800a452:	d003      	beq.n	800a45c <__mcmp+0x2c>
 800a454:	d205      	bcs.n	800a462 <__mcmp+0x32>
 800a456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a45a:	bd30      	pop	{r4, r5, pc}
 800a45c:	42a3      	cmp	r3, r4
 800a45e:	d3f3      	bcc.n	800a448 <__mcmp+0x18>
 800a460:	e7fb      	b.n	800a45a <__mcmp+0x2a>
 800a462:	2001      	movs	r0, #1
 800a464:	e7f9      	b.n	800a45a <__mcmp+0x2a>
	...

0800a468 <__mdiff>:
 800a468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	4689      	mov	r9, r1
 800a46e:	4606      	mov	r6, r0
 800a470:	4611      	mov	r1, r2
 800a472:	4648      	mov	r0, r9
 800a474:	4614      	mov	r4, r2
 800a476:	f7ff ffdb 	bl	800a430 <__mcmp>
 800a47a:	1e05      	subs	r5, r0, #0
 800a47c:	d112      	bne.n	800a4a4 <__mdiff+0x3c>
 800a47e:	4629      	mov	r1, r5
 800a480:	4630      	mov	r0, r6
 800a482:	f7ff fd19 	bl	8009eb8 <_Balloc>
 800a486:	4602      	mov	r2, r0
 800a488:	b928      	cbnz	r0, 800a496 <__mdiff+0x2e>
 800a48a:	4b3f      	ldr	r3, [pc, #252]	@ (800a588 <__mdiff+0x120>)
 800a48c:	f240 2137 	movw	r1, #567	@ 0x237
 800a490:	483e      	ldr	r0, [pc, #248]	@ (800a58c <__mdiff+0x124>)
 800a492:	f001 fa89 	bl	800b9a8 <__assert_func>
 800a496:	2301      	movs	r3, #1
 800a498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a49c:	4610      	mov	r0, r2
 800a49e:	b003      	add	sp, #12
 800a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a4:	bfbc      	itt	lt
 800a4a6:	464b      	movlt	r3, r9
 800a4a8:	46a1      	movlt	r9, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a4b0:	bfba      	itte	lt
 800a4b2:	461c      	movlt	r4, r3
 800a4b4:	2501      	movlt	r5, #1
 800a4b6:	2500      	movge	r5, #0
 800a4b8:	f7ff fcfe 	bl	8009eb8 <_Balloc>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	b918      	cbnz	r0, 800a4c8 <__mdiff+0x60>
 800a4c0:	4b31      	ldr	r3, [pc, #196]	@ (800a588 <__mdiff+0x120>)
 800a4c2:	f240 2145 	movw	r1, #581	@ 0x245
 800a4c6:	e7e3      	b.n	800a490 <__mdiff+0x28>
 800a4c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a4cc:	6926      	ldr	r6, [r4, #16]
 800a4ce:	60c5      	str	r5, [r0, #12]
 800a4d0:	f109 0310 	add.w	r3, r9, #16
 800a4d4:	f109 0514 	add.w	r5, r9, #20
 800a4d8:	f104 0e14 	add.w	lr, r4, #20
 800a4dc:	f100 0b14 	add.w	fp, r0, #20
 800a4e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	46d9      	mov	r9, fp
 800a4ec:	f04f 0c00 	mov.w	ip, #0
 800a4f0:	9b01      	ldr	r3, [sp, #4]
 800a4f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	fa1f f38a 	uxth.w	r3, sl
 800a500:	4619      	mov	r1, r3
 800a502:	b283      	uxth	r3, r0
 800a504:	1acb      	subs	r3, r1, r3
 800a506:	0c00      	lsrs	r0, r0, #16
 800a508:	4463      	add	r3, ip
 800a50a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a50e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a512:	b29b      	uxth	r3, r3
 800a514:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a518:	4576      	cmp	r6, lr
 800a51a:	f849 3b04 	str.w	r3, [r9], #4
 800a51e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a522:	d8e5      	bhi.n	800a4f0 <__mdiff+0x88>
 800a524:	1b33      	subs	r3, r6, r4
 800a526:	3b15      	subs	r3, #21
 800a528:	f023 0303 	bic.w	r3, r3, #3
 800a52c:	3415      	adds	r4, #21
 800a52e:	3304      	adds	r3, #4
 800a530:	42a6      	cmp	r6, r4
 800a532:	bf38      	it	cc
 800a534:	2304      	movcc	r3, #4
 800a536:	441d      	add	r5, r3
 800a538:	445b      	add	r3, fp
 800a53a:	461e      	mov	r6, r3
 800a53c:	462c      	mov	r4, r5
 800a53e:	4544      	cmp	r4, r8
 800a540:	d30e      	bcc.n	800a560 <__mdiff+0xf8>
 800a542:	f108 0103 	add.w	r1, r8, #3
 800a546:	1b49      	subs	r1, r1, r5
 800a548:	f021 0103 	bic.w	r1, r1, #3
 800a54c:	3d03      	subs	r5, #3
 800a54e:	45a8      	cmp	r8, r5
 800a550:	bf38      	it	cc
 800a552:	2100      	movcc	r1, #0
 800a554:	440b      	add	r3, r1
 800a556:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a55a:	b191      	cbz	r1, 800a582 <__mdiff+0x11a>
 800a55c:	6117      	str	r7, [r2, #16]
 800a55e:	e79d      	b.n	800a49c <__mdiff+0x34>
 800a560:	f854 1b04 	ldr.w	r1, [r4], #4
 800a564:	46e6      	mov	lr, ip
 800a566:	0c08      	lsrs	r0, r1, #16
 800a568:	fa1c fc81 	uxtah	ip, ip, r1
 800a56c:	4471      	add	r1, lr
 800a56e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a572:	b289      	uxth	r1, r1
 800a574:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a578:	f846 1b04 	str.w	r1, [r6], #4
 800a57c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a580:	e7dd      	b.n	800a53e <__mdiff+0xd6>
 800a582:	3f01      	subs	r7, #1
 800a584:	e7e7      	b.n	800a556 <__mdiff+0xee>
 800a586:	bf00      	nop
 800a588:	0800d941 	.word	0x0800d941
 800a58c:	0800d952 	.word	0x0800d952

0800a590 <__ulp>:
 800a590:	b082      	sub	sp, #8
 800a592:	ed8d 0b00 	vstr	d0, [sp]
 800a596:	9a01      	ldr	r2, [sp, #4]
 800a598:	4b0f      	ldr	r3, [pc, #60]	@ (800a5d8 <__ulp+0x48>)
 800a59a:	4013      	ands	r3, r2
 800a59c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	dc08      	bgt.n	800a5b6 <__ulp+0x26>
 800a5a4:	425b      	negs	r3, r3
 800a5a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a5aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a5ae:	da04      	bge.n	800a5ba <__ulp+0x2a>
 800a5b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a5b4:	4113      	asrs	r3, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	e008      	b.n	800a5cc <__ulp+0x3c>
 800a5ba:	f1a2 0314 	sub.w	r3, r2, #20
 800a5be:	2b1e      	cmp	r3, #30
 800a5c0:	bfda      	itte	le
 800a5c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a5c6:	40da      	lsrle	r2, r3
 800a5c8:	2201      	movgt	r2, #1
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	ec41 0b10 	vmov	d0, r0, r1
 800a5d4:	b002      	add	sp, #8
 800a5d6:	4770      	bx	lr
 800a5d8:	7ff00000 	.word	0x7ff00000

0800a5dc <__b2d>:
 800a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	6906      	ldr	r6, [r0, #16]
 800a5e2:	f100 0814 	add.w	r8, r0, #20
 800a5e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5ea:	1f37      	subs	r7, r6, #4
 800a5ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	f7ff fd53 	bl	800a09c <__hi0bits>
 800a5f6:	f1c0 0320 	rsb	r3, r0, #32
 800a5fa:	280a      	cmp	r0, #10
 800a5fc:	600b      	str	r3, [r1, #0]
 800a5fe:	491b      	ldr	r1, [pc, #108]	@ (800a66c <__b2d+0x90>)
 800a600:	dc15      	bgt.n	800a62e <__b2d+0x52>
 800a602:	f1c0 0c0b 	rsb	ip, r0, #11
 800a606:	fa22 f30c 	lsr.w	r3, r2, ip
 800a60a:	45b8      	cmp	r8, r7
 800a60c:	ea43 0501 	orr.w	r5, r3, r1
 800a610:	bf34      	ite	cc
 800a612:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a616:	2300      	movcs	r3, #0
 800a618:	3015      	adds	r0, #21
 800a61a:	fa02 f000 	lsl.w	r0, r2, r0
 800a61e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a622:	4303      	orrs	r3, r0
 800a624:	461c      	mov	r4, r3
 800a626:	ec45 4b10 	vmov	d0, r4, r5
 800a62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a62e:	45b8      	cmp	r8, r7
 800a630:	bf3a      	itte	cc
 800a632:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a636:	f1a6 0708 	subcc.w	r7, r6, #8
 800a63a:	2300      	movcs	r3, #0
 800a63c:	380b      	subs	r0, #11
 800a63e:	d012      	beq.n	800a666 <__b2d+0x8a>
 800a640:	f1c0 0120 	rsb	r1, r0, #32
 800a644:	fa23 f401 	lsr.w	r4, r3, r1
 800a648:	4082      	lsls	r2, r0
 800a64a:	4322      	orrs	r2, r4
 800a64c:	4547      	cmp	r7, r8
 800a64e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a652:	bf8c      	ite	hi
 800a654:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a658:	2200      	movls	r2, #0
 800a65a:	4083      	lsls	r3, r0
 800a65c:	40ca      	lsrs	r2, r1
 800a65e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a662:	4313      	orrs	r3, r2
 800a664:	e7de      	b.n	800a624 <__b2d+0x48>
 800a666:	ea42 0501 	orr.w	r5, r2, r1
 800a66a:	e7db      	b.n	800a624 <__b2d+0x48>
 800a66c:	3ff00000 	.word	0x3ff00000

0800a670 <__d2b>:
 800a670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a674:	460f      	mov	r7, r1
 800a676:	2101      	movs	r1, #1
 800a678:	ec59 8b10 	vmov	r8, r9, d0
 800a67c:	4616      	mov	r6, r2
 800a67e:	f7ff fc1b 	bl	8009eb8 <_Balloc>
 800a682:	4604      	mov	r4, r0
 800a684:	b930      	cbnz	r0, 800a694 <__d2b+0x24>
 800a686:	4602      	mov	r2, r0
 800a688:	4b23      	ldr	r3, [pc, #140]	@ (800a718 <__d2b+0xa8>)
 800a68a:	4824      	ldr	r0, [pc, #144]	@ (800a71c <__d2b+0xac>)
 800a68c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a690:	f001 f98a 	bl	800b9a8 <__assert_func>
 800a694:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a69c:	b10d      	cbz	r5, 800a6a2 <__d2b+0x32>
 800a69e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	f1b8 0300 	subs.w	r3, r8, #0
 800a6a8:	d023      	beq.n	800a6f2 <__d2b+0x82>
 800a6aa:	4668      	mov	r0, sp
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	f7ff fd14 	bl	800a0da <__lo0bits>
 800a6b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a6b6:	b1d0      	cbz	r0, 800a6ee <__d2b+0x7e>
 800a6b8:	f1c0 0320 	rsb	r3, r0, #32
 800a6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	40c2      	lsrs	r2, r0
 800a6c4:	6163      	str	r3, [r4, #20]
 800a6c6:	9201      	str	r2, [sp, #4]
 800a6c8:	9b01      	ldr	r3, [sp, #4]
 800a6ca:	61a3      	str	r3, [r4, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bf0c      	ite	eq
 800a6d0:	2201      	moveq	r2, #1
 800a6d2:	2202      	movne	r2, #2
 800a6d4:	6122      	str	r2, [r4, #16]
 800a6d6:	b1a5      	cbz	r5, 800a702 <__d2b+0x92>
 800a6d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a6dc:	4405      	add	r5, r0
 800a6de:	603d      	str	r5, [r7, #0]
 800a6e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a6e4:	6030      	str	r0, [r6, #0]
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	b003      	add	sp, #12
 800a6ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ee:	6161      	str	r1, [r4, #20]
 800a6f0:	e7ea      	b.n	800a6c8 <__d2b+0x58>
 800a6f2:	a801      	add	r0, sp, #4
 800a6f4:	f7ff fcf1 	bl	800a0da <__lo0bits>
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	6163      	str	r3, [r4, #20]
 800a6fc:	3020      	adds	r0, #32
 800a6fe:	2201      	movs	r2, #1
 800a700:	e7e8      	b.n	800a6d4 <__d2b+0x64>
 800a702:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a706:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a70a:	6038      	str	r0, [r7, #0]
 800a70c:	6918      	ldr	r0, [r3, #16]
 800a70e:	f7ff fcc5 	bl	800a09c <__hi0bits>
 800a712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a716:	e7e5      	b.n	800a6e4 <__d2b+0x74>
 800a718:	0800d941 	.word	0x0800d941
 800a71c:	0800d952 	.word	0x0800d952

0800a720 <__ratio>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	b085      	sub	sp, #20
 800a726:	e9cd 1000 	strd	r1, r0, [sp]
 800a72a:	a902      	add	r1, sp, #8
 800a72c:	f7ff ff56 	bl	800a5dc <__b2d>
 800a730:	9800      	ldr	r0, [sp, #0]
 800a732:	a903      	add	r1, sp, #12
 800a734:	ec55 4b10 	vmov	r4, r5, d0
 800a738:	f7ff ff50 	bl	800a5dc <__b2d>
 800a73c:	9b01      	ldr	r3, [sp, #4]
 800a73e:	6919      	ldr	r1, [r3, #16]
 800a740:	9b00      	ldr	r3, [sp, #0]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	1ac9      	subs	r1, r1, r3
 800a746:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a74a:	1a9b      	subs	r3, r3, r2
 800a74c:	ec5b ab10 	vmov	sl, fp, d0
 800a750:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a754:	2b00      	cmp	r3, #0
 800a756:	bfce      	itee	gt
 800a758:	462a      	movgt	r2, r5
 800a75a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a75e:	465a      	movle	r2, fp
 800a760:	462f      	mov	r7, r5
 800a762:	46d9      	mov	r9, fp
 800a764:	bfcc      	ite	gt
 800a766:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a76a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a76e:	464b      	mov	r3, r9
 800a770:	4652      	mov	r2, sl
 800a772:	4620      	mov	r0, r4
 800a774:	4639      	mov	r1, r7
 800a776:	f7f6 f891 	bl	800089c <__aeabi_ddiv>
 800a77a:	ec41 0b10 	vmov	d0, r0, r1
 800a77e:	b005      	add	sp, #20
 800a780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a784 <__copybits>:
 800a784:	3901      	subs	r1, #1
 800a786:	b570      	push	{r4, r5, r6, lr}
 800a788:	1149      	asrs	r1, r1, #5
 800a78a:	6914      	ldr	r4, [r2, #16]
 800a78c:	3101      	adds	r1, #1
 800a78e:	f102 0314 	add.w	r3, r2, #20
 800a792:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a796:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a79a:	1f05      	subs	r5, r0, #4
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d30c      	bcc.n	800a7ba <__copybits+0x36>
 800a7a0:	1aa3      	subs	r3, r4, r2
 800a7a2:	3b11      	subs	r3, #17
 800a7a4:	f023 0303 	bic.w	r3, r3, #3
 800a7a8:	3211      	adds	r2, #17
 800a7aa:	42a2      	cmp	r2, r4
 800a7ac:	bf88      	it	hi
 800a7ae:	2300      	movhi	r3, #0
 800a7b0:	4418      	add	r0, r3
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	4288      	cmp	r0, r1
 800a7b6:	d305      	bcc.n	800a7c4 <__copybits+0x40>
 800a7b8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7be:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7c2:	e7eb      	b.n	800a79c <__copybits+0x18>
 800a7c4:	f840 3b04 	str.w	r3, [r0], #4
 800a7c8:	e7f4      	b.n	800a7b4 <__copybits+0x30>

0800a7ca <__any_on>:
 800a7ca:	f100 0214 	add.w	r2, r0, #20
 800a7ce:	6900      	ldr	r0, [r0, #16]
 800a7d0:	114b      	asrs	r3, r1, #5
 800a7d2:	4298      	cmp	r0, r3
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	db11      	blt.n	800a7fc <__any_on+0x32>
 800a7d8:	dd0a      	ble.n	800a7f0 <__any_on+0x26>
 800a7da:	f011 011f 	ands.w	r1, r1, #31
 800a7de:	d007      	beq.n	800a7f0 <__any_on+0x26>
 800a7e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7e4:	fa24 f001 	lsr.w	r0, r4, r1
 800a7e8:	fa00 f101 	lsl.w	r1, r0, r1
 800a7ec:	428c      	cmp	r4, r1
 800a7ee:	d10b      	bne.n	800a808 <__any_on+0x3e>
 800a7f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d803      	bhi.n	800a800 <__any_on+0x36>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	bd10      	pop	{r4, pc}
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	e7f7      	b.n	800a7f0 <__any_on+0x26>
 800a800:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a804:	2900      	cmp	r1, #0
 800a806:	d0f5      	beq.n	800a7f4 <__any_on+0x2a>
 800a808:	2001      	movs	r0, #1
 800a80a:	e7f6      	b.n	800a7fa <__any_on+0x30>

0800a80c <sulp>:
 800a80c:	b570      	push	{r4, r5, r6, lr}
 800a80e:	4604      	mov	r4, r0
 800a810:	460d      	mov	r5, r1
 800a812:	ec45 4b10 	vmov	d0, r4, r5
 800a816:	4616      	mov	r6, r2
 800a818:	f7ff feba 	bl	800a590 <__ulp>
 800a81c:	ec51 0b10 	vmov	r0, r1, d0
 800a820:	b17e      	cbz	r6, 800a842 <sulp+0x36>
 800a822:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a826:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dd09      	ble.n	800a842 <sulp+0x36>
 800a82e:	051b      	lsls	r3, r3, #20
 800a830:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a834:	2400      	movs	r4, #0
 800a836:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a83a:	4622      	mov	r2, r4
 800a83c:	462b      	mov	r3, r5
 800a83e:	f7f5 ff03 	bl	8000648 <__aeabi_dmul>
 800a842:	ec41 0b10 	vmov	d0, r0, r1
 800a846:	bd70      	pop	{r4, r5, r6, pc}

0800a848 <_strtod_l>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	b09f      	sub	sp, #124	@ 0x7c
 800a84e:	460c      	mov	r4, r1
 800a850:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a852:	2200      	movs	r2, #0
 800a854:	921a      	str	r2, [sp, #104]	@ 0x68
 800a856:	9005      	str	r0, [sp, #20]
 800a858:	f04f 0a00 	mov.w	sl, #0
 800a85c:	f04f 0b00 	mov.w	fp, #0
 800a860:	460a      	mov	r2, r1
 800a862:	9219      	str	r2, [sp, #100]	@ 0x64
 800a864:	7811      	ldrb	r1, [r2, #0]
 800a866:	292b      	cmp	r1, #43	@ 0x2b
 800a868:	d04a      	beq.n	800a900 <_strtod_l+0xb8>
 800a86a:	d838      	bhi.n	800a8de <_strtod_l+0x96>
 800a86c:	290d      	cmp	r1, #13
 800a86e:	d832      	bhi.n	800a8d6 <_strtod_l+0x8e>
 800a870:	2908      	cmp	r1, #8
 800a872:	d832      	bhi.n	800a8da <_strtod_l+0x92>
 800a874:	2900      	cmp	r1, #0
 800a876:	d03b      	beq.n	800a8f0 <_strtod_l+0xa8>
 800a878:	2200      	movs	r2, #0
 800a87a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a87c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a87e:	782a      	ldrb	r2, [r5, #0]
 800a880:	2a30      	cmp	r2, #48	@ 0x30
 800a882:	f040 80b2 	bne.w	800a9ea <_strtod_l+0x1a2>
 800a886:	786a      	ldrb	r2, [r5, #1]
 800a888:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a88c:	2a58      	cmp	r2, #88	@ 0x58
 800a88e:	d16e      	bne.n	800a96e <_strtod_l+0x126>
 800a890:	9302      	str	r3, [sp, #8]
 800a892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	ab1a      	add	r3, sp, #104	@ 0x68
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	4a8f      	ldr	r2, [pc, #572]	@ (800aad8 <_strtod_l+0x290>)
 800a89c:	9805      	ldr	r0, [sp, #20]
 800a89e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a8a0:	a919      	add	r1, sp, #100	@ 0x64
 800a8a2:	f001 f91b 	bl	800badc <__gethex>
 800a8a6:	f010 060f 	ands.w	r6, r0, #15
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	d005      	beq.n	800a8ba <_strtod_l+0x72>
 800a8ae:	2e06      	cmp	r6, #6
 800a8b0:	d128      	bne.n	800a904 <_strtod_l+0xbc>
 800a8b2:	3501      	adds	r5, #1
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a8b8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f040 858e 	bne.w	800b3de <_strtod_l+0xb96>
 800a8c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8c4:	b1cb      	cbz	r3, 800a8fa <_strtod_l+0xb2>
 800a8c6:	4652      	mov	r2, sl
 800a8c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a8cc:	ec43 2b10 	vmov	d0, r2, r3
 800a8d0:	b01f      	add	sp, #124	@ 0x7c
 800a8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d6:	2920      	cmp	r1, #32
 800a8d8:	d1ce      	bne.n	800a878 <_strtod_l+0x30>
 800a8da:	3201      	adds	r2, #1
 800a8dc:	e7c1      	b.n	800a862 <_strtod_l+0x1a>
 800a8de:	292d      	cmp	r1, #45	@ 0x2d
 800a8e0:	d1ca      	bne.n	800a878 <_strtod_l+0x30>
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	910e      	str	r1, [sp, #56]	@ 0x38
 800a8e6:	1c51      	adds	r1, r2, #1
 800a8e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8ea:	7852      	ldrb	r2, [r2, #1]
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d1c5      	bne.n	800a87c <_strtod_l+0x34>
 800a8f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 8570 	bne.w	800b3da <_strtod_l+0xb92>
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	465b      	mov	r3, fp
 800a8fe:	e7e5      	b.n	800a8cc <_strtod_l+0x84>
 800a900:	2100      	movs	r1, #0
 800a902:	e7ef      	b.n	800a8e4 <_strtod_l+0x9c>
 800a904:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a906:	b13a      	cbz	r2, 800a918 <_strtod_l+0xd0>
 800a908:	2135      	movs	r1, #53	@ 0x35
 800a90a:	a81c      	add	r0, sp, #112	@ 0x70
 800a90c:	f7ff ff3a 	bl	800a784 <__copybits>
 800a910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a912:	9805      	ldr	r0, [sp, #20]
 800a914:	f7ff fb10 	bl	8009f38 <_Bfree>
 800a918:	3e01      	subs	r6, #1
 800a91a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a91c:	2e04      	cmp	r6, #4
 800a91e:	d806      	bhi.n	800a92e <_strtod_l+0xe6>
 800a920:	e8df f006 	tbb	[pc, r6]
 800a924:	201d0314 	.word	0x201d0314
 800a928:	14          	.byte	0x14
 800a929:	00          	.byte	0x00
 800a92a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a92e:	05e1      	lsls	r1, r4, #23
 800a930:	bf48      	it	mi
 800a932:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a93a:	0d1b      	lsrs	r3, r3, #20
 800a93c:	051b      	lsls	r3, r3, #20
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1bb      	bne.n	800a8ba <_strtod_l+0x72>
 800a942:	f7fe fb1f 	bl	8008f84 <__errno>
 800a946:	2322      	movs	r3, #34	@ 0x22
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	e7b6      	b.n	800a8ba <_strtod_l+0x72>
 800a94c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a950:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a954:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a958:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a95c:	e7e7      	b.n	800a92e <_strtod_l+0xe6>
 800a95e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800aae0 <_strtod_l+0x298>
 800a962:	e7e4      	b.n	800a92e <_strtod_l+0xe6>
 800a964:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a968:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a96c:	e7df      	b.n	800a92e <_strtod_l+0xe6>
 800a96e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	9219      	str	r2, [sp, #100]	@ 0x64
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b30      	cmp	r3, #48	@ 0x30
 800a978:	d0f9      	beq.n	800a96e <_strtod_l+0x126>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d09d      	beq.n	800a8ba <_strtod_l+0x72>
 800a97e:	2301      	movs	r3, #1
 800a980:	2700      	movs	r7, #0
 800a982:	9308      	str	r3, [sp, #32]
 800a984:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a986:	930c      	str	r3, [sp, #48]	@ 0x30
 800a988:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a98a:	46b9      	mov	r9, r7
 800a98c:	220a      	movs	r2, #10
 800a98e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a990:	7805      	ldrb	r5, [r0, #0]
 800a992:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a996:	b2d9      	uxtb	r1, r3
 800a998:	2909      	cmp	r1, #9
 800a99a:	d928      	bls.n	800a9ee <_strtod_l+0x1a6>
 800a99c:	494f      	ldr	r1, [pc, #316]	@ (800aadc <_strtod_l+0x294>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f000 ffd6 	bl	800b950 <strncmp>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d032      	beq.n	800aa0e <_strtod_l+0x1c6>
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800a9ae:	464d      	mov	r5, r9
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2a65      	cmp	r2, #101	@ 0x65
 800a9b4:	d001      	beq.n	800a9ba <_strtod_l+0x172>
 800a9b6:	2a45      	cmp	r2, #69	@ 0x45
 800a9b8:	d114      	bne.n	800a9e4 <_strtod_l+0x19c>
 800a9ba:	b91d      	cbnz	r5, 800a9c4 <_strtod_l+0x17c>
 800a9bc:	9a08      	ldr	r2, [sp, #32]
 800a9be:	4302      	orrs	r2, r0
 800a9c0:	d096      	beq.n	800a8f0 <_strtod_l+0xa8>
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a9c6:	1c62      	adds	r2, r4, #1
 800a9c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9ca:	7862      	ldrb	r2, [r4, #1]
 800a9cc:	2a2b      	cmp	r2, #43	@ 0x2b
 800a9ce:	d07a      	beq.n	800aac6 <_strtod_l+0x27e>
 800a9d0:	2a2d      	cmp	r2, #45	@ 0x2d
 800a9d2:	d07e      	beq.n	800aad2 <_strtod_l+0x28a>
 800a9d4:	f04f 0c00 	mov.w	ip, #0
 800a9d8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a9dc:	2909      	cmp	r1, #9
 800a9de:	f240 8085 	bls.w	800aaec <_strtod_l+0x2a4>
 800a9e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9e4:	f04f 0800 	mov.w	r8, #0
 800a9e8:	e0a5      	b.n	800ab36 <_strtod_l+0x2ee>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	e7c8      	b.n	800a980 <_strtod_l+0x138>
 800a9ee:	f1b9 0f08 	cmp.w	r9, #8
 800a9f2:	bfd8      	it	le
 800a9f4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a9f6:	f100 0001 	add.w	r0, r0, #1
 800a9fa:	bfda      	itte	le
 800a9fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa00:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800aa02:	fb02 3707 	mlagt	r7, r2, r7, r3
 800aa06:	f109 0901 	add.w	r9, r9, #1
 800aa0a:	9019      	str	r0, [sp, #100]	@ 0x64
 800aa0c:	e7bf      	b.n	800a98e <_strtod_l+0x146>
 800aa0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa14:	785a      	ldrb	r2, [r3, #1]
 800aa16:	f1b9 0f00 	cmp.w	r9, #0
 800aa1a:	d03b      	beq.n	800aa94 <_strtod_l+0x24c>
 800aa1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa1e:	464d      	mov	r5, r9
 800aa20:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aa24:	2b09      	cmp	r3, #9
 800aa26:	d912      	bls.n	800aa4e <_strtod_l+0x206>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e7c2      	b.n	800a9b2 <_strtod_l+0x16a>
 800aa2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa32:	785a      	ldrb	r2, [r3, #1]
 800aa34:	3001      	adds	r0, #1
 800aa36:	2a30      	cmp	r2, #48	@ 0x30
 800aa38:	d0f8      	beq.n	800aa2c <_strtod_l+0x1e4>
 800aa3a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aa3e:	2b08      	cmp	r3, #8
 800aa40:	f200 84d2 	bhi.w	800b3e8 <_strtod_l+0xba0>
 800aa44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa46:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa48:	2000      	movs	r0, #0
 800aa4a:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	3a30      	subs	r2, #48	@ 0x30
 800aa50:	f100 0301 	add.w	r3, r0, #1
 800aa54:	d018      	beq.n	800aa88 <_strtod_l+0x240>
 800aa56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa58:	4419      	add	r1, r3
 800aa5a:	910a      	str	r1, [sp, #40]	@ 0x28
 800aa5c:	462e      	mov	r6, r5
 800aa5e:	f04f 0e0a 	mov.w	lr, #10
 800aa62:	1c71      	adds	r1, r6, #1
 800aa64:	eba1 0c05 	sub.w	ip, r1, r5
 800aa68:	4563      	cmp	r3, ip
 800aa6a:	dc15      	bgt.n	800aa98 <_strtod_l+0x250>
 800aa6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800aa70:	182b      	adds	r3, r5, r0
 800aa72:	2b08      	cmp	r3, #8
 800aa74:	f105 0501 	add.w	r5, r5, #1
 800aa78:	4405      	add	r5, r0
 800aa7a:	dc1a      	bgt.n	800aab2 <_strtod_l+0x26a>
 800aa7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa7e:	230a      	movs	r3, #10
 800aa80:	fb03 2301 	mla	r3, r3, r1, r2
 800aa84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa86:	2300      	movs	r3, #0
 800aa88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa8a:	1c51      	adds	r1, r2, #1
 800aa8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa8e:	7852      	ldrb	r2, [r2, #1]
 800aa90:	4618      	mov	r0, r3
 800aa92:	e7c5      	b.n	800aa20 <_strtod_l+0x1d8>
 800aa94:	4648      	mov	r0, r9
 800aa96:	e7ce      	b.n	800aa36 <_strtod_l+0x1ee>
 800aa98:	2e08      	cmp	r6, #8
 800aa9a:	dc05      	bgt.n	800aaa8 <_strtod_l+0x260>
 800aa9c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800aa9e:	fb0e f606 	mul.w	r6, lr, r6
 800aaa2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800aaa4:	460e      	mov	r6, r1
 800aaa6:	e7dc      	b.n	800aa62 <_strtod_l+0x21a>
 800aaa8:	2910      	cmp	r1, #16
 800aaaa:	bfd8      	it	le
 800aaac:	fb0e f707 	mulle.w	r7, lr, r7
 800aab0:	e7f8      	b.n	800aaa4 <_strtod_l+0x25c>
 800aab2:	2b0f      	cmp	r3, #15
 800aab4:	bfdc      	itt	le
 800aab6:	230a      	movle	r3, #10
 800aab8:	fb03 2707 	mlale	r7, r3, r7, r2
 800aabc:	e7e3      	b.n	800aa86 <_strtod_l+0x23e>
 800aabe:	2300      	movs	r3, #0
 800aac0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aac2:	2301      	movs	r3, #1
 800aac4:	e77a      	b.n	800a9bc <_strtod_l+0x174>
 800aac6:	f04f 0c00 	mov.w	ip, #0
 800aaca:	1ca2      	adds	r2, r4, #2
 800aacc:	9219      	str	r2, [sp, #100]	@ 0x64
 800aace:	78a2      	ldrb	r2, [r4, #2]
 800aad0:	e782      	b.n	800a9d8 <_strtod_l+0x190>
 800aad2:	f04f 0c01 	mov.w	ip, #1
 800aad6:	e7f8      	b.n	800aaca <_strtod_l+0x282>
 800aad8:	0800db74 	.word	0x0800db74
 800aadc:	0800d9ab 	.word	0x0800d9ab
 800aae0:	7ff00000 	.word	0x7ff00000
 800aae4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aae6:	1c51      	adds	r1, r2, #1
 800aae8:	9119      	str	r1, [sp, #100]	@ 0x64
 800aaea:	7852      	ldrb	r2, [r2, #1]
 800aaec:	2a30      	cmp	r2, #48	@ 0x30
 800aaee:	d0f9      	beq.n	800aae4 <_strtod_l+0x29c>
 800aaf0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aaf4:	2908      	cmp	r1, #8
 800aaf6:	f63f af75 	bhi.w	800a9e4 <_strtod_l+0x19c>
 800aafa:	3a30      	subs	r2, #48	@ 0x30
 800aafc:	9209      	str	r2, [sp, #36]	@ 0x24
 800aafe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab00:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ab02:	f04f 080a 	mov.w	r8, #10
 800ab06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab08:	1c56      	adds	r6, r2, #1
 800ab0a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ab0c:	7852      	ldrb	r2, [r2, #1]
 800ab0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ab12:	f1be 0f09 	cmp.w	lr, #9
 800ab16:	d939      	bls.n	800ab8c <_strtod_l+0x344>
 800ab18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ab1a:	1a76      	subs	r6, r6, r1
 800ab1c:	2e08      	cmp	r6, #8
 800ab1e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ab22:	dc03      	bgt.n	800ab2c <_strtod_l+0x2e4>
 800ab24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab26:	4588      	cmp	r8, r1
 800ab28:	bfa8      	it	ge
 800ab2a:	4688      	movge	r8, r1
 800ab2c:	f1bc 0f00 	cmp.w	ip, #0
 800ab30:	d001      	beq.n	800ab36 <_strtod_l+0x2ee>
 800ab32:	f1c8 0800 	rsb	r8, r8, #0
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	d14e      	bne.n	800abd8 <_strtod_l+0x390>
 800ab3a:	9908      	ldr	r1, [sp, #32]
 800ab3c:	4308      	orrs	r0, r1
 800ab3e:	f47f aebc 	bne.w	800a8ba <_strtod_l+0x72>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f47f aed4 	bne.w	800a8f0 <_strtod_l+0xa8>
 800ab48:	2a69      	cmp	r2, #105	@ 0x69
 800ab4a:	d028      	beq.n	800ab9e <_strtod_l+0x356>
 800ab4c:	dc25      	bgt.n	800ab9a <_strtod_l+0x352>
 800ab4e:	2a49      	cmp	r2, #73	@ 0x49
 800ab50:	d025      	beq.n	800ab9e <_strtod_l+0x356>
 800ab52:	2a4e      	cmp	r2, #78	@ 0x4e
 800ab54:	f47f aecc 	bne.w	800a8f0 <_strtod_l+0xa8>
 800ab58:	499a      	ldr	r1, [pc, #616]	@ (800adc4 <_strtod_l+0x57c>)
 800ab5a:	a819      	add	r0, sp, #100	@ 0x64
 800ab5c:	f001 f9e0 	bl	800bf20 <__match>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f43f aec5 	beq.w	800a8f0 <_strtod_l+0xa8>
 800ab66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b28      	cmp	r3, #40	@ 0x28
 800ab6c:	d12e      	bne.n	800abcc <_strtod_l+0x384>
 800ab6e:	4996      	ldr	r1, [pc, #600]	@ (800adc8 <_strtod_l+0x580>)
 800ab70:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab72:	a819      	add	r0, sp, #100	@ 0x64
 800ab74:	f001 f9e8 	bl	800bf48 <__hexnan>
 800ab78:	2805      	cmp	r0, #5
 800ab7a:	d127      	bne.n	800abcc <_strtod_l+0x384>
 800ab7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ab82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ab86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab8a:	e696      	b.n	800a8ba <_strtod_l+0x72>
 800ab8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab8e:	fb08 2101 	mla	r1, r8, r1, r2
 800ab92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ab96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab98:	e7b5      	b.n	800ab06 <_strtod_l+0x2be>
 800ab9a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab9c:	e7da      	b.n	800ab54 <_strtod_l+0x30c>
 800ab9e:	498b      	ldr	r1, [pc, #556]	@ (800adcc <_strtod_l+0x584>)
 800aba0:	a819      	add	r0, sp, #100	@ 0x64
 800aba2:	f001 f9bd 	bl	800bf20 <__match>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f43f aea2 	beq.w	800a8f0 <_strtod_l+0xa8>
 800abac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abae:	4988      	ldr	r1, [pc, #544]	@ (800add0 <_strtod_l+0x588>)
 800abb0:	3b01      	subs	r3, #1
 800abb2:	a819      	add	r0, sp, #100	@ 0x64
 800abb4:	9319      	str	r3, [sp, #100]	@ 0x64
 800abb6:	f001 f9b3 	bl	800bf20 <__match>
 800abba:	b910      	cbnz	r0, 800abc2 <_strtod_l+0x37a>
 800abbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abbe:	3301      	adds	r3, #1
 800abc0:	9319      	str	r3, [sp, #100]	@ 0x64
 800abc2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ade0 <_strtod_l+0x598>
 800abc6:	f04f 0a00 	mov.w	sl, #0
 800abca:	e676      	b.n	800a8ba <_strtod_l+0x72>
 800abcc:	4881      	ldr	r0, [pc, #516]	@ (800add4 <_strtod_l+0x58c>)
 800abce:	f000 fee3 	bl	800b998 <nan>
 800abd2:	ec5b ab10 	vmov	sl, fp, d0
 800abd6:	e670      	b.n	800a8ba <_strtod_l+0x72>
 800abd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abda:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800abdc:	eba8 0303 	sub.w	r3, r8, r3
 800abe0:	f1b9 0f00 	cmp.w	r9, #0
 800abe4:	bf08      	it	eq
 800abe6:	46a9      	moveq	r9, r5
 800abe8:	2d10      	cmp	r5, #16
 800abea:	9309      	str	r3, [sp, #36]	@ 0x24
 800abec:	462c      	mov	r4, r5
 800abee:	bfa8      	it	ge
 800abf0:	2410      	movge	r4, #16
 800abf2:	f7f5 fcaf 	bl	8000554 <__aeabi_ui2d>
 800abf6:	2d09      	cmp	r5, #9
 800abf8:	4682      	mov	sl, r0
 800abfa:	468b      	mov	fp, r1
 800abfc:	dc13      	bgt.n	800ac26 <_strtod_l+0x3de>
 800abfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f43f ae5a 	beq.w	800a8ba <_strtod_l+0x72>
 800ac06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac08:	dd78      	ble.n	800acfc <_strtod_l+0x4b4>
 800ac0a:	2b16      	cmp	r3, #22
 800ac0c:	dc5f      	bgt.n	800acce <_strtod_l+0x486>
 800ac0e:	4972      	ldr	r1, [pc, #456]	@ (800add8 <_strtod_l+0x590>)
 800ac10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac18:	4652      	mov	r2, sl
 800ac1a:	465b      	mov	r3, fp
 800ac1c:	f7f5 fd14 	bl	8000648 <__aeabi_dmul>
 800ac20:	4682      	mov	sl, r0
 800ac22:	468b      	mov	fp, r1
 800ac24:	e649      	b.n	800a8ba <_strtod_l+0x72>
 800ac26:	4b6c      	ldr	r3, [pc, #432]	@ (800add8 <_strtod_l+0x590>)
 800ac28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ac30:	f7f5 fd0a 	bl	8000648 <__aeabi_dmul>
 800ac34:	4682      	mov	sl, r0
 800ac36:	4638      	mov	r0, r7
 800ac38:	468b      	mov	fp, r1
 800ac3a:	f7f5 fc8b 	bl	8000554 <__aeabi_ui2d>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4650      	mov	r0, sl
 800ac44:	4659      	mov	r1, fp
 800ac46:	f7f5 fb49 	bl	80002dc <__adddf3>
 800ac4a:	2d0f      	cmp	r5, #15
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	468b      	mov	fp, r1
 800ac50:	ddd5      	ble.n	800abfe <_strtod_l+0x3b6>
 800ac52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac54:	1b2c      	subs	r4, r5, r4
 800ac56:	441c      	add	r4, r3
 800ac58:	2c00      	cmp	r4, #0
 800ac5a:	f340 8093 	ble.w	800ad84 <_strtod_l+0x53c>
 800ac5e:	f014 030f 	ands.w	r3, r4, #15
 800ac62:	d00a      	beq.n	800ac7a <_strtod_l+0x432>
 800ac64:	495c      	ldr	r1, [pc, #368]	@ (800add8 <_strtod_l+0x590>)
 800ac66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac6a:	4652      	mov	r2, sl
 800ac6c:	465b      	mov	r3, fp
 800ac6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac72:	f7f5 fce9 	bl	8000648 <__aeabi_dmul>
 800ac76:	4682      	mov	sl, r0
 800ac78:	468b      	mov	fp, r1
 800ac7a:	f034 040f 	bics.w	r4, r4, #15
 800ac7e:	d073      	beq.n	800ad68 <_strtod_l+0x520>
 800ac80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ac84:	dd49      	ble.n	800ad1a <_strtod_l+0x4d2>
 800ac86:	2400      	movs	r4, #0
 800ac88:	46a0      	mov	r8, r4
 800ac8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac8c:	46a1      	mov	r9, r4
 800ac8e:	9a05      	ldr	r2, [sp, #20]
 800ac90:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ade0 <_strtod_l+0x598>
 800ac94:	2322      	movs	r3, #34	@ 0x22
 800ac96:	6013      	str	r3, [r2, #0]
 800ac98:	f04f 0a00 	mov.w	sl, #0
 800ac9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f43f ae0b 	beq.w	800a8ba <_strtod_l+0x72>
 800aca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aca6:	9805      	ldr	r0, [sp, #20]
 800aca8:	f7ff f946 	bl	8009f38 <_Bfree>
 800acac:	9805      	ldr	r0, [sp, #20]
 800acae:	4649      	mov	r1, r9
 800acb0:	f7ff f942 	bl	8009f38 <_Bfree>
 800acb4:	9805      	ldr	r0, [sp, #20]
 800acb6:	4641      	mov	r1, r8
 800acb8:	f7ff f93e 	bl	8009f38 <_Bfree>
 800acbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acbe:	9805      	ldr	r0, [sp, #20]
 800acc0:	f7ff f93a 	bl	8009f38 <_Bfree>
 800acc4:	9805      	ldr	r0, [sp, #20]
 800acc6:	4621      	mov	r1, r4
 800acc8:	f7ff f936 	bl	8009f38 <_Bfree>
 800accc:	e5f5      	b.n	800a8ba <_strtod_l+0x72>
 800acce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800acd4:	4293      	cmp	r3, r2
 800acd6:	dbbc      	blt.n	800ac52 <_strtod_l+0x40a>
 800acd8:	4c3f      	ldr	r4, [pc, #252]	@ (800add8 <_strtod_l+0x590>)
 800acda:	f1c5 050f 	rsb	r5, r5, #15
 800acde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ace2:	4652      	mov	r2, sl
 800ace4:	465b      	mov	r3, fp
 800ace6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acea:	f7f5 fcad 	bl	8000648 <__aeabi_dmul>
 800acee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf0:	1b5d      	subs	r5, r3, r5
 800acf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800acf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acfa:	e78f      	b.n	800ac1c <_strtod_l+0x3d4>
 800acfc:	3316      	adds	r3, #22
 800acfe:	dba8      	blt.n	800ac52 <_strtod_l+0x40a>
 800ad00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad02:	eba3 0808 	sub.w	r8, r3, r8
 800ad06:	4b34      	ldr	r3, [pc, #208]	@ (800add8 <_strtod_l+0x590>)
 800ad08:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ad0c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ad10:	4650      	mov	r0, sl
 800ad12:	4659      	mov	r1, fp
 800ad14:	f7f5 fdc2 	bl	800089c <__aeabi_ddiv>
 800ad18:	e782      	b.n	800ac20 <_strtod_l+0x3d8>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	4f2f      	ldr	r7, [pc, #188]	@ (800addc <_strtod_l+0x594>)
 800ad1e:	1124      	asrs	r4, r4, #4
 800ad20:	4650      	mov	r0, sl
 800ad22:	4659      	mov	r1, fp
 800ad24:	461e      	mov	r6, r3
 800ad26:	2c01      	cmp	r4, #1
 800ad28:	dc21      	bgt.n	800ad6e <_strtod_l+0x526>
 800ad2a:	b10b      	cbz	r3, 800ad30 <_strtod_l+0x4e8>
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	468b      	mov	fp, r1
 800ad30:	492a      	ldr	r1, [pc, #168]	@ (800addc <_strtod_l+0x594>)
 800ad32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ad36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ad3a:	4652      	mov	r2, sl
 800ad3c:	465b      	mov	r3, fp
 800ad3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad42:	f7f5 fc81 	bl	8000648 <__aeabi_dmul>
 800ad46:	4b26      	ldr	r3, [pc, #152]	@ (800ade0 <_strtod_l+0x598>)
 800ad48:	460a      	mov	r2, r1
 800ad4a:	400b      	ands	r3, r1
 800ad4c:	4925      	ldr	r1, [pc, #148]	@ (800ade4 <_strtod_l+0x59c>)
 800ad4e:	428b      	cmp	r3, r1
 800ad50:	4682      	mov	sl, r0
 800ad52:	d898      	bhi.n	800ac86 <_strtod_l+0x43e>
 800ad54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ad58:	428b      	cmp	r3, r1
 800ad5a:	bf86      	itte	hi
 800ad5c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ade8 <_strtod_l+0x5a0>
 800ad60:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ad64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ad68:	2300      	movs	r3, #0
 800ad6a:	9308      	str	r3, [sp, #32]
 800ad6c:	e076      	b.n	800ae5c <_strtod_l+0x614>
 800ad6e:	07e2      	lsls	r2, r4, #31
 800ad70:	d504      	bpl.n	800ad7c <_strtod_l+0x534>
 800ad72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad76:	f7f5 fc67 	bl	8000648 <__aeabi_dmul>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	1064      	asrs	r4, r4, #1
 800ad80:	3708      	adds	r7, #8
 800ad82:	e7d0      	b.n	800ad26 <_strtod_l+0x4de>
 800ad84:	d0f0      	beq.n	800ad68 <_strtod_l+0x520>
 800ad86:	4264      	negs	r4, r4
 800ad88:	f014 020f 	ands.w	r2, r4, #15
 800ad8c:	d00a      	beq.n	800ada4 <_strtod_l+0x55c>
 800ad8e:	4b12      	ldr	r3, [pc, #72]	@ (800add8 <_strtod_l+0x590>)
 800ad90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad94:	4650      	mov	r0, sl
 800ad96:	4659      	mov	r1, fp
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fd7e 	bl	800089c <__aeabi_ddiv>
 800ada0:	4682      	mov	sl, r0
 800ada2:	468b      	mov	fp, r1
 800ada4:	1124      	asrs	r4, r4, #4
 800ada6:	d0df      	beq.n	800ad68 <_strtod_l+0x520>
 800ada8:	2c1f      	cmp	r4, #31
 800adaa:	dd1f      	ble.n	800adec <_strtod_l+0x5a4>
 800adac:	2400      	movs	r4, #0
 800adae:	46a0      	mov	r8, r4
 800adb0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800adb2:	46a1      	mov	r9, r4
 800adb4:	9a05      	ldr	r2, [sp, #20]
 800adb6:	2322      	movs	r3, #34	@ 0x22
 800adb8:	f04f 0a00 	mov.w	sl, #0
 800adbc:	f04f 0b00 	mov.w	fp, #0
 800adc0:	6013      	str	r3, [r2, #0]
 800adc2:	e76b      	b.n	800ac9c <_strtod_l+0x454>
 800adc4:	0800d899 	.word	0x0800d899
 800adc8:	0800db60 	.word	0x0800db60
 800adcc:	0800d891 	.word	0x0800d891
 800add0:	0800d8c8 	.word	0x0800d8c8
 800add4:	0800da01 	.word	0x0800da01
 800add8:	0800da98 	.word	0x0800da98
 800addc:	0800da70 	.word	0x0800da70
 800ade0:	7ff00000 	.word	0x7ff00000
 800ade4:	7ca00000 	.word	0x7ca00000
 800ade8:	7fefffff 	.word	0x7fefffff
 800adec:	f014 0310 	ands.w	r3, r4, #16
 800adf0:	bf18      	it	ne
 800adf2:	236a      	movne	r3, #106	@ 0x6a
 800adf4:	4ea9      	ldr	r6, [pc, #676]	@ (800b09c <_strtod_l+0x854>)
 800adf6:	9308      	str	r3, [sp, #32]
 800adf8:	4650      	mov	r0, sl
 800adfa:	4659      	mov	r1, fp
 800adfc:	2300      	movs	r3, #0
 800adfe:	07e7      	lsls	r7, r4, #31
 800ae00:	d504      	bpl.n	800ae0c <_strtod_l+0x5c4>
 800ae02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae06:	f7f5 fc1f 	bl	8000648 <__aeabi_dmul>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	1064      	asrs	r4, r4, #1
 800ae0e:	f106 0608 	add.w	r6, r6, #8
 800ae12:	d1f4      	bne.n	800adfe <_strtod_l+0x5b6>
 800ae14:	b10b      	cbz	r3, 800ae1a <_strtod_l+0x5d2>
 800ae16:	4682      	mov	sl, r0
 800ae18:	468b      	mov	fp, r1
 800ae1a:	9b08      	ldr	r3, [sp, #32]
 800ae1c:	b1b3      	cbz	r3, 800ae4c <_strtod_l+0x604>
 800ae1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ae22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	4659      	mov	r1, fp
 800ae2a:	dd0f      	ble.n	800ae4c <_strtod_l+0x604>
 800ae2c:	2b1f      	cmp	r3, #31
 800ae2e:	dd56      	ble.n	800aede <_strtod_l+0x696>
 800ae30:	2b34      	cmp	r3, #52	@ 0x34
 800ae32:	bfde      	ittt	le
 800ae34:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ae38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ae3c:	4093      	lslle	r3, r2
 800ae3e:	f04f 0a00 	mov.w	sl, #0
 800ae42:	bfcc      	ite	gt
 800ae44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ae48:	ea03 0b01 	andle.w	fp, r3, r1
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4650      	mov	r0, sl
 800ae52:	4659      	mov	r1, fp
 800ae54:	f7f5 fe60 	bl	8000b18 <__aeabi_dcmpeq>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1a7      	bne.n	800adac <_strtod_l+0x564>
 800ae5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae62:	9805      	ldr	r0, [sp, #20]
 800ae64:	462b      	mov	r3, r5
 800ae66:	464a      	mov	r2, r9
 800ae68:	f7ff f8ce 	bl	800a008 <__s2b>
 800ae6c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f43f af09 	beq.w	800ac86 <_strtod_l+0x43e>
 800ae74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	eba3 0308 	sub.w	r3, r3, r8
 800ae7e:	bfa8      	it	ge
 800ae80:	2300      	movge	r3, #0
 800ae82:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae84:	2400      	movs	r4, #0
 800ae86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae8a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae8c:	46a0      	mov	r8, r4
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae90:	9805      	ldr	r0, [sp, #20]
 800ae92:	6859      	ldr	r1, [r3, #4]
 800ae94:	f7ff f810 	bl	8009eb8 <_Balloc>
 800ae98:	4681      	mov	r9, r0
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	f43f aef7 	beq.w	800ac8e <_strtod_l+0x446>
 800aea0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aea2:	691a      	ldr	r2, [r3, #16]
 800aea4:	3202      	adds	r2, #2
 800aea6:	f103 010c 	add.w	r1, r3, #12
 800aeaa:	0092      	lsls	r2, r2, #2
 800aeac:	300c      	adds	r0, #12
 800aeae:	f7fe f896 	bl	8008fde <memcpy>
 800aeb2:	ec4b ab10 	vmov	d0, sl, fp
 800aeb6:	9805      	ldr	r0, [sp, #20]
 800aeb8:	aa1c      	add	r2, sp, #112	@ 0x70
 800aeba:	a91b      	add	r1, sp, #108	@ 0x6c
 800aebc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aec0:	f7ff fbd6 	bl	800a670 <__d2b>
 800aec4:	901a      	str	r0, [sp, #104]	@ 0x68
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f43f aee1 	beq.w	800ac8e <_strtod_l+0x446>
 800aecc:	9805      	ldr	r0, [sp, #20]
 800aece:	2101      	movs	r1, #1
 800aed0:	f7ff f930 	bl	800a134 <__i2b>
 800aed4:	4680      	mov	r8, r0
 800aed6:	b948      	cbnz	r0, 800aeec <_strtod_l+0x6a4>
 800aed8:	f04f 0800 	mov.w	r8, #0
 800aedc:	e6d7      	b.n	800ac8e <_strtod_l+0x446>
 800aede:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aee2:	fa02 f303 	lsl.w	r3, r2, r3
 800aee6:	ea03 0a0a 	and.w	sl, r3, sl
 800aeea:	e7af      	b.n	800ae4c <_strtod_l+0x604>
 800aeec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aeee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aef0:	2d00      	cmp	r5, #0
 800aef2:	bfab      	itete	ge
 800aef4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aef6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aef8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aefa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aefc:	bfac      	ite	ge
 800aefe:	18ef      	addge	r7, r5, r3
 800af00:	1b5e      	sublt	r6, r3, r5
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	1aed      	subs	r5, r5, r3
 800af06:	4415      	add	r5, r2
 800af08:	4b65      	ldr	r3, [pc, #404]	@ (800b0a0 <_strtod_l+0x858>)
 800af0a:	3d01      	subs	r5, #1
 800af0c:	429d      	cmp	r5, r3
 800af0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800af12:	da50      	bge.n	800afb6 <_strtod_l+0x76e>
 800af14:	1b5b      	subs	r3, r3, r5
 800af16:	2b1f      	cmp	r3, #31
 800af18:	eba2 0203 	sub.w	r2, r2, r3
 800af1c:	f04f 0101 	mov.w	r1, #1
 800af20:	dc3d      	bgt.n	800af9e <_strtod_l+0x756>
 800af22:	fa01 f303 	lsl.w	r3, r1, r3
 800af26:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af28:	2300      	movs	r3, #0
 800af2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800af2c:	18bd      	adds	r5, r7, r2
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	42af      	cmp	r7, r5
 800af32:	4416      	add	r6, r2
 800af34:	441e      	add	r6, r3
 800af36:	463b      	mov	r3, r7
 800af38:	bfa8      	it	ge
 800af3a:	462b      	movge	r3, r5
 800af3c:	42b3      	cmp	r3, r6
 800af3e:	bfa8      	it	ge
 800af40:	4633      	movge	r3, r6
 800af42:	2b00      	cmp	r3, #0
 800af44:	bfc2      	ittt	gt
 800af46:	1aed      	subgt	r5, r5, r3
 800af48:	1af6      	subgt	r6, r6, r3
 800af4a:	1aff      	subgt	r7, r7, r3
 800af4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af4e:	2b00      	cmp	r3, #0
 800af50:	dd16      	ble.n	800af80 <_strtod_l+0x738>
 800af52:	4641      	mov	r1, r8
 800af54:	9805      	ldr	r0, [sp, #20]
 800af56:	461a      	mov	r2, r3
 800af58:	f7ff f9a4 	bl	800a2a4 <__pow5mult>
 800af5c:	4680      	mov	r8, r0
 800af5e:	2800      	cmp	r0, #0
 800af60:	d0ba      	beq.n	800aed8 <_strtod_l+0x690>
 800af62:	4601      	mov	r1, r0
 800af64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af66:	9805      	ldr	r0, [sp, #20]
 800af68:	f7ff f8fa 	bl	800a160 <__multiply>
 800af6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800af6e:	2800      	cmp	r0, #0
 800af70:	f43f ae8d 	beq.w	800ac8e <_strtod_l+0x446>
 800af74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af76:	9805      	ldr	r0, [sp, #20]
 800af78:	f7fe ffde 	bl	8009f38 <_Bfree>
 800af7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800af80:	2d00      	cmp	r5, #0
 800af82:	dc1d      	bgt.n	800afc0 <_strtod_l+0x778>
 800af84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af86:	2b00      	cmp	r3, #0
 800af88:	dd23      	ble.n	800afd2 <_strtod_l+0x78a>
 800af8a:	4649      	mov	r1, r9
 800af8c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af8e:	9805      	ldr	r0, [sp, #20]
 800af90:	f7ff f988 	bl	800a2a4 <__pow5mult>
 800af94:	4681      	mov	r9, r0
 800af96:	b9e0      	cbnz	r0, 800afd2 <_strtod_l+0x78a>
 800af98:	f04f 0900 	mov.w	r9, #0
 800af9c:	e677      	b.n	800ac8e <_strtod_l+0x446>
 800af9e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800afa2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800afa6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800afaa:	35e2      	adds	r5, #226	@ 0xe2
 800afac:	fa01 f305 	lsl.w	r3, r1, r5
 800afb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800afb2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800afb4:	e7ba      	b.n	800af2c <_strtod_l+0x6e4>
 800afb6:	2300      	movs	r3, #0
 800afb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800afba:	2301      	movs	r3, #1
 800afbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afbe:	e7b5      	b.n	800af2c <_strtod_l+0x6e4>
 800afc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afc2:	9805      	ldr	r0, [sp, #20]
 800afc4:	462a      	mov	r2, r5
 800afc6:	f7ff f9c7 	bl	800a358 <__lshift>
 800afca:	901a      	str	r0, [sp, #104]	@ 0x68
 800afcc:	2800      	cmp	r0, #0
 800afce:	d1d9      	bne.n	800af84 <_strtod_l+0x73c>
 800afd0:	e65d      	b.n	800ac8e <_strtod_l+0x446>
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	dd07      	ble.n	800afe6 <_strtod_l+0x79e>
 800afd6:	4649      	mov	r1, r9
 800afd8:	9805      	ldr	r0, [sp, #20]
 800afda:	4632      	mov	r2, r6
 800afdc:	f7ff f9bc 	bl	800a358 <__lshift>
 800afe0:	4681      	mov	r9, r0
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d0d8      	beq.n	800af98 <_strtod_l+0x750>
 800afe6:	2f00      	cmp	r7, #0
 800afe8:	dd08      	ble.n	800affc <_strtod_l+0x7b4>
 800afea:	4641      	mov	r1, r8
 800afec:	9805      	ldr	r0, [sp, #20]
 800afee:	463a      	mov	r2, r7
 800aff0:	f7ff f9b2 	bl	800a358 <__lshift>
 800aff4:	4680      	mov	r8, r0
 800aff6:	2800      	cmp	r0, #0
 800aff8:	f43f ae49 	beq.w	800ac8e <_strtod_l+0x446>
 800affc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800affe:	9805      	ldr	r0, [sp, #20]
 800b000:	464a      	mov	r2, r9
 800b002:	f7ff fa31 	bl	800a468 <__mdiff>
 800b006:	4604      	mov	r4, r0
 800b008:	2800      	cmp	r0, #0
 800b00a:	f43f ae40 	beq.w	800ac8e <_strtod_l+0x446>
 800b00e:	68c3      	ldr	r3, [r0, #12]
 800b010:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b012:	2300      	movs	r3, #0
 800b014:	60c3      	str	r3, [r0, #12]
 800b016:	4641      	mov	r1, r8
 800b018:	f7ff fa0a 	bl	800a430 <__mcmp>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	da45      	bge.n	800b0ac <_strtod_l+0x864>
 800b020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b022:	ea53 030a 	orrs.w	r3, r3, sl
 800b026:	d16b      	bne.n	800b100 <_strtod_l+0x8b8>
 800b028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d167      	bne.n	800b100 <_strtod_l+0x8b8>
 800b030:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b034:	0d1b      	lsrs	r3, r3, #20
 800b036:	051b      	lsls	r3, r3, #20
 800b038:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b03c:	d960      	bls.n	800b100 <_strtod_l+0x8b8>
 800b03e:	6963      	ldr	r3, [r4, #20]
 800b040:	b913      	cbnz	r3, 800b048 <_strtod_l+0x800>
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	2b01      	cmp	r3, #1
 800b046:	dd5b      	ble.n	800b100 <_strtod_l+0x8b8>
 800b048:	4621      	mov	r1, r4
 800b04a:	2201      	movs	r2, #1
 800b04c:	9805      	ldr	r0, [sp, #20]
 800b04e:	f7ff f983 	bl	800a358 <__lshift>
 800b052:	4641      	mov	r1, r8
 800b054:	4604      	mov	r4, r0
 800b056:	f7ff f9eb 	bl	800a430 <__mcmp>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	dd50      	ble.n	800b100 <_strtod_l+0x8b8>
 800b05e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b062:	9a08      	ldr	r2, [sp, #32]
 800b064:	0d1b      	lsrs	r3, r3, #20
 800b066:	051b      	lsls	r3, r3, #20
 800b068:	2a00      	cmp	r2, #0
 800b06a:	d06a      	beq.n	800b142 <_strtod_l+0x8fa>
 800b06c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b070:	d867      	bhi.n	800b142 <_strtod_l+0x8fa>
 800b072:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b076:	f67f ae9d 	bls.w	800adb4 <_strtod_l+0x56c>
 800b07a:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a4 <_strtod_l+0x85c>)
 800b07c:	4650      	mov	r0, sl
 800b07e:	4659      	mov	r1, fp
 800b080:	2200      	movs	r2, #0
 800b082:	f7f5 fae1 	bl	8000648 <__aeabi_dmul>
 800b086:	4b08      	ldr	r3, [pc, #32]	@ (800b0a8 <_strtod_l+0x860>)
 800b088:	400b      	ands	r3, r1
 800b08a:	4682      	mov	sl, r0
 800b08c:	468b      	mov	fp, r1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f47f ae08 	bne.w	800aca4 <_strtod_l+0x45c>
 800b094:	9a05      	ldr	r2, [sp, #20]
 800b096:	2322      	movs	r3, #34	@ 0x22
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	e603      	b.n	800aca4 <_strtod_l+0x45c>
 800b09c:	0800db88 	.word	0x0800db88
 800b0a0:	fffffc02 	.word	0xfffffc02
 800b0a4:	39500000 	.word	0x39500000
 800b0a8:	7ff00000 	.word	0x7ff00000
 800b0ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b0b0:	d165      	bne.n	800b17e <_strtod_l+0x936>
 800b0b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b0b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0b8:	b35a      	cbz	r2, 800b112 <_strtod_l+0x8ca>
 800b0ba:	4a9f      	ldr	r2, [pc, #636]	@ (800b338 <_strtod_l+0xaf0>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d12b      	bne.n	800b118 <_strtod_l+0x8d0>
 800b0c0:	9b08      	ldr	r3, [sp, #32]
 800b0c2:	4651      	mov	r1, sl
 800b0c4:	b303      	cbz	r3, 800b108 <_strtod_l+0x8c0>
 800b0c6:	4b9d      	ldr	r3, [pc, #628]	@ (800b33c <_strtod_l+0xaf4>)
 800b0c8:	465a      	mov	r2, fp
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b0d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0d4:	d81b      	bhi.n	800b10e <_strtod_l+0x8c6>
 800b0d6:	0d1b      	lsrs	r3, r3, #20
 800b0d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	d119      	bne.n	800b118 <_strtod_l+0x8d0>
 800b0e4:	4b96      	ldr	r3, [pc, #600]	@ (800b340 <_strtod_l+0xaf8>)
 800b0e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d102      	bne.n	800b0f2 <_strtod_l+0x8aa>
 800b0ec:	3101      	adds	r1, #1
 800b0ee:	f43f adce 	beq.w	800ac8e <_strtod_l+0x446>
 800b0f2:	4b92      	ldr	r3, [pc, #584]	@ (800b33c <_strtod_l+0xaf4>)
 800b0f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b0f6:	401a      	ands	r2, r3
 800b0f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b0fc:	f04f 0a00 	mov.w	sl, #0
 800b100:	9b08      	ldr	r3, [sp, #32]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1b9      	bne.n	800b07a <_strtod_l+0x832>
 800b106:	e5cd      	b.n	800aca4 <_strtod_l+0x45c>
 800b108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b10c:	e7e8      	b.n	800b0e0 <_strtod_l+0x898>
 800b10e:	4613      	mov	r3, r2
 800b110:	e7e6      	b.n	800b0e0 <_strtod_l+0x898>
 800b112:	ea53 030a 	orrs.w	r3, r3, sl
 800b116:	d0a2      	beq.n	800b05e <_strtod_l+0x816>
 800b118:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b11a:	b1db      	cbz	r3, 800b154 <_strtod_l+0x90c>
 800b11c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b11e:	4213      	tst	r3, r2
 800b120:	d0ee      	beq.n	800b100 <_strtod_l+0x8b8>
 800b122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b124:	9a08      	ldr	r2, [sp, #32]
 800b126:	4650      	mov	r0, sl
 800b128:	4659      	mov	r1, fp
 800b12a:	b1bb      	cbz	r3, 800b15c <_strtod_l+0x914>
 800b12c:	f7ff fb6e 	bl	800a80c <sulp>
 800b130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b134:	ec53 2b10 	vmov	r2, r3, d0
 800b138:	f7f5 f8d0 	bl	80002dc <__adddf3>
 800b13c:	4682      	mov	sl, r0
 800b13e:	468b      	mov	fp, r1
 800b140:	e7de      	b.n	800b100 <_strtod_l+0x8b8>
 800b142:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b146:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b14a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b14e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b152:	e7d5      	b.n	800b100 <_strtod_l+0x8b8>
 800b154:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b156:	ea13 0f0a 	tst.w	r3, sl
 800b15a:	e7e1      	b.n	800b120 <_strtod_l+0x8d8>
 800b15c:	f7ff fb56 	bl	800a80c <sulp>
 800b160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b164:	ec53 2b10 	vmov	r2, r3, d0
 800b168:	f7f5 f8b6 	bl	80002d8 <__aeabi_dsub>
 800b16c:	2200      	movs	r2, #0
 800b16e:	2300      	movs	r3, #0
 800b170:	4682      	mov	sl, r0
 800b172:	468b      	mov	fp, r1
 800b174:	f7f5 fcd0 	bl	8000b18 <__aeabi_dcmpeq>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d0c1      	beq.n	800b100 <_strtod_l+0x8b8>
 800b17c:	e61a      	b.n	800adb4 <_strtod_l+0x56c>
 800b17e:	4641      	mov	r1, r8
 800b180:	4620      	mov	r0, r4
 800b182:	f7ff facd 	bl	800a720 <__ratio>
 800b186:	ec57 6b10 	vmov	r6, r7, d0
 800b18a:	2200      	movs	r2, #0
 800b18c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fcd4 	bl	8000b40 <__aeabi_dcmple>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d06f      	beq.n	800b27c <_strtod_l+0xa34>
 800b19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d17a      	bne.n	800b298 <_strtod_l+0xa50>
 800b1a2:	f1ba 0f00 	cmp.w	sl, #0
 800b1a6:	d158      	bne.n	800b25a <_strtod_l+0xa12>
 800b1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d15a      	bne.n	800b268 <_strtod_l+0xa20>
 800b1b2:	4b64      	ldr	r3, [pc, #400]	@ (800b344 <_strtod_l+0xafc>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d159      	bne.n	800b276 <_strtod_l+0xa2e>
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	4b60      	ldr	r3, [pc, #384]	@ (800b348 <_strtod_l+0xb00>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f7f5 fa3d 	bl	8000648 <__aeabi_dmul>
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460f      	mov	r7, r1
 800b1d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b1d6:	9606      	str	r6, [sp, #24]
 800b1d8:	9307      	str	r3, [sp, #28]
 800b1da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1de:	4d57      	ldr	r5, [pc, #348]	@ (800b33c <_strtod_l+0xaf4>)
 800b1e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1e6:	401d      	ands	r5, r3
 800b1e8:	4b58      	ldr	r3, [pc, #352]	@ (800b34c <_strtod_l+0xb04>)
 800b1ea:	429d      	cmp	r5, r3
 800b1ec:	f040 80b2 	bne.w	800b354 <_strtod_l+0xb0c>
 800b1f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b1f6:	ec4b ab10 	vmov	d0, sl, fp
 800b1fa:	f7ff f9c9 	bl	800a590 <__ulp>
 800b1fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b202:	ec51 0b10 	vmov	r0, r1, d0
 800b206:	f7f5 fa1f 	bl	8000648 <__aeabi_dmul>
 800b20a:	4652      	mov	r2, sl
 800b20c:	465b      	mov	r3, fp
 800b20e:	f7f5 f865 	bl	80002dc <__adddf3>
 800b212:	460b      	mov	r3, r1
 800b214:	4949      	ldr	r1, [pc, #292]	@ (800b33c <_strtod_l+0xaf4>)
 800b216:	4a4e      	ldr	r2, [pc, #312]	@ (800b350 <_strtod_l+0xb08>)
 800b218:	4019      	ands	r1, r3
 800b21a:	4291      	cmp	r1, r2
 800b21c:	4682      	mov	sl, r0
 800b21e:	d942      	bls.n	800b2a6 <_strtod_l+0xa5e>
 800b220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b222:	4b47      	ldr	r3, [pc, #284]	@ (800b340 <_strtod_l+0xaf8>)
 800b224:	429a      	cmp	r2, r3
 800b226:	d103      	bne.n	800b230 <_strtod_l+0x9e8>
 800b228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b22a:	3301      	adds	r3, #1
 800b22c:	f43f ad2f 	beq.w	800ac8e <_strtod_l+0x446>
 800b230:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b340 <_strtod_l+0xaf8>
 800b234:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b23a:	9805      	ldr	r0, [sp, #20]
 800b23c:	f7fe fe7c 	bl	8009f38 <_Bfree>
 800b240:	9805      	ldr	r0, [sp, #20]
 800b242:	4649      	mov	r1, r9
 800b244:	f7fe fe78 	bl	8009f38 <_Bfree>
 800b248:	9805      	ldr	r0, [sp, #20]
 800b24a:	4641      	mov	r1, r8
 800b24c:	f7fe fe74 	bl	8009f38 <_Bfree>
 800b250:	9805      	ldr	r0, [sp, #20]
 800b252:	4621      	mov	r1, r4
 800b254:	f7fe fe70 	bl	8009f38 <_Bfree>
 800b258:	e619      	b.n	800ae8e <_strtod_l+0x646>
 800b25a:	f1ba 0f01 	cmp.w	sl, #1
 800b25e:	d103      	bne.n	800b268 <_strtod_l+0xa20>
 800b260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b262:	2b00      	cmp	r3, #0
 800b264:	f43f ada6 	beq.w	800adb4 <_strtod_l+0x56c>
 800b268:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b318 <_strtod_l+0xad0>
 800b26c:	4f35      	ldr	r7, [pc, #212]	@ (800b344 <_strtod_l+0xafc>)
 800b26e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b272:	2600      	movs	r6, #0
 800b274:	e7b1      	b.n	800b1da <_strtod_l+0x992>
 800b276:	4f34      	ldr	r7, [pc, #208]	@ (800b348 <_strtod_l+0xb00>)
 800b278:	2600      	movs	r6, #0
 800b27a:	e7aa      	b.n	800b1d2 <_strtod_l+0x98a>
 800b27c:	4b32      	ldr	r3, [pc, #200]	@ (800b348 <_strtod_l+0xb00>)
 800b27e:	4630      	mov	r0, r6
 800b280:	4639      	mov	r1, r7
 800b282:	2200      	movs	r2, #0
 800b284:	f7f5 f9e0 	bl	8000648 <__aeabi_dmul>
 800b288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d09f      	beq.n	800b1d2 <_strtod_l+0x98a>
 800b292:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b296:	e7a0      	b.n	800b1da <_strtod_l+0x992>
 800b298:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b320 <_strtod_l+0xad8>
 800b29c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2a0:	ec57 6b17 	vmov	r6, r7, d7
 800b2a4:	e799      	b.n	800b1da <_strtod_l+0x992>
 800b2a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b2aa:	9b08      	ldr	r3, [sp, #32]
 800b2ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1c1      	bne.n	800b238 <_strtod_l+0x9f0>
 800b2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2b8:	0d1b      	lsrs	r3, r3, #20
 800b2ba:	051b      	lsls	r3, r3, #20
 800b2bc:	429d      	cmp	r5, r3
 800b2be:	d1bb      	bne.n	800b238 <_strtod_l+0x9f0>
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	f7f5 fd20 	bl	8000d08 <__aeabi_d2lz>
 800b2c8:	f7f5 f990 	bl	80005ec <__aeabi_l2d>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4639      	mov	r1, r7
 800b2d4:	f7f5 f800 	bl	80002d8 <__aeabi_dsub>
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4602      	mov	r2, r0
 800b2dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b2e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2e6:	ea46 060a 	orr.w	r6, r6, sl
 800b2ea:	431e      	orrs	r6, r3
 800b2ec:	d06f      	beq.n	800b3ce <_strtod_l+0xb86>
 800b2ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800b328 <_strtod_l+0xae0>)
 800b2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f4:	f7f5 fc1a 	bl	8000b2c <__aeabi_dcmplt>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	f47f acd3 	bne.w	800aca4 <_strtod_l+0x45c>
 800b2fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800b330 <_strtod_l+0xae8>)
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b308:	f7f5 fc2e 	bl	8000b68 <__aeabi_dcmpgt>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d093      	beq.n	800b238 <_strtod_l+0x9f0>
 800b310:	e4c8      	b.n	800aca4 <_strtod_l+0x45c>
 800b312:	bf00      	nop
 800b314:	f3af 8000 	nop.w
 800b318:	00000000 	.word	0x00000000
 800b31c:	bff00000 	.word	0xbff00000
 800b320:	00000000 	.word	0x00000000
 800b324:	3ff00000 	.word	0x3ff00000
 800b328:	94a03595 	.word	0x94a03595
 800b32c:	3fdfffff 	.word	0x3fdfffff
 800b330:	35afe535 	.word	0x35afe535
 800b334:	3fe00000 	.word	0x3fe00000
 800b338:	000fffff 	.word	0x000fffff
 800b33c:	7ff00000 	.word	0x7ff00000
 800b340:	7fefffff 	.word	0x7fefffff
 800b344:	3ff00000 	.word	0x3ff00000
 800b348:	3fe00000 	.word	0x3fe00000
 800b34c:	7fe00000 	.word	0x7fe00000
 800b350:	7c9fffff 	.word	0x7c9fffff
 800b354:	9b08      	ldr	r3, [sp, #32]
 800b356:	b323      	cbz	r3, 800b3a2 <_strtod_l+0xb5a>
 800b358:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b35c:	d821      	bhi.n	800b3a2 <_strtod_l+0xb5a>
 800b35e:	a328      	add	r3, pc, #160	@ (adr r3, 800b400 <_strtod_l+0xbb8>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	4630      	mov	r0, r6
 800b366:	4639      	mov	r1, r7
 800b368:	f7f5 fbea 	bl	8000b40 <__aeabi_dcmple>
 800b36c:	b1a0      	cbz	r0, 800b398 <_strtod_l+0xb50>
 800b36e:	4639      	mov	r1, r7
 800b370:	4630      	mov	r0, r6
 800b372:	f7f5 fc41 	bl	8000bf8 <__aeabi_d2uiz>
 800b376:	2801      	cmp	r0, #1
 800b378:	bf38      	it	cc
 800b37a:	2001      	movcc	r0, #1
 800b37c:	f7f5 f8ea 	bl	8000554 <__aeabi_ui2d>
 800b380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b382:	4606      	mov	r6, r0
 800b384:	460f      	mov	r7, r1
 800b386:	b9fb      	cbnz	r3, 800b3c8 <_strtod_l+0xb80>
 800b388:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b38c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b38e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b390:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b394:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b398:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b39a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b39e:	1b5b      	subs	r3, r3, r5
 800b3a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b3a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b3a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b3aa:	f7ff f8f1 	bl	800a590 <__ulp>
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	ec53 2b10 	vmov	r2, r3, d0
 800b3b4:	4659      	mov	r1, fp
 800b3b6:	f7f5 f947 	bl	8000648 <__aeabi_dmul>
 800b3ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b3be:	f7f4 ff8d 	bl	80002dc <__adddf3>
 800b3c2:	4682      	mov	sl, r0
 800b3c4:	468b      	mov	fp, r1
 800b3c6:	e770      	b.n	800b2aa <_strtod_l+0xa62>
 800b3c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b3cc:	e7e0      	b.n	800b390 <_strtod_l+0xb48>
 800b3ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800b408 <_strtod_l+0xbc0>)
 800b3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d4:	f7f5 fbaa 	bl	8000b2c <__aeabi_dcmplt>
 800b3d8:	e798      	b.n	800b30c <_strtod_l+0xac4>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b3de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b3e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3e2:	6013      	str	r3, [r2, #0]
 800b3e4:	f7ff ba6d 	b.w	800a8c2 <_strtod_l+0x7a>
 800b3e8:	2a65      	cmp	r2, #101	@ 0x65
 800b3ea:	f43f ab68 	beq.w	800aabe <_strtod_l+0x276>
 800b3ee:	2a45      	cmp	r2, #69	@ 0x45
 800b3f0:	f43f ab65 	beq.w	800aabe <_strtod_l+0x276>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f7ff bba0 	b.w	800ab3a <_strtod_l+0x2f2>
 800b3fa:	bf00      	nop
 800b3fc:	f3af 8000 	nop.w
 800b400:	ffc00000 	.word	0xffc00000
 800b404:	41dfffff 	.word	0x41dfffff
 800b408:	94a03595 	.word	0x94a03595
 800b40c:	3fcfffff 	.word	0x3fcfffff

0800b410 <_strtod_r>:
 800b410:	4b01      	ldr	r3, [pc, #4]	@ (800b418 <_strtod_r+0x8>)
 800b412:	f7ff ba19 	b.w	800a848 <_strtod_l>
 800b416:	bf00      	nop
 800b418:	20000088 	.word	0x20000088

0800b41c <_strtol_l.isra.0>:
 800b41c:	2b24      	cmp	r3, #36	@ 0x24
 800b41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b422:	4686      	mov	lr, r0
 800b424:	4690      	mov	r8, r2
 800b426:	d801      	bhi.n	800b42c <_strtol_l.isra.0+0x10>
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d106      	bne.n	800b43a <_strtol_l.isra.0+0x1e>
 800b42c:	f7fd fdaa 	bl	8008f84 <__errno>
 800b430:	2316      	movs	r3, #22
 800b432:	6003      	str	r3, [r0, #0]
 800b434:	2000      	movs	r0, #0
 800b436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43a:	4834      	ldr	r0, [pc, #208]	@ (800b50c <_strtol_l.isra.0+0xf0>)
 800b43c:	460d      	mov	r5, r1
 800b43e:	462a      	mov	r2, r5
 800b440:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b444:	5d06      	ldrb	r6, [r0, r4]
 800b446:	f016 0608 	ands.w	r6, r6, #8
 800b44a:	d1f8      	bne.n	800b43e <_strtol_l.isra.0+0x22>
 800b44c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b44e:	d110      	bne.n	800b472 <_strtol_l.isra.0+0x56>
 800b450:	782c      	ldrb	r4, [r5, #0]
 800b452:	2601      	movs	r6, #1
 800b454:	1c95      	adds	r5, r2, #2
 800b456:	f033 0210 	bics.w	r2, r3, #16
 800b45a:	d115      	bne.n	800b488 <_strtol_l.isra.0+0x6c>
 800b45c:	2c30      	cmp	r4, #48	@ 0x30
 800b45e:	d10d      	bne.n	800b47c <_strtol_l.isra.0+0x60>
 800b460:	782a      	ldrb	r2, [r5, #0]
 800b462:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b466:	2a58      	cmp	r2, #88	@ 0x58
 800b468:	d108      	bne.n	800b47c <_strtol_l.isra.0+0x60>
 800b46a:	786c      	ldrb	r4, [r5, #1]
 800b46c:	3502      	adds	r5, #2
 800b46e:	2310      	movs	r3, #16
 800b470:	e00a      	b.n	800b488 <_strtol_l.isra.0+0x6c>
 800b472:	2c2b      	cmp	r4, #43	@ 0x2b
 800b474:	bf04      	itt	eq
 800b476:	782c      	ldrbeq	r4, [r5, #0]
 800b478:	1c95      	addeq	r5, r2, #2
 800b47a:	e7ec      	b.n	800b456 <_strtol_l.isra.0+0x3a>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1f6      	bne.n	800b46e <_strtol_l.isra.0+0x52>
 800b480:	2c30      	cmp	r4, #48	@ 0x30
 800b482:	bf14      	ite	ne
 800b484:	230a      	movne	r3, #10
 800b486:	2308      	moveq	r3, #8
 800b488:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b48c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b490:	2200      	movs	r2, #0
 800b492:	fbbc f9f3 	udiv	r9, ip, r3
 800b496:	4610      	mov	r0, r2
 800b498:	fb03 ca19 	mls	sl, r3, r9, ip
 800b49c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b4a0:	2f09      	cmp	r7, #9
 800b4a2:	d80f      	bhi.n	800b4c4 <_strtol_l.isra.0+0xa8>
 800b4a4:	463c      	mov	r4, r7
 800b4a6:	42a3      	cmp	r3, r4
 800b4a8:	dd1b      	ble.n	800b4e2 <_strtol_l.isra.0+0xc6>
 800b4aa:	1c57      	adds	r7, r2, #1
 800b4ac:	d007      	beq.n	800b4be <_strtol_l.isra.0+0xa2>
 800b4ae:	4581      	cmp	r9, r0
 800b4b0:	d314      	bcc.n	800b4dc <_strtol_l.isra.0+0xc0>
 800b4b2:	d101      	bne.n	800b4b8 <_strtol_l.isra.0+0x9c>
 800b4b4:	45a2      	cmp	sl, r4
 800b4b6:	db11      	blt.n	800b4dc <_strtol_l.isra.0+0xc0>
 800b4b8:	fb00 4003 	mla	r0, r0, r3, r4
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4c2:	e7eb      	b.n	800b49c <_strtol_l.isra.0+0x80>
 800b4c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b4c8:	2f19      	cmp	r7, #25
 800b4ca:	d801      	bhi.n	800b4d0 <_strtol_l.isra.0+0xb4>
 800b4cc:	3c37      	subs	r4, #55	@ 0x37
 800b4ce:	e7ea      	b.n	800b4a6 <_strtol_l.isra.0+0x8a>
 800b4d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b4d4:	2f19      	cmp	r7, #25
 800b4d6:	d804      	bhi.n	800b4e2 <_strtol_l.isra.0+0xc6>
 800b4d8:	3c57      	subs	r4, #87	@ 0x57
 800b4da:	e7e4      	b.n	800b4a6 <_strtol_l.isra.0+0x8a>
 800b4dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4e0:	e7ed      	b.n	800b4be <_strtol_l.isra.0+0xa2>
 800b4e2:	1c53      	adds	r3, r2, #1
 800b4e4:	d108      	bne.n	800b4f8 <_strtol_l.isra.0+0xdc>
 800b4e6:	2322      	movs	r3, #34	@ 0x22
 800b4e8:	f8ce 3000 	str.w	r3, [lr]
 800b4ec:	4660      	mov	r0, ip
 800b4ee:	f1b8 0f00 	cmp.w	r8, #0
 800b4f2:	d0a0      	beq.n	800b436 <_strtol_l.isra.0+0x1a>
 800b4f4:	1e69      	subs	r1, r5, #1
 800b4f6:	e006      	b.n	800b506 <_strtol_l.isra.0+0xea>
 800b4f8:	b106      	cbz	r6, 800b4fc <_strtol_l.isra.0+0xe0>
 800b4fa:	4240      	negs	r0, r0
 800b4fc:	f1b8 0f00 	cmp.w	r8, #0
 800b500:	d099      	beq.n	800b436 <_strtol_l.isra.0+0x1a>
 800b502:	2a00      	cmp	r2, #0
 800b504:	d1f6      	bne.n	800b4f4 <_strtol_l.isra.0+0xd8>
 800b506:	f8c8 1000 	str.w	r1, [r8]
 800b50a:	e794      	b.n	800b436 <_strtol_l.isra.0+0x1a>
 800b50c:	0800dbb1 	.word	0x0800dbb1

0800b510 <_strtol_r>:
 800b510:	f7ff bf84 	b.w	800b41c <_strtol_l.isra.0>

0800b514 <__ssputs_r>:
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	688e      	ldr	r6, [r1, #8]
 800b51a:	461f      	mov	r7, r3
 800b51c:	42be      	cmp	r6, r7
 800b51e:	680b      	ldr	r3, [r1, #0]
 800b520:	4682      	mov	sl, r0
 800b522:	460c      	mov	r4, r1
 800b524:	4690      	mov	r8, r2
 800b526:	d82d      	bhi.n	800b584 <__ssputs_r+0x70>
 800b528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b52c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b530:	d026      	beq.n	800b580 <__ssputs_r+0x6c>
 800b532:	6965      	ldr	r5, [r4, #20]
 800b534:	6909      	ldr	r1, [r1, #16]
 800b536:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b53a:	eba3 0901 	sub.w	r9, r3, r1
 800b53e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b542:	1c7b      	adds	r3, r7, #1
 800b544:	444b      	add	r3, r9
 800b546:	106d      	asrs	r5, r5, #1
 800b548:	429d      	cmp	r5, r3
 800b54a:	bf38      	it	cc
 800b54c:	461d      	movcc	r5, r3
 800b54e:	0553      	lsls	r3, r2, #21
 800b550:	d527      	bpl.n	800b5a2 <__ssputs_r+0x8e>
 800b552:	4629      	mov	r1, r5
 800b554:	f7fe fc24 	bl	8009da0 <_malloc_r>
 800b558:	4606      	mov	r6, r0
 800b55a:	b360      	cbz	r0, 800b5b6 <__ssputs_r+0xa2>
 800b55c:	6921      	ldr	r1, [r4, #16]
 800b55e:	464a      	mov	r2, r9
 800b560:	f7fd fd3d 	bl	8008fde <memcpy>
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b56e:	81a3      	strh	r3, [r4, #12]
 800b570:	6126      	str	r6, [r4, #16]
 800b572:	6165      	str	r5, [r4, #20]
 800b574:	444e      	add	r6, r9
 800b576:	eba5 0509 	sub.w	r5, r5, r9
 800b57a:	6026      	str	r6, [r4, #0]
 800b57c:	60a5      	str	r5, [r4, #8]
 800b57e:	463e      	mov	r6, r7
 800b580:	42be      	cmp	r6, r7
 800b582:	d900      	bls.n	800b586 <__ssputs_r+0x72>
 800b584:	463e      	mov	r6, r7
 800b586:	6820      	ldr	r0, [r4, #0]
 800b588:	4632      	mov	r2, r6
 800b58a:	4641      	mov	r1, r8
 800b58c:	f000 f9c6 	bl	800b91c <memmove>
 800b590:	68a3      	ldr	r3, [r4, #8]
 800b592:	1b9b      	subs	r3, r3, r6
 800b594:	60a3      	str	r3, [r4, #8]
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	4433      	add	r3, r6
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	2000      	movs	r0, #0
 800b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	f000 fd7d 	bl	800c0a2 <_realloc_r>
 800b5a8:	4606      	mov	r6, r0
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d1e0      	bne.n	800b570 <__ssputs_r+0x5c>
 800b5ae:	6921      	ldr	r1, [r4, #16]
 800b5b0:	4650      	mov	r0, sl
 800b5b2:	f7fe fb81 	bl	8009cb8 <_free_r>
 800b5b6:	230c      	movs	r3, #12
 800b5b8:	f8ca 3000 	str.w	r3, [sl]
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5c8:	e7e9      	b.n	800b59e <__ssputs_r+0x8a>
	...

0800b5cc <_svfiprintf_r>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	4698      	mov	r8, r3
 800b5d2:	898b      	ldrh	r3, [r1, #12]
 800b5d4:	061b      	lsls	r3, r3, #24
 800b5d6:	b09d      	sub	sp, #116	@ 0x74
 800b5d8:	4607      	mov	r7, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	4614      	mov	r4, r2
 800b5de:	d510      	bpl.n	800b602 <_svfiprintf_r+0x36>
 800b5e0:	690b      	ldr	r3, [r1, #16]
 800b5e2:	b973      	cbnz	r3, 800b602 <_svfiprintf_r+0x36>
 800b5e4:	2140      	movs	r1, #64	@ 0x40
 800b5e6:	f7fe fbdb 	bl	8009da0 <_malloc_r>
 800b5ea:	6028      	str	r0, [r5, #0]
 800b5ec:	6128      	str	r0, [r5, #16]
 800b5ee:	b930      	cbnz	r0, 800b5fe <_svfiprintf_r+0x32>
 800b5f0:	230c      	movs	r3, #12
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5f8:	b01d      	add	sp, #116	@ 0x74
 800b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fe:	2340      	movs	r3, #64	@ 0x40
 800b600:	616b      	str	r3, [r5, #20]
 800b602:	2300      	movs	r3, #0
 800b604:	9309      	str	r3, [sp, #36]	@ 0x24
 800b606:	2320      	movs	r3, #32
 800b608:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b60c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b610:	2330      	movs	r3, #48	@ 0x30
 800b612:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7b0 <_svfiprintf_r+0x1e4>
 800b616:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b61a:	f04f 0901 	mov.w	r9, #1
 800b61e:	4623      	mov	r3, r4
 800b620:	469a      	mov	sl, r3
 800b622:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b626:	b10a      	cbz	r2, 800b62c <_svfiprintf_r+0x60>
 800b628:	2a25      	cmp	r2, #37	@ 0x25
 800b62a:	d1f9      	bne.n	800b620 <_svfiprintf_r+0x54>
 800b62c:	ebba 0b04 	subs.w	fp, sl, r4
 800b630:	d00b      	beq.n	800b64a <_svfiprintf_r+0x7e>
 800b632:	465b      	mov	r3, fp
 800b634:	4622      	mov	r2, r4
 800b636:	4629      	mov	r1, r5
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff ff6b 	bl	800b514 <__ssputs_r>
 800b63e:	3001      	adds	r0, #1
 800b640:	f000 80a7 	beq.w	800b792 <_svfiprintf_r+0x1c6>
 800b644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b646:	445a      	add	r2, fp
 800b648:	9209      	str	r2, [sp, #36]	@ 0x24
 800b64a:	f89a 3000 	ldrb.w	r3, [sl]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 809f 	beq.w	800b792 <_svfiprintf_r+0x1c6>
 800b654:	2300      	movs	r3, #0
 800b656:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b65a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b65e:	f10a 0a01 	add.w	sl, sl, #1
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	9307      	str	r3, [sp, #28]
 800b666:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b66a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b66c:	4654      	mov	r4, sl
 800b66e:	2205      	movs	r2, #5
 800b670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b674:	484e      	ldr	r0, [pc, #312]	@ (800b7b0 <_svfiprintf_r+0x1e4>)
 800b676:	f7f4 fdd3 	bl	8000220 <memchr>
 800b67a:	9a04      	ldr	r2, [sp, #16]
 800b67c:	b9d8      	cbnz	r0, 800b6b6 <_svfiprintf_r+0xea>
 800b67e:	06d0      	lsls	r0, r2, #27
 800b680:	bf44      	itt	mi
 800b682:	2320      	movmi	r3, #32
 800b684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b688:	0711      	lsls	r1, r2, #28
 800b68a:	bf44      	itt	mi
 800b68c:	232b      	movmi	r3, #43	@ 0x2b
 800b68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b692:	f89a 3000 	ldrb.w	r3, [sl]
 800b696:	2b2a      	cmp	r3, #42	@ 0x2a
 800b698:	d015      	beq.n	800b6c6 <_svfiprintf_r+0xfa>
 800b69a:	9a07      	ldr	r2, [sp, #28]
 800b69c:	4654      	mov	r4, sl
 800b69e:	2000      	movs	r0, #0
 800b6a0:	f04f 0c0a 	mov.w	ip, #10
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6aa:	3b30      	subs	r3, #48	@ 0x30
 800b6ac:	2b09      	cmp	r3, #9
 800b6ae:	d94b      	bls.n	800b748 <_svfiprintf_r+0x17c>
 800b6b0:	b1b0      	cbz	r0, 800b6e0 <_svfiprintf_r+0x114>
 800b6b2:	9207      	str	r2, [sp, #28]
 800b6b4:	e014      	b.n	800b6e0 <_svfiprintf_r+0x114>
 800b6b6:	eba0 0308 	sub.w	r3, r0, r8
 800b6ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	46a2      	mov	sl, r4
 800b6c4:	e7d2      	b.n	800b66c <_svfiprintf_r+0xa0>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	1d19      	adds	r1, r3, #4
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	9103      	str	r1, [sp, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bfbb      	ittet	lt
 800b6d2:	425b      	neglt	r3, r3
 800b6d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6d8:	9307      	strge	r3, [sp, #28]
 800b6da:	9307      	strlt	r3, [sp, #28]
 800b6dc:	bfb8      	it	lt
 800b6de:	9204      	strlt	r2, [sp, #16]
 800b6e0:	7823      	ldrb	r3, [r4, #0]
 800b6e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6e4:	d10a      	bne.n	800b6fc <_svfiprintf_r+0x130>
 800b6e6:	7863      	ldrb	r3, [r4, #1]
 800b6e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ea:	d132      	bne.n	800b752 <_svfiprintf_r+0x186>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	9203      	str	r2, [sp, #12]
 800b6f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6f8:	3402      	adds	r4, #2
 800b6fa:	9305      	str	r3, [sp, #20]
 800b6fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7c0 <_svfiprintf_r+0x1f4>
 800b700:	7821      	ldrb	r1, [r4, #0]
 800b702:	2203      	movs	r2, #3
 800b704:	4650      	mov	r0, sl
 800b706:	f7f4 fd8b 	bl	8000220 <memchr>
 800b70a:	b138      	cbz	r0, 800b71c <_svfiprintf_r+0x150>
 800b70c:	9b04      	ldr	r3, [sp, #16]
 800b70e:	eba0 000a 	sub.w	r0, r0, sl
 800b712:	2240      	movs	r2, #64	@ 0x40
 800b714:	4082      	lsls	r2, r0
 800b716:	4313      	orrs	r3, r2
 800b718:	3401      	adds	r4, #1
 800b71a:	9304      	str	r3, [sp, #16]
 800b71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b720:	4824      	ldr	r0, [pc, #144]	@ (800b7b4 <_svfiprintf_r+0x1e8>)
 800b722:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b726:	2206      	movs	r2, #6
 800b728:	f7f4 fd7a 	bl	8000220 <memchr>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d036      	beq.n	800b79e <_svfiprintf_r+0x1d2>
 800b730:	4b21      	ldr	r3, [pc, #132]	@ (800b7b8 <_svfiprintf_r+0x1ec>)
 800b732:	bb1b      	cbnz	r3, 800b77c <_svfiprintf_r+0x1b0>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	3307      	adds	r3, #7
 800b738:	f023 0307 	bic.w	r3, r3, #7
 800b73c:	3308      	adds	r3, #8
 800b73e:	9303      	str	r3, [sp, #12]
 800b740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b742:	4433      	add	r3, r6
 800b744:	9309      	str	r3, [sp, #36]	@ 0x24
 800b746:	e76a      	b.n	800b61e <_svfiprintf_r+0x52>
 800b748:	fb0c 3202 	mla	r2, ip, r2, r3
 800b74c:	460c      	mov	r4, r1
 800b74e:	2001      	movs	r0, #1
 800b750:	e7a8      	b.n	800b6a4 <_svfiprintf_r+0xd8>
 800b752:	2300      	movs	r3, #0
 800b754:	3401      	adds	r4, #1
 800b756:	9305      	str	r3, [sp, #20]
 800b758:	4619      	mov	r1, r3
 800b75a:	f04f 0c0a 	mov.w	ip, #10
 800b75e:	4620      	mov	r0, r4
 800b760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b764:	3a30      	subs	r2, #48	@ 0x30
 800b766:	2a09      	cmp	r2, #9
 800b768:	d903      	bls.n	800b772 <_svfiprintf_r+0x1a6>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d0c6      	beq.n	800b6fc <_svfiprintf_r+0x130>
 800b76e:	9105      	str	r1, [sp, #20]
 800b770:	e7c4      	b.n	800b6fc <_svfiprintf_r+0x130>
 800b772:	fb0c 2101 	mla	r1, ip, r1, r2
 800b776:	4604      	mov	r4, r0
 800b778:	2301      	movs	r3, #1
 800b77a:	e7f0      	b.n	800b75e <_svfiprintf_r+0x192>
 800b77c:	ab03      	add	r3, sp, #12
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	462a      	mov	r2, r5
 800b782:	4b0e      	ldr	r3, [pc, #56]	@ (800b7bc <_svfiprintf_r+0x1f0>)
 800b784:	a904      	add	r1, sp, #16
 800b786:	4638      	mov	r0, r7
 800b788:	f7fc fc88 	bl	800809c <_printf_float>
 800b78c:	1c42      	adds	r2, r0, #1
 800b78e:	4606      	mov	r6, r0
 800b790:	d1d6      	bne.n	800b740 <_svfiprintf_r+0x174>
 800b792:	89ab      	ldrh	r3, [r5, #12]
 800b794:	065b      	lsls	r3, r3, #25
 800b796:	f53f af2d 	bmi.w	800b5f4 <_svfiprintf_r+0x28>
 800b79a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b79c:	e72c      	b.n	800b5f8 <_svfiprintf_r+0x2c>
 800b79e:	ab03      	add	r3, sp, #12
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	4b05      	ldr	r3, [pc, #20]	@ (800b7bc <_svfiprintf_r+0x1f0>)
 800b7a6:	a904      	add	r1, sp, #16
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7fc ff0f 	bl	80085cc <_printf_i>
 800b7ae:	e7ed      	b.n	800b78c <_svfiprintf_r+0x1c0>
 800b7b0:	0800d9ad 	.word	0x0800d9ad
 800b7b4:	0800d9b7 	.word	0x0800d9b7
 800b7b8:	0800809d 	.word	0x0800809d
 800b7bc:	0800b515 	.word	0x0800b515
 800b7c0:	0800d9b3 	.word	0x0800d9b3

0800b7c4 <__sflush_r>:
 800b7c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7cc:	0716      	lsls	r6, r2, #28
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	d454      	bmi.n	800b87e <__sflush_r+0xba>
 800b7d4:	684b      	ldr	r3, [r1, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	dc02      	bgt.n	800b7e0 <__sflush_r+0x1c>
 800b7da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dd48      	ble.n	800b872 <__sflush_r+0xae>
 800b7e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7e2:	2e00      	cmp	r6, #0
 800b7e4:	d045      	beq.n	800b872 <__sflush_r+0xae>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7ec:	682f      	ldr	r7, [r5, #0]
 800b7ee:	6a21      	ldr	r1, [r4, #32]
 800b7f0:	602b      	str	r3, [r5, #0]
 800b7f2:	d030      	beq.n	800b856 <__sflush_r+0x92>
 800b7f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7f6:	89a3      	ldrh	r3, [r4, #12]
 800b7f8:	0759      	lsls	r1, r3, #29
 800b7fa:	d505      	bpl.n	800b808 <__sflush_r+0x44>
 800b7fc:	6863      	ldr	r3, [r4, #4]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b802:	b10b      	cbz	r3, 800b808 <__sflush_r+0x44>
 800b804:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	2300      	movs	r3, #0
 800b80a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b80c:	6a21      	ldr	r1, [r4, #32]
 800b80e:	4628      	mov	r0, r5
 800b810:	47b0      	blx	r6
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	89a3      	ldrh	r3, [r4, #12]
 800b816:	d106      	bne.n	800b826 <__sflush_r+0x62>
 800b818:	6829      	ldr	r1, [r5, #0]
 800b81a:	291d      	cmp	r1, #29
 800b81c:	d82b      	bhi.n	800b876 <__sflush_r+0xb2>
 800b81e:	4a2a      	ldr	r2, [pc, #168]	@ (800b8c8 <__sflush_r+0x104>)
 800b820:	40ca      	lsrs	r2, r1
 800b822:	07d6      	lsls	r6, r2, #31
 800b824:	d527      	bpl.n	800b876 <__sflush_r+0xb2>
 800b826:	2200      	movs	r2, #0
 800b828:	6062      	str	r2, [r4, #4]
 800b82a:	04d9      	lsls	r1, r3, #19
 800b82c:	6922      	ldr	r2, [r4, #16]
 800b82e:	6022      	str	r2, [r4, #0]
 800b830:	d504      	bpl.n	800b83c <__sflush_r+0x78>
 800b832:	1c42      	adds	r2, r0, #1
 800b834:	d101      	bne.n	800b83a <__sflush_r+0x76>
 800b836:	682b      	ldr	r3, [r5, #0]
 800b838:	b903      	cbnz	r3, 800b83c <__sflush_r+0x78>
 800b83a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b83c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b83e:	602f      	str	r7, [r5, #0]
 800b840:	b1b9      	cbz	r1, 800b872 <__sflush_r+0xae>
 800b842:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b846:	4299      	cmp	r1, r3
 800b848:	d002      	beq.n	800b850 <__sflush_r+0x8c>
 800b84a:	4628      	mov	r0, r5
 800b84c:	f7fe fa34 	bl	8009cb8 <_free_r>
 800b850:	2300      	movs	r3, #0
 800b852:	6363      	str	r3, [r4, #52]	@ 0x34
 800b854:	e00d      	b.n	800b872 <__sflush_r+0xae>
 800b856:	2301      	movs	r3, #1
 800b858:	4628      	mov	r0, r5
 800b85a:	47b0      	blx	r6
 800b85c:	4602      	mov	r2, r0
 800b85e:	1c50      	adds	r0, r2, #1
 800b860:	d1c9      	bne.n	800b7f6 <__sflush_r+0x32>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d0c6      	beq.n	800b7f6 <__sflush_r+0x32>
 800b868:	2b1d      	cmp	r3, #29
 800b86a:	d001      	beq.n	800b870 <__sflush_r+0xac>
 800b86c:	2b16      	cmp	r3, #22
 800b86e:	d11e      	bne.n	800b8ae <__sflush_r+0xea>
 800b870:	602f      	str	r7, [r5, #0]
 800b872:	2000      	movs	r0, #0
 800b874:	e022      	b.n	800b8bc <__sflush_r+0xf8>
 800b876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b87a:	b21b      	sxth	r3, r3
 800b87c:	e01b      	b.n	800b8b6 <__sflush_r+0xf2>
 800b87e:	690f      	ldr	r7, [r1, #16]
 800b880:	2f00      	cmp	r7, #0
 800b882:	d0f6      	beq.n	800b872 <__sflush_r+0xae>
 800b884:	0793      	lsls	r3, r2, #30
 800b886:	680e      	ldr	r6, [r1, #0]
 800b888:	bf08      	it	eq
 800b88a:	694b      	ldreq	r3, [r1, #20]
 800b88c:	600f      	str	r7, [r1, #0]
 800b88e:	bf18      	it	ne
 800b890:	2300      	movne	r3, #0
 800b892:	eba6 0807 	sub.w	r8, r6, r7
 800b896:	608b      	str	r3, [r1, #8]
 800b898:	f1b8 0f00 	cmp.w	r8, #0
 800b89c:	dde9      	ble.n	800b872 <__sflush_r+0xae>
 800b89e:	6a21      	ldr	r1, [r4, #32]
 800b8a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8a2:	4643      	mov	r3, r8
 800b8a4:	463a      	mov	r2, r7
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	47b0      	blx	r6
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	dc08      	bgt.n	800b8c0 <__sflush_r+0xfc>
 800b8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c0:	4407      	add	r7, r0
 800b8c2:	eba8 0800 	sub.w	r8, r8, r0
 800b8c6:	e7e7      	b.n	800b898 <__sflush_r+0xd4>
 800b8c8:	20400001 	.word	0x20400001

0800b8cc <_fflush_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	690b      	ldr	r3, [r1, #16]
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	b913      	cbnz	r3, 800b8dc <_fflush_r+0x10>
 800b8d6:	2500      	movs	r5, #0
 800b8d8:	4628      	mov	r0, r5
 800b8da:	bd38      	pop	{r3, r4, r5, pc}
 800b8dc:	b118      	cbz	r0, 800b8e6 <_fflush_r+0x1a>
 800b8de:	6a03      	ldr	r3, [r0, #32]
 800b8e0:	b90b      	cbnz	r3, 800b8e6 <_fflush_r+0x1a>
 800b8e2:	f7fd fa2b 	bl	8008d3c <__sinit>
 800b8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d0f3      	beq.n	800b8d6 <_fflush_r+0xa>
 800b8ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8f0:	07d0      	lsls	r0, r2, #31
 800b8f2:	d404      	bmi.n	800b8fe <_fflush_r+0x32>
 800b8f4:	0599      	lsls	r1, r3, #22
 800b8f6:	d402      	bmi.n	800b8fe <_fflush_r+0x32>
 800b8f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8fa:	f7fd fb6e 	bl	8008fda <__retarget_lock_acquire_recursive>
 800b8fe:	4628      	mov	r0, r5
 800b900:	4621      	mov	r1, r4
 800b902:	f7ff ff5f 	bl	800b7c4 <__sflush_r>
 800b906:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b908:	07da      	lsls	r2, r3, #31
 800b90a:	4605      	mov	r5, r0
 800b90c:	d4e4      	bmi.n	800b8d8 <_fflush_r+0xc>
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	059b      	lsls	r3, r3, #22
 800b912:	d4e1      	bmi.n	800b8d8 <_fflush_r+0xc>
 800b914:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b916:	f7fd fb61 	bl	8008fdc <__retarget_lock_release_recursive>
 800b91a:	e7dd      	b.n	800b8d8 <_fflush_r+0xc>

0800b91c <memmove>:
 800b91c:	4288      	cmp	r0, r1
 800b91e:	b510      	push	{r4, lr}
 800b920:	eb01 0402 	add.w	r4, r1, r2
 800b924:	d902      	bls.n	800b92c <memmove+0x10>
 800b926:	4284      	cmp	r4, r0
 800b928:	4623      	mov	r3, r4
 800b92a:	d807      	bhi.n	800b93c <memmove+0x20>
 800b92c:	1e43      	subs	r3, r0, #1
 800b92e:	42a1      	cmp	r1, r4
 800b930:	d008      	beq.n	800b944 <memmove+0x28>
 800b932:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b93a:	e7f8      	b.n	800b92e <memmove+0x12>
 800b93c:	4402      	add	r2, r0
 800b93e:	4601      	mov	r1, r0
 800b940:	428a      	cmp	r2, r1
 800b942:	d100      	bne.n	800b946 <memmove+0x2a>
 800b944:	bd10      	pop	{r4, pc}
 800b946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b94a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b94e:	e7f7      	b.n	800b940 <memmove+0x24>

0800b950 <strncmp>:
 800b950:	b510      	push	{r4, lr}
 800b952:	b16a      	cbz	r2, 800b970 <strncmp+0x20>
 800b954:	3901      	subs	r1, #1
 800b956:	1884      	adds	r4, r0, r2
 800b958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b95c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b960:	429a      	cmp	r2, r3
 800b962:	d103      	bne.n	800b96c <strncmp+0x1c>
 800b964:	42a0      	cmp	r0, r4
 800b966:	d001      	beq.n	800b96c <strncmp+0x1c>
 800b968:	2a00      	cmp	r2, #0
 800b96a:	d1f5      	bne.n	800b958 <strncmp+0x8>
 800b96c:	1ad0      	subs	r0, r2, r3
 800b96e:	bd10      	pop	{r4, pc}
 800b970:	4610      	mov	r0, r2
 800b972:	e7fc      	b.n	800b96e <strncmp+0x1e>

0800b974 <_sbrk_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d06      	ldr	r5, [pc, #24]	@ (800b990 <_sbrk_r+0x1c>)
 800b978:	2300      	movs	r3, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	602b      	str	r3, [r5, #0]
 800b980:	f7f7 ff3c 	bl	80037fc <_sbrk>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_sbrk_r+0x1a>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_sbrk_r+0x1a>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	200007e0 	.word	0x200007e0
 800b994:	00000000 	.word	0x00000000

0800b998 <nan>:
 800b998:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9a0 <nan+0x8>
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	00000000 	.word	0x00000000
 800b9a4:	7ff80000 	.word	0x7ff80000

0800b9a8 <__assert_func>:
 800b9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9aa:	4614      	mov	r4, r2
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4b09      	ldr	r3, [pc, #36]	@ (800b9d4 <__assert_func+0x2c>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	68d8      	ldr	r0, [r3, #12]
 800b9b6:	b14c      	cbz	r4, 800b9cc <__assert_func+0x24>
 800b9b8:	4b07      	ldr	r3, [pc, #28]	@ (800b9d8 <__assert_func+0x30>)
 800b9ba:	9100      	str	r1, [sp, #0]
 800b9bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9c0:	4906      	ldr	r1, [pc, #24]	@ (800b9dc <__assert_func+0x34>)
 800b9c2:	462b      	mov	r3, r5
 800b9c4:	f000 fba8 	bl	800c118 <fiprintf>
 800b9c8:	f000 fbb8 	bl	800c13c <abort>
 800b9cc:	4b04      	ldr	r3, [pc, #16]	@ (800b9e0 <__assert_func+0x38>)
 800b9ce:	461c      	mov	r4, r3
 800b9d0:	e7f3      	b.n	800b9ba <__assert_func+0x12>
 800b9d2:	bf00      	nop
 800b9d4:	20000038 	.word	0x20000038
 800b9d8:	0800d9c6 	.word	0x0800d9c6
 800b9dc:	0800d9d3 	.word	0x0800d9d3
 800b9e0:	0800da01 	.word	0x0800da01

0800b9e4 <_calloc_r>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	fba1 5402 	umull	r5, r4, r1, r2
 800b9ea:	b934      	cbnz	r4, 800b9fa <_calloc_r+0x16>
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	f7fe f9d7 	bl	8009da0 <_malloc_r>
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	b928      	cbnz	r0, 800ba02 <_calloc_r+0x1e>
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	bd70      	pop	{r4, r5, r6, pc}
 800b9fa:	220c      	movs	r2, #12
 800b9fc:	6002      	str	r2, [r0, #0]
 800b9fe:	2600      	movs	r6, #0
 800ba00:	e7f9      	b.n	800b9f6 <_calloc_r+0x12>
 800ba02:	462a      	mov	r2, r5
 800ba04:	4621      	mov	r1, r4
 800ba06:	f7fd fa6a 	bl	8008ede <memset>
 800ba0a:	e7f4      	b.n	800b9f6 <_calloc_r+0x12>

0800ba0c <rshift>:
 800ba0c:	6903      	ldr	r3, [r0, #16]
 800ba0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba16:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba1a:	f100 0414 	add.w	r4, r0, #20
 800ba1e:	dd45      	ble.n	800baac <rshift+0xa0>
 800ba20:	f011 011f 	ands.w	r1, r1, #31
 800ba24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba2c:	d10c      	bne.n	800ba48 <rshift+0x3c>
 800ba2e:	f100 0710 	add.w	r7, r0, #16
 800ba32:	4629      	mov	r1, r5
 800ba34:	42b1      	cmp	r1, r6
 800ba36:	d334      	bcc.n	800baa2 <rshift+0x96>
 800ba38:	1a9b      	subs	r3, r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	1eea      	subs	r2, r5, #3
 800ba3e:	4296      	cmp	r6, r2
 800ba40:	bf38      	it	cc
 800ba42:	2300      	movcc	r3, #0
 800ba44:	4423      	add	r3, r4
 800ba46:	e015      	b.n	800ba74 <rshift+0x68>
 800ba48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba4c:	f1c1 0820 	rsb	r8, r1, #32
 800ba50:	40cf      	lsrs	r7, r1
 800ba52:	f105 0e04 	add.w	lr, r5, #4
 800ba56:	46a1      	mov	r9, r4
 800ba58:	4576      	cmp	r6, lr
 800ba5a:	46f4      	mov	ip, lr
 800ba5c:	d815      	bhi.n	800ba8a <rshift+0x7e>
 800ba5e:	1a9a      	subs	r2, r3, r2
 800ba60:	0092      	lsls	r2, r2, #2
 800ba62:	3a04      	subs	r2, #4
 800ba64:	3501      	adds	r5, #1
 800ba66:	42ae      	cmp	r6, r5
 800ba68:	bf38      	it	cc
 800ba6a:	2200      	movcc	r2, #0
 800ba6c:	18a3      	adds	r3, r4, r2
 800ba6e:	50a7      	str	r7, [r4, r2]
 800ba70:	b107      	cbz	r7, 800ba74 <rshift+0x68>
 800ba72:	3304      	adds	r3, #4
 800ba74:	1b1a      	subs	r2, r3, r4
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba7c:	bf08      	it	eq
 800ba7e:	2300      	moveq	r3, #0
 800ba80:	6102      	str	r2, [r0, #16]
 800ba82:	bf08      	it	eq
 800ba84:	6143      	streq	r3, [r0, #20]
 800ba86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba8a:	f8dc c000 	ldr.w	ip, [ip]
 800ba8e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba92:	ea4c 0707 	orr.w	r7, ip, r7
 800ba96:	f849 7b04 	str.w	r7, [r9], #4
 800ba9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba9e:	40cf      	lsrs	r7, r1
 800baa0:	e7da      	b.n	800ba58 <rshift+0x4c>
 800baa2:	f851 cb04 	ldr.w	ip, [r1], #4
 800baa6:	f847 cf04 	str.w	ip, [r7, #4]!
 800baaa:	e7c3      	b.n	800ba34 <rshift+0x28>
 800baac:	4623      	mov	r3, r4
 800baae:	e7e1      	b.n	800ba74 <rshift+0x68>

0800bab0 <__hexdig_fun>:
 800bab0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bab4:	2b09      	cmp	r3, #9
 800bab6:	d802      	bhi.n	800babe <__hexdig_fun+0xe>
 800bab8:	3820      	subs	r0, #32
 800baba:	b2c0      	uxtb	r0, r0
 800babc:	4770      	bx	lr
 800babe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bac2:	2b05      	cmp	r3, #5
 800bac4:	d801      	bhi.n	800baca <__hexdig_fun+0x1a>
 800bac6:	3847      	subs	r0, #71	@ 0x47
 800bac8:	e7f7      	b.n	800baba <__hexdig_fun+0xa>
 800baca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bace:	2b05      	cmp	r3, #5
 800bad0:	d801      	bhi.n	800bad6 <__hexdig_fun+0x26>
 800bad2:	3827      	subs	r0, #39	@ 0x27
 800bad4:	e7f1      	b.n	800baba <__hexdig_fun+0xa>
 800bad6:	2000      	movs	r0, #0
 800bad8:	4770      	bx	lr
	...

0800badc <__gethex>:
 800badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae0:	b085      	sub	sp, #20
 800bae2:	468a      	mov	sl, r1
 800bae4:	9302      	str	r3, [sp, #8]
 800bae6:	680b      	ldr	r3, [r1, #0]
 800bae8:	9001      	str	r0, [sp, #4]
 800baea:	4690      	mov	r8, r2
 800baec:	1c9c      	adds	r4, r3, #2
 800baee:	46a1      	mov	r9, r4
 800baf0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800baf4:	2830      	cmp	r0, #48	@ 0x30
 800baf6:	d0fa      	beq.n	800baee <__gethex+0x12>
 800baf8:	eba9 0303 	sub.w	r3, r9, r3
 800bafc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb00:	f7ff ffd6 	bl	800bab0 <__hexdig_fun>
 800bb04:	4605      	mov	r5, r0
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d168      	bne.n	800bbdc <__gethex+0x100>
 800bb0a:	49a0      	ldr	r1, [pc, #640]	@ (800bd8c <__gethex+0x2b0>)
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	4648      	mov	r0, r9
 800bb10:	f7ff ff1e 	bl	800b950 <strncmp>
 800bb14:	4607      	mov	r7, r0
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d167      	bne.n	800bbea <__gethex+0x10e>
 800bb1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb1e:	4626      	mov	r6, r4
 800bb20:	f7ff ffc6 	bl	800bab0 <__hexdig_fun>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d062      	beq.n	800bbee <__gethex+0x112>
 800bb28:	4623      	mov	r3, r4
 800bb2a:	7818      	ldrb	r0, [r3, #0]
 800bb2c:	2830      	cmp	r0, #48	@ 0x30
 800bb2e:	4699      	mov	r9, r3
 800bb30:	f103 0301 	add.w	r3, r3, #1
 800bb34:	d0f9      	beq.n	800bb2a <__gethex+0x4e>
 800bb36:	f7ff ffbb 	bl	800bab0 <__hexdig_fun>
 800bb3a:	fab0 f580 	clz	r5, r0
 800bb3e:	096d      	lsrs	r5, r5, #5
 800bb40:	f04f 0b01 	mov.w	fp, #1
 800bb44:	464a      	mov	r2, r9
 800bb46:	4616      	mov	r6, r2
 800bb48:	3201      	adds	r2, #1
 800bb4a:	7830      	ldrb	r0, [r6, #0]
 800bb4c:	f7ff ffb0 	bl	800bab0 <__hexdig_fun>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d1f8      	bne.n	800bb46 <__gethex+0x6a>
 800bb54:	498d      	ldr	r1, [pc, #564]	@ (800bd8c <__gethex+0x2b0>)
 800bb56:	2201      	movs	r2, #1
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7ff fef9 	bl	800b950 <strncmp>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d13f      	bne.n	800bbe2 <__gethex+0x106>
 800bb62:	b944      	cbnz	r4, 800bb76 <__gethex+0x9a>
 800bb64:	1c74      	adds	r4, r6, #1
 800bb66:	4622      	mov	r2, r4
 800bb68:	4616      	mov	r6, r2
 800bb6a:	3201      	adds	r2, #1
 800bb6c:	7830      	ldrb	r0, [r6, #0]
 800bb6e:	f7ff ff9f 	bl	800bab0 <__hexdig_fun>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d1f8      	bne.n	800bb68 <__gethex+0x8c>
 800bb76:	1ba4      	subs	r4, r4, r6
 800bb78:	00a7      	lsls	r7, r4, #2
 800bb7a:	7833      	ldrb	r3, [r6, #0]
 800bb7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bb80:	2b50      	cmp	r3, #80	@ 0x50
 800bb82:	d13e      	bne.n	800bc02 <__gethex+0x126>
 800bb84:	7873      	ldrb	r3, [r6, #1]
 800bb86:	2b2b      	cmp	r3, #43	@ 0x2b
 800bb88:	d033      	beq.n	800bbf2 <__gethex+0x116>
 800bb8a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bb8c:	d034      	beq.n	800bbf8 <__gethex+0x11c>
 800bb8e:	1c71      	adds	r1, r6, #1
 800bb90:	2400      	movs	r4, #0
 800bb92:	7808      	ldrb	r0, [r1, #0]
 800bb94:	f7ff ff8c 	bl	800bab0 <__hexdig_fun>
 800bb98:	1e43      	subs	r3, r0, #1
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b18      	cmp	r3, #24
 800bb9e:	d830      	bhi.n	800bc02 <__gethex+0x126>
 800bba0:	f1a0 0210 	sub.w	r2, r0, #16
 800bba4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bba8:	f7ff ff82 	bl	800bab0 <__hexdig_fun>
 800bbac:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bbb0:	fa5f fc8c 	uxtb.w	ip, ip
 800bbb4:	f1bc 0f18 	cmp.w	ip, #24
 800bbb8:	f04f 030a 	mov.w	r3, #10
 800bbbc:	d91e      	bls.n	800bbfc <__gethex+0x120>
 800bbbe:	b104      	cbz	r4, 800bbc2 <__gethex+0xe6>
 800bbc0:	4252      	negs	r2, r2
 800bbc2:	4417      	add	r7, r2
 800bbc4:	f8ca 1000 	str.w	r1, [sl]
 800bbc8:	b1ed      	cbz	r5, 800bc06 <__gethex+0x12a>
 800bbca:	f1bb 0f00 	cmp.w	fp, #0
 800bbce:	bf0c      	ite	eq
 800bbd0:	2506      	moveq	r5, #6
 800bbd2:	2500      	movne	r5, #0
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	b005      	add	sp, #20
 800bbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbdc:	2500      	movs	r5, #0
 800bbde:	462c      	mov	r4, r5
 800bbe0:	e7b0      	b.n	800bb44 <__gethex+0x68>
 800bbe2:	2c00      	cmp	r4, #0
 800bbe4:	d1c7      	bne.n	800bb76 <__gethex+0x9a>
 800bbe6:	4627      	mov	r7, r4
 800bbe8:	e7c7      	b.n	800bb7a <__gethex+0x9e>
 800bbea:	464e      	mov	r6, r9
 800bbec:	462f      	mov	r7, r5
 800bbee:	2501      	movs	r5, #1
 800bbf0:	e7c3      	b.n	800bb7a <__gethex+0x9e>
 800bbf2:	2400      	movs	r4, #0
 800bbf4:	1cb1      	adds	r1, r6, #2
 800bbf6:	e7cc      	b.n	800bb92 <__gethex+0xb6>
 800bbf8:	2401      	movs	r4, #1
 800bbfa:	e7fb      	b.n	800bbf4 <__gethex+0x118>
 800bbfc:	fb03 0002 	mla	r0, r3, r2, r0
 800bc00:	e7ce      	b.n	800bba0 <__gethex+0xc4>
 800bc02:	4631      	mov	r1, r6
 800bc04:	e7de      	b.n	800bbc4 <__gethex+0xe8>
 800bc06:	eba6 0309 	sub.w	r3, r6, r9
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	2b07      	cmp	r3, #7
 800bc10:	dc0a      	bgt.n	800bc28 <__gethex+0x14c>
 800bc12:	9801      	ldr	r0, [sp, #4]
 800bc14:	f7fe f950 	bl	8009eb8 <_Balloc>
 800bc18:	4604      	mov	r4, r0
 800bc1a:	b940      	cbnz	r0, 800bc2e <__gethex+0x152>
 800bc1c:	4b5c      	ldr	r3, [pc, #368]	@ (800bd90 <__gethex+0x2b4>)
 800bc1e:	4602      	mov	r2, r0
 800bc20:	21e4      	movs	r1, #228	@ 0xe4
 800bc22:	485c      	ldr	r0, [pc, #368]	@ (800bd94 <__gethex+0x2b8>)
 800bc24:	f7ff fec0 	bl	800b9a8 <__assert_func>
 800bc28:	3101      	adds	r1, #1
 800bc2a:	105b      	asrs	r3, r3, #1
 800bc2c:	e7ef      	b.n	800bc0e <__gethex+0x132>
 800bc2e:	f100 0a14 	add.w	sl, r0, #20
 800bc32:	2300      	movs	r3, #0
 800bc34:	4655      	mov	r5, sl
 800bc36:	469b      	mov	fp, r3
 800bc38:	45b1      	cmp	r9, r6
 800bc3a:	d337      	bcc.n	800bcac <__gethex+0x1d0>
 800bc3c:	f845 bb04 	str.w	fp, [r5], #4
 800bc40:	eba5 050a 	sub.w	r5, r5, sl
 800bc44:	10ad      	asrs	r5, r5, #2
 800bc46:	6125      	str	r5, [r4, #16]
 800bc48:	4658      	mov	r0, fp
 800bc4a:	f7fe fa27 	bl	800a09c <__hi0bits>
 800bc4e:	016d      	lsls	r5, r5, #5
 800bc50:	f8d8 6000 	ldr.w	r6, [r8]
 800bc54:	1a2d      	subs	r5, r5, r0
 800bc56:	42b5      	cmp	r5, r6
 800bc58:	dd54      	ble.n	800bd04 <__gethex+0x228>
 800bc5a:	1bad      	subs	r5, r5, r6
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f7fe fdb3 	bl	800a7ca <__any_on>
 800bc64:	4681      	mov	r9, r0
 800bc66:	b178      	cbz	r0, 800bc88 <__gethex+0x1ac>
 800bc68:	1e6b      	subs	r3, r5, #1
 800bc6a:	1159      	asrs	r1, r3, #5
 800bc6c:	f003 021f 	and.w	r2, r3, #31
 800bc70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc74:	f04f 0901 	mov.w	r9, #1
 800bc78:	fa09 f202 	lsl.w	r2, r9, r2
 800bc7c:	420a      	tst	r2, r1
 800bc7e:	d003      	beq.n	800bc88 <__gethex+0x1ac>
 800bc80:	454b      	cmp	r3, r9
 800bc82:	dc36      	bgt.n	800bcf2 <__gethex+0x216>
 800bc84:	f04f 0902 	mov.w	r9, #2
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f7ff febe 	bl	800ba0c <rshift>
 800bc90:	442f      	add	r7, r5
 800bc92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc96:	42bb      	cmp	r3, r7
 800bc98:	da42      	bge.n	800bd20 <__gethex+0x244>
 800bc9a:	9801      	ldr	r0, [sp, #4]
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	f7fe f94b 	bl	8009f38 <_Bfree>
 800bca2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bca4:	2300      	movs	r3, #0
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	25a3      	movs	r5, #163	@ 0xa3
 800bcaa:	e793      	b.n	800bbd4 <__gethex+0xf8>
 800bcac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bcb0:	2a2e      	cmp	r2, #46	@ 0x2e
 800bcb2:	d012      	beq.n	800bcda <__gethex+0x1fe>
 800bcb4:	2b20      	cmp	r3, #32
 800bcb6:	d104      	bne.n	800bcc2 <__gethex+0x1e6>
 800bcb8:	f845 bb04 	str.w	fp, [r5], #4
 800bcbc:	f04f 0b00 	mov.w	fp, #0
 800bcc0:	465b      	mov	r3, fp
 800bcc2:	7830      	ldrb	r0, [r6, #0]
 800bcc4:	9303      	str	r3, [sp, #12]
 800bcc6:	f7ff fef3 	bl	800bab0 <__hexdig_fun>
 800bcca:	9b03      	ldr	r3, [sp, #12]
 800bccc:	f000 000f 	and.w	r0, r0, #15
 800bcd0:	4098      	lsls	r0, r3
 800bcd2:	ea4b 0b00 	orr.w	fp, fp, r0
 800bcd6:	3304      	adds	r3, #4
 800bcd8:	e7ae      	b.n	800bc38 <__gethex+0x15c>
 800bcda:	45b1      	cmp	r9, r6
 800bcdc:	d8ea      	bhi.n	800bcb4 <__gethex+0x1d8>
 800bcde:	492b      	ldr	r1, [pc, #172]	@ (800bd8c <__gethex+0x2b0>)
 800bce0:	9303      	str	r3, [sp, #12]
 800bce2:	2201      	movs	r2, #1
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7ff fe33 	bl	800b950 <strncmp>
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d1e1      	bne.n	800bcb4 <__gethex+0x1d8>
 800bcf0:	e7a2      	b.n	800bc38 <__gethex+0x15c>
 800bcf2:	1ea9      	subs	r1, r5, #2
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7fe fd68 	bl	800a7ca <__any_on>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d0c2      	beq.n	800bc84 <__gethex+0x1a8>
 800bcfe:	f04f 0903 	mov.w	r9, #3
 800bd02:	e7c1      	b.n	800bc88 <__gethex+0x1ac>
 800bd04:	da09      	bge.n	800bd1a <__gethex+0x23e>
 800bd06:	1b75      	subs	r5, r6, r5
 800bd08:	4621      	mov	r1, r4
 800bd0a:	9801      	ldr	r0, [sp, #4]
 800bd0c:	462a      	mov	r2, r5
 800bd0e:	f7fe fb23 	bl	800a358 <__lshift>
 800bd12:	1b7f      	subs	r7, r7, r5
 800bd14:	4604      	mov	r4, r0
 800bd16:	f100 0a14 	add.w	sl, r0, #20
 800bd1a:	f04f 0900 	mov.w	r9, #0
 800bd1e:	e7b8      	b.n	800bc92 <__gethex+0x1b6>
 800bd20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd24:	42bd      	cmp	r5, r7
 800bd26:	dd6f      	ble.n	800be08 <__gethex+0x32c>
 800bd28:	1bed      	subs	r5, r5, r7
 800bd2a:	42ae      	cmp	r6, r5
 800bd2c:	dc34      	bgt.n	800bd98 <__gethex+0x2bc>
 800bd2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d022      	beq.n	800bd7c <__gethex+0x2a0>
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d024      	beq.n	800bd84 <__gethex+0x2a8>
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d115      	bne.n	800bd6a <__gethex+0x28e>
 800bd3e:	42ae      	cmp	r6, r5
 800bd40:	d113      	bne.n	800bd6a <__gethex+0x28e>
 800bd42:	2e01      	cmp	r6, #1
 800bd44:	d10b      	bne.n	800bd5e <__gethex+0x282>
 800bd46:	9a02      	ldr	r2, [sp, #8]
 800bd48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	2301      	movs	r3, #1
 800bd50:	6123      	str	r3, [r4, #16]
 800bd52:	f8ca 3000 	str.w	r3, [sl]
 800bd56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd58:	2562      	movs	r5, #98	@ 0x62
 800bd5a:	601c      	str	r4, [r3, #0]
 800bd5c:	e73a      	b.n	800bbd4 <__gethex+0xf8>
 800bd5e:	1e71      	subs	r1, r6, #1
 800bd60:	4620      	mov	r0, r4
 800bd62:	f7fe fd32 	bl	800a7ca <__any_on>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d1ed      	bne.n	800bd46 <__gethex+0x26a>
 800bd6a:	9801      	ldr	r0, [sp, #4]
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	f7fe f8e3 	bl	8009f38 <_Bfree>
 800bd72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd74:	2300      	movs	r3, #0
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	2550      	movs	r5, #80	@ 0x50
 800bd7a:	e72b      	b.n	800bbd4 <__gethex+0xf8>
 800bd7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f3      	bne.n	800bd6a <__gethex+0x28e>
 800bd82:	e7e0      	b.n	800bd46 <__gethex+0x26a>
 800bd84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1dd      	bne.n	800bd46 <__gethex+0x26a>
 800bd8a:	e7ee      	b.n	800bd6a <__gethex+0x28e>
 800bd8c:	0800d9ab 	.word	0x0800d9ab
 800bd90:	0800d941 	.word	0x0800d941
 800bd94:	0800da02 	.word	0x0800da02
 800bd98:	1e6f      	subs	r7, r5, #1
 800bd9a:	f1b9 0f00 	cmp.w	r9, #0
 800bd9e:	d130      	bne.n	800be02 <__gethex+0x326>
 800bda0:	b127      	cbz	r7, 800bdac <__gethex+0x2d0>
 800bda2:	4639      	mov	r1, r7
 800bda4:	4620      	mov	r0, r4
 800bda6:	f7fe fd10 	bl	800a7ca <__any_on>
 800bdaa:	4681      	mov	r9, r0
 800bdac:	117a      	asrs	r2, r7, #5
 800bdae:	2301      	movs	r3, #1
 800bdb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bdb4:	f007 071f 	and.w	r7, r7, #31
 800bdb8:	40bb      	lsls	r3, r7
 800bdba:	4213      	tst	r3, r2
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	bf18      	it	ne
 800bdc2:	f049 0902 	orrne.w	r9, r9, #2
 800bdc6:	f7ff fe21 	bl	800ba0c <rshift>
 800bdca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bdce:	1b76      	subs	r6, r6, r5
 800bdd0:	2502      	movs	r5, #2
 800bdd2:	f1b9 0f00 	cmp.w	r9, #0
 800bdd6:	d047      	beq.n	800be68 <__gethex+0x38c>
 800bdd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d015      	beq.n	800be0c <__gethex+0x330>
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d017      	beq.n	800be14 <__gethex+0x338>
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d109      	bne.n	800bdfc <__gethex+0x320>
 800bde8:	f019 0f02 	tst.w	r9, #2
 800bdec:	d006      	beq.n	800bdfc <__gethex+0x320>
 800bdee:	f8da 3000 	ldr.w	r3, [sl]
 800bdf2:	ea49 0903 	orr.w	r9, r9, r3
 800bdf6:	f019 0f01 	tst.w	r9, #1
 800bdfa:	d10e      	bne.n	800be1a <__gethex+0x33e>
 800bdfc:	f045 0510 	orr.w	r5, r5, #16
 800be00:	e032      	b.n	800be68 <__gethex+0x38c>
 800be02:	f04f 0901 	mov.w	r9, #1
 800be06:	e7d1      	b.n	800bdac <__gethex+0x2d0>
 800be08:	2501      	movs	r5, #1
 800be0a:	e7e2      	b.n	800bdd2 <__gethex+0x2f6>
 800be0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be0e:	f1c3 0301 	rsb	r3, r3, #1
 800be12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d0f0      	beq.n	800bdfc <__gethex+0x320>
 800be1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be1e:	f104 0314 	add.w	r3, r4, #20
 800be22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be2a:	f04f 0c00 	mov.w	ip, #0
 800be2e:	4618      	mov	r0, r3
 800be30:	f853 2b04 	ldr.w	r2, [r3], #4
 800be34:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800be38:	d01b      	beq.n	800be72 <__gethex+0x396>
 800be3a:	3201      	adds	r2, #1
 800be3c:	6002      	str	r2, [r0, #0]
 800be3e:	2d02      	cmp	r5, #2
 800be40:	f104 0314 	add.w	r3, r4, #20
 800be44:	d13c      	bne.n	800bec0 <__gethex+0x3e4>
 800be46:	f8d8 2000 	ldr.w	r2, [r8]
 800be4a:	3a01      	subs	r2, #1
 800be4c:	42b2      	cmp	r2, r6
 800be4e:	d109      	bne.n	800be64 <__gethex+0x388>
 800be50:	1171      	asrs	r1, r6, #5
 800be52:	2201      	movs	r2, #1
 800be54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be58:	f006 061f 	and.w	r6, r6, #31
 800be5c:	fa02 f606 	lsl.w	r6, r2, r6
 800be60:	421e      	tst	r6, r3
 800be62:	d13a      	bne.n	800beda <__gethex+0x3fe>
 800be64:	f045 0520 	orr.w	r5, r5, #32
 800be68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be6a:	601c      	str	r4, [r3, #0]
 800be6c:	9b02      	ldr	r3, [sp, #8]
 800be6e:	601f      	str	r7, [r3, #0]
 800be70:	e6b0      	b.n	800bbd4 <__gethex+0xf8>
 800be72:	4299      	cmp	r1, r3
 800be74:	f843 cc04 	str.w	ip, [r3, #-4]
 800be78:	d8d9      	bhi.n	800be2e <__gethex+0x352>
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	459b      	cmp	fp, r3
 800be7e:	db17      	blt.n	800beb0 <__gethex+0x3d4>
 800be80:	6861      	ldr	r1, [r4, #4]
 800be82:	9801      	ldr	r0, [sp, #4]
 800be84:	3101      	adds	r1, #1
 800be86:	f7fe f817 	bl	8009eb8 <_Balloc>
 800be8a:	4681      	mov	r9, r0
 800be8c:	b918      	cbnz	r0, 800be96 <__gethex+0x3ba>
 800be8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bef8 <__gethex+0x41c>)
 800be90:	4602      	mov	r2, r0
 800be92:	2184      	movs	r1, #132	@ 0x84
 800be94:	e6c5      	b.n	800bc22 <__gethex+0x146>
 800be96:	6922      	ldr	r2, [r4, #16]
 800be98:	3202      	adds	r2, #2
 800be9a:	f104 010c 	add.w	r1, r4, #12
 800be9e:	0092      	lsls	r2, r2, #2
 800bea0:	300c      	adds	r0, #12
 800bea2:	f7fd f89c 	bl	8008fde <memcpy>
 800bea6:	4621      	mov	r1, r4
 800bea8:	9801      	ldr	r0, [sp, #4]
 800beaa:	f7fe f845 	bl	8009f38 <_Bfree>
 800beae:	464c      	mov	r4, r9
 800beb0:	6923      	ldr	r3, [r4, #16]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800beb8:	6122      	str	r2, [r4, #16]
 800beba:	2201      	movs	r2, #1
 800bebc:	615a      	str	r2, [r3, #20]
 800bebe:	e7be      	b.n	800be3e <__gethex+0x362>
 800bec0:	6922      	ldr	r2, [r4, #16]
 800bec2:	455a      	cmp	r2, fp
 800bec4:	dd0b      	ble.n	800bede <__gethex+0x402>
 800bec6:	2101      	movs	r1, #1
 800bec8:	4620      	mov	r0, r4
 800beca:	f7ff fd9f 	bl	800ba0c <rshift>
 800bece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bed2:	3701      	adds	r7, #1
 800bed4:	42bb      	cmp	r3, r7
 800bed6:	f6ff aee0 	blt.w	800bc9a <__gethex+0x1be>
 800beda:	2501      	movs	r5, #1
 800bedc:	e7c2      	b.n	800be64 <__gethex+0x388>
 800bede:	f016 061f 	ands.w	r6, r6, #31
 800bee2:	d0fa      	beq.n	800beda <__gethex+0x3fe>
 800bee4:	4453      	add	r3, sl
 800bee6:	f1c6 0620 	rsb	r6, r6, #32
 800beea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800beee:	f7fe f8d5 	bl	800a09c <__hi0bits>
 800bef2:	42b0      	cmp	r0, r6
 800bef4:	dbe7      	blt.n	800bec6 <__gethex+0x3ea>
 800bef6:	e7f0      	b.n	800beda <__gethex+0x3fe>
 800bef8:	0800d941 	.word	0x0800d941

0800befc <L_shift>:
 800befc:	f1c2 0208 	rsb	r2, r2, #8
 800bf00:	0092      	lsls	r2, r2, #2
 800bf02:	b570      	push	{r4, r5, r6, lr}
 800bf04:	f1c2 0620 	rsb	r6, r2, #32
 800bf08:	6843      	ldr	r3, [r0, #4]
 800bf0a:	6804      	ldr	r4, [r0, #0]
 800bf0c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf10:	432c      	orrs	r4, r5
 800bf12:	40d3      	lsrs	r3, r2
 800bf14:	6004      	str	r4, [r0, #0]
 800bf16:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf1a:	4288      	cmp	r0, r1
 800bf1c:	d3f4      	bcc.n	800bf08 <L_shift+0xc>
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}

0800bf20 <__match>:
 800bf20:	b530      	push	{r4, r5, lr}
 800bf22:	6803      	ldr	r3, [r0, #0]
 800bf24:	3301      	adds	r3, #1
 800bf26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf2a:	b914      	cbnz	r4, 800bf32 <__match+0x12>
 800bf2c:	6003      	str	r3, [r0, #0]
 800bf2e:	2001      	movs	r0, #1
 800bf30:	bd30      	pop	{r4, r5, pc}
 800bf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bf3a:	2d19      	cmp	r5, #25
 800bf3c:	bf98      	it	ls
 800bf3e:	3220      	addls	r2, #32
 800bf40:	42a2      	cmp	r2, r4
 800bf42:	d0f0      	beq.n	800bf26 <__match+0x6>
 800bf44:	2000      	movs	r0, #0
 800bf46:	e7f3      	b.n	800bf30 <__match+0x10>

0800bf48 <__hexnan>:
 800bf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4c:	680b      	ldr	r3, [r1, #0]
 800bf4e:	6801      	ldr	r1, [r0, #0]
 800bf50:	115e      	asrs	r6, r3, #5
 800bf52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf56:	f013 031f 	ands.w	r3, r3, #31
 800bf5a:	b087      	sub	sp, #28
 800bf5c:	bf18      	it	ne
 800bf5e:	3604      	addne	r6, #4
 800bf60:	2500      	movs	r5, #0
 800bf62:	1f37      	subs	r7, r6, #4
 800bf64:	4682      	mov	sl, r0
 800bf66:	4690      	mov	r8, r2
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf6e:	46b9      	mov	r9, r7
 800bf70:	463c      	mov	r4, r7
 800bf72:	9502      	str	r5, [sp, #8]
 800bf74:	46ab      	mov	fp, r5
 800bf76:	784a      	ldrb	r2, [r1, #1]
 800bf78:	1c4b      	adds	r3, r1, #1
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	b342      	cbz	r2, 800bfd0 <__hexnan+0x88>
 800bf7e:	4610      	mov	r0, r2
 800bf80:	9105      	str	r1, [sp, #20]
 800bf82:	9204      	str	r2, [sp, #16]
 800bf84:	f7ff fd94 	bl	800bab0 <__hexdig_fun>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d151      	bne.n	800c030 <__hexnan+0xe8>
 800bf8c:	9a04      	ldr	r2, [sp, #16]
 800bf8e:	9905      	ldr	r1, [sp, #20]
 800bf90:	2a20      	cmp	r2, #32
 800bf92:	d818      	bhi.n	800bfc6 <__hexnan+0x7e>
 800bf94:	9b02      	ldr	r3, [sp, #8]
 800bf96:	459b      	cmp	fp, r3
 800bf98:	dd13      	ble.n	800bfc2 <__hexnan+0x7a>
 800bf9a:	454c      	cmp	r4, r9
 800bf9c:	d206      	bcs.n	800bfac <__hexnan+0x64>
 800bf9e:	2d07      	cmp	r5, #7
 800bfa0:	dc04      	bgt.n	800bfac <__hexnan+0x64>
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	4649      	mov	r1, r9
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f7ff ffa8 	bl	800befc <L_shift>
 800bfac:	4544      	cmp	r4, r8
 800bfae:	d952      	bls.n	800c056 <__hexnan+0x10e>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f1a4 0904 	sub.w	r9, r4, #4
 800bfb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfba:	f8cd b008 	str.w	fp, [sp, #8]
 800bfbe:	464c      	mov	r4, r9
 800bfc0:	461d      	mov	r5, r3
 800bfc2:	9903      	ldr	r1, [sp, #12]
 800bfc4:	e7d7      	b.n	800bf76 <__hexnan+0x2e>
 800bfc6:	2a29      	cmp	r2, #41	@ 0x29
 800bfc8:	d157      	bne.n	800c07a <__hexnan+0x132>
 800bfca:	3102      	adds	r1, #2
 800bfcc:	f8ca 1000 	str.w	r1, [sl]
 800bfd0:	f1bb 0f00 	cmp.w	fp, #0
 800bfd4:	d051      	beq.n	800c07a <__hexnan+0x132>
 800bfd6:	454c      	cmp	r4, r9
 800bfd8:	d206      	bcs.n	800bfe8 <__hexnan+0xa0>
 800bfda:	2d07      	cmp	r5, #7
 800bfdc:	dc04      	bgt.n	800bfe8 <__hexnan+0xa0>
 800bfde:	462a      	mov	r2, r5
 800bfe0:	4649      	mov	r1, r9
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff ff8a 	bl	800befc <L_shift>
 800bfe8:	4544      	cmp	r4, r8
 800bfea:	d936      	bls.n	800c05a <__hexnan+0x112>
 800bfec:	f1a8 0204 	sub.w	r2, r8, #4
 800bff0:	4623      	mov	r3, r4
 800bff2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bff6:	f842 1f04 	str.w	r1, [r2, #4]!
 800bffa:	429f      	cmp	r7, r3
 800bffc:	d2f9      	bcs.n	800bff2 <__hexnan+0xaa>
 800bffe:	1b3b      	subs	r3, r7, r4
 800c000:	f023 0303 	bic.w	r3, r3, #3
 800c004:	3304      	adds	r3, #4
 800c006:	3401      	adds	r4, #1
 800c008:	3e03      	subs	r6, #3
 800c00a:	42b4      	cmp	r4, r6
 800c00c:	bf88      	it	hi
 800c00e:	2304      	movhi	r3, #4
 800c010:	4443      	add	r3, r8
 800c012:	2200      	movs	r2, #0
 800c014:	f843 2b04 	str.w	r2, [r3], #4
 800c018:	429f      	cmp	r7, r3
 800c01a:	d2fb      	bcs.n	800c014 <__hexnan+0xcc>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	b91b      	cbnz	r3, 800c028 <__hexnan+0xe0>
 800c020:	4547      	cmp	r7, r8
 800c022:	d128      	bne.n	800c076 <__hexnan+0x12e>
 800c024:	2301      	movs	r3, #1
 800c026:	603b      	str	r3, [r7, #0]
 800c028:	2005      	movs	r0, #5
 800c02a:	b007      	add	sp, #28
 800c02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c030:	3501      	adds	r5, #1
 800c032:	2d08      	cmp	r5, #8
 800c034:	f10b 0b01 	add.w	fp, fp, #1
 800c038:	dd06      	ble.n	800c048 <__hexnan+0x100>
 800c03a:	4544      	cmp	r4, r8
 800c03c:	d9c1      	bls.n	800bfc2 <__hexnan+0x7a>
 800c03e:	2300      	movs	r3, #0
 800c040:	f844 3c04 	str.w	r3, [r4, #-4]
 800c044:	2501      	movs	r5, #1
 800c046:	3c04      	subs	r4, #4
 800c048:	6822      	ldr	r2, [r4, #0]
 800c04a:	f000 000f 	and.w	r0, r0, #15
 800c04e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c052:	6020      	str	r0, [r4, #0]
 800c054:	e7b5      	b.n	800bfc2 <__hexnan+0x7a>
 800c056:	2508      	movs	r5, #8
 800c058:	e7b3      	b.n	800bfc2 <__hexnan+0x7a>
 800c05a:	9b01      	ldr	r3, [sp, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0dd      	beq.n	800c01c <__hexnan+0xd4>
 800c060:	f1c3 0320 	rsb	r3, r3, #32
 800c064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c068:	40da      	lsrs	r2, r3
 800c06a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c06e:	4013      	ands	r3, r2
 800c070:	f846 3c04 	str.w	r3, [r6, #-4]
 800c074:	e7d2      	b.n	800c01c <__hexnan+0xd4>
 800c076:	3f04      	subs	r7, #4
 800c078:	e7d0      	b.n	800c01c <__hexnan+0xd4>
 800c07a:	2004      	movs	r0, #4
 800c07c:	e7d5      	b.n	800c02a <__hexnan+0xe2>

0800c07e <__ascii_mbtowc>:
 800c07e:	b082      	sub	sp, #8
 800c080:	b901      	cbnz	r1, 800c084 <__ascii_mbtowc+0x6>
 800c082:	a901      	add	r1, sp, #4
 800c084:	b142      	cbz	r2, 800c098 <__ascii_mbtowc+0x1a>
 800c086:	b14b      	cbz	r3, 800c09c <__ascii_mbtowc+0x1e>
 800c088:	7813      	ldrb	r3, [r2, #0]
 800c08a:	600b      	str	r3, [r1, #0]
 800c08c:	7812      	ldrb	r2, [r2, #0]
 800c08e:	1e10      	subs	r0, r2, #0
 800c090:	bf18      	it	ne
 800c092:	2001      	movne	r0, #1
 800c094:	b002      	add	sp, #8
 800c096:	4770      	bx	lr
 800c098:	4610      	mov	r0, r2
 800c09a:	e7fb      	b.n	800c094 <__ascii_mbtowc+0x16>
 800c09c:	f06f 0001 	mvn.w	r0, #1
 800c0a0:	e7f8      	b.n	800c094 <__ascii_mbtowc+0x16>

0800c0a2 <_realloc_r>:
 800c0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a6:	4607      	mov	r7, r0
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	b921      	cbnz	r1, 800c0b8 <_realloc_r+0x16>
 800c0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	f7fd be74 	b.w	8009da0 <_malloc_r>
 800c0b8:	b92a      	cbnz	r2, 800c0c6 <_realloc_r+0x24>
 800c0ba:	f7fd fdfd 	bl	8009cb8 <_free_r>
 800c0be:	4625      	mov	r5, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c6:	f000 f840 	bl	800c14a <_malloc_usable_size_r>
 800c0ca:	4284      	cmp	r4, r0
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	d802      	bhi.n	800c0d6 <_realloc_r+0x34>
 800c0d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0d4:	d8f4      	bhi.n	800c0c0 <_realloc_r+0x1e>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7fd fe61 	bl	8009da0 <_malloc_r>
 800c0de:	4680      	mov	r8, r0
 800c0e0:	b908      	cbnz	r0, 800c0e6 <_realloc_r+0x44>
 800c0e2:	4645      	mov	r5, r8
 800c0e4:	e7ec      	b.n	800c0c0 <_realloc_r+0x1e>
 800c0e6:	42b4      	cmp	r4, r6
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	bf28      	it	cs
 800c0ee:	4632      	movcs	r2, r6
 800c0f0:	f7fc ff75 	bl	8008fde <memcpy>
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	f7fd fdde 	bl	8009cb8 <_free_r>
 800c0fc:	e7f1      	b.n	800c0e2 <_realloc_r+0x40>

0800c0fe <__ascii_wctomb>:
 800c0fe:	4603      	mov	r3, r0
 800c100:	4608      	mov	r0, r1
 800c102:	b141      	cbz	r1, 800c116 <__ascii_wctomb+0x18>
 800c104:	2aff      	cmp	r2, #255	@ 0xff
 800c106:	d904      	bls.n	800c112 <__ascii_wctomb+0x14>
 800c108:	228a      	movs	r2, #138	@ 0x8a
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c110:	4770      	bx	lr
 800c112:	700a      	strb	r2, [r1, #0]
 800c114:	2001      	movs	r0, #1
 800c116:	4770      	bx	lr

0800c118 <fiprintf>:
 800c118:	b40e      	push	{r1, r2, r3}
 800c11a:	b503      	push	{r0, r1, lr}
 800c11c:	4601      	mov	r1, r0
 800c11e:	ab03      	add	r3, sp, #12
 800c120:	4805      	ldr	r0, [pc, #20]	@ (800c138 <fiprintf+0x20>)
 800c122:	f853 2b04 	ldr.w	r2, [r3], #4
 800c126:	6800      	ldr	r0, [r0, #0]
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	f000 f83f 	bl	800c1ac <_vfiprintf_r>
 800c12e:	b002      	add	sp, #8
 800c130:	f85d eb04 	ldr.w	lr, [sp], #4
 800c134:	b003      	add	sp, #12
 800c136:	4770      	bx	lr
 800c138:	20000038 	.word	0x20000038

0800c13c <abort>:
 800c13c:	b508      	push	{r3, lr}
 800c13e:	2006      	movs	r0, #6
 800c140:	f000 fa08 	bl	800c554 <raise>
 800c144:	2001      	movs	r0, #1
 800c146:	f7f7 fae0 	bl	800370a <_exit>

0800c14a <_malloc_usable_size_r>:
 800c14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c14e:	1f18      	subs	r0, r3, #4
 800c150:	2b00      	cmp	r3, #0
 800c152:	bfbc      	itt	lt
 800c154:	580b      	ldrlt	r3, [r1, r0]
 800c156:	18c0      	addlt	r0, r0, r3
 800c158:	4770      	bx	lr

0800c15a <__sfputc_r>:
 800c15a:	6893      	ldr	r3, [r2, #8]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	b410      	push	{r4}
 800c162:	6093      	str	r3, [r2, #8]
 800c164:	da08      	bge.n	800c178 <__sfputc_r+0x1e>
 800c166:	6994      	ldr	r4, [r2, #24]
 800c168:	42a3      	cmp	r3, r4
 800c16a:	db01      	blt.n	800c170 <__sfputc_r+0x16>
 800c16c:	290a      	cmp	r1, #10
 800c16e:	d103      	bne.n	800c178 <__sfputc_r+0x1e>
 800c170:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c174:	f000 b932 	b.w	800c3dc <__swbuf_r>
 800c178:	6813      	ldr	r3, [r2, #0]
 800c17a:	1c58      	adds	r0, r3, #1
 800c17c:	6010      	str	r0, [r2, #0]
 800c17e:	7019      	strb	r1, [r3, #0]
 800c180:	4608      	mov	r0, r1
 800c182:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <__sfputs_r>:
 800c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18a:	4606      	mov	r6, r0
 800c18c:	460f      	mov	r7, r1
 800c18e:	4614      	mov	r4, r2
 800c190:	18d5      	adds	r5, r2, r3
 800c192:	42ac      	cmp	r4, r5
 800c194:	d101      	bne.n	800c19a <__sfputs_r+0x12>
 800c196:	2000      	movs	r0, #0
 800c198:	e007      	b.n	800c1aa <__sfputs_r+0x22>
 800c19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c19e:	463a      	mov	r2, r7
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff ffda 	bl	800c15a <__sfputc_r>
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	d1f3      	bne.n	800c192 <__sfputs_r+0xa>
 800c1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1ac <_vfiprintf_r>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	460d      	mov	r5, r1
 800c1b2:	b09d      	sub	sp, #116	@ 0x74
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	4698      	mov	r8, r3
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	b118      	cbz	r0, 800c1c4 <_vfiprintf_r+0x18>
 800c1bc:	6a03      	ldr	r3, [r0, #32]
 800c1be:	b90b      	cbnz	r3, 800c1c4 <_vfiprintf_r+0x18>
 800c1c0:	f7fc fdbc 	bl	8008d3c <__sinit>
 800c1c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1c6:	07d9      	lsls	r1, r3, #31
 800c1c8:	d405      	bmi.n	800c1d6 <_vfiprintf_r+0x2a>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	059a      	lsls	r2, r3, #22
 800c1ce:	d402      	bmi.n	800c1d6 <_vfiprintf_r+0x2a>
 800c1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1d2:	f7fc ff02 	bl	8008fda <__retarget_lock_acquire_recursive>
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	071b      	lsls	r3, r3, #28
 800c1da:	d501      	bpl.n	800c1e0 <_vfiprintf_r+0x34>
 800c1dc:	692b      	ldr	r3, [r5, #16]
 800c1de:	b99b      	cbnz	r3, 800c208 <_vfiprintf_r+0x5c>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f000 f938 	bl	800c458 <__swsetup_r>
 800c1e8:	b170      	cbz	r0, 800c208 <_vfiprintf_r+0x5c>
 800c1ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1ec:	07dc      	lsls	r4, r3, #31
 800c1ee:	d504      	bpl.n	800c1fa <_vfiprintf_r+0x4e>
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1f4:	b01d      	add	sp, #116	@ 0x74
 800c1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	0598      	lsls	r0, r3, #22
 800c1fe:	d4f7      	bmi.n	800c1f0 <_vfiprintf_r+0x44>
 800c200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c202:	f7fc feeb 	bl	8008fdc <__retarget_lock_release_recursive>
 800c206:	e7f3      	b.n	800c1f0 <_vfiprintf_r+0x44>
 800c208:	2300      	movs	r3, #0
 800c20a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20c:	2320      	movs	r3, #32
 800c20e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c212:	f8cd 800c 	str.w	r8, [sp, #12]
 800c216:	2330      	movs	r3, #48	@ 0x30
 800c218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3c8 <_vfiprintf_r+0x21c>
 800c21c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c220:	f04f 0901 	mov.w	r9, #1
 800c224:	4623      	mov	r3, r4
 800c226:	469a      	mov	sl, r3
 800c228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22c:	b10a      	cbz	r2, 800c232 <_vfiprintf_r+0x86>
 800c22e:	2a25      	cmp	r2, #37	@ 0x25
 800c230:	d1f9      	bne.n	800c226 <_vfiprintf_r+0x7a>
 800c232:	ebba 0b04 	subs.w	fp, sl, r4
 800c236:	d00b      	beq.n	800c250 <_vfiprintf_r+0xa4>
 800c238:	465b      	mov	r3, fp
 800c23a:	4622      	mov	r2, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	4630      	mov	r0, r6
 800c240:	f7ff ffa2 	bl	800c188 <__sfputs_r>
 800c244:	3001      	adds	r0, #1
 800c246:	f000 80a7 	beq.w	800c398 <_vfiprintf_r+0x1ec>
 800c24a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c24c:	445a      	add	r2, fp
 800c24e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c250:	f89a 3000 	ldrb.w	r3, [sl]
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 809f 	beq.w	800c398 <_vfiprintf_r+0x1ec>
 800c25a:	2300      	movs	r3, #0
 800c25c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c264:	f10a 0a01 	add.w	sl, sl, #1
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	9307      	str	r3, [sp, #28]
 800c26c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c270:	931a      	str	r3, [sp, #104]	@ 0x68
 800c272:	4654      	mov	r4, sl
 800c274:	2205      	movs	r2, #5
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	4853      	ldr	r0, [pc, #332]	@ (800c3c8 <_vfiprintf_r+0x21c>)
 800c27c:	f7f3 ffd0 	bl	8000220 <memchr>
 800c280:	9a04      	ldr	r2, [sp, #16]
 800c282:	b9d8      	cbnz	r0, 800c2bc <_vfiprintf_r+0x110>
 800c284:	06d1      	lsls	r1, r2, #27
 800c286:	bf44      	itt	mi
 800c288:	2320      	movmi	r3, #32
 800c28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c28e:	0713      	lsls	r3, r2, #28
 800c290:	bf44      	itt	mi
 800c292:	232b      	movmi	r3, #43	@ 0x2b
 800c294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c298:	f89a 3000 	ldrb.w	r3, [sl]
 800c29c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c29e:	d015      	beq.n	800c2cc <_vfiprintf_r+0x120>
 800c2a0:	9a07      	ldr	r2, [sp, #28]
 800c2a2:	4654      	mov	r4, sl
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f04f 0c0a 	mov.w	ip, #10
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b0:	3b30      	subs	r3, #48	@ 0x30
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	d94b      	bls.n	800c34e <_vfiprintf_r+0x1a2>
 800c2b6:	b1b0      	cbz	r0, 800c2e6 <_vfiprintf_r+0x13a>
 800c2b8:	9207      	str	r2, [sp, #28]
 800c2ba:	e014      	b.n	800c2e6 <_vfiprintf_r+0x13a>
 800c2bc:	eba0 0308 	sub.w	r3, r0, r8
 800c2c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	46a2      	mov	sl, r4
 800c2ca:	e7d2      	b.n	800c272 <_vfiprintf_r+0xc6>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	1d19      	adds	r1, r3, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	9103      	str	r1, [sp, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	bfbb      	ittet	lt
 800c2d8:	425b      	neglt	r3, r3
 800c2da:	f042 0202 	orrlt.w	r2, r2, #2
 800c2de:	9307      	strge	r3, [sp, #28]
 800c2e0:	9307      	strlt	r3, [sp, #28]
 800c2e2:	bfb8      	it	lt
 800c2e4:	9204      	strlt	r2, [sp, #16]
 800c2e6:	7823      	ldrb	r3, [r4, #0]
 800c2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ea:	d10a      	bne.n	800c302 <_vfiprintf_r+0x156>
 800c2ec:	7863      	ldrb	r3, [r4, #1]
 800c2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2f0:	d132      	bne.n	800c358 <_vfiprintf_r+0x1ac>
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	1d1a      	adds	r2, r3, #4
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	9203      	str	r2, [sp, #12]
 800c2fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2fe:	3402      	adds	r4, #2
 800c300:	9305      	str	r3, [sp, #20]
 800c302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3d8 <_vfiprintf_r+0x22c>
 800c306:	7821      	ldrb	r1, [r4, #0]
 800c308:	2203      	movs	r2, #3
 800c30a:	4650      	mov	r0, sl
 800c30c:	f7f3 ff88 	bl	8000220 <memchr>
 800c310:	b138      	cbz	r0, 800c322 <_vfiprintf_r+0x176>
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	eba0 000a 	sub.w	r0, r0, sl
 800c318:	2240      	movs	r2, #64	@ 0x40
 800c31a:	4082      	lsls	r2, r0
 800c31c:	4313      	orrs	r3, r2
 800c31e:	3401      	adds	r4, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c326:	4829      	ldr	r0, [pc, #164]	@ (800c3cc <_vfiprintf_r+0x220>)
 800c328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c32c:	2206      	movs	r2, #6
 800c32e:	f7f3 ff77 	bl	8000220 <memchr>
 800c332:	2800      	cmp	r0, #0
 800c334:	d03f      	beq.n	800c3b6 <_vfiprintf_r+0x20a>
 800c336:	4b26      	ldr	r3, [pc, #152]	@ (800c3d0 <_vfiprintf_r+0x224>)
 800c338:	bb1b      	cbnz	r3, 800c382 <_vfiprintf_r+0x1d6>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	3308      	adds	r3, #8
 800c344:	9303      	str	r3, [sp, #12]
 800c346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c348:	443b      	add	r3, r7
 800c34a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c34c:	e76a      	b.n	800c224 <_vfiprintf_r+0x78>
 800c34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c352:	460c      	mov	r4, r1
 800c354:	2001      	movs	r0, #1
 800c356:	e7a8      	b.n	800c2aa <_vfiprintf_r+0xfe>
 800c358:	2300      	movs	r3, #0
 800c35a:	3401      	adds	r4, #1
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	4619      	mov	r1, r3
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4620      	mov	r0, r4
 800c366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36a:	3a30      	subs	r2, #48	@ 0x30
 800c36c:	2a09      	cmp	r2, #9
 800c36e:	d903      	bls.n	800c378 <_vfiprintf_r+0x1cc>
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0c6      	beq.n	800c302 <_vfiprintf_r+0x156>
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	e7c4      	b.n	800c302 <_vfiprintf_r+0x156>
 800c378:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37c:	4604      	mov	r4, r0
 800c37e:	2301      	movs	r3, #1
 800c380:	e7f0      	b.n	800c364 <_vfiprintf_r+0x1b8>
 800c382:	ab03      	add	r3, sp, #12
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	462a      	mov	r2, r5
 800c388:	4b12      	ldr	r3, [pc, #72]	@ (800c3d4 <_vfiprintf_r+0x228>)
 800c38a:	a904      	add	r1, sp, #16
 800c38c:	4630      	mov	r0, r6
 800c38e:	f7fb fe85 	bl	800809c <_printf_float>
 800c392:	4607      	mov	r7, r0
 800c394:	1c78      	adds	r0, r7, #1
 800c396:	d1d6      	bne.n	800c346 <_vfiprintf_r+0x19a>
 800c398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c39a:	07d9      	lsls	r1, r3, #31
 800c39c:	d405      	bmi.n	800c3aa <_vfiprintf_r+0x1fe>
 800c39e:	89ab      	ldrh	r3, [r5, #12]
 800c3a0:	059a      	lsls	r2, r3, #22
 800c3a2:	d402      	bmi.n	800c3aa <_vfiprintf_r+0x1fe>
 800c3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3a6:	f7fc fe19 	bl	8008fdc <__retarget_lock_release_recursive>
 800c3aa:	89ab      	ldrh	r3, [r5, #12]
 800c3ac:	065b      	lsls	r3, r3, #25
 800c3ae:	f53f af1f 	bmi.w	800c1f0 <_vfiprintf_r+0x44>
 800c3b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3b4:	e71e      	b.n	800c1f4 <_vfiprintf_r+0x48>
 800c3b6:	ab03      	add	r3, sp, #12
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	4b05      	ldr	r3, [pc, #20]	@ (800c3d4 <_vfiprintf_r+0x228>)
 800c3be:	a904      	add	r1, sp, #16
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7fc f903 	bl	80085cc <_printf_i>
 800c3c6:	e7e4      	b.n	800c392 <_vfiprintf_r+0x1e6>
 800c3c8:	0800d9ad 	.word	0x0800d9ad
 800c3cc:	0800d9b7 	.word	0x0800d9b7
 800c3d0:	0800809d 	.word	0x0800809d
 800c3d4:	0800c189 	.word	0x0800c189
 800c3d8:	0800d9b3 	.word	0x0800d9b3

0800c3dc <__swbuf_r>:
 800c3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3de:	460e      	mov	r6, r1
 800c3e0:	4614      	mov	r4, r2
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	b118      	cbz	r0, 800c3ee <__swbuf_r+0x12>
 800c3e6:	6a03      	ldr	r3, [r0, #32]
 800c3e8:	b90b      	cbnz	r3, 800c3ee <__swbuf_r+0x12>
 800c3ea:	f7fc fca7 	bl	8008d3c <__sinit>
 800c3ee:	69a3      	ldr	r3, [r4, #24]
 800c3f0:	60a3      	str	r3, [r4, #8]
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	071a      	lsls	r2, r3, #28
 800c3f6:	d501      	bpl.n	800c3fc <__swbuf_r+0x20>
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	b943      	cbnz	r3, 800c40e <__swbuf_r+0x32>
 800c3fc:	4621      	mov	r1, r4
 800c3fe:	4628      	mov	r0, r5
 800c400:	f000 f82a 	bl	800c458 <__swsetup_r>
 800c404:	b118      	cbz	r0, 800c40e <__swbuf_r+0x32>
 800c406:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c40a:	4638      	mov	r0, r7
 800c40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	6922      	ldr	r2, [r4, #16]
 800c412:	1a98      	subs	r0, r3, r2
 800c414:	6963      	ldr	r3, [r4, #20]
 800c416:	b2f6      	uxtb	r6, r6
 800c418:	4283      	cmp	r3, r0
 800c41a:	4637      	mov	r7, r6
 800c41c:	dc05      	bgt.n	800c42a <__swbuf_r+0x4e>
 800c41e:	4621      	mov	r1, r4
 800c420:	4628      	mov	r0, r5
 800c422:	f7ff fa53 	bl	800b8cc <_fflush_r>
 800c426:	2800      	cmp	r0, #0
 800c428:	d1ed      	bne.n	800c406 <__swbuf_r+0x2a>
 800c42a:	68a3      	ldr	r3, [r4, #8]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	60a3      	str	r3, [r4, #8]
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	701e      	strb	r6, [r3, #0]
 800c438:	6962      	ldr	r2, [r4, #20]
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d004      	beq.n	800c44a <__swbuf_r+0x6e>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	07db      	lsls	r3, r3, #31
 800c444:	d5e1      	bpl.n	800c40a <__swbuf_r+0x2e>
 800c446:	2e0a      	cmp	r6, #10
 800c448:	d1df      	bne.n	800c40a <__swbuf_r+0x2e>
 800c44a:	4621      	mov	r1, r4
 800c44c:	4628      	mov	r0, r5
 800c44e:	f7ff fa3d 	bl	800b8cc <_fflush_r>
 800c452:	2800      	cmp	r0, #0
 800c454:	d0d9      	beq.n	800c40a <__swbuf_r+0x2e>
 800c456:	e7d6      	b.n	800c406 <__swbuf_r+0x2a>

0800c458 <__swsetup_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4b29      	ldr	r3, [pc, #164]	@ (800c500 <__swsetup_r+0xa8>)
 800c45c:	4605      	mov	r5, r0
 800c45e:	6818      	ldr	r0, [r3, #0]
 800c460:	460c      	mov	r4, r1
 800c462:	b118      	cbz	r0, 800c46c <__swsetup_r+0x14>
 800c464:	6a03      	ldr	r3, [r0, #32]
 800c466:	b90b      	cbnz	r3, 800c46c <__swsetup_r+0x14>
 800c468:	f7fc fc68 	bl	8008d3c <__sinit>
 800c46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c470:	0719      	lsls	r1, r3, #28
 800c472:	d422      	bmi.n	800c4ba <__swsetup_r+0x62>
 800c474:	06da      	lsls	r2, r3, #27
 800c476:	d407      	bmi.n	800c488 <__swsetup_r+0x30>
 800c478:	2209      	movs	r2, #9
 800c47a:	602a      	str	r2, [r5, #0]
 800c47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c480:	81a3      	strh	r3, [r4, #12]
 800c482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c486:	e033      	b.n	800c4f0 <__swsetup_r+0x98>
 800c488:	0758      	lsls	r0, r3, #29
 800c48a:	d512      	bpl.n	800c4b2 <__swsetup_r+0x5a>
 800c48c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c48e:	b141      	cbz	r1, 800c4a2 <__swsetup_r+0x4a>
 800c490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c494:	4299      	cmp	r1, r3
 800c496:	d002      	beq.n	800c49e <__swsetup_r+0x46>
 800c498:	4628      	mov	r0, r5
 800c49a:	f7fd fc0d 	bl	8009cb8 <_free_r>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4a8:	81a3      	strh	r3, [r4, #12]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	6063      	str	r3, [r4, #4]
 800c4ae:	6923      	ldr	r3, [r4, #16]
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	f043 0308 	orr.w	r3, r3, #8
 800c4b8:	81a3      	strh	r3, [r4, #12]
 800c4ba:	6923      	ldr	r3, [r4, #16]
 800c4bc:	b94b      	cbnz	r3, 800c4d2 <__swsetup_r+0x7a>
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4c8:	d003      	beq.n	800c4d2 <__swsetup_r+0x7a>
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f000 f883 	bl	800c5d8 <__smakebuf_r>
 800c4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d6:	f013 0201 	ands.w	r2, r3, #1
 800c4da:	d00a      	beq.n	800c4f2 <__swsetup_r+0x9a>
 800c4dc:	2200      	movs	r2, #0
 800c4de:	60a2      	str	r2, [r4, #8]
 800c4e0:	6962      	ldr	r2, [r4, #20]
 800c4e2:	4252      	negs	r2, r2
 800c4e4:	61a2      	str	r2, [r4, #24]
 800c4e6:	6922      	ldr	r2, [r4, #16]
 800c4e8:	b942      	cbnz	r2, 800c4fc <__swsetup_r+0xa4>
 800c4ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4ee:	d1c5      	bne.n	800c47c <__swsetup_r+0x24>
 800c4f0:	bd38      	pop	{r3, r4, r5, pc}
 800c4f2:	0799      	lsls	r1, r3, #30
 800c4f4:	bf58      	it	pl
 800c4f6:	6962      	ldrpl	r2, [r4, #20]
 800c4f8:	60a2      	str	r2, [r4, #8]
 800c4fa:	e7f4      	b.n	800c4e6 <__swsetup_r+0x8e>
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	e7f7      	b.n	800c4f0 <__swsetup_r+0x98>
 800c500:	20000038 	.word	0x20000038

0800c504 <_raise_r>:
 800c504:	291f      	cmp	r1, #31
 800c506:	b538      	push	{r3, r4, r5, lr}
 800c508:	4605      	mov	r5, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	d904      	bls.n	800c518 <_raise_r+0x14>
 800c50e:	2316      	movs	r3, #22
 800c510:	6003      	str	r3, [r0, #0]
 800c512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c51a:	b112      	cbz	r2, 800c522 <_raise_r+0x1e>
 800c51c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c520:	b94b      	cbnz	r3, 800c536 <_raise_r+0x32>
 800c522:	4628      	mov	r0, r5
 800c524:	f000 f830 	bl	800c588 <_getpid_r>
 800c528:	4622      	mov	r2, r4
 800c52a:	4601      	mov	r1, r0
 800c52c:	4628      	mov	r0, r5
 800c52e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c532:	f000 b817 	b.w	800c564 <_kill_r>
 800c536:	2b01      	cmp	r3, #1
 800c538:	d00a      	beq.n	800c550 <_raise_r+0x4c>
 800c53a:	1c59      	adds	r1, r3, #1
 800c53c:	d103      	bne.n	800c546 <_raise_r+0x42>
 800c53e:	2316      	movs	r3, #22
 800c540:	6003      	str	r3, [r0, #0]
 800c542:	2001      	movs	r0, #1
 800c544:	e7e7      	b.n	800c516 <_raise_r+0x12>
 800c546:	2100      	movs	r1, #0
 800c548:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c54c:	4620      	mov	r0, r4
 800c54e:	4798      	blx	r3
 800c550:	2000      	movs	r0, #0
 800c552:	e7e0      	b.n	800c516 <_raise_r+0x12>

0800c554 <raise>:
 800c554:	4b02      	ldr	r3, [pc, #8]	@ (800c560 <raise+0xc>)
 800c556:	4601      	mov	r1, r0
 800c558:	6818      	ldr	r0, [r3, #0]
 800c55a:	f7ff bfd3 	b.w	800c504 <_raise_r>
 800c55e:	bf00      	nop
 800c560:	20000038 	.word	0x20000038

0800c564 <_kill_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d07      	ldr	r5, [pc, #28]	@ (800c584 <_kill_r+0x20>)
 800c568:	2300      	movs	r3, #0
 800c56a:	4604      	mov	r4, r0
 800c56c:	4608      	mov	r0, r1
 800c56e:	4611      	mov	r1, r2
 800c570:	602b      	str	r3, [r5, #0]
 800c572:	f7f7 f8ba 	bl	80036ea <_kill>
 800c576:	1c43      	adds	r3, r0, #1
 800c578:	d102      	bne.n	800c580 <_kill_r+0x1c>
 800c57a:	682b      	ldr	r3, [r5, #0]
 800c57c:	b103      	cbz	r3, 800c580 <_kill_r+0x1c>
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	bd38      	pop	{r3, r4, r5, pc}
 800c582:	bf00      	nop
 800c584:	200007e0 	.word	0x200007e0

0800c588 <_getpid_r>:
 800c588:	f7f7 b8a7 	b.w	80036da <_getpid>

0800c58c <__swhatbuf_r>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	460c      	mov	r4, r1
 800c590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c594:	2900      	cmp	r1, #0
 800c596:	b096      	sub	sp, #88	@ 0x58
 800c598:	4615      	mov	r5, r2
 800c59a:	461e      	mov	r6, r3
 800c59c:	da0d      	bge.n	800c5ba <__swhatbuf_r+0x2e>
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c5a4:	f04f 0100 	mov.w	r1, #0
 800c5a8:	bf14      	ite	ne
 800c5aa:	2340      	movne	r3, #64	@ 0x40
 800c5ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	6031      	str	r1, [r6, #0]
 800c5b4:	602b      	str	r3, [r5, #0]
 800c5b6:	b016      	add	sp, #88	@ 0x58
 800c5b8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ba:	466a      	mov	r2, sp
 800c5bc:	f000 f848 	bl	800c650 <_fstat_r>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	dbec      	blt.n	800c59e <__swhatbuf_r+0x12>
 800c5c4:	9901      	ldr	r1, [sp, #4]
 800c5c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c5ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c5ce:	4259      	negs	r1, r3
 800c5d0:	4159      	adcs	r1, r3
 800c5d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5d6:	e7eb      	b.n	800c5b0 <__swhatbuf_r+0x24>

0800c5d8 <__smakebuf_r>:
 800c5d8:	898b      	ldrh	r3, [r1, #12]
 800c5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5dc:	079d      	lsls	r5, r3, #30
 800c5de:	4606      	mov	r6, r0
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	d507      	bpl.n	800c5f4 <__smakebuf_r+0x1c>
 800c5e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	6123      	str	r3, [r4, #16]
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	6163      	str	r3, [r4, #20]
 800c5f0:	b003      	add	sp, #12
 800c5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f4:	ab01      	add	r3, sp, #4
 800c5f6:	466a      	mov	r2, sp
 800c5f8:	f7ff ffc8 	bl	800c58c <__swhatbuf_r>
 800c5fc:	9f00      	ldr	r7, [sp, #0]
 800c5fe:	4605      	mov	r5, r0
 800c600:	4639      	mov	r1, r7
 800c602:	4630      	mov	r0, r6
 800c604:	f7fd fbcc 	bl	8009da0 <_malloc_r>
 800c608:	b948      	cbnz	r0, 800c61e <__smakebuf_r+0x46>
 800c60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c60e:	059a      	lsls	r2, r3, #22
 800c610:	d4ee      	bmi.n	800c5f0 <__smakebuf_r+0x18>
 800c612:	f023 0303 	bic.w	r3, r3, #3
 800c616:	f043 0302 	orr.w	r3, r3, #2
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	e7e2      	b.n	800c5e4 <__smakebuf_r+0xc>
 800c61e:	89a3      	ldrh	r3, [r4, #12]
 800c620:	6020      	str	r0, [r4, #0]
 800c622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	9b01      	ldr	r3, [sp, #4]
 800c62a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c62e:	b15b      	cbz	r3, 800c648 <__smakebuf_r+0x70>
 800c630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c634:	4630      	mov	r0, r6
 800c636:	f000 f81d 	bl	800c674 <_isatty_r>
 800c63a:	b128      	cbz	r0, 800c648 <__smakebuf_r+0x70>
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	f023 0303 	bic.w	r3, r3, #3
 800c642:	f043 0301 	orr.w	r3, r3, #1
 800c646:	81a3      	strh	r3, [r4, #12]
 800c648:	89a3      	ldrh	r3, [r4, #12]
 800c64a:	431d      	orrs	r5, r3
 800c64c:	81a5      	strh	r5, [r4, #12]
 800c64e:	e7cf      	b.n	800c5f0 <__smakebuf_r+0x18>

0800c650 <_fstat_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4d07      	ldr	r5, [pc, #28]	@ (800c670 <_fstat_r+0x20>)
 800c654:	2300      	movs	r3, #0
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	4611      	mov	r1, r2
 800c65c:	602b      	str	r3, [r5, #0]
 800c65e:	f7f7 f8a4 	bl	80037aa <_fstat>
 800c662:	1c43      	adds	r3, r0, #1
 800c664:	d102      	bne.n	800c66c <_fstat_r+0x1c>
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	b103      	cbz	r3, 800c66c <_fstat_r+0x1c>
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	bd38      	pop	{r3, r4, r5, pc}
 800c66e:	bf00      	nop
 800c670:	200007e0 	.word	0x200007e0

0800c674 <_isatty_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	4d06      	ldr	r5, [pc, #24]	@ (800c690 <_isatty_r+0x1c>)
 800c678:	2300      	movs	r3, #0
 800c67a:	4604      	mov	r4, r0
 800c67c:	4608      	mov	r0, r1
 800c67e:	602b      	str	r3, [r5, #0]
 800c680:	f7f7 f8a3 	bl	80037ca <_isatty>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d102      	bne.n	800c68e <_isatty_r+0x1a>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	b103      	cbz	r3, 800c68e <_isatty_r+0x1a>
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	bd38      	pop	{r3, r4, r5, pc}
 800c690:	200007e0 	.word	0x200007e0
 800c694:	00000000 	.word	0x00000000

0800c698 <cos>:
 800c698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c69a:	ec53 2b10 	vmov	r2, r3, d0
 800c69e:	4826      	ldr	r0, [pc, #152]	@ (800c738 <cos+0xa0>)
 800c6a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c6a4:	4281      	cmp	r1, r0
 800c6a6:	d806      	bhi.n	800c6b6 <cos+0x1e>
 800c6a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c730 <cos+0x98>
 800c6ac:	b005      	add	sp, #20
 800c6ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b2:	f000 b899 	b.w	800c7e8 <__kernel_cos>
 800c6b6:	4821      	ldr	r0, [pc, #132]	@ (800c73c <cos+0xa4>)
 800c6b8:	4281      	cmp	r1, r0
 800c6ba:	d908      	bls.n	800c6ce <cos+0x36>
 800c6bc:	4610      	mov	r0, r2
 800c6be:	4619      	mov	r1, r3
 800c6c0:	f7f3 fe0a 	bl	80002d8 <__aeabi_dsub>
 800c6c4:	ec41 0b10 	vmov	d0, r0, r1
 800c6c8:	b005      	add	sp, #20
 800c6ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6ce:	4668      	mov	r0, sp
 800c6d0:	f000 fa0e 	bl	800caf0 <__ieee754_rem_pio2>
 800c6d4:	f000 0003 	and.w	r0, r0, #3
 800c6d8:	2801      	cmp	r0, #1
 800c6da:	d00b      	beq.n	800c6f4 <cos+0x5c>
 800c6dc:	2802      	cmp	r0, #2
 800c6de:	d015      	beq.n	800c70c <cos+0x74>
 800c6e0:	b9d8      	cbnz	r0, 800c71a <cos+0x82>
 800c6e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c6e6:	ed9d 0b00 	vldr	d0, [sp]
 800c6ea:	f000 f87d 	bl	800c7e8 <__kernel_cos>
 800c6ee:	ec51 0b10 	vmov	r0, r1, d0
 800c6f2:	e7e7      	b.n	800c6c4 <cos+0x2c>
 800c6f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c6f8:	ed9d 0b00 	vldr	d0, [sp]
 800c6fc:	f000 f93c 	bl	800c978 <__kernel_sin>
 800c700:	ec53 2b10 	vmov	r2, r3, d0
 800c704:	4610      	mov	r0, r2
 800c706:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c70a:	e7db      	b.n	800c6c4 <cos+0x2c>
 800c70c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c710:	ed9d 0b00 	vldr	d0, [sp]
 800c714:	f000 f868 	bl	800c7e8 <__kernel_cos>
 800c718:	e7f2      	b.n	800c700 <cos+0x68>
 800c71a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c71e:	ed9d 0b00 	vldr	d0, [sp]
 800c722:	2001      	movs	r0, #1
 800c724:	f000 f928 	bl	800c978 <__kernel_sin>
 800c728:	e7e1      	b.n	800c6ee <cos+0x56>
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w
	...
 800c738:	3fe921fb 	.word	0x3fe921fb
 800c73c:	7fefffff 	.word	0x7fefffff

0800c740 <sin>:
 800c740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c742:	ec53 2b10 	vmov	r2, r3, d0
 800c746:	4826      	ldr	r0, [pc, #152]	@ (800c7e0 <sin+0xa0>)
 800c748:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c74c:	4281      	cmp	r1, r0
 800c74e:	d807      	bhi.n	800c760 <sin+0x20>
 800c750:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c7d8 <sin+0x98>
 800c754:	2000      	movs	r0, #0
 800c756:	b005      	add	sp, #20
 800c758:	f85d eb04 	ldr.w	lr, [sp], #4
 800c75c:	f000 b90c 	b.w	800c978 <__kernel_sin>
 800c760:	4820      	ldr	r0, [pc, #128]	@ (800c7e4 <sin+0xa4>)
 800c762:	4281      	cmp	r1, r0
 800c764:	d908      	bls.n	800c778 <sin+0x38>
 800c766:	4610      	mov	r0, r2
 800c768:	4619      	mov	r1, r3
 800c76a:	f7f3 fdb5 	bl	80002d8 <__aeabi_dsub>
 800c76e:	ec41 0b10 	vmov	d0, r0, r1
 800c772:	b005      	add	sp, #20
 800c774:	f85d fb04 	ldr.w	pc, [sp], #4
 800c778:	4668      	mov	r0, sp
 800c77a:	f000 f9b9 	bl	800caf0 <__ieee754_rem_pio2>
 800c77e:	f000 0003 	and.w	r0, r0, #3
 800c782:	2801      	cmp	r0, #1
 800c784:	d00c      	beq.n	800c7a0 <sin+0x60>
 800c786:	2802      	cmp	r0, #2
 800c788:	d011      	beq.n	800c7ae <sin+0x6e>
 800c78a:	b9e8      	cbnz	r0, 800c7c8 <sin+0x88>
 800c78c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c790:	ed9d 0b00 	vldr	d0, [sp]
 800c794:	2001      	movs	r0, #1
 800c796:	f000 f8ef 	bl	800c978 <__kernel_sin>
 800c79a:	ec51 0b10 	vmov	r0, r1, d0
 800c79e:	e7e6      	b.n	800c76e <sin+0x2e>
 800c7a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7a4:	ed9d 0b00 	vldr	d0, [sp]
 800c7a8:	f000 f81e 	bl	800c7e8 <__kernel_cos>
 800c7ac:	e7f5      	b.n	800c79a <sin+0x5a>
 800c7ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7b2:	ed9d 0b00 	vldr	d0, [sp]
 800c7b6:	2001      	movs	r0, #1
 800c7b8:	f000 f8de 	bl	800c978 <__kernel_sin>
 800c7bc:	ec53 2b10 	vmov	r2, r3, d0
 800c7c0:	4610      	mov	r0, r2
 800c7c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c7c6:	e7d2      	b.n	800c76e <sin+0x2e>
 800c7c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7cc:	ed9d 0b00 	vldr	d0, [sp]
 800c7d0:	f000 f80a 	bl	800c7e8 <__kernel_cos>
 800c7d4:	e7f2      	b.n	800c7bc <sin+0x7c>
 800c7d6:	bf00      	nop
	...
 800c7e0:	3fe921fb 	.word	0x3fe921fb
 800c7e4:	7fefffff 	.word	0x7fefffff

0800c7e8 <__kernel_cos>:
 800c7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	ec57 6b10 	vmov	r6, r7, d0
 800c7f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c7f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c7f8:	ed8d 1b00 	vstr	d1, [sp]
 800c7fc:	d206      	bcs.n	800c80c <__kernel_cos+0x24>
 800c7fe:	4630      	mov	r0, r6
 800c800:	4639      	mov	r1, r7
 800c802:	f7f4 f9d1 	bl	8000ba8 <__aeabi_d2iz>
 800c806:	2800      	cmp	r0, #0
 800c808:	f000 8088 	beq.w	800c91c <__kernel_cos+0x134>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	4630      	mov	r0, r6
 800c812:	4639      	mov	r1, r7
 800c814:	f7f3 ff18 	bl	8000648 <__aeabi_dmul>
 800c818:	4b51      	ldr	r3, [pc, #324]	@ (800c960 <__kernel_cos+0x178>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	4604      	mov	r4, r0
 800c81e:	460d      	mov	r5, r1
 800c820:	f7f3 ff12 	bl	8000648 <__aeabi_dmul>
 800c824:	a340      	add	r3, pc, #256	@ (adr r3, 800c928 <__kernel_cos+0x140>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	4682      	mov	sl, r0
 800c82c:	468b      	mov	fp, r1
 800c82e:	4620      	mov	r0, r4
 800c830:	4629      	mov	r1, r5
 800c832:	f7f3 ff09 	bl	8000648 <__aeabi_dmul>
 800c836:	a33e      	add	r3, pc, #248	@ (adr r3, 800c930 <__kernel_cos+0x148>)
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f7f3 fd4e 	bl	80002dc <__adddf3>
 800c840:	4622      	mov	r2, r4
 800c842:	462b      	mov	r3, r5
 800c844:	f7f3 ff00 	bl	8000648 <__aeabi_dmul>
 800c848:	a33b      	add	r3, pc, #236	@ (adr r3, 800c938 <__kernel_cos+0x150>)
 800c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84e:	f7f3 fd43 	bl	80002d8 <__aeabi_dsub>
 800c852:	4622      	mov	r2, r4
 800c854:	462b      	mov	r3, r5
 800c856:	f7f3 fef7 	bl	8000648 <__aeabi_dmul>
 800c85a:	a339      	add	r3, pc, #228	@ (adr r3, 800c940 <__kernel_cos+0x158>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	f7f3 fd3c 	bl	80002dc <__adddf3>
 800c864:	4622      	mov	r2, r4
 800c866:	462b      	mov	r3, r5
 800c868:	f7f3 feee 	bl	8000648 <__aeabi_dmul>
 800c86c:	a336      	add	r3, pc, #216	@ (adr r3, 800c948 <__kernel_cos+0x160>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	f7f3 fd31 	bl	80002d8 <__aeabi_dsub>
 800c876:	4622      	mov	r2, r4
 800c878:	462b      	mov	r3, r5
 800c87a:	f7f3 fee5 	bl	8000648 <__aeabi_dmul>
 800c87e:	a334      	add	r3, pc, #208	@ (adr r3, 800c950 <__kernel_cos+0x168>)
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	f7f3 fd2a 	bl	80002dc <__adddf3>
 800c888:	4622      	mov	r2, r4
 800c88a:	462b      	mov	r3, r5
 800c88c:	f7f3 fedc 	bl	8000648 <__aeabi_dmul>
 800c890:	4622      	mov	r2, r4
 800c892:	462b      	mov	r3, r5
 800c894:	f7f3 fed8 	bl	8000648 <__aeabi_dmul>
 800c898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c89c:	4604      	mov	r4, r0
 800c89e:	460d      	mov	r5, r1
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f3 fed0 	bl	8000648 <__aeabi_dmul>
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f7f3 fd12 	bl	80002d8 <__aeabi_dsub>
 800c8b4:	4b2b      	ldr	r3, [pc, #172]	@ (800c964 <__kernel_cos+0x17c>)
 800c8b6:	4598      	cmp	r8, r3
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	460f      	mov	r7, r1
 800c8bc:	d810      	bhi.n	800c8e0 <__kernel_cos+0xf8>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	4659      	mov	r1, fp
 800c8c6:	f7f3 fd07 	bl	80002d8 <__aeabi_dsub>
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4926      	ldr	r1, [pc, #152]	@ (800c968 <__kernel_cos+0x180>)
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	f7f3 fd01 	bl	80002d8 <__aeabi_dsub>
 800c8d6:	ec41 0b10 	vmov	d0, r0, r1
 800c8da:	b003      	add	sp, #12
 800c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e0:	4b22      	ldr	r3, [pc, #136]	@ (800c96c <__kernel_cos+0x184>)
 800c8e2:	4921      	ldr	r1, [pc, #132]	@ (800c968 <__kernel_cos+0x180>)
 800c8e4:	4598      	cmp	r8, r3
 800c8e6:	bf8c      	ite	hi
 800c8e8:	4d21      	ldrhi	r5, [pc, #132]	@ (800c970 <__kernel_cos+0x188>)
 800c8ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c8ee:	2400      	movs	r4, #0
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	462b      	mov	r3, r5
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	f7f3 fcef 	bl	80002d8 <__aeabi_dsub>
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	462b      	mov	r3, r5
 800c902:	4650      	mov	r0, sl
 800c904:	4659      	mov	r1, fp
 800c906:	f7f3 fce7 	bl	80002d8 <__aeabi_dsub>
 800c90a:	4632      	mov	r2, r6
 800c90c:	463b      	mov	r3, r7
 800c90e:	f7f3 fce3 	bl	80002d8 <__aeabi_dsub>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	4640      	mov	r0, r8
 800c918:	4649      	mov	r1, r9
 800c91a:	e7da      	b.n	800c8d2 <__kernel_cos+0xea>
 800c91c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c958 <__kernel_cos+0x170>
 800c920:	e7db      	b.n	800c8da <__kernel_cos+0xf2>
 800c922:	bf00      	nop
 800c924:	f3af 8000 	nop.w
 800c928:	be8838d4 	.word	0xbe8838d4
 800c92c:	bda8fae9 	.word	0xbda8fae9
 800c930:	bdb4b1c4 	.word	0xbdb4b1c4
 800c934:	3e21ee9e 	.word	0x3e21ee9e
 800c938:	809c52ad 	.word	0x809c52ad
 800c93c:	3e927e4f 	.word	0x3e927e4f
 800c940:	19cb1590 	.word	0x19cb1590
 800c944:	3efa01a0 	.word	0x3efa01a0
 800c948:	16c15177 	.word	0x16c15177
 800c94c:	3f56c16c 	.word	0x3f56c16c
 800c950:	5555554c 	.word	0x5555554c
 800c954:	3fa55555 	.word	0x3fa55555
 800c958:	00000000 	.word	0x00000000
 800c95c:	3ff00000 	.word	0x3ff00000
 800c960:	3fe00000 	.word	0x3fe00000
 800c964:	3fd33332 	.word	0x3fd33332
 800c968:	3ff00000 	.word	0x3ff00000
 800c96c:	3fe90000 	.word	0x3fe90000
 800c970:	3fd20000 	.word	0x3fd20000
 800c974:	00000000 	.word	0x00000000

0800c978 <__kernel_sin>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	ec55 4b10 	vmov	r4, r5, d0
 800c980:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c984:	b085      	sub	sp, #20
 800c986:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c98a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c98e:	4680      	mov	r8, r0
 800c990:	d205      	bcs.n	800c99e <__kernel_sin+0x26>
 800c992:	4620      	mov	r0, r4
 800c994:	4629      	mov	r1, r5
 800c996:	f7f4 f907 	bl	8000ba8 <__aeabi_d2iz>
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d052      	beq.n	800ca44 <__kernel_sin+0xcc>
 800c99e:	4622      	mov	r2, r4
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	f7f3 fe4f 	bl	8000648 <__aeabi_dmul>
 800c9aa:	4682      	mov	sl, r0
 800c9ac:	468b      	mov	fp, r1
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	f7f3 fe47 	bl	8000648 <__aeabi_dmul>
 800c9ba:	a342      	add	r3, pc, #264	@ (adr r3, 800cac4 <__kernel_sin+0x14c>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	e9cd 0100 	strd	r0, r1, [sp]
 800c9c4:	4650      	mov	r0, sl
 800c9c6:	4659      	mov	r1, fp
 800c9c8:	f7f3 fe3e 	bl	8000648 <__aeabi_dmul>
 800c9cc:	a33f      	add	r3, pc, #252	@ (adr r3, 800cacc <__kernel_sin+0x154>)
 800c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d2:	f7f3 fc81 	bl	80002d8 <__aeabi_dsub>
 800c9d6:	4652      	mov	r2, sl
 800c9d8:	465b      	mov	r3, fp
 800c9da:	f7f3 fe35 	bl	8000648 <__aeabi_dmul>
 800c9de:	a33d      	add	r3, pc, #244	@ (adr r3, 800cad4 <__kernel_sin+0x15c>)
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	f7f3 fc7a 	bl	80002dc <__adddf3>
 800c9e8:	4652      	mov	r2, sl
 800c9ea:	465b      	mov	r3, fp
 800c9ec:	f7f3 fe2c 	bl	8000648 <__aeabi_dmul>
 800c9f0:	a33a      	add	r3, pc, #232	@ (adr r3, 800cadc <__kernel_sin+0x164>)
 800c9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f6:	f7f3 fc6f 	bl	80002d8 <__aeabi_dsub>
 800c9fa:	4652      	mov	r2, sl
 800c9fc:	465b      	mov	r3, fp
 800c9fe:	f7f3 fe23 	bl	8000648 <__aeabi_dmul>
 800ca02:	a338      	add	r3, pc, #224	@ (adr r3, 800cae4 <__kernel_sin+0x16c>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f7f3 fc68 	bl	80002dc <__adddf3>
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	f1b8 0f00 	cmp.w	r8, #0
 800ca14:	d11b      	bne.n	800ca4e <__kernel_sin+0xd6>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4650      	mov	r0, sl
 800ca1c:	4659      	mov	r1, fp
 800ca1e:	f7f3 fe13 	bl	8000648 <__aeabi_dmul>
 800ca22:	a325      	add	r3, pc, #148	@ (adr r3, 800cab8 <__kernel_sin+0x140>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 fc56 	bl	80002d8 <__aeabi_dsub>
 800ca2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca30:	f7f3 fe0a 	bl	8000648 <__aeabi_dmul>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	f7f3 fc4e 	bl	80002dc <__adddf3>
 800ca40:	4604      	mov	r4, r0
 800ca42:	460d      	mov	r5, r1
 800ca44:	ec45 4b10 	vmov	d0, r4, r5
 800ca48:	b005      	add	sp, #20
 800ca4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca52:	4b1b      	ldr	r3, [pc, #108]	@ (800cac0 <__kernel_sin+0x148>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	f7f3 fdf7 	bl	8000648 <__aeabi_dmul>
 800ca5a:	4632      	mov	r2, r6
 800ca5c:	4680      	mov	r8, r0
 800ca5e:	4689      	mov	r9, r1
 800ca60:	463b      	mov	r3, r7
 800ca62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca66:	f7f3 fdef 	bl	8000648 <__aeabi_dmul>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	4640      	mov	r0, r8
 800ca70:	4649      	mov	r1, r9
 800ca72:	f7f3 fc31 	bl	80002d8 <__aeabi_dsub>
 800ca76:	4652      	mov	r2, sl
 800ca78:	465b      	mov	r3, fp
 800ca7a:	f7f3 fde5 	bl	8000648 <__aeabi_dmul>
 800ca7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca82:	f7f3 fc29 	bl	80002d8 <__aeabi_dsub>
 800ca86:	a30c      	add	r3, pc, #48	@ (adr r3, 800cab8 <__kernel_sin+0x140>)
 800ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	460f      	mov	r7, r1
 800ca90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca94:	f7f3 fdd8 	bl	8000648 <__aeabi_dmul>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	4639      	mov	r1, r7
 800caa0:	f7f3 fc1c 	bl	80002dc <__adddf3>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4620      	mov	r0, r4
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fc14 	bl	80002d8 <__aeabi_dsub>
 800cab0:	e7c6      	b.n	800ca40 <__kernel_sin+0xc8>
 800cab2:	bf00      	nop
 800cab4:	f3af 8000 	nop.w
 800cab8:	55555549 	.word	0x55555549
 800cabc:	3fc55555 	.word	0x3fc55555
 800cac0:	3fe00000 	.word	0x3fe00000
 800cac4:	5acfd57c 	.word	0x5acfd57c
 800cac8:	3de5d93a 	.word	0x3de5d93a
 800cacc:	8a2b9ceb 	.word	0x8a2b9ceb
 800cad0:	3e5ae5e6 	.word	0x3e5ae5e6
 800cad4:	57b1fe7d 	.word	0x57b1fe7d
 800cad8:	3ec71de3 	.word	0x3ec71de3
 800cadc:	19c161d5 	.word	0x19c161d5
 800cae0:	3f2a01a0 	.word	0x3f2a01a0
 800cae4:	1110f8a6 	.word	0x1110f8a6
 800cae8:	3f811111 	.word	0x3f811111
 800caec:	00000000 	.word	0x00000000

0800caf0 <__ieee754_rem_pio2>:
 800caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	ec57 6b10 	vmov	r6, r7, d0
 800caf8:	4bc5      	ldr	r3, [pc, #788]	@ (800ce10 <__ieee754_rem_pio2+0x320>)
 800cafa:	b08d      	sub	sp, #52	@ 0x34
 800cafc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cb00:	4598      	cmp	r8, r3
 800cb02:	4604      	mov	r4, r0
 800cb04:	9704      	str	r7, [sp, #16]
 800cb06:	d807      	bhi.n	800cb18 <__ieee754_rem_pio2+0x28>
 800cb08:	2200      	movs	r2, #0
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	ed80 0b00 	vstr	d0, [r0]
 800cb10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cb14:	2500      	movs	r5, #0
 800cb16:	e028      	b.n	800cb6a <__ieee754_rem_pio2+0x7a>
 800cb18:	4bbe      	ldr	r3, [pc, #760]	@ (800ce14 <__ieee754_rem_pio2+0x324>)
 800cb1a:	4598      	cmp	r8, r3
 800cb1c:	d878      	bhi.n	800cc10 <__ieee754_rem_pio2+0x120>
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	4dbd      	ldr	r5, [pc, #756]	@ (800ce18 <__ieee754_rem_pio2+0x328>)
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	4630      	mov	r0, r6
 800cb26:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cdd8 <__ieee754_rem_pio2+0x2e8>)
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	dd38      	ble.n	800cba2 <__ieee754_rem_pio2+0xb2>
 800cb30:	f7f3 fbd2 	bl	80002d8 <__aeabi_dsub>
 800cb34:	45a8      	cmp	r8, r5
 800cb36:	4606      	mov	r6, r0
 800cb38:	460f      	mov	r7, r1
 800cb3a:	d01a      	beq.n	800cb72 <__ieee754_rem_pio2+0x82>
 800cb3c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cde0 <__ieee754_rem_pio2+0x2f0>)
 800cb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb42:	f7f3 fbc9 	bl	80002d8 <__aeabi_dsub>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4680      	mov	r8, r0
 800cb4c:	4689      	mov	r9, r1
 800cb4e:	4630      	mov	r0, r6
 800cb50:	4639      	mov	r1, r7
 800cb52:	f7f3 fbc1 	bl	80002d8 <__aeabi_dsub>
 800cb56:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cde0 <__ieee754_rem_pio2+0x2f0>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	f7f3 fbbc 	bl	80002d8 <__aeabi_dsub>
 800cb60:	e9c4 8900 	strd	r8, r9, [r4]
 800cb64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb68:	2501      	movs	r5, #1
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	b00d      	add	sp, #52	@ 0x34
 800cb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb72:	a39d      	add	r3, pc, #628	@ (adr r3, 800cde8 <__ieee754_rem_pio2+0x2f8>)
 800cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb78:	f7f3 fbae 	bl	80002d8 <__aeabi_dsub>
 800cb7c:	a39c      	add	r3, pc, #624	@ (adr r3, 800cdf0 <__ieee754_rem_pio2+0x300>)
 800cb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb82:	4606      	mov	r6, r0
 800cb84:	460f      	mov	r7, r1
 800cb86:	f7f3 fba7 	bl	80002d8 <__aeabi_dsub>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4680      	mov	r8, r0
 800cb90:	4689      	mov	r9, r1
 800cb92:	4630      	mov	r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	f7f3 fb9f 	bl	80002d8 <__aeabi_dsub>
 800cb9a:	a395      	add	r3, pc, #596	@ (adr r3, 800cdf0 <__ieee754_rem_pio2+0x300>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	e7dc      	b.n	800cb5c <__ieee754_rem_pio2+0x6c>
 800cba2:	f7f3 fb9b 	bl	80002dc <__adddf3>
 800cba6:	45a8      	cmp	r8, r5
 800cba8:	4606      	mov	r6, r0
 800cbaa:	460f      	mov	r7, r1
 800cbac:	d018      	beq.n	800cbe0 <__ieee754_rem_pio2+0xf0>
 800cbae:	a38c      	add	r3, pc, #560	@ (adr r3, 800cde0 <__ieee754_rem_pio2+0x2f0>)
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	f7f3 fb92 	bl	80002dc <__adddf3>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4680      	mov	r8, r0
 800cbbe:	4689      	mov	r9, r1
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	4639      	mov	r1, r7
 800cbc4:	f7f3 fb88 	bl	80002d8 <__aeabi_dsub>
 800cbc8:	a385      	add	r3, pc, #532	@ (adr r3, 800cde0 <__ieee754_rem_pio2+0x2f0>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	f7f3 fb85 	bl	80002dc <__adddf3>
 800cbd2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cbd6:	e9c4 8900 	strd	r8, r9, [r4]
 800cbda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cbde:	e7c4      	b.n	800cb6a <__ieee754_rem_pio2+0x7a>
 800cbe0:	a381      	add	r3, pc, #516	@ (adr r3, 800cde8 <__ieee754_rem_pio2+0x2f8>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fb79 	bl	80002dc <__adddf3>
 800cbea:	a381      	add	r3, pc, #516	@ (adr r3, 800cdf0 <__ieee754_rem_pio2+0x300>)
 800cbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf0:	4606      	mov	r6, r0
 800cbf2:	460f      	mov	r7, r1
 800cbf4:	f7f3 fb72 	bl	80002dc <__adddf3>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4680      	mov	r8, r0
 800cbfe:	4689      	mov	r9, r1
 800cc00:	4630      	mov	r0, r6
 800cc02:	4639      	mov	r1, r7
 800cc04:	f7f3 fb68 	bl	80002d8 <__aeabi_dsub>
 800cc08:	a379      	add	r3, pc, #484	@ (adr r3, 800cdf0 <__ieee754_rem_pio2+0x300>)
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	e7de      	b.n	800cbce <__ieee754_rem_pio2+0xde>
 800cc10:	4b82      	ldr	r3, [pc, #520]	@ (800ce1c <__ieee754_rem_pio2+0x32c>)
 800cc12:	4598      	cmp	r8, r3
 800cc14:	f200 80d1 	bhi.w	800cdba <__ieee754_rem_pio2+0x2ca>
 800cc18:	f000 f966 	bl	800cee8 <fabs>
 800cc1c:	ec57 6b10 	vmov	r6, r7, d0
 800cc20:	a375      	add	r3, pc, #468	@ (adr r3, 800cdf8 <__ieee754_rem_pio2+0x308>)
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	4630      	mov	r0, r6
 800cc28:	4639      	mov	r1, r7
 800cc2a:	f7f3 fd0d 	bl	8000648 <__aeabi_dmul>
 800cc2e:	4b7c      	ldr	r3, [pc, #496]	@ (800ce20 <__ieee754_rem_pio2+0x330>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	f7f3 fb53 	bl	80002dc <__adddf3>
 800cc36:	f7f3 ffb7 	bl	8000ba8 <__aeabi_d2iz>
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	f7f3 fc9a 	bl	8000574 <__aeabi_i2d>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc48:	a363      	add	r3, pc, #396	@ (adr r3, 800cdd8 <__ieee754_rem_pio2+0x2e8>)
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	f7f3 fcfb 	bl	8000648 <__aeabi_dmul>
 800cc52:	4602      	mov	r2, r0
 800cc54:	460b      	mov	r3, r1
 800cc56:	4630      	mov	r0, r6
 800cc58:	4639      	mov	r1, r7
 800cc5a:	f7f3 fb3d 	bl	80002d8 <__aeabi_dsub>
 800cc5e:	a360      	add	r3, pc, #384	@ (adr r3, 800cde0 <__ieee754_rem_pio2+0x2f0>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	4682      	mov	sl, r0
 800cc66:	468b      	mov	fp, r1
 800cc68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc6c:	f7f3 fcec 	bl	8000648 <__aeabi_dmul>
 800cc70:	2d1f      	cmp	r5, #31
 800cc72:	4606      	mov	r6, r0
 800cc74:	460f      	mov	r7, r1
 800cc76:	dc0c      	bgt.n	800cc92 <__ieee754_rem_pio2+0x1a2>
 800cc78:	4b6a      	ldr	r3, [pc, #424]	@ (800ce24 <__ieee754_rem_pio2+0x334>)
 800cc7a:	1e6a      	subs	r2, r5, #1
 800cc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc80:	4543      	cmp	r3, r8
 800cc82:	d006      	beq.n	800cc92 <__ieee754_rem_pio2+0x1a2>
 800cc84:	4632      	mov	r2, r6
 800cc86:	463b      	mov	r3, r7
 800cc88:	4650      	mov	r0, sl
 800cc8a:	4659      	mov	r1, fp
 800cc8c:	f7f3 fb24 	bl	80002d8 <__aeabi_dsub>
 800cc90:	e00e      	b.n	800ccb0 <__ieee754_rem_pio2+0x1c0>
 800cc92:	463b      	mov	r3, r7
 800cc94:	4632      	mov	r2, r6
 800cc96:	4650      	mov	r0, sl
 800cc98:	4659      	mov	r1, fp
 800cc9a:	f7f3 fb1d 	bl	80002d8 <__aeabi_dsub>
 800cc9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cca2:	9305      	str	r3, [sp, #20]
 800cca4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cca8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ccac:	2b10      	cmp	r3, #16
 800ccae:	dc02      	bgt.n	800ccb6 <__ieee754_rem_pio2+0x1c6>
 800ccb0:	e9c4 0100 	strd	r0, r1, [r4]
 800ccb4:	e039      	b.n	800cd2a <__ieee754_rem_pio2+0x23a>
 800ccb6:	a34c      	add	r3, pc, #304	@ (adr r3, 800cde8 <__ieee754_rem_pio2+0x2f8>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccc0:	f7f3 fcc2 	bl	8000648 <__aeabi_dmul>
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	460f      	mov	r7, r1
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4650      	mov	r0, sl
 800ccce:	4659      	mov	r1, fp
 800ccd0:	f7f3 fb02 	bl	80002d8 <__aeabi_dsub>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4680      	mov	r8, r0
 800ccda:	4689      	mov	r9, r1
 800ccdc:	4650      	mov	r0, sl
 800ccde:	4659      	mov	r1, fp
 800cce0:	f7f3 fafa 	bl	80002d8 <__aeabi_dsub>
 800cce4:	4632      	mov	r2, r6
 800cce6:	463b      	mov	r3, r7
 800cce8:	f7f3 faf6 	bl	80002d8 <__aeabi_dsub>
 800ccec:	a340      	add	r3, pc, #256	@ (adr r3, 800cdf0 <__ieee754_rem_pio2+0x300>)
 800ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	460f      	mov	r7, r1
 800ccf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccfa:	f7f3 fca5 	bl	8000648 <__aeabi_dmul>
 800ccfe:	4632      	mov	r2, r6
 800cd00:	463b      	mov	r3, r7
 800cd02:	f7f3 fae9 	bl	80002d8 <__aeabi_dsub>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	460f      	mov	r7, r1
 800cd0e:	4640      	mov	r0, r8
 800cd10:	4649      	mov	r1, r9
 800cd12:	f7f3 fae1 	bl	80002d8 <__aeabi_dsub>
 800cd16:	9a05      	ldr	r2, [sp, #20]
 800cd18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	2b31      	cmp	r3, #49	@ 0x31
 800cd20:	dc20      	bgt.n	800cd64 <__ieee754_rem_pio2+0x274>
 800cd22:	e9c4 0100 	strd	r0, r1, [r4]
 800cd26:	46c2      	mov	sl, r8
 800cd28:	46cb      	mov	fp, r9
 800cd2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cd2e:	4650      	mov	r0, sl
 800cd30:	4642      	mov	r2, r8
 800cd32:	464b      	mov	r3, r9
 800cd34:	4659      	mov	r1, fp
 800cd36:	f7f3 facf 	bl	80002d8 <__aeabi_dsub>
 800cd3a:	463b      	mov	r3, r7
 800cd3c:	4632      	mov	r2, r6
 800cd3e:	f7f3 facb 	bl	80002d8 <__aeabi_dsub>
 800cd42:	9b04      	ldr	r3, [sp, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd4a:	f6bf af0e 	bge.w	800cb6a <__ieee754_rem_pio2+0x7a>
 800cd4e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800cd52:	6063      	str	r3, [r4, #4]
 800cd54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd58:	f8c4 8000 	str.w	r8, [r4]
 800cd5c:	60a0      	str	r0, [r4, #8]
 800cd5e:	60e3      	str	r3, [r4, #12]
 800cd60:	426d      	negs	r5, r5
 800cd62:	e702      	b.n	800cb6a <__ieee754_rem_pio2+0x7a>
 800cd64:	a326      	add	r3, pc, #152	@ (adr r3, 800ce00 <__ieee754_rem_pio2+0x310>)
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd6e:	f7f3 fc6b 	bl	8000648 <__aeabi_dmul>
 800cd72:	4606      	mov	r6, r0
 800cd74:	460f      	mov	r7, r1
 800cd76:	4602      	mov	r2, r0
 800cd78:	460b      	mov	r3, r1
 800cd7a:	4640      	mov	r0, r8
 800cd7c:	4649      	mov	r1, r9
 800cd7e:	f7f3 faab 	bl	80002d8 <__aeabi_dsub>
 800cd82:	4602      	mov	r2, r0
 800cd84:	460b      	mov	r3, r1
 800cd86:	4682      	mov	sl, r0
 800cd88:	468b      	mov	fp, r1
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	4649      	mov	r1, r9
 800cd8e:	f7f3 faa3 	bl	80002d8 <__aeabi_dsub>
 800cd92:	4632      	mov	r2, r6
 800cd94:	463b      	mov	r3, r7
 800cd96:	f7f3 fa9f 	bl	80002d8 <__aeabi_dsub>
 800cd9a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ce08 <__ieee754_rem_pio2+0x318>)
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	4606      	mov	r6, r0
 800cda2:	460f      	mov	r7, r1
 800cda4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda8:	f7f3 fc4e 	bl	8000648 <__aeabi_dmul>
 800cdac:	4632      	mov	r2, r6
 800cdae:	463b      	mov	r3, r7
 800cdb0:	f7f3 fa92 	bl	80002d8 <__aeabi_dsub>
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	460f      	mov	r7, r1
 800cdb8:	e764      	b.n	800cc84 <__ieee754_rem_pio2+0x194>
 800cdba:	4b1b      	ldr	r3, [pc, #108]	@ (800ce28 <__ieee754_rem_pio2+0x338>)
 800cdbc:	4598      	cmp	r8, r3
 800cdbe:	d935      	bls.n	800ce2c <__ieee754_rem_pio2+0x33c>
 800cdc0:	4632      	mov	r2, r6
 800cdc2:	463b      	mov	r3, r7
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	4639      	mov	r1, r7
 800cdc8:	f7f3 fa86 	bl	80002d8 <__aeabi_dsub>
 800cdcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cdd0:	e9c4 0100 	strd	r0, r1, [r4]
 800cdd4:	e69e      	b.n	800cb14 <__ieee754_rem_pio2+0x24>
 800cdd6:	bf00      	nop
 800cdd8:	54400000 	.word	0x54400000
 800cddc:	3ff921fb 	.word	0x3ff921fb
 800cde0:	1a626331 	.word	0x1a626331
 800cde4:	3dd0b461 	.word	0x3dd0b461
 800cde8:	1a600000 	.word	0x1a600000
 800cdec:	3dd0b461 	.word	0x3dd0b461
 800cdf0:	2e037073 	.word	0x2e037073
 800cdf4:	3ba3198a 	.word	0x3ba3198a
 800cdf8:	6dc9c883 	.word	0x6dc9c883
 800cdfc:	3fe45f30 	.word	0x3fe45f30
 800ce00:	2e000000 	.word	0x2e000000
 800ce04:	3ba3198a 	.word	0x3ba3198a
 800ce08:	252049c1 	.word	0x252049c1
 800ce0c:	397b839a 	.word	0x397b839a
 800ce10:	3fe921fb 	.word	0x3fe921fb
 800ce14:	4002d97b 	.word	0x4002d97b
 800ce18:	3ff921fb 	.word	0x3ff921fb
 800ce1c:	413921fb 	.word	0x413921fb
 800ce20:	3fe00000 	.word	0x3fe00000
 800ce24:	0800dcb4 	.word	0x0800dcb4
 800ce28:	7fefffff 	.word	0x7fefffff
 800ce2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ce30:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ce34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ce38:	4630      	mov	r0, r6
 800ce3a:	460f      	mov	r7, r1
 800ce3c:	f7f3 feb4 	bl	8000ba8 <__aeabi_d2iz>
 800ce40:	f7f3 fb98 	bl	8000574 <__aeabi_i2d>
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4630      	mov	r0, r6
 800ce4a:	4639      	mov	r1, r7
 800ce4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce50:	f7f3 fa42 	bl	80002d8 <__aeabi_dsub>
 800ce54:	4b22      	ldr	r3, [pc, #136]	@ (800cee0 <__ieee754_rem_pio2+0x3f0>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	f7f3 fbf6 	bl	8000648 <__aeabi_dmul>
 800ce5c:	460f      	mov	r7, r1
 800ce5e:	4606      	mov	r6, r0
 800ce60:	f7f3 fea2 	bl	8000ba8 <__aeabi_d2iz>
 800ce64:	f7f3 fb86 	bl	8000574 <__aeabi_i2d>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	4639      	mov	r1, r7
 800ce70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ce74:	f7f3 fa30 	bl	80002d8 <__aeabi_dsub>
 800ce78:	4b19      	ldr	r3, [pc, #100]	@ (800cee0 <__ieee754_rem_pio2+0x3f0>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f7f3 fbe4 	bl	8000648 <__aeabi_dmul>
 800ce80:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ce84:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ce88:	f04f 0803 	mov.w	r8, #3
 800ce8c:	2600      	movs	r6, #0
 800ce8e:	2700      	movs	r7, #0
 800ce90:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ce94:	4632      	mov	r2, r6
 800ce96:	463b      	mov	r3, r7
 800ce98:	46c2      	mov	sl, r8
 800ce9a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ce9e:	f7f3 fe3b 	bl	8000b18 <__aeabi_dcmpeq>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d1f4      	bne.n	800ce90 <__ieee754_rem_pio2+0x3a0>
 800cea6:	4b0f      	ldr	r3, [pc, #60]	@ (800cee4 <__ieee754_rem_pio2+0x3f4>)
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	2302      	movs	r3, #2
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	462a      	mov	r2, r5
 800ceb0:	4653      	mov	r3, sl
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	a806      	add	r0, sp, #24
 800ceb6:	f000 f81f 	bl	800cef8 <__kernel_rem_pio2>
 800ceba:	9b04      	ldr	r3, [sp, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	4605      	mov	r5, r0
 800cec0:	f6bf ae53 	bge.w	800cb6a <__ieee754_rem_pio2+0x7a>
 800cec4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800cec8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cecc:	e9c4 2300 	strd	r2, r3, [r4]
 800ced0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ced4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ced8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cedc:	e740      	b.n	800cd60 <__ieee754_rem_pio2+0x270>
 800cede:	bf00      	nop
 800cee0:	41700000 	.word	0x41700000
 800cee4:	0800dd34 	.word	0x0800dd34

0800cee8 <fabs>:
 800cee8:	ec51 0b10 	vmov	r0, r1, d0
 800ceec:	4602      	mov	r2, r0
 800ceee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cef2:	ec43 2b10 	vmov	d0, r2, r3
 800cef6:	4770      	bx	lr

0800cef8 <__kernel_rem_pio2>:
 800cef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	ed2d 8b02 	vpush	{d8}
 800cf00:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cf04:	f112 0f14 	cmn.w	r2, #20
 800cf08:	9306      	str	r3, [sp, #24]
 800cf0a:	9104      	str	r1, [sp, #16]
 800cf0c:	4bc2      	ldr	r3, [pc, #776]	@ (800d218 <__kernel_rem_pio2+0x320>)
 800cf0e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cf10:	9008      	str	r0, [sp, #32]
 800cf12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	9b06      	ldr	r3, [sp, #24]
 800cf1a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cf1e:	bfa8      	it	ge
 800cf20:	1ed4      	subge	r4, r2, #3
 800cf22:	9305      	str	r3, [sp, #20]
 800cf24:	bfb2      	itee	lt
 800cf26:	2400      	movlt	r4, #0
 800cf28:	2318      	movge	r3, #24
 800cf2a:	fb94 f4f3 	sdivge	r4, r4, r3
 800cf2e:	f06f 0317 	mvn.w	r3, #23
 800cf32:	fb04 3303 	mla	r3, r4, r3, r3
 800cf36:	eb03 0b02 	add.w	fp, r3, r2
 800cf3a:	9b00      	ldr	r3, [sp, #0]
 800cf3c:	9a05      	ldr	r2, [sp, #20]
 800cf3e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800d208 <__kernel_rem_pio2+0x310>
 800cf42:	eb03 0802 	add.w	r8, r3, r2
 800cf46:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cf48:	1aa7      	subs	r7, r4, r2
 800cf4a:	ae20      	add	r6, sp, #128	@ 0x80
 800cf4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cf50:	2500      	movs	r5, #0
 800cf52:	4545      	cmp	r5, r8
 800cf54:	dd12      	ble.n	800cf7c <__kernel_rem_pio2+0x84>
 800cf56:	9b06      	ldr	r3, [sp, #24]
 800cf58:	aa20      	add	r2, sp, #128	@ 0x80
 800cf5a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cf5e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800cf62:	2700      	movs	r7, #0
 800cf64:	9b00      	ldr	r3, [sp, #0]
 800cf66:	429f      	cmp	r7, r3
 800cf68:	dc2e      	bgt.n	800cfc8 <__kernel_rem_pio2+0xd0>
 800cf6a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800d208 <__kernel_rem_pio2+0x310>
 800cf6e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf72:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf76:	46a8      	mov	r8, r5
 800cf78:	2600      	movs	r6, #0
 800cf7a:	e01b      	b.n	800cfb4 <__kernel_rem_pio2+0xbc>
 800cf7c:	42ef      	cmn	r7, r5
 800cf7e:	d407      	bmi.n	800cf90 <__kernel_rem_pio2+0x98>
 800cf80:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cf84:	f7f3 faf6 	bl	8000574 <__aeabi_i2d>
 800cf88:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cf8c:	3501      	adds	r5, #1
 800cf8e:	e7e0      	b.n	800cf52 <__kernel_rem_pio2+0x5a>
 800cf90:	ec51 0b18 	vmov	r0, r1, d8
 800cf94:	e7f8      	b.n	800cf88 <__kernel_rem_pio2+0x90>
 800cf96:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800cf9a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cf9e:	f7f3 fb53 	bl	8000648 <__aeabi_dmul>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfaa:	f7f3 f997 	bl	80002dc <__adddf3>
 800cfae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfb2:	3601      	adds	r6, #1
 800cfb4:	9b05      	ldr	r3, [sp, #20]
 800cfb6:	429e      	cmp	r6, r3
 800cfb8:	dded      	ble.n	800cf96 <__kernel_rem_pio2+0x9e>
 800cfba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfbe:	3701      	adds	r7, #1
 800cfc0:	ecaa 7b02 	vstmia	sl!, {d7}
 800cfc4:	3508      	adds	r5, #8
 800cfc6:	e7cd      	b.n	800cf64 <__kernel_rem_pio2+0x6c>
 800cfc8:	9b00      	ldr	r3, [sp, #0]
 800cfca:	f8dd 8000 	ldr.w	r8, [sp]
 800cfce:	aa0c      	add	r2, sp, #48	@ 0x30
 800cfd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cfd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cfd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cfdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800cfe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cfe4:	ab98      	add	r3, sp, #608	@ 0x260
 800cfe6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cfea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800cfee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cff2:	ac0c      	add	r4, sp, #48	@ 0x30
 800cff4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cff6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800cffa:	46a1      	mov	r9, r4
 800cffc:	46c2      	mov	sl, r8
 800cffe:	f1ba 0f00 	cmp.w	sl, #0
 800d002:	dc77      	bgt.n	800d0f4 <__kernel_rem_pio2+0x1fc>
 800d004:	4658      	mov	r0, fp
 800d006:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d00a:	f000 fac5 	bl	800d598 <scalbn>
 800d00e:	ec57 6b10 	vmov	r6, r7, d0
 800d012:	2200      	movs	r2, #0
 800d014:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d018:	4630      	mov	r0, r6
 800d01a:	4639      	mov	r1, r7
 800d01c:	f7f3 fb14 	bl	8000648 <__aeabi_dmul>
 800d020:	ec41 0b10 	vmov	d0, r0, r1
 800d024:	f000 fb34 	bl	800d690 <floor>
 800d028:	4b7c      	ldr	r3, [pc, #496]	@ (800d21c <__kernel_rem_pio2+0x324>)
 800d02a:	ec51 0b10 	vmov	r0, r1, d0
 800d02e:	2200      	movs	r2, #0
 800d030:	f7f3 fb0a 	bl	8000648 <__aeabi_dmul>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	4630      	mov	r0, r6
 800d03a:	4639      	mov	r1, r7
 800d03c:	f7f3 f94c 	bl	80002d8 <__aeabi_dsub>
 800d040:	460f      	mov	r7, r1
 800d042:	4606      	mov	r6, r0
 800d044:	f7f3 fdb0 	bl	8000ba8 <__aeabi_d2iz>
 800d048:	9002      	str	r0, [sp, #8]
 800d04a:	f7f3 fa93 	bl	8000574 <__aeabi_i2d>
 800d04e:	4602      	mov	r2, r0
 800d050:	460b      	mov	r3, r1
 800d052:	4630      	mov	r0, r6
 800d054:	4639      	mov	r1, r7
 800d056:	f7f3 f93f 	bl	80002d8 <__aeabi_dsub>
 800d05a:	f1bb 0f00 	cmp.w	fp, #0
 800d05e:	4606      	mov	r6, r0
 800d060:	460f      	mov	r7, r1
 800d062:	dd6c      	ble.n	800d13e <__kernel_rem_pio2+0x246>
 800d064:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800d068:	ab0c      	add	r3, sp, #48	@ 0x30
 800d06a:	9d02      	ldr	r5, [sp, #8]
 800d06c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d070:	f1cb 0018 	rsb	r0, fp, #24
 800d074:	fa43 f200 	asr.w	r2, r3, r0
 800d078:	4415      	add	r5, r2
 800d07a:	4082      	lsls	r2, r0
 800d07c:	1a9b      	subs	r3, r3, r2
 800d07e:	aa0c      	add	r2, sp, #48	@ 0x30
 800d080:	9502      	str	r5, [sp, #8]
 800d082:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d086:	f1cb 0217 	rsb	r2, fp, #23
 800d08a:	fa43 f902 	asr.w	r9, r3, r2
 800d08e:	f1b9 0f00 	cmp.w	r9, #0
 800d092:	dd64      	ble.n	800d15e <__kernel_rem_pio2+0x266>
 800d094:	9b02      	ldr	r3, [sp, #8]
 800d096:	2200      	movs	r2, #0
 800d098:	3301      	adds	r3, #1
 800d09a:	9302      	str	r3, [sp, #8]
 800d09c:	4615      	mov	r5, r2
 800d09e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d0a2:	4590      	cmp	r8, r2
 800d0a4:	f300 80a1 	bgt.w	800d1ea <__kernel_rem_pio2+0x2f2>
 800d0a8:	f1bb 0f00 	cmp.w	fp, #0
 800d0ac:	dd07      	ble.n	800d0be <__kernel_rem_pio2+0x1c6>
 800d0ae:	f1bb 0f01 	cmp.w	fp, #1
 800d0b2:	f000 80c1 	beq.w	800d238 <__kernel_rem_pio2+0x340>
 800d0b6:	f1bb 0f02 	cmp.w	fp, #2
 800d0ba:	f000 80c8 	beq.w	800d24e <__kernel_rem_pio2+0x356>
 800d0be:	f1b9 0f02 	cmp.w	r9, #2
 800d0c2:	d14c      	bne.n	800d15e <__kernel_rem_pio2+0x266>
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	463b      	mov	r3, r7
 800d0c8:	4955      	ldr	r1, [pc, #340]	@ (800d220 <__kernel_rem_pio2+0x328>)
 800d0ca:	2000      	movs	r0, #0
 800d0cc:	f7f3 f904 	bl	80002d8 <__aeabi_dsub>
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	460f      	mov	r7, r1
 800d0d4:	2d00      	cmp	r5, #0
 800d0d6:	d042      	beq.n	800d15e <__kernel_rem_pio2+0x266>
 800d0d8:	4658      	mov	r0, fp
 800d0da:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800d210 <__kernel_rem_pio2+0x318>
 800d0de:	f000 fa5b 	bl	800d598 <scalbn>
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	ec53 2b10 	vmov	r2, r3, d0
 800d0ea:	f7f3 f8f5 	bl	80002d8 <__aeabi_dsub>
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	460f      	mov	r7, r1
 800d0f2:	e034      	b.n	800d15e <__kernel_rem_pio2+0x266>
 800d0f4:	4b4b      	ldr	r3, [pc, #300]	@ (800d224 <__kernel_rem_pio2+0x32c>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0fc:	f7f3 faa4 	bl	8000648 <__aeabi_dmul>
 800d100:	f7f3 fd52 	bl	8000ba8 <__aeabi_d2iz>
 800d104:	f7f3 fa36 	bl	8000574 <__aeabi_i2d>
 800d108:	4b47      	ldr	r3, [pc, #284]	@ (800d228 <__kernel_rem_pio2+0x330>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	4606      	mov	r6, r0
 800d10e:	460f      	mov	r7, r1
 800d110:	f7f3 fa9a 	bl	8000648 <__aeabi_dmul>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d11c:	f7f3 f8dc 	bl	80002d8 <__aeabi_dsub>
 800d120:	f7f3 fd42 	bl	8000ba8 <__aeabi_d2iz>
 800d124:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d128:	f849 0b04 	str.w	r0, [r9], #4
 800d12c:	4639      	mov	r1, r7
 800d12e:	4630      	mov	r0, r6
 800d130:	f7f3 f8d4 	bl	80002dc <__adddf3>
 800d134:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d13c:	e75f      	b.n	800cffe <__kernel_rem_pio2+0x106>
 800d13e:	d107      	bne.n	800d150 <__kernel_rem_pio2+0x258>
 800d140:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800d144:	aa0c      	add	r2, sp, #48	@ 0x30
 800d146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d14a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800d14e:	e79e      	b.n	800d08e <__kernel_rem_pio2+0x196>
 800d150:	4b36      	ldr	r3, [pc, #216]	@ (800d22c <__kernel_rem_pio2+0x334>)
 800d152:	2200      	movs	r2, #0
 800d154:	f7f3 fcfe 	bl	8000b54 <__aeabi_dcmpge>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d143      	bne.n	800d1e4 <__kernel_rem_pio2+0x2ec>
 800d15c:	4681      	mov	r9, r0
 800d15e:	2200      	movs	r2, #0
 800d160:	2300      	movs	r3, #0
 800d162:	4630      	mov	r0, r6
 800d164:	4639      	mov	r1, r7
 800d166:	f7f3 fcd7 	bl	8000b18 <__aeabi_dcmpeq>
 800d16a:	2800      	cmp	r0, #0
 800d16c:	f000 80c1 	beq.w	800d2f2 <__kernel_rem_pio2+0x3fa>
 800d170:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800d174:	2200      	movs	r2, #0
 800d176:	9900      	ldr	r1, [sp, #0]
 800d178:	428b      	cmp	r3, r1
 800d17a:	da70      	bge.n	800d25e <__kernel_rem_pio2+0x366>
 800d17c:	2a00      	cmp	r2, #0
 800d17e:	f000 808b 	beq.w	800d298 <__kernel_rem_pio2+0x3a0>
 800d182:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d186:	ab0c      	add	r3, sp, #48	@ 0x30
 800d188:	f1ab 0b18 	sub.w	fp, fp, #24
 800d18c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0f6      	beq.n	800d182 <__kernel_rem_pio2+0x28a>
 800d194:	4658      	mov	r0, fp
 800d196:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800d210 <__kernel_rem_pio2+0x318>
 800d19a:	f000 f9fd 	bl	800d598 <scalbn>
 800d19e:	f108 0301 	add.w	r3, r8, #1
 800d1a2:	00da      	lsls	r2, r3, #3
 800d1a4:	9205      	str	r2, [sp, #20]
 800d1a6:	ec55 4b10 	vmov	r4, r5, d0
 800d1aa:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d1ac:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800d224 <__kernel_rem_pio2+0x32c>
 800d1b0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d1b4:	4646      	mov	r6, r8
 800d1b6:	f04f 0a00 	mov.w	sl, #0
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	f280 80d1 	bge.w	800d362 <__kernel_rem_pio2+0x46a>
 800d1c0:	4644      	mov	r4, r8
 800d1c2:	2c00      	cmp	r4, #0
 800d1c4:	f2c0 80ff 	blt.w	800d3c6 <__kernel_rem_pio2+0x4ce>
 800d1c8:	4b19      	ldr	r3, [pc, #100]	@ (800d230 <__kernel_rem_pio2+0x338>)
 800d1ca:	461f      	mov	r7, r3
 800d1cc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d1ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d1d2:	9306      	str	r3, [sp, #24]
 800d1d4:	f04f 0a00 	mov.w	sl, #0
 800d1d8:	f04f 0b00 	mov.w	fp, #0
 800d1dc:	2600      	movs	r6, #0
 800d1de:	eba8 0504 	sub.w	r5, r8, r4
 800d1e2:	e0e4      	b.n	800d3ae <__kernel_rem_pio2+0x4b6>
 800d1e4:	f04f 0902 	mov.w	r9, #2
 800d1e8:	e754      	b.n	800d094 <__kernel_rem_pio2+0x19c>
 800d1ea:	f854 3b04 	ldr.w	r3, [r4], #4
 800d1ee:	bb0d      	cbnz	r5, 800d234 <__kernel_rem_pio2+0x33c>
 800d1f0:	b123      	cbz	r3, 800d1fc <__kernel_rem_pio2+0x304>
 800d1f2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d1f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	3201      	adds	r2, #1
 800d1fe:	461d      	mov	r5, r3
 800d200:	e74f      	b.n	800d0a2 <__kernel_rem_pio2+0x1aa>
 800d202:	bf00      	nop
 800d204:	f3af 8000 	nop.w
	...
 800d214:	3ff00000 	.word	0x3ff00000
 800d218:	0800de80 	.word	0x0800de80
 800d21c:	40200000 	.word	0x40200000
 800d220:	3ff00000 	.word	0x3ff00000
 800d224:	3e700000 	.word	0x3e700000
 800d228:	41700000 	.word	0x41700000
 800d22c:	3fe00000 	.word	0x3fe00000
 800d230:	0800de40 	.word	0x0800de40
 800d234:	1acb      	subs	r3, r1, r3
 800d236:	e7de      	b.n	800d1f6 <__kernel_rem_pio2+0x2fe>
 800d238:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800d23c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d242:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d246:	a90c      	add	r1, sp, #48	@ 0x30
 800d248:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d24c:	e737      	b.n	800d0be <__kernel_rem_pio2+0x1c6>
 800d24e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800d252:	ab0c      	add	r3, sp, #48	@ 0x30
 800d254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d258:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d25c:	e7f3      	b.n	800d246 <__kernel_rem_pio2+0x34e>
 800d25e:	a90c      	add	r1, sp, #48	@ 0x30
 800d260:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d264:	3b01      	subs	r3, #1
 800d266:	430a      	orrs	r2, r1
 800d268:	e785      	b.n	800d176 <__kernel_rem_pio2+0x27e>
 800d26a:	3401      	adds	r4, #1
 800d26c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d270:	2a00      	cmp	r2, #0
 800d272:	d0fa      	beq.n	800d26a <__kernel_rem_pio2+0x372>
 800d274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d276:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d27a:	eb0d 0503 	add.w	r5, sp, r3
 800d27e:	9b06      	ldr	r3, [sp, #24]
 800d280:	aa20      	add	r2, sp, #128	@ 0x80
 800d282:	4443      	add	r3, r8
 800d284:	f108 0701 	add.w	r7, r8, #1
 800d288:	3d98      	subs	r5, #152	@ 0x98
 800d28a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d28e:	4444      	add	r4, r8
 800d290:	42bc      	cmp	r4, r7
 800d292:	da04      	bge.n	800d29e <__kernel_rem_pio2+0x3a6>
 800d294:	46a0      	mov	r8, r4
 800d296:	e6a2      	b.n	800cfde <__kernel_rem_pio2+0xe6>
 800d298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d29a:	2401      	movs	r4, #1
 800d29c:	e7e6      	b.n	800d26c <__kernel_rem_pio2+0x374>
 800d29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d2a4:	f7f3 f966 	bl	8000574 <__aeabi_i2d>
 800d2a8:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800d568 <__kernel_rem_pio2+0x670>
 800d2ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d2b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2b8:	46b2      	mov	sl, r6
 800d2ba:	f04f 0800 	mov.w	r8, #0
 800d2be:	9b05      	ldr	r3, [sp, #20]
 800d2c0:	4598      	cmp	r8, r3
 800d2c2:	dd05      	ble.n	800d2d0 <__kernel_rem_pio2+0x3d8>
 800d2c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2c8:	3701      	adds	r7, #1
 800d2ca:	eca5 7b02 	vstmia	r5!, {d7}
 800d2ce:	e7df      	b.n	800d290 <__kernel_rem_pio2+0x398>
 800d2d0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d2d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d2d8:	f7f3 f9b6 	bl	8000648 <__aeabi_dmul>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2e4:	f7f2 fffa 	bl	80002dc <__adddf3>
 800d2e8:	f108 0801 	add.w	r8, r8, #1
 800d2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2f0:	e7e5      	b.n	800d2be <__kernel_rem_pio2+0x3c6>
 800d2f2:	f1cb 0000 	rsb	r0, fp, #0
 800d2f6:	ec47 6b10 	vmov	d0, r6, r7
 800d2fa:	f000 f94d 	bl	800d598 <scalbn>
 800d2fe:	ec55 4b10 	vmov	r4, r5, d0
 800d302:	4b9b      	ldr	r3, [pc, #620]	@ (800d570 <__kernel_rem_pio2+0x678>)
 800d304:	2200      	movs	r2, #0
 800d306:	4620      	mov	r0, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	f7f3 fc23 	bl	8000b54 <__aeabi_dcmpge>
 800d30e:	b300      	cbz	r0, 800d352 <__kernel_rem_pio2+0x45a>
 800d310:	4b98      	ldr	r3, [pc, #608]	@ (800d574 <__kernel_rem_pio2+0x67c>)
 800d312:	2200      	movs	r2, #0
 800d314:	4620      	mov	r0, r4
 800d316:	4629      	mov	r1, r5
 800d318:	f7f3 f996 	bl	8000648 <__aeabi_dmul>
 800d31c:	f7f3 fc44 	bl	8000ba8 <__aeabi_d2iz>
 800d320:	4606      	mov	r6, r0
 800d322:	f7f3 f927 	bl	8000574 <__aeabi_i2d>
 800d326:	4b92      	ldr	r3, [pc, #584]	@ (800d570 <__kernel_rem_pio2+0x678>)
 800d328:	2200      	movs	r2, #0
 800d32a:	f7f3 f98d 	bl	8000648 <__aeabi_dmul>
 800d32e:	460b      	mov	r3, r1
 800d330:	4602      	mov	r2, r0
 800d332:	4629      	mov	r1, r5
 800d334:	4620      	mov	r0, r4
 800d336:	f7f2 ffcf 	bl	80002d8 <__aeabi_dsub>
 800d33a:	f7f3 fc35 	bl	8000ba8 <__aeabi_d2iz>
 800d33e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d340:	f10b 0b18 	add.w	fp, fp, #24
 800d344:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d348:	f108 0801 	add.w	r8, r8, #1
 800d34c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d350:	e720      	b.n	800d194 <__kernel_rem_pio2+0x29c>
 800d352:	4620      	mov	r0, r4
 800d354:	4629      	mov	r1, r5
 800d356:	f7f3 fc27 	bl	8000ba8 <__aeabi_d2iz>
 800d35a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d35c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d360:	e718      	b.n	800d194 <__kernel_rem_pio2+0x29c>
 800d362:	ab0c      	add	r3, sp, #48	@ 0x30
 800d364:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d368:	f7f3 f904 	bl	8000574 <__aeabi_i2d>
 800d36c:	4622      	mov	r2, r4
 800d36e:	462b      	mov	r3, r5
 800d370:	f7f3 f96a 	bl	8000648 <__aeabi_dmul>
 800d374:	4652      	mov	r2, sl
 800d376:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d37a:	465b      	mov	r3, fp
 800d37c:	4620      	mov	r0, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	f7f3 f962 	bl	8000648 <__aeabi_dmul>
 800d384:	3e01      	subs	r6, #1
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	e716      	b.n	800d1ba <__kernel_rem_pio2+0x2c2>
 800d38c:	9906      	ldr	r1, [sp, #24]
 800d38e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d392:	9106      	str	r1, [sp, #24]
 800d394:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d398:	f7f3 f956 	bl	8000648 <__aeabi_dmul>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	4659      	mov	r1, fp
 800d3a4:	f7f2 ff9a 	bl	80002dc <__adddf3>
 800d3a8:	3601      	adds	r6, #1
 800d3aa:	4682      	mov	sl, r0
 800d3ac:	468b      	mov	fp, r1
 800d3ae:	9b00      	ldr	r3, [sp, #0]
 800d3b0:	429e      	cmp	r6, r3
 800d3b2:	dc01      	bgt.n	800d3b8 <__kernel_rem_pio2+0x4c0>
 800d3b4:	42ae      	cmp	r6, r5
 800d3b6:	dde9      	ble.n	800d38c <__kernel_rem_pio2+0x494>
 800d3b8:	ab48      	add	r3, sp, #288	@ 0x120
 800d3ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d3be:	e9c5 ab00 	strd	sl, fp, [r5]
 800d3c2:	3c01      	subs	r4, #1
 800d3c4:	e6fd      	b.n	800d1c2 <__kernel_rem_pio2+0x2ca>
 800d3c6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	dc0b      	bgt.n	800d3e4 <__kernel_rem_pio2+0x4ec>
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dc35      	bgt.n	800d43c <__kernel_rem_pio2+0x544>
 800d3d0:	d059      	beq.n	800d486 <__kernel_rem_pio2+0x58e>
 800d3d2:	9b02      	ldr	r3, [sp, #8]
 800d3d4:	f003 0007 	and.w	r0, r3, #7
 800d3d8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d3dc:	ecbd 8b02 	vpop	{d8}
 800d3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d1f3      	bne.n	800d3d2 <__kernel_rem_pio2+0x4da>
 800d3ea:	9b05      	ldr	r3, [sp, #20]
 800d3ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d3f0:	eb0d 0403 	add.w	r4, sp, r3
 800d3f4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d3f8:	4625      	mov	r5, r4
 800d3fa:	46c2      	mov	sl, r8
 800d3fc:	f1ba 0f00 	cmp.w	sl, #0
 800d400:	dc69      	bgt.n	800d4d6 <__kernel_rem_pio2+0x5de>
 800d402:	4645      	mov	r5, r8
 800d404:	2d01      	cmp	r5, #1
 800d406:	f300 8087 	bgt.w	800d518 <__kernel_rem_pio2+0x620>
 800d40a:	9c05      	ldr	r4, [sp, #20]
 800d40c:	ab48      	add	r3, sp, #288	@ 0x120
 800d40e:	441c      	add	r4, r3
 800d410:	2000      	movs	r0, #0
 800d412:	2100      	movs	r1, #0
 800d414:	f1b8 0f01 	cmp.w	r8, #1
 800d418:	f300 809c 	bgt.w	800d554 <__kernel_rem_pio2+0x65c>
 800d41c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800d420:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800d424:	f1b9 0f00 	cmp.w	r9, #0
 800d428:	f040 80a6 	bne.w	800d578 <__kernel_rem_pio2+0x680>
 800d42c:	9b04      	ldr	r3, [sp, #16]
 800d42e:	e9c3 5600 	strd	r5, r6, [r3]
 800d432:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d436:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d43a:	e7ca      	b.n	800d3d2 <__kernel_rem_pio2+0x4da>
 800d43c:	9d05      	ldr	r5, [sp, #20]
 800d43e:	ab48      	add	r3, sp, #288	@ 0x120
 800d440:	441d      	add	r5, r3
 800d442:	4644      	mov	r4, r8
 800d444:	2000      	movs	r0, #0
 800d446:	2100      	movs	r1, #0
 800d448:	2c00      	cmp	r4, #0
 800d44a:	da35      	bge.n	800d4b8 <__kernel_rem_pio2+0x5c0>
 800d44c:	f1b9 0f00 	cmp.w	r9, #0
 800d450:	d038      	beq.n	800d4c4 <__kernel_rem_pio2+0x5cc>
 800d452:	4602      	mov	r2, r0
 800d454:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d458:	9c04      	ldr	r4, [sp, #16]
 800d45a:	e9c4 2300 	strd	r2, r3, [r4]
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d466:	f7f2 ff37 	bl	80002d8 <__aeabi_dsub>
 800d46a:	ad4a      	add	r5, sp, #296	@ 0x128
 800d46c:	2401      	movs	r4, #1
 800d46e:	45a0      	cmp	r8, r4
 800d470:	da2b      	bge.n	800d4ca <__kernel_rem_pio2+0x5d2>
 800d472:	f1b9 0f00 	cmp.w	r9, #0
 800d476:	d002      	beq.n	800d47e <__kernel_rem_pio2+0x586>
 800d478:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d47c:	4619      	mov	r1, r3
 800d47e:	9b04      	ldr	r3, [sp, #16]
 800d480:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d484:	e7a5      	b.n	800d3d2 <__kernel_rem_pio2+0x4da>
 800d486:	9c05      	ldr	r4, [sp, #20]
 800d488:	ab48      	add	r3, sp, #288	@ 0x120
 800d48a:	441c      	add	r4, r3
 800d48c:	2000      	movs	r0, #0
 800d48e:	2100      	movs	r1, #0
 800d490:	f1b8 0f00 	cmp.w	r8, #0
 800d494:	da09      	bge.n	800d4aa <__kernel_rem_pio2+0x5b2>
 800d496:	f1b9 0f00 	cmp.w	r9, #0
 800d49a:	d002      	beq.n	800d4a2 <__kernel_rem_pio2+0x5aa>
 800d49c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	9b04      	ldr	r3, [sp, #16]
 800d4a4:	e9c3 0100 	strd	r0, r1, [r3]
 800d4a8:	e793      	b.n	800d3d2 <__kernel_rem_pio2+0x4da>
 800d4aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d4ae:	f7f2 ff15 	bl	80002dc <__adddf3>
 800d4b2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d4b6:	e7eb      	b.n	800d490 <__kernel_rem_pio2+0x598>
 800d4b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d4bc:	f7f2 ff0e 	bl	80002dc <__adddf3>
 800d4c0:	3c01      	subs	r4, #1
 800d4c2:	e7c1      	b.n	800d448 <__kernel_rem_pio2+0x550>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	e7c6      	b.n	800d458 <__kernel_rem_pio2+0x560>
 800d4ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d4ce:	f7f2 ff05 	bl	80002dc <__adddf3>
 800d4d2:	3401      	adds	r4, #1
 800d4d4:	e7cb      	b.n	800d46e <__kernel_rem_pio2+0x576>
 800d4d6:	ed35 7b02 	vldmdb	r5!, {d7}
 800d4da:	ed8d 7b00 	vstr	d7, [sp]
 800d4de:	ed95 7b02 	vldr	d7, [r5, #8]
 800d4e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4e6:	ec53 2b17 	vmov	r2, r3, d7
 800d4ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4ee:	f7f2 fef5 	bl	80002dc <__adddf3>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4fe:	f7f2 feeb 	bl	80002d8 <__aeabi_dsub>
 800d502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d506:	f7f2 fee9 	bl	80002dc <__adddf3>
 800d50a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d50e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d512:	e9c5 6700 	strd	r6, r7, [r5]
 800d516:	e771      	b.n	800d3fc <__kernel_rem_pio2+0x504>
 800d518:	ed34 7b02 	vldmdb	r4!, {d7}
 800d51c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d520:	ec51 0b17 	vmov	r0, r1, d7
 800d524:	4652      	mov	r2, sl
 800d526:	465b      	mov	r3, fp
 800d528:	ed8d 7b00 	vstr	d7, [sp]
 800d52c:	f7f2 fed6 	bl	80002dc <__adddf3>
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	4606      	mov	r6, r0
 800d536:	460f      	mov	r7, r1
 800d538:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d53c:	f7f2 fecc 	bl	80002d8 <__aeabi_dsub>
 800d540:	4652      	mov	r2, sl
 800d542:	465b      	mov	r3, fp
 800d544:	f7f2 feca 	bl	80002dc <__adddf3>
 800d548:	3d01      	subs	r5, #1
 800d54a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d54e:	e9c4 6700 	strd	r6, r7, [r4]
 800d552:	e757      	b.n	800d404 <__kernel_rem_pio2+0x50c>
 800d554:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d558:	f7f2 fec0 	bl	80002dc <__adddf3>
 800d55c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d560:	e758      	b.n	800d414 <__kernel_rem_pio2+0x51c>
 800d562:	bf00      	nop
 800d564:	f3af 8000 	nop.w
	...
 800d570:	41700000 	.word	0x41700000
 800d574:	3e700000 	.word	0x3e700000
 800d578:	9b04      	ldr	r3, [sp, #16]
 800d57a:	9a04      	ldr	r2, [sp, #16]
 800d57c:	601d      	str	r5, [r3, #0]
 800d57e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800d582:	605c      	str	r4, [r3, #4]
 800d584:	609f      	str	r7, [r3, #8]
 800d586:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800d58a:	60d3      	str	r3, [r2, #12]
 800d58c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d590:	6110      	str	r0, [r2, #16]
 800d592:	6153      	str	r3, [r2, #20]
 800d594:	e71d      	b.n	800d3d2 <__kernel_rem_pio2+0x4da>
 800d596:	bf00      	nop

0800d598 <scalbn>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	ec55 4b10 	vmov	r4, r5, d0
 800d59e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	462b      	mov	r3, r5
 800d5a6:	b991      	cbnz	r1, 800d5ce <scalbn+0x36>
 800d5a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d5ac:	4323      	orrs	r3, r4
 800d5ae:	d03b      	beq.n	800d628 <scalbn+0x90>
 800d5b0:	4b33      	ldr	r3, [pc, #204]	@ (800d680 <scalbn+0xe8>)
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f7f3 f846 	bl	8000648 <__aeabi_dmul>
 800d5bc:	4b31      	ldr	r3, [pc, #196]	@ (800d684 <scalbn+0xec>)
 800d5be:	429e      	cmp	r6, r3
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	460d      	mov	r5, r1
 800d5c4:	da0f      	bge.n	800d5e6 <scalbn+0x4e>
 800d5c6:	a326      	add	r3, pc, #152	@ (adr r3, 800d660 <scalbn+0xc8>)
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	e01e      	b.n	800d60c <scalbn+0x74>
 800d5ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d5d2:	4291      	cmp	r1, r2
 800d5d4:	d10b      	bne.n	800d5ee <scalbn+0x56>
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	4620      	mov	r0, r4
 800d5da:	4629      	mov	r1, r5
 800d5dc:	f7f2 fe7e 	bl	80002dc <__adddf3>
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	460d      	mov	r5, r1
 800d5e4:	e020      	b.n	800d628 <scalbn+0x90>
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d5ec:	3936      	subs	r1, #54	@ 0x36
 800d5ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d5f2:	4296      	cmp	r6, r2
 800d5f4:	dd0d      	ble.n	800d612 <scalbn+0x7a>
 800d5f6:	2d00      	cmp	r5, #0
 800d5f8:	a11b      	add	r1, pc, #108	@ (adr r1, 800d668 <scalbn+0xd0>)
 800d5fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5fe:	da02      	bge.n	800d606 <scalbn+0x6e>
 800d600:	a11b      	add	r1, pc, #108	@ (adr r1, 800d670 <scalbn+0xd8>)
 800d602:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d606:	a318      	add	r3, pc, #96	@ (adr r3, 800d668 <scalbn+0xd0>)
 800d608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60c:	f7f3 f81c 	bl	8000648 <__aeabi_dmul>
 800d610:	e7e6      	b.n	800d5e0 <scalbn+0x48>
 800d612:	1872      	adds	r2, r6, r1
 800d614:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d618:	428a      	cmp	r2, r1
 800d61a:	dcec      	bgt.n	800d5f6 <scalbn+0x5e>
 800d61c:	2a00      	cmp	r2, #0
 800d61e:	dd06      	ble.n	800d62e <scalbn+0x96>
 800d620:	f36f 531e 	bfc	r3, #20, #11
 800d624:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d628:	ec45 4b10 	vmov	d0, r4, r5
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
 800d62e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d632:	da08      	bge.n	800d646 <scalbn+0xae>
 800d634:	2d00      	cmp	r5, #0
 800d636:	a10a      	add	r1, pc, #40	@ (adr r1, 800d660 <scalbn+0xc8>)
 800d638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d63c:	dac3      	bge.n	800d5c6 <scalbn+0x2e>
 800d63e:	a10e      	add	r1, pc, #56	@ (adr r1, 800d678 <scalbn+0xe0>)
 800d640:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d644:	e7bf      	b.n	800d5c6 <scalbn+0x2e>
 800d646:	3236      	adds	r2, #54	@ 0x36
 800d648:	f36f 531e 	bfc	r3, #20, #11
 800d64c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d650:	4620      	mov	r0, r4
 800d652:	4b0d      	ldr	r3, [pc, #52]	@ (800d688 <scalbn+0xf0>)
 800d654:	4629      	mov	r1, r5
 800d656:	2200      	movs	r2, #0
 800d658:	e7d8      	b.n	800d60c <scalbn+0x74>
 800d65a:	bf00      	nop
 800d65c:	f3af 8000 	nop.w
 800d660:	c2f8f359 	.word	0xc2f8f359
 800d664:	01a56e1f 	.word	0x01a56e1f
 800d668:	8800759c 	.word	0x8800759c
 800d66c:	7e37e43c 	.word	0x7e37e43c
 800d670:	8800759c 	.word	0x8800759c
 800d674:	fe37e43c 	.word	0xfe37e43c
 800d678:	c2f8f359 	.word	0xc2f8f359
 800d67c:	81a56e1f 	.word	0x81a56e1f
 800d680:	43500000 	.word	0x43500000
 800d684:	ffff3cb0 	.word	0xffff3cb0
 800d688:	3c900000 	.word	0x3c900000
 800d68c:	00000000 	.word	0x00000000

0800d690 <floor>:
 800d690:	ec51 0b10 	vmov	r0, r1, d0
 800d694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d6a0:	2e13      	cmp	r6, #19
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	4605      	mov	r5, r0
 800d6a6:	4680      	mov	r8, r0
 800d6a8:	dc34      	bgt.n	800d714 <floor+0x84>
 800d6aa:	2e00      	cmp	r6, #0
 800d6ac:	da17      	bge.n	800d6de <floor+0x4e>
 800d6ae:	a332      	add	r3, pc, #200	@ (adr r3, 800d778 <floor+0xe8>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f2 fe12 	bl	80002dc <__adddf3>
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f7f3 fa54 	bl	8000b68 <__aeabi_dcmpgt>
 800d6c0:	b150      	cbz	r0, 800d6d8 <floor+0x48>
 800d6c2:	2c00      	cmp	r4, #0
 800d6c4:	da55      	bge.n	800d772 <floor+0xe2>
 800d6c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d6ca:	432c      	orrs	r4, r5
 800d6cc:	2500      	movs	r5, #0
 800d6ce:	42ac      	cmp	r4, r5
 800d6d0:	4c2b      	ldr	r4, [pc, #172]	@ (800d780 <floor+0xf0>)
 800d6d2:	bf08      	it	eq
 800d6d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d6d8:	4621      	mov	r1, r4
 800d6da:	4628      	mov	r0, r5
 800d6dc:	e023      	b.n	800d726 <floor+0x96>
 800d6de:	4f29      	ldr	r7, [pc, #164]	@ (800d784 <floor+0xf4>)
 800d6e0:	4137      	asrs	r7, r6
 800d6e2:	ea01 0307 	and.w	r3, r1, r7
 800d6e6:	4303      	orrs	r3, r0
 800d6e8:	d01d      	beq.n	800d726 <floor+0x96>
 800d6ea:	a323      	add	r3, pc, #140	@ (adr r3, 800d778 <floor+0xe8>)
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	f7f2 fdf4 	bl	80002dc <__adddf3>
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	f7f3 fa36 	bl	8000b68 <__aeabi_dcmpgt>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d0eb      	beq.n	800d6d8 <floor+0x48>
 800d700:	2c00      	cmp	r4, #0
 800d702:	bfbe      	ittt	lt
 800d704:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d708:	4133      	asrlt	r3, r6
 800d70a:	18e4      	addlt	r4, r4, r3
 800d70c:	ea24 0407 	bic.w	r4, r4, r7
 800d710:	2500      	movs	r5, #0
 800d712:	e7e1      	b.n	800d6d8 <floor+0x48>
 800d714:	2e33      	cmp	r6, #51	@ 0x33
 800d716:	dd0a      	ble.n	800d72e <floor+0x9e>
 800d718:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d71c:	d103      	bne.n	800d726 <floor+0x96>
 800d71e:	4602      	mov	r2, r0
 800d720:	460b      	mov	r3, r1
 800d722:	f7f2 fddb 	bl	80002dc <__adddf3>
 800d726:	ec41 0b10 	vmov	d0, r0, r1
 800d72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d72e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d732:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d736:	40df      	lsrs	r7, r3
 800d738:	4207      	tst	r7, r0
 800d73a:	d0f4      	beq.n	800d726 <floor+0x96>
 800d73c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d778 <floor+0xe8>)
 800d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d742:	f7f2 fdcb 	bl	80002dc <__adddf3>
 800d746:	2200      	movs	r2, #0
 800d748:	2300      	movs	r3, #0
 800d74a:	f7f3 fa0d 	bl	8000b68 <__aeabi_dcmpgt>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d0c2      	beq.n	800d6d8 <floor+0x48>
 800d752:	2c00      	cmp	r4, #0
 800d754:	da0a      	bge.n	800d76c <floor+0xdc>
 800d756:	2e14      	cmp	r6, #20
 800d758:	d101      	bne.n	800d75e <floor+0xce>
 800d75a:	3401      	adds	r4, #1
 800d75c:	e006      	b.n	800d76c <floor+0xdc>
 800d75e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d762:	2301      	movs	r3, #1
 800d764:	40b3      	lsls	r3, r6
 800d766:	441d      	add	r5, r3
 800d768:	4545      	cmp	r5, r8
 800d76a:	d3f6      	bcc.n	800d75a <floor+0xca>
 800d76c:	ea25 0507 	bic.w	r5, r5, r7
 800d770:	e7b2      	b.n	800d6d8 <floor+0x48>
 800d772:	2500      	movs	r5, #0
 800d774:	462c      	mov	r4, r5
 800d776:	e7af      	b.n	800d6d8 <floor+0x48>
 800d778:	8800759c 	.word	0x8800759c
 800d77c:	7e37e43c 	.word	0x7e37e43c
 800d780:	bff00000 	.word	0xbff00000
 800d784:	000fffff 	.word	0x000fffff

0800d788 <_init>:
 800d788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78a:	bf00      	nop
 800d78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d78e:	bc08      	pop	{r3}
 800d790:	469e      	mov	lr, r3
 800d792:	4770      	bx	lr

0800d794 <_fini>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	bf00      	nop
 800d798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79a:	bc08      	pop	{r3}
 800d79c:	469e      	mov	lr, r3
 800d79e:	4770      	bx	lr
