
VSSS_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e110  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800e2f0  0800e2f0  0000f2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec00  0800ec00  00010204  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec00  0800ec00  0000fc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec08  0800ec08  00010204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec08  0800ec08  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec0c  0800ec0c  0000fc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800ec10  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000208  0800ee14  00010208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800ee14  000108c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cc1  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038aa  00000000  00000000  00028ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0002c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010de  00000000  00000000  0002dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000212e2  00000000  00000000  0002ee2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f23  00000000  00000000  00050110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb804  00000000  00000000  0006a033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f8  00000000  00000000  0013587c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013ca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e2d8 	.word	0x0800e2d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800e2d8 	.word	0x0800e2d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <NormalizeAngle>:


const float R[1][1] = {{0.01}};


float NormalizeAngle(float angle) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle > M_PI)  angle -= 2.0 * M_PI;
 8001042:	e00f      	b.n	8001064 <NormalizeAngle+0x2c>
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff faa7 	bl	8000598 <__aeabi_f2d>
 800104a:	a31f      	add	r3, pc, #124	@ (adr r3, 80010c8 <NormalizeAngle+0x90>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff f942 	bl	80002d8 <__aeabi_dsub>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fdec 	bl	8000c38 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fa97 	bl	8000598 <__aeabi_f2d>
 800106a:	a319      	add	r3, pc, #100	@ (adr r3, 80010d0 <NormalizeAngle+0x98>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fd7a 	bl	8000b68 <__aeabi_dcmpgt>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1e4      	bne.n	8001044 <NormalizeAngle+0xc>
    while (angle < -M_PI) angle += 2.0 * M_PI;
 800107a:	e00f      	b.n	800109c <NormalizeAngle+0x64>
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fa8b 	bl	8000598 <__aeabi_f2d>
 8001082:	a311      	add	r3, pc, #68	@ (adr r3, 80010c8 <NormalizeAngle+0x90>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff f928 	bl	80002dc <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fdd0 	bl	8000c38 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fa7b 	bl	8000598 <__aeabi_f2d>
 80010a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80010d8 <NormalizeAngle+0xa0>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff fd40 	bl	8000b2c <__aeabi_dcmplt>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1e4      	bne.n	800107c <NormalizeAngle+0x44>
    return angle;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	ee07 3a90 	vmov	s15, r3
}
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	54442d18 	.word	0x54442d18
 80010cc:	401921fb 	.word	0x401921fb
 80010d0:	54442d18 	.word	0x54442d18
 80010d4:	400921fb 	.word	0x400921fb
 80010d8:	54442d18 	.word	0x54442d18
 80010dc:	c00921fb 	.word	0xc00921fb

080010e0 <EKF_Init>:


void EKF_Init(EKF_State *ekf) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    ekf->x = 0.0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
    ekf->y = 0.0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
    ekf->theta = 0.0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
    ekf->v = 0.0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	60da      	str	r2, [r3, #12]

    memset(ekf->P, 0, sizeof(ekf->P));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3310      	adds	r3, #16
 800110c:	2240      	movs	r2, #64	@ 0x40
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f008 fc84 	bl	8009a1e <memset>
    ekf->P[0][0] = 0.1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <EKF_Init+0x58>)
 800111a:	611a      	str	r2, [r3, #16]
    ekf->P[1][1] = 0.1;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <EKF_Init+0x58>)
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
    ekf->P[2][2] = 0.1;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <EKF_Init+0x58>)
 8001126:	639a      	str	r2, [r3, #56]	@ 0x38
    ekf->P[3][3] = 0.1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <EKF_Init+0x58>)
 800112c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	3dcccccd 	.word	0x3dcccccd
 800113c:	00000000 	.word	0x00000000

08001140 <EKF_Predict>:


void EKF_Predict(EKF_State *ekf, float vL, float vR, float dt) {
 8001140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001144:	b088      	sub	sp, #32
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	ed87 0a02 	vstr	s0, [r7, #8]
 800114e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001152:	ed87 1a00 	vstr	s2, [r7]
    float v = (vR + vL) / 2.0;
 8001156:	ed97 7a01 	vldr	s14, [r7, #4]
 800115a:	edd7 7a02 	vldr	s15, [r7, #8]
 800115e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001162:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116a:	edc7 7a05 	vstr	s15, [r7, #20]
    float omega = (vR - vL) / WHEEL_BASE;
 800116e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001172:	edd7 7a02 	vldr	s15, [r7, #8]
 8001176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117a:	ee17 0a90 	vmov	r0, s15
 800117e:	f7ff fa0b 	bl	8000598 <__aeabi_f2d>
 8001182:	a36c      	add	r3, pc, #432	@ (adr r3, 8001334 <EKF_Predict+0x1f4>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb88 	bl	800089c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd50 	bl	8000c38 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	613b      	str	r3, [r7, #16]


    ekf->x += v * cos(ekf->theta) * dt;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9f9 	bl	8000598 <__aeabi_f2d>
 80011a6:	4604      	mov	r4, r0
 80011a8:	460d      	mov	r5, r1
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff f9f4 	bl	8000598 <__aeabi_f2d>
 80011b0:	4680      	mov	r8, r0
 80011b2:	4689      	mov	r9, r1
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9ed 	bl	8000598 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	ec43 2b10 	vmov	d0, r2, r3
 80011c6:	f00c f803 	bl	800d1d0 <cos>
 80011ca:	ec53 2b10 	vmov	r2, r3, d0
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7ff fa39 	bl	8000648 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4690      	mov	r8, r2
 80011dc:	4699      	mov	r9, r3
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f7ff f9da 	bl	8000598 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4640      	mov	r0, r8
 80011ea:	4649      	mov	r1, r9
 80011ec:	f7ff fa2c 	bl	8000648 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4620      	mov	r0, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	f7ff f870 	bl	80002dc <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fd18 	bl	8000c38 <__aeabi_d2f>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	601a      	str	r2, [r3, #0]
    ekf->y += v * sin(ekf->theta) * dt;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f9c0 	bl	8000598 <__aeabi_f2d>
 8001218:	4604      	mov	r4, r0
 800121a:	460d      	mov	r5, r1
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f7ff f9bb 	bl	8000598 <__aeabi_f2d>
 8001222:	4680      	mov	r8, r0
 8001224:	4689      	mov	r9, r1
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f9b4 	bl	8000598 <__aeabi_f2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	ec43 2b10 	vmov	d0, r2, r3
 8001238:	f00c f81e 	bl	800d278 <sin>
 800123c:	ec53 2b10 	vmov	r2, r3, d0
 8001240:	4640      	mov	r0, r8
 8001242:	4649      	mov	r1, r9
 8001244:	f7ff fa00 	bl	8000648 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4690      	mov	r8, r2
 800124e:	4699      	mov	r9, r3
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f7ff f9a1 	bl	8000598 <__aeabi_f2d>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4640      	mov	r0, r8
 800125c:	4649      	mov	r1, r9
 800125e:	f7ff f9f3 	bl	8000648 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4620      	mov	r0, r4
 8001268:	4629      	mov	r1, r5
 800126a:	f7ff f837 	bl	80002dc <__adddf3>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcdf 	bl	8000c38 <__aeabi_d2f>
 800127a:	4602      	mov	r2, r0
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	605a      	str	r2, [r3, #4]
    ekf->theta += omega * dt;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	ed93 7a02 	vldr	s14, [r3, #8]
 8001286:	edd7 6a04 	vldr	s13, [r7, #16]
 800128a:	edd7 7a00 	vldr	s15, [r7]
 800128e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	edc3 7a02 	vstr	s15, [r3, #8]
    ekf->v = v;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	60da      	str	r2, [r3, #12]


    ekf->theta = NormalizeAngle(ekf->theta);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	f7ff fec4 	bl	8001038 <NormalizeAngle>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	edc3 7a02 	vstr	s15, [r3, #8]


    for (int i = 0; i < 4; i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e02e      	b.n	800131e <EKF_Predict+0x1de>
        for (int j = 0; j < 4; j++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	e025      	b.n	8001312 <EKF_Predict+0x1d2>
            ekf->P[i][j] += Q[i][j] * dt;
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	0099      	lsls	r1, r3, #2
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	440b      	add	r3, r1
 80012d0:	3304      	adds	r3, #4
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	4915      	ldr	r1, [pc, #84]	@ (8001330 <EKF_Predict+0x1f0>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	009a      	lsls	r2, r3, #2
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	edd3 6a00 	vldr	s13, [r3]
 80012ec:	edd7 7a00 	vldr	s15, [r7]
 80012f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	0099      	lsls	r1, r3, #2
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	3301      	adds	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b03      	cmp	r3, #3
 8001316:	ddd6      	ble.n	80012c6 <EKF_Predict+0x186>
    for (int i = 0; i < 4; i++) {
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	3301      	adds	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2b03      	cmp	r3, #3
 8001322:	ddcd      	ble.n	80012c0 <EKF_Predict+0x180>
        }
    }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001330:	0800e35c 	.word	0x0800e35c
 8001334:	eb851eb8 	.word	0xeb851eb8
 8001338:	3faeb851 	.word	0x3faeb851

0800133c <EKF_Update>:


void EKF_Update(EKF_State *ekf, float theta_imu, float ax, float ay) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	ed87 0a02 	vstr	s0, [r7, #8]
 8001348:	edc7 0a01 	vstr	s1, [r7, #4]
 800134c:	ed87 1a00 	vstr	s2, [r7]
    float K_theta;

    K_theta = 0.5;
 8001350:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001354:	617b      	str	r3, [r7, #20]
    float theta_error = theta_imu - ekf->theta;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edd3 7a02 	vldr	s15, [r3, #8]
 800135c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001364:	edc7 7a04 	vstr	s15, [r7, #16]
    ekf->theta += K_theta * theta_error;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	ed93 7a02 	vldr	s14, [r3, #8]
 800136e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001372:	edd7 7a04 	vldr	s15, [r7, #16]
 8001376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	edc3 7a02 	vstr	s15, [r3, #8]


    ekf->theta = NormalizeAngle(ekf->theta);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edd3 7a02 	vldr	s15, [r3, #8]
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	f7ff fe53 	bl	8001038 <NormalizeAngle>
 8001392:	eef0 7a40 	vmov.f32	s15, s0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	edc3 7a02 	vstr	s15, [r3, #8]
    ekf->P[2][2] += R[0][0];
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80013a2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80013b8 <EKF_Update+0x7c>
 80013a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	3c23d70a 	.word	0x3c23d70a

080013bc <IMU_Init>:


float GYRO_SCALE = 65.5;
float ACCEL_SCALE = 8192.0;

void IMU_Init(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
    uint8_t check;
    uint8_t data;

    check = IMU_ReadReg(IMU_WHO_AM_I);
 80013c2:	2075      	movs	r0, #117	@ 0x75
 80013c4:	f000 f8a0 	bl	8001508 <IMU_ReadReg>
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
    if (check == 0x70) {
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b70      	cmp	r3, #112	@ 0x70
 80013d0:	d162      	bne.n	8001498 <IMU_Init+0xdc>
        IMU_WriteReg(IMU_PWR_MGMT_1, 0x00);
 80013d2:	2100      	movs	r1, #0
 80013d4:	206b      	movs	r0, #107	@ 0x6b
 80013d6:	f000 f86f 	bl	80014b8 <IMU_WriteReg>
        IMU_WriteReg(IMU_GYRO_CONFIG, (1 << 3));
 80013da:	2108      	movs	r1, #8
 80013dc:	201b      	movs	r0, #27
 80013de:	f000 f86b 	bl	80014b8 <IMU_WriteReg>
        IMU_WriteReg(IMU_ACCEL_CONFIG, (1 << 3));
 80013e2:	2108      	movs	r1, #8
 80013e4:	201c      	movs	r0, #28
 80013e6:	f000 f867 	bl	80014b8 <IMU_WriteReg>

        uint8_t gyro_config = IMU_ReadReg(IMU_GYRO_CONFIG);
 80013ea:	201b      	movs	r0, #27
 80013ec:	f000 f88c 	bl	8001508 <IMU_ReadReg>
 80013f0:	4603      	mov	r3, r0
 80013f2:	71bb      	strb	r3, [r7, #6]
        uint8_t fs_sel = (gyro_config >> 3) & 0x03;
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	717b      	strb	r3, [r7, #5]

        switch(fs_sel) {
 8001400:	797b      	ldrb	r3, [r7, #5]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d81a      	bhi.n	800143c <IMU_Init+0x80>
 8001406:	a201      	add	r2, pc, #4	@ (adr r2, 800140c <IMU_Init+0x50>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	0800141d 	.word	0x0800141d
 8001410:	08001425 	.word	0x08001425
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001435 	.word	0x08001435
            case 0: GYRO_SCALE = 131.0; break;  // ±250°/s
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <IMU_Init+0xe4>)
 800141e:	4a21      	ldr	r2, [pc, #132]	@ (80014a4 <IMU_Init+0xe8>)
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e00b      	b.n	800143c <IMU_Init+0x80>
            case 1: GYRO_SCALE = 65.5;  break;  // ±500°/s
 8001424:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <IMU_Init+0xe4>)
 8001426:	4a20      	ldr	r2, [pc, #128]	@ (80014a8 <IMU_Init+0xec>)
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e007      	b.n	800143c <IMU_Init+0x80>
            case 2: GYRO_SCALE = 32.8;  break;  // ±1000°/s
 800142c:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <IMU_Init+0xe4>)
 800142e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ac <IMU_Init+0xf0>)
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	e003      	b.n	800143c <IMU_Init+0x80>
            case 3: GYRO_SCALE = 16.4;  break;  // ±2000°/s
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <IMU_Init+0xe4>)
 8001436:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <IMU_Init+0xf4>)
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	bf00      	nop
        }

        uint8_t accel_config = IMU_ReadReg(IMU_ACCEL_CONFIG);
 800143c:	201c      	movs	r0, #28
 800143e:	f000 f863 	bl	8001508 <IMU_ReadReg>
 8001442:	4603      	mov	r3, r0
 8001444:	713b      	strb	r3, [r7, #4]
        uint8_t afs_sel = (accel_config >> 3) & 0x03;
 8001446:	793b      	ldrb	r3, [r7, #4]
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	70fb      	strb	r3, [r7, #3]

        switch(afs_sel) {
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	2b03      	cmp	r3, #3
 8001456:	d81f      	bhi.n	8001498 <IMU_Init+0xdc>
 8001458:	a201      	add	r2, pc, #4	@ (adr r2, 8001460 <IMU_Init+0xa4>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001471 	.word	0x08001471
 8001464:	0800147b 	.word	0x0800147b
 8001468:	08001485 	.word	0x08001485
 800146c:	0800148f 	.word	0x0800148f
            case 0: ACCEL_SCALE = 16384.0; break;  // ±2g
 8001470:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <IMU_Init+0xf8>)
 8001472:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e00e      	b.n	8001498 <IMU_Init+0xdc>
            case 1: ACCEL_SCALE = 8192.0;  break;  // ±4g
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <IMU_Init+0xf8>)
 800147c:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e009      	b.n	8001498 <IMU_Init+0xdc>
            case 2: ACCEL_SCALE = 4096.0;  break;  // ±8g
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <IMU_Init+0xf8>)
 8001486:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e004      	b.n	8001498 <IMU_Init+0xdc>
            case 3: ACCEL_SCALE = 2048.0;  break;  // ±16g
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <IMU_Init+0xf8>)
 8001490:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	bf00      	nop
        }
    }
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	43030000 	.word	0x43030000
 80014a8:	42830000 	.word	0x42830000
 80014ac:	42033333 	.word	0x42033333
 80014b0:	41833333 	.word	0x41833333
 80014b4:	20000004 	.word	0x20000004

080014b8 <IMU_WriteReg>:

void IMU_WriteReg(uint8_t reg, uint8_t data) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	460a      	mov	r2, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {reg, data};
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	733b      	strb	r3, [r7, #12]
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d6:	480a      	ldr	r0, [pc, #40]	@ (8001500 <IMU_WriteReg+0x48>)
 80014d8:	f003 fa96 	bl	8004a08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, txData, 2, HAL_MAX_DELAY);
 80014dc:	f107 010c 	add.w	r1, r7, #12
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e4:	2202      	movs	r2, #2
 80014e6:	4807      	ldr	r0, [pc, #28]	@ (8001504 <IMU_WriteReg+0x4c>)
 80014e8:	f004 fb23 	bl	8005b32 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f2:	4803      	ldr	r0, [pc, #12]	@ (8001500 <IMU_WriteReg+0x48>)
 80014f4:	f003 fa88 	bl	8004a08 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	48000400 	.word	0x48000400
 8001504:	20000514 	.word	0x20000514

08001508 <IMU_ReadReg>:

uint8_t IMU_ReadReg(uint8_t reg) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = reg | 0x80;
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001518:	b2db      	uxtb	r3, r3
 800151a:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData;
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001522:	480f      	ldr	r0, [pc, #60]	@ (8001560 <IMU_ReadReg+0x58>)
 8001524:	f003 fa70 	bl	8004a08 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, &txData, 1, HAL_MAX_DELAY);
 8001528:	f107 010f 	add.w	r1, r7, #15
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001530:	2201      	movs	r2, #1
 8001532:	480c      	ldr	r0, [pc, #48]	@ (8001564 <IMU_ReadReg+0x5c>)
 8001534:	f004 fafd 	bl	8005b32 <HAL_SPI_Transmit>
    HAL_SPI_Receive(IMU_SPI, &rxData, 1, HAL_MAX_DELAY);
 8001538:	f107 010e 	add.w	r1, r7, #14
 800153c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001540:	2201      	movs	r2, #1
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <IMU_ReadReg+0x5c>)
 8001544:	f004 fc6b 	bl	8005e1e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800154e:	4804      	ldr	r0, [pc, #16]	@ (8001560 <IMU_ReadReg+0x58>)
 8001550:	f003 fa5a 	bl	8004a08 <HAL_GPIO_WritePin>
    return rxData;
 8001554:	7bbb      	ldrb	r3, [r7, #14]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	48000400 	.word	0x48000400
 8001564:	20000514 	.word	0x20000514

08001568 <IMU_ReadAccelData>:

void IMU_ReadAccelData(int16_t *accelData) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_ACCEL_XOUT_H);
 8001570:	203b      	movs	r0, #59	@ 0x3b
 8001572:	f7ff ffc9 	bl	8001508 <IMU_ReadReg>
 8001576:	4603      	mov	r3, r0
 8001578:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_ACCEL_XOUT_L);
 800157a:	203c      	movs	r0, #60	@ 0x3c
 800157c:	f7ff ffc4 	bl	8001508 <IMU_ReadReg>
 8001580:	4603      	mov	r3, r0
 8001582:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_ACCEL_YOUT_H);
 8001584:	203d      	movs	r0, #61	@ 0x3d
 8001586:	f7ff ffbf 	bl	8001508 <IMU_ReadReg>
 800158a:	4603      	mov	r3, r0
 800158c:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_ACCEL_YOUT_L);
 800158e:	203e      	movs	r0, #62	@ 0x3e
 8001590:	f7ff ffba 	bl	8001508 <IMU_ReadReg>
 8001594:	4603      	mov	r3, r0
 8001596:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_ACCEL_ZOUT_H);
 8001598:	203f      	movs	r0, #63	@ 0x3f
 800159a:	f7ff ffb5 	bl	8001508 <IMU_ReadReg>
 800159e:	4603      	mov	r3, r0
 80015a0:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_ACCEL_ZOUT_L);
 80015a2:	2040      	movs	r0, #64	@ 0x40
 80015a4:	f7ff ffb0 	bl	8001508 <IMU_ReadReg>
 80015a8:	4603      	mov	r3, r0
 80015aa:	737b      	strb	r3, [r7, #13]

    accelData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 80015ac:	7a3b      	ldrb	r3, [r7, #8]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	7a7b      	ldrb	r3, [r7, #9]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	801a      	strh	r2, [r3, #0]
    accelData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 80015be:	7abb      	ldrb	r3, [r7, #10]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b219      	sxth	r1, r3
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3302      	adds	r3, #2
 80015cc:	430a      	orrs	r2, r1
 80015ce:	b212      	sxth	r2, r2
 80015d0:	801a      	strh	r2, [r3, #0]
    accelData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 80015d2:	7b3b      	ldrb	r3, [r7, #12]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b219      	sxth	r1, r3
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	b21a      	sxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	430a      	orrs	r2, r1
 80015e2:	b212      	sxth	r2, r2
 80015e4:	801a      	strh	r2, [r3, #0]
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <IMU_ReadGyroData>:

void IMU_ReadGyroData(int16_t *gyroData) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_GYRO_XOUT_H);
 80015f6:	2043      	movs	r0, #67	@ 0x43
 80015f8:	f7ff ff86 	bl	8001508 <IMU_ReadReg>
 80015fc:	4603      	mov	r3, r0
 80015fe:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_GYRO_XOUT_L);
 8001600:	2044      	movs	r0, #68	@ 0x44
 8001602:	f7ff ff81 	bl	8001508 <IMU_ReadReg>
 8001606:	4603      	mov	r3, r0
 8001608:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_GYRO_YOUT_H);
 800160a:	2045      	movs	r0, #69	@ 0x45
 800160c:	f7ff ff7c 	bl	8001508 <IMU_ReadReg>
 8001610:	4603      	mov	r3, r0
 8001612:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_GYRO_YOUT_L);
 8001614:	2046      	movs	r0, #70	@ 0x46
 8001616:	f7ff ff77 	bl	8001508 <IMU_ReadReg>
 800161a:	4603      	mov	r3, r0
 800161c:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_GYRO_ZOUT_H);
 800161e:	2047      	movs	r0, #71	@ 0x47
 8001620:	f7ff ff72 	bl	8001508 <IMU_ReadReg>
 8001624:	4603      	mov	r3, r0
 8001626:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_GYRO_ZOUT_L);
 8001628:	2048      	movs	r0, #72	@ 0x48
 800162a:	f7ff ff6d 	bl	8001508 <IMU_ReadReg>
 800162e:	4603      	mov	r3, r0
 8001630:	737b      	strb	r3, [r7, #13]

    gyroData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 8001632:	7a3b      	ldrb	r3, [r7, #8]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	7a7b      	ldrb	r3, [r7, #9]
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21a      	sxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	801a      	strh	r2, [r3, #0]
    gyroData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 8001644:	7abb      	ldrb	r3, [r7, #10]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b219      	sxth	r1, r3
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	b21a      	sxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3302      	adds	r3, #2
 8001652:	430a      	orrs	r2, r1
 8001654:	b212      	sxth	r2, r2
 8001656:	801a      	strh	r2, [r3, #0]
    gyroData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b219      	sxth	r1, r3
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	b21a      	sxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	430a      	orrs	r2, r1
 8001668:	b212      	sxth	r2, r2
 800166a:	801a      	strh	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	0000      	movs	r0, r0
	...

08001678 <IMU_GetConvertedData>:

void IMU_GetConvertedData(float *accel, float *gyro) {
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
    int16_t accelData[3], gyroData[3];
    IMU_ReadAccelData(accelData);
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff6e 	bl	8001568 <IMU_ReadAccelData>
    IMU_ReadGyroData(gyroData);
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ffac 	bl	80015ee <IMU_ReadGyroData>

    accel[0] = (float)accelData[0] / ACCEL_SCALE * 9.81;
 8001696:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <IMU_GetConvertedData+0x1a0>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ac:	ee16 0a90 	vmov	r0, s13
 80016b0:	f7fe ff72 	bl	8000598 <__aeabi_f2d>
 80016b4:	a354      	add	r3, pc, #336	@ (adr r3, 8001808 <IMU_GetConvertedData+0x190>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe ffc5 	bl	8000648 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff fab7 	bl	8000c38 <__aeabi_d2f>
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]
    accel[1] = (float)accelData[1] / ACCEL_SCALE * 9.81;
 80016d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001818 <IMU_GetConvertedData+0x1a0>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016e6:	ee16 0a90 	vmov	r0, s13
 80016ea:	f7fe ff55 	bl	8000598 <__aeabi_f2d>
 80016ee:	a346      	add	r3, pc, #280	@ (adr r3, 8001808 <IMU_GetConvertedData+0x190>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ffa8 	bl	8000648 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	1d1c      	adds	r4, r3, #4
 8001704:	f7ff fa98 	bl	8000c38 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	6023      	str	r3, [r4, #0]
    accel[2] = (float)accelData[2] / ACCEL_SCALE * 9.81;
 800170c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001718:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <IMU_GetConvertedData+0x1a0>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001722:	ee16 0a90 	vmov	r0, s13
 8001726:	f7fe ff37 	bl	8000598 <__aeabi_f2d>
 800172a:	a337      	add	r3, pc, #220	@ (adr r3, 8001808 <IMU_GetConvertedData+0x190>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff8a 	bl	8000648 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f103 0408 	add.w	r4, r3, #8
 8001742:	f7ff fa79 	bl	8000c38 <__aeabi_d2f>
 8001746:	4603      	mov	r3, r0
 8001748:	6023      	str	r3, [r4, #0]

    gyro[0] = (float)gyroData[0] / GYRO_SCALE * (M_PI / 180.0);
 800174a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001756:	4b31      	ldr	r3, [pc, #196]	@ (800181c <IMU_GetConvertedData+0x1a4>)
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001760:	ee16 0a90 	vmov	r0, s13
 8001764:	f7fe ff18 	bl	8000598 <__aeabi_f2d>
 8001768:	a329      	add	r3, pc, #164	@ (adr r3, 8001810 <IMU_GetConvertedData+0x198>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ff6b 	bl	8000648 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff fa5d 	bl	8000c38 <__aeabi_d2f>
 800177e:	4602      	mov	r2, r0
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	601a      	str	r2, [r3, #0]
    gyro[1] = (float)gyroData[1] / GYRO_SCALE * (M_PI / 180.0);
 8001784:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <IMU_GetConvertedData+0x1a4>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800179a:	ee16 0a90 	vmov	r0, s13
 800179e:	f7fe fefb 	bl	8000598 <__aeabi_f2d>
 80017a2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001810 <IMU_GetConvertedData+0x198>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe ff4e 	bl	8000648 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	1d1c      	adds	r4, r3, #4
 80017b8:	f7ff fa3e 	bl	8000c38 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	6023      	str	r3, [r4, #0]
    gyro[2] = (float)gyroData[2] / GYRO_SCALE * (M_PI / 180.0);
 80017c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <IMU_GetConvertedData+0x1a4>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017d6:	ee16 0a90 	vmov	r0, s13
 80017da:	f7fe fedd 	bl	8000598 <__aeabi_f2d>
 80017de:	a30c      	add	r3, pc, #48	@ (adr r3, 8001810 <IMU_GetConvertedData+0x198>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe ff30 	bl	8000648 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f103 0408 	add.w	r4, r3, #8
 80017f6:	f7ff fa1f 	bl	8000c38 <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	6023      	str	r3, [r4, #0]
}
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd90      	pop	{r4, r7, pc}
 8001806:	bf00      	nop
 8001808:	51eb851f 	.word	0x51eb851f
 800180c:	40239eb8 	.word	0x40239eb8
 8001810:	a2529d39 	.word	0xa2529d39
 8001814:	3f91df46 	.word	0x3f91df46
 8001818:	20000004 	.word	0x20000004
 800181c:	20000000 	.word	0x20000000

08001820 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001850:	f7ff f98a 	bl	8000b68 <__aeabi_dcmpgt>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8001866:	e011      	b.n	800188c <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001874:	f7ff f95a 	bl	8000b2c <__aeabi_dcmplt>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <PID_Init+0x60>
}
 800187e:	e005      	b.n	800188c <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	0000      	movs	r0, r0
	...

08001898 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6278      	str	r0, [r7, #36]	@ 0x24
 80018a0:	6239      	str	r1, [r7, #32]
 80018a2:	61fa      	str	r2, [r7, #28]
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	ed87 0b04 	vstr	d0, [r7, #16]
 80018aa:	ed87 1b02 	vstr	d1, [r7, #8]
 80018ae:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	6a3a      	ldr	r2, [r7, #32]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c6:	2200      	movs	r2, #0
 80018c8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80018ca:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001920 <PID+0x88>
 80018ce:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001928 <PID+0x90>
 80018d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018d4:	f000 f956 	bl	8001b84 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	2264      	movs	r2, #100	@ 0x64
 80018dc:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80018de:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80018e2:	4619      	mov	r1, r3
 80018e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018e6:	f000 fa63 	bl	8001db0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80018ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018ee:	4619      	mov	r1, r3
 80018f0:	ed97 2b00 	vldr	d2, [r7]
 80018f4:	ed97 1b02 	vldr	d1, [r7, #8]
 80018f8:	ed97 0b04 	vldr	d0, [r7, #16]
 80018fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018fe:	f000 f9af 	bl	8001c60 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001902:	f002 fded 	bl	80044e0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	1ad2      	subs	r2, r2, r3
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	605a      	str	r2, [r3, #4]

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	f3af 8000 	nop.w
 8001920:	00000000 	.word	0x00000000
 8001924:	406fe000 	.word	0x406fe000
	...

08001930 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af02      	add	r7, sp, #8
 8001936:	6278      	str	r0, [r7, #36]	@ 0x24
 8001938:	6239      	str	r1, [r7, #32]
 800193a:	61fa      	str	r2, [r7, #28]
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001942:	ed87 1b02 	vstr	d1, [r7, #8]
 8001946:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 800194a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	2301      	movs	r3, #1
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	ed97 2b00 	vldr	d2, [r7]
 8001958:	ed97 1b02 	vldr	d1, [r7, #8]
 800195c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001968:	f7ff ff96 	bl	8001898 <PID>
}
 800196c:	bf00      	nop
 800196e:	3728      	adds	r7, #40	@ 0x28
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b08c      	sub	sp, #48	@ 0x30
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <PID_Compute+0x14>
	{
		return _FALSE;
 8001984:	2300      	movs	r3, #0
 8001986:	e0db      	b.n	8001b40 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001988:	f002 fdaa 	bl	80044e0 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	6a3a      	ldr	r2, [r7, #32]
 800199e:	429a      	cmp	r2, r3
 80019a0:	f0c0 80cd 	bcc.w	8001b3e <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019bc:	f7fe fc8c 	bl	80002d8 <__aeabi_dsub>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80019ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019d2:	f7fe fc81 	bl	80002d8 <__aeabi_dsub>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80019ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019ee:	f7fe fe2b 	bl	8000648 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fc6f 	bl	80002dc <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d114      	bne.n	8001a3a <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a20:	f7fe fe12 	bl	8000648 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fc54 	bl	80002d8 <__aeabi_dsub>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001a46:	f7ff f88f 	bl	8000b68 <__aeabi_dcmpgt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001a5c:	e010      	b.n	8001a80 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001a6a:	f7ff f85f 	bl	8000b2c <__aeabi_dcmplt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001a8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a92:	f7fe fdd9 	bl	8000648 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001a9e:	e005      	b.n	8001aac <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001abc:	f7fe fdc4 	bl	8000648 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fc06 	bl	80002d8 <__aeabi_dsub>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ad4:	f7fe fc02 	bl	80002dc <__adddf3>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001ae6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001aea:	f7ff f83d 	bl	8000b68 <__aeabi_dcmpgt>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001afa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001afe:	e00e      	b.n	8001b1e <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b0a:	f7ff f80f 	bl	8000b2c <__aeabi_dcmplt>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001b1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b30:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8001b3e:	2300      	movs	r3, #0
	}

}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3730      	adds	r7, #48	@ 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}

08001b48 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <PID_SetMode+0x2e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fe55 	bl	8001820 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	705a      	strb	r2, [r3, #1]

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6178      	str	r0, [r7, #20]
 8001b8c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b90:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b9c:	f7fe ffda 	bl	8000b54 <__aeabi_dcmpge>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d158      	bne.n	8001c58 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bac:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001bb0:	6979      	ldr	r1, [r7, #20]
 8001bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bb6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d04b      	beq.n	8001c5a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001bd0:	f7fe ffca 	bl	8000b68 <__aeabi_dcmpgt>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001be4:	e9c1 2300 	strd	r2, r3, [r1]
 8001be8:	e012      	b.n	8001c10 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001bf8:	f7fe ff98 	bl	8000b2c <__aeabi_dcmplt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d006      	beq.n	8001c10 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c0c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c1c:	f7fe ffa4 	bl	8000b68 <__aeabi_dcmpgt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c32:	e012      	b.n	8001c5a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c40:	f7fe ff74 	bl	8000b2c <__aeabi_dcmplt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c50:	6979      	ldr	r1, [r7, #20]
 8001c52:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c56:	e000      	b.n	8001c5a <PID_SetOutputLimits+0xd6>
		return;
 8001c58:	bf00      	nop
		}
		else { }

	}

}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	61f8      	str	r0, [r7, #28]
 8001c68:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c6c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c70:	ed87 2b00 	vstr	d2, [r7]
 8001c74:	460b      	mov	r3, r1
 8001c76:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c84:	f7fe ff52 	bl	8000b2c <__aeabi_dcmplt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 8089 	bne.w	8001da2 <PID_SetTunings2+0x142>
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c9c:	f7fe ff46 	bl	8000b2c <__aeabi_dcmplt>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d17d      	bne.n	8001da2 <PID_SetTunings2+0x142>
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cb2:	f7fe ff3b 	bl	8000b2c <__aeabi_dcmplt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d172      	bne.n	8001da2 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	7efa      	ldrb	r2, [r7, #27]
 8001cc0:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001cc2:	7efb      	ldrb	r3, [r7, #27]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001cd4:	69f9      	ldr	r1, [r7, #28]
 8001cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cda:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001cde:	69f9      	ldr	r1, [r7, #28]
 8001ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ce4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001ce8:	69f9      	ldr	r1, [r7, #28]
 8001cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cee:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc2c 	bl	8000554 <__aeabi_ui2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <PID_SetTunings2+0x14c>)
 8001d02:	f7fe fdcb 	bl	800089c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8001d0e:	69f9      	ldr	r1, [r7, #28]
 8001d10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d14:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001d18:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d20:	f7fe fc92 	bl	8000648 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	69f9      	ldr	r1, [r7, #28]
 8001d2a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d36:	f7fe fdb1 	bl	800089c <__aeabi_ddiv>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	69f9      	ldr	r1, [r7, #28]
 8001d40:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d12b      	bne.n	8001da4 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	f7fe fabd 	bl	80002d8 <__aeabi_dsub>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	69f9      	ldr	r1, [r7, #28]
 8001d64:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001d6e:	f04f 0000 	mov.w	r0, #0
 8001d72:	f04f 0100 	mov.w	r1, #0
 8001d76:	f7fe faaf 	bl	80002d8 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	69f9      	ldr	r1, [r7, #28]
 8001d80:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	f7fe faa1 	bl	80002d8 <__aeabi_dsub>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	69f9      	ldr	r1, [r7, #28]
 8001d9c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001da0:	e000      	b.n	8001da4 <PID_SetTunings2+0x144>
		return;
 8001da2:	bf00      	nop

	}

}
 8001da4:	3728      	adds	r7, #40	@ 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	408f4000 	.word	0x408f4000

08001db0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d02e      	beq.n	8001e22 <PID_SetControllerDirection+0x72>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	78db      	ldrb	r3, [r3, #3]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d029      	beq.n	8001e22 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	f7fe fa7c 	bl	80002d8 <__aeabi_dsub>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	f7fe fa6e 	bl	80002d8 <__aeabi_dsub>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	f7fe fa60 	bl	80002d8 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	70da      	strb	r2, [r3, #3]

}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	dd2e      	ble.n	8001e9e <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001e40:	6838      	ldr	r0, [r7, #0]
 8001e42:	f7fe fb97 	bl	8000574 <__aeabi_i2d>
 8001e46:	4604      	mov	r4, r0
 8001e48:	460d      	mov	r5, r1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_ui2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fd1e 	bl	800089c <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e72:	f7fe fbe9 	bl	8000648 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001e86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e8a:	f7fe fd07 	bl	800089c <__aeabi_ddiv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	609a      	str	r2, [r3, #8]

	}

}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ea8 <VSSS_Init>:
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

struct AES_ctx ctx;

void VSSS_Init(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
    Kinematics_Init();
 8001eac:	f000 ff10 	bl	8002cd0 <Kinematics_Init>
    NRF24_Init();
 8001eb0:	f001 fea4 	bl	8003bfc <NRF24_Init>
    NRF24_RxMode(RxAddress, 125);
 8001eb4:	217d      	movs	r1, #125	@ 0x7d
 8001eb6:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <VSSS_Init+0x38>)
 8001eb8:	f001 fec7 	bl	8003c4a <NRF24_RxMode>
    AES_init_ctx_iv(&ctx, aes_key, iv);
 8001ebc:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <VSSS_Init+0x3c>)
 8001ebe:	490a      	ldr	r1, [pc, #40]	@ (8001ee8 <VSSS_Init+0x40>)
 8001ec0:	480a      	ldr	r0, [pc, #40]	@ (8001eec <VSSS_Init+0x44>)
 8001ec2:	f000 f983 	bl	80021cc <AES_init_ctx_iv>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001ec6:	480a      	ldr	r0, [pc, #40]	@ (8001ef0 <VSSS_Init+0x48>)
 8001ec8:	f7fe f9fa 	bl	80002c0 <strlen>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed4:	4906      	ldr	r1, [pc, #24]	@ (8001ef0 <VSSS_Init+0x48>)
 8001ed6:	4807      	ldr	r0, [pc, #28]	@ (8001ef4 <VSSS_Init+0x4c>)
 8001ed8:	f005 ff60 	bl	8007d9c <HAL_UART_Transmit>

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000020 	.word	0x20000020
 8001ee8:	0800e39c 	.word	0x0800e39c
 8001eec:	20000250 	.word	0x20000250
 8001ef0:	20000010 	.word	0x20000010
 8001ef4:	200006a8 	.word	0x200006a8

08001ef8 <VSSS_Run>:

void VSSS_Run(void) {
 8001ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efa:	b093      	sub	sp, #76	@ 0x4c
 8001efc:	af04      	add	r7, sp, #16
    if (isDataAvailable(2) == 1) {
 8001efe:	2002      	movs	r0, #2
 8001f00:	f001 fee2 	bl	8003cc8 <isDataAvailable>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d177      	bne.n	8001ffa <VSSS_Run+0x102>
        NRF24_Receive(robot.RxData);
 8001f0a:	483e      	ldr	r0, [pc, #248]	@ (8002004 <VSSS_Run+0x10c>)
 8001f0c:	f001 fefc 	bl	8003d08 <NRF24_Receive>
        uint8_t real_size = robot.RxData[0];
 8001f10:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <VSSS_Run+0x110>)
 8001f12:	7b1b      	ldrb	r3, [r3, #12]
 8001f14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        AES_ctx_set_iv(&ctx, iv);
 8001f18:	493c      	ldr	r1, [pc, #240]	@ (800200c <VSSS_Run+0x114>)
 8001f1a:	483d      	ldr	r0, [pc, #244]	@ (8002010 <VSSS_Run+0x118>)
 8001f1c:	f000 f96c 	bl	80021f8 <AES_ctx_set_iv>
        AES_CBC_decrypt_buffer(&ctx, &robot.RxData[1], AES_BLOCK_SIZE);
 8001f20:	2210      	movs	r2, #16
 8001f22:	493c      	ldr	r1, [pc, #240]	@ (8002014 <VSSS_Run+0x11c>)
 8001f24:	483a      	ldr	r0, [pc, #232]	@ (8002010 <VSSS_Run+0x118>)
 8001f26:	f000 fddd 	bl	8002ae4 <AES_CBC_decrypt_buffer>

        if (real_size >= sizeof(int) + 2 * sizeof(float)) {
 8001f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f2e:	2b0b      	cmp	r3, #11
 8001f30:	d95c      	bls.n	8001fec <VSSS_Run+0xf4>

            memcpy(&robot.id, &robot.RxData[1], sizeof(int));
 8001f32:	4b35      	ldr	r3, [pc, #212]	@ (8002008 <VSSS_Run+0x110>)
 8001f34:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b33      	ldr	r3, [pc, #204]	@ (8002008 <VSSS_Run+0x110>)
 8001f3c:	601a      	str	r2, [r3, #0]
            robot.id = __builtin_bswap32(robot.id);
 8001f3e:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <VSSS_Run+0x110>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	ba1b      	rev	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b30      	ldr	r3, [pc, #192]	@ (8002008 <VSSS_Run+0x110>)
 8001f48:	601a      	str	r2, [r3, #0]
            memcpy(&robot.vL, &robot.RxData[5], sizeof(float));
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <VSSS_Run+0x110>)
 8001f4c:	f8d3 3011 	ldr.w	r3, [r3, #17]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <VSSS_Run+0x110>)
 8001f54:	605a      	str	r2, [r3, #4]
            memcpy(&robot.vR, &robot.RxData[9], sizeof(float));
 8001f56:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <VSSS_Run+0x110>)
 8001f58:	f8d3 3015 	ldr.w	r3, [r3, #21]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <VSSS_Run+0x110>)
 8001f60:	609a      	str	r2, [r3, #8]

            if (robot.id == 0) {
 8001f62:	4b29      	ldr	r3, [pc, #164]	@ (8002008 <VSSS_Run+0x110>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d132      	bne.n	8001fd0 <VSSS_Run+0xd8>
                char buffer[50];
                snprintf(buffer, sizeof(buffer), "ID: %d, VL: %.2f, VR: %.2f\r\n", robot.id, robot.vL, robot.vR);
 8001f6a:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <VSSS_Run+0x110>)
 8001f6c:	681e      	ldr	r6, [r3, #0]
 8001f6e:	4b26      	ldr	r3, [pc, #152]	@ (8002008 <VSSS_Run+0x110>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fb10 	bl	8000598 <__aeabi_f2d>
 8001f78:	4604      	mov	r4, r0
 8001f7a:	460d      	mov	r5, r1
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <VSSS_Run+0x110>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fb09 	bl	8000598 <__aeabi_f2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	1d38      	adds	r0, r7, #4
 8001f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f90:	e9cd 4500 	strd	r4, r5, [sp]
 8001f94:	4633      	mov	r3, r6
 8001f96:	4a20      	ldr	r2, [pc, #128]	@ (8002018 <VSSS_Run+0x120>)
 8001f98:	2132      	movs	r1, #50	@ 0x32
 8001f9a:	f007 fca9 	bl	80098f0 <sniprintf>
                HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 1000);
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe f98d 	bl	80002c0 <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	1d39      	adds	r1, r7, #4
 8001fac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fb0:	481a      	ldr	r0, [pc, #104]	@ (800201c <VSSS_Run+0x124>)
 8001fb2:	f005 fef3 	bl	8007d9c <HAL_UART_Transmit>
                Kinematics_SetSpeeds(robot.vL, robot.vR);
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <VSSS_Run+0x110>)
 8001fb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <VSSS_Run+0x110>)
 8001fbe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fc2:	eef0 0a47 	vmov.f32	s1, s14
 8001fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fca:	f000 ff99 	bl	8002f00 <Kinematics_SetSpeeds>
            }
        } else {
            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid data received!\r\n", 24, 1000);
        }
    }
}
 8001fce:	e014      	b.n	8001ffa <VSSS_Run+0x102>
                HAL_UART_Transmit(&huart1, (uint8_t*)"Message ignored (wrong ID)\r\n", 29, 1000);
 8001fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd4:	221d      	movs	r2, #29
 8001fd6:	4912      	ldr	r1, [pc, #72]	@ (8002020 <VSSS_Run+0x128>)
 8001fd8:	4810      	ldr	r0, [pc, #64]	@ (800201c <VSSS_Run+0x124>)
 8001fda:	f005 fedf 	bl	8007d9c <HAL_UART_Transmit>
                Kinematics_SetSpeeds(0.0, 0.0);
 8001fde:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002024 <VSSS_Run+0x12c>
 8001fe2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8002024 <VSSS_Run+0x12c>
 8001fe6:	f000 ff8b 	bl	8002f00 <Kinematics_SetSpeeds>
}
 8001fea:	e006      	b.n	8001ffa <VSSS_Run+0x102>
            HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid data received!\r\n", 24, 1000);
 8001fec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff0:	2218      	movs	r2, #24
 8001ff2:	490d      	ldr	r1, [pc, #52]	@ (8002028 <VSSS_Run+0x130>)
 8001ff4:	4809      	ldr	r0, [pc, #36]	@ (800201c <VSSS_Run+0x124>)
 8001ff6:	f005 fed1 	bl	8007d9c <HAL_UART_Transmit>
}
 8001ffa:	bf00      	nop
 8001ffc:	373c      	adds	r7, #60	@ 0x3c
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002002:	bf00      	nop
 8002004:	20000230 	.word	0x20000230
 8002008:	20000224 	.word	0x20000224
 800200c:	20000020 	.word	0x20000020
 8002010:	20000250 	.word	0x20000250
 8002014:	20000231 	.word	0x20000231
 8002018:	0800e2f0 	.word	0x0800e2f0
 800201c:	200006a8 	.word	0x200006a8
 8002020:	0800e310 	.word	0x0800e310
 8002024:	00000000 	.word	0x00000000
 8002028:	0800e330 	.word	0x0800e330

0800202c <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e030      	b.n	800209e <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	441a      	add	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	440b      	add	r3, r1
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	3301      	adds	r3, #1
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	441a      	add	r2, r3
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3301      	adds	r3, #1
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	440b      	add	r3, r1
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	441a      	add	r2, r3
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	440b      	add	r3, r1
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	3303      	adds	r3, #3
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	441a      	add	r2, r3
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3303      	adds	r3, #3
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	440b      	add	r3, r1
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d9cb      	bls.n	800203c <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80020a4:	2304      	movs	r3, #4
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	e081      	b.n	80021ae <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	3301      	adds	r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	3302      	adds	r3, #2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3303      	adds	r3, #3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d125      	bne.n	8002136 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80020ea:	7b3b      	ldrb	r3, [r7, #12]
 80020ec:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80020fe:	7b3b      	ldrb	r3, [r7, #12]
 8002100:	461a      	mov	r2, r3
 8002102:	4b30      	ldr	r3, [pc, #192]	@ (80021c4 <KeyExpansion+0x198>)
 8002104:	5c9b      	ldrb	r3, [r3, r2]
 8002106:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8002108:	7b7b      	ldrb	r3, [r7, #13]
 800210a:	461a      	mov	r2, r3
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <KeyExpansion+0x198>)
 800210e:	5c9b      	ldrb	r3, [r3, r2]
 8002110:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	461a      	mov	r2, r3
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <KeyExpansion+0x198>)
 8002118:	5c9b      	ldrb	r3, [r3, r2]
 800211a:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	461a      	mov	r2, r3
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <KeyExpansion+0x198>)
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8002126:	7b3a      	ldrb	r2, [r7, #12]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	4926      	ldr	r1, [pc, #152]	@ (80021c8 <KeyExpansion+0x19c>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	4053      	eors	r3, r2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3b04      	subs	r3, #4
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	7819      	ldrb	r1, [r3, #0]
 800214c:	7b3a      	ldrb	r2, [r7, #12]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4403      	add	r3, r0
 8002154:	404a      	eors	r2, r1
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	3301      	adds	r3, #1
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	7819      	ldrb	r1, [r3, #0]
 8002164:	7b7a      	ldrb	r2, [r7, #13]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	3301      	adds	r3, #1
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4403      	add	r3, r0
 800216e:	404a      	eors	r2, r1
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	3302      	adds	r3, #2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	7819      	ldrb	r1, [r3, #0]
 800217e:	7bba      	ldrb	r2, [r7, #14]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3302      	adds	r3, #2
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4403      	add	r3, r0
 8002188:	404a      	eors	r2, r1
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	3303      	adds	r3, #3
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	7819      	ldrb	r1, [r3, #0]
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	3303      	adds	r3, #3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	4403      	add	r3, r0
 80021a2:	404a      	eors	r2, r1
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b2b      	cmp	r3, #43	@ 0x2b
 80021b2:	f67f af7a 	bls.w	80020aa <KeyExpansion+0x7e>
  }
}
 80021b6:	bf00      	nop
 80021b8:	bf00      	nop
 80021ba:	3724      	adds	r7, #36	@ 0x24
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	0800e3ac 	.word	0x0800e3ac
 80021c8:	0800e5ac 	.word	0x0800e5ac

080021cc <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff25 	bl	800202c <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	33b0      	adds	r3, #176	@ 0xb0
 80021e6:	2210      	movs	r2, #16
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f007 fc97 	bl	8009b1e <memcpy>
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <AES_ctx_set_iv>:
void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	33b0      	adds	r3, #176	@ 0xb0
 8002206:	2210      	movs	r2, #16
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f007 fc87 	bl	8009b1e <memcpy>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
 800222a:	e027      	b.n	800227c <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 800222c:	2300      	movs	r3, #0
 800222e:	75bb      	strb	r3, [r7, #22]
 8002230:	e01e      	b.n	8002270 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8002232:	7dfa      	ldrb	r2, [r7, #23]
 8002234:	7dbb      	ldrb	r3, [r7, #22]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	0092      	lsls	r2, r2, #2
 800223a:	440a      	add	r2, r1
 800223c:	4413      	add	r3, r2
 800223e:	7818      	ldrb	r0, [r3, #0]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	009a      	lsls	r2, r3, #2
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	4413      	add	r3, r2
 8002248:	009a      	lsls	r2, r3, #2
 800224a:	7dbb      	ldrb	r3, [r7, #22]
 800224c:	4413      	add	r3, r2
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	7819      	ldrb	r1, [r3, #0]
 8002256:	7dfa      	ldrb	r2, [r7, #23]
 8002258:	7dbb      	ldrb	r3, [r7, #22]
 800225a:	4041      	eors	r1, r0
 800225c:	b2c8      	uxtb	r0, r1
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	440a      	add	r2, r1
 8002264:	4413      	add	r3, r2
 8002266:	4602      	mov	r2, r0
 8002268:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800226a:	7dbb      	ldrb	r3, [r7, #22]
 800226c:	3301      	adds	r3, #1
 800226e:	75bb      	strb	r3, [r7, #22]
 8002270:	7dbb      	ldrb	r3, [r7, #22]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d9dd      	bls.n	8002232 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	3301      	adds	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d9d4      	bls.n	800222c <AddRoundKey+0x14>
    }
  }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <xtime>:
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	b25a      	sxtb	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	09db      	lsrs	r3, r3, #7
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4619      	mov	r1, r3
 80022a8:	0049      	lsls	r1, r1, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	4619      	mov	r1, r3
 80022ae:	00c8      	lsls	r0, r1, #3
 80022b0:	4619      	mov	r1, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	440b      	add	r3, r1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	b25b      	sxtb	r3, r3
 80022ba:	4053      	eors	r3, r2
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	b2db      	uxtb	r3, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e33b      	b.n	8002952 <InvMixColumns+0x686>
  {
    a = (*state)[i][0];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80022e2:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	785b      	ldrb	r3, [r3, #1]
 80022ee:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	789b      	ldrb	r3, [r3, #2]
 80022fa:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	78db      	ldrb	r3, [r3, #3]
 8002306:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ffc0 	bl	8002290 <xtime>
 8002310:	4603      	mov	r3, r0
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffbc 	bl	8002290 <xtime>
 8002318:	4603      	mov	r3, r0
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ffb8 	bl	8002290 <xtime>
 8002320:	4603      	mov	r3, r0
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ffb4 	bl	8002290 <xtime>
 8002328:	7abb      	ldrb	r3, [r7, #10]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ffb0 	bl	8002290 <xtime>
 8002330:	4603      	mov	r3, r0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff ffac 	bl	8002290 <xtime>
 8002338:	7abb      	ldrb	r3, [r7, #10]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ffa8 	bl	8002290 <xtime>
 8002340:	4603      	mov	r3, r0
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffa4 	bl	8002290 <xtime>
 8002348:	4603      	mov	r3, r0
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ffa0 	bl	8002290 <xtime>
 8002350:	4603      	mov	r3, r0
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff9c 	bl	8002290 <xtime>
 8002358:	7a7b      	ldrb	r3, [r7, #9]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff98 	bl	8002290 <xtime>
 8002360:	7a7b      	ldrb	r3, [r7, #9]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff94 	bl	8002290 <xtime>
 8002368:	4603      	mov	r3, r0
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff90 	bl	8002290 <xtime>
 8002370:	4603      	mov	r3, r0
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff8c 	bl	8002290 <xtime>
 8002378:	4603      	mov	r3, r0
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff88 	bl	8002290 <xtime>
 8002380:	7a3b      	ldrb	r3, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ff84 	bl	8002290 <xtime>
 8002388:	7a3b      	ldrb	r3, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff80 	bl	8002290 <xtime>
 8002390:	4603      	mov	r3, r0
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff7c 	bl	8002290 <xtime>
 8002398:	7a3b      	ldrb	r3, [r7, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff78 	bl	8002290 <xtime>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff74 	bl	8002290 <xtime>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff ff70 	bl	8002290 <xtime>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff6c 	bl	8002290 <xtime>
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff68 	bl	8002290 <xtime>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461c      	mov	r4, r3
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff62 	bl	8002290 <xtime>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff5e 	bl	8002290 <xtime>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4063      	eors	r3, r4
 80023d8:	b2dc      	uxtb	r4, r3
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff57 	bl	8002290 <xtime>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff53 	bl	8002290 <xtime>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff4f 	bl	8002290 <xtime>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4063      	eors	r3, r4
 80023f6:	b2dc      	uxtb	r4, r3
 80023f8:	7abb      	ldrb	r3, [r7, #10]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff48 	bl	8002290 <xtime>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	7abb      	ldrb	r3, [r7, #10]
 8002406:	4053      	eors	r3, r2
 8002408:	b2dd      	uxtb	r5, r3
 800240a:	7abb      	ldrb	r3, [r7, #10]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff3f 	bl	8002290 <xtime>
 8002412:	4603      	mov	r3, r0
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff3b 	bl	8002290 <xtime>
 800241a:	4603      	mov	r3, r0
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff37 	bl	8002290 <xtime>
 8002422:	4603      	mov	r3, r0
 8002424:	406b      	eors	r3, r5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4063      	eors	r3, r4
 800242a:	b2dc      	uxtb	r4, r3
 800242c:	7a7b      	ldrb	r3, [r7, #9]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff2e 	bl	8002290 <xtime>
 8002434:	4603      	mov	r3, r0
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff2a 	bl	8002290 <xtime>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	7a7b      	ldrb	r3, [r7, #9]
 8002442:	4053      	eors	r3, r2
 8002444:	b2dd      	uxtb	r5, r3
 8002446:	7a7b      	ldrb	r3, [r7, #9]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff21 	bl	8002290 <xtime>
 800244e:	4603      	mov	r3, r0
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff1d 	bl	8002290 <xtime>
 8002456:	4603      	mov	r3, r0
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff19 	bl	8002290 <xtime>
 800245e:	4603      	mov	r3, r0
 8002460:	406b      	eors	r3, r5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4063      	eors	r3, r4
 8002466:	b2dc      	uxtb	r4, r3
 8002468:	7a3b      	ldrb	r3, [r7, #8]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff10 	bl	8002290 <xtime>
 8002470:	4603      	mov	r3, r0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff0c 	bl	8002290 <xtime>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff08 	bl	8002290 <xtime>
 8002480:	4603      	mov	r3, r0
 8002482:	461a      	mov	r2, r3
 8002484:	7a3b      	ldrb	r3, [r7, #8]
 8002486:	4053      	eors	r3, r2
 8002488:	b2db      	uxtb	r3, r3
 800248a:	4063      	eors	r3, r4
 800248c:	b2d9      	uxtb	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8002496:	7afb      	ldrb	r3, [r7, #11]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fef9 	bl	8002290 <xtime>
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fef5 	bl	8002290 <xtime>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fef1 	bl	8002290 <xtime>
 80024ae:	7afb      	ldrb	r3, [r7, #11]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff feed 	bl	8002290 <xtime>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fee9 	bl	8002290 <xtime>
 80024be:	4603      	mov	r3, r0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fee5 	bl	8002290 <xtime>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fee1 	bl	8002290 <xtime>
 80024ce:	7abb      	ldrb	r3, [r7, #10]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fedd 	bl	8002290 <xtime>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fed9 	bl	8002290 <xtime>
 80024de:	4603      	mov	r3, r0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fed5 	bl	8002290 <xtime>
 80024e6:	4603      	mov	r3, r0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fed1 	bl	8002290 <xtime>
 80024ee:	7a7b      	ldrb	r3, [r7, #9]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fecd 	bl	8002290 <xtime>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fec9 	bl	8002290 <xtime>
 80024fe:	7a7b      	ldrb	r3, [r7, #9]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fec5 	bl	8002290 <xtime>
 8002506:	4603      	mov	r3, r0
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fec1 	bl	8002290 <xtime>
 800250e:	4603      	mov	r3, r0
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff febd 	bl	8002290 <xtime>
 8002516:	4603      	mov	r3, r0
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff feb9 	bl	8002290 <xtime>
 800251e:	7a3b      	ldrb	r3, [r7, #8]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff feb5 	bl	8002290 <xtime>
 8002526:	7a3b      	ldrb	r3, [r7, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff feb1 	bl	8002290 <xtime>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fead 	bl	8002290 <xtime>
 8002536:	4603      	mov	r3, r0
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fea9 	bl	8002290 <xtime>
 800253e:	4603      	mov	r3, r0
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fea5 	bl	8002290 <xtime>
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fea1 	bl	8002290 <xtime>
 800254e:	4603      	mov	r3, r0
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fe9d 	bl	8002290 <xtime>
 8002556:	4603      	mov	r3, r0
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe99 	bl	8002290 <xtime>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	4053      	eors	r3, r2
 8002566:	b2dc      	uxtb	r4, r3
 8002568:	7abb      	ldrb	r3, [r7, #10]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fe90 	bl	8002290 <xtime>
 8002570:	4603      	mov	r3, r0
 8002572:	461d      	mov	r5, r3
 8002574:	7abb      	ldrb	r3, [r7, #10]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fe8a 	bl	8002290 <xtime>
 800257c:	4603      	mov	r3, r0
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fe86 	bl	8002290 <xtime>
 8002584:	4603      	mov	r3, r0
 8002586:	406b      	eors	r3, r5
 8002588:	b2dd      	uxtb	r5, r3
 800258a:	7abb      	ldrb	r3, [r7, #10]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe7f 	bl	8002290 <xtime>
 8002592:	4603      	mov	r3, r0
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fe7b 	bl	8002290 <xtime>
 800259a:	4603      	mov	r3, r0
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fe77 	bl	8002290 <xtime>
 80025a2:	4603      	mov	r3, r0
 80025a4:	406b      	eors	r3, r5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4063      	eors	r3, r4
 80025aa:	b2dc      	uxtb	r4, r3
 80025ac:	7a7b      	ldrb	r3, [r7, #9]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fe6e 	bl	8002290 <xtime>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	7a7b      	ldrb	r3, [r7, #9]
 80025ba:	4053      	eors	r3, r2
 80025bc:	b2dd      	uxtb	r5, r3
 80025be:	7a7b      	ldrb	r3, [r7, #9]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe65 	bl	8002290 <xtime>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fe61 	bl	8002290 <xtime>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fe5d 	bl	8002290 <xtime>
 80025d6:	4603      	mov	r3, r0
 80025d8:	406b      	eors	r3, r5
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4063      	eors	r3, r4
 80025de:	b2dc      	uxtb	r4, r3
 80025e0:	7a3b      	ldrb	r3, [r7, #8]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fe54 	bl	8002290 <xtime>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fe50 	bl	8002290 <xtime>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	7a3b      	ldrb	r3, [r7, #8]
 80025f6:	4053      	eors	r3, r2
 80025f8:	b2dd      	uxtb	r5, r3
 80025fa:	7a3b      	ldrb	r3, [r7, #8]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe47 	bl	8002290 <xtime>
 8002602:	4603      	mov	r3, r0
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe43 	bl	8002290 <xtime>
 800260a:	4603      	mov	r3, r0
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fe3f 	bl	8002290 <xtime>
 8002612:	4603      	mov	r3, r0
 8002614:	406b      	eors	r3, r5
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4063      	eors	r3, r4
 800261a:	b2d9      	uxtb	r1, r3
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	460a      	mov	r2, r1
 8002626:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8002628:	7afb      	ldrb	r3, [r7, #11]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe30 	bl	8002290 <xtime>
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe2c 	bl	8002290 <xtime>
 8002638:	4603      	mov	r3, r0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe28 	bl	8002290 <xtime>
 8002640:	4603      	mov	r3, r0
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fe24 	bl	8002290 <xtime>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fe20 	bl	8002290 <xtime>
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fe1c 	bl	8002290 <xtime>
 8002658:	7abb      	ldrb	r3, [r7, #10]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fe18 	bl	8002290 <xtime>
 8002660:	4603      	mov	r3, r0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fe14 	bl	8002290 <xtime>
 8002668:	7abb      	ldrb	r3, [r7, #10]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fe10 	bl	8002290 <xtime>
 8002670:	4603      	mov	r3, r0
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe0c 	bl	8002290 <xtime>
 8002678:	4603      	mov	r3, r0
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fe08 	bl	8002290 <xtime>
 8002680:	4603      	mov	r3, r0
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe04 	bl	8002290 <xtime>
 8002688:	7a7b      	ldrb	r3, [r7, #9]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fe00 	bl	8002290 <xtime>
 8002690:	4603      	mov	r3, r0
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fdfc 	bl	8002290 <xtime>
 8002698:	4603      	mov	r3, r0
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fdf8 	bl	8002290 <xtime>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fdf4 	bl	8002290 <xtime>
 80026a8:	7a3b      	ldrb	r3, [r7, #8]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fdf0 	bl	8002290 <xtime>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fdec 	bl	8002290 <xtime>
 80026b8:	7a3b      	ldrb	r3, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fde8 	bl	8002290 <xtime>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fde4 	bl	8002290 <xtime>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fde0 	bl	8002290 <xtime>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fddc 	bl	8002290 <xtime>
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fdd8 	bl	8002290 <xtime>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fdd4 	bl	8002290 <xtime>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	4053      	eors	r3, r2
 80026f0:	b2dc      	uxtb	r4, r3
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fdcb 	bl	8002290 <xtime>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fdc7 	bl	8002290 <xtime>
 8002702:	4603      	mov	r3, r0
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff fdc3 	bl	8002290 <xtime>
 800270a:	4603      	mov	r3, r0
 800270c:	4063      	eors	r3, r4
 800270e:	b2dc      	uxtb	r4, r3
 8002710:	7abb      	ldrb	r3, [r7, #10]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fdbc 	bl	8002290 <xtime>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fdb8 	bl	8002290 <xtime>
 8002720:	4603      	mov	r3, r0
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fdb4 	bl	8002290 <xtime>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	7abb      	ldrb	r3, [r7, #10]
 800272e:	4053      	eors	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4063      	eors	r3, r4
 8002734:	b2dc      	uxtb	r4, r3
 8002736:	7a7b      	ldrb	r3, [r7, #9]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fda9 	bl	8002290 <xtime>
 800273e:	4603      	mov	r3, r0
 8002740:	461d      	mov	r5, r3
 8002742:	7a7b      	ldrb	r3, [r7, #9]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fda3 	bl	8002290 <xtime>
 800274a:	4603      	mov	r3, r0
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fd9f 	bl	8002290 <xtime>
 8002752:	4603      	mov	r3, r0
 8002754:	406b      	eors	r3, r5
 8002756:	b2dd      	uxtb	r5, r3
 8002758:	7a7b      	ldrb	r3, [r7, #9]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fd98 	bl	8002290 <xtime>
 8002760:	4603      	mov	r3, r0
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fd94 	bl	8002290 <xtime>
 8002768:	4603      	mov	r3, r0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fd90 	bl	8002290 <xtime>
 8002770:	4603      	mov	r3, r0
 8002772:	406b      	eors	r3, r5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4063      	eors	r3, r4
 8002778:	b2dc      	uxtb	r4, r3
 800277a:	7a3b      	ldrb	r3, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fd87 	bl	8002290 <xtime>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	7a3b      	ldrb	r3, [r7, #8]
 8002788:	4053      	eors	r3, r2
 800278a:	b2dd      	uxtb	r5, r3
 800278c:	7a3b      	ldrb	r3, [r7, #8]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fd7e 	bl	8002290 <xtime>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fd7a 	bl	8002290 <xtime>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fd76 	bl	8002290 <xtime>
 80027a4:	4603      	mov	r3, r0
 80027a6:	406b      	eors	r3, r5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4063      	eors	r3, r4
 80027ac:	b2d9      	uxtb	r1, r3
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	460a      	mov	r2, r1
 80027b8:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fd67 	bl	8002290 <xtime>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fd63 	bl	8002290 <xtime>
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fd5f 	bl	8002290 <xtime>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fd5b 	bl	8002290 <xtime>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fd57 	bl	8002290 <xtime>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fd53 	bl	8002290 <xtime>
 80027ea:	7abb      	ldrb	r3, [r7, #10]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fd4f 	bl	8002290 <xtime>
 80027f2:	7abb      	ldrb	r3, [r7, #10]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fd4b 	bl	8002290 <xtime>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fd47 	bl	8002290 <xtime>
 8002802:	4603      	mov	r3, r0
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fd43 	bl	8002290 <xtime>
 800280a:	4603      	mov	r3, r0
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fd3f 	bl	8002290 <xtime>
 8002812:	7a7b      	ldrb	r3, [r7, #9]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fd3b 	bl	8002290 <xtime>
 800281a:	7a7b      	ldrb	r3, [r7, #9]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fd37 	bl	8002290 <xtime>
 8002822:	4603      	mov	r3, r0
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd33 	bl	8002290 <xtime>
 800282a:	7a7b      	ldrb	r3, [r7, #9]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fd2f 	bl	8002290 <xtime>
 8002832:	4603      	mov	r3, r0
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fd2b 	bl	8002290 <xtime>
 800283a:	4603      	mov	r3, r0
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fd27 	bl	8002290 <xtime>
 8002842:	4603      	mov	r3, r0
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fd23 	bl	8002290 <xtime>
 800284a:	7a3b      	ldrb	r3, [r7, #8]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd1f 	bl	8002290 <xtime>
 8002852:	4603      	mov	r3, r0
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fd1b 	bl	8002290 <xtime>
 800285a:	4603      	mov	r3, r0
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fd17 	bl	8002290 <xtime>
 8002862:	4603      	mov	r3, r0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fd13 	bl	8002290 <xtime>
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fd0f 	bl	8002290 <xtime>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	4053      	eors	r3, r2
 800287a:	b2dc      	uxtb	r4, r3
 800287c:	7afb      	ldrb	r3, [r7, #11]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fd06 	bl	8002290 <xtime>
 8002884:	4603      	mov	r3, r0
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fd02 	bl	8002290 <xtime>
 800288c:	4603      	mov	r3, r0
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fcfe 	bl	8002290 <xtime>
 8002894:	4603      	mov	r3, r0
 8002896:	4063      	eors	r3, r4
 8002898:	b2dc      	uxtb	r4, r3
 800289a:	7abb      	ldrb	r3, [r7, #10]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fcf7 	bl	8002290 <xtime>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fcf3 	bl	8002290 <xtime>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	7abb      	ldrb	r3, [r7, #10]
 80028b0:	4053      	eors	r3, r2
 80028b2:	b2dd      	uxtb	r5, r3
 80028b4:	7abb      	ldrb	r3, [r7, #10]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fcea 	bl	8002290 <xtime>
 80028bc:	4603      	mov	r3, r0
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fce6 	bl	8002290 <xtime>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fce2 	bl	8002290 <xtime>
 80028cc:	4603      	mov	r3, r0
 80028ce:	406b      	eors	r3, r5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4063      	eors	r3, r4
 80028d4:	b2dc      	uxtb	r4, r3
 80028d6:	7a7b      	ldrb	r3, [r7, #9]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fcd9 	bl	8002290 <xtime>
 80028de:	4603      	mov	r3, r0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fcd5 	bl	8002290 <xtime>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fcd1 	bl	8002290 <xtime>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	7a7b      	ldrb	r3, [r7, #9]
 80028f4:	4053      	eors	r3, r2
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4063      	eors	r3, r4
 80028fa:	b2dc      	uxtb	r4, r3
 80028fc:	7a3b      	ldrb	r3, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fcc6 	bl	8002290 <xtime>
 8002904:	4603      	mov	r3, r0
 8002906:	461d      	mov	r5, r3
 8002908:	7a3b      	ldrb	r3, [r7, #8]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fcc0 	bl	8002290 <xtime>
 8002910:	4603      	mov	r3, r0
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fcbc 	bl	8002290 <xtime>
 8002918:	4603      	mov	r3, r0
 800291a:	406b      	eors	r3, r5
 800291c:	b2dd      	uxtb	r5, r3
 800291e:	7a3b      	ldrb	r3, [r7, #8]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fcb5 	bl	8002290 <xtime>
 8002926:	4603      	mov	r3, r0
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fcb1 	bl	8002290 <xtime>
 800292e:	4603      	mov	r3, r0
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fcad 	bl	8002290 <xtime>
 8002936:	4603      	mov	r3, r0
 8002938:	406b      	eors	r3, r5
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4063      	eors	r3, r4
 800293e:	b2d9      	uxtb	r1, r3
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	460a      	mov	r2, r1
 800294a:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3301      	adds	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b03      	cmp	r3, #3
 8002956:	f77f acc0 	ble.w	80022da <InvMixColumns+0xe>
  }
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bdb0      	pop	{r4, r5, r7, pc}

08002964 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e01d      	b.n	80029ae <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8002972:	2300      	movs	r3, #0
 8002974:	73bb      	strb	r3, [r7, #14]
 8002976:	e014      	b.n	80029a2 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8002978:	7bba      	ldrb	r2, [r7, #14]
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	440a      	add	r2, r1
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	7bba      	ldrb	r2, [r7, #14]
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	490d      	ldr	r1, [pc, #52]	@ (80029c4 <InvSubBytes+0x60>)
 800298e:	5c08      	ldrb	r0, [r1, r0]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	440a      	add	r2, r1
 8002996:	4413      	add	r3, r2
 8002998:	4602      	mov	r2, r0
 800299a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 800299c:	7bbb      	ldrb	r3, [r7, #14]
 800299e:	3301      	adds	r3, #1
 80029a0:	73bb      	strb	r3, [r7, #14]
 80029a2:	7bbb      	ldrb	r3, [r7, #14]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d9e7      	bls.n	8002978 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	3301      	adds	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d9de      	bls.n	8002972 <InvSubBytes+0xe>
    }
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	0800e4ac 	.word	0x0800e4ac

080029c8 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7b5b      	ldrb	r3, [r3, #13]
 80029d4:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7a5a      	ldrb	r2, [r3, #9]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	795a      	ldrb	r2, [r3, #5]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	785a      	ldrb	r2, [r3, #1]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7a9a      	ldrb	r2, [r3, #10]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	799b      	ldrb	r3, [r3, #6]
 8002a0c:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7b9a      	ldrb	r2, [r3, #14]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	79da      	ldrb	r2, [r3, #7]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7ada      	ldrb	r2, [r3, #11]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7bda      	ldrb	r2, [r3, #15]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	73da      	strb	r2, [r3, #15]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <InvCipher>:
  AddRoundKey(Nr, state, RoundKey);
}

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	200a      	movs	r0, #10
 8002a60:	f7ff fbda 	bl	8002218 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8002a64:	2309      	movs	r3, #9
 8002a66:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ffad 	bl	80029c8 <InvShiftRows>
    InvSubBytes(state);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ff78 	bl	8002964 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fbcc 	bl	8002218 <AddRoundKey>
    if (round == 0) {
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fc20 	bl	80022cc <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8002a92:	e7e9      	b.n	8002a68 <InvCipher+0x1c>
      break;
 8002a94:	bf00      	nop
  }

}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	e010      	b.n	8002ad0 <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	7819      	ldrb	r1, [r3, #0]
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4403      	add	r3, r0
 8002ac4:	404a      	eors	r2, r1
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	3301      	adds	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	d9eb      	bls.n	8002aae <XorWithIv+0x10>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <AES_CBC_decrypt_buffer>:
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af4:	e022      	b.n	8002b3c <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f107 0414 	add.w	r4, r7, #20
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	68b8      	ldr	r0, [r7, #8]
 8002b0c:	f7ff ff9e 	bl	8002a4c <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	33b0      	adds	r3, #176	@ 0xb0
 8002b14:	4619      	mov	r1, r3
 8002b16:	68b8      	ldr	r0, [r7, #8]
 8002b18:	f7ff ffc1 	bl	8002a9e <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	33b0      	adds	r3, #176	@ 0xb0
 8002b20:	461d      	mov	r5, r3
 8002b22:	f107 0414 	add.w	r4, r7, #20
 8002b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b28:	6028      	str	r0, [r5, #0]
 8002b2a:	6069      	str	r1, [r5, #4]
 8002b2c:	60aa      	str	r2, [r5, #8]
 8002b2e:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3310      	adds	r3, #16
 8002b34:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	3310      	adds	r3, #16
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d3d8      	bcc.n	8002af6 <AES_CBC_decrypt_buffer+0x12>
  }

}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	@ 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdb0      	pop	{r4, r5, r7, pc}

08002b4e <Encoder_Init>:

Encoder left_encoder;
Encoder right_encoder;

void Encoder_Init(Encoder *encoder, TIM_HandleTypeDef *htim)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
    encoder->last_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	b21a      	sxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	809a      	strh	r2, [r3, #4]
    encoder->last_time = HAL_GetTick();
 8002b6a:	f001 fcb9 	bl	80044e0 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
    encoder->rpm = 0.0f;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <Encoder_Calculate_RPM>:

void Encoder_Calculate_RPM(Encoder *encoder)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

    uint32_t current_time = HAL_GetTick();
 8002b8c:	f001 fca8 	bl	80044e0 <HAL_GetTick>
 8002b90:	61b8      	str	r0, [r7, #24]
    uint32_t delta_time = current_time - encoder->last_time;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	617b      	str	r3, [r7, #20]


    if (delta_time == 0) {
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <Encoder_Calculate_RPM+0xa8>
        return;
    }

    int16_t current_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	827b      	strh	r3, [r7, #18]
    int16_t delta_encoder = current_encoder_value - encoder->last_encoder_value;
 8002bac:	8a7a      	ldrh	r2, [r7, #18]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	83fb      	strh	r3, [r7, #30]

    if (delta_encoder > (ENCODER_PULSES_PER_REV / 2)) {
 8002bbc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002bc0:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8002bc4:	db05      	blt.n	8002bd2 <Encoder_Calculate_RPM+0x4e>
        delta_encoder -= ENCODER_PULSES_PER_REV;
 8002bc6:	8bfb      	ldrh	r3, [r7, #30]
 8002bc8:	f6a3 23be 	subw	r3, r3, #2750	@ 0xabe
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	83fb      	strh	r3, [r7, #30]
 8002bd0:	e009      	b.n	8002be6 <Encoder_Calculate_RPM+0x62>
    }
    else if (delta_encoder < -(ENCODER_PULSES_PER_REV / 2)) {
 8002bd2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002bd6:	f513 6fac 	cmn.w	r3, #1376	@ 0x560
 8002bda:	dc04      	bgt.n	8002be6 <Encoder_Calculate_RPM+0x62>
        delta_encoder += ENCODER_PULSES_PER_REV;
 8002bdc:	8bfb      	ldrh	r3, [r7, #30]
 8002bde:	f603 23be 	addw	r3, r3, #2750	@ 0xabe
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	83fb      	strh	r3, [r7, #30]
    }

    float dt_min = (float)delta_time / 60000.0f;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bf0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002c34 <Encoder_Calculate_RPM+0xb0>
 8002bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf8:	edc7 7a03 	vstr	s15, [r7, #12]

    encoder->rpm = ((float)delta_encoder / (float)ENCODER_PULSES_PER_REV) / dt_min;
 8002bfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c08:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c38 <Encoder_Calculate_RPM+0xb4>
 8002c0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c10:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	edc3 7a03 	vstr	s15, [r3, #12]


    encoder->last_encoder_value = current_encoder_value;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8a7a      	ldrh	r2, [r7, #18]
 8002c22:	809a      	strh	r2, [r3, #4]
    encoder->last_time = current_time;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	e000      	b.n	8002c2e <Encoder_Calculate_RPM+0xaa>
        return;
 8002c2c:	bf00      	nop
}
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	476a6000 	.word	0x476a6000
 8002c38:	452be000 	.word	0x452be000

08002c3c <Encoder_Update>:

void Encoder_Update(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
    Encoder_Calculate_RPM(&left_encoder);
 8002c40:	4803      	ldr	r0, [pc, #12]	@ (8002c50 <Encoder_Update+0x14>)
 8002c42:	f7ff ff9f 	bl	8002b84 <Encoder_Calculate_RPM>
    Encoder_Calculate_RPM(&right_encoder);
 8002c46:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <Encoder_Update+0x18>)
 8002c48:	f7ff ff9c 	bl	8002b84 <Encoder_Calculate_RPM>
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000310 	.word	0x20000310
 8002c54:	20000320 	.word	0x20000320

08002c58 <CalibrateGyro>:
char debug_imu[150];

static float theta_imu = 0.0;
static float gyro_bias = 0.0; // Compensação do giroscópio

void CalibrateGyro(void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
    float sum = 0.0;
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
    int samples = 1000;
 8002c64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c68:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < samples; i++) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	e012      	b.n	8002c96 <CalibrateGyro+0x3e>
        IMU_GetConvertedData(accel, gyro);
 8002c70:	4913      	ldr	r1, [pc, #76]	@ (8002cc0 <CalibrateGyro+0x68>)
 8002c72:	4814      	ldr	r0, [pc, #80]	@ (8002cc4 <CalibrateGyro+0x6c>)
 8002c74:	f7fe fd00 	bl	8001678 <IMU_GetConvertedData>
        sum += gyro[2]; // Captura o bias do giroscópio
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <CalibrateGyro+0x68>)
 8002c7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c86:	edc7 7a03 	vstr	s15, [r7, #12]
        HAL_Delay(1);
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f001 fc34 	bl	80044f8 <HAL_Delay>
    for (int i = 0; i < samples; i++) {
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dbe8      	blt.n	8002c70 <CalibrateGyro+0x18>
    }

    gyro_bias = sum / samples; // Calcula a média
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca8:	edd7 6a03 	vldr	s13, [r7, #12]
 8002cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <CalibrateGyro+0x70>)
 8002cb2:	edc3 7a00 	vstr	s15, [r3]
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000049c 	.word	0x2000049c
 8002cc4:	20000490 	.word	0x20000490
 8002cc8:	200004ac 	.word	0x200004ac
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <Kinematics_Init>:

void Kinematics_Init(void) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af04      	add	r7, sp, #16
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002cd6:	213c      	movs	r1, #60	@ 0x3c
 8002cd8:	484b      	ldr	r0, [pc, #300]	@ (8002e08 <Kinematics_Init+0x138>)
 8002cda:	f004 f811 	bl	8006d00 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002cde:	213c      	movs	r1, #60	@ 0x3c
 8002ce0:	484a      	ldr	r0, [pc, #296]	@ (8002e0c <Kinematics_Init+0x13c>)
 8002ce2:	f004 f80d 	bl	8006d00 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4849      	ldr	r0, [pc, #292]	@ (8002e10 <Kinematics_Init+0x140>)
 8002cea:	f003 fe63 	bl	80069b4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4848      	ldr	r0, [pc, #288]	@ (8002e14 <Kinematics_Init+0x144>)
 8002cf2:	f003 fe5f 	bl	80069b4 <HAL_TIM_PWM_Start>

    IMU_Init();
 8002cf6:	f7fe fb61 	bl	80013bc <IMU_Init>
    EKF_Init(&ekf);
 8002cfa:	4847      	ldr	r0, [pc, #284]	@ (8002e18 <Kinematics_Init+0x148>)
 8002cfc:	f7fe f9f0 	bl	80010e0 <EKF_Init>
    CalibrateGyro(); // Calibra a IMU antes de começar
 8002d00:	f7ff ffaa 	bl	8002c58 <CalibrateGyro>

    Encoder_Init(&left_encoder, &htim3);
 8002d04:	4940      	ldr	r1, [pc, #256]	@ (8002e08 <Kinematics_Init+0x138>)
 8002d06:	4845      	ldr	r0, [pc, #276]	@ (8002e1c <Kinematics_Init+0x14c>)
 8002d08:	f7ff ff21 	bl	8002b4e <Encoder_Init>
    Encoder_Init(&right_encoder, &htim4);
 8002d0c:	493f      	ldr	r1, [pc, #252]	@ (8002e0c <Kinematics_Init+0x13c>)
 8002d0e:	4844      	ldr	r0, [pc, #272]	@ (8002e20 <Kinematics_Init+0x150>)
 8002d10:	f7ff ff1d 	bl	8002b4e <Encoder_Init>

    Motor_Init(&motorLeft, &htim2, TIM_CHANNEL_1, INA1_GPIO_Port, INA1_Pin, INA2_GPIO_Port, INA2_Pin);
 8002d14:	2304      	movs	r3, #4
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	2302      	movs	r3, #2
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d26:	2200      	movs	r2, #0
 8002d28:	493a      	ldr	r1, [pc, #232]	@ (8002e14 <Kinematics_Init+0x144>)
 8002d2a:	483e      	ldr	r0, [pc, #248]	@ (8002e24 <Kinematics_Init+0x154>)
 8002d2c:	f000 fdaa 	bl	8003884 <Motor_Init>
    Motor_Init(&motorRight, &htim1, TIM_CHANNEL_1, INB1_GPIO_Port, INB1_Pin, INB2_GPIO_Port, INB2_Pin);
 8002d30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d34:	9302      	str	r3, [sp, #8]
 8002d36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d46:	2200      	movs	r2, #0
 8002d48:	4931      	ldr	r1, [pc, #196]	@ (8002e10 <Kinematics_Init+0x140>)
 8002d4a:	4837      	ldr	r0, [pc, #220]	@ (8002e28 <Kinematics_Init+0x158>)
 8002d4c:	f000 fd9a 	bl	8003884 <Motor_Init>

    PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 0.5539, 124.0, 0.001194, _PID_CD_DIRECT);
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 8002dd0 <Kinematics_Init+0x100>
 8002d58:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 8002dd8 <Kinematics_Init+0x108>
 8002d5c:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 8002de0 <Kinematics_Init+0x110>
 8002d60:	4b32      	ldr	r3, [pc, #200]	@ (8002e2c <Kinematics_Init+0x15c>)
 8002d62:	4a33      	ldr	r2, [pc, #204]	@ (8002e30 <Kinematics_Init+0x160>)
 8002d64:	4933      	ldr	r1, [pc, #204]	@ (8002e34 <Kinematics_Init+0x164>)
 8002d66:	4834      	ldr	r0, [pc, #208]	@ (8002e38 <Kinematics_Init+0x168>)
 8002d68:	f7fe fde2 	bl	8001930 <PID2>
    PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 0.3515, 84.89, 0.001194, _PID_CD_DIRECT);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	ed9f 2b17 	vldr	d2, [pc, #92]	@ 8002dd0 <Kinematics_Init+0x100>
 8002d74:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8002de8 <Kinematics_Init+0x118>
 8002d78:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 8002df0 <Kinematics_Init+0x120>
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e3c <Kinematics_Init+0x16c>)
 8002d7e:	4a30      	ldr	r2, [pc, #192]	@ (8002e40 <Kinematics_Init+0x170>)
 8002d80:	4930      	ldr	r1, [pc, #192]	@ (8002e44 <Kinematics_Init+0x174>)
 8002d82:	4831      	ldr	r0, [pc, #196]	@ (8002e48 <Kinematics_Init+0x178>)
 8002d84:	f7fe fdd4 	bl	8001930 <PID2>

    PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8002d88:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8002df8 <Kinematics_Init+0x128>
 8002d8c:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8002e00 <Kinematics_Init+0x130>
 8002d90:	4829      	ldr	r0, [pc, #164]	@ (8002e38 <Kinematics_Init+0x168>)
 8002d92:	f7fe fef7 	bl	8001b84 <PID_SetOutputLimits>
    PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 8002d96:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8002df8 <Kinematics_Init+0x128>
 8002d9a:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8002e00 <Kinematics_Init+0x130>
 8002d9e:	482a      	ldr	r0, [pc, #168]	@ (8002e48 <Kinematics_Init+0x178>)
 8002da0:	f7fe fef0 	bl	8001b84 <PID_SetOutputLimits>

    PID_SetSampleTime(&pidLeft, 10);
 8002da4:	210a      	movs	r1, #10
 8002da6:	4824      	ldr	r0, [pc, #144]	@ (8002e38 <Kinematics_Init+0x168>)
 8002da8:	f7ff f842 	bl	8001e30 <PID_SetSampleTime>
    PID_SetSampleTime(&pidRight, 10);
 8002dac:	210a      	movs	r1, #10
 8002dae:	4826      	ldr	r0, [pc, #152]	@ (8002e48 <Kinematics_Init+0x178>)
 8002db0:	f7ff f83e 	bl	8001e30 <PID_SetSampleTime>

    PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8002db4:	2101      	movs	r1, #1
 8002db6:	4820      	ldr	r0, [pc, #128]	@ (8002e38 <Kinematics_Init+0x168>)
 8002db8:	f7fe fec6 	bl	8001b48 <PID_SetMode>
    PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4822      	ldr	r0, [pc, #136]	@ (8002e48 <Kinematics_Init+0x178>)
 8002dc0:	f7fe fec2 	bl	8001b48 <PID_SetMode>
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	bce4217d 	.word	0xbce4217d
 8002dd4:	3f538fff 	.word	0x3f538fff
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	405f0000 	.word	0x405f0000
 8002de0:	7e28240b 	.word	0x7e28240b
 8002de4:	3fe1b98c 	.word	0x3fe1b98c
 8002de8:	c28f5c29 	.word	0xc28f5c29
 8002dec:	405538f5 	.word	0x405538f5
 8002df0:	db22d0e5 	.word	0xdb22d0e5
 8002df4:	3fd67ef9 	.word	0x3fd67ef9
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	409a8c00 	.word	0x409a8c00
 8002e00:	00000000 	.word	0x00000000
 8002e04:	c09a8c00 	.word	0xc09a8c00
 8002e08:	20000610 	.word	0x20000610
 8002e0c:	2000065c 	.word	0x2000065c
 8002e10:	20000578 	.word	0x20000578
 8002e14:	200005c4 	.word	0x200005c4
 8002e18:	20000440 	.word	0x20000440
 8002e1c:	20000310 	.word	0x20000310
 8002e20:	20000320 	.word	0x20000320
 8002e24:	2000073c 	.word	0x2000073c
 8002e28:	20000754 	.word	0x20000754
 8002e2c:	20000330 	.word	0x20000330
 8002e30:	20000340 	.word	0x20000340
 8002e34:	20000350 	.word	0x20000350
 8002e38:	20000360 	.word	0x20000360
 8002e3c:	20000338 	.word	0x20000338
 8002e40:	20000348 	.word	0x20000348
 8002e44:	20000358 	.word	0x20000358
 8002e48:	200003d0 	.word	0x200003d0
 8002e4c:	00000000 	.word	0x00000000

08002e50 <LinearToRPM>:

/**
 * @brief Converte velocidade linear para RPM.
 */
float LinearToRPM(float v) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	ed87 0a01 	vstr	s0, [r7, #4]
    return (v * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fb9c 	bl	8000598 <__aeabi_f2d>
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <LinearToRPM+0x50>)
 8002e66:	f7fd fbef 	bl	8000648 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	a309      	add	r3, pc, #36	@ (adr r3, 8002e98 <LinearToRPM+0x48>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fd10 	bl	800089c <__aeabi_ddiv>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fd fed8 	bl	8000c38 <__aeabi_d2f>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	ee07 3a90 	vmov	s15, r3
}
 8002e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	5b22baa6 	.word	0x5b22baa6
 8002e9c:	3fd8209f 	.word	0x3fd8209f
 8002ea0:	404e0000 	.word	0x404e0000
 8002ea4:	00000000 	.word	0x00000000

08002ea8 <RPMToLinear>:

float RPMToLinear(double RPM){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	ed87 0b00 	vstr	d0, [r7]
	return (RPM * (2 * M_PI * WHEEL_RADIUS) / 60.0);
 8002eb2:	a310      	add	r3, pc, #64	@ (adr r3, 8002ef4 <RPMToLinear+0x4c>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ebc:	f7fd fbc4 	bl	8000648 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <RPMToLinear+0x48>)
 8002ece:	f7fd fce5 	bl	800089c <__aeabi_ddiv>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fead 	bl	8000c38 <__aeabi_d2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	ee07 3a90 	vmov	s15, r3
}
 8002ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	404e0000 	.word	0x404e0000
 8002ef4:	5b22baa6 	.word	0x5b22baa6
 8002ef8:	3fd8209f 	.word	0x3fd8209f
 8002efc:	00000000 	.word	0x00000000

08002f00 <Kinematics_SetSpeeds>:
/**
 * @brief Define as velocidades do robô com base em velocidades lineares (m/s).
 *        Chama `Set_Motor_Speeds()` do `motor_control.c` para aplicar nos motores.
 */
void Kinematics_SetSpeeds(float vL, float vR) {
 8002f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f04:	b087      	sub	sp, #28
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f0c:	edc7 0a00 	vstr	s1, [r7]
    Encoder_Update();
 8002f10:	f7ff fe94 	bl	8002c3c <Encoder_Update>
    IMU_GetConvertedData(accel, gyro);
 8002f14:	4986      	ldr	r1, [pc, #536]	@ (8003130 <Kinematics_SetSpeeds+0x230>)
 8002f16:	4887      	ldr	r0, [pc, #540]	@ (8003134 <Kinematics_SetSpeeds+0x234>)
 8002f18:	f7fe fbae 	bl	8001678 <IMU_GetConvertedData>

    theta_imu += (gyro[2] - gyro_bias) * 0.01;
 8002f1c:	4b86      	ldr	r3, [pc, #536]	@ (8003138 <Kinematics_SetSpeeds+0x238>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fb39 	bl	8000598 <__aeabi_f2d>
 8002f26:	4682      	mov	sl, r0
 8002f28:	468b      	mov	fp, r1
 8002f2a:	4b81      	ldr	r3, [pc, #516]	@ (8003130 <Kinematics_SetSpeeds+0x230>)
 8002f2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f30:	4b82      	ldr	r3, [pc, #520]	@ (800313c <Kinematics_SetSpeeds+0x23c>)
 8002f32:	edd3 7a00 	vldr	s15, [r3]
 8002f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3a:	ee17 0a90 	vmov	r0, s15
 8002f3e:	f7fd fb2b 	bl	8000598 <__aeabi_f2d>
 8002f42:	a377      	add	r3, pc, #476	@ (adr r3, 8003120 <Kinematics_SetSpeeds+0x220>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd fb7e 	bl	8000648 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4650      	mov	r0, sl
 8002f52:	4659      	mov	r1, fp
 8002f54:	f7fd f9c2 	bl	80002dc <__adddf3>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7fd fe6a 	bl	8000c38 <__aeabi_d2f>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4a74      	ldr	r2, [pc, #464]	@ (8003138 <Kinematics_SetSpeeds+0x238>)
 8002f68:	6013      	str	r3, [r2, #0]
    float vL_real = RPMToLinear(left_encoder.rpm);
 8002f6a:	4b75      	ldr	r3, [pc, #468]	@ (8003140 <Kinematics_SetSpeeds+0x240>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fb12 	bl	8000598 <__aeabi_f2d>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	ec43 2b10 	vmov	d0, r2, r3
 8002f7c:	f7ff ff94 	bl	8002ea8 <RPMToLinear>
 8002f80:	ed87 0a05 	vstr	s0, [r7, #20]
    float vR_real = RPMToLinear(right_encoder.rpm);
 8002f84:	4b6f      	ldr	r3, [pc, #444]	@ (8003144 <Kinematics_SetSpeeds+0x244>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fb05 	bl	8000598 <__aeabi_f2d>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	ec43 2b10 	vmov	d0, r2, r3
 8002f96:	f7ff ff87 	bl	8002ea8 <RPMToLinear>
 8002f9a:	ed87 0a04 	vstr	s0, [r7, #16]


    if (fabs(vL_real) < 0.001 && fabs(vR_real) < 0.001) {
 8002f9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fa2:	eef0 7ae7 	vabs.f32	s15, s15
 8002fa6:	ee17 0a90 	vmov	r0, s15
 8002faa:	f7fd faf5 	bl	8000598 <__aeabi_f2d>
 8002fae:	a35e      	add	r3, pc, #376	@ (adr r3, 8003128 <Kinematics_SetSpeeds+0x228>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd fdba 	bl	8000b2c <__aeabi_dcmplt>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d013      	beq.n	8002fe6 <Kinematics_SetSpeeds+0xe6>
 8002fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fc2:	eef0 7ae7 	vabs.f32	s15, s15
 8002fc6:	ee17 0a90 	vmov	r0, s15
 8002fca:	f7fd fae5 	bl	8000598 <__aeabi_f2d>
 8002fce:	a356      	add	r3, pc, #344	@ (adr r3, 8003128 <Kinematics_SetSpeeds+0x228>)
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f7fd fdaa 	bl	8000b2c <__aeabi_dcmplt>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <Kinematics_SetSpeeds+0xe6>
        theta_imu = ekf.theta;
 8002fde:	4b5a      	ldr	r3, [pc, #360]	@ (8003148 <Kinematics_SetSpeeds+0x248>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4a55      	ldr	r2, [pc, #340]	@ (8003138 <Kinematics_SetSpeeds+0x238>)
 8002fe4:	6013      	str	r3, [r2, #0]
    }


    EKF_Predict(&ekf, vL_real, vR_real, 0.01);
 8002fe6:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 800314c <Kinematics_SetSpeeds+0x24c>
 8002fea:	edd7 0a04 	vldr	s1, [r7, #16]
 8002fee:	ed97 0a05 	vldr	s0, [r7, #20]
 8002ff2:	4855      	ldr	r0, [pc, #340]	@ (8003148 <Kinematics_SetSpeeds+0x248>)
 8002ff4:	f7fe f8a4 	bl	8001140 <EKF_Predict>
    EKF_Update(&ekf, theta_imu, accel[0], accel[1]);
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8003138 <Kinematics_SetSpeeds+0x238>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <Kinematics_SetSpeeds+0x234>)
 8003000:	ed93 7a00 	vldr	s14, [r3]
 8003004:	4b4b      	ldr	r3, [pc, #300]	@ (8003134 <Kinematics_SetSpeeds+0x234>)
 8003006:	edd3 6a01 	vldr	s13, [r3, #4]
 800300a:	eeb0 1a66 	vmov.f32	s2, s13
 800300e:	eef0 0a47 	vmov.f32	s1, s14
 8003012:	eeb0 0a67 	vmov.f32	s0, s15
 8003016:	484c      	ldr	r0, [pc, #304]	@ (8003148 <Kinematics_SetSpeeds+0x248>)
 8003018:	f7fe f990 	bl	800133c <EKF_Update>
//    snprintf(debug_imu, sizeof(debug_imu),
//             "EKF: X = %.2f, Y = %.2f, Theta = %.2f rad, Vel = %.2f m/s\r\n",
//             ekf.x, ekf.y, ekf.theta, ekf.v);
//    HAL_UART_Transmit(&huart1, (uint8_t*)debug_imu, strlen(debug_imu), HAL_MAX_DELAY);

    float target_rpm_left = LinearToRPM(vL);
 800301c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003020:	f7ff ff16 	bl	8002e50 <LinearToRPM>
 8003024:	ed87 0a03 	vstr	s0, [r7, #12]
    float target_rpm_right = LinearToRPM(vR);
 8003028:	ed97 0a00 	vldr	s0, [r7]
 800302c:	f7ff ff10 	bl	8002e50 <LinearToRPM>
 8003030:	ed87 0a02 	vstr	s0, [r7, #8]

    setpoint_left_rpm  = target_rpm_left;
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7fd faaf 	bl	8000598 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4944      	ldr	r1, [pc, #272]	@ (8003150 <Kinematics_SetSpeeds+0x250>)
 8003040:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7fd faa7 	bl	8000598 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4941      	ldr	r1, [pc, #260]	@ (8003154 <Kinematics_SetSpeeds+0x254>)
 8003050:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_encoder.rpm;
 8003054:	4b3a      	ldr	r3, [pc, #232]	@ (8003140 <Kinematics_SetSpeeds+0x240>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fa9d 	bl	8000598 <__aeabi_f2d>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	493d      	ldr	r1, [pc, #244]	@ (8003158 <Kinematics_SetSpeeds+0x258>)
 8003064:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_encoder.rpm;
 8003068:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <Kinematics_SetSpeeds+0x244>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fa93 	bl	8000598 <__aeabi_f2d>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4939      	ldr	r1, [pc, #228]	@ (800315c <Kinematics_SetSpeeds+0x25c>)
 8003078:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 800307c:	4838      	ldr	r0, [pc, #224]	@ (8003160 <Kinematics_SetSpeeds+0x260>)
 800307e:	f7fe fc79 	bl	8001974 <PID_Compute>
    PID_Compute(&pidRight);
 8003082:	4838      	ldr	r0, [pc, #224]	@ (8003164 <Kinematics_SetSpeeds+0x264>)
 8003084:	f7fe fc76 	bl	8001974 <PID_Compute>

    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8003088:	4b37      	ldr	r3, [pc, #220]	@ (8003168 <Kinematics_SetSpeeds+0x268>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	4690      	mov	r8, r2
 8003090:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003094:	4640      	mov	r0, r8
 8003096:	4649      	mov	r1, r9
 8003098:	f7fd fdae 	bl	8000bf8 <__aeabi_d2uiz>
 800309c:	4680      	mov	r8, r0
 800309e:	4b32      	ldr	r3, [pc, #200]	@ (8003168 <Kinematics_SetSpeeds+0x268>)
 80030a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a4:	2301      	movs	r3, #1
 80030a6:	461e      	mov	r6, r3
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	f7fd fd50 	bl	8000b54 <__aeabi_dcmpge>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <Kinematics_SetSpeeds+0x1be>
 80030ba:	2300      	movs	r3, #0
 80030bc:	461e      	mov	r6, r3
 80030be:	b2f3      	uxtb	r3, r6
 80030c0:	f083 0301 	eor.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	b2de      	uxtb	r6, r3
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 80030c8:	4b28      	ldr	r3, [pc, #160]	@ (800316c <Kinematics_SetSpeeds+0x26c>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	4614      	mov	r4, r2
 80030d0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 80030d4:	4620      	mov	r0, r4
 80030d6:	4629      	mov	r1, r5
 80030d8:	f7fd fd8e 	bl	8000bf8 <__aeabi_d2uiz>
 80030dc:	4604      	mov	r4, r0
                  fabs(outputRight), outputRight >= 0 ? 0 : 1);
 80030de:	4b23      	ldr	r3, [pc, #140]	@ (800316c <Kinematics_SetSpeeds+0x26c>)
 80030e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030e4:	2301      	movs	r3, #1
 80030e6:	461d      	mov	r5, r3
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	f7fd fd30 	bl	8000b54 <__aeabi_dcmpge>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <Kinematics_SetSpeeds+0x1fe>
 80030fa:	2300      	movs	r3, #0
 80030fc:	461d      	mov	r5, r3
 80030fe:	b2eb      	uxtb	r3, r5
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
    Motor_Control(fabs(outputLeft), outputLeft >= 0 ? 0 : 1,
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4622      	mov	r2, r4
 800310a:	4631      	mov	r1, r6
 800310c:	4640      	mov	r0, r8
 800310e:	f000 fbdf 	bl	80038d0 <Motor_Control>
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311c:	f3af 8000 	nop.w
 8003120:	47ae147b 	.word	0x47ae147b
 8003124:	3f847ae1 	.word	0x3f847ae1
 8003128:	d2f1a9fc 	.word	0xd2f1a9fc
 800312c:	3f50624d 	.word	0x3f50624d
 8003130:	2000049c 	.word	0x2000049c
 8003134:	20000490 	.word	0x20000490
 8003138:	200004a8 	.word	0x200004a8
 800313c:	200004ac 	.word	0x200004ac
 8003140:	20000310 	.word	0x20000310
 8003144:	20000320 	.word	0x20000320
 8003148:	20000440 	.word	0x20000440
 800314c:	3c23d70a 	.word	0x3c23d70a
 8003150:	20000330 	.word	0x20000330
 8003154:	20000338 	.word	0x20000338
 8003158:	20000350 	.word	0x20000350
 800315c:	20000358 	.word	0x20000358
 8003160:	20000360 	.word	0x20000360
 8003164:	200003d0 	.word	0x200003d0
 8003168:	20000340 	.word	0x20000340
 800316c:	20000348 	.word	0x20000348

08003170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003174:	f001 f94f 	bl	8004416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003178:	f000 f815 	bl	80031a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800317c:	f000 faf8 	bl	8003770 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003180:	f000 f8d6 	bl	8003330 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003184:	f000 f984 	bl	8003490 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003188:	f000 f9f8 	bl	800357c <MX_TIM3_Init>
  MX_TIM4_Init();
 800318c:	f000 fa4c 	bl	8003628 <MX_TIM4_Init>
  MX_SPI1_Init();
 8003190:	f000 f852 	bl	8003238 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003194:	f000 fa9e 	bl	80036d4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003198:	f000 f88c 	bl	80032b4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  VSSS_Init();
 800319c:	f7fe fe84 	bl	8001ea8 <VSSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VSSS_Run();
 80031a0:	f7fe feaa 	bl	8001ef8 <VSSS_Run>
 80031a4:	e7fc      	b.n	80031a0 <main+0x30>

080031a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b094      	sub	sp, #80	@ 0x50
 80031aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ac:	f107 0318 	add.w	r3, r7, #24
 80031b0:	2238      	movs	r2, #56	@ 0x38
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f006 fc32 	bl	8009a1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f001 fc35 	bl	8004a38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031d8:	2302      	movs	r3, #2
 80031da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031dc:	2303      	movs	r3, #3
 80031de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80031e4:	2355      	movs	r3, #85	@ 0x55
 80031e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e8:	2302      	movs	r3, #2
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031ec:	2302      	movs	r3, #2
 80031ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031f0:	2302      	movs	r3, #2
 80031f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031f4:	f107 0318 	add.w	r3, r7, #24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fcd1 	bl	8004ba0 <HAL_RCC_OscConfig>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003204:	f000 fb38 	bl	8003878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003208:	230f      	movs	r3, #15
 800320a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800320c:	2303      	movs	r3, #3
 800320e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	2104      	movs	r1, #4
 8003220:	4618      	mov	r0, r3
 8003222:	f001 ffcf 	bl	80051c4 <HAL_RCC_ClockConfig>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800322c:	f000 fb24 	bl	8003878 <Error_Handler>
  }
}
 8003230:	bf00      	nop
 8003232:	3750      	adds	r7, #80	@ 0x50
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <MX_SPI1_Init+0x74>)
 800323e:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <MX_SPI1_Init+0x78>)
 8003240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800324a:	4b18      	ldr	r3, [pc, #96]	@ (80032ac <MX_SPI1_Init+0x74>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003250:	4b16      	ldr	r3, [pc, #88]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003252:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003256:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003258:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <MX_SPI1_Init+0x74>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800325e:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800326a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800326c:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <MX_SPI1_Init+0x74>)
 800326e:	2220      	movs	r2, #32
 8003270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003274:	2200      	movs	r2, #0
 8003276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <MX_SPI1_Init+0x74>)
 800327a:	2200      	movs	r2, #0
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327e:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003284:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003286:	2207      	movs	r2, #7
 8003288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <MX_SPI1_Init+0x74>)
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003292:	2208      	movs	r2, #8
 8003294:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003296:	4805      	ldr	r0, [pc, #20]	@ (80032ac <MX_SPI1_Init+0x74>)
 8003298:	f002 fba0 	bl	80059dc <HAL_SPI_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032a2:	f000 fae9 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200004b0 	.word	0x200004b0
 80032b0:	40013000 	.word	0x40013000

080032b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032ba:	4a1c      	ldr	r2, [pc, #112]	@ (800332c <MX_SPI2_Init+0x78>)
 80032bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032be:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032c6:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80032cc:	4b16      	ldr	r3, [pc, #88]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032ce:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032d4:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032d6:	2202      	movs	r2, #2
 80032d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032da:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032dc:	2201      	movs	r2, #1
 80032de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032e0:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80032e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032ea:	2228      	movs	r2, #40	@ 0x28
 80032ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <MX_SPI2_Init+0x74>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <MX_SPI2_Init+0x74>)
 8003302:	2207      	movs	r2, #7
 8003304:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003306:	4b08      	ldr	r3, [pc, #32]	@ (8003328 <MX_SPI2_Init+0x74>)
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <MX_SPI2_Init+0x74>)
 800330e:	2200      	movs	r2, #0
 8003310:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003312:	4805      	ldr	r0, [pc, #20]	@ (8003328 <MX_SPI2_Init+0x74>)
 8003314:	f002 fb62 	bl	80059dc <HAL_SPI_Init>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800331e:	f000 faab 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000514 	.word	0x20000514
 800332c:	40003800 	.word	0x40003800

08003330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b09c      	sub	sp, #112	@ 0x70
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003336:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003344:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003350:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
 8003360:	615a      	str	r2, [r3, #20]
 8003362:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2234      	movs	r2, #52	@ 0x34
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f006 fb57 	bl	8009a1e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003370:	4b45      	ldr	r3, [pc, #276]	@ (8003488 <MX_TIM1_Init+0x158>)
 8003372:	4a46      	ldr	r2, [pc, #280]	@ (800348c <MX_TIM1_Init+0x15c>)
 8003374:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003376:	4b44      	ldr	r3, [pc, #272]	@ (8003488 <MX_TIM1_Init+0x158>)
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337c:	4b42      	ldr	r3, [pc, #264]	@ (8003488 <MX_TIM1_Init+0x158>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8003382:	4b41      	ldr	r3, [pc, #260]	@ (8003488 <MX_TIM1_Init+0x158>)
 8003384:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8003388:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338a:	4b3f      	ldr	r3, [pc, #252]	@ (8003488 <MX_TIM1_Init+0x158>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003390:	4b3d      	ldr	r3, [pc, #244]	@ (8003488 <MX_TIM1_Init+0x158>)
 8003392:	2200      	movs	r2, #0
 8003394:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003396:	4b3c      	ldr	r3, [pc, #240]	@ (8003488 <MX_TIM1_Init+0x158>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800339c:	483a      	ldr	r0, [pc, #232]	@ (8003488 <MX_TIM1_Init+0x158>)
 800339e:	f003 fa51 	bl	8006844 <HAL_TIM_Base_Init>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80033a8:	f000 fa66 	bl	8003878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033b0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80033b6:	4619      	mov	r1, r3
 80033b8:	4833      	ldr	r0, [pc, #204]	@ (8003488 <MX_TIM1_Init+0x158>)
 80033ba:	f003 fe43 	bl	8007044 <HAL_TIM_ConfigClockSource>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80033c4:	f000 fa58 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033c8:	482f      	ldr	r0, [pc, #188]	@ (8003488 <MX_TIM1_Init+0x158>)
 80033ca:	f003 fa92 	bl	80068f2 <HAL_TIM_PWM_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80033d4:	f000 fa50 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033e8:	4619      	mov	r1, r3
 80033ea:	4827      	ldr	r0, [pc, #156]	@ (8003488 <MX_TIM1_Init+0x158>)
 80033ec:	f004 fb78 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80033f6:	f000 fa3f 	bl	8003878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033fa:	2360      	movs	r3, #96	@ 0x60
 80033fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003402:	2300      	movs	r3, #0
 8003404:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003406:	2300      	movs	r3, #0
 8003408:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003416:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800341a:	2200      	movs	r2, #0
 800341c:	4619      	mov	r1, r3
 800341e:	481a      	ldr	r0, [pc, #104]	@ (8003488 <MX_TIM1_Init+0x158>)
 8003420:	f003 fcfc 	bl	8006e1c <HAL_TIM_PWM_ConfigChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800342a:	f000 fa25 	bl	8003878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003446:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800344c:	2300      	movs	r3, #0
 800344e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003450:	2300      	movs	r3, #0
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003454:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800345e:	2300      	movs	r3, #0
 8003460:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003462:	2300      	movs	r3, #0
 8003464:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	4619      	mov	r1, r3
 800346a:	4807      	ldr	r0, [pc, #28]	@ (8003488 <MX_TIM1_Init+0x158>)
 800346c:	f004 fbba 	bl	8007be4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8003476:	f000 f9ff 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800347a:	4803      	ldr	r0, [pc, #12]	@ (8003488 <MX_TIM1_Init+0x158>)
 800347c:	f000 fdca 	bl	8004014 <HAL_TIM_MspPostInit>

}
 8003480:	bf00      	nop
 8003482:	3770      	adds	r7, #112	@ 0x70
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000578 	.word	0x20000578
 800348c:	40012c00 	.word	0x40012c00

08003490 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08e      	sub	sp, #56	@ 0x38
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a4:	f107 031c 	add.w	r3, r7, #28
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b0:	463b      	mov	r3, r7
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	615a      	str	r2, [r3, #20]
 80034c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <MX_TIM2_Init+0xe8>)
 80034c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80034ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <MX_TIM2_Init+0xe8>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d0:	4b29      	ldr	r3, [pc, #164]	@ (8003578 <MX_TIM2_Init+0xe8>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 80034d6:	4b28      	ldr	r3, [pc, #160]	@ (8003578 <MX_TIM2_Init+0xe8>)
 80034d8:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80034dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034de:	4b26      	ldr	r3, [pc, #152]	@ (8003578 <MX_TIM2_Init+0xe8>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e4:	4b24      	ldr	r3, [pc, #144]	@ (8003578 <MX_TIM2_Init+0xe8>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034ea:	4823      	ldr	r0, [pc, #140]	@ (8003578 <MX_TIM2_Init+0xe8>)
 80034ec:	f003 f9aa 	bl	8006844 <HAL_TIM_Base_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80034f6:	f000 f9bf 	bl	8003878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003500:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003504:	4619      	mov	r1, r3
 8003506:	481c      	ldr	r0, [pc, #112]	@ (8003578 <MX_TIM2_Init+0xe8>)
 8003508:	f003 fd9c 	bl	8007044 <HAL_TIM_ConfigClockSource>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003512:	f000 f9b1 	bl	8003878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003516:	4818      	ldr	r0, [pc, #96]	@ (8003578 <MX_TIM2_Init+0xe8>)
 8003518:	f003 f9eb 	bl	80068f2 <HAL_TIM_PWM_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003522:	f000 f9a9 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800352e:	f107 031c 	add.w	r3, r7, #28
 8003532:	4619      	mov	r1, r3
 8003534:	4810      	ldr	r0, [pc, #64]	@ (8003578 <MX_TIM2_Init+0xe8>)
 8003536:	f004 fad3 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003540:	f000 f99a 	bl	8003878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003544:	2360      	movs	r3, #96	@ 0x60
 8003546:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003554:	463b      	mov	r3, r7
 8003556:	2200      	movs	r2, #0
 8003558:	4619      	mov	r1, r3
 800355a:	4807      	ldr	r0, [pc, #28]	@ (8003578 <MX_TIM2_Init+0xe8>)
 800355c:	f003 fc5e 	bl	8006e1c <HAL_TIM_PWM_ConfigChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003566:	f000 f987 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800356a:	4803      	ldr	r0, [pc, #12]	@ (8003578 <MX_TIM2_Init+0xe8>)
 800356c:	f000 fd52 	bl	8004014 <HAL_TIM_MspPostInit>

}
 8003570:	bf00      	nop
 8003572:	3738      	adds	r7, #56	@ 0x38
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200005c4 	.word	0x200005c4

0800357c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	@ 0x30
 8003580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003582:	f107 030c 	add.w	r3, r7, #12
 8003586:	2224      	movs	r2, #36	@ 0x24
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f006 fa47 	bl	8009a1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003590:	463b      	mov	r3, r7
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800359a:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <MX_TIM3_Init+0xa4>)
 800359c:	4a21      	ldr	r2, [pc, #132]	@ (8003624 <MX_TIM3_Init+0xa8>)
 800359e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <MX_TIM3_Init+0xa4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <MX_TIM3_Init+0xa4>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003620 <MX_TIM3_Init+0xa4>)
 80035ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <MX_TIM3_Init+0xa4>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ba:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <MX_TIM3_Init+0xa4>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035c0:	2303      	movs	r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035c8:	2301      	movs	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035d4:	2300      	movs	r3, #0
 80035d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035d8:	2301      	movs	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035dc:	2300      	movs	r3, #0
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	4619      	mov	r1, r3
 80035ea:	480d      	ldr	r0, [pc, #52]	@ (8003620 <MX_TIM3_Init+0xa4>)
 80035ec:	f003 fae2 	bl	8006bb4 <HAL_TIM_Encoder_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80035f6:	f000 f93f 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003602:	463b      	mov	r3, r7
 8003604:	4619      	mov	r1, r3
 8003606:	4806      	ldr	r0, [pc, #24]	@ (8003620 <MX_TIM3_Init+0xa4>)
 8003608:	f004 fa6a 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003612:	f000 f931 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	3730      	adds	r7, #48	@ 0x30
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000610 	.word	0x20000610
 8003624:	40000400 	.word	0x40000400

08003628 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	@ 0x30
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	2224      	movs	r2, #36	@ 0x24
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f006 f9f1 	bl	8009a1e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800363c:	463b      	mov	r3, r7
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003646:	4b21      	ldr	r3, [pc, #132]	@ (80036cc <MX_TIM4_Init+0xa4>)
 8003648:	4a21      	ldr	r2, [pc, #132]	@ (80036d0 <MX_TIM4_Init+0xa8>)
 800364a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800364c:	4b1f      	ldr	r3, [pc, #124]	@ (80036cc <MX_TIM4_Init+0xa4>)
 800364e:	2200      	movs	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003652:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <MX_TIM4_Init+0xa4>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003658:	4b1c      	ldr	r3, [pc, #112]	@ (80036cc <MX_TIM4_Init+0xa4>)
 800365a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800365e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003660:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <MX_TIM4_Init+0xa4>)
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003666:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <MX_TIM4_Init+0xa4>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800366c:	2303      	movs	r3, #3
 800366e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003674:	2301      	movs	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003680:	2300      	movs	r3, #0
 8003682:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003684:	2301      	movs	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003688:	2300      	movs	r3, #0
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	4619      	mov	r1, r3
 8003696:	480d      	ldr	r0, [pc, #52]	@ (80036cc <MX_TIM4_Init+0xa4>)
 8003698:	f003 fa8c 	bl	8006bb4 <HAL_TIM_Encoder_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80036a2:	f000 f8e9 	bl	8003878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036ae:	463b      	mov	r3, r7
 80036b0:	4619      	mov	r1, r3
 80036b2:	4806      	ldr	r0, [pc, #24]	@ (80036cc <MX_TIM4_Init+0xa4>)
 80036b4:	f004 fa14 	bl	8007ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80036be:	f000 f8db 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036c2:	bf00      	nop
 80036c4:	3730      	adds	r7, #48	@ 0x30
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	2000065c 	.word	0x2000065c
 80036d0:	40000800 	.word	0x40000800

080036d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036d8:	4b22      	ldr	r3, [pc, #136]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 80036da:	4a23      	ldr	r2, [pc, #140]	@ (8003768 <MX_USART1_UART_Init+0x94>)
 80036dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80036de:	4b21      	ldr	r3, [pc, #132]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 80036e0:	4a22      	ldr	r2, [pc, #136]	@ (800376c <MX_USART1_UART_Init+0x98>)
 80036e2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 80036f8:	220c      	movs	r2, #12
 80036fa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fc:	4b19      	ldr	r3, [pc, #100]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003702:	4b18      	ldr	r3, [pc, #96]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 8003704:	2200      	movs	r2, #0
 8003706:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003708:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 800370a:	2200      	movs	r2, #0
 800370c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800370e:	4b15      	ldr	r3, [pc, #84]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 8003710:	2200      	movs	r2, #0
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003714:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800371a:	4812      	ldr	r0, [pc, #72]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 800371c:	f004 faee 	bl	8007cfc <HAL_UART_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003726:	f000 f8a7 	bl	8003878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800372a:	2100      	movs	r1, #0
 800372c:	480d      	ldr	r0, [pc, #52]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 800372e:	f005 f8e7 	bl	8008900 <HAL_UARTEx_SetTxFifoThreshold>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003738:	f000 f89e 	bl	8003878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800373c:	2100      	movs	r1, #0
 800373e:	4809      	ldr	r0, [pc, #36]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 8003740:	f005 f91c 	bl	800897c <HAL_UARTEx_SetRxFifoThreshold>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800374a:	f000 f895 	bl	8003878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800374e:	4805      	ldr	r0, [pc, #20]	@ (8003764 <MX_USART1_UART_Init+0x90>)
 8003750:	f005 f89d 	bl	800888e <HAL_UARTEx_DisableFifoMode>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800375a:	f000 f88d 	bl	8003878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200006a8 	.word	0x200006a8
 8003768:	40013800 	.word	0x40013800
 800376c:	000f4240 	.word	0x000f4240

08003770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	@ 0x28
 8003774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	60da      	str	r2, [r3, #12]
 8003784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003786:	4b39      	ldr	r3, [pc, #228]	@ (800386c <MX_GPIO_Init+0xfc>)
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	4a38      	ldr	r2, [pc, #224]	@ (800386c <MX_GPIO_Init+0xfc>)
 800378c:	f043 0320 	orr.w	r3, r3, #32
 8003790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003792:	4b36      	ldr	r3, [pc, #216]	@ (800386c <MX_GPIO_Init+0xfc>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b33      	ldr	r3, [pc, #204]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a2:	4a32      	ldr	r2, [pc, #200]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037aa:	4b30      	ldr	r3, [pc, #192]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b6:	4b2d      	ldr	r3, [pc, #180]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	4a2c      	ldr	r2, [pc, #176]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037bc:	f043 0304 	orr.w	r3, r3, #4
 80037c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037c2:	4b2a      	ldr	r3, [pc, #168]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ce:	4b27      	ldr	r3, [pc, #156]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d2:	4a26      	ldr	r2, [pc, #152]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037da:	4b24      	ldr	r3, [pc, #144]	@ (800386c <MX_GPIO_Init+0xfc>)
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 80037e6:	2200      	movs	r2, #0
 80037e8:	f240 6106 	movw	r1, #1542	@ 0x606
 80037ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037f0:	f001 f90a 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin|CS_Pin, GPIO_PIN_RESET);
 80037f4:	2200      	movs	r2, #0
 80037f6:	f241 0103 	movw	r1, #4099	@ 0x1003
 80037fa:	481d      	ldr	r0, [pc, #116]	@ (8003870 <MX_GPIO_Init+0x100>)
 80037fc:	f001 f904 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003800:	2200      	movs	r2, #0
 8003802:	2140      	movs	r1, #64	@ 0x40
 8003804:	481b      	ldr	r0, [pc, #108]	@ (8003874 <MX_GPIO_Init+0x104>)
 8003806:	f001 f8ff 	bl	8004a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 800380a:	f240 6306 	movw	r3, #1542	@ 0x606
 800380e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003810:	2301      	movs	r3, #1
 8003812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	4619      	mov	r1, r3
 8003822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003826:	f000 ff6d 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin|CS_Pin;
 800382a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800382e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003830:	2301      	movs	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	4619      	mov	r1, r3
 8003842:	480b      	ldr	r0, [pc, #44]	@ (8003870 <MX_GPIO_Init+0x100>)
 8003844:	f000 ff5e 	bl	8004704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003848:	2340      	movs	r3, #64	@ 0x40
 800384a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800384c:	2301      	movs	r3, #1
 800384e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003854:	2300      	movs	r3, #0
 8003856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4619      	mov	r1, r3
 800385e:	4805      	ldr	r0, [pc, #20]	@ (8003874 <MX_GPIO_Init+0x104>)
 8003860:	f000 ff50 	bl	8004704 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003864:	bf00      	nop
 8003866:	3728      	adds	r7, #40	@ 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	48000400 	.word	0x48000400
 8003874:	48000800 	.word	0x48000800

08003878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800387c:	b672      	cpsid	i
}
 800387e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <Error_Handler+0x8>

08003884 <Motor_Init>:
Motor_t motorLeft;
Motor_t motorRight;

void Motor_Init(Motor_t *motor, TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel,
                GPIO_TypeDef *gpio_port1, uint16_t gpio_pin1,
                GPIO_TypeDef *gpio_port2, uint16_t gpio_pin2) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
    motor->pwm_timer = pwm_timer;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	601a      	str	r2, [r3, #0]
    motor->pwm_channel = pwm_channel;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	605a      	str	r2, [r3, #4]
    motor->gpio_port1 = gpio_port1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	609a      	str	r2, [r3, #8]
    motor->gpio_pin1 = gpio_pin1;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8b3a      	ldrh	r2, [r7, #24]
 80038a8:	819a      	strh	r2, [r3, #12]
    motor->gpio_port2 = gpio_port2;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	611a      	str	r2, [r3, #16]
    motor->gpio_pin2 = gpio_pin2;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8c3a      	ldrh	r2, [r7, #32]
 80038b4:	829a      	strh	r2, [r3, #20]

    HAL_TIM_PWM_Start(motor->pwm_timer, motor->pwm_channel);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f003 f877 	bl	80069b4 <HAL_TIM_PWM_Start>
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <Motor_Control>:

void Motor_Control(uint32_t pwm_left, uint8_t dir_left, uint32_t pwm_right, uint8_t dir_right) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	461a      	mov	r2, r3
 80038dc:	460b      	mov	r3, r1
 80038de:	72fb      	strb	r3, [r7, #11]
 80038e0:	4613      	mov	r3, r2
 80038e2:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
    */

    // Motor Esquerdo
    HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	461a      	mov	r2, r3
 80038e8:	2102      	movs	r1, #2
 80038ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038ee:	f001 f88b 	bl	8004a08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	2104      	movs	r1, #4
 8003902:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003906:	f001 f87f 	bl	8004a08 <HAL_GPIO_WritePin>

    // Motor Direito
    HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin,  (GPIO_PinState)(dir_right));
 800390a:	7abb      	ldrb	r3, [r7, #10]
 800390c:	461a      	mov	r2, r3
 800390e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003916:	f001 f877 	bl	8004a08 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 800391a:	7abb      	ldrb	r3, [r7, #10]
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800392c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003930:	f001 f86a 	bl	8004a08 <HAL_GPIO_WritePin>

    // PWM
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 8003934:	4b05      	ldr	r3, [pc, #20]	@ (800394c <Motor_Control+0x7c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <Motor_Control+0x80>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200005c4 	.word	0x200005c4
 8003950:	20000578 	.word	0x20000578

08003954 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_0


void CS_Select (void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8003958:	2200      	movs	r2, #0
 800395a:	2101      	movs	r1, #1
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <CS_Select+0x14>)
 800395e:	f001 f853 	bl	8004a08 <HAL_GPIO_WritePin>
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	48000400 	.word	0x48000400

0800396c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8003970:	2201      	movs	r2, #1
 8003972:	2101      	movs	r1, #1
 8003974:	4802      	ldr	r0, [pc, #8]	@ (8003980 <CS_UnSelect+0x14>)
 8003976:	f001 f847 	bl	8004a08 <HAL_GPIO_WritePin>
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	48000400 	.word	0x48000400

08003984 <CE_Enable>:


void CE_Enable (void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8003988:	2201      	movs	r2, #1
 800398a:	2102      	movs	r1, #2
 800398c:	4802      	ldr	r0, [pc, #8]	@ (8003998 <CE_Enable+0x14>)
 800398e:	f001 f83b 	bl	8004a08 <HAL_GPIO_WritePin>
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	48000400 	.word	0x48000400

0800399c <CE_Disable>:

void CE_Disable (void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80039a0:	2200      	movs	r2, #0
 80039a2:	2102      	movs	r1, #2
 80039a4:	4802      	ldr	r0, [pc, #8]	@ (80039b0 <CE_Disable+0x14>)
 80039a6:	f001 f82f 	bl	8004a08 <HAL_GPIO_WritePin>
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	48000400 	.word	0x48000400

080039b4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	460a      	mov	r2, r1
 80039be:	71fb      	strb	r3, [r7, #7]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	f043 0320 	orr.w	r3, r3, #32
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80039ce:	79bb      	ldrb	r3, [r7, #6]
 80039d0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80039d2:	f7ff ffbf 	bl	8003954 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80039d6:	f107 010c 	add.w	r1, r7, #12
 80039da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039de:	2202      	movs	r2, #2
 80039e0:	4804      	ldr	r0, [pc, #16]	@ (80039f4 <nrf24_WriteReg+0x40>)
 80039e2:	f002 f8a6 	bl	8005b32 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80039e6:	f7ff ffc1 	bl	800396c <CS_UnSelect>
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200004b0 	.word	0x200004b0

080039f8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	f043 0320 	orr.w	r3, r3, #32
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8003a10:	f7ff ffa0 	bl	8003954 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8003a14:	f107 0114 	add.w	r1, r7, #20
 8003a18:	2364      	movs	r3, #100	@ 0x64
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4808      	ldr	r0, [pc, #32]	@ (8003a40 <nrf24_WriteRegMulti+0x48>)
 8003a1e:	f002 f888 	bl	8005b32 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	4804      	ldr	r0, [pc, #16]	@ (8003a40 <nrf24_WriteRegMulti+0x48>)
 8003a2e:	f002 f880 	bl	8005b32 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8003a32:	f7ff ff9b 	bl	800396c <CS_UnSelect>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200004b0 	.word	0x200004b0

08003a44 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8003a52:	f7ff ff7f 	bl	8003954 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8003a56:	1df9      	adds	r1, r7, #7
 8003a58:	2364      	movs	r3, #100	@ 0x64
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4808      	ldr	r0, [pc, #32]	@ (8003a80 <nrf24_ReadReg+0x3c>)
 8003a5e:	f002 f868 	bl	8005b32 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8003a62:	f107 010f 	add.w	r1, r7, #15
 8003a66:	2364      	movs	r3, #100	@ 0x64
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4805      	ldr	r0, [pc, #20]	@ (8003a80 <nrf24_ReadReg+0x3c>)
 8003a6c:	f002 f9d7 	bl	8005e1e <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8003a70:	f7ff ff7c 	bl	800396c <CS_UnSelect>

	return data;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200004b0 	.word	0x200004b0

08003a84 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8003a8e:	f7ff ff61 	bl	8003954 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8003a92:	1df9      	adds	r1, r7, #7
 8003a94:	2364      	movs	r3, #100	@ 0x64
 8003a96:	2201      	movs	r2, #1
 8003a98:	4804      	ldr	r0, [pc, #16]	@ (8003aac <nrfsendCmd+0x28>)
 8003a9a:	f002 f84a 	bl	8005b32 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8003a9e:	f7ff ff65 	bl	800396c <CS_UnSelect>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200004b0 	.word	0x200004b0

08003ab0 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b07      	cmp	r3, #7
 8003abe:	d104      	bne.n	8003aca <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	2007      	movs	r0, #7
 8003ac4:	f7ff ff76 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8003ac8:	e090      	b.n	8003bec <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b17      	cmp	r3, #23
 8003ace:	d104      	bne.n	8003ada <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8003ad0:	2111      	movs	r1, #17
 8003ad2:	2017      	movs	r0, #23
 8003ad4:	f7ff ff6e 	bl	80039b4 <nrf24_WriteReg>
}
 8003ad8:	e088      	b.n	8003bec <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8003ada:	2108      	movs	r1, #8
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7ff ff69 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8003ae2:	213f      	movs	r1, #63	@ 0x3f
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff ff65 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8003aea:	2103      	movs	r1, #3
 8003aec:	2002      	movs	r0, #2
 8003aee:	f7ff ff61 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8003af2:	2103      	movs	r1, #3
 8003af4:	2003      	movs	r0, #3
 8003af6:	f7ff ff5d 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8003afa:	2103      	movs	r1, #3
 8003afc:	2004      	movs	r0, #4
 8003afe:	f7ff ff59 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8003b02:	2102      	movs	r1, #2
 8003b04:	2005      	movs	r0, #5
 8003b06:	f7ff ff55 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8003b0a:	210e      	movs	r1, #14
 8003b0c:	2006      	movs	r0, #6
 8003b0e:	f7ff ff51 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8003b12:	2100      	movs	r1, #0
 8003b14:	2007      	movs	r0, #7
 8003b16:	f7ff ff4d 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	2008      	movs	r0, #8
 8003b1e:	f7ff ff49 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8003b22:	2100      	movs	r1, #0
 8003b24:	2009      	movs	r0, #9
 8003b26:	f7ff ff45 	bl	80039b4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8003b2a:	4a32      	ldr	r2, [pc, #200]	@ (8003bf4 <nrf24_reset+0x144>)
 8003b2c:	f107 0318 	add.w	r3, r7, #24
 8003b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b34:	6018      	str	r0, [r3, #0]
 8003b36:	3304      	adds	r3, #4
 8003b38:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8003b3a:	f107 0318 	add.w	r3, r7, #24
 8003b3e:	2205      	movs	r2, #5
 8003b40:	4619      	mov	r1, r3
 8003b42:	200a      	movs	r0, #10
 8003b44:	f7ff ff58 	bl	80039f8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8003b48:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <nrf24_reset+0x148>)
 8003b4a:	f107 0310 	add.w	r3, r7, #16
 8003b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b52:	6018      	str	r0, [r3, #0]
 8003b54:	3304      	adds	r3, #4
 8003b56:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8003b58:	f107 0310 	add.w	r3, r7, #16
 8003b5c:	2205      	movs	r2, #5
 8003b5e:	4619      	mov	r1, r3
 8003b60:	200b      	movs	r0, #11
 8003b62:	f7ff ff49 	bl	80039f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8003b66:	21c3      	movs	r1, #195	@ 0xc3
 8003b68:	200c      	movs	r0, #12
 8003b6a:	f7ff ff23 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8003b6e:	21c4      	movs	r1, #196	@ 0xc4
 8003b70:	200d      	movs	r0, #13
 8003b72:	f7ff ff1f 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8003b76:	21c5      	movs	r1, #197	@ 0xc5
 8003b78:	200e      	movs	r0, #14
 8003b7a:	f7ff ff1b 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8003b7e:	21c6      	movs	r1, #198	@ 0xc6
 8003b80:	200f      	movs	r0, #15
 8003b82:	f7ff ff17 	bl	80039b4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <nrf24_reset+0x144>)
 8003b88:	f107 0308 	add.w	r3, r7, #8
 8003b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b90:	6018      	str	r0, [r3, #0]
 8003b92:	3304      	adds	r3, #4
 8003b94:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8003b96:	f107 0308 	add.w	r3, r7, #8
 8003b9a:	2205      	movs	r2, #5
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	2010      	movs	r0, #16
 8003ba0:	f7ff ff2a 	bl	80039f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2011      	movs	r0, #17
 8003ba8:	f7ff ff04 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8003bac:	2100      	movs	r1, #0
 8003bae:	2012      	movs	r0, #18
 8003bb0:	f7ff ff00 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2013      	movs	r0, #19
 8003bb8:	f7ff fefc 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	2014      	movs	r0, #20
 8003bc0:	f7ff fef8 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	2015      	movs	r0, #21
 8003bc8:	f7ff fef4 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8003bcc:	2100      	movs	r1, #0
 8003bce:	2016      	movs	r0, #22
 8003bd0:	f7ff fef0 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8003bd4:	2111      	movs	r1, #17
 8003bd6:	2017      	movs	r0, #23
 8003bd8:	f7ff feec 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8003bdc:	2100      	movs	r1, #0
 8003bde:	201c      	movs	r0, #28
 8003be0:	f7ff fee8 	bl	80039b4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8003be4:	2100      	movs	r1, #0
 8003be6:	201d      	movs	r0, #29
 8003be8:	f7ff fee4 	bl	80039b4 <nrf24_WriteReg>
}
 8003bec:	bf00      	nop
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	0800e34c 	.word	0x0800e34c
 8003bf8:	0800e354 	.word	0x0800e354

08003bfc <NRF24_Init>:




void NRF24_Init (void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8003c00:	f7ff fecc 	bl	800399c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7ff ff53 	bl	8003ab0 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7ff fed1 	bl	80039b4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8003c12:	2100      	movs	r1, #0
 8003c14:	2001      	movs	r0, #1
 8003c16:	f7ff fecd 	bl	80039b4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f7ff fec9 	bl	80039b4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8003c22:	2103      	movs	r1, #3
 8003c24:	2003      	movs	r0, #3
 8003c26:	f7ff fec5 	bl	80039b4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2004      	movs	r0, #4
 8003c2e:	f7ff fec1 	bl	80039b4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8003c32:	2100      	movs	r1, #0
 8003c34:	2005      	movs	r0, #5
 8003c36:	f7ff febd 	bl	80039b4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8003c3a:	210e      	movs	r1, #14
 8003c3c:	2006      	movs	r0, #6
 8003c3e:	f7ff feb9 	bl	80039b4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8003c42:	f7ff fe9f 	bl	8003984 <CE_Enable>

}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8003c56:	f7ff fea1 	bl	800399c <CE_Disable>

	nrf24_reset (STATUS);
 8003c5a:	2007      	movs	r0, #7
 8003c5c:	f7ff ff28 	bl	8003ab0 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	4619      	mov	r1, r3
 8003c64:	2005      	movs	r0, #5
 8003c66:	f7ff fea5 	bl	80039b4 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f7ff feea 	bl	8003a44 <nrf24_ReadReg>
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	2002      	movs	r0, #2
 8003c82:	f7ff fe97 	bl	80039b4 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8003c86:	2205      	movs	r2, #5
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	200b      	movs	r0, #11
 8003c8c:	f7ff feb4 	bl	80039f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8003c90:	21ee      	movs	r1, #238	@ 0xee
 8003c92:	200c      	movs	r0, #12
 8003c94:	f7ff fe8e 	bl	80039b4 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8003c98:	2120      	movs	r1, #32
 8003c9a:	2013      	movs	r0, #19
 8003c9c:	f7ff fe8a 	bl	80039b4 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7ff fecf 	bl	8003a44 <nrf24_ReadReg>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8003caa:	7bbb      	ldrb	r3, [r7, #14]
 8003cac:	f043 0303 	orr.w	r3, r3, #3
 8003cb0:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8003cb2:	7bbb      	ldrb	r3, [r7, #14]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f7ff fe7c 	bl	80039b4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8003cbc:	f7ff fe62 	bl	8003984 <CE_Enable>
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8003cd0:	2007      	movs	r0, #7
 8003cd2:	f7ff feb7 	bl	8003a44 <nrf24_ReadReg>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <isDataAvailable+0x34>
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8003cf0:	2140      	movs	r1, #64	@ 0x40
 8003cf2:	2007      	movs	r0, #7
 8003cf4:	f7ff fe5e 	bl	80039b4 <nrf24_WriteReg>

		return 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <isDataAvailable+0x36>
	}

	return 0;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8003d14:	f7ff fe1e 	bl	8003954 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8003d18:	2361      	movs	r3, #97	@ 0x61
 8003d1a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8003d1c:	f107 010f 	add.w	r1, r7, #15
 8003d20:	2364      	movs	r3, #100	@ 0x64
 8003d22:	2201      	movs	r2, #1
 8003d24:	480c      	ldr	r0, [pc, #48]	@ (8003d58 <NRF24_Receive+0x50>)
 8003d26:	f001 ff04 	bl	8005b32 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8003d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d2e:	2220      	movs	r2, #32
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4809      	ldr	r0, [pc, #36]	@ (8003d58 <NRF24_Receive+0x50>)
 8003d34:	f002 f873 	bl	8005e1e <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8003d38:	f7ff fe18 	bl	800396c <CS_UnSelect>

	HAL_Delay(1);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f000 fbdb 	bl	80044f8 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8003d42:	23e2      	movs	r3, #226	@ 0xe2
 8003d44:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fe9b 	bl	8003a84 <nrfsendCmd>
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200004b0 	.word	0x200004b0

08003d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d62:	4b0f      	ldr	r3, [pc, #60]	@ (8003da0 <HAL_MspInit+0x44>)
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	4a0e      	ldr	r2, [pc, #56]	@ (8003da0 <HAL_MspInit+0x44>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <HAL_MspInit+0x44>)
 8003d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <HAL_MspInit+0x44>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	4a08      	ldr	r2, [pc, #32]	@ (8003da0 <HAL_MspInit+0x44>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_MspInit+0x44>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003d92:	f000 fef5 	bl	8004b80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000

08003da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	@ 0x30
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 031c 	add.w	r3, r7, #28
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a3d      	ldr	r2, [pc, #244]	@ (8003eb8 <HAL_SPI_MspInit+0x114>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d145      	bne.n	8003e52 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dca:	4a3c      	ldr	r2, [pc, #240]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003dcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003de2:	4a36      	ldr	r2, [pc, #216]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dea:	4b34      	ldr	r3, [pc, #208]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df6:	4b31      	ldr	r3, [pc, #196]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfa:	4a30      	ldr	r2, [pc, #192]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e02:	4b2e      	ldr	r3, [pc, #184]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8003e0e:	23a0      	movs	r3, #160	@ 0xa0
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e1e:	2305      	movs	r3, #5
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e22:	f107 031c 	add.w	r3, r7, #28
 8003e26:	4619      	mov	r1, r3
 8003e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e2c:	f000 fc6a 	bl	8004704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8003e30:	2310      	movs	r3, #16
 8003e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e40:	2305      	movs	r3, #5
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	4619      	mov	r1, r3
 8003e4a:	481d      	ldr	r0, [pc, #116]	@ (8003ec0 <HAL_SPI_MspInit+0x11c>)
 8003e4c:	f000 fc5a 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e50:	e02d      	b.n	8003eae <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec4 <HAL_SPI_MspInit+0x120>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d128      	bne.n	8003eae <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e5c:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e60:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003e62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e68:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e74:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e78:	4a10      	ldr	r2, [pc, #64]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003e7a:	f043 0302 	orr.w	r3, r3, #2
 8003e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e80:	4b0e      	ldr	r3, [pc, #56]	@ (8003ebc <HAL_SPI_MspInit+0x118>)
 8003e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e8c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e92:	2302      	movs	r3, #2
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e9e:	2305      	movs	r3, #5
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea2:	f107 031c 	add.w	r3, r7, #28
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4805      	ldr	r0, [pc, #20]	@ (8003ec0 <HAL_SPI_MspInit+0x11c>)
 8003eaa:	f000 fc2b 	bl	8004704 <HAL_GPIO_Init>
}
 8003eae:	bf00      	nop
 8003eb0:	3730      	adds	r7, #48	@ 0x30
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40013000 	.word	0x40013000
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	48000400 	.word	0x48000400
 8003ec4:	40003800 	.word	0x40003800

08003ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	@ (8003f24 <HAL_TIM_Base_MspInit+0x5c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eda:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_TIM_Base_MspInit+0x60>)
 8003edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ede:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <HAL_TIM_Base_MspInit+0x60>)
 8003ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ee4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ee6:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <HAL_TIM_Base_MspInit+0x60>)
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ef2:	e010      	b.n	8003f16 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efc:	d10b      	bne.n	8003f16 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003efe:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_TIM_Base_MspInit+0x60>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f02:	4a09      	ldr	r2, [pc, #36]	@ (8003f28 <HAL_TIM_Base_MspInit+0x60>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f0a:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <HAL_TIM_Base_MspInit+0x60>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40021000 	.word	0x40021000

08003f2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	@ 0x30
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	f107 031c 	add.w	r3, r7, #28
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2f      	ldr	r2, [pc, #188]	@ (8004008 <HAL_TIM_Encoder_MspInit+0xdc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d129      	bne.n	8003fa2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f52:	4a2e      	ldr	r2, [pc, #184]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f66:	4b29      	ldr	r3, [pc, #164]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6a:	4a28      	ldr	r2, [pc, #160]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f72:	4b26      	ldr	r3, [pc, #152]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 8003f7e:	2350      	movs	r3, #80	@ 0x50
 8003f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f82:	2302      	movs	r3, #2
 8003f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f92:	f107 031c 	add.w	r3, r7, #28
 8003f96:	4619      	mov	r1, r3
 8003f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f9c:	f000 fbb2 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003fa0:	e02e      	b.n	8004000 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8004010 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d129      	bne.n	8004000 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fac:	4b17      	ldr	r3, [pc, #92]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	4a16      	ldr	r2, [pc, #88]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc4:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc8:	4a10      	ldr	r2, [pc, #64]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <HAL_TIM_Encoder_MspInit+0xe0>)
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 8003fdc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003fee:	230a      	movs	r3, #10
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff2:	f107 031c 	add.w	r3, r7, #28
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ffc:	f000 fb82 	bl	8004704 <HAL_GPIO_Init>
}
 8004000:	bf00      	nop
 8004002:	3730      	adds	r7, #48	@ 0x30
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40000400 	.word	0x40000400
 800400c:	40021000 	.word	0x40021000
 8004010:	40000800 	.word	0x40000800

08004014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	@ 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a23      	ldr	r2, [pc, #140]	@ (80040c0 <HAL_TIM_MspPostInit+0xac>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d11e      	bne.n	8004074 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004036:	4b23      	ldr	r3, [pc, #140]	@ (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	4a22      	ldr	r2, [pc, #136]	@ (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004042:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 800404e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800405c:	2302      	movs	r3, #2
 800405e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004060:	2306      	movs	r3, #6
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4619      	mov	r1, r3
 800406a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800406e:	f000 fb49 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004072:	e021      	b.n	80040b8 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407c:	d11c      	bne.n	80040b8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407e:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004082:	4a10      	ldr	r2, [pc, #64]	@ (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800408a:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <HAL_TIM_MspPostInit+0xb0>)
 800408c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 8004096:	2301      	movs	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a2:	2300      	movs	r3, #0
 80040a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80040a6:	2301      	movs	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 80040aa:	f107 0314 	add.w	r3, r7, #20
 80040ae:	4619      	mov	r1, r3
 80040b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040b4:	f000 fb26 	bl	8004704 <HAL_GPIO_Init>
}
 80040b8:	bf00      	nop
 80040ba:	3728      	adds	r7, #40	@ 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40021000 	.word	0x40021000

080040c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b09c      	sub	sp, #112	@ 0x70
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040e0:	f107 0318 	add.w	r3, r7, #24
 80040e4:	2244      	movs	r2, #68	@ 0x44
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f005 fc98 	bl	8009a1e <memset>
  if(huart->Instance==USART1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2c      	ldr	r2, [pc, #176]	@ (80041a4 <HAL_UART_MspInit+0xdc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d151      	bne.n	800419c <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040f8:	2301      	movs	r3, #1
 80040fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004100:	f107 0318 	add.w	r3, r7, #24
 8004104:	4618      	mov	r0, r3
 8004106:	f001 fa79 	bl	80055fc <HAL_RCCEx_PeriphCLKConfig>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004110:	f7ff fbb2 	bl	8003878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004114:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 8004116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004118:	4a23      	ldr	r2, [pc, #140]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 800411a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800411e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004120:	4b21      	ldr	r3, [pc, #132]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 8004122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800412c:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 800412e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004130:	4a1d      	ldr	r2, [pc, #116]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004138:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 800413a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004144:	4b18      	ldr	r3, [pc, #96]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 8004146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004148:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004150:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <HAL_UART_MspInit+0xe0>)
 8004152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800415c:	2310      	movs	r3, #16
 800415e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004168:	2300      	movs	r3, #0
 800416a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800416c:	2307      	movs	r3, #7
 800416e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8004170:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004174:	4619      	mov	r1, r3
 8004176:	480d      	ldr	r0, [pc, #52]	@ (80041ac <HAL_UART_MspInit+0xe4>)
 8004178:	f000 fac4 	bl	8004704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 800417c:	2380      	movs	r3, #128	@ 0x80
 800417e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004188:	2300      	movs	r3, #0
 800418a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800418c:	2307      	movs	r3, #7
 800418e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8004190:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004194:	4619      	mov	r1, r3
 8004196:	4806      	ldr	r0, [pc, #24]	@ (80041b0 <HAL_UART_MspInit+0xe8>)
 8004198:	f000 fab4 	bl	8004704 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800419c:	bf00      	nop
 800419e:	3770      	adds	r7, #112	@ 0x70
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40013800 	.word	0x40013800
 80041a8:	40021000 	.word	0x40021000
 80041ac:	48000800 	.word	0x48000800
 80041b0:	48000400 	.word	0x48000400

080041b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <NMI_Handler+0x4>

080041bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041c0:	bf00      	nop
 80041c2:	e7fd      	b.n	80041c0 <HardFault_Handler+0x4>

080041c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c8:	bf00      	nop
 80041ca:	e7fd      	b.n	80041c8 <MemManage_Handler+0x4>

080041cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <BusFault_Handler+0x4>

080041d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <UsageFault_Handler+0x4>

080041dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800420a:	f000 f957 	bl	80044bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}

08004212 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0
  return 1;
 8004216:	2301      	movs	r3, #1
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <_kill>:

int _kill(int pid, int sig)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800422c:	f005 fc4a 	bl	8009ac4 <__errno>
 8004230:	4603      	mov	r3, r0
 8004232:	2216      	movs	r2, #22
 8004234:	601a      	str	r2, [r3, #0]
  return -1;
 8004236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <_exit>:

void _exit (int status)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800424a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffe7 	bl	8004222 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <_exit+0x12>

08004258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e00a      	b.n	8004280 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800426a:	f3af 8000 	nop.w
 800426e:	4601      	mov	r1, r0
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	60ba      	str	r2, [r7, #8]
 8004276:	b2ca      	uxtb	r2, r1
 8004278:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	3301      	adds	r3, #1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	dbf0      	blt.n	800426a <_read+0x12>
  }

  return len;
 8004288:	687b      	ldr	r3, [r7, #4]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b086      	sub	sp, #24
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e009      	b.n	80042b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	60ba      	str	r2, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	3301      	adds	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	dbf1      	blt.n	80042a4 <_write+0x12>
  }
  return len;
 80042c0:	687b      	ldr	r3, [r7, #4]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_close>:

int _close(int file)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042f2:	605a      	str	r2, [r3, #4]
  return 0;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_isatty>:

int _isatty(int file)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800430a:	2301      	movs	r3, #1
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800433c:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <_sbrk+0x5c>)
 800433e:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <_sbrk+0x60>)
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004348:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <_sbrk+0x64>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004350:	4b11      	ldr	r3, [pc, #68]	@ (8004398 <_sbrk+0x64>)
 8004352:	4a12      	ldr	r2, [pc, #72]	@ (800439c <_sbrk+0x68>)
 8004354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <_sbrk+0x64>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	429a      	cmp	r2, r3
 8004362:	d207      	bcs.n	8004374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004364:	f005 fbae 	bl	8009ac4 <__errno>
 8004368:	4603      	mov	r3, r0
 800436a:	220c      	movs	r2, #12
 800436c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004372:	e009      	b.n	8004388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004374:	4b08      	ldr	r3, [pc, #32]	@ (8004398 <_sbrk+0x64>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437a:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <_sbrk+0x64>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <_sbrk+0x64>)
 8004384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004386:	68fb      	ldr	r3, [r7, #12]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20008000 	.word	0x20008000
 8004394:	00000400 	.word	0x00000400
 8004398:	2000076c 	.word	0x2000076c
 800439c:	200008c0 	.word	0x200008c0

080043a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <SystemInit+0x20>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	4a05      	ldr	r2, [pc, #20]	@ (80043c0 <SystemInit+0x20>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 80043c4:	480d      	ldr	r0, [pc, #52]	@ (80043fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80043c8:	f7ff ffea 	bl	80043a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043cc:	480c      	ldr	r0, [pc, #48]	@ (8004400 <LoopForever+0x6>)
  ldr r1, =_edata
 80043ce:	490d      	ldr	r1, [pc, #52]	@ (8004404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004408 <LoopForever+0xe>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80043d4:	e002      	b.n	80043dc <LoopCopyDataInit>

080043d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043da:	3304      	adds	r3, #4

080043dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e0:	d3f9      	bcc.n	80043d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043e2:	4a0a      	ldr	r2, [pc, #40]	@ (800440c <LoopForever+0x12>)
  ldr r4, =_ebss
 80043e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004410 <LoopForever+0x16>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e8:	e001      	b.n	80043ee <LoopFillZerobss>

080043ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ec:	3204      	adds	r2, #4

080043ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f0:	d3fb      	bcc.n	80043ea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80043f2:	f005 fb6d 	bl	8009ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043f6:	f7fe febb 	bl	8003170 <main>

080043fa <LoopForever>:

LoopForever:
    b LoopForever
 80043fa:	e7fe      	b.n	80043fa <LoopForever>
 ldr   r0, =_estack
 80043fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004404:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8004408:	0800ec10 	.word	0x0800ec10
  ldr r2, =_sbss
 800440c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004410:	200008c0 	.word	0x200008c0

08004414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC1_2_IRQHandler>

08004416 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004420:	2003      	movs	r0, #3
 8004422:	f000 f93d 	bl	80046a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004426:	200f      	movs	r0, #15
 8004428:	f000 f80e 	bl	8004448 <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	71fb      	strb	r3, [r7, #7]
 8004436:	e001      	b.n	800443c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004438:	f7ff fc90 	bl	8003d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800443c:	79fb      	ldrb	r3, [r7, #7]

}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004454:	4b16      	ldr	r3, [pc, #88]	@ (80044b0 <HAL_InitTick+0x68>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800445c:	4b15      	ldr	r3, [pc, #84]	@ (80044b4 <HAL_InitTick+0x6c>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b13      	ldr	r3, [pc, #76]	@ (80044b0 <HAL_InitTick+0x68>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004468:	fbb1 f3f3 	udiv	r3, r1, r3
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f93a 	bl	80046ea <HAL_SYSTICK_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b0f      	cmp	r3, #15
 8004480:	d809      	bhi.n	8004496 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004482:	2200      	movs	r2, #0
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800448a:	f000 f914 	bl	80046b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_InitTick+0x70>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e007      	b.n	80044a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	e004      	b.n	80044a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	e001      	b.n	80044a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000038 	.word	0x20000038
 80044b4:	20000030 	.word	0x20000030
 80044b8:	20000034 	.word	0x20000034

080044bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <HAL_IncTick+0x1c>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b05      	ldr	r3, [pc, #20]	@ (80044dc <HAL_IncTick+0x20>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4413      	add	r3, r2
 80044ca:	4a03      	ldr	r2, [pc, #12]	@ (80044d8 <HAL_IncTick+0x1c>)
 80044cc:	6013      	str	r3, [r2, #0]
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	20000770 	.word	0x20000770
 80044dc:	20000038 	.word	0x20000038

080044e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return uwTick;
 80044e4:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <HAL_GetTick+0x14>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	20000770 	.word	0x20000770

080044f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004500:	f7ff ffee 	bl	80044e0 <HAL_GetTick>
 8004504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004510:	d004      	beq.n	800451c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004512:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <HAL_Delay+0x40>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4413      	add	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800451c:	bf00      	nop
 800451e:	f7ff ffdf 	bl	80044e0 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	429a      	cmp	r2, r3
 800452c:	d8f7      	bhi.n	800451e <HAL_Delay+0x26>
  {
  }
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000038 	.word	0x20000038

0800453c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <__NVIC_SetPriorityGrouping+0x44>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004558:	4013      	ands	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800456e:	4a04      	ldr	r2, [pc, #16]	@ (8004580 <__NVIC_SetPriorityGrouping+0x44>)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	60d3      	str	r3, [r2, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <__NVIC_GetPriorityGrouping+0x18>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	f003 0307 	and.w	r3, r3, #7
}
 8004592:	4618      	mov	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	db0a      	blt.n	80045ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	490c      	ldr	r1, [pc, #48]	@ (80045ec <__NVIC_SetPriority+0x4c>)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	0112      	lsls	r2, r2, #4
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	440b      	add	r3, r1
 80045c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c8:	e00a      	b.n	80045e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4908      	ldr	r1, [pc, #32]	@ (80045f0 <__NVIC_SetPriority+0x50>)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	3b04      	subs	r3, #4
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	440b      	add	r3, r1
 80045de:	761a      	strb	r2, [r3, #24]
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000e100 	.word	0xe000e100
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b089      	sub	sp, #36	@ 0x24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f1c3 0307 	rsb	r3, r3, #7
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf28      	it	cs
 8004612:	2304      	movcs	r3, #4
 8004614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	3304      	adds	r3, #4
 800461a:	2b06      	cmp	r3, #6
 800461c:	d902      	bls.n	8004624 <NVIC_EncodePriority+0x30>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3b03      	subs	r3, #3
 8004622:	e000      	b.n	8004626 <NVIC_EncodePriority+0x32>
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43da      	mvns	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	401a      	ands	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800463c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43d9      	mvns	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800464c:	4313      	orrs	r3, r2
         );
}
 800464e:	4618      	mov	r0, r3
 8004650:	3724      	adds	r7, #36	@ 0x24
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800466c:	d301      	bcc.n	8004672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800466e:	2301      	movs	r3, #1
 8004670:	e00f      	b.n	8004692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004672:	4a0a      	ldr	r2, [pc, #40]	@ (800469c <SysTick_Config+0x40>)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800467a:	210f      	movs	r1, #15
 800467c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004680:	f7ff ff8e 	bl	80045a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <SysTick_Config+0x40>)
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800468a:	4b04      	ldr	r3, [pc, #16]	@ (800469c <SysTick_Config+0x40>)
 800468c:	2207      	movs	r2, #7
 800468e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	e000e010 	.word	0xe000e010

080046a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ff47 	bl	800453c <__NVIC_SetPriorityGrouping>
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4603      	mov	r3, r0
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046c4:	f7ff ff5e 	bl	8004584 <__NVIC_GetPriorityGrouping>
 80046c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7ff ff90 	bl	80045f4 <NVIC_EncodePriority>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff5f 	bl	80045a0 <__NVIC_SetPriority>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff ffb2 	bl	800465c <SysTick_Config>
 80046f8:	4603      	mov	r3, r0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004712:	e15a      	b.n	80049ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2101      	movs	r1, #1
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	4013      	ands	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 814c 	beq.w	80049c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d005      	beq.n	8004744 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004740:	2b02      	cmp	r3, #2
 8004742:	d130      	bne.n	80047a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	2203      	movs	r2, #3
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800477a:	2201      	movs	r2, #1
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f003 0201 	and.w	r2, r3, #1
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d017      	beq.n	80047e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	2203      	movs	r2, #3
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d123      	bne.n	8004836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	08da      	lsrs	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	220f      	movs	r2, #15
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	08da      	lsrs	r2, r3, #3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3208      	adds	r2, #8
 8004830:	6939      	ldr	r1, [r7, #16]
 8004832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4013      	ands	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0203 	and.w	r2, r3, #3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80a6 	beq.w	80049c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004878:	4b5b      	ldr	r3, [pc, #364]	@ (80049e8 <HAL_GPIO_Init+0x2e4>)
 800487a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487c:	4a5a      	ldr	r2, [pc, #360]	@ (80049e8 <HAL_GPIO_Init+0x2e4>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6613      	str	r3, [r2, #96]	@ 0x60
 8004884:	4b58      	ldr	r3, [pc, #352]	@ (80049e8 <HAL_GPIO_Init+0x2e4>)
 8004886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004890:	4a56      	ldr	r2, [pc, #344]	@ (80049ec <HAL_GPIO_Init+0x2e8>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3302      	adds	r3, #2
 8004898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	220f      	movs	r2, #15
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048ba:	d01f      	beq.n	80048fc <HAL_GPIO_Init+0x1f8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a4c      	ldr	r2, [pc, #304]	@ (80049f0 <HAL_GPIO_Init+0x2ec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d019      	beq.n	80048f8 <HAL_GPIO_Init+0x1f4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a4b      	ldr	r2, [pc, #300]	@ (80049f4 <HAL_GPIO_Init+0x2f0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d013      	beq.n	80048f4 <HAL_GPIO_Init+0x1f0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a4a      	ldr	r2, [pc, #296]	@ (80049f8 <HAL_GPIO_Init+0x2f4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00d      	beq.n	80048f0 <HAL_GPIO_Init+0x1ec>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a49      	ldr	r2, [pc, #292]	@ (80049fc <HAL_GPIO_Init+0x2f8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <HAL_GPIO_Init+0x1e8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a48      	ldr	r2, [pc, #288]	@ (8004a00 <HAL_GPIO_Init+0x2fc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_GPIO_Init+0x1e4>
 80048e4:	2305      	movs	r3, #5
 80048e6:	e00a      	b.n	80048fe <HAL_GPIO_Init+0x1fa>
 80048e8:	2306      	movs	r3, #6
 80048ea:	e008      	b.n	80048fe <HAL_GPIO_Init+0x1fa>
 80048ec:	2304      	movs	r3, #4
 80048ee:	e006      	b.n	80048fe <HAL_GPIO_Init+0x1fa>
 80048f0:	2303      	movs	r3, #3
 80048f2:	e004      	b.n	80048fe <HAL_GPIO_Init+0x1fa>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e002      	b.n	80048fe <HAL_GPIO_Init+0x1fa>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_GPIO_Init+0x1fa>
 80048fc:	2300      	movs	r3, #0
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	f002 0203 	and.w	r2, r2, #3
 8004904:	0092      	lsls	r2, r2, #2
 8004906:	4093      	lsls	r3, r2
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800490e:	4937      	ldr	r1, [pc, #220]	@ (80049ec <HAL_GPIO_Init+0x2e8>)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800491c:	4b39      	ldr	r3, [pc, #228]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	43db      	mvns	r3, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004940:	4a30      	ldr	r2, [pc, #192]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004946:	4b2f      	ldr	r3, [pc, #188]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	43db      	mvns	r3, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800496a:	4a26      	ldr	r2, [pc, #152]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004970:	4b24      	ldr	r3, [pc, #144]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	43db      	mvns	r3, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004994:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800499a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049be:	4a11      	ldr	r2, [pc, #68]	@ (8004a04 <HAL_GPIO_Init+0x300>)
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	3301      	adds	r3, #1
 80049c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f47f ae9d 	bne.w	8004714 <HAL_GPIO_Init+0x10>
  }
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010000 	.word	0x40010000
 80049f0:	48000400 	.word	0x48000400
 80049f4:	48000800 	.word	0x48000800
 80049f8:	48000c00 	.word	0x48000c00
 80049fc:	48001000 	.word	0x48001000
 8004a00:	48001400 	.word	0x48001400
 8004a04:	40010400 	.word	0x40010400

08004a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	807b      	strh	r3, [r7, #2]
 8004a14:	4613      	mov	r3, r2
 8004a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a18:	787b      	ldrb	r3, [r7, #1]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a1e:	887a      	ldrh	r2, [r7, #2]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a24:	e002      	b.n	8004a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d141      	bne.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a46:	4b4b      	ldr	r3, [pc, #300]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d131      	bne.n	8004ab8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a54:	4b47      	ldr	r3, [pc, #284]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a5a:	4a46      	ldr	r2, [pc, #280]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a64:	4b43      	ldr	r3, [pc, #268]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a6c:	4a41      	ldr	r2, [pc, #260]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a74:	4b40      	ldr	r3, [pc, #256]	@ (8004b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2232      	movs	r2, #50	@ 0x32
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	0c9b      	lsrs	r3, r3, #18
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a8a:	e002      	b.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a92:	4b38      	ldr	r3, [pc, #224]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9e:	d102      	bne.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f2      	bne.n	8004a8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa6:	4b33      	ldr	r3, [pc, #204]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab2:	d158      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e057      	b.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abe:	4a2d      	ldr	r2, [pc, #180]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ac8:	e04d      	b.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad0:	d141      	bne.n	8004b56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ad2:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ade:	d131      	bne.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ae0:	4b24      	ldr	r3, [pc, #144]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ae6:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004aec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004af0:	4b20      	ldr	r3, [pc, #128]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004af8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b00:	4b1d      	ldr	r3, [pc, #116]	@ (8004b78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2232      	movs	r2, #50	@ 0x32
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004b7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	0c9b      	lsrs	r3, r3, #18
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b16:	e002      	b.n	8004b1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b1e:	4b15      	ldr	r3, [pc, #84]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2a:	d102      	bne.n	8004b32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f2      	bne.n	8004b18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b32:	4b10      	ldr	r3, [pc, #64]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b3e:	d112      	bne.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e011      	b.n	8004b68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b54:	e007      	b.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b56:	4b07      	ldr	r3, [pc, #28]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b5e:	4a05      	ldr	r2, [pc, #20]	@ (8004b74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40007000 	.word	0x40007000
 8004b78:	20000030 	.word	0x20000030
 8004b7c:	431bde83 	.word	0x431bde83

08004b80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b8e:	6093      	str	r3, [r2, #8]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40007000 	.word	0x40007000

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e2fe      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bbe:	4b97      	ldr	r3, [pc, #604]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc8:	4b94      	ldr	r3, [pc, #592]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_OscConfig+0x3e>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_OscConfig+0x44>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b8d      	ldr	r3, [pc, #564]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e2d9      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x74>
 8004c06:	4b85      	ldr	r3, [pc, #532]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a84      	ldr	r2, [pc, #528]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a7e      	ldr	r2, [pc, #504]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a7b      	ldr	r2, [pc, #492]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c38:	4b78      	ldr	r3, [pc, #480]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a77      	ldr	r2, [pc, #476]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b75      	ldr	r3, [pc, #468]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a74      	ldr	r2, [pc, #464]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7ff fc42 	bl	80044e0 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c60:	f7ff fc3e 	bl	80044e0 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	@ 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e29e      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c72:	4b6a      	ldr	r3, [pc, #424]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7ff fc2e 	bl	80044e0 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7ff fc2a 	bl	80044e0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e28a      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c9a:	4b60      	ldr	r3, [pc, #384]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d075      	beq.n	8004da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	4b59      	ldr	r3, [pc, #356]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc0:	4b56      	ldr	r3, [pc, #344]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x136>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d002      	beq.n	8004cdc <HAL_RCC_OscConfig+0x13c>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d11f      	bne.n	8004d1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x154>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e25d      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	4946      	ldr	r1, [pc, #280]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d08:	4b45      	ldr	r3, [pc, #276]	@ (8004e20 <HAL_RCC_OscConfig+0x280>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fb9b 	bl	8004448 <HAL_InitTick>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d043      	beq.n	8004da0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e249      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d023      	beq.n	8004d6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d24:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a3c      	ldr	r2, [pc, #240]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7ff fbd6 	bl	80044e0 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d38:	f7ff fbd2 	bl	80044e0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e232      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4a:	4b34      	ldr	r3, [pc, #208]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b31      	ldr	r3, [pc, #196]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	061b      	lsls	r3, r3, #24
 8004d64:	492d      	ldr	r1, [pc, #180]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]
 8004d6a:	e01a      	b.n	8004da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2a      	ldr	r2, [pc, #168]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7ff fbb2 	bl	80044e0 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d80:	f7ff fbae 	bl	80044e0 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e20e      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d92:	4b22      	ldr	r3, [pc, #136]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x1e0>
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d041      	beq.n	8004e32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b19      	ldr	r3, [pc, #100]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbc:	4a17      	ldr	r2, [pc, #92]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7ff fb8b 	bl	80044e0 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dce:	f7ff fb87 	bl	80044e0 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1e7      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004de0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0ef      	beq.n	8004dce <HAL_RCC_OscConfig+0x22e>
 8004dee:	e020      	b.n	8004e32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df6:	4a09      	ldr	r2, [pc, #36]	@ (8004e1c <HAL_RCC_OscConfig+0x27c>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7ff fb6e 	bl	80044e0 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e06:	e00d      	b.n	8004e24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e08:	f7ff fb6a 	bl	80044e0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d906      	bls.n	8004e24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1ca      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e24:	4b8c      	ldr	r3, [pc, #560]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ea      	bne.n	8004e08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a6 	beq.w	8004f8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e40:	2300      	movs	r3, #0
 8004e42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e44:	4b84      	ldr	r3, [pc, #528]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x2b4>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_RCC_OscConfig+0x2b6>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e66:	4b7c      	ldr	r3, [pc, #496]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e72:	2301      	movs	r3, #1
 8004e74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e76:	4b79      	ldr	r3, [pc, #484]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d118      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e82:	4b76      	ldr	r3, [pc, #472]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a75      	ldr	r2, [pc, #468]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8e:	f7ff fb27 	bl	80044e0 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e96:	f7ff fb23 	bl	80044e0 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e183      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800505c <HAL_RCC_OscConfig+0x4bc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d108      	bne.n	8004ece <HAL_RCC_OscConfig+0x32e>
 8004ebc:	4b66      	ldr	r3, [pc, #408]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	4a65      	ldr	r2, [pc, #404]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ecc:	e024      	b.n	8004f18 <HAL_RCC_OscConfig+0x378>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d110      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x358>
 8004ed6:	4b60      	ldr	r3, [pc, #384]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	4a5e      	ldr	r2, [pc, #376]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ede:	f043 0304 	orr.w	r3, r3, #4
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eec:	4a5a      	ldr	r2, [pc, #360]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ef6:	e00f      	b.n	8004f18 <HAL_RCC_OscConfig+0x378>
 8004ef8:	4b57      	ldr	r3, [pc, #348]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	4a56      	ldr	r2, [pc, #344]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f08:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	4a52      	ldr	r2, [pc, #328]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d016      	beq.n	8004f4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7ff fade 	bl	80044e0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7ff fada 	bl	80044e0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e138      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3e:	4b46      	ldr	r3, [pc, #280]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0ed      	beq.n	8004f28 <HAL_RCC_OscConfig+0x388>
 8004f4c:	e015      	b.n	8004f7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4e:	f7ff fac7 	bl	80044e0 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f54:	e00a      	b.n	8004f6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7ff fac3 	bl	80044e0 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e121      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ed      	bne.n	8004f56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f7a:	7ffb      	ldrb	r3, [r7, #31]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f84:	4a34      	ldr	r2, [pc, #208]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004f86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d03c      	beq.n	8005012 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01c      	beq.n	8004fda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7ff fa96 	bl	80044e0 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb8:	f7ff fa92 	bl	80044e0 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0f2      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fca:	4b23      	ldr	r3, [pc, #140]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ef      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x418>
 8004fd8:	e01b      	b.n	8005012 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fda:	4b1f      	ldr	r3, [pc, #124]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7ff fa79 	bl	80044e0 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff2:	f7ff fa75 	bl	80044e0 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0d5      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005004:	4b14      	ldr	r3, [pc, #80]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8005006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ef      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80c9 	beq.w	80051ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b0c      	cmp	r3, #12
 8005026:	f000 8083 	beq.w	8005130 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d15e      	bne.n	80050f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7ff fa4f 	bl	80044e0 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005044:	e00c      	b.n	8005060 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005046:	f7ff fa4b 	bl	80044e0 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d905      	bls.n	8005060 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0ab      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
 8005058:	40021000 	.word	0x40021000
 800505c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005060:	4b55      	ldr	r3, [pc, #340]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ec      	bne.n	8005046 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800506c:	4b52      	ldr	r3, [pc, #328]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	4b52      	ldr	r3, [pc, #328]	@ (80051bc <HAL_RCC_OscConfig+0x61c>)
 8005072:	4013      	ands	r3, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6a11      	ldr	r1, [r2, #32]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800507c:	3a01      	subs	r2, #1
 800507e:	0112      	lsls	r2, r2, #4
 8005080:	4311      	orrs	r1, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005086:	0212      	lsls	r2, r2, #8
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0552      	lsls	r2, r2, #21
 8005094:	4311      	orrs	r1, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800509a:	0852      	lsrs	r2, r2, #1
 800509c:	3a01      	subs	r2, #1
 800509e:	0652      	lsls	r2, r2, #25
 80050a0:	4311      	orrs	r1, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050a6:	06d2      	lsls	r2, r2, #27
 80050a8:	430a      	orrs	r2, r1
 80050aa:	4943      	ldr	r1, [pc, #268]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b0:	4b41      	ldr	r3, [pc, #260]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a40      	ldr	r2, [pc, #256]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050bc:	4b3e      	ldr	r3, [pc, #248]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4a3d      	ldr	r2, [pc, #244]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7ff fa0a 	bl	80044e0 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d0:	f7ff fa06 	bl	80044e0 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e066      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e2:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x530>
 80050ee:	e05e      	b.n	80051ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a30      	ldr	r2, [pc, #192]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 80050f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7ff f9f0 	bl	80044e0 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005104:	f7ff f9ec 	bl	80044e0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e04c      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005116:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005122:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	4924      	ldr	r1, [pc, #144]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <HAL_RCC_OscConfig+0x620>)
 800512a:	4013      	ands	r3, r2
 800512c:	60cb      	str	r3, [r1, #12]
 800512e:	e03e      	b.n	80051ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e039      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800513c:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <HAL_RCC_OscConfig+0x618>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f003 0203 	and.w	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	429a      	cmp	r2, r3
 800514e:	d12c      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	3b01      	subs	r3, #1
 800515c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d123      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d11b      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d113      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	3b01      	subs	r3, #1
 8005190:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d109      	bne.n	80051aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40021000 	.word	0x40021000
 80051bc:	019f800c 	.word	0x019f800c
 80051c0:	feeefffc 	.word	0xfeeefffc

080051c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e11e      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051dc:	4b91      	ldr	r3, [pc, #580]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d910      	bls.n	800520c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b8e      	ldr	r3, [pc, #568]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 020f 	bic.w	r2, r3, #15
 80051f2:	498c      	ldr	r1, [pc, #560]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b8a      	ldr	r3, [pc, #552]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d001      	beq.n	800520c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e106      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d073      	beq.n	8005300 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d129      	bne.n	8005274 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005220:	4b81      	ldr	r3, [pc, #516]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0f4      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005230:	f000 f99e 	bl	8005570 <RCC_GetSysClockFreqFromPLLSource>
 8005234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4a7c      	ldr	r2, [pc, #496]	@ (800542c <HAL_RCC_ClockConfig+0x268>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d93f      	bls.n	80052be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800523e:	4b7a      	ldr	r3, [pc, #488]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005252:	2b00      	cmp	r3, #0
 8005254:	d033      	beq.n	80052be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800525a:	2b00      	cmp	r3, #0
 800525c:	d12f      	bne.n	80052be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800525e:	4b72      	ldr	r3, [pc, #456]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005266:	4a70      	ldr	r2, [pc, #448]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800526e:	2380      	movs	r3, #128	@ 0x80
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e024      	b.n	80052be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d107      	bne.n	800528c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800527c:	4b6a      	ldr	r3, [pc, #424]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d109      	bne.n	800529c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0c6      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528c:	4b66      	ldr	r3, [pc, #408]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0be      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800529c:	f000 f8ce 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4a61      	ldr	r2, [pc, #388]	@ (800542c <HAL_RCC_ClockConfig+0x268>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d909      	bls.n	80052be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052b2:	4a5d      	ldr	r2, [pc, #372]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052be:	4b5a      	ldr	r3, [pc, #360]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f023 0203 	bic.w	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4957      	ldr	r1, [pc, #348]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d0:	f7ff f906 	bl	80044e0 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7ff f902 	bl	80044e0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e095      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 020c 	and.w	r2, r3, #12
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d1eb      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d023      	beq.n	8005354 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005318:	4b43      	ldr	r3, [pc, #268]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a42      	ldr	r2, [pc, #264]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800531e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005322:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005330:	4b3d      	ldr	r3, [pc, #244]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005338:	4a3b      	ldr	r2, [pc, #236]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800533a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800533e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005340:	4b39      	ldr	r3, [pc, #228]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4936      	ldr	r1, [pc, #216]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800534e:	4313      	orrs	r3, r2
 8005350:	608b      	str	r3, [r1, #8]
 8005352:	e008      	b.n	8005366 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b80      	cmp	r3, #128	@ 0x80
 8005358:	d105      	bne.n	8005366 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800535a:	4b33      	ldr	r3, [pc, #204]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	4a32      	ldr	r2, [pc, #200]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 8005360:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005364:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005366:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d21d      	bcs.n	80053b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005374:	4b2b      	ldr	r3, [pc, #172]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 020f 	bic.w	r2, r3, #15
 800537c:	4929      	ldr	r1, [pc, #164]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005384:	f7ff f8ac 	bl	80044e0 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800538c:	f7ff f8a8 	bl	80044e0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e03b      	b.n	800541a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b20      	ldr	r3, [pc, #128]	@ (8005424 <HAL_RCC_ClockConfig+0x260>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1ed      	bne.n	800538c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4917      	ldr	r1, [pc, #92]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053da:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	490f      	ldr	r1, [pc, #60]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ee:	f000 f825 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80053f2:	4602      	mov	r2, r0
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <HAL_RCC_ClockConfig+0x264>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	490c      	ldr	r1, [pc, #48]	@ (8005430 <HAL_RCC_ClockConfig+0x26c>)
 8005400:	5ccb      	ldrb	r3, [r1, r3]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	4a0a      	ldr	r2, [pc, #40]	@ (8005434 <HAL_RCC_ClockConfig+0x270>)
 800540c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <HAL_RCC_ClockConfig+0x274>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff f818 	bl	8004448 <HAL_InitTick>
 8005418:	4603      	mov	r3, r0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40022000 	.word	0x40022000
 8005428:	40021000 	.word	0x40021000
 800542c:	04c4b400 	.word	0x04c4b400
 8005430:	0800e5b8 	.word	0x0800e5b8
 8005434:	20000030 	.word	0x20000030
 8005438:	20000034 	.word	0x20000034

0800543c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005442:	4b2c      	ldr	r3, [pc, #176]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	2b04      	cmp	r3, #4
 800544c:	d102      	bne.n	8005454 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800544e:	4b2a      	ldr	r3, [pc, #168]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	e047      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005454:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 030c 	and.w	r3, r3, #12
 800545c:	2b08      	cmp	r3, #8
 800545e:	d102      	bne.n	8005466 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005460:	4b26      	ldr	r3, [pc, #152]	@ (80054fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	e03e      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005466:	4b23      	ldr	r3, [pc, #140]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b0c      	cmp	r3, #12
 8005470:	d136      	bne.n	80054e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005472:	4b20      	ldr	r3, [pc, #128]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800547c:	4b1d      	ldr	r3, [pc, #116]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	3301      	adds	r3, #1
 8005488:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d10c      	bne.n	80054aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005490:	4a1a      	ldr	r2, [pc, #104]	@ (80054fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800549a:	68d2      	ldr	r2, [r2, #12]
 800549c:	0a12      	lsrs	r2, r2, #8
 800549e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	617b      	str	r3, [r7, #20]
      break;
 80054a8:	e00c      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054aa:	4a13      	ldr	r2, [pc, #76]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b2:	4a10      	ldr	r2, [pc, #64]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054b4:	68d2      	ldr	r2, [r2, #12]
 80054b6:	0a12      	lsrs	r2, r2, #8
 80054b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]
      break;
 80054c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054c4:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	0e5b      	lsrs	r3, r3, #25
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	3301      	adds	r3, #1
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e001      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054e4:	693b      	ldr	r3, [r7, #16]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
 80054f8:	00f42400 	.word	0x00f42400
 80054fc:	007a1200 	.word	0x007a1200

08005500 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005504:	4b03      	ldr	r3, [pc, #12]	@ (8005514 <HAL_RCC_GetHCLKFreq+0x14>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000030 	.word	0x20000030

08005518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800551c:	f7ff fff0 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4904      	ldr	r1, [pc, #16]	@ (8005540 <HAL_RCC_GetPCLK1Freq+0x28>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	0800e5c8 	.word	0x0800e5c8

08005544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005548:	f7ff ffda 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b06      	ldr	r3, [pc, #24]	@ (8005568 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0adb      	lsrs	r3, r3, #11
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4904      	ldr	r1, [pc, #16]	@ (800556c <HAL_RCC_GetPCLK2Freq+0x28>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000
 800556c:	0800e5c8 	.word	0x0800e5c8

08005570 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005576:	4b1e      	ldr	r3, [pc, #120]	@ (80055f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005580:	4b1b      	ldr	r3, [pc, #108]	@ (80055f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d10c      	bne.n	80055ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005594:	4a17      	ldr	r2, [pc, #92]	@ (80055f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	4a14      	ldr	r2, [pc, #80]	@ (80055f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800559e:	68d2      	ldr	r2, [r2, #12]
 80055a0:	0a12      	lsrs	r2, r2, #8
 80055a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055a6:	fb02 f303 	mul.w	r3, r2, r3
 80055aa:	617b      	str	r3, [r7, #20]
    break;
 80055ac:	e00c      	b.n	80055c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055ae:	4a12      	ldr	r2, [pc, #72]	@ (80055f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	4a0e      	ldr	r2, [pc, #56]	@ (80055f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055b8:	68d2      	ldr	r2, [r2, #12]
 80055ba:	0a12      	lsrs	r2, r2, #8
 80055bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
    break;
 80055c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	0e5b      	lsrs	r3, r3, #25
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	3301      	adds	r3, #1
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80055e2:	687b      	ldr	r3, [r7, #4]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	40021000 	.word	0x40021000
 80055f4:	007a1200 	.word	0x007a1200
 80055f8:	00f42400 	.word	0x00f42400

080055fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005604:	2300      	movs	r3, #0
 8005606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005608:	2300      	movs	r3, #0
 800560a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8098 	beq.w	800574a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561a:	2300      	movs	r3, #0
 800561c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800561e:	4b43      	ldr	r3, [pc, #268]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10d      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562a:	4b40      	ldr	r3, [pc, #256]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562e:	4a3f      	ldr	r2, [pc, #252]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005634:	6593      	str	r3, [r2, #88]	@ 0x58
 8005636:	4b3d      	ldr	r3, [pc, #244]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005642:	2301      	movs	r3, #1
 8005644:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005646:	4b3a      	ldr	r3, [pc, #232]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a39      	ldr	r2, [pc, #228]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005652:	f7fe ff45 	bl	80044e0 <HAL_GetTick>
 8005656:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005658:	e009      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fe ff41 	bl	80044e0 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d902      	bls.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	74fb      	strb	r3, [r7, #19]
        break;
 800566c:	e005      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800566e:	4b30      	ldr	r3, [pc, #192]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ef      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800567a:	7cfb      	ldrb	r3, [r7, #19]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d159      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005680:	4b2a      	ldr	r3, [pc, #168]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800568a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01e      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	429a      	cmp	r2, r3
 800569a:	d019      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800569c:	4b23      	ldr	r3, [pc, #140]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056a8:	4b20      	ldr	r3, [pc, #128]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ae:	4a1f      	ldr	r2, [pc, #124]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056b8:	4b1c      	ldr	r3, [pc, #112]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056be:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056c8:	4a18      	ldr	r2, [pc, #96]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d016      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056da:	f7fe ff01 	bl	80044e0 <HAL_GetTick>
 80056de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056e0:	e00b      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fe fefd 	bl	80044e0 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d902      	bls.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	74fb      	strb	r3, [r7, #19]
            break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056fa:	4b0c      	ldr	r3, [pc, #48]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0ec      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800570e:	4b07      	ldr	r3, [pc, #28]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571c:	4903      	ldr	r1, [pc, #12]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005724:	e008      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005726:	7cfb      	ldrb	r3, [r7, #19]
 8005728:	74bb      	strb	r3, [r7, #18]
 800572a:	e005      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800572c:	40021000 	.word	0x40021000
 8005730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005734:	7cfb      	ldrb	r3, [r7, #19]
 8005736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005738:	7c7b      	ldrb	r3, [r7, #17]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800573e:	4ba6      	ldr	r3, [pc, #664]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005742:	4aa5      	ldr	r2, [pc, #660]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005748:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005756:	4ba0      	ldr	r3, [pc, #640]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575c:	f023 0203 	bic.w	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	499c      	ldr	r1, [pc, #624]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005778:	4b97      	ldr	r3, [pc, #604]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577e:	f023 020c 	bic.w	r2, r3, #12
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	4994      	ldr	r1, [pc, #592]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800579a:	4b8f      	ldr	r3, [pc, #572]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	498b      	ldr	r1, [pc, #556]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057bc:	4b86      	ldr	r3, [pc, #536]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4983      	ldr	r1, [pc, #524]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057de:	4b7e      	ldr	r3, [pc, #504]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	497a      	ldr	r1, [pc, #488]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005800:	4b75      	ldr	r3, [pc, #468]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005806:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	4972      	ldr	r1, [pc, #456]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005822:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005828:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4969      	ldr	r1, [pc, #420]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005844:	4b64      	ldr	r3, [pc, #400]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	4961      	ldr	r1, [pc, #388]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005866:	4b5c      	ldr	r3, [pc, #368]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	4958      	ldr	r1, [pc, #352]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d015      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005888:	4b53      	ldr	r3, [pc, #332]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	4950      	ldr	r1, [pc, #320]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a6:	d105      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a8:	4b4b      	ldr	r3, [pc, #300]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a4a      	ldr	r2, [pc, #296]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d015      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058c0:	4b45      	ldr	r3, [pc, #276]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	4942      	ldr	r1, [pc, #264]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058e0:	4b3d      	ldr	r3, [pc, #244]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a3c      	ldr	r2, [pc, #240]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d015      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058f8:	4b37      	ldr	r3, [pc, #220]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	4934      	ldr	r1, [pc, #208]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005916:	d105      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005918:	4b2f      	ldr	r3, [pc, #188]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4a2e      	ldr	r2, [pc, #184]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005922:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005930:	4b29      	ldr	r3, [pc, #164]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800593e:	4926      	ldr	r1, [pc, #152]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800594e:	d105      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005950:	4b21      	ldr	r3, [pc, #132]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	4a20      	ldr	r2, [pc, #128]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800595a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005968:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	4918      	ldr	r1, [pc, #96]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005986:	d105      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005988:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a12      	ldr	r2, [pc, #72]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800598e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005992:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d015      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ae:	490a      	ldr	r1, [pc, #40]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059be:	d105      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059c0:	4b05      	ldr	r3, [pc, #20]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4a04      	ldr	r2, [pc, #16]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000

080059dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e09d      	b.n	8005b2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d108      	bne.n	8005a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059fe:	d009      	beq.n	8005a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	61da      	str	r2, [r3, #28]
 8005a06:	e005      	b.n	8005a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fe f9b8 	bl	8003da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a54:	d902      	bls.n	8005a5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e002      	b.n	8005a62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a6a:	d007      	beq.n	8005a7c <HAL_SPI_Init+0xa0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a74:	d002      	beq.n	8005a7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	ea42 0103 	orr.w	r1, r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	f003 0204 	and.w	r2, r3, #4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005af8:	ea42 0103 	orr.w	r1, r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b088      	sub	sp, #32
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b42:	f7fe fccd 	bl	80044e0 <HAL_GetTick>
 8005b46:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d001      	beq.n	8005b5c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e15c      	b.n	8005e16 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x36>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e154      	b.n	8005e16 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_SPI_Transmit+0x48>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e14d      	b.n	8005e16 <HAL_SPI_Transmit+0x2e4>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2203      	movs	r2, #3
 8005b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	88fa      	ldrh	r2, [r7, #6]
 8005b9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bcc:	d10f      	bne.n	8005bee <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b40      	cmp	r3, #64	@ 0x40
 8005bfa:	d007      	beq.n	8005c0c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c14:	d952      	bls.n	8005cbc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Transmit+0xf2>
 8005c1e:	8b7b      	ldrh	r3, [r7, #26]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d145      	bne.n	8005cb0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c28:	881a      	ldrh	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	1c9a      	adds	r2, r3, #2
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c48:	e032      	b.n	8005cb0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d112      	bne.n	8005c7e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5c:	881a      	ldrh	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	1c9a      	adds	r2, r3, #2
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c7c:	e018      	b.n	8005cb0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c7e:	f7fe fc2f 	bl	80044e0 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d803      	bhi.n	8005c96 <HAL_SPI_Transmit+0x164>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c94:	d102      	bne.n	8005c9c <HAL_SPI_Transmit+0x16a>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e0b2      	b.n	8005e16 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1c7      	bne.n	8005c4a <HAL_SPI_Transmit+0x118>
 8005cba:	e083      	b.n	8005dc4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Transmit+0x198>
 8005cc4:	8b7b      	ldrh	r3, [r7, #26]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d177      	bne.n	8005dba <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d912      	bls.n	8005cfa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	881a      	ldrh	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b02      	subs	r3, #2
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cf8:	e05f      	b.n	8005dba <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	330c      	adds	r3, #12
 8005d04:	7812      	ldrb	r2, [r2, #0]
 8005d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d20:	e04b      	b.n	8005dba <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d12b      	bne.n	8005d88 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d912      	bls.n	8005d60 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	881a      	ldrh	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	1c9a      	adds	r2, r3, #2
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b02      	subs	r3, #2
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d5e:	e02c      	b.n	8005dba <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d86:	e018      	b.n	8005dba <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d88:	f7fe fbaa 	bl	80044e0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d803      	bhi.n	8005da0 <HAL_SPI_Transmit+0x26e>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d9e:	d102      	bne.n	8005da6 <HAL_SPI_Transmit+0x274>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e02d      	b.n	8005e16 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ae      	bne.n	8005d22 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fcf5 	bl	80067b8 <SPI_EndRxTxTransaction>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
  }
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b088      	sub	sp, #32
 8005e22:	af02      	add	r7, sp, #8
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d001      	beq.n	8005e3e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e123      	b.n	8006086 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_SPI_Receive+0x2c>
 8005e44:	88fb      	ldrh	r3, [r7, #6]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e11b      	b.n	8006086 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e56:	d112      	bne.n	8005e7e <HAL_SPI_Receive+0x60>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10e      	bne.n	8005e7e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2204      	movs	r2, #4
 8005e64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e68:	88fa      	ldrh	r2, [r7, #6]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f90a 	bl	800608e <HAL_SPI_TransmitReceive>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	e103      	b.n	8006086 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7e:	f7fe fb2f 	bl	80044e0 <HAL_GetTick>
 8005e82:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_SPI_Receive+0x74>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e0f9      	b.n	8006086 <HAL_SPI_Receive+0x268>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	88fa      	ldrh	r2, [r7, #6]
 8005eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ee4:	d908      	bls.n	8005ef8 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ef4:	605a      	str	r2, [r3, #4]
 8005ef6:	e007      	b.n	8005f08 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f06:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f10:	d10f      	bne.n	8005f32 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d007      	beq.n	8005f50 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f58:	d875      	bhi.n	8006046 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f5a:	e037      	b.n	8005fcc <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d117      	bne.n	8005f9a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f103 020c 	add.w	r2, r3, #12
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005f98:	e018      	b.n	8005fcc <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f9a:	f7fe faa1 	bl	80044e0 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d803      	bhi.n	8005fb2 <HAL_SPI_Receive+0x194>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fb0:	d102      	bne.n	8005fb8 <HAL_SPI_Receive+0x19a>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e05c      	b.n	8006086 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1c1      	bne.n	8005f5c <HAL_SPI_Receive+0x13e>
 8005fd8:	e03b      	b.n	8006052 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d115      	bne.n	8006014 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	b292      	uxth	r2, r2
 8005ff4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006012:	e018      	b.n	8006046 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006014:	f7fe fa64 	bl	80044e0 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d803      	bhi.n	800602c <HAL_SPI_Receive+0x20e>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800602a:	d102      	bne.n	8006032 <HAL_SPI_Receive+0x214>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d109      	bne.n	8006046 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e01f      	b.n	8006086 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1c3      	bne.n	8005fda <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fb56 	bl	8006708 <SPI_EndRxTransaction>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006084:	2300      	movs	r3, #0
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b08a      	sub	sp, #40	@ 0x28
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800609c:	2301      	movs	r3, #1
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a0:	f7fe fa1e 	bl	80044e0 <HAL_GetTick>
 80060a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80060b8:	887b      	ldrh	r3, [r7, #2]
 80060ba:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060bc:	7ffb      	ldrb	r3, [r7, #31]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d00c      	beq.n	80060dc <HAL_SPI_TransmitReceive+0x4e>
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c8:	d106      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x4a>
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d001      	beq.n	80060dc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80060d8:	2302      	movs	r3, #2
 80060da:	e1f3      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x60>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x60>
 80060e8:	887b      	ldrh	r3, [r7, #2]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e1e8      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x72>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e1e1      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x436>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b04      	cmp	r3, #4
 8006112:	d003      	beq.n	800611c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2205      	movs	r2, #5
 8006118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	887a      	ldrh	r2, [r7, #2]
 800612c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	887a      	ldrh	r2, [r7, #2]
 8006134:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	887a      	ldrh	r2, [r7, #2]
 8006142:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	887a      	ldrh	r2, [r7, #2]
 8006148:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800615e:	d802      	bhi.n	8006166 <HAL_SPI_TransmitReceive+0xd8>
 8006160:	8abb      	ldrh	r3, [r7, #20]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d908      	bls.n	8006178 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006174:	605a      	str	r2, [r3, #4]
 8006176:	e007      	b.n	8006188 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006186:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006192:	2b40      	cmp	r3, #64	@ 0x40
 8006194:	d007      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061ae:	f240 8083 	bls.w	80062b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x132>
 80061ba:	8afb      	ldrh	r3, [r7, #22]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d16f      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	881a      	ldrh	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d0:	1c9a      	adds	r2, r3, #2
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061e4:	e05c      	b.n	80062a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d11b      	bne.n	800622c <HAL_SPI_TransmitReceive+0x19e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d016      	beq.n	800622c <HAL_SPI_TransmitReceive+0x19e>
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	2b01      	cmp	r3, #1
 8006202:	d113      	bne.n	800622c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006208:	881a      	ldrh	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006214:	1c9a      	adds	r2, r3, #2
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b01      	cmp	r3, #1
 8006238:	d11c      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x1e6>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d016      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006250:	b292      	uxth	r2, r2
 8006252:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006258:	1c9a      	adds	r2, r3, #2
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006270:	2301      	movs	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006274:	f7fe f934 	bl	80044e0 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006280:	429a      	cmp	r2, r3
 8006282:	d80d      	bhi.n	80062a0 <HAL_SPI_TransmitReceive+0x212>
 8006284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800628a:	d009      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e111      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d19d      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x158>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d197      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x158>
 80062b6:	e0e5      	b.n	8006484 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_SPI_TransmitReceive+0x23a>
 80062c0:	8afb      	ldrh	r3, [r7, #22]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	f040 80d1 	bne.w	800646a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d912      	bls.n	80062f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	881a      	ldrh	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	1c9a      	adds	r2, r3, #2
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b02      	subs	r3, #2
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062f6:	e0b8      	b.n	800646a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	7812      	ldrb	r2, [r2, #0]
 8006304:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800631e:	e0a4      	b.n	800646a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d134      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x30a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d02f      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x30a>
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	2b01      	cmp	r3, #1
 800633c:	d12c      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006342:	b29b      	uxth	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d912      	bls.n	800636e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	881a      	ldrh	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	1c9a      	adds	r2, r3, #2
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b02      	subs	r3, #2
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800636c:	e012      	b.n	8006394 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d148      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x3aa>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d042      	beq.n	8006438 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d923      	bls.n	8006406 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c8:	b292      	uxth	r2, r2
 80063ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	1c9a      	adds	r2, r3, #2
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b02      	subs	r3, #2
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d81f      	bhi.n	8006434 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	e016      	b.n	8006434 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f103 020c 	add.w	r2, r3, #12
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006412:	7812      	ldrb	r2, [r2, #0]
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006434:	2301      	movs	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006438:	f7fe f852 	bl	80044e0 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006444:	429a      	cmp	r2, r3
 8006446:	d803      	bhi.n	8006450 <HAL_SPI_TransmitReceive+0x3c2>
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800644e:	d102      	bne.n	8006456 <HAL_SPI_TransmitReceive+0x3c8>
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e02c      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	f47f af55 	bne.w	8006320 <HAL_SPI_TransmitReceive+0x292>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	f47f af4e 	bne.w	8006320 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f995 	bl	80067b8 <SPI_EndRxTxTransaction>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e00e      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3728      	adds	r7, #40	@ 0x28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064dc:	f7fe f800 	bl	80044e0 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	4413      	add	r3, r2
 80064ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064ec:	f7fd fff8 	bl	80044e0 <HAL_GetTick>
 80064f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064f2:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	015b      	lsls	r3, r3, #5
 80064f8:	0d1b      	lsrs	r3, r3, #20
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006502:	e054      	b.n	80065ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800650a:	d050      	beq.n	80065ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800650c:	f7fd ffe8 	bl	80044e0 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	429a      	cmp	r2, r3
 800651a:	d902      	bls.n	8006522 <SPI_WaitFlagStateUntilTimeout+0x56>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d13d      	bne.n	800659e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006530:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800653a:	d111      	bne.n	8006560 <SPI_WaitFlagStateUntilTimeout+0x94>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006544:	d004      	beq.n	8006550 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800654e:	d107      	bne.n	8006560 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800655e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006568:	d10f      	bne.n	800658a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006588:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e017      	b.n	80065ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d19b      	bne.n	8006504 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000030 	.word	0x20000030

080065dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	@ 0x28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065ee:	f7fd ff77 	bl	80044e0 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	4413      	add	r3, r2
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80065fe:	f7fd ff6f 	bl	80044e0 <HAL_GetTick>
 8006602:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800660c:	4b3d      	ldr	r3, [pc, #244]	@ (8006704 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	00da      	lsls	r2, r3, #3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	0d1b      	lsrs	r3, r3, #20
 800661c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006624:	e060      	b.n	80066e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800662c:	d107      	bne.n	800663e <SPI_WaitFifoStateUntilTimeout+0x62>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800663c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006644:	d050      	beq.n	80066e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006646:	f7fd ff4b 	bl	80044e0 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006652:	429a      	cmp	r2, r3
 8006654:	d902      	bls.n	800665c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	2b00      	cmp	r3, #0
 800665a:	d13d      	bne.n	80066d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800666a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006674:	d111      	bne.n	800669a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800667e:	d004      	beq.n	800668a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006688:	d107      	bne.n	800669a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006698:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066a2:	d10f      	bne.n	80066c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e010      	b.n	80066fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4013      	ands	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d196      	bne.n	8006626 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3728      	adds	r7, #40	@ 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000030 	.word	0x20000030

08006708 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800671c:	d111      	bne.n	8006742 <SPI_EndRxTransaction+0x3a>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006726:	d004      	beq.n	8006732 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006730:	d107      	bne.n	8006742 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006740:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	2180      	movs	r1, #128	@ 0x80
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff febd 	bl	80064cc <SPI_WaitFlagStateUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800675c:	f043 0220 	orr.w	r2, r3, #32
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e023      	b.n	80067b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006770:	d11d      	bne.n	80067ae <SPI_EndRxTransaction+0xa6>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800677a:	d004      	beq.n	8006786 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006784:	d113      	bne.n	80067ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2200      	movs	r2, #0
 800678e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff ff22 	bl	80065dc <SPI_WaitFifoStateUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a2:	f043 0220 	orr.w	r2, r3, #32
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e000      	b.n	80067b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f7ff ff03 	bl	80065dc <SPI_WaitFifoStateUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e027      	b.n	800683c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2200      	movs	r2, #0
 80067f4:	2180      	movs	r1, #128	@ 0x80
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7ff fe68 	bl	80064cc <SPI_WaitFlagStateUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006806:	f043 0220 	orr.w	r2, r3, #32
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e014      	b.n	800683c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fedc 	bl	80065dc <SPI_WaitFifoStateUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e000      	b.n	800683c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e049      	b.n	80068ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fd fb2c 	bl	8003ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f000 fcd8 	bl	8007238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e049      	b.n	8006998 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d106      	bne.n	800691e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f841 	bl	80069a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3304      	adds	r3, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f000 fc81 	bl	8007238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d109      	bne.n	80069d8 <HAL_TIM_PWM_Start+0x24>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	e03c      	b.n	8006a52 <HAL_TIM_PWM_Start+0x9e>
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d109      	bne.n	80069f2 <HAL_TIM_PWM_Start+0x3e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	bf14      	ite	ne
 80069ea:	2301      	movne	r3, #1
 80069ec:	2300      	moveq	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	e02f      	b.n	8006a52 <HAL_TIM_PWM_Start+0x9e>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d109      	bne.n	8006a0c <HAL_TIM_PWM_Start+0x58>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	bf14      	ite	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	2300      	moveq	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	e022      	b.n	8006a52 <HAL_TIM_PWM_Start+0x9e>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b0c      	cmp	r3, #12
 8006a10:	d109      	bne.n	8006a26 <HAL_TIM_PWM_Start+0x72>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	bf14      	ite	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	2300      	moveq	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	e015      	b.n	8006a52 <HAL_TIM_PWM_Start+0x9e>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	d109      	bne.n	8006a40 <HAL_TIM_PWM_Start+0x8c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	bf14      	ite	ne
 8006a38:	2301      	movne	r3, #1
 8006a3a:	2300      	moveq	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	e008      	b.n	8006a52 <HAL_TIM_PWM_Start+0x9e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	bf14      	ite	ne
 8006a4c:	2301      	movne	r3, #1
 8006a4e:	2300      	moveq	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e097      	b.n	8006b8a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <HAL_TIM_PWM_Start+0xb6>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a68:	e023      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xfe>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_PWM_Start+0xc6>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a78:	e01b      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xfe>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_PWM_Start+0xd6>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a88:	e013      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xfe>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b0c      	cmp	r3, #12
 8006a8e:	d104      	bne.n	8006a9a <HAL_TIM_PWM_Start+0xe6>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a98:	e00b      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xfe>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	d104      	bne.n	8006aaa <HAL_TIM_PWM_Start+0xf6>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006aa8:	e003      	b.n	8006ab2 <HAL_TIM_PWM_Start+0xfe>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 ffea 	bl	8007a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a33      	ldr	r2, [pc, #204]	@ (8006b94 <HAL_TIM_PWM_Start+0x1e0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <HAL_TIM_PWM_Start+0x13e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a32      	ldr	r2, [pc, #200]	@ (8006b98 <HAL_TIM_PWM_Start+0x1e4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00e      	beq.n	8006af2 <HAL_TIM_PWM_Start+0x13e>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a30      	ldr	r2, [pc, #192]	@ (8006b9c <HAL_TIM_PWM_Start+0x1e8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d009      	beq.n	8006af2 <HAL_TIM_PWM_Start+0x13e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8006ba0 <HAL_TIM_PWM_Start+0x1ec>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_TIM_PWM_Start+0x13e>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a2d      	ldr	r2, [pc, #180]	@ (8006ba4 <HAL_TIM_PWM_Start+0x1f0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_PWM_Start+0x142>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <HAL_TIM_PWM_Start+0x144>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a20      	ldr	r2, [pc, #128]	@ (8006b94 <HAL_TIM_PWM_Start+0x1e0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d018      	beq.n	8006b48 <HAL_TIM_PWM_Start+0x194>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1e:	d013      	beq.n	8006b48 <HAL_TIM_PWM_Start+0x194>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a20      	ldr	r2, [pc, #128]	@ (8006ba8 <HAL_TIM_PWM_Start+0x1f4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00e      	beq.n	8006b48 <HAL_TIM_PWM_Start+0x194>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006bac <HAL_TIM_PWM_Start+0x1f8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d009      	beq.n	8006b48 <HAL_TIM_PWM_Start+0x194>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a17      	ldr	r2, [pc, #92]	@ (8006b98 <HAL_TIM_PWM_Start+0x1e4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_TIM_PWM_Start+0x194>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a16      	ldr	r2, [pc, #88]	@ (8006b9c <HAL_TIM_PWM_Start+0x1e8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d115      	bne.n	8006b74 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <HAL_TIM_PWM_Start+0x1fc>)
 8006b50:	4013      	ands	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b06      	cmp	r3, #6
 8006b58:	d015      	beq.n	8006b86 <HAL_TIM_PWM_Start+0x1d2>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b60:	d011      	beq.n	8006b86 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b72:	e008      	b.n	8006b86 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e000      	b.n	8006b88 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40014000 	.word	0x40014000
 8006ba0:	40014400 	.word	0x40014400
 8006ba4:	40014800 	.word	0x40014800
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	00010007 	.word	0x00010007

08006bb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e097      	b.n	8006cf8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fd f9a5 	bl	8003f2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6812      	ldr	r2, [r2, #0]
 8006bf4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006bf8:	f023 0307 	bic.w	r3, r3, #7
 8006bfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f000 fb15 	bl	8007238 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	4313      	orrs	r3, r2
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006c54:	f023 030c 	bic.w	r3, r3, #12
 8006c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	4313      	orrs	r3, r2
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	011a      	lsls	r2, r3, #4
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	031b      	lsls	r3, r3, #12
 8006c84:	4313      	orrs	r3, r2
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006c9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d110      	bne.n	8006d52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d102      	bne.n	8006d3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d36:	7b7b      	ldrb	r3, [r7, #13]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d001      	beq.n	8006d40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e069      	b.n	8006e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d50:	e031      	b.n	8006db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d110      	bne.n	8006d7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d102      	bne.n	8006d64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d5e:	7b3b      	ldrb	r3, [r7, #12]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d001      	beq.n	8006d68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e055      	b.n	8006e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d78:	e01d      	b.n	8006db6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d108      	bne.n	8006d92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d105      	bne.n	8006d92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d86:	7b7b      	ldrb	r3, [r7, #13]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d102      	bne.n	8006d92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d8c:	7b3b      	ldrb	r3, [r7, #12]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d001      	beq.n	8006d96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e03e      	b.n	8006e14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2202      	movs	r2, #2
 8006db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_TIM_Encoder_Start+0xc4>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d008      	beq.n	8006dd4 <HAL_TIM_Encoder_Start+0xd4>
 8006dc2:	e00f      	b.n	8006de4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fe61 	bl	8007a94 <TIM_CCxChannelCmd>
      break;
 8006dd2:	e016      	b.n	8006e02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	2104      	movs	r1, #4
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fe59 	bl	8007a94 <TIM_CCxChannelCmd>
      break;
 8006de2:	e00e      	b.n	8006e02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2201      	movs	r2, #1
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fe51 	bl	8007a94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2201      	movs	r2, #1
 8006df8:	2104      	movs	r1, #4
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fe4a 	bl	8007a94 <TIM_CCxChannelCmd>
      break;
 8006e00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f042 0201 	orr.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e0ff      	b.n	800703a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b14      	cmp	r3, #20
 8006e46:	f200 80f0 	bhi.w	800702a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	0800702b 	.word	0x0800702b
 8006e58:	0800702b 	.word	0x0800702b
 8006e5c:	0800702b 	.word	0x0800702b
 8006e60:	08006ee5 	.word	0x08006ee5
 8006e64:	0800702b 	.word	0x0800702b
 8006e68:	0800702b 	.word	0x0800702b
 8006e6c:	0800702b 	.word	0x0800702b
 8006e70:	08006f27 	.word	0x08006f27
 8006e74:	0800702b 	.word	0x0800702b
 8006e78:	0800702b 	.word	0x0800702b
 8006e7c:	0800702b 	.word	0x0800702b
 8006e80:	08006f67 	.word	0x08006f67
 8006e84:	0800702b 	.word	0x0800702b
 8006e88:	0800702b 	.word	0x0800702b
 8006e8c:	0800702b 	.word	0x0800702b
 8006e90:	08006fa9 	.word	0x08006fa9
 8006e94:	0800702b 	.word	0x0800702b
 8006e98:	0800702b 	.word	0x0800702b
 8006e9c:	0800702b 	.word	0x0800702b
 8006ea0:	08006fe9 	.word	0x08006fe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fa60 	bl	8007370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0208 	orr.w	r2, r2, #8
 8006ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0204 	bic.w	r2, r2, #4
 8006ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6999      	ldr	r1, [r3, #24]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	619a      	str	r2, [r3, #24]
      break;
 8006ee2:	e0a5      	b.n	8007030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fad0 	bl	8007490 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6999      	ldr	r1, [r3, #24]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	021a      	lsls	r2, r3, #8
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	619a      	str	r2, [r3, #24]
      break;
 8006f24:	e084      	b.n	8007030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fb39 	bl	80075a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f042 0208 	orr.w	r2, r2, #8
 8006f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69da      	ldr	r2, [r3, #28]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0204 	bic.w	r2, r2, #4
 8006f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69d9      	ldr	r1, [r3, #28]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	61da      	str	r2, [r3, #28]
      break;
 8006f64:	e064      	b.n	8007030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fba1 	bl	80076b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69da      	ldr	r2, [r3, #28]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69d9      	ldr	r1, [r3, #28]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	021a      	lsls	r2, r3, #8
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	61da      	str	r2, [r3, #28]
      break;
 8006fa6:	e043      	b.n	8007030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fc0a 	bl	80077c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0208 	orr.w	r2, r2, #8
 8006fc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0204 	bic.w	r2, r2, #4
 8006fd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006fe6:	e023      	b.n	8007030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fc4e 	bl	8007890 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007002:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007012:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	021a      	lsls	r2, r3, #8
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007028:	e002      	b.n	8007030 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]
      break;
 800702e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop

08007044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIM_ConfigClockSource+0x1c>
 800705c:	2302      	movs	r3, #2
 800705e:	e0de      	b.n	800721e <HAL_TIM_ConfigClockSource+0x1da>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800707e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800708a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a63      	ldr	r2, [pc, #396]	@ (8007228 <HAL_TIM_ConfigClockSource+0x1e4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	f000 80a9 	beq.w	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80070a0:	4a61      	ldr	r2, [pc, #388]	@ (8007228 <HAL_TIM_ConfigClockSource+0x1e4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	f200 80ae 	bhi.w	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 80070a8:	4a60      	ldr	r2, [pc, #384]	@ (800722c <HAL_TIM_ConfigClockSource+0x1e8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	f000 80a1 	beq.w	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80070b0:	4a5e      	ldr	r2, [pc, #376]	@ (800722c <HAL_TIM_ConfigClockSource+0x1e8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	f200 80a6 	bhi.w	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 80070b8:	4a5d      	ldr	r2, [pc, #372]	@ (8007230 <HAL_TIM_ConfigClockSource+0x1ec>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f000 8099 	beq.w	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80070c0:	4a5b      	ldr	r2, [pc, #364]	@ (8007230 <HAL_TIM_ConfigClockSource+0x1ec>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	f200 809e 	bhi.w	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 80070c8:	4a5a      	ldr	r2, [pc, #360]	@ (8007234 <HAL_TIM_ConfigClockSource+0x1f0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	f000 8091 	beq.w	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80070d0:	4a58      	ldr	r2, [pc, #352]	@ (8007234 <HAL_TIM_ConfigClockSource+0x1f0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	f200 8096 	bhi.w	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 80070d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070dc:	f000 8089 	beq.w	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80070e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80070e4:	f200 808e 	bhi.w	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 80070e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ec:	d03e      	beq.n	800716c <HAL_TIM_ConfigClockSource+0x128>
 80070ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070f2:	f200 8087 	bhi.w	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 80070f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fa:	f000 8086 	beq.w	800720a <HAL_TIM_ConfigClockSource+0x1c6>
 80070fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007102:	d87f      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 8007104:	2b70      	cmp	r3, #112	@ 0x70
 8007106:	d01a      	beq.n	800713e <HAL_TIM_ConfigClockSource+0xfa>
 8007108:	2b70      	cmp	r3, #112	@ 0x70
 800710a:	d87b      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 800710c:	2b60      	cmp	r3, #96	@ 0x60
 800710e:	d050      	beq.n	80071b2 <HAL_TIM_ConfigClockSource+0x16e>
 8007110:	2b60      	cmp	r3, #96	@ 0x60
 8007112:	d877      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 8007114:	2b50      	cmp	r3, #80	@ 0x50
 8007116:	d03c      	beq.n	8007192 <HAL_TIM_ConfigClockSource+0x14e>
 8007118:	2b50      	cmp	r3, #80	@ 0x50
 800711a:	d873      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 800711c:	2b40      	cmp	r3, #64	@ 0x40
 800711e:	d058      	beq.n	80071d2 <HAL_TIM_ConfigClockSource+0x18e>
 8007120:	2b40      	cmp	r3, #64	@ 0x40
 8007122:	d86f      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 8007124:	2b30      	cmp	r3, #48	@ 0x30
 8007126:	d064      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007128:	2b30      	cmp	r3, #48	@ 0x30
 800712a:	d86b      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 800712c:	2b20      	cmp	r3, #32
 800712e:	d060      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007130:	2b20      	cmp	r3, #32
 8007132:	d867      	bhi.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d05c      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8007138:	2b10      	cmp	r3, #16
 800713a:	d05a      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800713c:	e062      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800714e:	f000 fc81 	bl	8007a54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	609a      	str	r2, [r3, #8]
      break;
 800716a:	e04f      	b.n	800720c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800717c:	f000 fc6a 	bl	8007a54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800718e:	609a      	str	r2, [r3, #8]
      break;
 8007190:	e03c      	b.n	800720c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800719e:	461a      	mov	r2, r3
 80071a0:	f000 fbdc 	bl	800795c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2150      	movs	r1, #80	@ 0x50
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fc35 	bl	8007a1a <TIM_ITRx_SetConfig>
      break;
 80071b0:	e02c      	b.n	800720c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071be:	461a      	mov	r2, r3
 80071c0:	f000 fbfb 	bl	80079ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2160      	movs	r1, #96	@ 0x60
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 fc25 	bl	8007a1a <TIM_ITRx_SetConfig>
      break;
 80071d0:	e01c      	b.n	800720c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071de:	461a      	mov	r2, r3
 80071e0:	f000 fbbc 	bl	800795c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2140      	movs	r1, #64	@ 0x40
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fc15 	bl	8007a1a <TIM_ITRx_SetConfig>
      break;
 80071f0:	e00c      	b.n	800720c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	4610      	mov	r0, r2
 80071fe:	f000 fc0c 	bl	8007a1a <TIM_ITRx_SetConfig>
      break;
 8007202:	e003      	b.n	800720c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	73fb      	strb	r3, [r7, #15]
      break;
 8007208:	e000      	b.n	800720c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800720a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	00100070 	.word	0x00100070
 800722c:	00100040 	.word	0x00100040
 8007230:	00100030 	.word	0x00100030
 8007234:	00100020 	.word	0x00100020

08007238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a42      	ldr	r2, [pc, #264]	@ (8007354 <TIM_Base_SetConfig+0x11c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00f      	beq.n	8007270 <TIM_Base_SetConfig+0x38>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007256:	d00b      	beq.n	8007270 <TIM_Base_SetConfig+0x38>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a3f      	ldr	r2, [pc, #252]	@ (8007358 <TIM_Base_SetConfig+0x120>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d007      	beq.n	8007270 <TIM_Base_SetConfig+0x38>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a3e      	ldr	r2, [pc, #248]	@ (800735c <TIM_Base_SetConfig+0x124>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_Base_SetConfig+0x38>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a3d      	ldr	r2, [pc, #244]	@ (8007360 <TIM_Base_SetConfig+0x128>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d108      	bne.n	8007282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a33      	ldr	r2, [pc, #204]	@ (8007354 <TIM_Base_SetConfig+0x11c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d01b      	beq.n	80072c2 <TIM_Base_SetConfig+0x8a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007290:	d017      	beq.n	80072c2 <TIM_Base_SetConfig+0x8a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a30      	ldr	r2, [pc, #192]	@ (8007358 <TIM_Base_SetConfig+0x120>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <TIM_Base_SetConfig+0x8a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2f      	ldr	r2, [pc, #188]	@ (800735c <TIM_Base_SetConfig+0x124>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00f      	beq.n	80072c2 <TIM_Base_SetConfig+0x8a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007360 <TIM_Base_SetConfig+0x128>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00b      	beq.n	80072c2 <TIM_Base_SetConfig+0x8a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007364 <TIM_Base_SetConfig+0x12c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d007      	beq.n	80072c2 <TIM_Base_SetConfig+0x8a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007368 <TIM_Base_SetConfig+0x130>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <TIM_Base_SetConfig+0x8a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2b      	ldr	r2, [pc, #172]	@ (800736c <TIM_Base_SetConfig+0x134>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d108      	bne.n	80072d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a16      	ldr	r2, [pc, #88]	@ (8007354 <TIM_Base_SetConfig+0x11c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00f      	beq.n	8007320 <TIM_Base_SetConfig+0xe8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a17      	ldr	r2, [pc, #92]	@ (8007360 <TIM_Base_SetConfig+0x128>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00b      	beq.n	8007320 <TIM_Base_SetConfig+0xe8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a16      	ldr	r2, [pc, #88]	@ (8007364 <TIM_Base_SetConfig+0x12c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d007      	beq.n	8007320 <TIM_Base_SetConfig+0xe8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a15      	ldr	r2, [pc, #84]	@ (8007368 <TIM_Base_SetConfig+0x130>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_Base_SetConfig+0xe8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a14      	ldr	r2, [pc, #80]	@ (800736c <TIM_Base_SetConfig+0x134>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d103      	bne.n	8007328 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b01      	cmp	r3, #1
 8007338:	d105      	bne.n	8007346 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	611a      	str	r2, [r3, #16]
  }
}
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	40012c00 	.word	0x40012c00
 8007358:	40000400 	.word	0x40000400
 800735c:	40000800 	.word	0x40000800
 8007360:	40013400 	.word	0x40013400
 8007364:	40014000 	.word	0x40014000
 8007368:	40014400 	.word	0x40014400
 800736c:	40014800 	.word	0x40014800

08007370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	f023 0201 	bic.w	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800739e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f023 0302 	bic.w	r3, r3, #2
 80073bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a2c      	ldr	r2, [pc, #176]	@ (800747c <TIM_OC1_SetConfig+0x10c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_OC1_SetConfig+0x80>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007480 <TIM_OC1_SetConfig+0x110>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_OC1_SetConfig+0x80>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2a      	ldr	r2, [pc, #168]	@ (8007484 <TIM_OC1_SetConfig+0x114>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_OC1_SetConfig+0x80>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a29      	ldr	r2, [pc, #164]	@ (8007488 <TIM_OC1_SetConfig+0x118>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_OC1_SetConfig+0x80>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a28      	ldr	r2, [pc, #160]	@ (800748c <TIM_OC1_SetConfig+0x11c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d10c      	bne.n	800740a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	f023 0308 	bic.w	r3, r3, #8
 80073f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 0304 	bic.w	r3, r3, #4
 8007408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1b      	ldr	r2, [pc, #108]	@ (800747c <TIM_OC1_SetConfig+0x10c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00f      	beq.n	8007432 <TIM_OC1_SetConfig+0xc2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1a      	ldr	r2, [pc, #104]	@ (8007480 <TIM_OC1_SetConfig+0x110>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00b      	beq.n	8007432 <TIM_OC1_SetConfig+0xc2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a19      	ldr	r2, [pc, #100]	@ (8007484 <TIM_OC1_SetConfig+0x114>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d007      	beq.n	8007432 <TIM_OC1_SetConfig+0xc2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a18      	ldr	r2, [pc, #96]	@ (8007488 <TIM_OC1_SetConfig+0x118>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_OC1_SetConfig+0xc2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a17      	ldr	r2, [pc, #92]	@ (800748c <TIM_OC1_SetConfig+0x11c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d111      	bne.n	8007456 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	4313      	orrs	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	621a      	str	r2, [r3, #32]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40013400 	.word	0x40013400
 8007484:	40014000 	.word	0x40014000
 8007488:	40014400 	.word	0x40014400
 800748c:	40014800 	.word	0x40014800

08007490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f023 0210 	bic.w	r2, r3, #16
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f023 0320 	bic.w	r3, r3, #32
 80074de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a28      	ldr	r2, [pc, #160]	@ (8007590 <TIM_OC2_SetConfig+0x100>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_OC2_SetConfig+0x6c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a27      	ldr	r2, [pc, #156]	@ (8007594 <TIM_OC2_SetConfig+0x104>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d10d      	bne.n	8007518 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007516:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1d      	ldr	r2, [pc, #116]	@ (8007590 <TIM_OC2_SetConfig+0x100>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00f      	beq.n	8007540 <TIM_OC2_SetConfig+0xb0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a1c      	ldr	r2, [pc, #112]	@ (8007594 <TIM_OC2_SetConfig+0x104>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00b      	beq.n	8007540 <TIM_OC2_SetConfig+0xb0>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a1b      	ldr	r2, [pc, #108]	@ (8007598 <TIM_OC2_SetConfig+0x108>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d007      	beq.n	8007540 <TIM_OC2_SetConfig+0xb0>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1a      	ldr	r2, [pc, #104]	@ (800759c <TIM_OC2_SetConfig+0x10c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_OC2_SetConfig+0xb0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a19      	ldr	r2, [pc, #100]	@ (80075a0 <TIM_OC2_SetConfig+0x110>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d113      	bne.n	8007568 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800754e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40012c00 	.word	0x40012c00
 8007594:	40013400 	.word	0x40013400
 8007598:	40014000 	.word	0x40014000
 800759c:	40014400 	.word	0x40014400
 80075a0:	40014800 	.word	0x40014800

080075a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0303 	bic.w	r3, r3, #3
 80075de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a27      	ldr	r2, [pc, #156]	@ (80076a0 <TIM_OC3_SetConfig+0xfc>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d003      	beq.n	800760e <TIM_OC3_SetConfig+0x6a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a26      	ldr	r2, [pc, #152]	@ (80076a4 <TIM_OC3_SetConfig+0x100>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d10d      	bne.n	800762a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007614:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a1c      	ldr	r2, [pc, #112]	@ (80076a0 <TIM_OC3_SetConfig+0xfc>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00f      	beq.n	8007652 <TIM_OC3_SetConfig+0xae>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <TIM_OC3_SetConfig+0x100>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00b      	beq.n	8007652 <TIM_OC3_SetConfig+0xae>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a1a      	ldr	r2, [pc, #104]	@ (80076a8 <TIM_OC3_SetConfig+0x104>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d007      	beq.n	8007652 <TIM_OC3_SetConfig+0xae>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a19      	ldr	r2, [pc, #100]	@ (80076ac <TIM_OC3_SetConfig+0x108>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_OC3_SetConfig+0xae>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <TIM_OC3_SetConfig+0x10c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d113      	bne.n	800767a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	621a      	str	r2, [r3, #32]
}
 8007694:	bf00      	nop
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	40012c00 	.word	0x40012c00
 80076a4:	40013400 	.word	0x40013400
 80076a8:	40014000 	.word	0x40014000
 80076ac:	40014400 	.word	0x40014400
 80076b0:	40014800 	.word	0x40014800

080076b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	031b      	lsls	r3, r3, #12
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a28      	ldr	r2, [pc, #160]	@ (80077b4 <TIM_OC4_SetConfig+0x100>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_OC4_SetConfig+0x6c>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a27      	ldr	r2, [pc, #156]	@ (80077b8 <TIM_OC4_SetConfig+0x104>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10d      	bne.n	800773c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	031b      	lsls	r3, r3, #12
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800773a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a1d      	ldr	r2, [pc, #116]	@ (80077b4 <TIM_OC4_SetConfig+0x100>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00f      	beq.n	8007764 <TIM_OC4_SetConfig+0xb0>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a1c      	ldr	r2, [pc, #112]	@ (80077b8 <TIM_OC4_SetConfig+0x104>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00b      	beq.n	8007764 <TIM_OC4_SetConfig+0xb0>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a1b      	ldr	r2, [pc, #108]	@ (80077bc <TIM_OC4_SetConfig+0x108>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d007      	beq.n	8007764 <TIM_OC4_SetConfig+0xb0>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a1a      	ldr	r2, [pc, #104]	@ (80077c0 <TIM_OC4_SetConfig+0x10c>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_OC4_SetConfig+0xb0>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a19      	ldr	r2, [pc, #100]	@ (80077c4 <TIM_OC4_SetConfig+0x110>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d113      	bne.n	800778c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800776a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007772:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	019b      	lsls	r3, r3, #6
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	019b      	lsls	r3, r3, #6
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	621a      	str	r2, [r3, #32]
}
 80077a6:	bf00      	nop
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40013400 	.word	0x40013400
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40014400 	.word	0x40014400
 80077c4:	40014800 	.word	0x40014800

080077c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800780c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a17      	ldr	r2, [pc, #92]	@ (800787c <TIM_OC5_SetConfig+0xb4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d00f      	beq.n	8007842 <TIM_OC5_SetConfig+0x7a>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <TIM_OC5_SetConfig+0xb8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00b      	beq.n	8007842 <TIM_OC5_SetConfig+0x7a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a15      	ldr	r2, [pc, #84]	@ (8007884 <TIM_OC5_SetConfig+0xbc>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d007      	beq.n	8007842 <TIM_OC5_SetConfig+0x7a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a14      	ldr	r2, [pc, #80]	@ (8007888 <TIM_OC5_SetConfig+0xc0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d003      	beq.n	8007842 <TIM_OC5_SetConfig+0x7a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a13      	ldr	r2, [pc, #76]	@ (800788c <TIM_OC5_SetConfig+0xc4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d109      	bne.n	8007856 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007848:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	621a      	str	r2, [r3, #32]
}
 8007870:	bf00      	nop
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40013400 	.word	0x40013400
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800

08007890 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	021b      	lsls	r3, r3, #8
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	051b      	lsls	r3, r3, #20
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a18      	ldr	r2, [pc, #96]	@ (8007948 <TIM_OC6_SetConfig+0xb8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00f      	beq.n	800790c <TIM_OC6_SetConfig+0x7c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a17      	ldr	r2, [pc, #92]	@ (800794c <TIM_OC6_SetConfig+0xbc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00b      	beq.n	800790c <TIM_OC6_SetConfig+0x7c>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a16      	ldr	r2, [pc, #88]	@ (8007950 <TIM_OC6_SetConfig+0xc0>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d007      	beq.n	800790c <TIM_OC6_SetConfig+0x7c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a15      	ldr	r2, [pc, #84]	@ (8007954 <TIM_OC6_SetConfig+0xc4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d003      	beq.n	800790c <TIM_OC6_SetConfig+0x7c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a14      	ldr	r2, [pc, #80]	@ (8007958 <TIM_OC6_SetConfig+0xc8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d109      	bne.n	8007920 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007912:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40012c00 	.word	0x40012c00
 800794c:	40013400 	.word	0x40013400
 8007950:	40014000 	.word	0x40014000
 8007954:	40014400 	.word	0x40014400
 8007958:	40014800 	.word	0x40014800

0800795c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0201 	bic.w	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f023 030a 	bic.w	r3, r3, #10
 8007998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	621a      	str	r2, [r3, #32]
}
 80079ae:	bf00      	nop
 80079b0:	371c      	adds	r7, #28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b087      	sub	sp, #28
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f023 0210 	bic.w	r2, r3, #16
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	031b      	lsls	r3, r3, #12
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	621a      	str	r2, [r3, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b085      	sub	sp, #20
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f043 0307 	orr.w	r3, r3, #7
 8007a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	609a      	str	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	609a      	str	r2, [r3, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 031f 	and.w	r3, r3, #31
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a1a      	ldr	r2, [r3, #32]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	401a      	ands	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1a      	ldr	r2, [r3, #32]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8007acc:	431a      	orrs	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e065      	b.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d004      	beq.n	8007b2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a2b      	ldr	r2, [pc, #172]	@ (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d108      	bne.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1b      	ldr	r2, [pc, #108]	@ (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d018      	beq.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6e:	d013      	beq.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a18      	ldr	r2, [pc, #96]	@ (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00e      	beq.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a17      	ldr	r2, [pc, #92]	@ (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d009      	beq.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a12      	ldr	r2, [pc, #72]	@ (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a13      	ldr	r2, [pc, #76]	@ (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d10c      	bne.n	8007bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	40012c00 	.word	0x40012c00
 8007bd4:	40013400 	.word	0x40013400
 8007bd8:	40000400 	.word	0x40000400
 8007bdc:	40000800 	.word	0x40000800
 8007be0:	40014000 	.word	0x40014000

08007be4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e073      	b.n	8007ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a19      	ldr	r2, [pc, #100]	@ (8007cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a18      	ldr	r2, [pc, #96]	@ (8007cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d11c      	bne.n	8007cd6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca6:	051b      	lsls	r3, r3, #20
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40013400 	.word	0x40013400

08007cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e042      	b.n	8007d94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d106      	bne.n	8007d26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fc f9d1 	bl	80040c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2224      	movs	r2, #36	@ 0x24
 8007d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fb82 	bl	8008450 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f8b3 	bl	8007eb8 <UART_SetConfig>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e01b      	b.n	8007d94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fc01 	bl	8008594 <UART_CheckIdleState>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	@ 0x28
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db2:	2b20      	cmp	r3, #32
 8007db4:	d17b      	bne.n	8007eae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <HAL_UART_Transmit+0x26>
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e074      	b.n	8007eb0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2221      	movs	r2, #33	@ 0x21
 8007dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dd6:	f7fc fb83 	bl	80044e0 <HAL_GetTick>
 8007dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	88fa      	ldrh	r2, [r7, #6]
 8007de0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	88fa      	ldrh	r2, [r7, #6]
 8007de8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df4:	d108      	bne.n	8007e08 <HAL_UART_Transmit+0x6c>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d104      	bne.n	8007e08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	e003      	b.n	8007e10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e10:	e030      	b.n	8007e74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2180      	movs	r1, #128	@ 0x80
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fc63 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e03d      	b.n	8007eb0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10b      	bne.n	8007e52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	3302      	adds	r3, #2
 8007e4e:	61bb      	str	r3, [r7, #24]
 8007e50:	e007      	b.n	8007e62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1c8      	bne.n	8007e12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2200      	movs	r2, #0
 8007e88:	2140      	movs	r1, #64	@ 0x40
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fc2c 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e006      	b.n	8007eb0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e000      	b.n	8007eb0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007eae:	2302      	movs	r3, #2
  }
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ebc:	b08c      	sub	sp, #48	@ 0x30
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4bab      	ldr	r3, [pc, #684]	@ (8008194 <UART_SetConfig+0x2dc>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4aa0      	ldr	r2, [pc, #640]	@ (8008198 <UART_SetConfig+0x2e0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d004      	beq.n	8007f24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f20:	4313      	orrs	r3, r2
 8007f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	f023 010f 	bic.w	r1, r3, #15
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a91      	ldr	r2, [pc, #580]	@ (800819c <UART_SetConfig+0x2e4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d125      	bne.n	8007fa8 <UART_SetConfig+0xf0>
 8007f5c:	4b90      	ldr	r3, [pc, #576]	@ (80081a0 <UART_SetConfig+0x2e8>)
 8007f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d81a      	bhi.n	8007fa0 <UART_SetConfig+0xe8>
 8007f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f70 <UART_SetConfig+0xb8>)
 8007f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f70:	08007f81 	.word	0x08007f81
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	08007f89 	.word	0x08007f89
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e0d6      	b.n	8008136 <UART_SetConfig+0x27e>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e0d2      	b.n	8008136 <UART_SetConfig+0x27e>
 8007f90:	2304      	movs	r3, #4
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e0ce      	b.n	8008136 <UART_SetConfig+0x27e>
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9e:	e0ca      	b.n	8008136 <UART_SetConfig+0x27e>
 8007fa0:	2310      	movs	r3, #16
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e0c6      	b.n	8008136 <UART_SetConfig+0x27e>
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a7d      	ldr	r2, [pc, #500]	@ (80081a4 <UART_SetConfig+0x2ec>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d138      	bne.n	8008024 <UART_SetConfig+0x16c>
 8007fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80081a0 <UART_SetConfig+0x2e8>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb8:	f003 030c 	and.w	r3, r3, #12
 8007fbc:	2b0c      	cmp	r3, #12
 8007fbe:	d82d      	bhi.n	800801c <UART_SetConfig+0x164>
 8007fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc8 <UART_SetConfig+0x110>)
 8007fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc6:	bf00      	nop
 8007fc8:	08007ffd 	.word	0x08007ffd
 8007fcc:	0800801d 	.word	0x0800801d
 8007fd0:	0800801d 	.word	0x0800801d
 8007fd4:	0800801d 	.word	0x0800801d
 8007fd8:	0800800d 	.word	0x0800800d
 8007fdc:	0800801d 	.word	0x0800801d
 8007fe0:	0800801d 	.word	0x0800801d
 8007fe4:	0800801d 	.word	0x0800801d
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	0800801d 	.word	0x0800801d
 8007ff0:	0800801d 	.word	0x0800801d
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008002:	e098      	b.n	8008136 <UART_SetConfig+0x27e>
 8008004:	2302      	movs	r3, #2
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800a:	e094      	b.n	8008136 <UART_SetConfig+0x27e>
 800800c:	2304      	movs	r3, #4
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008012:	e090      	b.n	8008136 <UART_SetConfig+0x27e>
 8008014:	2308      	movs	r3, #8
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e08c      	b.n	8008136 <UART_SetConfig+0x27e>
 800801c:	2310      	movs	r3, #16
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e088      	b.n	8008136 <UART_SetConfig+0x27e>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a5f      	ldr	r2, [pc, #380]	@ (80081a8 <UART_SetConfig+0x2f0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d125      	bne.n	800807a <UART_SetConfig+0x1c2>
 800802e:	4b5c      	ldr	r3, [pc, #368]	@ (80081a0 <UART_SetConfig+0x2e8>)
 8008030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008034:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008038:	2b30      	cmp	r3, #48	@ 0x30
 800803a:	d016      	beq.n	800806a <UART_SetConfig+0x1b2>
 800803c:	2b30      	cmp	r3, #48	@ 0x30
 800803e:	d818      	bhi.n	8008072 <UART_SetConfig+0x1ba>
 8008040:	2b20      	cmp	r3, #32
 8008042:	d00a      	beq.n	800805a <UART_SetConfig+0x1a2>
 8008044:	2b20      	cmp	r3, #32
 8008046:	d814      	bhi.n	8008072 <UART_SetConfig+0x1ba>
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <UART_SetConfig+0x19a>
 800804c:	2b10      	cmp	r3, #16
 800804e:	d008      	beq.n	8008062 <UART_SetConfig+0x1aa>
 8008050:	e00f      	b.n	8008072 <UART_SetConfig+0x1ba>
 8008052:	2300      	movs	r3, #0
 8008054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008058:	e06d      	b.n	8008136 <UART_SetConfig+0x27e>
 800805a:	2302      	movs	r3, #2
 800805c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008060:	e069      	b.n	8008136 <UART_SetConfig+0x27e>
 8008062:	2304      	movs	r3, #4
 8008064:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008068:	e065      	b.n	8008136 <UART_SetConfig+0x27e>
 800806a:	2308      	movs	r3, #8
 800806c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008070:	e061      	b.n	8008136 <UART_SetConfig+0x27e>
 8008072:	2310      	movs	r3, #16
 8008074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008078:	e05d      	b.n	8008136 <UART_SetConfig+0x27e>
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a4b      	ldr	r2, [pc, #300]	@ (80081ac <UART_SetConfig+0x2f4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d125      	bne.n	80080d0 <UART_SetConfig+0x218>
 8008084:	4b46      	ldr	r3, [pc, #280]	@ (80081a0 <UART_SetConfig+0x2e8>)
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800808e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008090:	d016      	beq.n	80080c0 <UART_SetConfig+0x208>
 8008092:	2bc0      	cmp	r3, #192	@ 0xc0
 8008094:	d818      	bhi.n	80080c8 <UART_SetConfig+0x210>
 8008096:	2b80      	cmp	r3, #128	@ 0x80
 8008098:	d00a      	beq.n	80080b0 <UART_SetConfig+0x1f8>
 800809a:	2b80      	cmp	r3, #128	@ 0x80
 800809c:	d814      	bhi.n	80080c8 <UART_SetConfig+0x210>
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <UART_SetConfig+0x1f0>
 80080a2:	2b40      	cmp	r3, #64	@ 0x40
 80080a4:	d008      	beq.n	80080b8 <UART_SetConfig+0x200>
 80080a6:	e00f      	b.n	80080c8 <UART_SetConfig+0x210>
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ae:	e042      	b.n	8008136 <UART_SetConfig+0x27e>
 80080b0:	2302      	movs	r3, #2
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b6:	e03e      	b.n	8008136 <UART_SetConfig+0x27e>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080be:	e03a      	b.n	8008136 <UART_SetConfig+0x27e>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c6:	e036      	b.n	8008136 <UART_SetConfig+0x27e>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ce:	e032      	b.n	8008136 <UART_SetConfig+0x27e>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a30      	ldr	r2, [pc, #192]	@ (8008198 <UART_SetConfig+0x2e0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d12a      	bne.n	8008130 <UART_SetConfig+0x278>
 80080da:	4b31      	ldr	r3, [pc, #196]	@ (80081a0 <UART_SetConfig+0x2e8>)
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080e8:	d01a      	beq.n	8008120 <UART_SetConfig+0x268>
 80080ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080ee:	d81b      	bhi.n	8008128 <UART_SetConfig+0x270>
 80080f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080f4:	d00c      	beq.n	8008110 <UART_SetConfig+0x258>
 80080f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080fa:	d815      	bhi.n	8008128 <UART_SetConfig+0x270>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <UART_SetConfig+0x250>
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008104:	d008      	beq.n	8008118 <UART_SetConfig+0x260>
 8008106:	e00f      	b.n	8008128 <UART_SetConfig+0x270>
 8008108:	2300      	movs	r3, #0
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810e:	e012      	b.n	8008136 <UART_SetConfig+0x27e>
 8008110:	2302      	movs	r3, #2
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008116:	e00e      	b.n	8008136 <UART_SetConfig+0x27e>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811e:	e00a      	b.n	8008136 <UART_SetConfig+0x27e>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008126:	e006      	b.n	8008136 <UART_SetConfig+0x27e>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812e:	e002      	b.n	8008136 <UART_SetConfig+0x27e>
 8008130:	2310      	movs	r3, #16
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a17      	ldr	r2, [pc, #92]	@ (8008198 <UART_SetConfig+0x2e0>)
 800813c:	4293      	cmp	r3, r2
 800813e:	f040 80a8 	bne.w	8008292 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008142:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008146:	2b08      	cmp	r3, #8
 8008148:	d834      	bhi.n	80081b4 <UART_SetConfig+0x2fc>
 800814a:	a201      	add	r2, pc, #4	@ (adr r2, 8008150 <UART_SetConfig+0x298>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008175 	.word	0x08008175
 8008154:	080081b5 	.word	0x080081b5
 8008158:	0800817d 	.word	0x0800817d
 800815c:	080081b5 	.word	0x080081b5
 8008160:	08008183 	.word	0x08008183
 8008164:	080081b5 	.word	0x080081b5
 8008168:	080081b5 	.word	0x080081b5
 800816c:	080081b5 	.word	0x080081b5
 8008170:	0800818b 	.word	0x0800818b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008174:	f7fd f9d0 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8008178:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800817a:	e021      	b.n	80081c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800817c:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <UART_SetConfig+0x2f8>)
 800817e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008180:	e01e      	b.n	80081c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008182:	f7fd f95b 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8008186:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008188:	e01a      	b.n	80081c0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008190:	e016      	b.n	80081c0 <UART_SetConfig+0x308>
 8008192:	bf00      	nop
 8008194:	cfff69f3 	.word	0xcfff69f3
 8008198:	40008000 	.word	0x40008000
 800819c:	40013800 	.word	0x40013800
 80081a0:	40021000 	.word	0x40021000
 80081a4:	40004400 	.word	0x40004400
 80081a8:	40004800 	.word	0x40004800
 80081ac:	40004c00 	.word	0x40004c00
 80081b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 812a 	beq.w	800841c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081cc:	4a9e      	ldr	r2, [pc, #632]	@ (8008448 <UART_SetConfig+0x590>)
 80081ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d2:	461a      	mov	r2, r3
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80081da:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	4413      	add	r3, r2
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d305      	bcc.n	80081f8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081fe:	e10d      	b.n	800841c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	2200      	movs	r2, #0
 8008204:	60bb      	str	r3, [r7, #8]
 8008206:	60fa      	str	r2, [r7, #12]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820c:	4a8e      	ldr	r2, [pc, #568]	@ (8008448 <UART_SetConfig+0x590>)
 800820e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008212:	b29b      	uxth	r3, r3
 8008214:	2200      	movs	r2, #0
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008222:	f7f8 fd59 	bl	8000cd8 <__aeabi_uldivmod>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4610      	mov	r0, r2
 800822c:	4619      	mov	r1, r3
 800822e:	f04f 0200 	mov.w	r2, #0
 8008232:	f04f 0300 	mov.w	r3, #0
 8008236:	020b      	lsls	r3, r1, #8
 8008238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800823c:	0202      	lsls	r2, r0, #8
 800823e:	6979      	ldr	r1, [r7, #20]
 8008240:	6849      	ldr	r1, [r1, #4]
 8008242:	0849      	lsrs	r1, r1, #1
 8008244:	2000      	movs	r0, #0
 8008246:	460c      	mov	r4, r1
 8008248:	4605      	mov	r5, r0
 800824a:	eb12 0804 	adds.w	r8, r2, r4
 800824e:	eb43 0905 	adc.w	r9, r3, r5
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	469a      	mov	sl, r3
 800825a:	4693      	mov	fp, r2
 800825c:	4652      	mov	r2, sl
 800825e:	465b      	mov	r3, fp
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	f7f8 fd38 	bl	8000cd8 <__aeabi_uldivmod>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4613      	mov	r3, r2
 800826e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008276:	d308      	bcc.n	800828a <UART_SetConfig+0x3d2>
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800827e:	d204      	bcs.n	800828a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6a3a      	ldr	r2, [r7, #32]
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	e0c8      	b.n	800841c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008290:	e0c4      	b.n	800841c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800829a:	d167      	bne.n	800836c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800829c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d828      	bhi.n	80082f6 <UART_SetConfig+0x43e>
 80082a4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <UART_SetConfig+0x3f4>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082d1 	.word	0x080082d1
 80082b0:	080082d9 	.word	0x080082d9
 80082b4:	080082e1 	.word	0x080082e1
 80082b8:	080082f7 	.word	0x080082f7
 80082bc:	080082e7 	.word	0x080082e7
 80082c0:	080082f7 	.word	0x080082f7
 80082c4:	080082f7 	.word	0x080082f7
 80082c8:	080082f7 	.word	0x080082f7
 80082cc:	080082ef 	.word	0x080082ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d0:	f7fd f922 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 80082d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082d6:	e014      	b.n	8008302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082d8:	f7fd f934 	bl	8005544 <HAL_RCC_GetPCLK2Freq>
 80082dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082de:	e010      	b.n	8008302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e0:	4b5a      	ldr	r3, [pc, #360]	@ (800844c <UART_SetConfig+0x594>)
 80082e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082e4:	e00d      	b.n	8008302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082e6:	f7fd f8a9 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80082ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ec:	e009      	b.n	8008302 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082f4:	e005      	b.n	8008302 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 8089 	beq.w	800841c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830e:	4a4e      	ldr	r2, [pc, #312]	@ (8008448 <UART_SetConfig+0x590>)
 8008310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008314:	461a      	mov	r2, r3
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	fbb3 f3f2 	udiv	r3, r3, r2
 800831c:	005a      	lsls	r2, r3, #1
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	441a      	add	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	fbb2 f3f3 	udiv	r3, r2, r3
 800832e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	2b0f      	cmp	r3, #15
 8008334:	d916      	bls.n	8008364 <UART_SetConfig+0x4ac>
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800833c:	d212      	bcs.n	8008364 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	b29b      	uxth	r3, r3
 8008342:	f023 030f 	bic.w	r3, r3, #15
 8008346:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	085b      	lsrs	r3, r3, #1
 800834c:	b29b      	uxth	r3, r3
 800834e:	f003 0307 	and.w	r3, r3, #7
 8008352:	b29a      	uxth	r2, r3
 8008354:	8bfb      	ldrh	r3, [r7, #30]
 8008356:	4313      	orrs	r3, r2
 8008358:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	8bfa      	ldrh	r2, [r7, #30]
 8008360:	60da      	str	r2, [r3, #12]
 8008362:	e05b      	b.n	800841c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800836a:	e057      	b.n	800841c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800836c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008370:	2b08      	cmp	r3, #8
 8008372:	d828      	bhi.n	80083c6 <UART_SetConfig+0x50e>
 8008374:	a201      	add	r2, pc, #4	@ (adr r2, 800837c <UART_SetConfig+0x4c4>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	080083c7 	.word	0x080083c7
 800838c:	080083b7 	.word	0x080083b7
 8008390:	080083c7 	.word	0x080083c7
 8008394:	080083c7 	.word	0x080083c7
 8008398:	080083c7 	.word	0x080083c7
 800839c:	080083bf 	.word	0x080083bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a0:	f7fd f8ba 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083a6:	e014      	b.n	80083d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a8:	f7fd f8cc 	bl	8005544 <HAL_RCC_GetPCLK2Freq>
 80083ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ae:	e010      	b.n	80083d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b0:	4b26      	ldr	r3, [pc, #152]	@ (800844c <UART_SetConfig+0x594>)
 80083b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083b4:	e00d      	b.n	80083d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083b6:	f7fd f841 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80083ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083bc:	e009      	b.n	80083d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083c4:	e005      	b.n	80083d2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083d0:	bf00      	nop
    }

    if (pclk != 0U)
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d021      	beq.n	800841c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008448 <UART_SetConfig+0x590>)
 80083de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e2:	461a      	mov	r2, r3
 80083e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	085b      	lsrs	r3, r3, #1
 80083f0:	441a      	add	r2, r3
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	2b0f      	cmp	r3, #15
 8008400:	d909      	bls.n	8008416 <UART_SetConfig+0x55e>
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008408:	d205      	bcs.n	8008416 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	b29a      	uxth	r2, r3
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60da      	str	r2, [r3, #12]
 8008414:	e002      	b.n	800841c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2201      	movs	r2, #1
 8008420:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2201      	movs	r2, #1
 8008428:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2200      	movs	r2, #0
 8008430:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2200      	movs	r2, #0
 8008436:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008438:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800843c:	4618      	mov	r0, r3
 800843e:	3730      	adds	r7, #48	@ 0x30
 8008440:	46bd      	mov	sp, r7
 8008442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008446:	bf00      	nop
 8008448:	0800e5d0 	.word	0x0800e5d0
 800844c:	00f42400 	.word	0x00f42400

08008450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01a      	beq.n	8008566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800854e:	d10a      	bne.n	8008566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b098      	sub	sp, #96	@ 0x60
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085a4:	f7fb ff9c 	bl	80044e0 <HAL_GetTick>
 80085a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d12f      	bne.n	8008618 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f88e 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d022      	beq.n	8008618 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e6      	bne.n	80085d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e063      	b.n	80086e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0304 	and.w	r3, r3, #4
 8008622:	2b04      	cmp	r3, #4
 8008624:	d149      	bne.n	80086ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008626:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800862e:	2200      	movs	r2, #0
 8008630:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f857 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d03c      	beq.n	80086ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	623b      	str	r3, [r7, #32]
   return(result);
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800865e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008660:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	60fb      	str	r3, [r7, #12]
   return(result);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f023 0301 	bic.w	r3, r3, #1
 8008688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008692:	61fa      	str	r2, [r7, #28]
 8008694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	69b9      	ldr	r1, [r7, #24]
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	617b      	str	r3, [r7, #20]
   return(result);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e5      	bne.n	8008672 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e012      	b.n	80086e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3758      	adds	r7, #88	@ 0x58
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f8:	e04f      	b.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008700:	d04b      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fb feed 	bl	80044e0 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <UART_WaitOnFlagUntilTimeout+0x30>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e04e      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d037      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b80      	cmp	r3, #128	@ 0x80
 800872e:	d034      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d031      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f003 0308 	and.w	r3, r3, #8
 8008740:	2b08      	cmp	r3, #8
 8008742:	d110      	bne.n	8008766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2208      	movs	r2, #8
 800874a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f838 	bl	80087c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2208      	movs	r2, #8
 8008756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e029      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008774:	d111      	bne.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800877e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 f81e 	bl	80087c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e00f      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d0a0      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b095      	sub	sp, #84	@ 0x54
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e6      	bne.n	80087ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3308      	adds	r3, #8
 8008802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	61fb      	str	r3, [r7, #28]
   return(result);
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008812:	f023 0301 	bic.w	r3, r3, #1
 8008816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008820:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e3      	bne.n	80087fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008838:	2b01      	cmp	r3, #1
 800883a:	d118      	bne.n	800886e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	60bb      	str	r3, [r7, #8]
   return(result);
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f023 0310 	bic.w	r3, r3, #16
 8008850:	647b      	str	r3, [r7, #68]	@ 0x44
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800885a:	61bb      	str	r3, [r7, #24]
 800885c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6979      	ldr	r1, [r7, #20]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	613b      	str	r3, [r7, #16]
   return(result);
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e6      	bne.n	800883c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008882:	bf00      	nop
 8008884:	3754      	adds	r7, #84	@ 0x54
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e027      	b.n	80088f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2224      	movs	r2, #36	@ 0x24
 80088b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0201 	bic.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008914:	2302      	movs	r3, #2
 8008916:	e02d      	b.n	8008974 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2224      	movs	r2, #36	@ 0x24
 8008924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0201 	bic.w	r2, r2, #1
 800893e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f84f 	bl	80089f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008990:	2302      	movs	r3, #2
 8008992:	e02d      	b.n	80089f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2224      	movs	r2, #36	@ 0x24
 80089a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 0201 	bic.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f811 	bl	80089f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d108      	bne.n	8008a1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a18:	e031      	b.n	8008a7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a1e:	2308      	movs	r3, #8
 8008a20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	0e5b      	lsrs	r3, r3, #25
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0307 	and.w	r3, r3, #7
 8008a30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	0f5b      	lsrs	r3, r3, #29
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	7b3a      	ldrb	r2, [r7, #12]
 8008a46:	4911      	ldr	r1, [pc, #68]	@ (8008a8c <UARTEx_SetNbDataToProcess+0x94>)
 8008a48:	5c8a      	ldrb	r2, [r1, r2]
 8008a4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a4e:	7b3a      	ldrb	r2, [r7, #12]
 8008a50:	490f      	ldr	r1, [pc, #60]	@ (8008a90 <UARTEx_SetNbDataToProcess+0x98>)
 8008a52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a54:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	7b7a      	ldrb	r2, [r7, #13]
 8008a64:	4909      	ldr	r1, [pc, #36]	@ (8008a8c <UARTEx_SetNbDataToProcess+0x94>)
 8008a66:	5c8a      	ldrb	r2, [r1, r2]
 8008a68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a6c:	7b7a      	ldrb	r2, [r7, #13]
 8008a6e:	4908      	ldr	r1, [pc, #32]	@ (8008a90 <UARTEx_SetNbDataToProcess+0x98>)
 8008a70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a72:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a7e:	bf00      	nop
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	0800e5e8 	.word	0x0800e5e8
 8008a90:	0800e5f0 	.word	0x0800e5f0

08008a94 <__cvt>:
 8008a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a98:	ec57 6b10 	vmov	r6, r7, d0
 8008a9c:	2f00      	cmp	r7, #0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	bfbb      	ittet	lt
 8008aa6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008aaa:	461f      	movlt	r7, r3
 8008aac:	2300      	movge	r3, #0
 8008aae:	232d      	movlt	r3, #45	@ 0x2d
 8008ab0:	700b      	strb	r3, [r1, #0]
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ab8:	4691      	mov	r9, r2
 8008aba:	f023 0820 	bic.w	r8, r3, #32
 8008abe:	bfbc      	itt	lt
 8008ac0:	4632      	movlt	r2, r6
 8008ac2:	4616      	movlt	r6, r2
 8008ac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ac8:	d005      	beq.n	8008ad6 <__cvt+0x42>
 8008aca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008ace:	d100      	bne.n	8008ad2 <__cvt+0x3e>
 8008ad0:	3401      	adds	r4, #1
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	e000      	b.n	8008ad8 <__cvt+0x44>
 8008ad6:	2103      	movs	r1, #3
 8008ad8:	ab03      	add	r3, sp, #12
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	ab02      	add	r3, sp, #8
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	ec47 6b10 	vmov	d0, r6, r7
 8008ae4:	4653      	mov	r3, sl
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	f001 f8b6 	bl	8009c58 <_dtoa_r>
 8008aec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008af0:	4605      	mov	r5, r0
 8008af2:	d119      	bne.n	8008b28 <__cvt+0x94>
 8008af4:	f019 0f01 	tst.w	r9, #1
 8008af8:	d00e      	beq.n	8008b18 <__cvt+0x84>
 8008afa:	eb00 0904 	add.w	r9, r0, r4
 8008afe:	2200      	movs	r2, #0
 8008b00:	2300      	movs	r3, #0
 8008b02:	4630      	mov	r0, r6
 8008b04:	4639      	mov	r1, r7
 8008b06:	f7f8 f807 	bl	8000b18 <__aeabi_dcmpeq>
 8008b0a:	b108      	cbz	r0, 8008b10 <__cvt+0x7c>
 8008b0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b10:	2230      	movs	r2, #48	@ 0x30
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	454b      	cmp	r3, r9
 8008b16:	d31e      	bcc.n	8008b56 <__cvt+0xc2>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b1c:	1b5b      	subs	r3, r3, r5
 8008b1e:	4628      	mov	r0, r5
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	b004      	add	sp, #16
 8008b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b2c:	eb00 0904 	add.w	r9, r0, r4
 8008b30:	d1e5      	bne.n	8008afe <__cvt+0x6a>
 8008b32:	7803      	ldrb	r3, [r0, #0]
 8008b34:	2b30      	cmp	r3, #48	@ 0x30
 8008b36:	d10a      	bne.n	8008b4e <__cvt+0xba>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8008b44:	b918      	cbnz	r0, 8008b4e <__cvt+0xba>
 8008b46:	f1c4 0401 	rsb	r4, r4, #1
 8008b4a:	f8ca 4000 	str.w	r4, [sl]
 8008b4e:	f8da 3000 	ldr.w	r3, [sl]
 8008b52:	4499      	add	r9, r3
 8008b54:	e7d3      	b.n	8008afe <__cvt+0x6a>
 8008b56:	1c59      	adds	r1, r3, #1
 8008b58:	9103      	str	r1, [sp, #12]
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	e7d9      	b.n	8008b12 <__cvt+0x7e>

08008b5e <__exponent>:
 8008b5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b60:	2900      	cmp	r1, #0
 8008b62:	bfba      	itte	lt
 8008b64:	4249      	neglt	r1, r1
 8008b66:	232d      	movlt	r3, #45	@ 0x2d
 8008b68:	232b      	movge	r3, #43	@ 0x2b
 8008b6a:	2909      	cmp	r1, #9
 8008b6c:	7002      	strb	r2, [r0, #0]
 8008b6e:	7043      	strb	r3, [r0, #1]
 8008b70:	dd29      	ble.n	8008bc6 <__exponent+0x68>
 8008b72:	f10d 0307 	add.w	r3, sp, #7
 8008b76:	461d      	mov	r5, r3
 8008b78:	270a      	movs	r7, #10
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b80:	fb07 1416 	mls	r4, r7, r6, r1
 8008b84:	3430      	adds	r4, #48	@ 0x30
 8008b86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	2c63      	cmp	r4, #99	@ 0x63
 8008b8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008b92:	4631      	mov	r1, r6
 8008b94:	dcf1      	bgt.n	8008b7a <__exponent+0x1c>
 8008b96:	3130      	adds	r1, #48	@ 0x30
 8008b98:	1e94      	subs	r4, r2, #2
 8008b9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b9e:	1c41      	adds	r1, r0, #1
 8008ba0:	4623      	mov	r3, r4
 8008ba2:	42ab      	cmp	r3, r5
 8008ba4:	d30a      	bcc.n	8008bbc <__exponent+0x5e>
 8008ba6:	f10d 0309 	add.w	r3, sp, #9
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	42ac      	cmp	r4, r5
 8008bae:	bf88      	it	hi
 8008bb0:	2300      	movhi	r3, #0
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	4403      	add	r3, r0
 8008bb6:	1a18      	subs	r0, r3, r0
 8008bb8:	b003      	add	sp, #12
 8008bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008bc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008bc4:	e7ed      	b.n	8008ba2 <__exponent+0x44>
 8008bc6:	2330      	movs	r3, #48	@ 0x30
 8008bc8:	3130      	adds	r1, #48	@ 0x30
 8008bca:	7083      	strb	r3, [r0, #2]
 8008bcc:	70c1      	strb	r1, [r0, #3]
 8008bce:	1d03      	adds	r3, r0, #4
 8008bd0:	e7f1      	b.n	8008bb6 <__exponent+0x58>
	...

08008bd4 <_printf_float>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	b08d      	sub	sp, #52	@ 0x34
 8008bda:	460c      	mov	r4, r1
 8008bdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008be0:	4616      	mov	r6, r2
 8008be2:	461f      	mov	r7, r3
 8008be4:	4605      	mov	r5, r0
 8008be6:	f000 ff23 	bl	8009a30 <_localeconv_r>
 8008bea:	6803      	ldr	r3, [r0, #0]
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f7 fb66 	bl	80002c0 <strlen>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfc:	9005      	str	r0, [sp, #20]
 8008bfe:	3307      	adds	r3, #7
 8008c00:	f023 0307 	bic.w	r3, r3, #7
 8008c04:	f103 0208 	add.w	r2, r3, #8
 8008c08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c0c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c10:	f8c8 2000 	str.w	r2, [r8]
 8008c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c1c:	9307      	str	r3, [sp, #28]
 8008c1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c2a:	4b9c      	ldr	r3, [pc, #624]	@ (8008e9c <_printf_float+0x2c8>)
 8008c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c30:	f7f7 ffa4 	bl	8000b7c <__aeabi_dcmpun>
 8008c34:	bb70      	cbnz	r0, 8008c94 <_printf_float+0xc0>
 8008c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c3a:	4b98      	ldr	r3, [pc, #608]	@ (8008e9c <_printf_float+0x2c8>)
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c40:	f7f7 ff7e 	bl	8000b40 <__aeabi_dcmple>
 8008c44:	bb30      	cbnz	r0, 8008c94 <_printf_float+0xc0>
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	f7f7 ff6d 	bl	8000b2c <__aeabi_dcmplt>
 8008c52:	b110      	cbz	r0, 8008c5a <_printf_float+0x86>
 8008c54:	232d      	movs	r3, #45	@ 0x2d
 8008c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c5a:	4a91      	ldr	r2, [pc, #580]	@ (8008ea0 <_printf_float+0x2cc>)
 8008c5c:	4b91      	ldr	r3, [pc, #580]	@ (8008ea4 <_printf_float+0x2d0>)
 8008c5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c62:	bf94      	ite	ls
 8008c64:	4690      	movls	r8, r2
 8008c66:	4698      	movhi	r8, r3
 8008c68:	2303      	movs	r3, #3
 8008c6a:	6123      	str	r3, [r4, #16]
 8008c6c:	f02b 0304 	bic.w	r3, fp, #4
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	f04f 0900 	mov.w	r9, #0
 8008c76:	9700      	str	r7, [sp, #0]
 8008c78:	4633      	mov	r3, r6
 8008c7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 f9d2 	bl	8009028 <_printf_common>
 8008c84:	3001      	adds	r0, #1
 8008c86:	f040 808d 	bne.w	8008da4 <_printf_float+0x1d0>
 8008c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c8e:	b00d      	add	sp, #52	@ 0x34
 8008c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c94:	4642      	mov	r2, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	4640      	mov	r0, r8
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	f7f7 ff6e 	bl	8000b7c <__aeabi_dcmpun>
 8008ca0:	b140      	cbz	r0, 8008cb4 <_printf_float+0xe0>
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfbc      	itt	lt
 8008ca8:	232d      	movlt	r3, #45	@ 0x2d
 8008caa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cae:	4a7e      	ldr	r2, [pc, #504]	@ (8008ea8 <_printf_float+0x2d4>)
 8008cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8008eac <_printf_float+0x2d8>)
 8008cb2:	e7d4      	b.n	8008c5e <_printf_float+0x8a>
 8008cb4:	6863      	ldr	r3, [r4, #4]
 8008cb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008cba:	9206      	str	r2, [sp, #24]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	d13b      	bne.n	8008d38 <_printf_float+0x164>
 8008cc0:	2306      	movs	r3, #6
 8008cc2:	6063      	str	r3, [r4, #4]
 8008cc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008cc8:	2300      	movs	r3, #0
 8008cca:	6022      	str	r2, [r4, #0]
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	ab0a      	add	r3, sp, #40	@ 0x28
 8008cd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008cd4:	ab09      	add	r3, sp, #36	@ 0x24
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	6861      	ldr	r1, [r4, #4]
 8008cda:	ec49 8b10 	vmov	d0, r8, r9
 8008cde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f7ff fed6 	bl	8008a94 <__cvt>
 8008ce8:	9b06      	ldr	r3, [sp, #24]
 8008cea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cec:	2b47      	cmp	r3, #71	@ 0x47
 8008cee:	4680      	mov	r8, r0
 8008cf0:	d129      	bne.n	8008d46 <_printf_float+0x172>
 8008cf2:	1cc8      	adds	r0, r1, #3
 8008cf4:	db02      	blt.n	8008cfc <_printf_float+0x128>
 8008cf6:	6863      	ldr	r3, [r4, #4]
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	dd41      	ble.n	8008d80 <_printf_float+0x1ac>
 8008cfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d00:	fa5f fa8a 	uxtb.w	sl, sl
 8008d04:	3901      	subs	r1, #1
 8008d06:	4652      	mov	r2, sl
 8008d08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d0e:	f7ff ff26 	bl	8008b5e <__exponent>
 8008d12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d14:	1813      	adds	r3, r2, r0
 8008d16:	2a01      	cmp	r2, #1
 8008d18:	4681      	mov	r9, r0
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	dc02      	bgt.n	8008d24 <_printf_float+0x150>
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	07d2      	lsls	r2, r2, #31
 8008d22:	d501      	bpl.n	8008d28 <_printf_float+0x154>
 8008d24:	3301      	adds	r3, #1
 8008d26:	6123      	str	r3, [r4, #16]
 8008d28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0a2      	beq.n	8008c76 <_printf_float+0xa2>
 8008d30:	232d      	movs	r3, #45	@ 0x2d
 8008d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d36:	e79e      	b.n	8008c76 <_printf_float+0xa2>
 8008d38:	9a06      	ldr	r2, [sp, #24]
 8008d3a:	2a47      	cmp	r2, #71	@ 0x47
 8008d3c:	d1c2      	bne.n	8008cc4 <_printf_float+0xf0>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1c0      	bne.n	8008cc4 <_printf_float+0xf0>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e7bd      	b.n	8008cc2 <_printf_float+0xee>
 8008d46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d4a:	d9db      	bls.n	8008d04 <_printf_float+0x130>
 8008d4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d50:	d118      	bne.n	8008d84 <_printf_float+0x1b0>
 8008d52:	2900      	cmp	r1, #0
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	dd0b      	ble.n	8008d70 <_printf_float+0x19c>
 8008d58:	6121      	str	r1, [r4, #16]
 8008d5a:	b913      	cbnz	r3, 8008d62 <_printf_float+0x18e>
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	07d0      	lsls	r0, r2, #31
 8008d60:	d502      	bpl.n	8008d68 <_printf_float+0x194>
 8008d62:	3301      	adds	r3, #1
 8008d64:	440b      	add	r3, r1
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d6a:	f04f 0900 	mov.w	r9, #0
 8008d6e:	e7db      	b.n	8008d28 <_printf_float+0x154>
 8008d70:	b913      	cbnz	r3, 8008d78 <_printf_float+0x1a4>
 8008d72:	6822      	ldr	r2, [r4, #0]
 8008d74:	07d2      	lsls	r2, r2, #31
 8008d76:	d501      	bpl.n	8008d7c <_printf_float+0x1a8>
 8008d78:	3302      	adds	r3, #2
 8008d7a:	e7f4      	b.n	8008d66 <_printf_float+0x192>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e7f2      	b.n	8008d66 <_printf_float+0x192>
 8008d80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d86:	4299      	cmp	r1, r3
 8008d88:	db05      	blt.n	8008d96 <_printf_float+0x1c2>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	6121      	str	r1, [r4, #16]
 8008d8e:	07d8      	lsls	r0, r3, #31
 8008d90:	d5ea      	bpl.n	8008d68 <_printf_float+0x194>
 8008d92:	1c4b      	adds	r3, r1, #1
 8008d94:	e7e7      	b.n	8008d66 <_printf_float+0x192>
 8008d96:	2900      	cmp	r1, #0
 8008d98:	bfd4      	ite	le
 8008d9a:	f1c1 0202 	rsble	r2, r1, #2
 8008d9e:	2201      	movgt	r2, #1
 8008da0:	4413      	add	r3, r2
 8008da2:	e7e0      	b.n	8008d66 <_printf_float+0x192>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	055a      	lsls	r2, r3, #21
 8008da8:	d407      	bmi.n	8008dba <_printf_float+0x1e6>
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	4642      	mov	r2, r8
 8008dae:	4631      	mov	r1, r6
 8008db0:	4628      	mov	r0, r5
 8008db2:	47b8      	blx	r7
 8008db4:	3001      	adds	r0, #1
 8008db6:	d12b      	bne.n	8008e10 <_printf_float+0x23c>
 8008db8:	e767      	b.n	8008c8a <_printf_float+0xb6>
 8008dba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dbe:	f240 80dd 	bls.w	8008f7c <_printf_float+0x3a8>
 8008dc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f7f7 fea5 	bl	8000b18 <__aeabi_dcmpeq>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d033      	beq.n	8008e3a <_printf_float+0x266>
 8008dd2:	4a37      	ldr	r2, [pc, #220]	@ (8008eb0 <_printf_float+0x2dc>)
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	4631      	mov	r1, r6
 8008dd8:	4628      	mov	r0, r5
 8008dda:	47b8      	blx	r7
 8008ddc:	3001      	adds	r0, #1
 8008dde:	f43f af54 	beq.w	8008c8a <_printf_float+0xb6>
 8008de2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008de6:	4543      	cmp	r3, r8
 8008de8:	db02      	blt.n	8008df0 <_printf_float+0x21c>
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	07d8      	lsls	r0, r3, #31
 8008dee:	d50f      	bpl.n	8008e10 <_printf_float+0x23c>
 8008df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f af45 	beq.w	8008c8a <_printf_float+0xb6>
 8008e00:	f04f 0900 	mov.w	r9, #0
 8008e04:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008e08:	f104 0a1a 	add.w	sl, r4, #26
 8008e0c:	45c8      	cmp	r8, r9
 8008e0e:	dc09      	bgt.n	8008e24 <_printf_float+0x250>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	079b      	lsls	r3, r3, #30
 8008e14:	f100 8103 	bmi.w	800901e <_printf_float+0x44a>
 8008e18:	68e0      	ldr	r0, [r4, #12]
 8008e1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e1c:	4298      	cmp	r0, r3
 8008e1e:	bfb8      	it	lt
 8008e20:	4618      	movlt	r0, r3
 8008e22:	e734      	b.n	8008c8e <_printf_float+0xba>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4652      	mov	r2, sl
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	47b8      	blx	r7
 8008e2e:	3001      	adds	r0, #1
 8008e30:	f43f af2b 	beq.w	8008c8a <_printf_float+0xb6>
 8008e34:	f109 0901 	add.w	r9, r9, #1
 8008e38:	e7e8      	b.n	8008e0c <_printf_float+0x238>
 8008e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc39      	bgt.n	8008eb4 <_printf_float+0x2e0>
 8008e40:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb0 <_printf_float+0x2dc>)
 8008e42:	2301      	movs	r3, #1
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	f43f af1d 	beq.w	8008c8a <_printf_float+0xb6>
 8008e50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e54:	ea59 0303 	orrs.w	r3, r9, r3
 8008e58:	d102      	bne.n	8008e60 <_printf_float+0x28c>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	07d9      	lsls	r1, r3, #31
 8008e5e:	d5d7      	bpl.n	8008e10 <_printf_float+0x23c>
 8008e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e64:	4631      	mov	r1, r6
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	f43f af0d 	beq.w	8008c8a <_printf_float+0xb6>
 8008e70:	f04f 0a00 	mov.w	sl, #0
 8008e74:	f104 0b1a 	add.w	fp, r4, #26
 8008e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7a:	425b      	negs	r3, r3
 8008e7c:	4553      	cmp	r3, sl
 8008e7e:	dc01      	bgt.n	8008e84 <_printf_float+0x2b0>
 8008e80:	464b      	mov	r3, r9
 8008e82:	e793      	b.n	8008dac <_printf_float+0x1d8>
 8008e84:	2301      	movs	r3, #1
 8008e86:	465a      	mov	r2, fp
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	f43f aefb 	beq.w	8008c8a <_printf_float+0xb6>
 8008e94:	f10a 0a01 	add.w	sl, sl, #1
 8008e98:	e7ee      	b.n	8008e78 <_printf_float+0x2a4>
 8008e9a:	bf00      	nop
 8008e9c:	7fefffff 	.word	0x7fefffff
 8008ea0:	0800e5f8 	.word	0x0800e5f8
 8008ea4:	0800e5fc 	.word	0x0800e5fc
 8008ea8:	0800e600 	.word	0x0800e600
 8008eac:	0800e604 	.word	0x0800e604
 8008eb0:	0800e608 	.word	0x0800e608
 8008eb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008eb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008eba:	4553      	cmp	r3, sl
 8008ebc:	bfa8      	it	ge
 8008ebe:	4653      	movge	r3, sl
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	4699      	mov	r9, r3
 8008ec4:	dc36      	bgt.n	8008f34 <_printf_float+0x360>
 8008ec6:	f04f 0b00 	mov.w	fp, #0
 8008eca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ece:	f104 021a 	add.w	r2, r4, #26
 8008ed2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ed4:	9306      	str	r3, [sp, #24]
 8008ed6:	eba3 0309 	sub.w	r3, r3, r9
 8008eda:	455b      	cmp	r3, fp
 8008edc:	dc31      	bgt.n	8008f42 <_printf_float+0x36e>
 8008ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee0:	459a      	cmp	sl, r3
 8008ee2:	dc3a      	bgt.n	8008f5a <_printf_float+0x386>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	07da      	lsls	r2, r3, #31
 8008ee8:	d437      	bmi.n	8008f5a <_printf_float+0x386>
 8008eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eec:	ebaa 0903 	sub.w	r9, sl, r3
 8008ef0:	9b06      	ldr	r3, [sp, #24]
 8008ef2:	ebaa 0303 	sub.w	r3, sl, r3
 8008ef6:	4599      	cmp	r9, r3
 8008ef8:	bfa8      	it	ge
 8008efa:	4699      	movge	r9, r3
 8008efc:	f1b9 0f00 	cmp.w	r9, #0
 8008f00:	dc33      	bgt.n	8008f6a <_printf_float+0x396>
 8008f02:	f04f 0800 	mov.w	r8, #0
 8008f06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f0a:	f104 0b1a 	add.w	fp, r4, #26
 8008f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f10:	ebaa 0303 	sub.w	r3, sl, r3
 8008f14:	eba3 0309 	sub.w	r3, r3, r9
 8008f18:	4543      	cmp	r3, r8
 8008f1a:	f77f af79 	ble.w	8008e10 <_printf_float+0x23c>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	465a      	mov	r2, fp
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f43f aeae 	beq.w	8008c8a <_printf_float+0xb6>
 8008f2e:	f108 0801 	add.w	r8, r8, #1
 8008f32:	e7ec      	b.n	8008f0e <_printf_float+0x33a>
 8008f34:	4642      	mov	r2, r8
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	d1c2      	bne.n	8008ec6 <_printf_float+0x2f2>
 8008f40:	e6a3      	b.n	8008c8a <_printf_float+0xb6>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	9206      	str	r2, [sp, #24]
 8008f4a:	47b8      	blx	r7
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	f43f ae9c 	beq.w	8008c8a <_printf_float+0xb6>
 8008f52:	9a06      	ldr	r2, [sp, #24]
 8008f54:	f10b 0b01 	add.w	fp, fp, #1
 8008f58:	e7bb      	b.n	8008ed2 <_printf_float+0x2fe>
 8008f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4628      	mov	r0, r5
 8008f62:	47b8      	blx	r7
 8008f64:	3001      	adds	r0, #1
 8008f66:	d1c0      	bne.n	8008eea <_printf_float+0x316>
 8008f68:	e68f      	b.n	8008c8a <_printf_float+0xb6>
 8008f6a:	9a06      	ldr	r2, [sp, #24]
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	4442      	add	r2, r8
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	d1c3      	bne.n	8008f02 <_printf_float+0x32e>
 8008f7a:	e686      	b.n	8008c8a <_printf_float+0xb6>
 8008f7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f80:	f1ba 0f01 	cmp.w	sl, #1
 8008f84:	dc01      	bgt.n	8008f8a <_printf_float+0x3b6>
 8008f86:	07db      	lsls	r3, r3, #31
 8008f88:	d536      	bpl.n	8008ff8 <_printf_float+0x424>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4642      	mov	r2, r8
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	f43f ae78 	beq.w	8008c8a <_printf_float+0xb6>
 8008f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f43f ae70 	beq.w	8008c8a <_printf_float+0xb6>
 8008faa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008fb6:	f7f7 fdaf 	bl	8000b18 <__aeabi_dcmpeq>
 8008fba:	b9c0      	cbnz	r0, 8008fee <_printf_float+0x41a>
 8008fbc:	4653      	mov	r3, sl
 8008fbe:	f108 0201 	add.w	r2, r8, #1
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d10c      	bne.n	8008fe6 <_printf_float+0x412>
 8008fcc:	e65d      	b.n	8008c8a <_printf_float+0xb6>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	465a      	mov	r2, fp
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b8      	blx	r7
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f43f ae56 	beq.w	8008c8a <_printf_float+0xb6>
 8008fde:	f108 0801 	add.w	r8, r8, #1
 8008fe2:	45d0      	cmp	r8, sl
 8008fe4:	dbf3      	blt.n	8008fce <_printf_float+0x3fa>
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008fec:	e6df      	b.n	8008dae <_printf_float+0x1da>
 8008fee:	f04f 0800 	mov.w	r8, #0
 8008ff2:	f104 0b1a 	add.w	fp, r4, #26
 8008ff6:	e7f4      	b.n	8008fe2 <_printf_float+0x40e>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	4642      	mov	r2, r8
 8008ffc:	e7e1      	b.n	8008fc2 <_printf_float+0x3ee>
 8008ffe:	2301      	movs	r3, #1
 8009000:	464a      	mov	r2, r9
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	f43f ae3e 	beq.w	8008c8a <_printf_float+0xb6>
 800900e:	f108 0801 	add.w	r8, r8, #1
 8009012:	68e3      	ldr	r3, [r4, #12]
 8009014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009016:	1a5b      	subs	r3, r3, r1
 8009018:	4543      	cmp	r3, r8
 800901a:	dcf0      	bgt.n	8008ffe <_printf_float+0x42a>
 800901c:	e6fc      	b.n	8008e18 <_printf_float+0x244>
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	f104 0919 	add.w	r9, r4, #25
 8009026:	e7f4      	b.n	8009012 <_printf_float+0x43e>

08009028 <_printf_common>:
 8009028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	4616      	mov	r6, r2
 800902e:	4698      	mov	r8, r3
 8009030:	688a      	ldr	r2, [r1, #8]
 8009032:	690b      	ldr	r3, [r1, #16]
 8009034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009038:	4293      	cmp	r3, r2
 800903a:	bfb8      	it	lt
 800903c:	4613      	movlt	r3, r2
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009044:	4607      	mov	r7, r0
 8009046:	460c      	mov	r4, r1
 8009048:	b10a      	cbz	r2, 800904e <_printf_common+0x26>
 800904a:	3301      	adds	r3, #1
 800904c:	6033      	str	r3, [r6, #0]
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	0699      	lsls	r1, r3, #26
 8009052:	bf42      	ittt	mi
 8009054:	6833      	ldrmi	r3, [r6, #0]
 8009056:	3302      	addmi	r3, #2
 8009058:	6033      	strmi	r3, [r6, #0]
 800905a:	6825      	ldr	r5, [r4, #0]
 800905c:	f015 0506 	ands.w	r5, r5, #6
 8009060:	d106      	bne.n	8009070 <_printf_common+0x48>
 8009062:	f104 0a19 	add.w	sl, r4, #25
 8009066:	68e3      	ldr	r3, [r4, #12]
 8009068:	6832      	ldr	r2, [r6, #0]
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	42ab      	cmp	r3, r5
 800906e:	dc26      	bgt.n	80090be <_printf_common+0x96>
 8009070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009074:	6822      	ldr	r2, [r4, #0]
 8009076:	3b00      	subs	r3, #0
 8009078:	bf18      	it	ne
 800907a:	2301      	movne	r3, #1
 800907c:	0692      	lsls	r2, r2, #26
 800907e:	d42b      	bmi.n	80090d8 <_printf_common+0xb0>
 8009080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009084:	4641      	mov	r1, r8
 8009086:	4638      	mov	r0, r7
 8009088:	47c8      	blx	r9
 800908a:	3001      	adds	r0, #1
 800908c:	d01e      	beq.n	80090cc <_printf_common+0xa4>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	6922      	ldr	r2, [r4, #16]
 8009092:	f003 0306 	and.w	r3, r3, #6
 8009096:	2b04      	cmp	r3, #4
 8009098:	bf02      	ittt	eq
 800909a:	68e5      	ldreq	r5, [r4, #12]
 800909c:	6833      	ldreq	r3, [r6, #0]
 800909e:	1aed      	subeq	r5, r5, r3
 80090a0:	68a3      	ldr	r3, [r4, #8]
 80090a2:	bf0c      	ite	eq
 80090a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090a8:	2500      	movne	r5, #0
 80090aa:	4293      	cmp	r3, r2
 80090ac:	bfc4      	itt	gt
 80090ae:	1a9b      	subgt	r3, r3, r2
 80090b0:	18ed      	addgt	r5, r5, r3
 80090b2:	2600      	movs	r6, #0
 80090b4:	341a      	adds	r4, #26
 80090b6:	42b5      	cmp	r5, r6
 80090b8:	d11a      	bne.n	80090f0 <_printf_common+0xc8>
 80090ba:	2000      	movs	r0, #0
 80090bc:	e008      	b.n	80090d0 <_printf_common+0xa8>
 80090be:	2301      	movs	r3, #1
 80090c0:	4652      	mov	r2, sl
 80090c2:	4641      	mov	r1, r8
 80090c4:	4638      	mov	r0, r7
 80090c6:	47c8      	blx	r9
 80090c8:	3001      	adds	r0, #1
 80090ca:	d103      	bne.n	80090d4 <_printf_common+0xac>
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d4:	3501      	adds	r5, #1
 80090d6:	e7c6      	b.n	8009066 <_printf_common+0x3e>
 80090d8:	18e1      	adds	r1, r4, r3
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	2030      	movs	r0, #48	@ 0x30
 80090de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090e2:	4422      	add	r2, r4
 80090e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090ec:	3302      	adds	r3, #2
 80090ee:	e7c7      	b.n	8009080 <_printf_common+0x58>
 80090f0:	2301      	movs	r3, #1
 80090f2:	4622      	mov	r2, r4
 80090f4:	4641      	mov	r1, r8
 80090f6:	4638      	mov	r0, r7
 80090f8:	47c8      	blx	r9
 80090fa:	3001      	adds	r0, #1
 80090fc:	d0e6      	beq.n	80090cc <_printf_common+0xa4>
 80090fe:	3601      	adds	r6, #1
 8009100:	e7d9      	b.n	80090b6 <_printf_common+0x8e>
	...

08009104 <_printf_i>:
 8009104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009108:	7e0f      	ldrb	r7, [r1, #24]
 800910a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800910c:	2f78      	cmp	r7, #120	@ 0x78
 800910e:	4691      	mov	r9, r2
 8009110:	4680      	mov	r8, r0
 8009112:	460c      	mov	r4, r1
 8009114:	469a      	mov	sl, r3
 8009116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800911a:	d807      	bhi.n	800912c <_printf_i+0x28>
 800911c:	2f62      	cmp	r7, #98	@ 0x62
 800911e:	d80a      	bhi.n	8009136 <_printf_i+0x32>
 8009120:	2f00      	cmp	r7, #0
 8009122:	f000 80d2 	beq.w	80092ca <_printf_i+0x1c6>
 8009126:	2f58      	cmp	r7, #88	@ 0x58
 8009128:	f000 80b9 	beq.w	800929e <_printf_i+0x19a>
 800912c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009134:	e03a      	b.n	80091ac <_printf_i+0xa8>
 8009136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800913a:	2b15      	cmp	r3, #21
 800913c:	d8f6      	bhi.n	800912c <_printf_i+0x28>
 800913e:	a101      	add	r1, pc, #4	@ (adr r1, 8009144 <_printf_i+0x40>)
 8009140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009144:	0800919d 	.word	0x0800919d
 8009148:	080091b1 	.word	0x080091b1
 800914c:	0800912d 	.word	0x0800912d
 8009150:	0800912d 	.word	0x0800912d
 8009154:	0800912d 	.word	0x0800912d
 8009158:	0800912d 	.word	0x0800912d
 800915c:	080091b1 	.word	0x080091b1
 8009160:	0800912d 	.word	0x0800912d
 8009164:	0800912d 	.word	0x0800912d
 8009168:	0800912d 	.word	0x0800912d
 800916c:	0800912d 	.word	0x0800912d
 8009170:	080092b1 	.word	0x080092b1
 8009174:	080091db 	.word	0x080091db
 8009178:	0800926b 	.word	0x0800926b
 800917c:	0800912d 	.word	0x0800912d
 8009180:	0800912d 	.word	0x0800912d
 8009184:	080092d3 	.word	0x080092d3
 8009188:	0800912d 	.word	0x0800912d
 800918c:	080091db 	.word	0x080091db
 8009190:	0800912d 	.word	0x0800912d
 8009194:	0800912d 	.word	0x0800912d
 8009198:	08009273 	.word	0x08009273
 800919c:	6833      	ldr	r3, [r6, #0]
 800919e:	1d1a      	adds	r2, r3, #4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6032      	str	r2, [r6, #0]
 80091a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091ac:	2301      	movs	r3, #1
 80091ae:	e09d      	b.n	80092ec <_printf_i+0x1e8>
 80091b0:	6833      	ldr	r3, [r6, #0]
 80091b2:	6820      	ldr	r0, [r4, #0]
 80091b4:	1d19      	adds	r1, r3, #4
 80091b6:	6031      	str	r1, [r6, #0]
 80091b8:	0606      	lsls	r6, r0, #24
 80091ba:	d501      	bpl.n	80091c0 <_printf_i+0xbc>
 80091bc:	681d      	ldr	r5, [r3, #0]
 80091be:	e003      	b.n	80091c8 <_printf_i+0xc4>
 80091c0:	0645      	lsls	r5, r0, #25
 80091c2:	d5fb      	bpl.n	80091bc <_printf_i+0xb8>
 80091c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	da03      	bge.n	80091d4 <_printf_i+0xd0>
 80091cc:	232d      	movs	r3, #45	@ 0x2d
 80091ce:	426d      	negs	r5, r5
 80091d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091d4:	4859      	ldr	r0, [pc, #356]	@ (800933c <_printf_i+0x238>)
 80091d6:	230a      	movs	r3, #10
 80091d8:	e011      	b.n	80091fe <_printf_i+0xfa>
 80091da:	6821      	ldr	r1, [r4, #0]
 80091dc:	6833      	ldr	r3, [r6, #0]
 80091de:	0608      	lsls	r0, r1, #24
 80091e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80091e4:	d402      	bmi.n	80091ec <_printf_i+0xe8>
 80091e6:	0649      	lsls	r1, r1, #25
 80091e8:	bf48      	it	mi
 80091ea:	b2ad      	uxthmi	r5, r5
 80091ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80091ee:	4853      	ldr	r0, [pc, #332]	@ (800933c <_printf_i+0x238>)
 80091f0:	6033      	str	r3, [r6, #0]
 80091f2:	bf14      	ite	ne
 80091f4:	230a      	movne	r3, #10
 80091f6:	2308      	moveq	r3, #8
 80091f8:	2100      	movs	r1, #0
 80091fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091fe:	6866      	ldr	r6, [r4, #4]
 8009200:	60a6      	str	r6, [r4, #8]
 8009202:	2e00      	cmp	r6, #0
 8009204:	bfa2      	ittt	ge
 8009206:	6821      	ldrge	r1, [r4, #0]
 8009208:	f021 0104 	bicge.w	r1, r1, #4
 800920c:	6021      	strge	r1, [r4, #0]
 800920e:	b90d      	cbnz	r5, 8009214 <_printf_i+0x110>
 8009210:	2e00      	cmp	r6, #0
 8009212:	d04b      	beq.n	80092ac <_printf_i+0x1a8>
 8009214:	4616      	mov	r6, r2
 8009216:	fbb5 f1f3 	udiv	r1, r5, r3
 800921a:	fb03 5711 	mls	r7, r3, r1, r5
 800921e:	5dc7      	ldrb	r7, [r0, r7]
 8009220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009224:	462f      	mov	r7, r5
 8009226:	42bb      	cmp	r3, r7
 8009228:	460d      	mov	r5, r1
 800922a:	d9f4      	bls.n	8009216 <_printf_i+0x112>
 800922c:	2b08      	cmp	r3, #8
 800922e:	d10b      	bne.n	8009248 <_printf_i+0x144>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	07df      	lsls	r7, r3, #31
 8009234:	d508      	bpl.n	8009248 <_printf_i+0x144>
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	6861      	ldr	r1, [r4, #4]
 800923a:	4299      	cmp	r1, r3
 800923c:	bfde      	ittt	le
 800923e:	2330      	movle	r3, #48	@ 0x30
 8009240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009244:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009248:	1b92      	subs	r2, r2, r6
 800924a:	6122      	str	r2, [r4, #16]
 800924c:	f8cd a000 	str.w	sl, [sp]
 8009250:	464b      	mov	r3, r9
 8009252:	aa03      	add	r2, sp, #12
 8009254:	4621      	mov	r1, r4
 8009256:	4640      	mov	r0, r8
 8009258:	f7ff fee6 	bl	8009028 <_printf_common>
 800925c:	3001      	adds	r0, #1
 800925e:	d14a      	bne.n	80092f6 <_printf_i+0x1f2>
 8009260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009264:	b004      	add	sp, #16
 8009266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	f043 0320 	orr.w	r3, r3, #32
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	4833      	ldr	r0, [pc, #204]	@ (8009340 <_printf_i+0x23c>)
 8009274:	2778      	movs	r7, #120	@ 0x78
 8009276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	6831      	ldr	r1, [r6, #0]
 800927e:	061f      	lsls	r7, r3, #24
 8009280:	f851 5b04 	ldr.w	r5, [r1], #4
 8009284:	d402      	bmi.n	800928c <_printf_i+0x188>
 8009286:	065f      	lsls	r7, r3, #25
 8009288:	bf48      	it	mi
 800928a:	b2ad      	uxthmi	r5, r5
 800928c:	6031      	str	r1, [r6, #0]
 800928e:	07d9      	lsls	r1, r3, #31
 8009290:	bf44      	itt	mi
 8009292:	f043 0320 	orrmi.w	r3, r3, #32
 8009296:	6023      	strmi	r3, [r4, #0]
 8009298:	b11d      	cbz	r5, 80092a2 <_printf_i+0x19e>
 800929a:	2310      	movs	r3, #16
 800929c:	e7ac      	b.n	80091f8 <_printf_i+0xf4>
 800929e:	4827      	ldr	r0, [pc, #156]	@ (800933c <_printf_i+0x238>)
 80092a0:	e7e9      	b.n	8009276 <_printf_i+0x172>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	f023 0320 	bic.w	r3, r3, #32
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	e7f6      	b.n	800929a <_printf_i+0x196>
 80092ac:	4616      	mov	r6, r2
 80092ae:	e7bd      	b.n	800922c <_printf_i+0x128>
 80092b0:	6833      	ldr	r3, [r6, #0]
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	6961      	ldr	r1, [r4, #20]
 80092b6:	1d18      	adds	r0, r3, #4
 80092b8:	6030      	str	r0, [r6, #0]
 80092ba:	062e      	lsls	r6, r5, #24
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	d501      	bpl.n	80092c4 <_printf_i+0x1c0>
 80092c0:	6019      	str	r1, [r3, #0]
 80092c2:	e002      	b.n	80092ca <_printf_i+0x1c6>
 80092c4:	0668      	lsls	r0, r5, #25
 80092c6:	d5fb      	bpl.n	80092c0 <_printf_i+0x1bc>
 80092c8:	8019      	strh	r1, [r3, #0]
 80092ca:	2300      	movs	r3, #0
 80092cc:	6123      	str	r3, [r4, #16]
 80092ce:	4616      	mov	r6, r2
 80092d0:	e7bc      	b.n	800924c <_printf_i+0x148>
 80092d2:	6833      	ldr	r3, [r6, #0]
 80092d4:	1d1a      	adds	r2, r3, #4
 80092d6:	6032      	str	r2, [r6, #0]
 80092d8:	681e      	ldr	r6, [r3, #0]
 80092da:	6862      	ldr	r2, [r4, #4]
 80092dc:	2100      	movs	r1, #0
 80092de:	4630      	mov	r0, r6
 80092e0:	f7f6 ff9e 	bl	8000220 <memchr>
 80092e4:	b108      	cbz	r0, 80092ea <_printf_i+0x1e6>
 80092e6:	1b80      	subs	r0, r0, r6
 80092e8:	6060      	str	r0, [r4, #4]
 80092ea:	6863      	ldr	r3, [r4, #4]
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	2300      	movs	r3, #0
 80092f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092f4:	e7aa      	b.n	800924c <_printf_i+0x148>
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	4632      	mov	r2, r6
 80092fa:	4649      	mov	r1, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	47d0      	blx	sl
 8009300:	3001      	adds	r0, #1
 8009302:	d0ad      	beq.n	8009260 <_printf_i+0x15c>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	079b      	lsls	r3, r3, #30
 8009308:	d413      	bmi.n	8009332 <_printf_i+0x22e>
 800930a:	68e0      	ldr	r0, [r4, #12]
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	4298      	cmp	r0, r3
 8009310:	bfb8      	it	lt
 8009312:	4618      	movlt	r0, r3
 8009314:	e7a6      	b.n	8009264 <_printf_i+0x160>
 8009316:	2301      	movs	r3, #1
 8009318:	4632      	mov	r2, r6
 800931a:	4649      	mov	r1, r9
 800931c:	4640      	mov	r0, r8
 800931e:	47d0      	blx	sl
 8009320:	3001      	adds	r0, #1
 8009322:	d09d      	beq.n	8009260 <_printf_i+0x15c>
 8009324:	3501      	adds	r5, #1
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	9903      	ldr	r1, [sp, #12]
 800932a:	1a5b      	subs	r3, r3, r1
 800932c:	42ab      	cmp	r3, r5
 800932e:	dcf2      	bgt.n	8009316 <_printf_i+0x212>
 8009330:	e7eb      	b.n	800930a <_printf_i+0x206>
 8009332:	2500      	movs	r5, #0
 8009334:	f104 0619 	add.w	r6, r4, #25
 8009338:	e7f5      	b.n	8009326 <_printf_i+0x222>
 800933a:	bf00      	nop
 800933c:	0800e60a 	.word	0x0800e60a
 8009340:	0800e61b 	.word	0x0800e61b

08009344 <_scanf_float>:
 8009344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	b087      	sub	sp, #28
 800934a:	4617      	mov	r7, r2
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	688b      	ldr	r3, [r1, #8]
 8009350:	1e5a      	subs	r2, r3, #1
 8009352:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009356:	bf81      	itttt	hi
 8009358:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800935c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009360:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009364:	608b      	strhi	r3, [r1, #8]
 8009366:	680b      	ldr	r3, [r1, #0]
 8009368:	460a      	mov	r2, r1
 800936a:	f04f 0500 	mov.w	r5, #0
 800936e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009372:	f842 3b1c 	str.w	r3, [r2], #28
 8009376:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800937a:	4680      	mov	r8, r0
 800937c:	460c      	mov	r4, r1
 800937e:	bf98      	it	ls
 8009380:	f04f 0b00 	movls.w	fp, #0
 8009384:	9201      	str	r2, [sp, #4]
 8009386:	4616      	mov	r6, r2
 8009388:	46aa      	mov	sl, r5
 800938a:	46a9      	mov	r9, r5
 800938c:	9502      	str	r5, [sp, #8]
 800938e:	68a2      	ldr	r2, [r4, #8]
 8009390:	b152      	cbz	r2, 80093a8 <_scanf_float+0x64>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b4e      	cmp	r3, #78	@ 0x4e
 8009398:	d864      	bhi.n	8009464 <_scanf_float+0x120>
 800939a:	2b40      	cmp	r3, #64	@ 0x40
 800939c:	d83c      	bhi.n	8009418 <_scanf_float+0xd4>
 800939e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80093a2:	b2c8      	uxtb	r0, r1
 80093a4:	280e      	cmp	r0, #14
 80093a6:	d93a      	bls.n	800941e <_scanf_float+0xda>
 80093a8:	f1b9 0f00 	cmp.w	r9, #0
 80093ac:	d003      	beq.n	80093b6 <_scanf_float+0x72>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80093ba:	f1ba 0f01 	cmp.w	sl, #1
 80093be:	f200 8117 	bhi.w	80095f0 <_scanf_float+0x2ac>
 80093c2:	9b01      	ldr	r3, [sp, #4]
 80093c4:	429e      	cmp	r6, r3
 80093c6:	f200 8108 	bhi.w	80095da <_scanf_float+0x296>
 80093ca:	2001      	movs	r0, #1
 80093cc:	b007      	add	sp, #28
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80093d6:	2a0d      	cmp	r2, #13
 80093d8:	d8e6      	bhi.n	80093a8 <_scanf_float+0x64>
 80093da:	a101      	add	r1, pc, #4	@ (adr r1, 80093e0 <_scanf_float+0x9c>)
 80093dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093e0:	08009527 	.word	0x08009527
 80093e4:	080093a9 	.word	0x080093a9
 80093e8:	080093a9 	.word	0x080093a9
 80093ec:	080093a9 	.word	0x080093a9
 80093f0:	08009587 	.word	0x08009587
 80093f4:	0800955f 	.word	0x0800955f
 80093f8:	080093a9 	.word	0x080093a9
 80093fc:	080093a9 	.word	0x080093a9
 8009400:	08009535 	.word	0x08009535
 8009404:	080093a9 	.word	0x080093a9
 8009408:	080093a9 	.word	0x080093a9
 800940c:	080093a9 	.word	0x080093a9
 8009410:	080093a9 	.word	0x080093a9
 8009414:	080094ed 	.word	0x080094ed
 8009418:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800941c:	e7db      	b.n	80093d6 <_scanf_float+0x92>
 800941e:	290e      	cmp	r1, #14
 8009420:	d8c2      	bhi.n	80093a8 <_scanf_float+0x64>
 8009422:	a001      	add	r0, pc, #4	@ (adr r0, 8009428 <_scanf_float+0xe4>)
 8009424:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009428:	080094dd 	.word	0x080094dd
 800942c:	080093a9 	.word	0x080093a9
 8009430:	080094dd 	.word	0x080094dd
 8009434:	08009573 	.word	0x08009573
 8009438:	080093a9 	.word	0x080093a9
 800943c:	08009485 	.word	0x08009485
 8009440:	080094c3 	.word	0x080094c3
 8009444:	080094c3 	.word	0x080094c3
 8009448:	080094c3 	.word	0x080094c3
 800944c:	080094c3 	.word	0x080094c3
 8009450:	080094c3 	.word	0x080094c3
 8009454:	080094c3 	.word	0x080094c3
 8009458:	080094c3 	.word	0x080094c3
 800945c:	080094c3 	.word	0x080094c3
 8009460:	080094c3 	.word	0x080094c3
 8009464:	2b6e      	cmp	r3, #110	@ 0x6e
 8009466:	d809      	bhi.n	800947c <_scanf_float+0x138>
 8009468:	2b60      	cmp	r3, #96	@ 0x60
 800946a:	d8b2      	bhi.n	80093d2 <_scanf_float+0x8e>
 800946c:	2b54      	cmp	r3, #84	@ 0x54
 800946e:	d07b      	beq.n	8009568 <_scanf_float+0x224>
 8009470:	2b59      	cmp	r3, #89	@ 0x59
 8009472:	d199      	bne.n	80093a8 <_scanf_float+0x64>
 8009474:	2d07      	cmp	r5, #7
 8009476:	d197      	bne.n	80093a8 <_scanf_float+0x64>
 8009478:	2508      	movs	r5, #8
 800947a:	e02c      	b.n	80094d6 <_scanf_float+0x192>
 800947c:	2b74      	cmp	r3, #116	@ 0x74
 800947e:	d073      	beq.n	8009568 <_scanf_float+0x224>
 8009480:	2b79      	cmp	r3, #121	@ 0x79
 8009482:	e7f6      	b.n	8009472 <_scanf_float+0x12e>
 8009484:	6821      	ldr	r1, [r4, #0]
 8009486:	05c8      	lsls	r0, r1, #23
 8009488:	d51b      	bpl.n	80094c2 <_scanf_float+0x17e>
 800948a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800948e:	6021      	str	r1, [r4, #0]
 8009490:	f109 0901 	add.w	r9, r9, #1
 8009494:	f1bb 0f00 	cmp.w	fp, #0
 8009498:	d003      	beq.n	80094a2 <_scanf_float+0x15e>
 800949a:	3201      	adds	r2, #1
 800949c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80094a0:	60a2      	str	r2, [r4, #8]
 80094a2:	68a3      	ldr	r3, [r4, #8]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	60a3      	str	r3, [r4, #8]
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	3301      	adds	r3, #1
 80094ac:	6123      	str	r3, [r4, #16]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	607b      	str	r3, [r7, #4]
 80094b6:	f340 8087 	ble.w	80095c8 <_scanf_float+0x284>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	3301      	adds	r3, #1
 80094be:	603b      	str	r3, [r7, #0]
 80094c0:	e765      	b.n	800938e <_scanf_float+0x4a>
 80094c2:	eb1a 0105 	adds.w	r1, sl, r5
 80094c6:	f47f af6f 	bne.w	80093a8 <_scanf_float+0x64>
 80094ca:	6822      	ldr	r2, [r4, #0]
 80094cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80094d0:	6022      	str	r2, [r4, #0]
 80094d2:	460d      	mov	r5, r1
 80094d4:	468a      	mov	sl, r1
 80094d6:	f806 3b01 	strb.w	r3, [r6], #1
 80094da:	e7e2      	b.n	80094a2 <_scanf_float+0x15e>
 80094dc:	6822      	ldr	r2, [r4, #0]
 80094de:	0610      	lsls	r0, r2, #24
 80094e0:	f57f af62 	bpl.w	80093a8 <_scanf_float+0x64>
 80094e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80094e8:	6022      	str	r2, [r4, #0]
 80094ea:	e7f4      	b.n	80094d6 <_scanf_float+0x192>
 80094ec:	f1ba 0f00 	cmp.w	sl, #0
 80094f0:	d10e      	bne.n	8009510 <_scanf_float+0x1cc>
 80094f2:	f1b9 0f00 	cmp.w	r9, #0
 80094f6:	d10e      	bne.n	8009516 <_scanf_float+0x1d2>
 80094f8:	6822      	ldr	r2, [r4, #0]
 80094fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80094fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009502:	d108      	bne.n	8009516 <_scanf_float+0x1d2>
 8009504:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009508:	6022      	str	r2, [r4, #0]
 800950a:	f04f 0a01 	mov.w	sl, #1
 800950e:	e7e2      	b.n	80094d6 <_scanf_float+0x192>
 8009510:	f1ba 0f02 	cmp.w	sl, #2
 8009514:	d055      	beq.n	80095c2 <_scanf_float+0x27e>
 8009516:	2d01      	cmp	r5, #1
 8009518:	d002      	beq.n	8009520 <_scanf_float+0x1dc>
 800951a:	2d04      	cmp	r5, #4
 800951c:	f47f af44 	bne.w	80093a8 <_scanf_float+0x64>
 8009520:	3501      	adds	r5, #1
 8009522:	b2ed      	uxtb	r5, r5
 8009524:	e7d7      	b.n	80094d6 <_scanf_float+0x192>
 8009526:	f1ba 0f01 	cmp.w	sl, #1
 800952a:	f47f af3d 	bne.w	80093a8 <_scanf_float+0x64>
 800952e:	f04f 0a02 	mov.w	sl, #2
 8009532:	e7d0      	b.n	80094d6 <_scanf_float+0x192>
 8009534:	b97d      	cbnz	r5, 8009556 <_scanf_float+0x212>
 8009536:	f1b9 0f00 	cmp.w	r9, #0
 800953a:	f47f af38 	bne.w	80093ae <_scanf_float+0x6a>
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009544:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009548:	f040 8108 	bne.w	800975c <_scanf_float+0x418>
 800954c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009550:	6022      	str	r2, [r4, #0]
 8009552:	2501      	movs	r5, #1
 8009554:	e7bf      	b.n	80094d6 <_scanf_float+0x192>
 8009556:	2d03      	cmp	r5, #3
 8009558:	d0e2      	beq.n	8009520 <_scanf_float+0x1dc>
 800955a:	2d05      	cmp	r5, #5
 800955c:	e7de      	b.n	800951c <_scanf_float+0x1d8>
 800955e:	2d02      	cmp	r5, #2
 8009560:	f47f af22 	bne.w	80093a8 <_scanf_float+0x64>
 8009564:	2503      	movs	r5, #3
 8009566:	e7b6      	b.n	80094d6 <_scanf_float+0x192>
 8009568:	2d06      	cmp	r5, #6
 800956a:	f47f af1d 	bne.w	80093a8 <_scanf_float+0x64>
 800956e:	2507      	movs	r5, #7
 8009570:	e7b1      	b.n	80094d6 <_scanf_float+0x192>
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	0591      	lsls	r1, r2, #22
 8009576:	f57f af17 	bpl.w	80093a8 <_scanf_float+0x64>
 800957a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800957e:	6022      	str	r2, [r4, #0]
 8009580:	f8cd 9008 	str.w	r9, [sp, #8]
 8009584:	e7a7      	b.n	80094d6 <_scanf_float+0x192>
 8009586:	6822      	ldr	r2, [r4, #0]
 8009588:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800958c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009590:	d006      	beq.n	80095a0 <_scanf_float+0x25c>
 8009592:	0550      	lsls	r0, r2, #21
 8009594:	f57f af08 	bpl.w	80093a8 <_scanf_float+0x64>
 8009598:	f1b9 0f00 	cmp.w	r9, #0
 800959c:	f000 80de 	beq.w	800975c <_scanf_float+0x418>
 80095a0:	0591      	lsls	r1, r2, #22
 80095a2:	bf58      	it	pl
 80095a4:	9902      	ldrpl	r1, [sp, #8]
 80095a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095aa:	bf58      	it	pl
 80095ac:	eba9 0101 	subpl.w	r1, r9, r1
 80095b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80095b4:	bf58      	it	pl
 80095b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80095ba:	6022      	str	r2, [r4, #0]
 80095bc:	f04f 0900 	mov.w	r9, #0
 80095c0:	e789      	b.n	80094d6 <_scanf_float+0x192>
 80095c2:	f04f 0a03 	mov.w	sl, #3
 80095c6:	e786      	b.n	80094d6 <_scanf_float+0x192>
 80095c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80095cc:	4639      	mov	r1, r7
 80095ce:	4640      	mov	r0, r8
 80095d0:	4798      	blx	r3
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f43f aedb 	beq.w	800938e <_scanf_float+0x4a>
 80095d8:	e6e6      	b.n	80093a8 <_scanf_float+0x64>
 80095da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095e2:	463a      	mov	r2, r7
 80095e4:	4640      	mov	r0, r8
 80095e6:	4798      	blx	r3
 80095e8:	6923      	ldr	r3, [r4, #16]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	e6e8      	b.n	80093c2 <_scanf_float+0x7e>
 80095f0:	1e6b      	subs	r3, r5, #1
 80095f2:	2b06      	cmp	r3, #6
 80095f4:	d824      	bhi.n	8009640 <_scanf_float+0x2fc>
 80095f6:	2d02      	cmp	r5, #2
 80095f8:	d836      	bhi.n	8009668 <_scanf_float+0x324>
 80095fa:	9b01      	ldr	r3, [sp, #4]
 80095fc:	429e      	cmp	r6, r3
 80095fe:	f67f aee4 	bls.w	80093ca <_scanf_float+0x86>
 8009602:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800960a:	463a      	mov	r2, r7
 800960c:	4640      	mov	r0, r8
 800960e:	4798      	blx	r3
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	3b01      	subs	r3, #1
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	e7f0      	b.n	80095fa <_scanf_float+0x2b6>
 8009618:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800961c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009620:	463a      	mov	r2, r7
 8009622:	4640      	mov	r0, r8
 8009624:	4798      	blx	r3
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	3b01      	subs	r3, #1
 800962a:	6123      	str	r3, [r4, #16]
 800962c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009630:	fa5f fa8a 	uxtb.w	sl, sl
 8009634:	f1ba 0f02 	cmp.w	sl, #2
 8009638:	d1ee      	bne.n	8009618 <_scanf_float+0x2d4>
 800963a:	3d03      	subs	r5, #3
 800963c:	b2ed      	uxtb	r5, r5
 800963e:	1b76      	subs	r6, r6, r5
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	05da      	lsls	r2, r3, #23
 8009644:	d530      	bpl.n	80096a8 <_scanf_float+0x364>
 8009646:	055b      	lsls	r3, r3, #21
 8009648:	d511      	bpl.n	800966e <_scanf_float+0x32a>
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	429e      	cmp	r6, r3
 800964e:	f67f aebc 	bls.w	80093ca <_scanf_float+0x86>
 8009652:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009656:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800965a:	463a      	mov	r2, r7
 800965c:	4640      	mov	r0, r8
 800965e:	4798      	blx	r3
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	3b01      	subs	r3, #1
 8009664:	6123      	str	r3, [r4, #16]
 8009666:	e7f0      	b.n	800964a <_scanf_float+0x306>
 8009668:	46aa      	mov	sl, r5
 800966a:	46b3      	mov	fp, r6
 800966c:	e7de      	b.n	800962c <_scanf_float+0x2e8>
 800966e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	2965      	cmp	r1, #101	@ 0x65
 8009676:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800967a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	d00c      	beq.n	800969c <_scanf_float+0x358>
 8009682:	2945      	cmp	r1, #69	@ 0x45
 8009684:	d00a      	beq.n	800969c <_scanf_float+0x358>
 8009686:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800968a:	463a      	mov	r2, r7
 800968c:	4640      	mov	r0, r8
 800968e:	4798      	blx	r3
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009696:	3b01      	subs	r3, #1
 8009698:	1eb5      	subs	r5, r6, #2
 800969a:	6123      	str	r3, [r4, #16]
 800969c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096a0:	463a      	mov	r2, r7
 80096a2:	4640      	mov	r0, r8
 80096a4:	4798      	blx	r3
 80096a6:	462e      	mov	r6, r5
 80096a8:	6822      	ldr	r2, [r4, #0]
 80096aa:	f012 0210 	ands.w	r2, r2, #16
 80096ae:	d001      	beq.n	80096b4 <_scanf_float+0x370>
 80096b0:	2000      	movs	r0, #0
 80096b2:	e68b      	b.n	80093cc <_scanf_float+0x88>
 80096b4:	7032      	strb	r2, [r6, #0]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80096bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c0:	d11c      	bne.n	80096fc <_scanf_float+0x3b8>
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	454b      	cmp	r3, r9
 80096c6:	eba3 0209 	sub.w	r2, r3, r9
 80096ca:	d123      	bne.n	8009714 <_scanf_float+0x3d0>
 80096cc:	9901      	ldr	r1, [sp, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	4640      	mov	r0, r8
 80096d2:	f002 fc39 	bl	800bf48 <_strtod_r>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	6821      	ldr	r1, [r4, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f011 0f02 	tst.w	r1, #2
 80096e0:	ec57 6b10 	vmov	r6, r7, d0
 80096e4:	f103 0204 	add.w	r2, r3, #4
 80096e8:	d01f      	beq.n	800972a <_scanf_float+0x3e6>
 80096ea:	9903      	ldr	r1, [sp, #12]
 80096ec:	600a      	str	r2, [r1, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	e9c3 6700 	strd	r6, r7, [r3]
 80096f4:	68e3      	ldr	r3, [r4, #12]
 80096f6:	3301      	adds	r3, #1
 80096f8:	60e3      	str	r3, [r4, #12]
 80096fa:	e7d9      	b.n	80096b0 <_scanf_float+0x36c>
 80096fc:	9b04      	ldr	r3, [sp, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0e4      	beq.n	80096cc <_scanf_float+0x388>
 8009702:	9905      	ldr	r1, [sp, #20]
 8009704:	230a      	movs	r3, #10
 8009706:	3101      	adds	r1, #1
 8009708:	4640      	mov	r0, r8
 800970a:	f002 fc9d 	bl	800c048 <_strtol_r>
 800970e:	9b04      	ldr	r3, [sp, #16]
 8009710:	9e05      	ldr	r6, [sp, #20]
 8009712:	1ac2      	subs	r2, r0, r3
 8009714:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009718:	429e      	cmp	r6, r3
 800971a:	bf28      	it	cs
 800971c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009720:	4910      	ldr	r1, [pc, #64]	@ (8009764 <_scanf_float+0x420>)
 8009722:	4630      	mov	r0, r6
 8009724:	f000 f918 	bl	8009958 <siprintf>
 8009728:	e7d0      	b.n	80096cc <_scanf_float+0x388>
 800972a:	f011 0f04 	tst.w	r1, #4
 800972e:	9903      	ldr	r1, [sp, #12]
 8009730:	600a      	str	r2, [r1, #0]
 8009732:	d1dc      	bne.n	80096ee <_scanf_float+0x3aa>
 8009734:	681d      	ldr	r5, [r3, #0]
 8009736:	4632      	mov	r2, r6
 8009738:	463b      	mov	r3, r7
 800973a:	4630      	mov	r0, r6
 800973c:	4639      	mov	r1, r7
 800973e:	f7f7 fa1d 	bl	8000b7c <__aeabi_dcmpun>
 8009742:	b128      	cbz	r0, 8009750 <_scanf_float+0x40c>
 8009744:	4808      	ldr	r0, [pc, #32]	@ (8009768 <_scanf_float+0x424>)
 8009746:	f000 f9f9 	bl	8009b3c <nanf>
 800974a:	ed85 0a00 	vstr	s0, [r5]
 800974e:	e7d1      	b.n	80096f4 <_scanf_float+0x3b0>
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f7 fa70 	bl	8000c38 <__aeabi_d2f>
 8009758:	6028      	str	r0, [r5, #0]
 800975a:	e7cb      	b.n	80096f4 <_scanf_float+0x3b0>
 800975c:	f04f 0900 	mov.w	r9, #0
 8009760:	e629      	b.n	80093b6 <_scanf_float+0x72>
 8009762:	bf00      	nop
 8009764:	0800e62c 	.word	0x0800e62c
 8009768:	0800e9c5 	.word	0x0800e9c5

0800976c <std>:
 800976c:	2300      	movs	r3, #0
 800976e:	b510      	push	{r4, lr}
 8009770:	4604      	mov	r4, r0
 8009772:	e9c0 3300 	strd	r3, r3, [r0]
 8009776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800977a:	6083      	str	r3, [r0, #8]
 800977c:	8181      	strh	r1, [r0, #12]
 800977e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009780:	81c2      	strh	r2, [r0, #14]
 8009782:	6183      	str	r3, [r0, #24]
 8009784:	4619      	mov	r1, r3
 8009786:	2208      	movs	r2, #8
 8009788:	305c      	adds	r0, #92	@ 0x5c
 800978a:	f000 f948 	bl	8009a1e <memset>
 800978e:	4b0d      	ldr	r3, [pc, #52]	@ (80097c4 <std+0x58>)
 8009790:	6263      	str	r3, [r4, #36]	@ 0x24
 8009792:	4b0d      	ldr	r3, [pc, #52]	@ (80097c8 <std+0x5c>)
 8009794:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009796:	4b0d      	ldr	r3, [pc, #52]	@ (80097cc <std+0x60>)
 8009798:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800979a:	4b0d      	ldr	r3, [pc, #52]	@ (80097d0 <std+0x64>)
 800979c:	6323      	str	r3, [r4, #48]	@ 0x30
 800979e:	4b0d      	ldr	r3, [pc, #52]	@ (80097d4 <std+0x68>)
 80097a0:	6224      	str	r4, [r4, #32]
 80097a2:	429c      	cmp	r4, r3
 80097a4:	d006      	beq.n	80097b4 <std+0x48>
 80097a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097aa:	4294      	cmp	r4, r2
 80097ac:	d002      	beq.n	80097b4 <std+0x48>
 80097ae:	33d0      	adds	r3, #208	@ 0xd0
 80097b0:	429c      	cmp	r4, r3
 80097b2:	d105      	bne.n	80097c0 <std+0x54>
 80097b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097bc:	f000 b9ac 	b.w	8009b18 <__retarget_lock_init_recursive>
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	bf00      	nop
 80097c4:	08009999 	.word	0x08009999
 80097c8:	080099bb 	.word	0x080099bb
 80097cc:	080099f3 	.word	0x080099f3
 80097d0:	08009a17 	.word	0x08009a17
 80097d4:	20000774 	.word	0x20000774

080097d8 <stdio_exit_handler>:
 80097d8:	4a02      	ldr	r2, [pc, #8]	@ (80097e4 <stdio_exit_handler+0xc>)
 80097da:	4903      	ldr	r1, [pc, #12]	@ (80097e8 <stdio_exit_handler+0x10>)
 80097dc:	4803      	ldr	r0, [pc, #12]	@ (80097ec <stdio_exit_handler+0x14>)
 80097de:	f000 b869 	b.w	80098b4 <_fwalk_sglue>
 80097e2:	bf00      	nop
 80097e4:	2000003c 	.word	0x2000003c
 80097e8:	0800c405 	.word	0x0800c405
 80097ec:	2000004c 	.word	0x2000004c

080097f0 <cleanup_stdio>:
 80097f0:	6841      	ldr	r1, [r0, #4]
 80097f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009824 <cleanup_stdio+0x34>)
 80097f4:	4299      	cmp	r1, r3
 80097f6:	b510      	push	{r4, lr}
 80097f8:	4604      	mov	r4, r0
 80097fa:	d001      	beq.n	8009800 <cleanup_stdio+0x10>
 80097fc:	f002 fe02 	bl	800c404 <_fflush_r>
 8009800:	68a1      	ldr	r1, [r4, #8]
 8009802:	4b09      	ldr	r3, [pc, #36]	@ (8009828 <cleanup_stdio+0x38>)
 8009804:	4299      	cmp	r1, r3
 8009806:	d002      	beq.n	800980e <cleanup_stdio+0x1e>
 8009808:	4620      	mov	r0, r4
 800980a:	f002 fdfb 	bl	800c404 <_fflush_r>
 800980e:	68e1      	ldr	r1, [r4, #12]
 8009810:	4b06      	ldr	r3, [pc, #24]	@ (800982c <cleanup_stdio+0x3c>)
 8009812:	4299      	cmp	r1, r3
 8009814:	d004      	beq.n	8009820 <cleanup_stdio+0x30>
 8009816:	4620      	mov	r0, r4
 8009818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800981c:	f002 bdf2 	b.w	800c404 <_fflush_r>
 8009820:	bd10      	pop	{r4, pc}
 8009822:	bf00      	nop
 8009824:	20000774 	.word	0x20000774
 8009828:	200007dc 	.word	0x200007dc
 800982c:	20000844 	.word	0x20000844

08009830 <global_stdio_init.part.0>:
 8009830:	b510      	push	{r4, lr}
 8009832:	4b0b      	ldr	r3, [pc, #44]	@ (8009860 <global_stdio_init.part.0+0x30>)
 8009834:	4c0b      	ldr	r4, [pc, #44]	@ (8009864 <global_stdio_init.part.0+0x34>)
 8009836:	4a0c      	ldr	r2, [pc, #48]	@ (8009868 <global_stdio_init.part.0+0x38>)
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	4620      	mov	r0, r4
 800983c:	2200      	movs	r2, #0
 800983e:	2104      	movs	r1, #4
 8009840:	f7ff ff94 	bl	800976c <std>
 8009844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009848:	2201      	movs	r2, #1
 800984a:	2109      	movs	r1, #9
 800984c:	f7ff ff8e 	bl	800976c <std>
 8009850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009854:	2202      	movs	r2, #2
 8009856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800985a:	2112      	movs	r1, #18
 800985c:	f7ff bf86 	b.w	800976c <std>
 8009860:	200008ac 	.word	0x200008ac
 8009864:	20000774 	.word	0x20000774
 8009868:	080097d9 	.word	0x080097d9

0800986c <__sfp_lock_acquire>:
 800986c:	4801      	ldr	r0, [pc, #4]	@ (8009874 <__sfp_lock_acquire+0x8>)
 800986e:	f000 b954 	b.w	8009b1a <__retarget_lock_acquire_recursive>
 8009872:	bf00      	nop
 8009874:	200008b5 	.word	0x200008b5

08009878 <__sfp_lock_release>:
 8009878:	4801      	ldr	r0, [pc, #4]	@ (8009880 <__sfp_lock_release+0x8>)
 800987a:	f000 b94f 	b.w	8009b1c <__retarget_lock_release_recursive>
 800987e:	bf00      	nop
 8009880:	200008b5 	.word	0x200008b5

08009884 <__sinit>:
 8009884:	b510      	push	{r4, lr}
 8009886:	4604      	mov	r4, r0
 8009888:	f7ff fff0 	bl	800986c <__sfp_lock_acquire>
 800988c:	6a23      	ldr	r3, [r4, #32]
 800988e:	b11b      	cbz	r3, 8009898 <__sinit+0x14>
 8009890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009894:	f7ff bff0 	b.w	8009878 <__sfp_lock_release>
 8009898:	4b04      	ldr	r3, [pc, #16]	@ (80098ac <__sinit+0x28>)
 800989a:	6223      	str	r3, [r4, #32]
 800989c:	4b04      	ldr	r3, [pc, #16]	@ (80098b0 <__sinit+0x2c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1f5      	bne.n	8009890 <__sinit+0xc>
 80098a4:	f7ff ffc4 	bl	8009830 <global_stdio_init.part.0>
 80098a8:	e7f2      	b.n	8009890 <__sinit+0xc>
 80098aa:	bf00      	nop
 80098ac:	080097f1 	.word	0x080097f1
 80098b0:	200008ac 	.word	0x200008ac

080098b4 <_fwalk_sglue>:
 80098b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b8:	4607      	mov	r7, r0
 80098ba:	4688      	mov	r8, r1
 80098bc:	4614      	mov	r4, r2
 80098be:	2600      	movs	r6, #0
 80098c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098c4:	f1b9 0901 	subs.w	r9, r9, #1
 80098c8:	d505      	bpl.n	80098d6 <_fwalk_sglue+0x22>
 80098ca:	6824      	ldr	r4, [r4, #0]
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	d1f7      	bne.n	80098c0 <_fwalk_sglue+0xc>
 80098d0:	4630      	mov	r0, r6
 80098d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d907      	bls.n	80098ec <_fwalk_sglue+0x38>
 80098dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098e0:	3301      	adds	r3, #1
 80098e2:	d003      	beq.n	80098ec <_fwalk_sglue+0x38>
 80098e4:	4629      	mov	r1, r5
 80098e6:	4638      	mov	r0, r7
 80098e8:	47c0      	blx	r8
 80098ea:	4306      	orrs	r6, r0
 80098ec:	3568      	adds	r5, #104	@ 0x68
 80098ee:	e7e9      	b.n	80098c4 <_fwalk_sglue+0x10>

080098f0 <sniprintf>:
 80098f0:	b40c      	push	{r2, r3}
 80098f2:	b530      	push	{r4, r5, lr}
 80098f4:	4b17      	ldr	r3, [pc, #92]	@ (8009954 <sniprintf+0x64>)
 80098f6:	1e0c      	subs	r4, r1, #0
 80098f8:	681d      	ldr	r5, [r3, #0]
 80098fa:	b09d      	sub	sp, #116	@ 0x74
 80098fc:	da08      	bge.n	8009910 <sniprintf+0x20>
 80098fe:	238b      	movs	r3, #139	@ 0x8b
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009906:	b01d      	add	sp, #116	@ 0x74
 8009908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800990c:	b002      	add	sp, #8
 800990e:	4770      	bx	lr
 8009910:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009914:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009918:	bf14      	ite	ne
 800991a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800991e:	4623      	moveq	r3, r4
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	9307      	str	r3, [sp, #28]
 8009924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009928:	9002      	str	r0, [sp, #8]
 800992a:	9006      	str	r0, [sp, #24]
 800992c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009930:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009932:	ab21      	add	r3, sp, #132	@ 0x84
 8009934:	a902      	add	r1, sp, #8
 8009936:	4628      	mov	r0, r5
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	f002 fbe3 	bl	800c104 <_svfiprintf_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	bfbc      	itt	lt
 8009942:	238b      	movlt	r3, #139	@ 0x8b
 8009944:	602b      	strlt	r3, [r5, #0]
 8009946:	2c00      	cmp	r4, #0
 8009948:	d0dd      	beq.n	8009906 <sniprintf+0x16>
 800994a:	9b02      	ldr	r3, [sp, #8]
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]
 8009950:	e7d9      	b.n	8009906 <sniprintf+0x16>
 8009952:	bf00      	nop
 8009954:	20000048 	.word	0x20000048

08009958 <siprintf>:
 8009958:	b40e      	push	{r1, r2, r3}
 800995a:	b500      	push	{lr}
 800995c:	b09c      	sub	sp, #112	@ 0x70
 800995e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009960:	9002      	str	r0, [sp, #8]
 8009962:	9006      	str	r0, [sp, #24]
 8009964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009968:	4809      	ldr	r0, [pc, #36]	@ (8009990 <siprintf+0x38>)
 800996a:	9107      	str	r1, [sp, #28]
 800996c:	9104      	str	r1, [sp, #16]
 800996e:	4909      	ldr	r1, [pc, #36]	@ (8009994 <siprintf+0x3c>)
 8009970:	f853 2b04 	ldr.w	r2, [r3], #4
 8009974:	9105      	str	r1, [sp, #20]
 8009976:	6800      	ldr	r0, [r0, #0]
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	a902      	add	r1, sp, #8
 800997c:	f002 fbc2 	bl	800c104 <_svfiprintf_r>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	2200      	movs	r2, #0
 8009984:	701a      	strb	r2, [r3, #0]
 8009986:	b01c      	add	sp, #112	@ 0x70
 8009988:	f85d eb04 	ldr.w	lr, [sp], #4
 800998c:	b003      	add	sp, #12
 800998e:	4770      	bx	lr
 8009990:	20000048 	.word	0x20000048
 8009994:	ffff0208 	.word	0xffff0208

08009998 <__sread>:
 8009998:	b510      	push	{r4, lr}
 800999a:	460c      	mov	r4, r1
 800999c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a0:	f000 f86c 	bl	8009a7c <_read_r>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	bfab      	itete	ge
 80099a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099aa:	89a3      	ldrhlt	r3, [r4, #12]
 80099ac:	181b      	addge	r3, r3, r0
 80099ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099b2:	bfac      	ite	ge
 80099b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099b6:	81a3      	strhlt	r3, [r4, #12]
 80099b8:	bd10      	pop	{r4, pc}

080099ba <__swrite>:
 80099ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099be:	461f      	mov	r7, r3
 80099c0:	898b      	ldrh	r3, [r1, #12]
 80099c2:	05db      	lsls	r3, r3, #23
 80099c4:	4605      	mov	r5, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4616      	mov	r6, r2
 80099ca:	d505      	bpl.n	80099d8 <__swrite+0x1e>
 80099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d0:	2302      	movs	r3, #2
 80099d2:	2200      	movs	r2, #0
 80099d4:	f000 f840 	bl	8009a58 <_lseek_r>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	4632      	mov	r2, r6
 80099e6:	463b      	mov	r3, r7
 80099e8:	4628      	mov	r0, r5
 80099ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ee:	f000 b857 	b.w	8009aa0 <_write_r>

080099f2 <__sseek>:
 80099f2:	b510      	push	{r4, lr}
 80099f4:	460c      	mov	r4, r1
 80099f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fa:	f000 f82d 	bl	8009a58 <_lseek_r>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	bf15      	itete	ne
 8009a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a0e:	81a3      	strheq	r3, [r4, #12]
 8009a10:	bf18      	it	ne
 8009a12:	81a3      	strhne	r3, [r4, #12]
 8009a14:	bd10      	pop	{r4, pc}

08009a16 <__sclose>:
 8009a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1a:	f000 b80d 	b.w	8009a38 <_close_r>

08009a1e <memset>:
 8009a1e:	4402      	add	r2, r0
 8009a20:	4603      	mov	r3, r0
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d100      	bne.n	8009a28 <memset+0xa>
 8009a26:	4770      	bx	lr
 8009a28:	f803 1b01 	strb.w	r1, [r3], #1
 8009a2c:	e7f9      	b.n	8009a22 <memset+0x4>
	...

08009a30 <_localeconv_r>:
 8009a30:	4800      	ldr	r0, [pc, #0]	@ (8009a34 <_localeconv_r+0x4>)
 8009a32:	4770      	bx	lr
 8009a34:	20000188 	.word	0x20000188

08009a38 <_close_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	@ (8009a54 <_close_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7fa fc41 	bl	80042ca <_close>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_close_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_close_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	200008b0 	.word	0x200008b0

08009a58 <_lseek_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	@ (8009a78 <_lseek_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7fa fc56 	bl	8004318 <_lseek>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_lseek_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_lseek_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	200008b0 	.word	0x200008b0

08009a7c <_read_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	@ (8009a9c <_read_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7fa fbe4 	bl	8004258 <_read>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_read_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_read_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	200008b0 	.word	0x200008b0

08009aa0 <_write_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d07      	ldr	r5, [pc, #28]	@ (8009ac0 <_write_r+0x20>)
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	602a      	str	r2, [r5, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f7fa fbef 	bl	8004292 <_write>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_write_r+0x1e>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_write_r+0x1e>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	200008b0 	.word	0x200008b0

08009ac4 <__errno>:
 8009ac4:	4b01      	ldr	r3, [pc, #4]	@ (8009acc <__errno+0x8>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000048 	.word	0x20000048

08009ad0 <__libc_init_array>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8009b08 <__libc_init_array+0x38>)
 8009ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8009b0c <__libc_init_array+0x3c>)
 8009ad6:	1b64      	subs	r4, r4, r5
 8009ad8:	10a4      	asrs	r4, r4, #2
 8009ada:	2600      	movs	r6, #0
 8009adc:	42a6      	cmp	r6, r4
 8009ade:	d109      	bne.n	8009af4 <__libc_init_array+0x24>
 8009ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8009b10 <__libc_init_array+0x40>)
 8009ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8009b14 <__libc_init_array+0x44>)
 8009ae4:	f004 fbf8 	bl	800e2d8 <_init>
 8009ae8:	1b64      	subs	r4, r4, r5
 8009aea:	10a4      	asrs	r4, r4, #2
 8009aec:	2600      	movs	r6, #0
 8009aee:	42a6      	cmp	r6, r4
 8009af0:	d105      	bne.n	8009afe <__libc_init_array+0x2e>
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af8:	4798      	blx	r3
 8009afa:	3601      	adds	r6, #1
 8009afc:	e7ee      	b.n	8009adc <__libc_init_array+0xc>
 8009afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b02:	4798      	blx	r3
 8009b04:	3601      	adds	r6, #1
 8009b06:	e7f2      	b.n	8009aee <__libc_init_array+0x1e>
 8009b08:	0800ec08 	.word	0x0800ec08
 8009b0c:	0800ec08 	.word	0x0800ec08
 8009b10:	0800ec08 	.word	0x0800ec08
 8009b14:	0800ec0c 	.word	0x0800ec0c

08009b18 <__retarget_lock_init_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <__retarget_lock_acquire_recursive>:
 8009b1a:	4770      	bx	lr

08009b1c <__retarget_lock_release_recursive>:
 8009b1c:	4770      	bx	lr

08009b1e <memcpy>:
 8009b1e:	440a      	add	r2, r1
 8009b20:	4291      	cmp	r1, r2
 8009b22:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009b26:	d100      	bne.n	8009b2a <memcpy+0xc>
 8009b28:	4770      	bx	lr
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b34:	4291      	cmp	r1, r2
 8009b36:	d1f9      	bne.n	8009b2c <memcpy+0xe>
 8009b38:	bd10      	pop	{r4, pc}
	...

08009b3c <nanf>:
 8009b3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009b44 <nanf+0x8>
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	7fc00000 	.word	0x7fc00000

08009b48 <quorem>:
 8009b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	6903      	ldr	r3, [r0, #16]
 8009b4e:	690c      	ldr	r4, [r1, #16]
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	4607      	mov	r7, r0
 8009b54:	db7e      	blt.n	8009c54 <quorem+0x10c>
 8009b56:	3c01      	subs	r4, #1
 8009b58:	f101 0814 	add.w	r8, r1, #20
 8009b5c:	00a3      	lsls	r3, r4, #2
 8009b5e:	f100 0514 	add.w	r5, r0, #20
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b72:	3301      	adds	r3, #1
 8009b74:	429a      	cmp	r2, r3
 8009b76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b7e:	d32e      	bcc.n	8009bde <quorem+0x96>
 8009b80:	f04f 0a00 	mov.w	sl, #0
 8009b84:	46c4      	mov	ip, r8
 8009b86:	46ae      	mov	lr, r5
 8009b88:	46d3      	mov	fp, sl
 8009b8a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b8e:	b298      	uxth	r0, r3
 8009b90:	fb06 a000 	mla	r0, r6, r0, sl
 8009b94:	0c02      	lsrs	r2, r0, #16
 8009b96:	0c1b      	lsrs	r3, r3, #16
 8009b98:	fb06 2303 	mla	r3, r6, r3, r2
 8009b9c:	f8de 2000 	ldr.w	r2, [lr]
 8009ba0:	b280      	uxth	r0, r0
 8009ba2:	b292      	uxth	r2, r2
 8009ba4:	1a12      	subs	r2, r2, r0
 8009ba6:	445a      	add	r2, fp
 8009ba8:	f8de 0000 	ldr.w	r0, [lr]
 8009bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009bb6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009bba:	b292      	uxth	r2, r2
 8009bbc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bc0:	45e1      	cmp	r9, ip
 8009bc2:	f84e 2b04 	str.w	r2, [lr], #4
 8009bc6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009bca:	d2de      	bcs.n	8009b8a <quorem+0x42>
 8009bcc:	9b00      	ldr	r3, [sp, #0]
 8009bce:	58eb      	ldr	r3, [r5, r3]
 8009bd0:	b92b      	cbnz	r3, 8009bde <quorem+0x96>
 8009bd2:	9b01      	ldr	r3, [sp, #4]
 8009bd4:	3b04      	subs	r3, #4
 8009bd6:	429d      	cmp	r5, r3
 8009bd8:	461a      	mov	r2, r3
 8009bda:	d32f      	bcc.n	8009c3c <quorem+0xf4>
 8009bdc:	613c      	str	r4, [r7, #16]
 8009bde:	4638      	mov	r0, r7
 8009be0:	f001 f9c2 	bl	800af68 <__mcmp>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	db25      	blt.n	8009c34 <quorem+0xec>
 8009be8:	4629      	mov	r1, r5
 8009bea:	2000      	movs	r0, #0
 8009bec:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bf0:	f8d1 c000 	ldr.w	ip, [r1]
 8009bf4:	fa1f fe82 	uxth.w	lr, r2
 8009bf8:	fa1f f38c 	uxth.w	r3, ip
 8009bfc:	eba3 030e 	sub.w	r3, r3, lr
 8009c00:	4403      	add	r3, r0
 8009c02:	0c12      	lsrs	r2, r2, #16
 8009c04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c08:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c12:	45c1      	cmp	r9, r8
 8009c14:	f841 3b04 	str.w	r3, [r1], #4
 8009c18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c1c:	d2e6      	bcs.n	8009bec <quorem+0xa4>
 8009c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c26:	b922      	cbnz	r2, 8009c32 <quorem+0xea>
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	d30b      	bcc.n	8009c48 <quorem+0x100>
 8009c30:	613c      	str	r4, [r7, #16]
 8009c32:	3601      	adds	r6, #1
 8009c34:	4630      	mov	r0, r6
 8009c36:	b003      	add	sp, #12
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	6812      	ldr	r2, [r2, #0]
 8009c3e:	3b04      	subs	r3, #4
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	d1cb      	bne.n	8009bdc <quorem+0x94>
 8009c44:	3c01      	subs	r4, #1
 8009c46:	e7c6      	b.n	8009bd6 <quorem+0x8e>
 8009c48:	6812      	ldr	r2, [r2, #0]
 8009c4a:	3b04      	subs	r3, #4
 8009c4c:	2a00      	cmp	r2, #0
 8009c4e:	d1ef      	bne.n	8009c30 <quorem+0xe8>
 8009c50:	3c01      	subs	r4, #1
 8009c52:	e7ea      	b.n	8009c2a <quorem+0xe2>
 8009c54:	2000      	movs	r0, #0
 8009c56:	e7ee      	b.n	8009c36 <quorem+0xee>

08009c58 <_dtoa_r>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	69c7      	ldr	r7, [r0, #28]
 8009c5e:	b099      	sub	sp, #100	@ 0x64
 8009c60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c64:	ec55 4b10 	vmov	r4, r5, d0
 8009c68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009c6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c6c:	4683      	mov	fp, r0
 8009c6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c72:	b97f      	cbnz	r7, 8009c94 <_dtoa_r+0x3c>
 8009c74:	2010      	movs	r0, #16
 8009c76:	f000 fdfd 	bl	800a874 <malloc>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009c80:	b920      	cbnz	r0, 8009c8c <_dtoa_r+0x34>
 8009c82:	4ba7      	ldr	r3, [pc, #668]	@ (8009f20 <_dtoa_r+0x2c8>)
 8009c84:	21ef      	movs	r1, #239	@ 0xef
 8009c86:	48a7      	ldr	r0, [pc, #668]	@ (8009f24 <_dtoa_r+0x2cc>)
 8009c88:	f002 fc2a 	bl	800c4e0 <__assert_func>
 8009c8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c90:	6007      	str	r7, [r0, #0]
 8009c92:	60c7      	str	r7, [r0, #12]
 8009c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	b159      	cbz	r1, 8009cb4 <_dtoa_r+0x5c>
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	604a      	str	r2, [r1, #4]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4093      	lsls	r3, r2
 8009ca4:	608b      	str	r3, [r1, #8]
 8009ca6:	4658      	mov	r0, fp
 8009ca8:	f000 feda 	bl	800aa60 <_Bfree>
 8009cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	1e2b      	subs	r3, r5, #0
 8009cb6:	bfb9      	ittee	lt
 8009cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009cbc:	9303      	strlt	r3, [sp, #12]
 8009cbe:	2300      	movge	r3, #0
 8009cc0:	6033      	strge	r3, [r6, #0]
 8009cc2:	9f03      	ldr	r7, [sp, #12]
 8009cc4:	4b98      	ldr	r3, [pc, #608]	@ (8009f28 <_dtoa_r+0x2d0>)
 8009cc6:	bfbc      	itt	lt
 8009cc8:	2201      	movlt	r2, #1
 8009cca:	6032      	strlt	r2, [r6, #0]
 8009ccc:	43bb      	bics	r3, r7
 8009cce:	d112      	bne.n	8009cf6 <_dtoa_r+0x9e>
 8009cd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009cd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009cdc:	4323      	orrs	r3, r4
 8009cde:	f000 854d 	beq.w	800a77c <_dtoa_r+0xb24>
 8009ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ce4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009f3c <_dtoa_r+0x2e4>
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 854f 	beq.w	800a78c <_dtoa_r+0xb34>
 8009cee:	f10a 0303 	add.w	r3, sl, #3
 8009cf2:	f000 bd49 	b.w	800a788 <_dtoa_r+0xb30>
 8009cf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	ec51 0b17 	vmov	r0, r1, d7
 8009d00:	2300      	movs	r3, #0
 8009d02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d06:	f7f6 ff07 	bl	8000b18 <__aeabi_dcmpeq>
 8009d0a:	4680      	mov	r8, r0
 8009d0c:	b158      	cbz	r0, 8009d26 <_dtoa_r+0xce>
 8009d0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d10:	2301      	movs	r3, #1
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d16:	b113      	cbz	r3, 8009d1e <_dtoa_r+0xc6>
 8009d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d1a:	4b84      	ldr	r3, [pc, #528]	@ (8009f2c <_dtoa_r+0x2d4>)
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009f40 <_dtoa_r+0x2e8>
 8009d22:	f000 bd33 	b.w	800a78c <_dtoa_r+0xb34>
 8009d26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d2a:	aa16      	add	r2, sp, #88	@ 0x58
 8009d2c:	a917      	add	r1, sp, #92	@ 0x5c
 8009d2e:	4658      	mov	r0, fp
 8009d30:	f001 fa3a 	bl	800b1a8 <__d2b>
 8009d34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d38:	4681      	mov	r9, r0
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	d077      	beq.n	8009e2e <_dtoa_r+0x1d6>
 8009d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d58:	4619      	mov	r1, r3
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4b74      	ldr	r3, [pc, #464]	@ (8009f30 <_dtoa_r+0x2d8>)
 8009d5e:	f7f6 fabb 	bl	80002d8 <__aeabi_dsub>
 8009d62:	a369      	add	r3, pc, #420	@ (adr r3, 8009f08 <_dtoa_r+0x2b0>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f7f6 fc6e 	bl	8000648 <__aeabi_dmul>
 8009d6c:	a368      	add	r3, pc, #416	@ (adr r3, 8009f10 <_dtoa_r+0x2b8>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f7f6 fab3 	bl	80002dc <__adddf3>
 8009d76:	4604      	mov	r4, r0
 8009d78:	4630      	mov	r0, r6
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	f7f6 fbfa 	bl	8000574 <__aeabi_i2d>
 8009d80:	a365      	add	r3, pc, #404	@ (adr r3, 8009f18 <_dtoa_r+0x2c0>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	f7f6 fc5f 	bl	8000648 <__aeabi_dmul>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 faa3 	bl	80002dc <__adddf3>
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	f7f6 ff05 	bl	8000ba8 <__aeabi_d2iz>
 8009d9e:	2200      	movs	r2, #0
 8009da0:	4607      	mov	r7, r0
 8009da2:	2300      	movs	r3, #0
 8009da4:	4620      	mov	r0, r4
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 fec0 	bl	8000b2c <__aeabi_dcmplt>
 8009dac:	b140      	cbz	r0, 8009dc0 <_dtoa_r+0x168>
 8009dae:	4638      	mov	r0, r7
 8009db0:	f7f6 fbe0 	bl	8000574 <__aeabi_i2d>
 8009db4:	4622      	mov	r2, r4
 8009db6:	462b      	mov	r3, r5
 8009db8:	f7f6 feae 	bl	8000b18 <__aeabi_dcmpeq>
 8009dbc:	b900      	cbnz	r0, 8009dc0 <_dtoa_r+0x168>
 8009dbe:	3f01      	subs	r7, #1
 8009dc0:	2f16      	cmp	r7, #22
 8009dc2:	d851      	bhi.n	8009e68 <_dtoa_r+0x210>
 8009dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8009f34 <_dtoa_r+0x2dc>)
 8009dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dd2:	f7f6 feab 	bl	8000b2c <__aeabi_dcmplt>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d048      	beq.n	8009e6c <_dtoa_r+0x214>
 8009dda:	3f01      	subs	r7, #1
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9312      	str	r3, [sp, #72]	@ 0x48
 8009de0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009de2:	1b9b      	subs	r3, r3, r6
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	bf44      	itt	mi
 8009de8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009dec:	2300      	movmi	r3, #0
 8009dee:	9208      	str	r2, [sp, #32]
 8009df0:	bf54      	ite	pl
 8009df2:	f04f 0800 	movpl.w	r8, #0
 8009df6:	9308      	strmi	r3, [sp, #32]
 8009df8:	2f00      	cmp	r7, #0
 8009dfa:	db39      	blt.n	8009e70 <_dtoa_r+0x218>
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e00:	443b      	add	r3, r7
 8009e02:	9308      	str	r3, [sp, #32]
 8009e04:	2300      	movs	r3, #0
 8009e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e0a:	2b09      	cmp	r3, #9
 8009e0c:	d864      	bhi.n	8009ed8 <_dtoa_r+0x280>
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	bfc4      	itt	gt
 8009e12:	3b04      	subgt	r3, #4
 8009e14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e18:	f1a3 0302 	sub.w	r3, r3, #2
 8009e1c:	bfcc      	ite	gt
 8009e1e:	2400      	movgt	r4, #0
 8009e20:	2401      	movle	r4, #1
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d863      	bhi.n	8009eee <_dtoa_r+0x296>
 8009e26:	e8df f003 	tbb	[pc, r3]
 8009e2a:	372a      	.short	0x372a
 8009e2c:	5535      	.short	0x5535
 8009e2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009e32:	441e      	add	r6, r3
 8009e34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e38:	2b20      	cmp	r3, #32
 8009e3a:	bfc1      	itttt	gt
 8009e3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e40:	409f      	lslgt	r7, r3
 8009e42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e4a:	bfd6      	itet	le
 8009e4c:	f1c3 0320 	rsble	r3, r3, #32
 8009e50:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e54:	fa04 f003 	lslle.w	r0, r4, r3
 8009e58:	f7f6 fb7c 	bl	8000554 <__aeabi_ui2d>
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e62:	3e01      	subs	r6, #1
 8009e64:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e66:	e777      	b.n	8009d58 <_dtoa_r+0x100>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e7b8      	b.n	8009dde <_dtoa_r+0x186>
 8009e6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009e6e:	e7b7      	b.n	8009de0 <_dtoa_r+0x188>
 8009e70:	427b      	negs	r3, r7
 8009e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e74:	2300      	movs	r3, #0
 8009e76:	eba8 0807 	sub.w	r8, r8, r7
 8009e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e7c:	e7c4      	b.n	8009e08 <_dtoa_r+0x1b0>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	dc35      	bgt.n	8009ef4 <_dtoa_r+0x29c>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	9307      	str	r3, [sp, #28]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e92:	e00b      	b.n	8009eac <_dtoa_r+0x254>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e7f3      	b.n	8009e80 <_dtoa_r+0x228>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e9e:	18fb      	adds	r3, r7, r3
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	bfb8      	it	lt
 8009eaa:	2301      	movlt	r3, #1
 8009eac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	f102 0514 	add.w	r5, r2, #20
 8009eb8:	429d      	cmp	r5, r3
 8009eba:	d91f      	bls.n	8009efc <_dtoa_r+0x2a4>
 8009ebc:	6041      	str	r1, [r0, #4]
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	f000 fd8e 	bl	800a9e0 <_Balloc>
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d13c      	bne.n	8009f44 <_dtoa_r+0x2ec>
 8009eca:	4b1b      	ldr	r3, [pc, #108]	@ (8009f38 <_dtoa_r+0x2e0>)
 8009ecc:	4602      	mov	r2, r0
 8009ece:	f240 11af 	movw	r1, #431	@ 0x1af
 8009ed2:	e6d8      	b.n	8009c86 <_dtoa_r+0x2e>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e7e0      	b.n	8009e9a <_dtoa_r+0x242>
 8009ed8:	2401      	movs	r4, #1
 8009eda:	2300      	movs	r3, #0
 8009edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ede:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	9307      	str	r3, [sp, #28]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2312      	movs	r3, #18
 8009eec:	e7d0      	b.n	8009e90 <_dtoa_r+0x238>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ef2:	e7f5      	b.n	8009ee0 <_dtoa_r+0x288>
 8009ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	9307      	str	r3, [sp, #28]
 8009efa:	e7d7      	b.n	8009eac <_dtoa_r+0x254>
 8009efc:	3101      	adds	r1, #1
 8009efe:	0052      	lsls	r2, r2, #1
 8009f00:	e7d8      	b.n	8009eb4 <_dtoa_r+0x25c>
 8009f02:	bf00      	nop
 8009f04:	f3af 8000 	nop.w
 8009f08:	636f4361 	.word	0x636f4361
 8009f0c:	3fd287a7 	.word	0x3fd287a7
 8009f10:	8b60c8b3 	.word	0x8b60c8b3
 8009f14:	3fc68a28 	.word	0x3fc68a28
 8009f18:	509f79fb 	.word	0x509f79fb
 8009f1c:	3fd34413 	.word	0x3fd34413
 8009f20:	0800e63e 	.word	0x0800e63e
 8009f24:	0800e655 	.word	0x0800e655
 8009f28:	7ff00000 	.word	0x7ff00000
 8009f2c:	0800e609 	.word	0x0800e609
 8009f30:	3ff80000 	.word	0x3ff80000
 8009f34:	0800e750 	.word	0x0800e750
 8009f38:	0800e6ad 	.word	0x0800e6ad
 8009f3c:	0800e63a 	.word	0x0800e63a
 8009f40:	0800e608 	.word	0x0800e608
 8009f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f48:	6018      	str	r0, [r3, #0]
 8009f4a:	9b07      	ldr	r3, [sp, #28]
 8009f4c:	2b0e      	cmp	r3, #14
 8009f4e:	f200 80a4 	bhi.w	800a09a <_dtoa_r+0x442>
 8009f52:	2c00      	cmp	r4, #0
 8009f54:	f000 80a1 	beq.w	800a09a <_dtoa_r+0x442>
 8009f58:	2f00      	cmp	r7, #0
 8009f5a:	dd33      	ble.n	8009fc4 <_dtoa_r+0x36c>
 8009f5c:	4bad      	ldr	r3, [pc, #692]	@ (800a214 <_dtoa_r+0x5bc>)
 8009f5e:	f007 020f 	and.w	r2, r7, #15
 8009f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f66:	ed93 7b00 	vldr	d7, [r3]
 8009f6a:	05f8      	lsls	r0, r7, #23
 8009f6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009f70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f74:	d516      	bpl.n	8009fa4 <_dtoa_r+0x34c>
 8009f76:	4ba8      	ldr	r3, [pc, #672]	@ (800a218 <_dtoa_r+0x5c0>)
 8009f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f80:	f7f6 fc8c 	bl	800089c <__aeabi_ddiv>
 8009f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f88:	f004 040f 	and.w	r4, r4, #15
 8009f8c:	2603      	movs	r6, #3
 8009f8e:	4da2      	ldr	r5, [pc, #648]	@ (800a218 <_dtoa_r+0x5c0>)
 8009f90:	b954      	cbnz	r4, 8009fa8 <_dtoa_r+0x350>
 8009f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9a:	f7f6 fc7f 	bl	800089c <__aeabi_ddiv>
 8009f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fa2:	e028      	b.n	8009ff6 <_dtoa_r+0x39e>
 8009fa4:	2602      	movs	r6, #2
 8009fa6:	e7f2      	b.n	8009f8e <_dtoa_r+0x336>
 8009fa8:	07e1      	lsls	r1, r4, #31
 8009faa:	d508      	bpl.n	8009fbe <_dtoa_r+0x366>
 8009fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fb4:	f7f6 fb48 	bl	8000648 <__aeabi_dmul>
 8009fb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	1064      	asrs	r4, r4, #1
 8009fc0:	3508      	adds	r5, #8
 8009fc2:	e7e5      	b.n	8009f90 <_dtoa_r+0x338>
 8009fc4:	f000 80d2 	beq.w	800a16c <_dtoa_r+0x514>
 8009fc8:	427c      	negs	r4, r7
 8009fca:	4b92      	ldr	r3, [pc, #584]	@ (800a214 <_dtoa_r+0x5bc>)
 8009fcc:	4d92      	ldr	r5, [pc, #584]	@ (800a218 <_dtoa_r+0x5c0>)
 8009fce:	f004 020f 	and.w	r2, r4, #15
 8009fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fde:	f7f6 fb33 	bl	8000648 <__aeabi_dmul>
 8009fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe6:	1124      	asrs	r4, r4, #4
 8009fe8:	2300      	movs	r3, #0
 8009fea:	2602      	movs	r6, #2
 8009fec:	2c00      	cmp	r4, #0
 8009fee:	f040 80b2 	bne.w	800a156 <_dtoa_r+0x4fe>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1d3      	bne.n	8009f9e <_dtoa_r+0x346>
 8009ff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ff8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 80b7 	beq.w	800a170 <_dtoa_r+0x518>
 800a002:	4b86      	ldr	r3, [pc, #536]	@ (800a21c <_dtoa_r+0x5c4>)
 800a004:	2200      	movs	r2, #0
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 fd8f 	bl	8000b2c <__aeabi_dcmplt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f000 80ae 	beq.w	800a170 <_dtoa_r+0x518>
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 80aa 	beq.w	800a170 <_dtoa_r+0x518>
 800a01c:	9b00      	ldr	r3, [sp, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dd37      	ble.n	800a092 <_dtoa_r+0x43a>
 800a022:	1e7b      	subs	r3, r7, #1
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	4620      	mov	r0, r4
 800a028:	4b7d      	ldr	r3, [pc, #500]	@ (800a220 <_dtoa_r+0x5c8>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7f6 fb0b 	bl	8000648 <__aeabi_dmul>
 800a032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a036:	9c00      	ldr	r4, [sp, #0]
 800a038:	3601      	adds	r6, #1
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7f6 fa9a 	bl	8000574 <__aeabi_i2d>
 800a040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a044:	f7f6 fb00 	bl	8000648 <__aeabi_dmul>
 800a048:	4b76      	ldr	r3, [pc, #472]	@ (800a224 <_dtoa_r+0x5cc>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	f7f6 f946 	bl	80002dc <__adddf3>
 800a050:	4605      	mov	r5, r0
 800a052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a056:	2c00      	cmp	r4, #0
 800a058:	f040 808d 	bne.w	800a176 <_dtoa_r+0x51e>
 800a05c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a060:	4b71      	ldr	r3, [pc, #452]	@ (800a228 <_dtoa_r+0x5d0>)
 800a062:	2200      	movs	r2, #0
 800a064:	f7f6 f938 	bl	80002d8 <__aeabi_dsub>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a070:	462a      	mov	r2, r5
 800a072:	4633      	mov	r3, r6
 800a074:	f7f6 fd78 	bl	8000b68 <__aeabi_dcmpgt>
 800a078:	2800      	cmp	r0, #0
 800a07a:	f040 828b 	bne.w	800a594 <_dtoa_r+0x93c>
 800a07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a082:	462a      	mov	r2, r5
 800a084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a088:	f7f6 fd50 	bl	8000b2c <__aeabi_dcmplt>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	f040 8128 	bne.w	800a2e2 <_dtoa_r+0x68a>
 800a092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a09a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f2c0 815a 	blt.w	800a356 <_dtoa_r+0x6fe>
 800a0a2:	2f0e      	cmp	r7, #14
 800a0a4:	f300 8157 	bgt.w	800a356 <_dtoa_r+0x6fe>
 800a0a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a214 <_dtoa_r+0x5bc>)
 800a0aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0ae:	ed93 7b00 	vldr	d7, [r3]
 800a0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	ed8d 7b00 	vstr	d7, [sp]
 800a0ba:	da03      	bge.n	800a0c4 <_dtoa_r+0x46c>
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f340 8101 	ble.w	800a2c6 <_dtoa_r+0x66e>
 800a0c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0c8:	4656      	mov	r6, sl
 800a0ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 fbe3 	bl	800089c <__aeabi_ddiv>
 800a0d6:	f7f6 fd67 	bl	8000ba8 <__aeabi_d2iz>
 800a0da:	4680      	mov	r8, r0
 800a0dc:	f7f6 fa4a 	bl	8000574 <__aeabi_i2d>
 800a0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0e4:	f7f6 fab0 	bl	8000648 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a0f4:	f7f6 f8f0 	bl	80002d8 <__aeabi_dsub>
 800a0f8:	f806 4b01 	strb.w	r4, [r6], #1
 800a0fc:	9d07      	ldr	r5, [sp, #28]
 800a0fe:	eba6 040a 	sub.w	r4, r6, sl
 800a102:	42a5      	cmp	r5, r4
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	f040 8117 	bne.w	800a33a <_dtoa_r+0x6e2>
 800a10c:	f7f6 f8e6 	bl	80002dc <__adddf3>
 800a110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a114:	4604      	mov	r4, r0
 800a116:	460d      	mov	r5, r1
 800a118:	f7f6 fd26 	bl	8000b68 <__aeabi_dcmpgt>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	f040 80f9 	bne.w	800a314 <_dtoa_r+0x6bc>
 800a122:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a126:	4620      	mov	r0, r4
 800a128:	4629      	mov	r1, r5
 800a12a:	f7f6 fcf5 	bl	8000b18 <__aeabi_dcmpeq>
 800a12e:	b118      	cbz	r0, 800a138 <_dtoa_r+0x4e0>
 800a130:	f018 0f01 	tst.w	r8, #1
 800a134:	f040 80ee 	bne.w	800a314 <_dtoa_r+0x6bc>
 800a138:	4649      	mov	r1, r9
 800a13a:	4658      	mov	r0, fp
 800a13c:	f000 fc90 	bl	800aa60 <_Bfree>
 800a140:	2300      	movs	r3, #0
 800a142:	7033      	strb	r3, [r6, #0]
 800a144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a146:	3701      	adds	r7, #1
 800a148:	601f      	str	r7, [r3, #0]
 800a14a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 831d 	beq.w	800a78c <_dtoa_r+0xb34>
 800a152:	601e      	str	r6, [r3, #0]
 800a154:	e31a      	b.n	800a78c <_dtoa_r+0xb34>
 800a156:	07e2      	lsls	r2, r4, #31
 800a158:	d505      	bpl.n	800a166 <_dtoa_r+0x50e>
 800a15a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a15e:	f7f6 fa73 	bl	8000648 <__aeabi_dmul>
 800a162:	3601      	adds	r6, #1
 800a164:	2301      	movs	r3, #1
 800a166:	1064      	asrs	r4, r4, #1
 800a168:	3508      	adds	r5, #8
 800a16a:	e73f      	b.n	8009fec <_dtoa_r+0x394>
 800a16c:	2602      	movs	r6, #2
 800a16e:	e742      	b.n	8009ff6 <_dtoa_r+0x39e>
 800a170:	9c07      	ldr	r4, [sp, #28]
 800a172:	9704      	str	r7, [sp, #16]
 800a174:	e761      	b.n	800a03a <_dtoa_r+0x3e2>
 800a176:	4b27      	ldr	r3, [pc, #156]	@ (800a214 <_dtoa_r+0x5bc>)
 800a178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a17a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a17e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a182:	4454      	add	r4, sl
 800a184:	2900      	cmp	r1, #0
 800a186:	d053      	beq.n	800a230 <_dtoa_r+0x5d8>
 800a188:	4928      	ldr	r1, [pc, #160]	@ (800a22c <_dtoa_r+0x5d4>)
 800a18a:	2000      	movs	r0, #0
 800a18c:	f7f6 fb86 	bl	800089c <__aeabi_ddiv>
 800a190:	4633      	mov	r3, r6
 800a192:	462a      	mov	r2, r5
 800a194:	f7f6 f8a0 	bl	80002d8 <__aeabi_dsub>
 800a198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a19c:	4656      	mov	r6, sl
 800a19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a2:	f7f6 fd01 	bl	8000ba8 <__aeabi_d2iz>
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	f7f6 f9e4 	bl	8000574 <__aeabi_i2d>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b4:	f7f6 f890 	bl	80002d8 <__aeabi_dsub>
 800a1b8:	3530      	adds	r5, #48	@ 0x30
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1c2:	f806 5b01 	strb.w	r5, [r6], #1
 800a1c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1ca:	f7f6 fcaf 	bl	8000b2c <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d171      	bne.n	800a2b6 <_dtoa_r+0x65e>
 800a1d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1d6:	4911      	ldr	r1, [pc, #68]	@ (800a21c <_dtoa_r+0x5c4>)
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f7f6 f87d 	bl	80002d8 <__aeabi_dsub>
 800a1de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1e2:	f7f6 fca3 	bl	8000b2c <__aeabi_dcmplt>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f040 8095 	bne.w	800a316 <_dtoa_r+0x6be>
 800a1ec:	42a6      	cmp	r6, r4
 800a1ee:	f43f af50 	beq.w	800a092 <_dtoa_r+0x43a>
 800a1f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a220 <_dtoa_r+0x5c8>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f7f6 fa25 	bl	8000648 <__aeabi_dmul>
 800a1fe:	4b08      	ldr	r3, [pc, #32]	@ (800a220 <_dtoa_r+0x5c8>)
 800a200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a204:	2200      	movs	r2, #0
 800a206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a20a:	f7f6 fa1d 	bl	8000648 <__aeabi_dmul>
 800a20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a212:	e7c4      	b.n	800a19e <_dtoa_r+0x546>
 800a214:	0800e750 	.word	0x0800e750
 800a218:	0800e728 	.word	0x0800e728
 800a21c:	3ff00000 	.word	0x3ff00000
 800a220:	40240000 	.word	0x40240000
 800a224:	401c0000 	.word	0x401c0000
 800a228:	40140000 	.word	0x40140000
 800a22c:	3fe00000 	.word	0x3fe00000
 800a230:	4631      	mov	r1, r6
 800a232:	4628      	mov	r0, r5
 800a234:	f7f6 fa08 	bl	8000648 <__aeabi_dmul>
 800a238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a23c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a23e:	4656      	mov	r6, sl
 800a240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a244:	f7f6 fcb0 	bl	8000ba8 <__aeabi_d2iz>
 800a248:	4605      	mov	r5, r0
 800a24a:	f7f6 f993 	bl	8000574 <__aeabi_i2d>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a256:	f7f6 f83f 	bl	80002d8 <__aeabi_dsub>
 800a25a:	3530      	adds	r5, #48	@ 0x30
 800a25c:	f806 5b01 	strb.w	r5, [r6], #1
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	42a6      	cmp	r6, r4
 800a266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a26a:	f04f 0200 	mov.w	r2, #0
 800a26e:	d124      	bne.n	800a2ba <_dtoa_r+0x662>
 800a270:	4bac      	ldr	r3, [pc, #688]	@ (800a524 <_dtoa_r+0x8cc>)
 800a272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a276:	f7f6 f831 	bl	80002dc <__adddf3>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a282:	f7f6 fc71 	bl	8000b68 <__aeabi_dcmpgt>
 800a286:	2800      	cmp	r0, #0
 800a288:	d145      	bne.n	800a316 <_dtoa_r+0x6be>
 800a28a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a28e:	49a5      	ldr	r1, [pc, #660]	@ (800a524 <_dtoa_r+0x8cc>)
 800a290:	2000      	movs	r0, #0
 800a292:	f7f6 f821 	bl	80002d8 <__aeabi_dsub>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a29e:	f7f6 fc45 	bl	8000b2c <__aeabi_dcmplt>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	f43f aef5 	beq.w	800a092 <_dtoa_r+0x43a>
 800a2a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a2aa:	1e73      	subs	r3, r6, #1
 800a2ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2b2:	2b30      	cmp	r3, #48	@ 0x30
 800a2b4:	d0f8      	beq.n	800a2a8 <_dtoa_r+0x650>
 800a2b6:	9f04      	ldr	r7, [sp, #16]
 800a2b8:	e73e      	b.n	800a138 <_dtoa_r+0x4e0>
 800a2ba:	4b9b      	ldr	r3, [pc, #620]	@ (800a528 <_dtoa_r+0x8d0>)
 800a2bc:	f7f6 f9c4 	bl	8000648 <__aeabi_dmul>
 800a2c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c4:	e7bc      	b.n	800a240 <_dtoa_r+0x5e8>
 800a2c6:	d10c      	bne.n	800a2e2 <_dtoa_r+0x68a>
 800a2c8:	4b98      	ldr	r3, [pc, #608]	@ (800a52c <_dtoa_r+0x8d4>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2d0:	f7f6 f9ba 	bl	8000648 <__aeabi_dmul>
 800a2d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d8:	f7f6 fc3c 	bl	8000b54 <__aeabi_dcmpge>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f000 8157 	beq.w	800a590 <_dtoa_r+0x938>
 800a2e2:	2400      	movs	r4, #0
 800a2e4:	4625      	mov	r5, r4
 800a2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	9304      	str	r3, [sp, #16]
 800a2ec:	4656      	mov	r6, sl
 800a2ee:	2700      	movs	r7, #0
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4658      	mov	r0, fp
 800a2f4:	f000 fbb4 	bl	800aa60 <_Bfree>
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	d0dc      	beq.n	800a2b6 <_dtoa_r+0x65e>
 800a2fc:	b12f      	cbz	r7, 800a30a <_dtoa_r+0x6b2>
 800a2fe:	42af      	cmp	r7, r5
 800a300:	d003      	beq.n	800a30a <_dtoa_r+0x6b2>
 800a302:	4639      	mov	r1, r7
 800a304:	4658      	mov	r0, fp
 800a306:	f000 fbab 	bl	800aa60 <_Bfree>
 800a30a:	4629      	mov	r1, r5
 800a30c:	4658      	mov	r0, fp
 800a30e:	f000 fba7 	bl	800aa60 <_Bfree>
 800a312:	e7d0      	b.n	800a2b6 <_dtoa_r+0x65e>
 800a314:	9704      	str	r7, [sp, #16]
 800a316:	4633      	mov	r3, r6
 800a318:	461e      	mov	r6, r3
 800a31a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a31e:	2a39      	cmp	r2, #57	@ 0x39
 800a320:	d107      	bne.n	800a332 <_dtoa_r+0x6da>
 800a322:	459a      	cmp	sl, r3
 800a324:	d1f8      	bne.n	800a318 <_dtoa_r+0x6c0>
 800a326:	9a04      	ldr	r2, [sp, #16]
 800a328:	3201      	adds	r2, #1
 800a32a:	9204      	str	r2, [sp, #16]
 800a32c:	2230      	movs	r2, #48	@ 0x30
 800a32e:	f88a 2000 	strb.w	r2, [sl]
 800a332:	781a      	ldrb	r2, [r3, #0]
 800a334:	3201      	adds	r2, #1
 800a336:	701a      	strb	r2, [r3, #0]
 800a338:	e7bd      	b.n	800a2b6 <_dtoa_r+0x65e>
 800a33a:	4b7b      	ldr	r3, [pc, #492]	@ (800a528 <_dtoa_r+0x8d0>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	f7f6 f983 	bl	8000648 <__aeabi_dmul>
 800a342:	2200      	movs	r2, #0
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	460d      	mov	r5, r1
 800a34a:	f7f6 fbe5 	bl	8000b18 <__aeabi_dcmpeq>
 800a34e:	2800      	cmp	r0, #0
 800a350:	f43f aebb 	beq.w	800a0ca <_dtoa_r+0x472>
 800a354:	e6f0      	b.n	800a138 <_dtoa_r+0x4e0>
 800a356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a358:	2a00      	cmp	r2, #0
 800a35a:	f000 80db 	beq.w	800a514 <_dtoa_r+0x8bc>
 800a35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a360:	2a01      	cmp	r2, #1
 800a362:	f300 80bf 	bgt.w	800a4e4 <_dtoa_r+0x88c>
 800a366:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a368:	2a00      	cmp	r2, #0
 800a36a:	f000 80b7 	beq.w	800a4dc <_dtoa_r+0x884>
 800a36e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a372:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a374:	4646      	mov	r6, r8
 800a376:	9a08      	ldr	r2, [sp, #32]
 800a378:	2101      	movs	r1, #1
 800a37a:	441a      	add	r2, r3
 800a37c:	4658      	mov	r0, fp
 800a37e:	4498      	add	r8, r3
 800a380:	9208      	str	r2, [sp, #32]
 800a382:	f000 fc6b 	bl	800ac5c <__i2b>
 800a386:	4605      	mov	r5, r0
 800a388:	b15e      	cbz	r6, 800a3a2 <_dtoa_r+0x74a>
 800a38a:	9b08      	ldr	r3, [sp, #32]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dd08      	ble.n	800a3a2 <_dtoa_r+0x74a>
 800a390:	42b3      	cmp	r3, r6
 800a392:	9a08      	ldr	r2, [sp, #32]
 800a394:	bfa8      	it	ge
 800a396:	4633      	movge	r3, r6
 800a398:	eba8 0803 	sub.w	r8, r8, r3
 800a39c:	1af6      	subs	r6, r6, r3
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	9308      	str	r3, [sp, #32]
 800a3a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3a4:	b1f3      	cbz	r3, 800a3e4 <_dtoa_r+0x78c>
 800a3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80b7 	beq.w	800a51c <_dtoa_r+0x8c4>
 800a3ae:	b18c      	cbz	r4, 800a3d4 <_dtoa_r+0x77c>
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	4658      	mov	r0, fp
 800a3b6:	f000 fd11 	bl	800addc <__pow5mult>
 800a3ba:	464a      	mov	r2, r9
 800a3bc:	4601      	mov	r1, r0
 800a3be:	4605      	mov	r5, r0
 800a3c0:	4658      	mov	r0, fp
 800a3c2:	f000 fc61 	bl	800ac88 <__multiply>
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	9004      	str	r0, [sp, #16]
 800a3ca:	4658      	mov	r0, fp
 800a3cc:	f000 fb48 	bl	800aa60 <_Bfree>
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	4699      	mov	r9, r3
 800a3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3d6:	1b1a      	subs	r2, r3, r4
 800a3d8:	d004      	beq.n	800a3e4 <_dtoa_r+0x78c>
 800a3da:	4649      	mov	r1, r9
 800a3dc:	4658      	mov	r0, fp
 800a3de:	f000 fcfd 	bl	800addc <__pow5mult>
 800a3e2:	4681      	mov	r9, r0
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	f000 fc38 	bl	800ac5c <__i2b>
 800a3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 81cf 	beq.w	800a794 <_dtoa_r+0xb3c>
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	f000 fcee 	bl	800addc <__pow5mult>
 800a400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a402:	2b01      	cmp	r3, #1
 800a404:	4604      	mov	r4, r0
 800a406:	f300 8095 	bgt.w	800a534 <_dtoa_r+0x8dc>
 800a40a:	9b02      	ldr	r3, [sp, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f040 8087 	bne.w	800a520 <_dtoa_r+0x8c8>
 800a412:	9b03      	ldr	r3, [sp, #12]
 800a414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f040 8089 	bne.w	800a530 <_dtoa_r+0x8d8>
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a424:	0d1b      	lsrs	r3, r3, #20
 800a426:	051b      	lsls	r3, r3, #20
 800a428:	b12b      	cbz	r3, 800a436 <_dtoa_r+0x7de>
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	3301      	adds	r3, #1
 800a42e:	9308      	str	r3, [sp, #32]
 800a430:	f108 0801 	add.w	r8, r8, #1
 800a434:	2301      	movs	r3, #1
 800a436:	930a      	str	r3, [sp, #40]	@ 0x28
 800a438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 81b0 	beq.w	800a7a0 <_dtoa_r+0xb48>
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a446:	6918      	ldr	r0, [r3, #16]
 800a448:	f000 fbbc 	bl	800abc4 <__hi0bits>
 800a44c:	f1c0 0020 	rsb	r0, r0, #32
 800a450:	9b08      	ldr	r3, [sp, #32]
 800a452:	4418      	add	r0, r3
 800a454:	f010 001f 	ands.w	r0, r0, #31
 800a458:	d077      	beq.n	800a54a <_dtoa_r+0x8f2>
 800a45a:	f1c0 0320 	rsb	r3, r0, #32
 800a45e:	2b04      	cmp	r3, #4
 800a460:	dd6b      	ble.n	800a53a <_dtoa_r+0x8e2>
 800a462:	9b08      	ldr	r3, [sp, #32]
 800a464:	f1c0 001c 	rsb	r0, r0, #28
 800a468:	4403      	add	r3, r0
 800a46a:	4480      	add	r8, r0
 800a46c:	4406      	add	r6, r0
 800a46e:	9308      	str	r3, [sp, #32]
 800a470:	f1b8 0f00 	cmp.w	r8, #0
 800a474:	dd05      	ble.n	800a482 <_dtoa_r+0x82a>
 800a476:	4649      	mov	r1, r9
 800a478:	4642      	mov	r2, r8
 800a47a:	4658      	mov	r0, fp
 800a47c:	f000 fd08 	bl	800ae90 <__lshift>
 800a480:	4681      	mov	r9, r0
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	2b00      	cmp	r3, #0
 800a486:	dd05      	ble.n	800a494 <_dtoa_r+0x83c>
 800a488:	4621      	mov	r1, r4
 800a48a:	461a      	mov	r2, r3
 800a48c:	4658      	mov	r0, fp
 800a48e:	f000 fcff 	bl	800ae90 <__lshift>
 800a492:	4604      	mov	r4, r0
 800a494:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a496:	2b00      	cmp	r3, #0
 800a498:	d059      	beq.n	800a54e <_dtoa_r+0x8f6>
 800a49a:	4621      	mov	r1, r4
 800a49c:	4648      	mov	r0, r9
 800a49e:	f000 fd63 	bl	800af68 <__mcmp>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	da53      	bge.n	800a54e <_dtoa_r+0x8f6>
 800a4a6:	1e7b      	subs	r3, r7, #1
 800a4a8:	9304      	str	r3, [sp, #16]
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	220a      	movs	r2, #10
 800a4b0:	4658      	mov	r0, fp
 800a4b2:	f000 faf7 	bl	800aaa4 <__multadd>
 800a4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b8:	4681      	mov	r9, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 8172 	beq.w	800a7a4 <_dtoa_r+0xb4c>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	220a      	movs	r2, #10
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	f000 faec 	bl	800aaa4 <__multadd>
 800a4cc:	9b00      	ldr	r3, [sp, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	dc67      	bgt.n	800a5a4 <_dtoa_r+0x94c>
 800a4d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	dc41      	bgt.n	800a55e <_dtoa_r+0x906>
 800a4da:	e063      	b.n	800a5a4 <_dtoa_r+0x94c>
 800a4dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a4de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a4e2:	e746      	b.n	800a372 <_dtoa_r+0x71a>
 800a4e4:	9b07      	ldr	r3, [sp, #28]
 800a4e6:	1e5c      	subs	r4, r3, #1
 800a4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ea:	42a3      	cmp	r3, r4
 800a4ec:	bfbf      	itttt	lt
 800a4ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a4f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a4f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a4f4:	1ae3      	sublt	r3, r4, r3
 800a4f6:	bfb4      	ite	lt
 800a4f8:	18d2      	addlt	r2, r2, r3
 800a4fa:	1b1c      	subge	r4, r3, r4
 800a4fc:	9b07      	ldr	r3, [sp, #28]
 800a4fe:	bfbc      	itt	lt
 800a500:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a502:	2400      	movlt	r4, #0
 800a504:	2b00      	cmp	r3, #0
 800a506:	bfb5      	itete	lt
 800a508:	eba8 0603 	sublt.w	r6, r8, r3
 800a50c:	9b07      	ldrge	r3, [sp, #28]
 800a50e:	2300      	movlt	r3, #0
 800a510:	4646      	movge	r6, r8
 800a512:	e730      	b.n	800a376 <_dtoa_r+0x71e>
 800a514:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a516:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a518:	4646      	mov	r6, r8
 800a51a:	e735      	b.n	800a388 <_dtoa_r+0x730>
 800a51c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a51e:	e75c      	b.n	800a3da <_dtoa_r+0x782>
 800a520:	2300      	movs	r3, #0
 800a522:	e788      	b.n	800a436 <_dtoa_r+0x7de>
 800a524:	3fe00000 	.word	0x3fe00000
 800a528:	40240000 	.word	0x40240000
 800a52c:	40140000 	.word	0x40140000
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	e780      	b.n	800a436 <_dtoa_r+0x7de>
 800a534:	2300      	movs	r3, #0
 800a536:	930a      	str	r3, [sp, #40]	@ 0x28
 800a538:	e782      	b.n	800a440 <_dtoa_r+0x7e8>
 800a53a:	d099      	beq.n	800a470 <_dtoa_r+0x818>
 800a53c:	9a08      	ldr	r2, [sp, #32]
 800a53e:	331c      	adds	r3, #28
 800a540:	441a      	add	r2, r3
 800a542:	4498      	add	r8, r3
 800a544:	441e      	add	r6, r3
 800a546:	9208      	str	r2, [sp, #32]
 800a548:	e792      	b.n	800a470 <_dtoa_r+0x818>
 800a54a:	4603      	mov	r3, r0
 800a54c:	e7f6      	b.n	800a53c <_dtoa_r+0x8e4>
 800a54e:	9b07      	ldr	r3, [sp, #28]
 800a550:	9704      	str	r7, [sp, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	dc20      	bgt.n	800a598 <_dtoa_r+0x940>
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	dd1e      	ble.n	800a59c <_dtoa_r+0x944>
 800a55e:	9b00      	ldr	r3, [sp, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	f47f aec0 	bne.w	800a2e6 <_dtoa_r+0x68e>
 800a566:	4621      	mov	r1, r4
 800a568:	2205      	movs	r2, #5
 800a56a:	4658      	mov	r0, fp
 800a56c:	f000 fa9a 	bl	800aaa4 <__multadd>
 800a570:	4601      	mov	r1, r0
 800a572:	4604      	mov	r4, r0
 800a574:	4648      	mov	r0, r9
 800a576:	f000 fcf7 	bl	800af68 <__mcmp>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f77f aeb3 	ble.w	800a2e6 <_dtoa_r+0x68e>
 800a580:	4656      	mov	r6, sl
 800a582:	2331      	movs	r3, #49	@ 0x31
 800a584:	f806 3b01 	strb.w	r3, [r6], #1
 800a588:	9b04      	ldr	r3, [sp, #16]
 800a58a:	3301      	adds	r3, #1
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	e6ae      	b.n	800a2ee <_dtoa_r+0x696>
 800a590:	9c07      	ldr	r4, [sp, #28]
 800a592:	9704      	str	r7, [sp, #16]
 800a594:	4625      	mov	r5, r4
 800a596:	e7f3      	b.n	800a580 <_dtoa_r+0x928>
 800a598:	9b07      	ldr	r3, [sp, #28]
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 8104 	beq.w	800a7ac <_dtoa_r+0xb54>
 800a5a4:	2e00      	cmp	r6, #0
 800a5a6:	dd05      	ble.n	800a5b4 <_dtoa_r+0x95c>
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4632      	mov	r2, r6
 800a5ac:	4658      	mov	r0, fp
 800a5ae:	f000 fc6f 	bl	800ae90 <__lshift>
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d05a      	beq.n	800a670 <_dtoa_r+0xa18>
 800a5ba:	6869      	ldr	r1, [r5, #4]
 800a5bc:	4658      	mov	r0, fp
 800a5be:	f000 fa0f 	bl	800a9e0 <_Balloc>
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	b928      	cbnz	r0, 800a5d2 <_dtoa_r+0x97a>
 800a5c6:	4b84      	ldr	r3, [pc, #528]	@ (800a7d8 <_dtoa_r+0xb80>)
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5ce:	f7ff bb5a 	b.w	8009c86 <_dtoa_r+0x2e>
 800a5d2:	692a      	ldr	r2, [r5, #16]
 800a5d4:	3202      	adds	r2, #2
 800a5d6:	0092      	lsls	r2, r2, #2
 800a5d8:	f105 010c 	add.w	r1, r5, #12
 800a5dc:	300c      	adds	r0, #12
 800a5de:	f7ff fa9e 	bl	8009b1e <memcpy>
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4658      	mov	r0, fp
 800a5e8:	f000 fc52 	bl	800ae90 <__lshift>
 800a5ec:	f10a 0301 	add.w	r3, sl, #1
 800a5f0:	9307      	str	r3, [sp, #28]
 800a5f2:	9b00      	ldr	r3, [sp, #0]
 800a5f4:	4453      	add	r3, sl
 800a5f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5f8:	9b02      	ldr	r3, [sp, #8]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	462f      	mov	r7, r5
 800a600:	930a      	str	r3, [sp, #40]	@ 0x28
 800a602:	4605      	mov	r5, r0
 800a604:	9b07      	ldr	r3, [sp, #28]
 800a606:	4621      	mov	r1, r4
 800a608:	3b01      	subs	r3, #1
 800a60a:	4648      	mov	r0, r9
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	f7ff fa9b 	bl	8009b48 <quorem>
 800a612:	4639      	mov	r1, r7
 800a614:	9002      	str	r0, [sp, #8]
 800a616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a61a:	4648      	mov	r0, r9
 800a61c:	f000 fca4 	bl	800af68 <__mcmp>
 800a620:	462a      	mov	r2, r5
 800a622:	9008      	str	r0, [sp, #32]
 800a624:	4621      	mov	r1, r4
 800a626:	4658      	mov	r0, fp
 800a628:	f000 fcba 	bl	800afa0 <__mdiff>
 800a62c:	68c2      	ldr	r2, [r0, #12]
 800a62e:	4606      	mov	r6, r0
 800a630:	bb02      	cbnz	r2, 800a674 <_dtoa_r+0xa1c>
 800a632:	4601      	mov	r1, r0
 800a634:	4648      	mov	r0, r9
 800a636:	f000 fc97 	bl	800af68 <__mcmp>
 800a63a:	4602      	mov	r2, r0
 800a63c:	4631      	mov	r1, r6
 800a63e:	4658      	mov	r0, fp
 800a640:	920e      	str	r2, [sp, #56]	@ 0x38
 800a642:	f000 fa0d 	bl	800aa60 <_Bfree>
 800a646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a64a:	9e07      	ldr	r6, [sp, #28]
 800a64c:	ea43 0102 	orr.w	r1, r3, r2
 800a650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a652:	4319      	orrs	r1, r3
 800a654:	d110      	bne.n	800a678 <_dtoa_r+0xa20>
 800a656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a65a:	d029      	beq.n	800a6b0 <_dtoa_r+0xa58>
 800a65c:	9b08      	ldr	r3, [sp, #32]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd02      	ble.n	800a668 <_dtoa_r+0xa10>
 800a662:	9b02      	ldr	r3, [sp, #8]
 800a664:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a668:	9b00      	ldr	r3, [sp, #0]
 800a66a:	f883 8000 	strb.w	r8, [r3]
 800a66e:	e63f      	b.n	800a2f0 <_dtoa_r+0x698>
 800a670:	4628      	mov	r0, r5
 800a672:	e7bb      	b.n	800a5ec <_dtoa_r+0x994>
 800a674:	2201      	movs	r2, #1
 800a676:	e7e1      	b.n	800a63c <_dtoa_r+0x9e4>
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	db04      	blt.n	800a688 <_dtoa_r+0xa30>
 800a67e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a680:	430b      	orrs	r3, r1
 800a682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a684:	430b      	orrs	r3, r1
 800a686:	d120      	bne.n	800a6ca <_dtoa_r+0xa72>
 800a688:	2a00      	cmp	r2, #0
 800a68a:	dded      	ble.n	800a668 <_dtoa_r+0xa10>
 800a68c:	4649      	mov	r1, r9
 800a68e:	2201      	movs	r2, #1
 800a690:	4658      	mov	r0, fp
 800a692:	f000 fbfd 	bl	800ae90 <__lshift>
 800a696:	4621      	mov	r1, r4
 800a698:	4681      	mov	r9, r0
 800a69a:	f000 fc65 	bl	800af68 <__mcmp>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	dc03      	bgt.n	800a6aa <_dtoa_r+0xa52>
 800a6a2:	d1e1      	bne.n	800a668 <_dtoa_r+0xa10>
 800a6a4:	f018 0f01 	tst.w	r8, #1
 800a6a8:	d0de      	beq.n	800a668 <_dtoa_r+0xa10>
 800a6aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6ae:	d1d8      	bne.n	800a662 <_dtoa_r+0xa0a>
 800a6b0:	9a00      	ldr	r2, [sp, #0]
 800a6b2:	2339      	movs	r3, #57	@ 0x39
 800a6b4:	7013      	strb	r3, [r2, #0]
 800a6b6:	4633      	mov	r3, r6
 800a6b8:	461e      	mov	r6, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6c0:	2a39      	cmp	r2, #57	@ 0x39
 800a6c2:	d052      	beq.n	800a76a <_dtoa_r+0xb12>
 800a6c4:	3201      	adds	r2, #1
 800a6c6:	701a      	strb	r2, [r3, #0]
 800a6c8:	e612      	b.n	800a2f0 <_dtoa_r+0x698>
 800a6ca:	2a00      	cmp	r2, #0
 800a6cc:	dd07      	ble.n	800a6de <_dtoa_r+0xa86>
 800a6ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6d2:	d0ed      	beq.n	800a6b0 <_dtoa_r+0xa58>
 800a6d4:	9a00      	ldr	r2, [sp, #0]
 800a6d6:	f108 0301 	add.w	r3, r8, #1
 800a6da:	7013      	strb	r3, [r2, #0]
 800a6dc:	e608      	b.n	800a2f0 <_dtoa_r+0x698>
 800a6de:	9b07      	ldr	r3, [sp, #28]
 800a6e0:	9a07      	ldr	r2, [sp, #28]
 800a6e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a6e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d028      	beq.n	800a73e <_dtoa_r+0xae6>
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	220a      	movs	r2, #10
 800a6f2:	4658      	mov	r0, fp
 800a6f4:	f000 f9d6 	bl	800aaa4 <__multadd>
 800a6f8:	42af      	cmp	r7, r5
 800a6fa:	4681      	mov	r9, r0
 800a6fc:	f04f 0300 	mov.w	r3, #0
 800a700:	f04f 020a 	mov.w	r2, #10
 800a704:	4639      	mov	r1, r7
 800a706:	4658      	mov	r0, fp
 800a708:	d107      	bne.n	800a71a <_dtoa_r+0xac2>
 800a70a:	f000 f9cb 	bl	800aaa4 <__multadd>
 800a70e:	4607      	mov	r7, r0
 800a710:	4605      	mov	r5, r0
 800a712:	9b07      	ldr	r3, [sp, #28]
 800a714:	3301      	adds	r3, #1
 800a716:	9307      	str	r3, [sp, #28]
 800a718:	e774      	b.n	800a604 <_dtoa_r+0x9ac>
 800a71a:	f000 f9c3 	bl	800aaa4 <__multadd>
 800a71e:	4629      	mov	r1, r5
 800a720:	4607      	mov	r7, r0
 800a722:	2300      	movs	r3, #0
 800a724:	220a      	movs	r2, #10
 800a726:	4658      	mov	r0, fp
 800a728:	f000 f9bc 	bl	800aaa4 <__multadd>
 800a72c:	4605      	mov	r5, r0
 800a72e:	e7f0      	b.n	800a712 <_dtoa_r+0xaba>
 800a730:	9b00      	ldr	r3, [sp, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	bfcc      	ite	gt
 800a736:	461e      	movgt	r6, r3
 800a738:	2601      	movle	r6, #1
 800a73a:	4456      	add	r6, sl
 800a73c:	2700      	movs	r7, #0
 800a73e:	4649      	mov	r1, r9
 800a740:	2201      	movs	r2, #1
 800a742:	4658      	mov	r0, fp
 800a744:	f000 fba4 	bl	800ae90 <__lshift>
 800a748:	4621      	mov	r1, r4
 800a74a:	4681      	mov	r9, r0
 800a74c:	f000 fc0c 	bl	800af68 <__mcmp>
 800a750:	2800      	cmp	r0, #0
 800a752:	dcb0      	bgt.n	800a6b6 <_dtoa_r+0xa5e>
 800a754:	d102      	bne.n	800a75c <_dtoa_r+0xb04>
 800a756:	f018 0f01 	tst.w	r8, #1
 800a75a:	d1ac      	bne.n	800a6b6 <_dtoa_r+0xa5e>
 800a75c:	4633      	mov	r3, r6
 800a75e:	461e      	mov	r6, r3
 800a760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a764:	2a30      	cmp	r2, #48	@ 0x30
 800a766:	d0fa      	beq.n	800a75e <_dtoa_r+0xb06>
 800a768:	e5c2      	b.n	800a2f0 <_dtoa_r+0x698>
 800a76a:	459a      	cmp	sl, r3
 800a76c:	d1a4      	bne.n	800a6b8 <_dtoa_r+0xa60>
 800a76e:	9b04      	ldr	r3, [sp, #16]
 800a770:	3301      	adds	r3, #1
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	2331      	movs	r3, #49	@ 0x31
 800a776:	f88a 3000 	strb.w	r3, [sl]
 800a77a:	e5b9      	b.n	800a2f0 <_dtoa_r+0x698>
 800a77c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a77e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a7dc <_dtoa_r+0xb84>
 800a782:	b11b      	cbz	r3, 800a78c <_dtoa_r+0xb34>
 800a784:	f10a 0308 	add.w	r3, sl, #8
 800a788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	4650      	mov	r0, sl
 800a78e:	b019      	add	sp, #100	@ 0x64
 800a790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a796:	2b01      	cmp	r3, #1
 800a798:	f77f ae37 	ble.w	800a40a <_dtoa_r+0x7b2>
 800a79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	e655      	b.n	800a450 <_dtoa_r+0x7f8>
 800a7a4:	9b00      	ldr	r3, [sp, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f77f aed6 	ble.w	800a558 <_dtoa_r+0x900>
 800a7ac:	4656      	mov	r6, sl
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	4648      	mov	r0, r9
 800a7b2:	f7ff f9c9 	bl	8009b48 <quorem>
 800a7b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7ba:	f806 8b01 	strb.w	r8, [r6], #1
 800a7be:	9b00      	ldr	r3, [sp, #0]
 800a7c0:	eba6 020a 	sub.w	r2, r6, sl
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	ddb3      	ble.n	800a730 <_dtoa_r+0xad8>
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	220a      	movs	r2, #10
 800a7ce:	4658      	mov	r0, fp
 800a7d0:	f000 f968 	bl	800aaa4 <__multadd>
 800a7d4:	4681      	mov	r9, r0
 800a7d6:	e7ea      	b.n	800a7ae <_dtoa_r+0xb56>
 800a7d8:	0800e6ad 	.word	0x0800e6ad
 800a7dc:	0800e631 	.word	0x0800e631

0800a7e0 <_free_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	d041      	beq.n	800a86c <_free_r+0x8c>
 800a7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ec:	1f0c      	subs	r4, r1, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	bfb8      	it	lt
 800a7f2:	18e4      	addlt	r4, r4, r3
 800a7f4:	f000 f8e8 	bl	800a9c8 <__malloc_lock>
 800a7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a870 <_free_r+0x90>)
 800a7fa:	6813      	ldr	r3, [r2, #0]
 800a7fc:	b933      	cbnz	r3, 800a80c <_free_r+0x2c>
 800a7fe:	6063      	str	r3, [r4, #4]
 800a800:	6014      	str	r4, [r2, #0]
 800a802:	4628      	mov	r0, r5
 800a804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a808:	f000 b8e4 	b.w	800a9d4 <__malloc_unlock>
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	d908      	bls.n	800a822 <_free_r+0x42>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	1821      	adds	r1, r4, r0
 800a814:	428b      	cmp	r3, r1
 800a816:	bf01      	itttt	eq
 800a818:	6819      	ldreq	r1, [r3, #0]
 800a81a:	685b      	ldreq	r3, [r3, #4]
 800a81c:	1809      	addeq	r1, r1, r0
 800a81e:	6021      	streq	r1, [r4, #0]
 800a820:	e7ed      	b.n	800a7fe <_free_r+0x1e>
 800a822:	461a      	mov	r2, r3
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	b10b      	cbz	r3, 800a82c <_free_r+0x4c>
 800a828:	42a3      	cmp	r3, r4
 800a82a:	d9fa      	bls.n	800a822 <_free_r+0x42>
 800a82c:	6811      	ldr	r1, [r2, #0]
 800a82e:	1850      	adds	r0, r2, r1
 800a830:	42a0      	cmp	r0, r4
 800a832:	d10b      	bne.n	800a84c <_free_r+0x6c>
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	4401      	add	r1, r0
 800a838:	1850      	adds	r0, r2, r1
 800a83a:	4283      	cmp	r3, r0
 800a83c:	6011      	str	r1, [r2, #0]
 800a83e:	d1e0      	bne.n	800a802 <_free_r+0x22>
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	6053      	str	r3, [r2, #4]
 800a846:	4408      	add	r0, r1
 800a848:	6010      	str	r0, [r2, #0]
 800a84a:	e7da      	b.n	800a802 <_free_r+0x22>
 800a84c:	d902      	bls.n	800a854 <_free_r+0x74>
 800a84e:	230c      	movs	r3, #12
 800a850:	602b      	str	r3, [r5, #0]
 800a852:	e7d6      	b.n	800a802 <_free_r+0x22>
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	1821      	adds	r1, r4, r0
 800a858:	428b      	cmp	r3, r1
 800a85a:	bf04      	itt	eq
 800a85c:	6819      	ldreq	r1, [r3, #0]
 800a85e:	685b      	ldreq	r3, [r3, #4]
 800a860:	6063      	str	r3, [r4, #4]
 800a862:	bf04      	itt	eq
 800a864:	1809      	addeq	r1, r1, r0
 800a866:	6021      	streq	r1, [r4, #0]
 800a868:	6054      	str	r4, [r2, #4]
 800a86a:	e7ca      	b.n	800a802 <_free_r+0x22>
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	200008bc 	.word	0x200008bc

0800a874 <malloc>:
 800a874:	4b02      	ldr	r3, [pc, #8]	@ (800a880 <malloc+0xc>)
 800a876:	4601      	mov	r1, r0
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	f000 b825 	b.w	800a8c8 <_malloc_r>
 800a87e:	bf00      	nop
 800a880:	20000048 	.word	0x20000048

0800a884 <sbrk_aligned>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	4e0f      	ldr	r6, [pc, #60]	@ (800a8c4 <sbrk_aligned+0x40>)
 800a888:	460c      	mov	r4, r1
 800a88a:	6831      	ldr	r1, [r6, #0]
 800a88c:	4605      	mov	r5, r0
 800a88e:	b911      	cbnz	r1, 800a896 <sbrk_aligned+0x12>
 800a890:	f001 fe0c 	bl	800c4ac <_sbrk_r>
 800a894:	6030      	str	r0, [r6, #0]
 800a896:	4621      	mov	r1, r4
 800a898:	4628      	mov	r0, r5
 800a89a:	f001 fe07 	bl	800c4ac <_sbrk_r>
 800a89e:	1c43      	adds	r3, r0, #1
 800a8a0:	d103      	bne.n	800a8aa <sbrk_aligned+0x26>
 800a8a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	bd70      	pop	{r4, r5, r6, pc}
 800a8aa:	1cc4      	adds	r4, r0, #3
 800a8ac:	f024 0403 	bic.w	r4, r4, #3
 800a8b0:	42a0      	cmp	r0, r4
 800a8b2:	d0f8      	beq.n	800a8a6 <sbrk_aligned+0x22>
 800a8b4:	1a21      	subs	r1, r4, r0
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f001 fdf8 	bl	800c4ac <_sbrk_r>
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d1f2      	bne.n	800a8a6 <sbrk_aligned+0x22>
 800a8c0:	e7ef      	b.n	800a8a2 <sbrk_aligned+0x1e>
 800a8c2:	bf00      	nop
 800a8c4:	200008b8 	.word	0x200008b8

0800a8c8 <_malloc_r>:
 800a8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8cc:	1ccd      	adds	r5, r1, #3
 800a8ce:	f025 0503 	bic.w	r5, r5, #3
 800a8d2:	3508      	adds	r5, #8
 800a8d4:	2d0c      	cmp	r5, #12
 800a8d6:	bf38      	it	cc
 800a8d8:	250c      	movcc	r5, #12
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	4606      	mov	r6, r0
 800a8de:	db01      	blt.n	800a8e4 <_malloc_r+0x1c>
 800a8e0:	42a9      	cmp	r1, r5
 800a8e2:	d904      	bls.n	800a8ee <_malloc_r+0x26>
 800a8e4:	230c      	movs	r3, #12
 800a8e6:	6033      	str	r3, [r6, #0]
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9c4 <_malloc_r+0xfc>
 800a8f2:	f000 f869 	bl	800a9c8 <__malloc_lock>
 800a8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a8fa:	461c      	mov	r4, r3
 800a8fc:	bb44      	cbnz	r4, 800a950 <_malloc_r+0x88>
 800a8fe:	4629      	mov	r1, r5
 800a900:	4630      	mov	r0, r6
 800a902:	f7ff ffbf 	bl	800a884 <sbrk_aligned>
 800a906:	1c43      	adds	r3, r0, #1
 800a908:	4604      	mov	r4, r0
 800a90a:	d158      	bne.n	800a9be <_malloc_r+0xf6>
 800a90c:	f8d8 4000 	ldr.w	r4, [r8]
 800a910:	4627      	mov	r7, r4
 800a912:	2f00      	cmp	r7, #0
 800a914:	d143      	bne.n	800a99e <_malloc_r+0xd6>
 800a916:	2c00      	cmp	r4, #0
 800a918:	d04b      	beq.n	800a9b2 <_malloc_r+0xea>
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	4639      	mov	r1, r7
 800a91e:	4630      	mov	r0, r6
 800a920:	eb04 0903 	add.w	r9, r4, r3
 800a924:	f001 fdc2 	bl	800c4ac <_sbrk_r>
 800a928:	4581      	cmp	r9, r0
 800a92a:	d142      	bne.n	800a9b2 <_malloc_r+0xea>
 800a92c:	6821      	ldr	r1, [r4, #0]
 800a92e:	1a6d      	subs	r5, r5, r1
 800a930:	4629      	mov	r1, r5
 800a932:	4630      	mov	r0, r6
 800a934:	f7ff ffa6 	bl	800a884 <sbrk_aligned>
 800a938:	3001      	adds	r0, #1
 800a93a:	d03a      	beq.n	800a9b2 <_malloc_r+0xea>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	442b      	add	r3, r5
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	f8d8 3000 	ldr.w	r3, [r8]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	bb62      	cbnz	r2, 800a9a4 <_malloc_r+0xdc>
 800a94a:	f8c8 7000 	str.w	r7, [r8]
 800a94e:	e00f      	b.n	800a970 <_malloc_r+0xa8>
 800a950:	6822      	ldr	r2, [r4, #0]
 800a952:	1b52      	subs	r2, r2, r5
 800a954:	d420      	bmi.n	800a998 <_malloc_r+0xd0>
 800a956:	2a0b      	cmp	r2, #11
 800a958:	d917      	bls.n	800a98a <_malloc_r+0xc2>
 800a95a:	1961      	adds	r1, r4, r5
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	6025      	str	r5, [r4, #0]
 800a960:	bf18      	it	ne
 800a962:	6059      	strne	r1, [r3, #4]
 800a964:	6863      	ldr	r3, [r4, #4]
 800a966:	bf08      	it	eq
 800a968:	f8c8 1000 	streq.w	r1, [r8]
 800a96c:	5162      	str	r2, [r4, r5]
 800a96e:	604b      	str	r3, [r1, #4]
 800a970:	4630      	mov	r0, r6
 800a972:	f000 f82f 	bl	800a9d4 <__malloc_unlock>
 800a976:	f104 000b 	add.w	r0, r4, #11
 800a97a:	1d23      	adds	r3, r4, #4
 800a97c:	f020 0007 	bic.w	r0, r0, #7
 800a980:	1ac2      	subs	r2, r0, r3
 800a982:	bf1c      	itt	ne
 800a984:	1a1b      	subne	r3, r3, r0
 800a986:	50a3      	strne	r3, [r4, r2]
 800a988:	e7af      	b.n	800a8ea <_malloc_r+0x22>
 800a98a:	6862      	ldr	r2, [r4, #4]
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	bf0c      	ite	eq
 800a990:	f8c8 2000 	streq.w	r2, [r8]
 800a994:	605a      	strne	r2, [r3, #4]
 800a996:	e7eb      	b.n	800a970 <_malloc_r+0xa8>
 800a998:	4623      	mov	r3, r4
 800a99a:	6864      	ldr	r4, [r4, #4]
 800a99c:	e7ae      	b.n	800a8fc <_malloc_r+0x34>
 800a99e:	463c      	mov	r4, r7
 800a9a0:	687f      	ldr	r7, [r7, #4]
 800a9a2:	e7b6      	b.n	800a912 <_malloc_r+0x4a>
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	d1fb      	bne.n	800a9a4 <_malloc_r+0xdc>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	6053      	str	r3, [r2, #4]
 800a9b0:	e7de      	b.n	800a970 <_malloc_r+0xa8>
 800a9b2:	230c      	movs	r3, #12
 800a9b4:	6033      	str	r3, [r6, #0]
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f000 f80c 	bl	800a9d4 <__malloc_unlock>
 800a9bc:	e794      	b.n	800a8e8 <_malloc_r+0x20>
 800a9be:	6005      	str	r5, [r0, #0]
 800a9c0:	e7d6      	b.n	800a970 <_malloc_r+0xa8>
 800a9c2:	bf00      	nop
 800a9c4:	200008bc 	.word	0x200008bc

0800a9c8 <__malloc_lock>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	@ (800a9d0 <__malloc_lock+0x8>)
 800a9ca:	f7ff b8a6 	b.w	8009b1a <__retarget_lock_acquire_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	200008b4 	.word	0x200008b4

0800a9d4 <__malloc_unlock>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	@ (800a9dc <__malloc_unlock+0x8>)
 800a9d6:	f7ff b8a1 	b.w	8009b1c <__retarget_lock_release_recursive>
 800a9da:	bf00      	nop
 800a9dc:	200008b4 	.word	0x200008b4

0800a9e0 <_Balloc>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	69c6      	ldr	r6, [r0, #28]
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	b976      	cbnz	r6, 800aa08 <_Balloc+0x28>
 800a9ea:	2010      	movs	r0, #16
 800a9ec:	f7ff ff42 	bl	800a874 <malloc>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	61e0      	str	r0, [r4, #28]
 800a9f4:	b920      	cbnz	r0, 800aa00 <_Balloc+0x20>
 800a9f6:	4b18      	ldr	r3, [pc, #96]	@ (800aa58 <_Balloc+0x78>)
 800a9f8:	4818      	ldr	r0, [pc, #96]	@ (800aa5c <_Balloc+0x7c>)
 800a9fa:	216b      	movs	r1, #107	@ 0x6b
 800a9fc:	f001 fd70 	bl	800c4e0 <__assert_func>
 800aa00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa04:	6006      	str	r6, [r0, #0]
 800aa06:	60c6      	str	r6, [r0, #12]
 800aa08:	69e6      	ldr	r6, [r4, #28]
 800aa0a:	68f3      	ldr	r3, [r6, #12]
 800aa0c:	b183      	cbz	r3, 800aa30 <_Balloc+0x50>
 800aa0e:	69e3      	ldr	r3, [r4, #28]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa16:	b9b8      	cbnz	r0, 800aa48 <_Balloc+0x68>
 800aa18:	2101      	movs	r1, #1
 800aa1a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa1e:	1d72      	adds	r2, r6, #5
 800aa20:	0092      	lsls	r2, r2, #2
 800aa22:	4620      	mov	r0, r4
 800aa24:	f001 fd7a 	bl	800c51c <_calloc_r>
 800aa28:	b160      	cbz	r0, 800aa44 <_Balloc+0x64>
 800aa2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa2e:	e00e      	b.n	800aa4e <_Balloc+0x6e>
 800aa30:	2221      	movs	r2, #33	@ 0x21
 800aa32:	2104      	movs	r1, #4
 800aa34:	4620      	mov	r0, r4
 800aa36:	f001 fd71 	bl	800c51c <_calloc_r>
 800aa3a:	69e3      	ldr	r3, [r4, #28]
 800aa3c:	60f0      	str	r0, [r6, #12]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e4      	bne.n	800aa0e <_Balloc+0x2e>
 800aa44:	2000      	movs	r0, #0
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	6802      	ldr	r2, [r0, #0]
 800aa4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa54:	e7f7      	b.n	800aa46 <_Balloc+0x66>
 800aa56:	bf00      	nop
 800aa58:	0800e63e 	.word	0x0800e63e
 800aa5c:	0800e6be 	.word	0x0800e6be

0800aa60 <_Bfree>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	69c6      	ldr	r6, [r0, #28]
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	b976      	cbnz	r6, 800aa88 <_Bfree+0x28>
 800aa6a:	2010      	movs	r0, #16
 800aa6c:	f7ff ff02 	bl	800a874 <malloc>
 800aa70:	4602      	mov	r2, r0
 800aa72:	61e8      	str	r0, [r5, #28]
 800aa74:	b920      	cbnz	r0, 800aa80 <_Bfree+0x20>
 800aa76:	4b09      	ldr	r3, [pc, #36]	@ (800aa9c <_Bfree+0x3c>)
 800aa78:	4809      	ldr	r0, [pc, #36]	@ (800aaa0 <_Bfree+0x40>)
 800aa7a:	218f      	movs	r1, #143	@ 0x8f
 800aa7c:	f001 fd30 	bl	800c4e0 <__assert_func>
 800aa80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa84:	6006      	str	r6, [r0, #0]
 800aa86:	60c6      	str	r6, [r0, #12]
 800aa88:	b13c      	cbz	r4, 800aa9a <_Bfree+0x3a>
 800aa8a:	69eb      	ldr	r3, [r5, #28]
 800aa8c:	6862      	ldr	r2, [r4, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa94:	6021      	str	r1, [r4, #0]
 800aa96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	0800e63e 	.word	0x0800e63e
 800aaa0:	0800e6be 	.word	0x0800e6be

0800aaa4 <__multadd>:
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	690d      	ldr	r5, [r1, #16]
 800aaaa:	4607      	mov	r7, r0
 800aaac:	460c      	mov	r4, r1
 800aaae:	461e      	mov	r6, r3
 800aab0:	f101 0c14 	add.w	ip, r1, #20
 800aab4:	2000      	movs	r0, #0
 800aab6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaba:	b299      	uxth	r1, r3
 800aabc:	fb02 6101 	mla	r1, r2, r1, r6
 800aac0:	0c1e      	lsrs	r6, r3, #16
 800aac2:	0c0b      	lsrs	r3, r1, #16
 800aac4:	fb02 3306 	mla	r3, r2, r6, r3
 800aac8:	b289      	uxth	r1, r1
 800aaca:	3001      	adds	r0, #1
 800aacc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aad0:	4285      	cmp	r5, r0
 800aad2:	f84c 1b04 	str.w	r1, [ip], #4
 800aad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aada:	dcec      	bgt.n	800aab6 <__multadd+0x12>
 800aadc:	b30e      	cbz	r6, 800ab22 <__multadd+0x7e>
 800aade:	68a3      	ldr	r3, [r4, #8]
 800aae0:	42ab      	cmp	r3, r5
 800aae2:	dc19      	bgt.n	800ab18 <__multadd+0x74>
 800aae4:	6861      	ldr	r1, [r4, #4]
 800aae6:	4638      	mov	r0, r7
 800aae8:	3101      	adds	r1, #1
 800aaea:	f7ff ff79 	bl	800a9e0 <_Balloc>
 800aaee:	4680      	mov	r8, r0
 800aaf0:	b928      	cbnz	r0, 800aafe <__multadd+0x5a>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab28 <__multadd+0x84>)
 800aaf6:	480d      	ldr	r0, [pc, #52]	@ (800ab2c <__multadd+0x88>)
 800aaf8:	21ba      	movs	r1, #186	@ 0xba
 800aafa:	f001 fcf1 	bl	800c4e0 <__assert_func>
 800aafe:	6922      	ldr	r2, [r4, #16]
 800ab00:	3202      	adds	r2, #2
 800ab02:	f104 010c 	add.w	r1, r4, #12
 800ab06:	0092      	lsls	r2, r2, #2
 800ab08:	300c      	adds	r0, #12
 800ab0a:	f7ff f808 	bl	8009b1e <memcpy>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7ff ffa5 	bl	800aa60 <_Bfree>
 800ab16:	4644      	mov	r4, r8
 800ab18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab1c:	3501      	adds	r5, #1
 800ab1e:	615e      	str	r6, [r3, #20]
 800ab20:	6125      	str	r5, [r4, #16]
 800ab22:	4620      	mov	r0, r4
 800ab24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab28:	0800e6ad 	.word	0x0800e6ad
 800ab2c:	0800e6be 	.word	0x0800e6be

0800ab30 <__s2b>:
 800ab30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab34:	460c      	mov	r4, r1
 800ab36:	4615      	mov	r5, r2
 800ab38:	461f      	mov	r7, r3
 800ab3a:	2209      	movs	r2, #9
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	4606      	mov	r6, r0
 800ab40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab44:	2100      	movs	r1, #0
 800ab46:	2201      	movs	r2, #1
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	db09      	blt.n	800ab60 <__s2b+0x30>
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f7ff ff47 	bl	800a9e0 <_Balloc>
 800ab52:	b940      	cbnz	r0, 800ab66 <__s2b+0x36>
 800ab54:	4602      	mov	r2, r0
 800ab56:	4b19      	ldr	r3, [pc, #100]	@ (800abbc <__s2b+0x8c>)
 800ab58:	4819      	ldr	r0, [pc, #100]	@ (800abc0 <__s2b+0x90>)
 800ab5a:	21d3      	movs	r1, #211	@ 0xd3
 800ab5c:	f001 fcc0 	bl	800c4e0 <__assert_func>
 800ab60:	0052      	lsls	r2, r2, #1
 800ab62:	3101      	adds	r1, #1
 800ab64:	e7f0      	b.n	800ab48 <__s2b+0x18>
 800ab66:	9b08      	ldr	r3, [sp, #32]
 800ab68:	6143      	str	r3, [r0, #20]
 800ab6a:	2d09      	cmp	r5, #9
 800ab6c:	f04f 0301 	mov.w	r3, #1
 800ab70:	6103      	str	r3, [r0, #16]
 800ab72:	dd16      	ble.n	800aba2 <__s2b+0x72>
 800ab74:	f104 0909 	add.w	r9, r4, #9
 800ab78:	46c8      	mov	r8, r9
 800ab7a:	442c      	add	r4, r5
 800ab7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab80:	4601      	mov	r1, r0
 800ab82:	3b30      	subs	r3, #48	@ 0x30
 800ab84:	220a      	movs	r2, #10
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff ff8c 	bl	800aaa4 <__multadd>
 800ab8c:	45a0      	cmp	r8, r4
 800ab8e:	d1f5      	bne.n	800ab7c <__s2b+0x4c>
 800ab90:	f1a5 0408 	sub.w	r4, r5, #8
 800ab94:	444c      	add	r4, r9
 800ab96:	1b2d      	subs	r5, r5, r4
 800ab98:	1963      	adds	r3, r4, r5
 800ab9a:	42bb      	cmp	r3, r7
 800ab9c:	db04      	blt.n	800aba8 <__s2b+0x78>
 800ab9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba2:	340a      	adds	r4, #10
 800aba4:	2509      	movs	r5, #9
 800aba6:	e7f6      	b.n	800ab96 <__s2b+0x66>
 800aba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abac:	4601      	mov	r1, r0
 800abae:	3b30      	subs	r3, #48	@ 0x30
 800abb0:	220a      	movs	r2, #10
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7ff ff76 	bl	800aaa4 <__multadd>
 800abb8:	e7ee      	b.n	800ab98 <__s2b+0x68>
 800abba:	bf00      	nop
 800abbc:	0800e6ad 	.word	0x0800e6ad
 800abc0:	0800e6be 	.word	0x0800e6be

0800abc4 <__hi0bits>:
 800abc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800abc8:	4603      	mov	r3, r0
 800abca:	bf36      	itet	cc
 800abcc:	0403      	lslcc	r3, r0, #16
 800abce:	2000      	movcs	r0, #0
 800abd0:	2010      	movcc	r0, #16
 800abd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abd6:	bf3c      	itt	cc
 800abd8:	021b      	lslcc	r3, r3, #8
 800abda:	3008      	addcc	r0, #8
 800abdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abe0:	bf3c      	itt	cc
 800abe2:	011b      	lslcc	r3, r3, #4
 800abe4:	3004      	addcc	r0, #4
 800abe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abea:	bf3c      	itt	cc
 800abec:	009b      	lslcc	r3, r3, #2
 800abee:	3002      	addcc	r0, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	db05      	blt.n	800ac00 <__hi0bits+0x3c>
 800abf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abf8:	f100 0001 	add.w	r0, r0, #1
 800abfc:	bf08      	it	eq
 800abfe:	2020      	moveq	r0, #32
 800ac00:	4770      	bx	lr

0800ac02 <__lo0bits>:
 800ac02:	6803      	ldr	r3, [r0, #0]
 800ac04:	4602      	mov	r2, r0
 800ac06:	f013 0007 	ands.w	r0, r3, #7
 800ac0a:	d00b      	beq.n	800ac24 <__lo0bits+0x22>
 800ac0c:	07d9      	lsls	r1, r3, #31
 800ac0e:	d421      	bmi.n	800ac54 <__lo0bits+0x52>
 800ac10:	0798      	lsls	r0, r3, #30
 800ac12:	bf49      	itett	mi
 800ac14:	085b      	lsrmi	r3, r3, #1
 800ac16:	089b      	lsrpl	r3, r3, #2
 800ac18:	2001      	movmi	r0, #1
 800ac1a:	6013      	strmi	r3, [r2, #0]
 800ac1c:	bf5c      	itt	pl
 800ac1e:	6013      	strpl	r3, [r2, #0]
 800ac20:	2002      	movpl	r0, #2
 800ac22:	4770      	bx	lr
 800ac24:	b299      	uxth	r1, r3
 800ac26:	b909      	cbnz	r1, 800ac2c <__lo0bits+0x2a>
 800ac28:	0c1b      	lsrs	r3, r3, #16
 800ac2a:	2010      	movs	r0, #16
 800ac2c:	b2d9      	uxtb	r1, r3
 800ac2e:	b909      	cbnz	r1, 800ac34 <__lo0bits+0x32>
 800ac30:	3008      	adds	r0, #8
 800ac32:	0a1b      	lsrs	r3, r3, #8
 800ac34:	0719      	lsls	r1, r3, #28
 800ac36:	bf04      	itt	eq
 800ac38:	091b      	lsreq	r3, r3, #4
 800ac3a:	3004      	addeq	r0, #4
 800ac3c:	0799      	lsls	r1, r3, #30
 800ac3e:	bf04      	itt	eq
 800ac40:	089b      	lsreq	r3, r3, #2
 800ac42:	3002      	addeq	r0, #2
 800ac44:	07d9      	lsls	r1, r3, #31
 800ac46:	d403      	bmi.n	800ac50 <__lo0bits+0x4e>
 800ac48:	085b      	lsrs	r3, r3, #1
 800ac4a:	f100 0001 	add.w	r0, r0, #1
 800ac4e:	d003      	beq.n	800ac58 <__lo0bits+0x56>
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	4770      	bx	lr
 800ac54:	2000      	movs	r0, #0
 800ac56:	4770      	bx	lr
 800ac58:	2020      	movs	r0, #32
 800ac5a:	4770      	bx	lr

0800ac5c <__i2b>:
 800ac5c:	b510      	push	{r4, lr}
 800ac5e:	460c      	mov	r4, r1
 800ac60:	2101      	movs	r1, #1
 800ac62:	f7ff febd 	bl	800a9e0 <_Balloc>
 800ac66:	4602      	mov	r2, r0
 800ac68:	b928      	cbnz	r0, 800ac76 <__i2b+0x1a>
 800ac6a:	4b05      	ldr	r3, [pc, #20]	@ (800ac80 <__i2b+0x24>)
 800ac6c:	4805      	ldr	r0, [pc, #20]	@ (800ac84 <__i2b+0x28>)
 800ac6e:	f240 1145 	movw	r1, #325	@ 0x145
 800ac72:	f001 fc35 	bl	800c4e0 <__assert_func>
 800ac76:	2301      	movs	r3, #1
 800ac78:	6144      	str	r4, [r0, #20]
 800ac7a:	6103      	str	r3, [r0, #16]
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800e6ad 	.word	0x0800e6ad
 800ac84:	0800e6be 	.word	0x0800e6be

0800ac88 <__multiply>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	4614      	mov	r4, r2
 800ac8e:	690a      	ldr	r2, [r1, #16]
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	bfa8      	it	ge
 800ac96:	4623      	movge	r3, r4
 800ac98:	460f      	mov	r7, r1
 800ac9a:	bfa4      	itt	ge
 800ac9c:	460c      	movge	r4, r1
 800ac9e:	461f      	movge	r7, r3
 800aca0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aca4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aca8:	68a3      	ldr	r3, [r4, #8]
 800acaa:	6861      	ldr	r1, [r4, #4]
 800acac:	eb0a 0609 	add.w	r6, sl, r9
 800acb0:	42b3      	cmp	r3, r6
 800acb2:	b085      	sub	sp, #20
 800acb4:	bfb8      	it	lt
 800acb6:	3101      	addlt	r1, #1
 800acb8:	f7ff fe92 	bl	800a9e0 <_Balloc>
 800acbc:	b930      	cbnz	r0, 800accc <__multiply+0x44>
 800acbe:	4602      	mov	r2, r0
 800acc0:	4b44      	ldr	r3, [pc, #272]	@ (800add4 <__multiply+0x14c>)
 800acc2:	4845      	ldr	r0, [pc, #276]	@ (800add8 <__multiply+0x150>)
 800acc4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800acc8:	f001 fc0a 	bl	800c4e0 <__assert_func>
 800accc:	f100 0514 	add.w	r5, r0, #20
 800acd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acd4:	462b      	mov	r3, r5
 800acd6:	2200      	movs	r2, #0
 800acd8:	4543      	cmp	r3, r8
 800acda:	d321      	bcc.n	800ad20 <__multiply+0x98>
 800acdc:	f107 0114 	add.w	r1, r7, #20
 800ace0:	f104 0214 	add.w	r2, r4, #20
 800ace4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ace8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800acec:	9302      	str	r3, [sp, #8]
 800acee:	1b13      	subs	r3, r2, r4
 800acf0:	3b15      	subs	r3, #21
 800acf2:	f023 0303 	bic.w	r3, r3, #3
 800acf6:	3304      	adds	r3, #4
 800acf8:	f104 0715 	add.w	r7, r4, #21
 800acfc:	42ba      	cmp	r2, r7
 800acfe:	bf38      	it	cc
 800ad00:	2304      	movcc	r3, #4
 800ad02:	9301      	str	r3, [sp, #4]
 800ad04:	9b02      	ldr	r3, [sp, #8]
 800ad06:	9103      	str	r1, [sp, #12]
 800ad08:	428b      	cmp	r3, r1
 800ad0a:	d80c      	bhi.n	800ad26 <__multiply+0x9e>
 800ad0c:	2e00      	cmp	r6, #0
 800ad0e:	dd03      	ble.n	800ad18 <__multiply+0x90>
 800ad10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d05b      	beq.n	800add0 <__multiply+0x148>
 800ad18:	6106      	str	r6, [r0, #16]
 800ad1a:	b005      	add	sp, #20
 800ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad20:	f843 2b04 	str.w	r2, [r3], #4
 800ad24:	e7d8      	b.n	800acd8 <__multiply+0x50>
 800ad26:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad2a:	f1ba 0f00 	cmp.w	sl, #0
 800ad2e:	d024      	beq.n	800ad7a <__multiply+0xf2>
 800ad30:	f104 0e14 	add.w	lr, r4, #20
 800ad34:	46a9      	mov	r9, r5
 800ad36:	f04f 0c00 	mov.w	ip, #0
 800ad3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad3e:	f8d9 3000 	ldr.w	r3, [r9]
 800ad42:	fa1f fb87 	uxth.w	fp, r7
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad4c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ad50:	f8d9 7000 	ldr.w	r7, [r9]
 800ad54:	4463      	add	r3, ip
 800ad56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad5a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad68:	4572      	cmp	r2, lr
 800ad6a:	f849 3b04 	str.w	r3, [r9], #4
 800ad6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad72:	d8e2      	bhi.n	800ad3a <__multiply+0xb2>
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	f845 c003 	str.w	ip, [r5, r3]
 800ad7a:	9b03      	ldr	r3, [sp, #12]
 800ad7c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad80:	3104      	adds	r1, #4
 800ad82:	f1b9 0f00 	cmp.w	r9, #0
 800ad86:	d021      	beq.n	800adcc <__multiply+0x144>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	f104 0c14 	add.w	ip, r4, #20
 800ad8e:	46ae      	mov	lr, r5
 800ad90:	f04f 0a00 	mov.w	sl, #0
 800ad94:	f8bc b000 	ldrh.w	fp, [ip]
 800ad98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad9c:	fb09 770b 	mla	r7, r9, fp, r7
 800ada0:	4457      	add	r7, sl
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ada8:	f84e 3b04 	str.w	r3, [lr], #4
 800adac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800adb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adb4:	f8be 3000 	ldrh.w	r3, [lr]
 800adb8:	fb09 330a 	mla	r3, r9, sl, r3
 800adbc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800adc0:	4562      	cmp	r2, ip
 800adc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adc6:	d8e5      	bhi.n	800ad94 <__multiply+0x10c>
 800adc8:	9f01      	ldr	r7, [sp, #4]
 800adca:	51eb      	str	r3, [r5, r7]
 800adcc:	3504      	adds	r5, #4
 800adce:	e799      	b.n	800ad04 <__multiply+0x7c>
 800add0:	3e01      	subs	r6, #1
 800add2:	e79b      	b.n	800ad0c <__multiply+0x84>
 800add4:	0800e6ad 	.word	0x0800e6ad
 800add8:	0800e6be 	.word	0x0800e6be

0800addc <__pow5mult>:
 800addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade0:	4615      	mov	r5, r2
 800ade2:	f012 0203 	ands.w	r2, r2, #3
 800ade6:	4607      	mov	r7, r0
 800ade8:	460e      	mov	r6, r1
 800adea:	d007      	beq.n	800adfc <__pow5mult+0x20>
 800adec:	4c25      	ldr	r4, [pc, #148]	@ (800ae84 <__pow5mult+0xa8>)
 800adee:	3a01      	subs	r2, #1
 800adf0:	2300      	movs	r3, #0
 800adf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adf6:	f7ff fe55 	bl	800aaa4 <__multadd>
 800adfa:	4606      	mov	r6, r0
 800adfc:	10ad      	asrs	r5, r5, #2
 800adfe:	d03d      	beq.n	800ae7c <__pow5mult+0xa0>
 800ae00:	69fc      	ldr	r4, [r7, #28]
 800ae02:	b97c      	cbnz	r4, 800ae24 <__pow5mult+0x48>
 800ae04:	2010      	movs	r0, #16
 800ae06:	f7ff fd35 	bl	800a874 <malloc>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	61f8      	str	r0, [r7, #28]
 800ae0e:	b928      	cbnz	r0, 800ae1c <__pow5mult+0x40>
 800ae10:	4b1d      	ldr	r3, [pc, #116]	@ (800ae88 <__pow5mult+0xac>)
 800ae12:	481e      	ldr	r0, [pc, #120]	@ (800ae8c <__pow5mult+0xb0>)
 800ae14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae18:	f001 fb62 	bl	800c4e0 <__assert_func>
 800ae1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae20:	6004      	str	r4, [r0, #0]
 800ae22:	60c4      	str	r4, [r0, #12]
 800ae24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae2c:	b94c      	cbnz	r4, 800ae42 <__pow5mult+0x66>
 800ae2e:	f240 2171 	movw	r1, #625	@ 0x271
 800ae32:	4638      	mov	r0, r7
 800ae34:	f7ff ff12 	bl	800ac5c <__i2b>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae3e:	4604      	mov	r4, r0
 800ae40:	6003      	str	r3, [r0, #0]
 800ae42:	f04f 0900 	mov.w	r9, #0
 800ae46:	07eb      	lsls	r3, r5, #31
 800ae48:	d50a      	bpl.n	800ae60 <__pow5mult+0x84>
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	4638      	mov	r0, r7
 800ae50:	f7ff ff1a 	bl	800ac88 <__multiply>
 800ae54:	4631      	mov	r1, r6
 800ae56:	4680      	mov	r8, r0
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff fe01 	bl	800aa60 <_Bfree>
 800ae5e:	4646      	mov	r6, r8
 800ae60:	106d      	asrs	r5, r5, #1
 800ae62:	d00b      	beq.n	800ae7c <__pow5mult+0xa0>
 800ae64:	6820      	ldr	r0, [r4, #0]
 800ae66:	b938      	cbnz	r0, 800ae78 <__pow5mult+0x9c>
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f7ff ff0b 	bl	800ac88 <__multiply>
 800ae72:	6020      	str	r0, [r4, #0]
 800ae74:	f8c0 9000 	str.w	r9, [r0]
 800ae78:	4604      	mov	r4, r0
 800ae7a:	e7e4      	b.n	800ae46 <__pow5mult+0x6a>
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae82:	bf00      	nop
 800ae84:	0800e718 	.word	0x0800e718
 800ae88:	0800e63e 	.word	0x0800e63e
 800ae8c:	0800e6be 	.word	0x0800e6be

0800ae90 <__lshift>:
 800ae90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	460c      	mov	r4, r1
 800ae96:	6849      	ldr	r1, [r1, #4]
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae9e:	68a3      	ldr	r3, [r4, #8]
 800aea0:	4607      	mov	r7, r0
 800aea2:	4691      	mov	r9, r2
 800aea4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aea8:	f108 0601 	add.w	r6, r8, #1
 800aeac:	42b3      	cmp	r3, r6
 800aeae:	db0b      	blt.n	800aec8 <__lshift+0x38>
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f7ff fd95 	bl	800a9e0 <_Balloc>
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	b948      	cbnz	r0, 800aece <__lshift+0x3e>
 800aeba:	4602      	mov	r2, r0
 800aebc:	4b28      	ldr	r3, [pc, #160]	@ (800af60 <__lshift+0xd0>)
 800aebe:	4829      	ldr	r0, [pc, #164]	@ (800af64 <__lshift+0xd4>)
 800aec0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aec4:	f001 fb0c 	bl	800c4e0 <__assert_func>
 800aec8:	3101      	adds	r1, #1
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	e7ee      	b.n	800aeac <__lshift+0x1c>
 800aece:	2300      	movs	r3, #0
 800aed0:	f100 0114 	add.w	r1, r0, #20
 800aed4:	f100 0210 	add.w	r2, r0, #16
 800aed8:	4618      	mov	r0, r3
 800aeda:	4553      	cmp	r3, sl
 800aedc:	db33      	blt.n	800af46 <__lshift+0xb6>
 800aede:	6920      	ldr	r0, [r4, #16]
 800aee0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aee4:	f104 0314 	add.w	r3, r4, #20
 800aee8:	f019 091f 	ands.w	r9, r9, #31
 800aeec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aef0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aef4:	d02b      	beq.n	800af4e <__lshift+0xbe>
 800aef6:	f1c9 0e20 	rsb	lr, r9, #32
 800aefa:	468a      	mov	sl, r1
 800aefc:	2200      	movs	r2, #0
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	fa00 f009 	lsl.w	r0, r0, r9
 800af04:	4310      	orrs	r0, r2
 800af06:	f84a 0b04 	str.w	r0, [sl], #4
 800af0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af0e:	459c      	cmp	ip, r3
 800af10:	fa22 f20e 	lsr.w	r2, r2, lr
 800af14:	d8f3      	bhi.n	800aefe <__lshift+0x6e>
 800af16:	ebac 0304 	sub.w	r3, ip, r4
 800af1a:	3b15      	subs	r3, #21
 800af1c:	f023 0303 	bic.w	r3, r3, #3
 800af20:	3304      	adds	r3, #4
 800af22:	f104 0015 	add.w	r0, r4, #21
 800af26:	4584      	cmp	ip, r0
 800af28:	bf38      	it	cc
 800af2a:	2304      	movcc	r3, #4
 800af2c:	50ca      	str	r2, [r1, r3]
 800af2e:	b10a      	cbz	r2, 800af34 <__lshift+0xa4>
 800af30:	f108 0602 	add.w	r6, r8, #2
 800af34:	3e01      	subs	r6, #1
 800af36:	4638      	mov	r0, r7
 800af38:	612e      	str	r6, [r5, #16]
 800af3a:	4621      	mov	r1, r4
 800af3c:	f7ff fd90 	bl	800aa60 <_Bfree>
 800af40:	4628      	mov	r0, r5
 800af42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af46:	f842 0f04 	str.w	r0, [r2, #4]!
 800af4a:	3301      	adds	r3, #1
 800af4c:	e7c5      	b.n	800aeda <__lshift+0x4a>
 800af4e:	3904      	subs	r1, #4
 800af50:	f853 2b04 	ldr.w	r2, [r3], #4
 800af54:	f841 2f04 	str.w	r2, [r1, #4]!
 800af58:	459c      	cmp	ip, r3
 800af5a:	d8f9      	bhi.n	800af50 <__lshift+0xc0>
 800af5c:	e7ea      	b.n	800af34 <__lshift+0xa4>
 800af5e:	bf00      	nop
 800af60:	0800e6ad 	.word	0x0800e6ad
 800af64:	0800e6be 	.word	0x0800e6be

0800af68 <__mcmp>:
 800af68:	690a      	ldr	r2, [r1, #16]
 800af6a:	4603      	mov	r3, r0
 800af6c:	6900      	ldr	r0, [r0, #16]
 800af6e:	1a80      	subs	r0, r0, r2
 800af70:	b530      	push	{r4, r5, lr}
 800af72:	d10e      	bne.n	800af92 <__mcmp+0x2a>
 800af74:	3314      	adds	r3, #20
 800af76:	3114      	adds	r1, #20
 800af78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af88:	4295      	cmp	r5, r2
 800af8a:	d003      	beq.n	800af94 <__mcmp+0x2c>
 800af8c:	d205      	bcs.n	800af9a <__mcmp+0x32>
 800af8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af92:	bd30      	pop	{r4, r5, pc}
 800af94:	42a3      	cmp	r3, r4
 800af96:	d3f3      	bcc.n	800af80 <__mcmp+0x18>
 800af98:	e7fb      	b.n	800af92 <__mcmp+0x2a>
 800af9a:	2001      	movs	r0, #1
 800af9c:	e7f9      	b.n	800af92 <__mcmp+0x2a>
	...

0800afa0 <__mdiff>:
 800afa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	4689      	mov	r9, r1
 800afa6:	4606      	mov	r6, r0
 800afa8:	4611      	mov	r1, r2
 800afaa:	4648      	mov	r0, r9
 800afac:	4614      	mov	r4, r2
 800afae:	f7ff ffdb 	bl	800af68 <__mcmp>
 800afb2:	1e05      	subs	r5, r0, #0
 800afb4:	d112      	bne.n	800afdc <__mdiff+0x3c>
 800afb6:	4629      	mov	r1, r5
 800afb8:	4630      	mov	r0, r6
 800afba:	f7ff fd11 	bl	800a9e0 <_Balloc>
 800afbe:	4602      	mov	r2, r0
 800afc0:	b928      	cbnz	r0, 800afce <__mdiff+0x2e>
 800afc2:	4b3f      	ldr	r3, [pc, #252]	@ (800b0c0 <__mdiff+0x120>)
 800afc4:	f240 2137 	movw	r1, #567	@ 0x237
 800afc8:	483e      	ldr	r0, [pc, #248]	@ (800b0c4 <__mdiff+0x124>)
 800afca:	f001 fa89 	bl	800c4e0 <__assert_func>
 800afce:	2301      	movs	r3, #1
 800afd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afd4:	4610      	mov	r0, r2
 800afd6:	b003      	add	sp, #12
 800afd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afdc:	bfbc      	itt	lt
 800afde:	464b      	movlt	r3, r9
 800afe0:	46a1      	movlt	r9, r4
 800afe2:	4630      	mov	r0, r6
 800afe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afe8:	bfba      	itte	lt
 800afea:	461c      	movlt	r4, r3
 800afec:	2501      	movlt	r5, #1
 800afee:	2500      	movge	r5, #0
 800aff0:	f7ff fcf6 	bl	800a9e0 <_Balloc>
 800aff4:	4602      	mov	r2, r0
 800aff6:	b918      	cbnz	r0, 800b000 <__mdiff+0x60>
 800aff8:	4b31      	ldr	r3, [pc, #196]	@ (800b0c0 <__mdiff+0x120>)
 800affa:	f240 2145 	movw	r1, #581	@ 0x245
 800affe:	e7e3      	b.n	800afc8 <__mdiff+0x28>
 800b000:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b004:	6926      	ldr	r6, [r4, #16]
 800b006:	60c5      	str	r5, [r0, #12]
 800b008:	f109 0310 	add.w	r3, r9, #16
 800b00c:	f109 0514 	add.w	r5, r9, #20
 800b010:	f104 0e14 	add.w	lr, r4, #20
 800b014:	f100 0b14 	add.w	fp, r0, #20
 800b018:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b01c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	46d9      	mov	r9, fp
 800b024:	f04f 0c00 	mov.w	ip, #0
 800b028:	9b01      	ldr	r3, [sp, #4]
 800b02a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b02e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b032:	9301      	str	r3, [sp, #4]
 800b034:	fa1f f38a 	uxth.w	r3, sl
 800b038:	4619      	mov	r1, r3
 800b03a:	b283      	uxth	r3, r0
 800b03c:	1acb      	subs	r3, r1, r3
 800b03e:	0c00      	lsrs	r0, r0, #16
 800b040:	4463      	add	r3, ip
 800b042:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b046:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b050:	4576      	cmp	r6, lr
 800b052:	f849 3b04 	str.w	r3, [r9], #4
 800b056:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b05a:	d8e5      	bhi.n	800b028 <__mdiff+0x88>
 800b05c:	1b33      	subs	r3, r6, r4
 800b05e:	3b15      	subs	r3, #21
 800b060:	f023 0303 	bic.w	r3, r3, #3
 800b064:	3415      	adds	r4, #21
 800b066:	3304      	adds	r3, #4
 800b068:	42a6      	cmp	r6, r4
 800b06a:	bf38      	it	cc
 800b06c:	2304      	movcc	r3, #4
 800b06e:	441d      	add	r5, r3
 800b070:	445b      	add	r3, fp
 800b072:	461e      	mov	r6, r3
 800b074:	462c      	mov	r4, r5
 800b076:	4544      	cmp	r4, r8
 800b078:	d30e      	bcc.n	800b098 <__mdiff+0xf8>
 800b07a:	f108 0103 	add.w	r1, r8, #3
 800b07e:	1b49      	subs	r1, r1, r5
 800b080:	f021 0103 	bic.w	r1, r1, #3
 800b084:	3d03      	subs	r5, #3
 800b086:	45a8      	cmp	r8, r5
 800b088:	bf38      	it	cc
 800b08a:	2100      	movcc	r1, #0
 800b08c:	440b      	add	r3, r1
 800b08e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b092:	b191      	cbz	r1, 800b0ba <__mdiff+0x11a>
 800b094:	6117      	str	r7, [r2, #16]
 800b096:	e79d      	b.n	800afd4 <__mdiff+0x34>
 800b098:	f854 1b04 	ldr.w	r1, [r4], #4
 800b09c:	46e6      	mov	lr, ip
 800b09e:	0c08      	lsrs	r0, r1, #16
 800b0a0:	fa1c fc81 	uxtah	ip, ip, r1
 800b0a4:	4471      	add	r1, lr
 800b0a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b0aa:	b289      	uxth	r1, r1
 800b0ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b0b0:	f846 1b04 	str.w	r1, [r6], #4
 800b0b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0b8:	e7dd      	b.n	800b076 <__mdiff+0xd6>
 800b0ba:	3f01      	subs	r7, #1
 800b0bc:	e7e7      	b.n	800b08e <__mdiff+0xee>
 800b0be:	bf00      	nop
 800b0c0:	0800e6ad 	.word	0x0800e6ad
 800b0c4:	0800e6be 	.word	0x0800e6be

0800b0c8 <__ulp>:
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	ed8d 0b00 	vstr	d0, [sp]
 800b0ce:	9a01      	ldr	r2, [sp, #4]
 800b0d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b110 <__ulp+0x48>)
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	dc08      	bgt.n	800b0ee <__ulp+0x26>
 800b0dc:	425b      	negs	r3, r3
 800b0de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b0e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0e6:	da04      	bge.n	800b0f2 <__ulp+0x2a>
 800b0e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b0ec:	4113      	asrs	r3, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	e008      	b.n	800b104 <__ulp+0x3c>
 800b0f2:	f1a2 0314 	sub.w	r3, r2, #20
 800b0f6:	2b1e      	cmp	r3, #30
 800b0f8:	bfda      	itte	le
 800b0fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b0fe:	40da      	lsrle	r2, r3
 800b100:	2201      	movgt	r2, #1
 800b102:	2300      	movs	r3, #0
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	ec41 0b10 	vmov	d0, r0, r1
 800b10c:	b002      	add	sp, #8
 800b10e:	4770      	bx	lr
 800b110:	7ff00000 	.word	0x7ff00000

0800b114 <__b2d>:
 800b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b118:	6906      	ldr	r6, [r0, #16]
 800b11a:	f100 0814 	add.w	r8, r0, #20
 800b11e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b122:	1f37      	subs	r7, r6, #4
 800b124:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b128:	4610      	mov	r0, r2
 800b12a:	f7ff fd4b 	bl	800abc4 <__hi0bits>
 800b12e:	f1c0 0320 	rsb	r3, r0, #32
 800b132:	280a      	cmp	r0, #10
 800b134:	600b      	str	r3, [r1, #0]
 800b136:	491b      	ldr	r1, [pc, #108]	@ (800b1a4 <__b2d+0x90>)
 800b138:	dc15      	bgt.n	800b166 <__b2d+0x52>
 800b13a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b13e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b142:	45b8      	cmp	r8, r7
 800b144:	ea43 0501 	orr.w	r5, r3, r1
 800b148:	bf34      	ite	cc
 800b14a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b14e:	2300      	movcs	r3, #0
 800b150:	3015      	adds	r0, #21
 800b152:	fa02 f000 	lsl.w	r0, r2, r0
 800b156:	fa23 f30c 	lsr.w	r3, r3, ip
 800b15a:	4303      	orrs	r3, r0
 800b15c:	461c      	mov	r4, r3
 800b15e:	ec45 4b10 	vmov	d0, r4, r5
 800b162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b166:	45b8      	cmp	r8, r7
 800b168:	bf3a      	itte	cc
 800b16a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b16e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b172:	2300      	movcs	r3, #0
 800b174:	380b      	subs	r0, #11
 800b176:	d012      	beq.n	800b19e <__b2d+0x8a>
 800b178:	f1c0 0120 	rsb	r1, r0, #32
 800b17c:	fa23 f401 	lsr.w	r4, r3, r1
 800b180:	4082      	lsls	r2, r0
 800b182:	4322      	orrs	r2, r4
 800b184:	4547      	cmp	r7, r8
 800b186:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b18a:	bf8c      	ite	hi
 800b18c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b190:	2200      	movls	r2, #0
 800b192:	4083      	lsls	r3, r0
 800b194:	40ca      	lsrs	r2, r1
 800b196:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b19a:	4313      	orrs	r3, r2
 800b19c:	e7de      	b.n	800b15c <__b2d+0x48>
 800b19e:	ea42 0501 	orr.w	r5, r2, r1
 800b1a2:	e7db      	b.n	800b15c <__b2d+0x48>
 800b1a4:	3ff00000 	.word	0x3ff00000

0800b1a8 <__d2b>:
 800b1a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	ec59 8b10 	vmov	r8, r9, d0
 800b1b4:	4616      	mov	r6, r2
 800b1b6:	f7ff fc13 	bl	800a9e0 <_Balloc>
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	b930      	cbnz	r0, 800b1cc <__d2b+0x24>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	4b23      	ldr	r3, [pc, #140]	@ (800b250 <__d2b+0xa8>)
 800b1c2:	4824      	ldr	r0, [pc, #144]	@ (800b254 <__d2b+0xac>)
 800b1c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1c8:	f001 f98a 	bl	800c4e0 <__assert_func>
 800b1cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1d4:	b10d      	cbz	r5, 800b1da <__d2b+0x32>
 800b1d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1da:	9301      	str	r3, [sp, #4]
 800b1dc:	f1b8 0300 	subs.w	r3, r8, #0
 800b1e0:	d023      	beq.n	800b22a <__d2b+0x82>
 800b1e2:	4668      	mov	r0, sp
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	f7ff fd0c 	bl	800ac02 <__lo0bits>
 800b1ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1ee:	b1d0      	cbz	r0, 800b226 <__d2b+0x7e>
 800b1f0:	f1c0 0320 	rsb	r3, r0, #32
 800b1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	40c2      	lsrs	r2, r0
 800b1fc:	6163      	str	r3, [r4, #20]
 800b1fe:	9201      	str	r2, [sp, #4]
 800b200:	9b01      	ldr	r3, [sp, #4]
 800b202:	61a3      	str	r3, [r4, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bf0c      	ite	eq
 800b208:	2201      	moveq	r2, #1
 800b20a:	2202      	movne	r2, #2
 800b20c:	6122      	str	r2, [r4, #16]
 800b20e:	b1a5      	cbz	r5, 800b23a <__d2b+0x92>
 800b210:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b214:	4405      	add	r5, r0
 800b216:	603d      	str	r5, [r7, #0]
 800b218:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b21c:	6030      	str	r0, [r6, #0]
 800b21e:	4620      	mov	r0, r4
 800b220:	b003      	add	sp, #12
 800b222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b226:	6161      	str	r1, [r4, #20]
 800b228:	e7ea      	b.n	800b200 <__d2b+0x58>
 800b22a:	a801      	add	r0, sp, #4
 800b22c:	f7ff fce9 	bl	800ac02 <__lo0bits>
 800b230:	9b01      	ldr	r3, [sp, #4]
 800b232:	6163      	str	r3, [r4, #20]
 800b234:	3020      	adds	r0, #32
 800b236:	2201      	movs	r2, #1
 800b238:	e7e8      	b.n	800b20c <__d2b+0x64>
 800b23a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b23e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b242:	6038      	str	r0, [r7, #0]
 800b244:	6918      	ldr	r0, [r3, #16]
 800b246:	f7ff fcbd 	bl	800abc4 <__hi0bits>
 800b24a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b24e:	e7e5      	b.n	800b21c <__d2b+0x74>
 800b250:	0800e6ad 	.word	0x0800e6ad
 800b254:	0800e6be 	.word	0x0800e6be

0800b258 <__ratio>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	b085      	sub	sp, #20
 800b25e:	e9cd 1000 	strd	r1, r0, [sp]
 800b262:	a902      	add	r1, sp, #8
 800b264:	f7ff ff56 	bl	800b114 <__b2d>
 800b268:	9800      	ldr	r0, [sp, #0]
 800b26a:	a903      	add	r1, sp, #12
 800b26c:	ec55 4b10 	vmov	r4, r5, d0
 800b270:	f7ff ff50 	bl	800b114 <__b2d>
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	6919      	ldr	r1, [r3, #16]
 800b278:	9b00      	ldr	r3, [sp, #0]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	1ac9      	subs	r1, r1, r3
 800b27e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	ec5b ab10 	vmov	sl, fp, d0
 800b288:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	bfce      	itee	gt
 800b290:	462a      	movgt	r2, r5
 800b292:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b296:	465a      	movle	r2, fp
 800b298:	462f      	mov	r7, r5
 800b29a:	46d9      	mov	r9, fp
 800b29c:	bfcc      	ite	gt
 800b29e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b2a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b2a6:	464b      	mov	r3, r9
 800b2a8:	4652      	mov	r2, sl
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	f7f5 faf5 	bl	800089c <__aeabi_ddiv>
 800b2b2:	ec41 0b10 	vmov	d0, r0, r1
 800b2b6:	b005      	add	sp, #20
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2bc <__copybits>:
 800b2bc:	3901      	subs	r1, #1
 800b2be:	b570      	push	{r4, r5, r6, lr}
 800b2c0:	1149      	asrs	r1, r1, #5
 800b2c2:	6914      	ldr	r4, [r2, #16]
 800b2c4:	3101      	adds	r1, #1
 800b2c6:	f102 0314 	add.w	r3, r2, #20
 800b2ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2d2:	1f05      	subs	r5, r0, #4
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	d30c      	bcc.n	800b2f2 <__copybits+0x36>
 800b2d8:	1aa3      	subs	r3, r4, r2
 800b2da:	3b11      	subs	r3, #17
 800b2dc:	f023 0303 	bic.w	r3, r3, #3
 800b2e0:	3211      	adds	r2, #17
 800b2e2:	42a2      	cmp	r2, r4
 800b2e4:	bf88      	it	hi
 800b2e6:	2300      	movhi	r3, #0
 800b2e8:	4418      	add	r0, r3
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4288      	cmp	r0, r1
 800b2ee:	d305      	bcc.n	800b2fc <__copybits+0x40>
 800b2f0:	bd70      	pop	{r4, r5, r6, pc}
 800b2f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b2f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2fa:	e7eb      	b.n	800b2d4 <__copybits+0x18>
 800b2fc:	f840 3b04 	str.w	r3, [r0], #4
 800b300:	e7f4      	b.n	800b2ec <__copybits+0x30>

0800b302 <__any_on>:
 800b302:	f100 0214 	add.w	r2, r0, #20
 800b306:	6900      	ldr	r0, [r0, #16]
 800b308:	114b      	asrs	r3, r1, #5
 800b30a:	4298      	cmp	r0, r3
 800b30c:	b510      	push	{r4, lr}
 800b30e:	db11      	blt.n	800b334 <__any_on+0x32>
 800b310:	dd0a      	ble.n	800b328 <__any_on+0x26>
 800b312:	f011 011f 	ands.w	r1, r1, #31
 800b316:	d007      	beq.n	800b328 <__any_on+0x26>
 800b318:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b31c:	fa24 f001 	lsr.w	r0, r4, r1
 800b320:	fa00 f101 	lsl.w	r1, r0, r1
 800b324:	428c      	cmp	r4, r1
 800b326:	d10b      	bne.n	800b340 <__any_on+0x3e>
 800b328:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d803      	bhi.n	800b338 <__any_on+0x36>
 800b330:	2000      	movs	r0, #0
 800b332:	bd10      	pop	{r4, pc}
 800b334:	4603      	mov	r3, r0
 800b336:	e7f7      	b.n	800b328 <__any_on+0x26>
 800b338:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b33c:	2900      	cmp	r1, #0
 800b33e:	d0f5      	beq.n	800b32c <__any_on+0x2a>
 800b340:	2001      	movs	r0, #1
 800b342:	e7f6      	b.n	800b332 <__any_on+0x30>

0800b344 <sulp>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	4604      	mov	r4, r0
 800b348:	460d      	mov	r5, r1
 800b34a:	ec45 4b10 	vmov	d0, r4, r5
 800b34e:	4616      	mov	r6, r2
 800b350:	f7ff feba 	bl	800b0c8 <__ulp>
 800b354:	ec51 0b10 	vmov	r0, r1, d0
 800b358:	b17e      	cbz	r6, 800b37a <sulp+0x36>
 800b35a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b35e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b362:	2b00      	cmp	r3, #0
 800b364:	dd09      	ble.n	800b37a <sulp+0x36>
 800b366:	051b      	lsls	r3, r3, #20
 800b368:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b36c:	2400      	movs	r4, #0
 800b36e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b372:	4622      	mov	r2, r4
 800b374:	462b      	mov	r3, r5
 800b376:	f7f5 f967 	bl	8000648 <__aeabi_dmul>
 800b37a:	ec41 0b10 	vmov	d0, r0, r1
 800b37e:	bd70      	pop	{r4, r5, r6, pc}

0800b380 <_strtod_l>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	b09f      	sub	sp, #124	@ 0x7c
 800b386:	460c      	mov	r4, r1
 800b388:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b38a:	2200      	movs	r2, #0
 800b38c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b38e:	9005      	str	r0, [sp, #20]
 800b390:	f04f 0a00 	mov.w	sl, #0
 800b394:	f04f 0b00 	mov.w	fp, #0
 800b398:	460a      	mov	r2, r1
 800b39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b39c:	7811      	ldrb	r1, [r2, #0]
 800b39e:	292b      	cmp	r1, #43	@ 0x2b
 800b3a0:	d04a      	beq.n	800b438 <_strtod_l+0xb8>
 800b3a2:	d838      	bhi.n	800b416 <_strtod_l+0x96>
 800b3a4:	290d      	cmp	r1, #13
 800b3a6:	d832      	bhi.n	800b40e <_strtod_l+0x8e>
 800b3a8:	2908      	cmp	r1, #8
 800b3aa:	d832      	bhi.n	800b412 <_strtod_l+0x92>
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	d03b      	beq.n	800b428 <_strtod_l+0xa8>
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b3b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b3b6:	782a      	ldrb	r2, [r5, #0]
 800b3b8:	2a30      	cmp	r2, #48	@ 0x30
 800b3ba:	f040 80b3 	bne.w	800b524 <_strtod_l+0x1a4>
 800b3be:	786a      	ldrb	r2, [r5, #1]
 800b3c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b3c4:	2a58      	cmp	r2, #88	@ 0x58
 800b3c6:	d16e      	bne.n	800b4a6 <_strtod_l+0x126>
 800b3c8:	9302      	str	r3, [sp, #8]
 800b3ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	4a8e      	ldr	r2, [pc, #568]	@ (800b60c <_strtod_l+0x28c>)
 800b3d4:	9805      	ldr	r0, [sp, #20]
 800b3d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b3d8:	a919      	add	r1, sp, #100	@ 0x64
 800b3da:	f001 f91b 	bl	800c614 <__gethex>
 800b3de:	f010 060f 	ands.w	r6, r0, #15
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	d005      	beq.n	800b3f2 <_strtod_l+0x72>
 800b3e6:	2e06      	cmp	r6, #6
 800b3e8:	d128      	bne.n	800b43c <_strtod_l+0xbc>
 800b3ea:	3501      	adds	r5, #1
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800b3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f040 858e 	bne.w	800bf16 <_strtod_l+0xb96>
 800b3fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3fc:	b1cb      	cbz	r3, 800b432 <_strtod_l+0xb2>
 800b3fe:	4652      	mov	r2, sl
 800b400:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b404:	ec43 2b10 	vmov	d0, r2, r3
 800b408:	b01f      	add	sp, #124	@ 0x7c
 800b40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40e:	2920      	cmp	r1, #32
 800b410:	d1ce      	bne.n	800b3b0 <_strtod_l+0x30>
 800b412:	3201      	adds	r2, #1
 800b414:	e7c1      	b.n	800b39a <_strtod_l+0x1a>
 800b416:	292d      	cmp	r1, #45	@ 0x2d
 800b418:	d1ca      	bne.n	800b3b0 <_strtod_l+0x30>
 800b41a:	2101      	movs	r1, #1
 800b41c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b41e:	1c51      	adds	r1, r2, #1
 800b420:	9119      	str	r1, [sp, #100]	@ 0x64
 800b422:	7852      	ldrb	r2, [r2, #1]
 800b424:	2a00      	cmp	r2, #0
 800b426:	d1c5      	bne.n	800b3b4 <_strtod_l+0x34>
 800b428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b42a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f040 8570 	bne.w	800bf12 <_strtod_l+0xb92>
 800b432:	4652      	mov	r2, sl
 800b434:	465b      	mov	r3, fp
 800b436:	e7e5      	b.n	800b404 <_strtod_l+0x84>
 800b438:	2100      	movs	r1, #0
 800b43a:	e7ef      	b.n	800b41c <_strtod_l+0x9c>
 800b43c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b43e:	b13a      	cbz	r2, 800b450 <_strtod_l+0xd0>
 800b440:	2135      	movs	r1, #53	@ 0x35
 800b442:	a81c      	add	r0, sp, #112	@ 0x70
 800b444:	f7ff ff3a 	bl	800b2bc <__copybits>
 800b448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b44a:	9805      	ldr	r0, [sp, #20]
 800b44c:	f7ff fb08 	bl	800aa60 <_Bfree>
 800b450:	3e01      	subs	r6, #1
 800b452:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b454:	2e04      	cmp	r6, #4
 800b456:	d806      	bhi.n	800b466 <_strtod_l+0xe6>
 800b458:	e8df f006 	tbb	[pc, r6]
 800b45c:	201d0314 	.word	0x201d0314
 800b460:	14          	.byte	0x14
 800b461:	00          	.byte	0x00
 800b462:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b466:	05e1      	lsls	r1, r4, #23
 800b468:	bf48      	it	mi
 800b46a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b46e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b472:	0d1b      	lsrs	r3, r3, #20
 800b474:	051b      	lsls	r3, r3, #20
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1bb      	bne.n	800b3f2 <_strtod_l+0x72>
 800b47a:	f7fe fb23 	bl	8009ac4 <__errno>
 800b47e:	2322      	movs	r3, #34	@ 0x22
 800b480:	6003      	str	r3, [r0, #0]
 800b482:	e7b6      	b.n	800b3f2 <_strtod_l+0x72>
 800b484:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b48c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b490:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b494:	e7e7      	b.n	800b466 <_strtod_l+0xe6>
 800b496:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b614 <_strtod_l+0x294>
 800b49a:	e7e4      	b.n	800b466 <_strtod_l+0xe6>
 800b49c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b4a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b4a4:	e7df      	b.n	800b466 <_strtod_l+0xe6>
 800b4a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4ac:	785b      	ldrb	r3, [r3, #1]
 800b4ae:	2b30      	cmp	r3, #48	@ 0x30
 800b4b0:	d0f9      	beq.n	800b4a6 <_strtod_l+0x126>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d09d      	beq.n	800b3f2 <_strtod_l+0x72>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4be:	2300      	movs	r3, #0
 800b4c0:	9308      	str	r3, [sp, #32]
 800b4c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4c4:	461f      	mov	r7, r3
 800b4c6:	220a      	movs	r2, #10
 800b4c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b4ca:	7805      	ldrb	r5, [r0, #0]
 800b4cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b4d0:	b2d9      	uxtb	r1, r3
 800b4d2:	2909      	cmp	r1, #9
 800b4d4:	d928      	bls.n	800b528 <_strtod_l+0x1a8>
 800b4d6:	494e      	ldr	r1, [pc, #312]	@ (800b610 <_strtod_l+0x290>)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f000 ffd5 	bl	800c488 <strncmp>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d032      	beq.n	800b548 <_strtod_l+0x1c8>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	462a      	mov	r2, r5
 800b4e6:	4681      	mov	r9, r0
 800b4e8:	463d      	mov	r5, r7
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2a65      	cmp	r2, #101	@ 0x65
 800b4ee:	d001      	beq.n	800b4f4 <_strtod_l+0x174>
 800b4f0:	2a45      	cmp	r2, #69	@ 0x45
 800b4f2:	d114      	bne.n	800b51e <_strtod_l+0x19e>
 800b4f4:	b91d      	cbnz	r5, 800b4fe <_strtod_l+0x17e>
 800b4f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4f8:	4302      	orrs	r2, r0
 800b4fa:	d095      	beq.n	800b428 <_strtod_l+0xa8>
 800b4fc:	2500      	movs	r5, #0
 800b4fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b500:	1c62      	adds	r2, r4, #1
 800b502:	9219      	str	r2, [sp, #100]	@ 0x64
 800b504:	7862      	ldrb	r2, [r4, #1]
 800b506:	2a2b      	cmp	r2, #43	@ 0x2b
 800b508:	d077      	beq.n	800b5fa <_strtod_l+0x27a>
 800b50a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b50c:	d07b      	beq.n	800b606 <_strtod_l+0x286>
 800b50e:	f04f 0c00 	mov.w	ip, #0
 800b512:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b516:	2909      	cmp	r1, #9
 800b518:	f240 8082 	bls.w	800b620 <_strtod_l+0x2a0>
 800b51c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b51e:	f04f 0800 	mov.w	r8, #0
 800b522:	e0a2      	b.n	800b66a <_strtod_l+0x2ea>
 800b524:	2300      	movs	r3, #0
 800b526:	e7c7      	b.n	800b4b8 <_strtod_l+0x138>
 800b528:	2f08      	cmp	r7, #8
 800b52a:	bfd5      	itete	le
 800b52c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b52e:	9908      	ldrgt	r1, [sp, #32]
 800b530:	fb02 3301 	mlale	r3, r2, r1, r3
 800b534:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b538:	f100 0001 	add.w	r0, r0, #1
 800b53c:	bfd4      	ite	le
 800b53e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b540:	9308      	strgt	r3, [sp, #32]
 800b542:	3701      	adds	r7, #1
 800b544:	9019      	str	r0, [sp, #100]	@ 0x64
 800b546:	e7bf      	b.n	800b4c8 <_strtod_l+0x148>
 800b548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b54e:	785a      	ldrb	r2, [r3, #1]
 800b550:	b37f      	cbz	r7, 800b5b2 <_strtod_l+0x232>
 800b552:	4681      	mov	r9, r0
 800b554:	463d      	mov	r5, r7
 800b556:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b55a:	2b09      	cmp	r3, #9
 800b55c:	d912      	bls.n	800b584 <_strtod_l+0x204>
 800b55e:	2301      	movs	r3, #1
 800b560:	e7c4      	b.n	800b4ec <_strtod_l+0x16c>
 800b562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	9219      	str	r2, [sp, #100]	@ 0x64
 800b568:	785a      	ldrb	r2, [r3, #1]
 800b56a:	3001      	adds	r0, #1
 800b56c:	2a30      	cmp	r2, #48	@ 0x30
 800b56e:	d0f8      	beq.n	800b562 <_strtod_l+0x1e2>
 800b570:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b574:	2b08      	cmp	r3, #8
 800b576:	f200 84d3 	bhi.w	800bf20 <_strtod_l+0xba0>
 800b57a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b57c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b57e:	4681      	mov	r9, r0
 800b580:	2000      	movs	r0, #0
 800b582:	4605      	mov	r5, r0
 800b584:	3a30      	subs	r2, #48	@ 0x30
 800b586:	f100 0301 	add.w	r3, r0, #1
 800b58a:	d02a      	beq.n	800b5e2 <_strtod_l+0x262>
 800b58c:	4499      	add	r9, r3
 800b58e:	eb00 0c05 	add.w	ip, r0, r5
 800b592:	462b      	mov	r3, r5
 800b594:	210a      	movs	r1, #10
 800b596:	4563      	cmp	r3, ip
 800b598:	d10d      	bne.n	800b5b6 <_strtod_l+0x236>
 800b59a:	1c69      	adds	r1, r5, #1
 800b59c:	4401      	add	r1, r0
 800b59e:	4428      	add	r0, r5
 800b5a0:	2808      	cmp	r0, #8
 800b5a2:	dc16      	bgt.n	800b5d2 <_strtod_l+0x252>
 800b5a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b5a6:	230a      	movs	r3, #10
 800b5a8:	fb03 2300 	mla	r3, r3, r0, r2
 800b5ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e018      	b.n	800b5e4 <_strtod_l+0x264>
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	e7da      	b.n	800b56c <_strtod_l+0x1ec>
 800b5b6:	2b08      	cmp	r3, #8
 800b5b8:	f103 0301 	add.w	r3, r3, #1
 800b5bc:	dc03      	bgt.n	800b5c6 <_strtod_l+0x246>
 800b5be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b5c0:	434e      	muls	r6, r1
 800b5c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b5c4:	e7e7      	b.n	800b596 <_strtod_l+0x216>
 800b5c6:	2b10      	cmp	r3, #16
 800b5c8:	bfde      	ittt	le
 800b5ca:	9e08      	ldrle	r6, [sp, #32]
 800b5cc:	434e      	mulle	r6, r1
 800b5ce:	9608      	strle	r6, [sp, #32]
 800b5d0:	e7e1      	b.n	800b596 <_strtod_l+0x216>
 800b5d2:	280f      	cmp	r0, #15
 800b5d4:	dceb      	bgt.n	800b5ae <_strtod_l+0x22e>
 800b5d6:	9808      	ldr	r0, [sp, #32]
 800b5d8:	230a      	movs	r3, #10
 800b5da:	fb03 2300 	mla	r3, r3, r0, r2
 800b5de:	9308      	str	r3, [sp, #32]
 800b5e0:	e7e5      	b.n	800b5ae <_strtod_l+0x22e>
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5e6:	1c50      	adds	r0, r2, #1
 800b5e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5ea:	7852      	ldrb	r2, [r2, #1]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	e7b1      	b.n	800b556 <_strtod_l+0x1d6>
 800b5f2:	f04f 0900 	mov.w	r9, #0
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e77d      	b.n	800b4f6 <_strtod_l+0x176>
 800b5fa:	f04f 0c00 	mov.w	ip, #0
 800b5fe:	1ca2      	adds	r2, r4, #2
 800b600:	9219      	str	r2, [sp, #100]	@ 0x64
 800b602:	78a2      	ldrb	r2, [r4, #2]
 800b604:	e785      	b.n	800b512 <_strtod_l+0x192>
 800b606:	f04f 0c01 	mov.w	ip, #1
 800b60a:	e7f8      	b.n	800b5fe <_strtod_l+0x27e>
 800b60c:	0800e830 	.word	0x0800e830
 800b610:	0800e818 	.word	0x0800e818
 800b614:	7ff00000 	.word	0x7ff00000
 800b618:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b61a:	1c51      	adds	r1, r2, #1
 800b61c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b61e:	7852      	ldrb	r2, [r2, #1]
 800b620:	2a30      	cmp	r2, #48	@ 0x30
 800b622:	d0f9      	beq.n	800b618 <_strtod_l+0x298>
 800b624:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b628:	2908      	cmp	r1, #8
 800b62a:	f63f af78 	bhi.w	800b51e <_strtod_l+0x19e>
 800b62e:	3a30      	subs	r2, #48	@ 0x30
 800b630:	920e      	str	r2, [sp, #56]	@ 0x38
 800b632:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b634:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b636:	f04f 080a 	mov.w	r8, #10
 800b63a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b63c:	1c56      	adds	r6, r2, #1
 800b63e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b640:	7852      	ldrb	r2, [r2, #1]
 800b642:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b646:	f1be 0f09 	cmp.w	lr, #9
 800b64a:	d939      	bls.n	800b6c0 <_strtod_l+0x340>
 800b64c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b64e:	1a76      	subs	r6, r6, r1
 800b650:	2e08      	cmp	r6, #8
 800b652:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b656:	dc03      	bgt.n	800b660 <_strtod_l+0x2e0>
 800b658:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b65a:	4588      	cmp	r8, r1
 800b65c:	bfa8      	it	ge
 800b65e:	4688      	movge	r8, r1
 800b660:	f1bc 0f00 	cmp.w	ip, #0
 800b664:	d001      	beq.n	800b66a <_strtod_l+0x2ea>
 800b666:	f1c8 0800 	rsb	r8, r8, #0
 800b66a:	2d00      	cmp	r5, #0
 800b66c:	d14e      	bne.n	800b70c <_strtod_l+0x38c>
 800b66e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b670:	4308      	orrs	r0, r1
 800b672:	f47f aebe 	bne.w	800b3f2 <_strtod_l+0x72>
 800b676:	2b00      	cmp	r3, #0
 800b678:	f47f aed6 	bne.w	800b428 <_strtod_l+0xa8>
 800b67c:	2a69      	cmp	r2, #105	@ 0x69
 800b67e:	d028      	beq.n	800b6d2 <_strtod_l+0x352>
 800b680:	dc25      	bgt.n	800b6ce <_strtod_l+0x34e>
 800b682:	2a49      	cmp	r2, #73	@ 0x49
 800b684:	d025      	beq.n	800b6d2 <_strtod_l+0x352>
 800b686:	2a4e      	cmp	r2, #78	@ 0x4e
 800b688:	f47f aece 	bne.w	800b428 <_strtod_l+0xa8>
 800b68c:	499b      	ldr	r1, [pc, #620]	@ (800b8fc <_strtod_l+0x57c>)
 800b68e:	a819      	add	r0, sp, #100	@ 0x64
 800b690:	f001 f9e2 	bl	800ca58 <__match>
 800b694:	2800      	cmp	r0, #0
 800b696:	f43f aec7 	beq.w	800b428 <_strtod_l+0xa8>
 800b69a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	2b28      	cmp	r3, #40	@ 0x28
 800b6a0:	d12e      	bne.n	800b700 <_strtod_l+0x380>
 800b6a2:	4997      	ldr	r1, [pc, #604]	@ (800b900 <_strtod_l+0x580>)
 800b6a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800b6a6:	a819      	add	r0, sp, #100	@ 0x64
 800b6a8:	f001 f9ea 	bl	800ca80 <__hexnan>
 800b6ac:	2805      	cmp	r0, #5
 800b6ae:	d127      	bne.n	800b700 <_strtod_l+0x380>
 800b6b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b6b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b6ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b6be:	e698      	b.n	800b3f2 <_strtod_l+0x72>
 800b6c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b6c2:	fb08 2101 	mla	r1, r8, r1, r2
 800b6c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b6ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6cc:	e7b5      	b.n	800b63a <_strtod_l+0x2ba>
 800b6ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800b6d0:	e7da      	b.n	800b688 <_strtod_l+0x308>
 800b6d2:	498c      	ldr	r1, [pc, #560]	@ (800b904 <_strtod_l+0x584>)
 800b6d4:	a819      	add	r0, sp, #100	@ 0x64
 800b6d6:	f001 f9bf 	bl	800ca58 <__match>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	f43f aea4 	beq.w	800b428 <_strtod_l+0xa8>
 800b6e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6e2:	4989      	ldr	r1, [pc, #548]	@ (800b908 <_strtod_l+0x588>)
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	a819      	add	r0, sp, #100	@ 0x64
 800b6e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6ea:	f001 f9b5 	bl	800ca58 <__match>
 800b6ee:	b910      	cbnz	r0, 800b6f6 <_strtod_l+0x376>
 800b6f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b918 <_strtod_l+0x598>
 800b6fa:	f04f 0a00 	mov.w	sl, #0
 800b6fe:	e678      	b.n	800b3f2 <_strtod_l+0x72>
 800b700:	4882      	ldr	r0, [pc, #520]	@ (800b90c <_strtod_l+0x58c>)
 800b702:	f000 fee5 	bl	800c4d0 <nan>
 800b706:	ec5b ab10 	vmov	sl, fp, d0
 800b70a:	e672      	b.n	800b3f2 <_strtod_l+0x72>
 800b70c:	eba8 0309 	sub.w	r3, r8, r9
 800b710:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b712:	9309      	str	r3, [sp, #36]	@ 0x24
 800b714:	2f00      	cmp	r7, #0
 800b716:	bf08      	it	eq
 800b718:	462f      	moveq	r7, r5
 800b71a:	2d10      	cmp	r5, #16
 800b71c:	462c      	mov	r4, r5
 800b71e:	bfa8      	it	ge
 800b720:	2410      	movge	r4, #16
 800b722:	f7f4 ff17 	bl	8000554 <__aeabi_ui2d>
 800b726:	2d09      	cmp	r5, #9
 800b728:	4682      	mov	sl, r0
 800b72a:	468b      	mov	fp, r1
 800b72c:	dc13      	bgt.n	800b756 <_strtod_l+0x3d6>
 800b72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b730:	2b00      	cmp	r3, #0
 800b732:	f43f ae5e 	beq.w	800b3f2 <_strtod_l+0x72>
 800b736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b738:	dd78      	ble.n	800b82c <_strtod_l+0x4ac>
 800b73a:	2b16      	cmp	r3, #22
 800b73c:	dc5f      	bgt.n	800b7fe <_strtod_l+0x47e>
 800b73e:	4974      	ldr	r1, [pc, #464]	@ (800b910 <_strtod_l+0x590>)
 800b740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b748:	4652      	mov	r2, sl
 800b74a:	465b      	mov	r3, fp
 800b74c:	f7f4 ff7c 	bl	8000648 <__aeabi_dmul>
 800b750:	4682      	mov	sl, r0
 800b752:	468b      	mov	fp, r1
 800b754:	e64d      	b.n	800b3f2 <_strtod_l+0x72>
 800b756:	4b6e      	ldr	r3, [pc, #440]	@ (800b910 <_strtod_l+0x590>)
 800b758:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b75c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b760:	f7f4 ff72 	bl	8000648 <__aeabi_dmul>
 800b764:	4682      	mov	sl, r0
 800b766:	9808      	ldr	r0, [sp, #32]
 800b768:	468b      	mov	fp, r1
 800b76a:	f7f4 fef3 	bl	8000554 <__aeabi_ui2d>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4650      	mov	r0, sl
 800b774:	4659      	mov	r1, fp
 800b776:	f7f4 fdb1 	bl	80002dc <__adddf3>
 800b77a:	2d0f      	cmp	r5, #15
 800b77c:	4682      	mov	sl, r0
 800b77e:	468b      	mov	fp, r1
 800b780:	ddd5      	ble.n	800b72e <_strtod_l+0x3ae>
 800b782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b784:	1b2c      	subs	r4, r5, r4
 800b786:	441c      	add	r4, r3
 800b788:	2c00      	cmp	r4, #0
 800b78a:	f340 8096 	ble.w	800b8ba <_strtod_l+0x53a>
 800b78e:	f014 030f 	ands.w	r3, r4, #15
 800b792:	d00a      	beq.n	800b7aa <_strtod_l+0x42a>
 800b794:	495e      	ldr	r1, [pc, #376]	@ (800b910 <_strtod_l+0x590>)
 800b796:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b79a:	4652      	mov	r2, sl
 800b79c:	465b      	mov	r3, fp
 800b79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a2:	f7f4 ff51 	bl	8000648 <__aeabi_dmul>
 800b7a6:	4682      	mov	sl, r0
 800b7a8:	468b      	mov	fp, r1
 800b7aa:	f034 040f 	bics.w	r4, r4, #15
 800b7ae:	d073      	beq.n	800b898 <_strtod_l+0x518>
 800b7b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b7b4:	dd48      	ble.n	800b848 <_strtod_l+0x4c8>
 800b7b6:	2400      	movs	r4, #0
 800b7b8:	46a0      	mov	r8, r4
 800b7ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800b7bc:	46a1      	mov	r9, r4
 800b7be:	9a05      	ldr	r2, [sp, #20]
 800b7c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b918 <_strtod_l+0x598>
 800b7c4:	2322      	movs	r3, #34	@ 0x22
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	f04f 0a00 	mov.w	sl, #0
 800b7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f43f ae0f 	beq.w	800b3f2 <_strtod_l+0x72>
 800b7d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7d6:	9805      	ldr	r0, [sp, #20]
 800b7d8:	f7ff f942 	bl	800aa60 <_Bfree>
 800b7dc:	9805      	ldr	r0, [sp, #20]
 800b7de:	4649      	mov	r1, r9
 800b7e0:	f7ff f93e 	bl	800aa60 <_Bfree>
 800b7e4:	9805      	ldr	r0, [sp, #20]
 800b7e6:	4641      	mov	r1, r8
 800b7e8:	f7ff f93a 	bl	800aa60 <_Bfree>
 800b7ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7ee:	9805      	ldr	r0, [sp, #20]
 800b7f0:	f7ff f936 	bl	800aa60 <_Bfree>
 800b7f4:	9805      	ldr	r0, [sp, #20]
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	f7ff f932 	bl	800aa60 <_Bfree>
 800b7fc:	e5f9      	b.n	800b3f2 <_strtod_l+0x72>
 800b7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b800:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b804:	4293      	cmp	r3, r2
 800b806:	dbbc      	blt.n	800b782 <_strtod_l+0x402>
 800b808:	4c41      	ldr	r4, [pc, #260]	@ (800b910 <_strtod_l+0x590>)
 800b80a:	f1c5 050f 	rsb	r5, r5, #15
 800b80e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b812:	4652      	mov	r2, sl
 800b814:	465b      	mov	r3, fp
 800b816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b81a:	f7f4 ff15 	bl	8000648 <__aeabi_dmul>
 800b81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b820:	1b5d      	subs	r5, r3, r5
 800b822:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b826:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b82a:	e78f      	b.n	800b74c <_strtod_l+0x3cc>
 800b82c:	3316      	adds	r3, #22
 800b82e:	dba8      	blt.n	800b782 <_strtod_l+0x402>
 800b830:	4b37      	ldr	r3, [pc, #220]	@ (800b910 <_strtod_l+0x590>)
 800b832:	eba9 0808 	sub.w	r8, r9, r8
 800b836:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b83a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b83e:	4650      	mov	r0, sl
 800b840:	4659      	mov	r1, fp
 800b842:	f7f5 f82b 	bl	800089c <__aeabi_ddiv>
 800b846:	e783      	b.n	800b750 <_strtod_l+0x3d0>
 800b848:	4b32      	ldr	r3, [pc, #200]	@ (800b914 <_strtod_l+0x594>)
 800b84a:	9308      	str	r3, [sp, #32]
 800b84c:	2300      	movs	r3, #0
 800b84e:	1124      	asrs	r4, r4, #4
 800b850:	4650      	mov	r0, sl
 800b852:	4659      	mov	r1, fp
 800b854:	461e      	mov	r6, r3
 800b856:	2c01      	cmp	r4, #1
 800b858:	dc21      	bgt.n	800b89e <_strtod_l+0x51e>
 800b85a:	b10b      	cbz	r3, 800b860 <_strtod_l+0x4e0>
 800b85c:	4682      	mov	sl, r0
 800b85e:	468b      	mov	fp, r1
 800b860:	492c      	ldr	r1, [pc, #176]	@ (800b914 <_strtod_l+0x594>)
 800b862:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b866:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b86a:	4652      	mov	r2, sl
 800b86c:	465b      	mov	r3, fp
 800b86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b872:	f7f4 fee9 	bl	8000648 <__aeabi_dmul>
 800b876:	4b28      	ldr	r3, [pc, #160]	@ (800b918 <_strtod_l+0x598>)
 800b878:	460a      	mov	r2, r1
 800b87a:	400b      	ands	r3, r1
 800b87c:	4927      	ldr	r1, [pc, #156]	@ (800b91c <_strtod_l+0x59c>)
 800b87e:	428b      	cmp	r3, r1
 800b880:	4682      	mov	sl, r0
 800b882:	d898      	bhi.n	800b7b6 <_strtod_l+0x436>
 800b884:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b888:	428b      	cmp	r3, r1
 800b88a:	bf86      	itte	hi
 800b88c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b920 <_strtod_l+0x5a0>
 800b890:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b894:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b898:	2300      	movs	r3, #0
 800b89a:	9308      	str	r3, [sp, #32]
 800b89c:	e07a      	b.n	800b994 <_strtod_l+0x614>
 800b89e:	07e2      	lsls	r2, r4, #31
 800b8a0:	d505      	bpl.n	800b8ae <_strtod_l+0x52e>
 800b8a2:	9b08      	ldr	r3, [sp, #32]
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f7f4 fece 	bl	8000648 <__aeabi_dmul>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	9a08      	ldr	r2, [sp, #32]
 800b8b0:	3208      	adds	r2, #8
 800b8b2:	3601      	adds	r6, #1
 800b8b4:	1064      	asrs	r4, r4, #1
 800b8b6:	9208      	str	r2, [sp, #32]
 800b8b8:	e7cd      	b.n	800b856 <_strtod_l+0x4d6>
 800b8ba:	d0ed      	beq.n	800b898 <_strtod_l+0x518>
 800b8bc:	4264      	negs	r4, r4
 800b8be:	f014 020f 	ands.w	r2, r4, #15
 800b8c2:	d00a      	beq.n	800b8da <_strtod_l+0x55a>
 800b8c4:	4b12      	ldr	r3, [pc, #72]	@ (800b910 <_strtod_l+0x590>)
 800b8c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8ca:	4650      	mov	r0, sl
 800b8cc:	4659      	mov	r1, fp
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f7f4 ffe3 	bl	800089c <__aeabi_ddiv>
 800b8d6:	4682      	mov	sl, r0
 800b8d8:	468b      	mov	fp, r1
 800b8da:	1124      	asrs	r4, r4, #4
 800b8dc:	d0dc      	beq.n	800b898 <_strtod_l+0x518>
 800b8de:	2c1f      	cmp	r4, #31
 800b8e0:	dd20      	ble.n	800b924 <_strtod_l+0x5a4>
 800b8e2:	2400      	movs	r4, #0
 800b8e4:	46a0      	mov	r8, r4
 800b8e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b8e8:	46a1      	mov	r9, r4
 800b8ea:	9a05      	ldr	r2, [sp, #20]
 800b8ec:	2322      	movs	r3, #34	@ 0x22
 800b8ee:	f04f 0a00 	mov.w	sl, #0
 800b8f2:	f04f 0b00 	mov.w	fp, #0
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	e768      	b.n	800b7cc <_strtod_l+0x44c>
 800b8fa:	bf00      	nop
 800b8fc:	0800e605 	.word	0x0800e605
 800b900:	0800e81c 	.word	0x0800e81c
 800b904:	0800e5fd 	.word	0x0800e5fd
 800b908:	0800e634 	.word	0x0800e634
 800b90c:	0800e9c5 	.word	0x0800e9c5
 800b910:	0800e750 	.word	0x0800e750
 800b914:	0800e728 	.word	0x0800e728
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	7ca00000 	.word	0x7ca00000
 800b920:	7fefffff 	.word	0x7fefffff
 800b924:	f014 0310 	ands.w	r3, r4, #16
 800b928:	bf18      	it	ne
 800b92a:	236a      	movne	r3, #106	@ 0x6a
 800b92c:	4ea9      	ldr	r6, [pc, #676]	@ (800bbd4 <_strtod_l+0x854>)
 800b92e:	9308      	str	r3, [sp, #32]
 800b930:	4650      	mov	r0, sl
 800b932:	4659      	mov	r1, fp
 800b934:	2300      	movs	r3, #0
 800b936:	07e2      	lsls	r2, r4, #31
 800b938:	d504      	bpl.n	800b944 <_strtod_l+0x5c4>
 800b93a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b93e:	f7f4 fe83 	bl	8000648 <__aeabi_dmul>
 800b942:	2301      	movs	r3, #1
 800b944:	1064      	asrs	r4, r4, #1
 800b946:	f106 0608 	add.w	r6, r6, #8
 800b94a:	d1f4      	bne.n	800b936 <_strtod_l+0x5b6>
 800b94c:	b10b      	cbz	r3, 800b952 <_strtod_l+0x5d2>
 800b94e:	4682      	mov	sl, r0
 800b950:	468b      	mov	fp, r1
 800b952:	9b08      	ldr	r3, [sp, #32]
 800b954:	b1b3      	cbz	r3, 800b984 <_strtod_l+0x604>
 800b956:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b95a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b95e:	2b00      	cmp	r3, #0
 800b960:	4659      	mov	r1, fp
 800b962:	dd0f      	ble.n	800b984 <_strtod_l+0x604>
 800b964:	2b1f      	cmp	r3, #31
 800b966:	dd55      	ble.n	800ba14 <_strtod_l+0x694>
 800b968:	2b34      	cmp	r3, #52	@ 0x34
 800b96a:	bfde      	ittt	le
 800b96c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b970:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b974:	4093      	lslle	r3, r2
 800b976:	f04f 0a00 	mov.w	sl, #0
 800b97a:	bfcc      	ite	gt
 800b97c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b980:	ea03 0b01 	andle.w	fp, r3, r1
 800b984:	2200      	movs	r2, #0
 800b986:	2300      	movs	r3, #0
 800b988:	4650      	mov	r0, sl
 800b98a:	4659      	mov	r1, fp
 800b98c:	f7f5 f8c4 	bl	8000b18 <__aeabi_dcmpeq>
 800b990:	2800      	cmp	r0, #0
 800b992:	d1a6      	bne.n	800b8e2 <_strtod_l+0x562>
 800b994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b99a:	9805      	ldr	r0, [sp, #20]
 800b99c:	462b      	mov	r3, r5
 800b99e:	463a      	mov	r2, r7
 800b9a0:	f7ff f8c6 	bl	800ab30 <__s2b>
 800b9a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f af05 	beq.w	800b7b6 <_strtod_l+0x436>
 800b9ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9ae:	2a00      	cmp	r2, #0
 800b9b0:	eba9 0308 	sub.w	r3, r9, r8
 800b9b4:	bfa8      	it	ge
 800b9b6:	2300      	movge	r3, #0
 800b9b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b9c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b9c2:	46a0      	mov	r8, r4
 800b9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9c6:	9805      	ldr	r0, [sp, #20]
 800b9c8:	6859      	ldr	r1, [r3, #4]
 800b9ca:	f7ff f809 	bl	800a9e0 <_Balloc>
 800b9ce:	4681      	mov	r9, r0
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f43f aef4 	beq.w	800b7be <_strtod_l+0x43e>
 800b9d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9d8:	691a      	ldr	r2, [r3, #16]
 800b9da:	3202      	adds	r2, #2
 800b9dc:	f103 010c 	add.w	r1, r3, #12
 800b9e0:	0092      	lsls	r2, r2, #2
 800b9e2:	300c      	adds	r0, #12
 800b9e4:	f7fe f89b 	bl	8009b1e <memcpy>
 800b9e8:	ec4b ab10 	vmov	d0, sl, fp
 800b9ec:	9805      	ldr	r0, [sp, #20]
 800b9ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800b9f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b9f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b9f6:	f7ff fbd7 	bl	800b1a8 <__d2b>
 800b9fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	f43f aede 	beq.w	800b7be <_strtod_l+0x43e>
 800ba02:	9805      	ldr	r0, [sp, #20]
 800ba04:	2101      	movs	r1, #1
 800ba06:	f7ff f929 	bl	800ac5c <__i2b>
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	b948      	cbnz	r0, 800ba22 <_strtod_l+0x6a2>
 800ba0e:	f04f 0800 	mov.w	r8, #0
 800ba12:	e6d4      	b.n	800b7be <_strtod_l+0x43e>
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba18:	fa02 f303 	lsl.w	r3, r2, r3
 800ba1c:	ea03 0a0a 	and.w	sl, r3, sl
 800ba20:	e7b0      	b.n	800b984 <_strtod_l+0x604>
 800ba22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba26:	2d00      	cmp	r5, #0
 800ba28:	bfab      	itete	ge
 800ba2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ba2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ba2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ba30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ba32:	bfac      	ite	ge
 800ba34:	18ef      	addge	r7, r5, r3
 800ba36:	1b5e      	sublt	r6, r3, r5
 800ba38:	9b08      	ldr	r3, [sp, #32]
 800ba3a:	1aed      	subs	r5, r5, r3
 800ba3c:	4415      	add	r5, r2
 800ba3e:	4b66      	ldr	r3, [pc, #408]	@ (800bbd8 <_strtod_l+0x858>)
 800ba40:	3d01      	subs	r5, #1
 800ba42:	429d      	cmp	r5, r3
 800ba44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba48:	da50      	bge.n	800baec <_strtod_l+0x76c>
 800ba4a:	1b5b      	subs	r3, r3, r5
 800ba4c:	2b1f      	cmp	r3, #31
 800ba4e:	eba2 0203 	sub.w	r2, r2, r3
 800ba52:	f04f 0101 	mov.w	r1, #1
 800ba56:	dc3d      	bgt.n	800bad4 <_strtod_l+0x754>
 800ba58:	fa01 f303 	lsl.w	r3, r1, r3
 800ba5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba62:	18bd      	adds	r5, r7, r2
 800ba64:	9b08      	ldr	r3, [sp, #32]
 800ba66:	42af      	cmp	r7, r5
 800ba68:	4416      	add	r6, r2
 800ba6a:	441e      	add	r6, r3
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	bfa8      	it	ge
 800ba70:	462b      	movge	r3, r5
 800ba72:	42b3      	cmp	r3, r6
 800ba74:	bfa8      	it	ge
 800ba76:	4633      	movge	r3, r6
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	bfc2      	ittt	gt
 800ba7c:	1aed      	subgt	r5, r5, r3
 800ba7e:	1af6      	subgt	r6, r6, r3
 800ba80:	1aff      	subgt	r7, r7, r3
 800ba82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	dd16      	ble.n	800bab6 <_strtod_l+0x736>
 800ba88:	4641      	mov	r1, r8
 800ba8a:	9805      	ldr	r0, [sp, #20]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	f7ff f9a5 	bl	800addc <__pow5mult>
 800ba92:	4680      	mov	r8, r0
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d0ba      	beq.n	800ba0e <_strtod_l+0x68e>
 800ba98:	4601      	mov	r1, r0
 800ba9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba9c:	9805      	ldr	r0, [sp, #20]
 800ba9e:	f7ff f8f3 	bl	800ac88 <__multiply>
 800baa2:	900e      	str	r0, [sp, #56]	@ 0x38
 800baa4:	2800      	cmp	r0, #0
 800baa6:	f43f ae8a 	beq.w	800b7be <_strtod_l+0x43e>
 800baaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baac:	9805      	ldr	r0, [sp, #20]
 800baae:	f7fe ffd7 	bl	800aa60 <_Bfree>
 800bab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bab4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	dc1d      	bgt.n	800baf6 <_strtod_l+0x776>
 800baba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800babc:	2b00      	cmp	r3, #0
 800babe:	dd23      	ble.n	800bb08 <_strtod_l+0x788>
 800bac0:	4649      	mov	r1, r9
 800bac2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bac4:	9805      	ldr	r0, [sp, #20]
 800bac6:	f7ff f989 	bl	800addc <__pow5mult>
 800baca:	4681      	mov	r9, r0
 800bacc:	b9e0      	cbnz	r0, 800bb08 <_strtod_l+0x788>
 800bace:	f04f 0900 	mov.w	r9, #0
 800bad2:	e674      	b.n	800b7be <_strtod_l+0x43e>
 800bad4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bad8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800badc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bae0:	35e2      	adds	r5, #226	@ 0xe2
 800bae2:	fa01 f305 	lsl.w	r3, r1, r5
 800bae6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bae8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800baea:	e7ba      	b.n	800ba62 <_strtod_l+0x6e2>
 800baec:	2300      	movs	r3, #0
 800baee:	9310      	str	r3, [sp, #64]	@ 0x40
 800baf0:	2301      	movs	r3, #1
 800baf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800baf4:	e7b5      	b.n	800ba62 <_strtod_l+0x6e2>
 800baf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baf8:	9805      	ldr	r0, [sp, #20]
 800bafa:	462a      	mov	r2, r5
 800bafc:	f7ff f9c8 	bl	800ae90 <__lshift>
 800bb00:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d1d9      	bne.n	800baba <_strtod_l+0x73a>
 800bb06:	e65a      	b.n	800b7be <_strtod_l+0x43e>
 800bb08:	2e00      	cmp	r6, #0
 800bb0a:	dd07      	ble.n	800bb1c <_strtod_l+0x79c>
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	9805      	ldr	r0, [sp, #20]
 800bb10:	4632      	mov	r2, r6
 800bb12:	f7ff f9bd 	bl	800ae90 <__lshift>
 800bb16:	4681      	mov	r9, r0
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d0d8      	beq.n	800bace <_strtod_l+0x74e>
 800bb1c:	2f00      	cmp	r7, #0
 800bb1e:	dd08      	ble.n	800bb32 <_strtod_l+0x7b2>
 800bb20:	4641      	mov	r1, r8
 800bb22:	9805      	ldr	r0, [sp, #20]
 800bb24:	463a      	mov	r2, r7
 800bb26:	f7ff f9b3 	bl	800ae90 <__lshift>
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	f43f ae46 	beq.w	800b7be <_strtod_l+0x43e>
 800bb32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb34:	9805      	ldr	r0, [sp, #20]
 800bb36:	464a      	mov	r2, r9
 800bb38:	f7ff fa32 	bl	800afa0 <__mdiff>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	f43f ae3d 	beq.w	800b7be <_strtod_l+0x43e>
 800bb44:	68c3      	ldr	r3, [r0, #12]
 800bb46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb48:	2300      	movs	r3, #0
 800bb4a:	60c3      	str	r3, [r0, #12]
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	f7ff fa0b 	bl	800af68 <__mcmp>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	da46      	bge.n	800bbe4 <_strtod_l+0x864>
 800bb56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb58:	ea53 030a 	orrs.w	r3, r3, sl
 800bb5c:	d16c      	bne.n	800bc38 <_strtod_l+0x8b8>
 800bb5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d168      	bne.n	800bc38 <_strtod_l+0x8b8>
 800bb66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb6a:	0d1b      	lsrs	r3, r3, #20
 800bb6c:	051b      	lsls	r3, r3, #20
 800bb6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb72:	d961      	bls.n	800bc38 <_strtod_l+0x8b8>
 800bb74:	6963      	ldr	r3, [r4, #20]
 800bb76:	b913      	cbnz	r3, 800bb7e <_strtod_l+0x7fe>
 800bb78:	6923      	ldr	r3, [r4, #16]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	dd5c      	ble.n	800bc38 <_strtod_l+0x8b8>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	2201      	movs	r2, #1
 800bb82:	9805      	ldr	r0, [sp, #20]
 800bb84:	f7ff f984 	bl	800ae90 <__lshift>
 800bb88:	4641      	mov	r1, r8
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	f7ff f9ec 	bl	800af68 <__mcmp>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	dd51      	ble.n	800bc38 <_strtod_l+0x8b8>
 800bb94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb98:	9a08      	ldr	r2, [sp, #32]
 800bb9a:	0d1b      	lsrs	r3, r3, #20
 800bb9c:	051b      	lsls	r3, r3, #20
 800bb9e:	2a00      	cmp	r2, #0
 800bba0:	d06b      	beq.n	800bc7a <_strtod_l+0x8fa>
 800bba2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bba6:	d868      	bhi.n	800bc7a <_strtod_l+0x8fa>
 800bba8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bbac:	f67f ae9d 	bls.w	800b8ea <_strtod_l+0x56a>
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbdc <_strtod_l+0x85c>)
 800bbb2:	4650      	mov	r0, sl
 800bbb4:	4659      	mov	r1, fp
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f7f4 fd46 	bl	8000648 <__aeabi_dmul>
 800bbbc:	4b08      	ldr	r3, [pc, #32]	@ (800bbe0 <_strtod_l+0x860>)
 800bbbe:	400b      	ands	r3, r1
 800bbc0:	4682      	mov	sl, r0
 800bbc2:	468b      	mov	fp, r1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f47f ae05 	bne.w	800b7d4 <_strtod_l+0x454>
 800bbca:	9a05      	ldr	r2, [sp, #20]
 800bbcc:	2322      	movs	r3, #34	@ 0x22
 800bbce:	6013      	str	r3, [r2, #0]
 800bbd0:	e600      	b.n	800b7d4 <_strtod_l+0x454>
 800bbd2:	bf00      	nop
 800bbd4:	0800e848 	.word	0x0800e848
 800bbd8:	fffffc02 	.word	0xfffffc02
 800bbdc:	39500000 	.word	0x39500000
 800bbe0:	7ff00000 	.word	0x7ff00000
 800bbe4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bbe8:	d165      	bne.n	800bcb6 <_strtod_l+0x936>
 800bbea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bbec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbf0:	b35a      	cbz	r2, 800bc4a <_strtod_l+0x8ca>
 800bbf2:	4a9f      	ldr	r2, [pc, #636]	@ (800be70 <_strtod_l+0xaf0>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d12b      	bne.n	800bc50 <_strtod_l+0x8d0>
 800bbf8:	9b08      	ldr	r3, [sp, #32]
 800bbfa:	4651      	mov	r1, sl
 800bbfc:	b303      	cbz	r3, 800bc40 <_strtod_l+0x8c0>
 800bbfe:	4b9d      	ldr	r3, [pc, #628]	@ (800be74 <_strtod_l+0xaf4>)
 800bc00:	465a      	mov	r2, fp
 800bc02:	4013      	ands	r3, r2
 800bc04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc0c:	d81b      	bhi.n	800bc46 <_strtod_l+0x8c6>
 800bc0e:	0d1b      	lsrs	r3, r3, #20
 800bc10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc14:	fa02 f303 	lsl.w	r3, r2, r3
 800bc18:	4299      	cmp	r1, r3
 800bc1a:	d119      	bne.n	800bc50 <_strtod_l+0x8d0>
 800bc1c:	4b96      	ldr	r3, [pc, #600]	@ (800be78 <_strtod_l+0xaf8>)
 800bc1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d102      	bne.n	800bc2a <_strtod_l+0x8aa>
 800bc24:	3101      	adds	r1, #1
 800bc26:	f43f adca 	beq.w	800b7be <_strtod_l+0x43e>
 800bc2a:	4b92      	ldr	r3, [pc, #584]	@ (800be74 <_strtod_l+0xaf4>)
 800bc2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc2e:	401a      	ands	r2, r3
 800bc30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bc34:	f04f 0a00 	mov.w	sl, #0
 800bc38:	9b08      	ldr	r3, [sp, #32]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1b8      	bne.n	800bbb0 <_strtod_l+0x830>
 800bc3e:	e5c9      	b.n	800b7d4 <_strtod_l+0x454>
 800bc40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bc44:	e7e8      	b.n	800bc18 <_strtod_l+0x898>
 800bc46:	4613      	mov	r3, r2
 800bc48:	e7e6      	b.n	800bc18 <_strtod_l+0x898>
 800bc4a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc4e:	d0a1      	beq.n	800bb94 <_strtod_l+0x814>
 800bc50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc52:	b1db      	cbz	r3, 800bc8c <_strtod_l+0x90c>
 800bc54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc56:	4213      	tst	r3, r2
 800bc58:	d0ee      	beq.n	800bc38 <_strtod_l+0x8b8>
 800bc5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc5c:	9a08      	ldr	r2, [sp, #32]
 800bc5e:	4650      	mov	r0, sl
 800bc60:	4659      	mov	r1, fp
 800bc62:	b1bb      	cbz	r3, 800bc94 <_strtod_l+0x914>
 800bc64:	f7ff fb6e 	bl	800b344 <sulp>
 800bc68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc6c:	ec53 2b10 	vmov	r2, r3, d0
 800bc70:	f7f4 fb34 	bl	80002dc <__adddf3>
 800bc74:	4682      	mov	sl, r0
 800bc76:	468b      	mov	fp, r1
 800bc78:	e7de      	b.n	800bc38 <_strtod_l+0x8b8>
 800bc7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bc7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bc82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bc86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bc8a:	e7d5      	b.n	800bc38 <_strtod_l+0x8b8>
 800bc8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc8e:	ea13 0f0a 	tst.w	r3, sl
 800bc92:	e7e1      	b.n	800bc58 <_strtod_l+0x8d8>
 800bc94:	f7ff fb56 	bl	800b344 <sulp>
 800bc98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc9c:	ec53 2b10 	vmov	r2, r3, d0
 800bca0:	f7f4 fb1a 	bl	80002d8 <__aeabi_dsub>
 800bca4:	2200      	movs	r2, #0
 800bca6:	2300      	movs	r3, #0
 800bca8:	4682      	mov	sl, r0
 800bcaa:	468b      	mov	fp, r1
 800bcac:	f7f4 ff34 	bl	8000b18 <__aeabi_dcmpeq>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d0c1      	beq.n	800bc38 <_strtod_l+0x8b8>
 800bcb4:	e619      	b.n	800b8ea <_strtod_l+0x56a>
 800bcb6:	4641      	mov	r1, r8
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f7ff facd 	bl	800b258 <__ratio>
 800bcbe:	ec57 6b10 	vmov	r6, r7, d0
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bcc8:	4630      	mov	r0, r6
 800bcca:	4639      	mov	r1, r7
 800bccc:	f7f4 ff38 	bl	8000b40 <__aeabi_dcmple>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d06f      	beq.n	800bdb4 <_strtod_l+0xa34>
 800bcd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d17a      	bne.n	800bdd0 <_strtod_l+0xa50>
 800bcda:	f1ba 0f00 	cmp.w	sl, #0
 800bcde:	d158      	bne.n	800bd92 <_strtod_l+0xa12>
 800bce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d15a      	bne.n	800bda0 <_strtod_l+0xa20>
 800bcea:	4b64      	ldr	r3, [pc, #400]	@ (800be7c <_strtod_l+0xafc>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	4630      	mov	r0, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	f7f4 ff1b 	bl	8000b2c <__aeabi_dcmplt>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d159      	bne.n	800bdae <_strtod_l+0xa2e>
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	4b60      	ldr	r3, [pc, #384]	@ (800be80 <_strtod_l+0xb00>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	f7f4 fca1 	bl	8000648 <__aeabi_dmul>
 800bd06:	4606      	mov	r6, r0
 800bd08:	460f      	mov	r7, r1
 800bd0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd0e:	9606      	str	r6, [sp, #24]
 800bd10:	9307      	str	r3, [sp, #28]
 800bd12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd16:	4d57      	ldr	r5, [pc, #348]	@ (800be74 <_strtod_l+0xaf4>)
 800bd18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd1e:	401d      	ands	r5, r3
 800bd20:	4b58      	ldr	r3, [pc, #352]	@ (800be84 <_strtod_l+0xb04>)
 800bd22:	429d      	cmp	r5, r3
 800bd24:	f040 80b2 	bne.w	800be8c <_strtod_l+0xb0c>
 800bd28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd2e:	ec4b ab10 	vmov	d0, sl, fp
 800bd32:	f7ff f9c9 	bl	800b0c8 <__ulp>
 800bd36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd3a:	ec51 0b10 	vmov	r0, r1, d0
 800bd3e:	f7f4 fc83 	bl	8000648 <__aeabi_dmul>
 800bd42:	4652      	mov	r2, sl
 800bd44:	465b      	mov	r3, fp
 800bd46:	f7f4 fac9 	bl	80002dc <__adddf3>
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4949      	ldr	r1, [pc, #292]	@ (800be74 <_strtod_l+0xaf4>)
 800bd4e:	4a4e      	ldr	r2, [pc, #312]	@ (800be88 <_strtod_l+0xb08>)
 800bd50:	4019      	ands	r1, r3
 800bd52:	4291      	cmp	r1, r2
 800bd54:	4682      	mov	sl, r0
 800bd56:	d942      	bls.n	800bdde <_strtod_l+0xa5e>
 800bd58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd5a:	4b47      	ldr	r3, [pc, #284]	@ (800be78 <_strtod_l+0xaf8>)
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d103      	bne.n	800bd68 <_strtod_l+0x9e8>
 800bd60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd62:	3301      	adds	r3, #1
 800bd64:	f43f ad2b 	beq.w	800b7be <_strtod_l+0x43e>
 800bd68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800be78 <_strtod_l+0xaf8>
 800bd6c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bd70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd72:	9805      	ldr	r0, [sp, #20]
 800bd74:	f7fe fe74 	bl	800aa60 <_Bfree>
 800bd78:	9805      	ldr	r0, [sp, #20]
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	f7fe fe70 	bl	800aa60 <_Bfree>
 800bd80:	9805      	ldr	r0, [sp, #20]
 800bd82:	4641      	mov	r1, r8
 800bd84:	f7fe fe6c 	bl	800aa60 <_Bfree>
 800bd88:	9805      	ldr	r0, [sp, #20]
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	f7fe fe68 	bl	800aa60 <_Bfree>
 800bd90:	e618      	b.n	800b9c4 <_strtod_l+0x644>
 800bd92:	f1ba 0f01 	cmp.w	sl, #1
 800bd96:	d103      	bne.n	800bda0 <_strtod_l+0xa20>
 800bd98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f43f ada5 	beq.w	800b8ea <_strtod_l+0x56a>
 800bda0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800be50 <_strtod_l+0xad0>
 800bda4:	4f35      	ldr	r7, [pc, #212]	@ (800be7c <_strtod_l+0xafc>)
 800bda6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdaa:	2600      	movs	r6, #0
 800bdac:	e7b1      	b.n	800bd12 <_strtod_l+0x992>
 800bdae:	4f34      	ldr	r7, [pc, #208]	@ (800be80 <_strtod_l+0xb00>)
 800bdb0:	2600      	movs	r6, #0
 800bdb2:	e7aa      	b.n	800bd0a <_strtod_l+0x98a>
 800bdb4:	4b32      	ldr	r3, [pc, #200]	@ (800be80 <_strtod_l+0xb00>)
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4639      	mov	r1, r7
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f7f4 fc44 	bl	8000648 <__aeabi_dmul>
 800bdc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d09f      	beq.n	800bd0a <_strtod_l+0x98a>
 800bdca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bdce:	e7a0      	b.n	800bd12 <_strtod_l+0x992>
 800bdd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800be58 <_strtod_l+0xad8>
 800bdd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdd8:	ec57 6b17 	vmov	r6, r7, d7
 800bddc:	e799      	b.n	800bd12 <_strtod_l+0x992>
 800bdde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bde2:	9b08      	ldr	r3, [sp, #32]
 800bde4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1c1      	bne.n	800bd70 <_strtod_l+0x9f0>
 800bdec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdf0:	0d1b      	lsrs	r3, r3, #20
 800bdf2:	051b      	lsls	r3, r3, #20
 800bdf4:	429d      	cmp	r5, r3
 800bdf6:	d1bb      	bne.n	800bd70 <_strtod_l+0x9f0>
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 ff84 	bl	8000d08 <__aeabi_d2lz>
 800be00:	f7f4 fbf4 	bl	80005ec <__aeabi_l2d>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	f7f4 fa64 	bl	80002d8 <__aeabi_dsub>
 800be10:	460b      	mov	r3, r1
 800be12:	4602      	mov	r2, r0
 800be14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be1e:	ea46 060a 	orr.w	r6, r6, sl
 800be22:	431e      	orrs	r6, r3
 800be24:	d06f      	beq.n	800bf06 <_strtod_l+0xb86>
 800be26:	a30e      	add	r3, pc, #56	@ (adr r3, 800be60 <_strtod_l+0xae0>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	f7f4 fe7e 	bl	8000b2c <__aeabi_dcmplt>
 800be30:	2800      	cmp	r0, #0
 800be32:	f47f accf 	bne.w	800b7d4 <_strtod_l+0x454>
 800be36:	a30c      	add	r3, pc, #48	@ (adr r3, 800be68 <_strtod_l+0xae8>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be40:	f7f4 fe92 	bl	8000b68 <__aeabi_dcmpgt>
 800be44:	2800      	cmp	r0, #0
 800be46:	d093      	beq.n	800bd70 <_strtod_l+0x9f0>
 800be48:	e4c4      	b.n	800b7d4 <_strtod_l+0x454>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
 800be50:	00000000 	.word	0x00000000
 800be54:	bff00000 	.word	0xbff00000
 800be58:	00000000 	.word	0x00000000
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	94a03595 	.word	0x94a03595
 800be64:	3fdfffff 	.word	0x3fdfffff
 800be68:	35afe535 	.word	0x35afe535
 800be6c:	3fe00000 	.word	0x3fe00000
 800be70:	000fffff 	.word	0x000fffff
 800be74:	7ff00000 	.word	0x7ff00000
 800be78:	7fefffff 	.word	0x7fefffff
 800be7c:	3ff00000 	.word	0x3ff00000
 800be80:	3fe00000 	.word	0x3fe00000
 800be84:	7fe00000 	.word	0x7fe00000
 800be88:	7c9fffff 	.word	0x7c9fffff
 800be8c:	9b08      	ldr	r3, [sp, #32]
 800be8e:	b323      	cbz	r3, 800beda <_strtod_l+0xb5a>
 800be90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800be94:	d821      	bhi.n	800beda <_strtod_l+0xb5a>
 800be96:	a328      	add	r3, pc, #160	@ (adr r3, 800bf38 <_strtod_l+0xbb8>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f7f4 fe4e 	bl	8000b40 <__aeabi_dcmple>
 800bea4:	b1a0      	cbz	r0, 800bed0 <_strtod_l+0xb50>
 800bea6:	4639      	mov	r1, r7
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7f4 fea5 	bl	8000bf8 <__aeabi_d2uiz>
 800beae:	2801      	cmp	r0, #1
 800beb0:	bf38      	it	cc
 800beb2:	2001      	movcc	r0, #1
 800beb4:	f7f4 fb4e 	bl	8000554 <__aeabi_ui2d>
 800beb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beba:	4606      	mov	r6, r0
 800bebc:	460f      	mov	r7, r1
 800bebe:	b9fb      	cbnz	r3, 800bf00 <_strtod_l+0xb80>
 800bec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bec4:	9014      	str	r0, [sp, #80]	@ 0x50
 800bec6:	9315      	str	r3, [sp, #84]	@ 0x54
 800bec8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800becc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bed0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bed2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bed6:	1b5b      	subs	r3, r3, r5
 800bed8:	9311      	str	r3, [sp, #68]	@ 0x44
 800beda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bede:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bee2:	f7ff f8f1 	bl	800b0c8 <__ulp>
 800bee6:	4650      	mov	r0, sl
 800bee8:	ec53 2b10 	vmov	r2, r3, d0
 800beec:	4659      	mov	r1, fp
 800beee:	f7f4 fbab 	bl	8000648 <__aeabi_dmul>
 800bef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bef6:	f7f4 f9f1 	bl	80002dc <__adddf3>
 800befa:	4682      	mov	sl, r0
 800befc:	468b      	mov	fp, r1
 800befe:	e770      	b.n	800bde2 <_strtod_l+0xa62>
 800bf00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf04:	e7e0      	b.n	800bec8 <_strtod_l+0xb48>
 800bf06:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf40 <_strtod_l+0xbc0>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 fe0e 	bl	8000b2c <__aeabi_dcmplt>
 800bf10:	e798      	b.n	800be44 <_strtod_l+0xac4>
 800bf12:	2300      	movs	r3, #0
 800bf14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf1a:	6013      	str	r3, [r2, #0]
 800bf1c:	f7ff ba6d 	b.w	800b3fa <_strtod_l+0x7a>
 800bf20:	2a65      	cmp	r2, #101	@ 0x65
 800bf22:	f43f ab66 	beq.w	800b5f2 <_strtod_l+0x272>
 800bf26:	2a45      	cmp	r2, #69	@ 0x45
 800bf28:	f43f ab63 	beq.w	800b5f2 <_strtod_l+0x272>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	f7ff bb9e 	b.w	800b66e <_strtod_l+0x2ee>
 800bf32:	bf00      	nop
 800bf34:	f3af 8000 	nop.w
 800bf38:	ffc00000 	.word	0xffc00000
 800bf3c:	41dfffff 	.word	0x41dfffff
 800bf40:	94a03595 	.word	0x94a03595
 800bf44:	3fcfffff 	.word	0x3fcfffff

0800bf48 <_strtod_r>:
 800bf48:	4b01      	ldr	r3, [pc, #4]	@ (800bf50 <_strtod_r+0x8>)
 800bf4a:	f7ff ba19 	b.w	800b380 <_strtod_l>
 800bf4e:	bf00      	nop
 800bf50:	20000098 	.word	0x20000098

0800bf54 <_strtol_l.constprop.0>:
 800bf54:	2b24      	cmp	r3, #36	@ 0x24
 800bf56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5a:	4686      	mov	lr, r0
 800bf5c:	4690      	mov	r8, r2
 800bf5e:	d801      	bhi.n	800bf64 <_strtol_l.constprop.0+0x10>
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d106      	bne.n	800bf72 <_strtol_l.constprop.0+0x1e>
 800bf64:	f7fd fdae 	bl	8009ac4 <__errno>
 800bf68:	2316      	movs	r3, #22
 800bf6a:	6003      	str	r3, [r0, #0]
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf72:	4834      	ldr	r0, [pc, #208]	@ (800c044 <_strtol_l.constprop.0+0xf0>)
 800bf74:	460d      	mov	r5, r1
 800bf76:	462a      	mov	r2, r5
 800bf78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf7c:	5d06      	ldrb	r6, [r0, r4]
 800bf7e:	f016 0608 	ands.w	r6, r6, #8
 800bf82:	d1f8      	bne.n	800bf76 <_strtol_l.constprop.0+0x22>
 800bf84:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf86:	d12d      	bne.n	800bfe4 <_strtol_l.constprop.0+0x90>
 800bf88:	782c      	ldrb	r4, [r5, #0]
 800bf8a:	2601      	movs	r6, #1
 800bf8c:	1c95      	adds	r5, r2, #2
 800bf8e:	f033 0210 	bics.w	r2, r3, #16
 800bf92:	d109      	bne.n	800bfa8 <_strtol_l.constprop.0+0x54>
 800bf94:	2c30      	cmp	r4, #48	@ 0x30
 800bf96:	d12a      	bne.n	800bfee <_strtol_l.constprop.0+0x9a>
 800bf98:	782a      	ldrb	r2, [r5, #0]
 800bf9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf9e:	2a58      	cmp	r2, #88	@ 0x58
 800bfa0:	d125      	bne.n	800bfee <_strtol_l.constprop.0+0x9a>
 800bfa2:	786c      	ldrb	r4, [r5, #1]
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	3502      	adds	r5, #2
 800bfa8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bfac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	fbbc f9f3 	udiv	r9, ip, r3
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	fb03 ca19 	mls	sl, r3, r9, ip
 800bfbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bfc0:	2f09      	cmp	r7, #9
 800bfc2:	d81b      	bhi.n	800bffc <_strtol_l.constprop.0+0xa8>
 800bfc4:	463c      	mov	r4, r7
 800bfc6:	42a3      	cmp	r3, r4
 800bfc8:	dd27      	ble.n	800c01a <_strtol_l.constprop.0+0xc6>
 800bfca:	1c57      	adds	r7, r2, #1
 800bfcc:	d007      	beq.n	800bfde <_strtol_l.constprop.0+0x8a>
 800bfce:	4581      	cmp	r9, r0
 800bfd0:	d320      	bcc.n	800c014 <_strtol_l.constprop.0+0xc0>
 800bfd2:	d101      	bne.n	800bfd8 <_strtol_l.constprop.0+0x84>
 800bfd4:	45a2      	cmp	sl, r4
 800bfd6:	db1d      	blt.n	800c014 <_strtol_l.constprop.0+0xc0>
 800bfd8:	fb00 4003 	mla	r0, r0, r3, r4
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfe2:	e7eb      	b.n	800bfbc <_strtol_l.constprop.0+0x68>
 800bfe4:	2c2b      	cmp	r4, #43	@ 0x2b
 800bfe6:	bf04      	itt	eq
 800bfe8:	782c      	ldrbeq	r4, [r5, #0]
 800bfea:	1c95      	addeq	r5, r2, #2
 800bfec:	e7cf      	b.n	800bf8e <_strtol_l.constprop.0+0x3a>
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1da      	bne.n	800bfa8 <_strtol_l.constprop.0+0x54>
 800bff2:	2c30      	cmp	r4, #48	@ 0x30
 800bff4:	bf0c      	ite	eq
 800bff6:	2308      	moveq	r3, #8
 800bff8:	230a      	movne	r3, #10
 800bffa:	e7d5      	b.n	800bfa8 <_strtol_l.constprop.0+0x54>
 800bffc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c000:	2f19      	cmp	r7, #25
 800c002:	d801      	bhi.n	800c008 <_strtol_l.constprop.0+0xb4>
 800c004:	3c37      	subs	r4, #55	@ 0x37
 800c006:	e7de      	b.n	800bfc6 <_strtol_l.constprop.0+0x72>
 800c008:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c00c:	2f19      	cmp	r7, #25
 800c00e:	d804      	bhi.n	800c01a <_strtol_l.constprop.0+0xc6>
 800c010:	3c57      	subs	r4, #87	@ 0x57
 800c012:	e7d8      	b.n	800bfc6 <_strtol_l.constprop.0+0x72>
 800c014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c018:	e7e1      	b.n	800bfde <_strtol_l.constprop.0+0x8a>
 800c01a:	1c53      	adds	r3, r2, #1
 800c01c:	d108      	bne.n	800c030 <_strtol_l.constprop.0+0xdc>
 800c01e:	2322      	movs	r3, #34	@ 0x22
 800c020:	f8ce 3000 	str.w	r3, [lr]
 800c024:	4660      	mov	r0, ip
 800c026:	f1b8 0f00 	cmp.w	r8, #0
 800c02a:	d0a0      	beq.n	800bf6e <_strtol_l.constprop.0+0x1a>
 800c02c:	1e69      	subs	r1, r5, #1
 800c02e:	e006      	b.n	800c03e <_strtol_l.constprop.0+0xea>
 800c030:	b106      	cbz	r6, 800c034 <_strtol_l.constprop.0+0xe0>
 800c032:	4240      	negs	r0, r0
 800c034:	f1b8 0f00 	cmp.w	r8, #0
 800c038:	d099      	beq.n	800bf6e <_strtol_l.constprop.0+0x1a>
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	d1f6      	bne.n	800c02c <_strtol_l.constprop.0+0xd8>
 800c03e:	f8c8 1000 	str.w	r1, [r8]
 800c042:	e794      	b.n	800bf6e <_strtol_l.constprop.0+0x1a>
 800c044:	0800e871 	.word	0x0800e871

0800c048 <_strtol_r>:
 800c048:	f7ff bf84 	b.w	800bf54 <_strtol_l.constprop.0>

0800c04c <__ssputs_r>:
 800c04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c050:	688e      	ldr	r6, [r1, #8]
 800c052:	461f      	mov	r7, r3
 800c054:	42be      	cmp	r6, r7
 800c056:	680b      	ldr	r3, [r1, #0]
 800c058:	4682      	mov	sl, r0
 800c05a:	460c      	mov	r4, r1
 800c05c:	4690      	mov	r8, r2
 800c05e:	d82d      	bhi.n	800c0bc <__ssputs_r+0x70>
 800c060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c068:	d026      	beq.n	800c0b8 <__ssputs_r+0x6c>
 800c06a:	6965      	ldr	r5, [r4, #20]
 800c06c:	6909      	ldr	r1, [r1, #16]
 800c06e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c072:	eba3 0901 	sub.w	r9, r3, r1
 800c076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c07a:	1c7b      	adds	r3, r7, #1
 800c07c:	444b      	add	r3, r9
 800c07e:	106d      	asrs	r5, r5, #1
 800c080:	429d      	cmp	r5, r3
 800c082:	bf38      	it	cc
 800c084:	461d      	movcc	r5, r3
 800c086:	0553      	lsls	r3, r2, #21
 800c088:	d527      	bpl.n	800c0da <__ssputs_r+0x8e>
 800c08a:	4629      	mov	r1, r5
 800c08c:	f7fe fc1c 	bl	800a8c8 <_malloc_r>
 800c090:	4606      	mov	r6, r0
 800c092:	b360      	cbz	r0, 800c0ee <__ssputs_r+0xa2>
 800c094:	6921      	ldr	r1, [r4, #16]
 800c096:	464a      	mov	r2, r9
 800c098:	f7fd fd41 	bl	8009b1e <memcpy>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a6:	81a3      	strh	r3, [r4, #12]
 800c0a8:	6126      	str	r6, [r4, #16]
 800c0aa:	6165      	str	r5, [r4, #20]
 800c0ac:	444e      	add	r6, r9
 800c0ae:	eba5 0509 	sub.w	r5, r5, r9
 800c0b2:	6026      	str	r6, [r4, #0]
 800c0b4:	60a5      	str	r5, [r4, #8]
 800c0b6:	463e      	mov	r6, r7
 800c0b8:	42be      	cmp	r6, r7
 800c0ba:	d900      	bls.n	800c0be <__ssputs_r+0x72>
 800c0bc:	463e      	mov	r6, r7
 800c0be:	6820      	ldr	r0, [r4, #0]
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	f000 f9c6 	bl	800c454 <memmove>
 800c0c8:	68a3      	ldr	r3, [r4, #8]
 800c0ca:	1b9b      	subs	r3, r3, r6
 800c0cc:	60a3      	str	r3, [r4, #8]
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	4433      	add	r3, r6
 800c0d2:	6023      	str	r3, [r4, #0]
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0da:	462a      	mov	r2, r5
 800c0dc:	f000 fd7d 	bl	800cbda <_realloc_r>
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d1e0      	bne.n	800c0a8 <__ssputs_r+0x5c>
 800c0e6:	6921      	ldr	r1, [r4, #16]
 800c0e8:	4650      	mov	r0, sl
 800c0ea:	f7fe fb79 	bl	800a7e0 <_free_r>
 800c0ee:	230c      	movs	r3, #12
 800c0f0:	f8ca 3000 	str.w	r3, [sl]
 800c0f4:	89a3      	ldrh	r3, [r4, #12]
 800c0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0fa:	81a3      	strh	r3, [r4, #12]
 800c0fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c100:	e7e9      	b.n	800c0d6 <__ssputs_r+0x8a>
	...

0800c104 <_svfiprintf_r>:
 800c104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c108:	4698      	mov	r8, r3
 800c10a:	898b      	ldrh	r3, [r1, #12]
 800c10c:	061b      	lsls	r3, r3, #24
 800c10e:	b09d      	sub	sp, #116	@ 0x74
 800c110:	4607      	mov	r7, r0
 800c112:	460d      	mov	r5, r1
 800c114:	4614      	mov	r4, r2
 800c116:	d510      	bpl.n	800c13a <_svfiprintf_r+0x36>
 800c118:	690b      	ldr	r3, [r1, #16]
 800c11a:	b973      	cbnz	r3, 800c13a <_svfiprintf_r+0x36>
 800c11c:	2140      	movs	r1, #64	@ 0x40
 800c11e:	f7fe fbd3 	bl	800a8c8 <_malloc_r>
 800c122:	6028      	str	r0, [r5, #0]
 800c124:	6128      	str	r0, [r5, #16]
 800c126:	b930      	cbnz	r0, 800c136 <_svfiprintf_r+0x32>
 800c128:	230c      	movs	r3, #12
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c130:	b01d      	add	sp, #116	@ 0x74
 800c132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c136:	2340      	movs	r3, #64	@ 0x40
 800c138:	616b      	str	r3, [r5, #20]
 800c13a:	2300      	movs	r3, #0
 800c13c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c13e:	2320      	movs	r3, #32
 800c140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c144:	f8cd 800c 	str.w	r8, [sp, #12]
 800c148:	2330      	movs	r3, #48	@ 0x30
 800c14a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c2e8 <_svfiprintf_r+0x1e4>
 800c14e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c152:	f04f 0901 	mov.w	r9, #1
 800c156:	4623      	mov	r3, r4
 800c158:	469a      	mov	sl, r3
 800c15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c15e:	b10a      	cbz	r2, 800c164 <_svfiprintf_r+0x60>
 800c160:	2a25      	cmp	r2, #37	@ 0x25
 800c162:	d1f9      	bne.n	800c158 <_svfiprintf_r+0x54>
 800c164:	ebba 0b04 	subs.w	fp, sl, r4
 800c168:	d00b      	beq.n	800c182 <_svfiprintf_r+0x7e>
 800c16a:	465b      	mov	r3, fp
 800c16c:	4622      	mov	r2, r4
 800c16e:	4629      	mov	r1, r5
 800c170:	4638      	mov	r0, r7
 800c172:	f7ff ff6b 	bl	800c04c <__ssputs_r>
 800c176:	3001      	adds	r0, #1
 800c178:	f000 80a7 	beq.w	800c2ca <_svfiprintf_r+0x1c6>
 800c17c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c17e:	445a      	add	r2, fp
 800c180:	9209      	str	r2, [sp, #36]	@ 0x24
 800c182:	f89a 3000 	ldrb.w	r3, [sl]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 809f 	beq.w	800c2ca <_svfiprintf_r+0x1c6>
 800c18c:	2300      	movs	r3, #0
 800c18e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c196:	f10a 0a01 	add.w	sl, sl, #1
 800c19a:	9304      	str	r3, [sp, #16]
 800c19c:	9307      	str	r3, [sp, #28]
 800c19e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1a4:	4654      	mov	r4, sl
 800c1a6:	2205      	movs	r2, #5
 800c1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ac:	484e      	ldr	r0, [pc, #312]	@ (800c2e8 <_svfiprintf_r+0x1e4>)
 800c1ae:	f7f4 f837 	bl	8000220 <memchr>
 800c1b2:	9a04      	ldr	r2, [sp, #16]
 800c1b4:	b9d8      	cbnz	r0, 800c1ee <_svfiprintf_r+0xea>
 800c1b6:	06d0      	lsls	r0, r2, #27
 800c1b8:	bf44      	itt	mi
 800c1ba:	2320      	movmi	r3, #32
 800c1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1c0:	0711      	lsls	r1, r2, #28
 800c1c2:	bf44      	itt	mi
 800c1c4:	232b      	movmi	r3, #43	@ 0x2b
 800c1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1d0:	d015      	beq.n	800c1fe <_svfiprintf_r+0xfa>
 800c1d2:	9a07      	ldr	r2, [sp, #28]
 800c1d4:	4654      	mov	r4, sl
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f04f 0c0a 	mov.w	ip, #10
 800c1dc:	4621      	mov	r1, r4
 800c1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1e2:	3b30      	subs	r3, #48	@ 0x30
 800c1e4:	2b09      	cmp	r3, #9
 800c1e6:	d94b      	bls.n	800c280 <_svfiprintf_r+0x17c>
 800c1e8:	b1b0      	cbz	r0, 800c218 <_svfiprintf_r+0x114>
 800c1ea:	9207      	str	r2, [sp, #28]
 800c1ec:	e014      	b.n	800c218 <_svfiprintf_r+0x114>
 800c1ee:	eba0 0308 	sub.w	r3, r0, r8
 800c1f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	9304      	str	r3, [sp, #16]
 800c1fa:	46a2      	mov	sl, r4
 800c1fc:	e7d2      	b.n	800c1a4 <_svfiprintf_r+0xa0>
 800c1fe:	9b03      	ldr	r3, [sp, #12]
 800c200:	1d19      	adds	r1, r3, #4
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	9103      	str	r1, [sp, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	bfbb      	ittet	lt
 800c20a:	425b      	neglt	r3, r3
 800c20c:	f042 0202 	orrlt.w	r2, r2, #2
 800c210:	9307      	strge	r3, [sp, #28]
 800c212:	9307      	strlt	r3, [sp, #28]
 800c214:	bfb8      	it	lt
 800c216:	9204      	strlt	r2, [sp, #16]
 800c218:	7823      	ldrb	r3, [r4, #0]
 800c21a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c21c:	d10a      	bne.n	800c234 <_svfiprintf_r+0x130>
 800c21e:	7863      	ldrb	r3, [r4, #1]
 800c220:	2b2a      	cmp	r3, #42	@ 0x2a
 800c222:	d132      	bne.n	800c28a <_svfiprintf_r+0x186>
 800c224:	9b03      	ldr	r3, [sp, #12]
 800c226:	1d1a      	adds	r2, r3, #4
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	9203      	str	r2, [sp, #12]
 800c22c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c230:	3402      	adds	r4, #2
 800c232:	9305      	str	r3, [sp, #20]
 800c234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c2f8 <_svfiprintf_r+0x1f4>
 800c238:	7821      	ldrb	r1, [r4, #0]
 800c23a:	2203      	movs	r2, #3
 800c23c:	4650      	mov	r0, sl
 800c23e:	f7f3 ffef 	bl	8000220 <memchr>
 800c242:	b138      	cbz	r0, 800c254 <_svfiprintf_r+0x150>
 800c244:	9b04      	ldr	r3, [sp, #16]
 800c246:	eba0 000a 	sub.w	r0, r0, sl
 800c24a:	2240      	movs	r2, #64	@ 0x40
 800c24c:	4082      	lsls	r2, r0
 800c24e:	4313      	orrs	r3, r2
 800c250:	3401      	adds	r4, #1
 800c252:	9304      	str	r3, [sp, #16]
 800c254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c258:	4824      	ldr	r0, [pc, #144]	@ (800c2ec <_svfiprintf_r+0x1e8>)
 800c25a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c25e:	2206      	movs	r2, #6
 800c260:	f7f3 ffde 	bl	8000220 <memchr>
 800c264:	2800      	cmp	r0, #0
 800c266:	d036      	beq.n	800c2d6 <_svfiprintf_r+0x1d2>
 800c268:	4b21      	ldr	r3, [pc, #132]	@ (800c2f0 <_svfiprintf_r+0x1ec>)
 800c26a:	bb1b      	cbnz	r3, 800c2b4 <_svfiprintf_r+0x1b0>
 800c26c:	9b03      	ldr	r3, [sp, #12]
 800c26e:	3307      	adds	r3, #7
 800c270:	f023 0307 	bic.w	r3, r3, #7
 800c274:	3308      	adds	r3, #8
 800c276:	9303      	str	r3, [sp, #12]
 800c278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c27a:	4433      	add	r3, r6
 800c27c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c27e:	e76a      	b.n	800c156 <_svfiprintf_r+0x52>
 800c280:	fb0c 3202 	mla	r2, ip, r2, r3
 800c284:	460c      	mov	r4, r1
 800c286:	2001      	movs	r0, #1
 800c288:	e7a8      	b.n	800c1dc <_svfiprintf_r+0xd8>
 800c28a:	2300      	movs	r3, #0
 800c28c:	3401      	adds	r4, #1
 800c28e:	9305      	str	r3, [sp, #20]
 800c290:	4619      	mov	r1, r3
 800c292:	f04f 0c0a 	mov.w	ip, #10
 800c296:	4620      	mov	r0, r4
 800c298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c29c:	3a30      	subs	r2, #48	@ 0x30
 800c29e:	2a09      	cmp	r2, #9
 800c2a0:	d903      	bls.n	800c2aa <_svfiprintf_r+0x1a6>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d0c6      	beq.n	800c234 <_svfiprintf_r+0x130>
 800c2a6:	9105      	str	r1, [sp, #20]
 800c2a8:	e7c4      	b.n	800c234 <_svfiprintf_r+0x130>
 800c2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e7f0      	b.n	800c296 <_svfiprintf_r+0x192>
 800c2b4:	ab03      	add	r3, sp, #12
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	462a      	mov	r2, r5
 800c2ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c2f4 <_svfiprintf_r+0x1f0>)
 800c2bc:	a904      	add	r1, sp, #16
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f7fc fc88 	bl	8008bd4 <_printf_float>
 800c2c4:	1c42      	adds	r2, r0, #1
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	d1d6      	bne.n	800c278 <_svfiprintf_r+0x174>
 800c2ca:	89ab      	ldrh	r3, [r5, #12]
 800c2cc:	065b      	lsls	r3, r3, #25
 800c2ce:	f53f af2d 	bmi.w	800c12c <_svfiprintf_r+0x28>
 800c2d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2d4:	e72c      	b.n	800c130 <_svfiprintf_r+0x2c>
 800c2d6:	ab03      	add	r3, sp, #12
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	462a      	mov	r2, r5
 800c2dc:	4b05      	ldr	r3, [pc, #20]	@ (800c2f4 <_svfiprintf_r+0x1f0>)
 800c2de:	a904      	add	r1, sp, #16
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f7fc ff0f 	bl	8009104 <_printf_i>
 800c2e6:	e7ed      	b.n	800c2c4 <_svfiprintf_r+0x1c0>
 800c2e8:	0800e971 	.word	0x0800e971
 800c2ec:	0800e97b 	.word	0x0800e97b
 800c2f0:	08008bd5 	.word	0x08008bd5
 800c2f4:	0800c04d 	.word	0x0800c04d
 800c2f8:	0800e977 	.word	0x0800e977

0800c2fc <__sflush_r>:
 800c2fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c304:	0716      	lsls	r6, r2, #28
 800c306:	4605      	mov	r5, r0
 800c308:	460c      	mov	r4, r1
 800c30a:	d454      	bmi.n	800c3b6 <__sflush_r+0xba>
 800c30c:	684b      	ldr	r3, [r1, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	dc02      	bgt.n	800c318 <__sflush_r+0x1c>
 800c312:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c314:	2b00      	cmp	r3, #0
 800c316:	dd48      	ble.n	800c3aa <__sflush_r+0xae>
 800c318:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c31a:	2e00      	cmp	r6, #0
 800c31c:	d045      	beq.n	800c3aa <__sflush_r+0xae>
 800c31e:	2300      	movs	r3, #0
 800c320:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c324:	682f      	ldr	r7, [r5, #0]
 800c326:	6a21      	ldr	r1, [r4, #32]
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	d030      	beq.n	800c38e <__sflush_r+0x92>
 800c32c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	0759      	lsls	r1, r3, #29
 800c332:	d505      	bpl.n	800c340 <__sflush_r+0x44>
 800c334:	6863      	ldr	r3, [r4, #4]
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c33a:	b10b      	cbz	r3, 800c340 <__sflush_r+0x44>
 800c33c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	2300      	movs	r3, #0
 800c342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c344:	6a21      	ldr	r1, [r4, #32]
 800c346:	4628      	mov	r0, r5
 800c348:	47b0      	blx	r6
 800c34a:	1c43      	adds	r3, r0, #1
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	d106      	bne.n	800c35e <__sflush_r+0x62>
 800c350:	6829      	ldr	r1, [r5, #0]
 800c352:	291d      	cmp	r1, #29
 800c354:	d82b      	bhi.n	800c3ae <__sflush_r+0xb2>
 800c356:	4a2a      	ldr	r2, [pc, #168]	@ (800c400 <__sflush_r+0x104>)
 800c358:	410a      	asrs	r2, r1
 800c35a:	07d6      	lsls	r6, r2, #31
 800c35c:	d427      	bmi.n	800c3ae <__sflush_r+0xb2>
 800c35e:	2200      	movs	r2, #0
 800c360:	6062      	str	r2, [r4, #4]
 800c362:	04d9      	lsls	r1, r3, #19
 800c364:	6922      	ldr	r2, [r4, #16]
 800c366:	6022      	str	r2, [r4, #0]
 800c368:	d504      	bpl.n	800c374 <__sflush_r+0x78>
 800c36a:	1c42      	adds	r2, r0, #1
 800c36c:	d101      	bne.n	800c372 <__sflush_r+0x76>
 800c36e:	682b      	ldr	r3, [r5, #0]
 800c370:	b903      	cbnz	r3, 800c374 <__sflush_r+0x78>
 800c372:	6560      	str	r0, [r4, #84]	@ 0x54
 800c374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c376:	602f      	str	r7, [r5, #0]
 800c378:	b1b9      	cbz	r1, 800c3aa <__sflush_r+0xae>
 800c37a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c37e:	4299      	cmp	r1, r3
 800c380:	d002      	beq.n	800c388 <__sflush_r+0x8c>
 800c382:	4628      	mov	r0, r5
 800c384:	f7fe fa2c 	bl	800a7e0 <_free_r>
 800c388:	2300      	movs	r3, #0
 800c38a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c38c:	e00d      	b.n	800c3aa <__sflush_r+0xae>
 800c38e:	2301      	movs	r3, #1
 800c390:	4628      	mov	r0, r5
 800c392:	47b0      	blx	r6
 800c394:	4602      	mov	r2, r0
 800c396:	1c50      	adds	r0, r2, #1
 800c398:	d1c9      	bne.n	800c32e <__sflush_r+0x32>
 800c39a:	682b      	ldr	r3, [r5, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0c6      	beq.n	800c32e <__sflush_r+0x32>
 800c3a0:	2b1d      	cmp	r3, #29
 800c3a2:	d001      	beq.n	800c3a8 <__sflush_r+0xac>
 800c3a4:	2b16      	cmp	r3, #22
 800c3a6:	d11e      	bne.n	800c3e6 <__sflush_r+0xea>
 800c3a8:	602f      	str	r7, [r5, #0]
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	e022      	b.n	800c3f4 <__sflush_r+0xf8>
 800c3ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	e01b      	b.n	800c3ee <__sflush_r+0xf2>
 800c3b6:	690f      	ldr	r7, [r1, #16]
 800c3b8:	2f00      	cmp	r7, #0
 800c3ba:	d0f6      	beq.n	800c3aa <__sflush_r+0xae>
 800c3bc:	0793      	lsls	r3, r2, #30
 800c3be:	680e      	ldr	r6, [r1, #0]
 800c3c0:	bf08      	it	eq
 800c3c2:	694b      	ldreq	r3, [r1, #20]
 800c3c4:	600f      	str	r7, [r1, #0]
 800c3c6:	bf18      	it	ne
 800c3c8:	2300      	movne	r3, #0
 800c3ca:	eba6 0807 	sub.w	r8, r6, r7
 800c3ce:	608b      	str	r3, [r1, #8]
 800c3d0:	f1b8 0f00 	cmp.w	r8, #0
 800c3d4:	dde9      	ble.n	800c3aa <__sflush_r+0xae>
 800c3d6:	6a21      	ldr	r1, [r4, #32]
 800c3d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3da:	4643      	mov	r3, r8
 800c3dc:	463a      	mov	r2, r7
 800c3de:	4628      	mov	r0, r5
 800c3e0:	47b0      	blx	r6
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	dc08      	bgt.n	800c3f8 <__sflush_r+0xfc>
 800c3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3ee:	81a3      	strh	r3, [r4, #12]
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f8:	4407      	add	r7, r0
 800c3fa:	eba8 0800 	sub.w	r8, r8, r0
 800c3fe:	e7e7      	b.n	800c3d0 <__sflush_r+0xd4>
 800c400:	dfbffffe 	.word	0xdfbffffe

0800c404 <_fflush_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	690b      	ldr	r3, [r1, #16]
 800c408:	4605      	mov	r5, r0
 800c40a:	460c      	mov	r4, r1
 800c40c:	b913      	cbnz	r3, 800c414 <_fflush_r+0x10>
 800c40e:	2500      	movs	r5, #0
 800c410:	4628      	mov	r0, r5
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	b118      	cbz	r0, 800c41e <_fflush_r+0x1a>
 800c416:	6a03      	ldr	r3, [r0, #32]
 800c418:	b90b      	cbnz	r3, 800c41e <_fflush_r+0x1a>
 800c41a:	f7fd fa33 	bl	8009884 <__sinit>
 800c41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0f3      	beq.n	800c40e <_fflush_r+0xa>
 800c426:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c428:	07d0      	lsls	r0, r2, #31
 800c42a:	d404      	bmi.n	800c436 <_fflush_r+0x32>
 800c42c:	0599      	lsls	r1, r3, #22
 800c42e:	d402      	bmi.n	800c436 <_fflush_r+0x32>
 800c430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c432:	f7fd fb72 	bl	8009b1a <__retarget_lock_acquire_recursive>
 800c436:	4628      	mov	r0, r5
 800c438:	4621      	mov	r1, r4
 800c43a:	f7ff ff5f 	bl	800c2fc <__sflush_r>
 800c43e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c440:	07da      	lsls	r2, r3, #31
 800c442:	4605      	mov	r5, r0
 800c444:	d4e4      	bmi.n	800c410 <_fflush_r+0xc>
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	059b      	lsls	r3, r3, #22
 800c44a:	d4e1      	bmi.n	800c410 <_fflush_r+0xc>
 800c44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c44e:	f7fd fb65 	bl	8009b1c <__retarget_lock_release_recursive>
 800c452:	e7dd      	b.n	800c410 <_fflush_r+0xc>

0800c454 <memmove>:
 800c454:	4288      	cmp	r0, r1
 800c456:	b510      	push	{r4, lr}
 800c458:	eb01 0402 	add.w	r4, r1, r2
 800c45c:	d902      	bls.n	800c464 <memmove+0x10>
 800c45e:	4284      	cmp	r4, r0
 800c460:	4623      	mov	r3, r4
 800c462:	d807      	bhi.n	800c474 <memmove+0x20>
 800c464:	1e43      	subs	r3, r0, #1
 800c466:	42a1      	cmp	r1, r4
 800c468:	d008      	beq.n	800c47c <memmove+0x28>
 800c46a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c46e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c472:	e7f8      	b.n	800c466 <memmove+0x12>
 800c474:	4402      	add	r2, r0
 800c476:	4601      	mov	r1, r0
 800c478:	428a      	cmp	r2, r1
 800c47a:	d100      	bne.n	800c47e <memmove+0x2a>
 800c47c:	bd10      	pop	{r4, pc}
 800c47e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c486:	e7f7      	b.n	800c478 <memmove+0x24>

0800c488 <strncmp>:
 800c488:	b510      	push	{r4, lr}
 800c48a:	b16a      	cbz	r2, 800c4a8 <strncmp+0x20>
 800c48c:	3901      	subs	r1, #1
 800c48e:	1884      	adds	r4, r0, r2
 800c490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c494:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c498:	429a      	cmp	r2, r3
 800c49a:	d103      	bne.n	800c4a4 <strncmp+0x1c>
 800c49c:	42a0      	cmp	r0, r4
 800c49e:	d001      	beq.n	800c4a4 <strncmp+0x1c>
 800c4a0:	2a00      	cmp	r2, #0
 800c4a2:	d1f5      	bne.n	800c490 <strncmp+0x8>
 800c4a4:	1ad0      	subs	r0, r2, r3
 800c4a6:	bd10      	pop	{r4, pc}
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	e7fc      	b.n	800c4a6 <strncmp+0x1e>

0800c4ac <_sbrk_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d06      	ldr	r5, [pc, #24]	@ (800c4c8 <_sbrk_r+0x1c>)
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	4608      	mov	r0, r1
 800c4b6:	602b      	str	r3, [r5, #0]
 800c4b8:	f7f7 ff3c 	bl	8004334 <_sbrk>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_sbrk_r+0x1a>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_sbrk_r+0x1a>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	200008b0 	.word	0x200008b0
 800c4cc:	00000000 	.word	0x00000000

0800c4d0 <nan>:
 800c4d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c4d8 <nan+0x8>
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	00000000 	.word	0x00000000
 800c4dc:	7ff80000 	.word	0x7ff80000

0800c4e0 <__assert_func>:
 800c4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4e2:	4614      	mov	r4, r2
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4b09      	ldr	r3, [pc, #36]	@ (800c50c <__assert_func+0x2c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4605      	mov	r5, r0
 800c4ec:	68d8      	ldr	r0, [r3, #12]
 800c4ee:	b954      	cbnz	r4, 800c506 <__assert_func+0x26>
 800c4f0:	4b07      	ldr	r3, [pc, #28]	@ (800c510 <__assert_func+0x30>)
 800c4f2:	461c      	mov	r4, r3
 800c4f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4f8:	9100      	str	r1, [sp, #0]
 800c4fa:	462b      	mov	r3, r5
 800c4fc:	4905      	ldr	r1, [pc, #20]	@ (800c514 <__assert_func+0x34>)
 800c4fe:	f000 fba7 	bl	800cc50 <fiprintf>
 800c502:	f000 fbb7 	bl	800cc74 <abort>
 800c506:	4b04      	ldr	r3, [pc, #16]	@ (800c518 <__assert_func+0x38>)
 800c508:	e7f4      	b.n	800c4f4 <__assert_func+0x14>
 800c50a:	bf00      	nop
 800c50c:	20000048 	.word	0x20000048
 800c510:	0800e9c5 	.word	0x0800e9c5
 800c514:	0800e997 	.word	0x0800e997
 800c518:	0800e98a 	.word	0x0800e98a

0800c51c <_calloc_r>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	fba1 5402 	umull	r5, r4, r1, r2
 800c522:	b93c      	cbnz	r4, 800c534 <_calloc_r+0x18>
 800c524:	4629      	mov	r1, r5
 800c526:	f7fe f9cf 	bl	800a8c8 <_malloc_r>
 800c52a:	4606      	mov	r6, r0
 800c52c:	b928      	cbnz	r0, 800c53a <_calloc_r+0x1e>
 800c52e:	2600      	movs	r6, #0
 800c530:	4630      	mov	r0, r6
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	220c      	movs	r2, #12
 800c536:	6002      	str	r2, [r0, #0]
 800c538:	e7f9      	b.n	800c52e <_calloc_r+0x12>
 800c53a:	462a      	mov	r2, r5
 800c53c:	4621      	mov	r1, r4
 800c53e:	f7fd fa6e 	bl	8009a1e <memset>
 800c542:	e7f5      	b.n	800c530 <_calloc_r+0x14>

0800c544 <rshift>:
 800c544:	6903      	ldr	r3, [r0, #16]
 800c546:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c54a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c54e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c552:	f100 0414 	add.w	r4, r0, #20
 800c556:	dd45      	ble.n	800c5e4 <rshift+0xa0>
 800c558:	f011 011f 	ands.w	r1, r1, #31
 800c55c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c560:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c564:	d10c      	bne.n	800c580 <rshift+0x3c>
 800c566:	f100 0710 	add.w	r7, r0, #16
 800c56a:	4629      	mov	r1, r5
 800c56c:	42b1      	cmp	r1, r6
 800c56e:	d334      	bcc.n	800c5da <rshift+0x96>
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	1eea      	subs	r2, r5, #3
 800c576:	4296      	cmp	r6, r2
 800c578:	bf38      	it	cc
 800c57a:	2300      	movcc	r3, #0
 800c57c:	4423      	add	r3, r4
 800c57e:	e015      	b.n	800c5ac <rshift+0x68>
 800c580:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c584:	f1c1 0820 	rsb	r8, r1, #32
 800c588:	40cf      	lsrs	r7, r1
 800c58a:	f105 0e04 	add.w	lr, r5, #4
 800c58e:	46a1      	mov	r9, r4
 800c590:	4576      	cmp	r6, lr
 800c592:	46f4      	mov	ip, lr
 800c594:	d815      	bhi.n	800c5c2 <rshift+0x7e>
 800c596:	1a9a      	subs	r2, r3, r2
 800c598:	0092      	lsls	r2, r2, #2
 800c59a:	3a04      	subs	r2, #4
 800c59c:	3501      	adds	r5, #1
 800c59e:	42ae      	cmp	r6, r5
 800c5a0:	bf38      	it	cc
 800c5a2:	2200      	movcc	r2, #0
 800c5a4:	18a3      	adds	r3, r4, r2
 800c5a6:	50a7      	str	r7, [r4, r2]
 800c5a8:	b107      	cbz	r7, 800c5ac <rshift+0x68>
 800c5aa:	3304      	adds	r3, #4
 800c5ac:	1b1a      	subs	r2, r3, r4
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5b4:	bf08      	it	eq
 800c5b6:	2300      	moveq	r3, #0
 800c5b8:	6102      	str	r2, [r0, #16]
 800c5ba:	bf08      	it	eq
 800c5bc:	6143      	streq	r3, [r0, #20]
 800c5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5c2:	f8dc c000 	ldr.w	ip, [ip]
 800c5c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5ca:	ea4c 0707 	orr.w	r7, ip, r7
 800c5ce:	f849 7b04 	str.w	r7, [r9], #4
 800c5d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5d6:	40cf      	lsrs	r7, r1
 800c5d8:	e7da      	b.n	800c590 <rshift+0x4c>
 800c5da:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5de:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5e2:	e7c3      	b.n	800c56c <rshift+0x28>
 800c5e4:	4623      	mov	r3, r4
 800c5e6:	e7e1      	b.n	800c5ac <rshift+0x68>

0800c5e8 <__hexdig_fun>:
 800c5e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c5ec:	2b09      	cmp	r3, #9
 800c5ee:	d802      	bhi.n	800c5f6 <__hexdig_fun+0xe>
 800c5f0:	3820      	subs	r0, #32
 800c5f2:	b2c0      	uxtb	r0, r0
 800c5f4:	4770      	bx	lr
 800c5f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c5fa:	2b05      	cmp	r3, #5
 800c5fc:	d801      	bhi.n	800c602 <__hexdig_fun+0x1a>
 800c5fe:	3847      	subs	r0, #71	@ 0x47
 800c600:	e7f7      	b.n	800c5f2 <__hexdig_fun+0xa>
 800c602:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c606:	2b05      	cmp	r3, #5
 800c608:	d801      	bhi.n	800c60e <__hexdig_fun+0x26>
 800c60a:	3827      	subs	r0, #39	@ 0x27
 800c60c:	e7f1      	b.n	800c5f2 <__hexdig_fun+0xa>
 800c60e:	2000      	movs	r0, #0
 800c610:	4770      	bx	lr
	...

0800c614 <__gethex>:
 800c614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c618:	b085      	sub	sp, #20
 800c61a:	468a      	mov	sl, r1
 800c61c:	9302      	str	r3, [sp, #8]
 800c61e:	680b      	ldr	r3, [r1, #0]
 800c620:	9001      	str	r0, [sp, #4]
 800c622:	4690      	mov	r8, r2
 800c624:	1c9c      	adds	r4, r3, #2
 800c626:	46a1      	mov	r9, r4
 800c628:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c62c:	2830      	cmp	r0, #48	@ 0x30
 800c62e:	d0fa      	beq.n	800c626 <__gethex+0x12>
 800c630:	eba9 0303 	sub.w	r3, r9, r3
 800c634:	f1a3 0b02 	sub.w	fp, r3, #2
 800c638:	f7ff ffd6 	bl	800c5e8 <__hexdig_fun>
 800c63c:	4605      	mov	r5, r0
 800c63e:	2800      	cmp	r0, #0
 800c640:	d168      	bne.n	800c714 <__gethex+0x100>
 800c642:	49a0      	ldr	r1, [pc, #640]	@ (800c8c4 <__gethex+0x2b0>)
 800c644:	2201      	movs	r2, #1
 800c646:	4648      	mov	r0, r9
 800c648:	f7ff ff1e 	bl	800c488 <strncmp>
 800c64c:	4607      	mov	r7, r0
 800c64e:	2800      	cmp	r0, #0
 800c650:	d167      	bne.n	800c722 <__gethex+0x10e>
 800c652:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c656:	4626      	mov	r6, r4
 800c658:	f7ff ffc6 	bl	800c5e8 <__hexdig_fun>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d062      	beq.n	800c726 <__gethex+0x112>
 800c660:	4623      	mov	r3, r4
 800c662:	7818      	ldrb	r0, [r3, #0]
 800c664:	2830      	cmp	r0, #48	@ 0x30
 800c666:	4699      	mov	r9, r3
 800c668:	f103 0301 	add.w	r3, r3, #1
 800c66c:	d0f9      	beq.n	800c662 <__gethex+0x4e>
 800c66e:	f7ff ffbb 	bl	800c5e8 <__hexdig_fun>
 800c672:	fab0 f580 	clz	r5, r0
 800c676:	096d      	lsrs	r5, r5, #5
 800c678:	f04f 0b01 	mov.w	fp, #1
 800c67c:	464a      	mov	r2, r9
 800c67e:	4616      	mov	r6, r2
 800c680:	3201      	adds	r2, #1
 800c682:	7830      	ldrb	r0, [r6, #0]
 800c684:	f7ff ffb0 	bl	800c5e8 <__hexdig_fun>
 800c688:	2800      	cmp	r0, #0
 800c68a:	d1f8      	bne.n	800c67e <__gethex+0x6a>
 800c68c:	498d      	ldr	r1, [pc, #564]	@ (800c8c4 <__gethex+0x2b0>)
 800c68e:	2201      	movs	r2, #1
 800c690:	4630      	mov	r0, r6
 800c692:	f7ff fef9 	bl	800c488 <strncmp>
 800c696:	2800      	cmp	r0, #0
 800c698:	d13f      	bne.n	800c71a <__gethex+0x106>
 800c69a:	b944      	cbnz	r4, 800c6ae <__gethex+0x9a>
 800c69c:	1c74      	adds	r4, r6, #1
 800c69e:	4622      	mov	r2, r4
 800c6a0:	4616      	mov	r6, r2
 800c6a2:	3201      	adds	r2, #1
 800c6a4:	7830      	ldrb	r0, [r6, #0]
 800c6a6:	f7ff ff9f 	bl	800c5e8 <__hexdig_fun>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	d1f8      	bne.n	800c6a0 <__gethex+0x8c>
 800c6ae:	1ba4      	subs	r4, r4, r6
 800c6b0:	00a7      	lsls	r7, r4, #2
 800c6b2:	7833      	ldrb	r3, [r6, #0]
 800c6b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c6b8:	2b50      	cmp	r3, #80	@ 0x50
 800c6ba:	d13e      	bne.n	800c73a <__gethex+0x126>
 800c6bc:	7873      	ldrb	r3, [r6, #1]
 800c6be:	2b2b      	cmp	r3, #43	@ 0x2b
 800c6c0:	d033      	beq.n	800c72a <__gethex+0x116>
 800c6c2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c6c4:	d034      	beq.n	800c730 <__gethex+0x11c>
 800c6c6:	1c71      	adds	r1, r6, #1
 800c6c8:	2400      	movs	r4, #0
 800c6ca:	7808      	ldrb	r0, [r1, #0]
 800c6cc:	f7ff ff8c 	bl	800c5e8 <__hexdig_fun>
 800c6d0:	1e43      	subs	r3, r0, #1
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b18      	cmp	r3, #24
 800c6d6:	d830      	bhi.n	800c73a <__gethex+0x126>
 800c6d8:	f1a0 0210 	sub.w	r2, r0, #16
 800c6dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6e0:	f7ff ff82 	bl	800c5e8 <__hexdig_fun>
 800c6e4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c6e8:	fa5f fc8c 	uxtb.w	ip, ip
 800c6ec:	f1bc 0f18 	cmp.w	ip, #24
 800c6f0:	f04f 030a 	mov.w	r3, #10
 800c6f4:	d91e      	bls.n	800c734 <__gethex+0x120>
 800c6f6:	b104      	cbz	r4, 800c6fa <__gethex+0xe6>
 800c6f8:	4252      	negs	r2, r2
 800c6fa:	4417      	add	r7, r2
 800c6fc:	f8ca 1000 	str.w	r1, [sl]
 800c700:	b1ed      	cbz	r5, 800c73e <__gethex+0x12a>
 800c702:	f1bb 0f00 	cmp.w	fp, #0
 800c706:	bf0c      	ite	eq
 800c708:	2506      	moveq	r5, #6
 800c70a:	2500      	movne	r5, #0
 800c70c:	4628      	mov	r0, r5
 800c70e:	b005      	add	sp, #20
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	2500      	movs	r5, #0
 800c716:	462c      	mov	r4, r5
 800c718:	e7b0      	b.n	800c67c <__gethex+0x68>
 800c71a:	2c00      	cmp	r4, #0
 800c71c:	d1c7      	bne.n	800c6ae <__gethex+0x9a>
 800c71e:	4627      	mov	r7, r4
 800c720:	e7c7      	b.n	800c6b2 <__gethex+0x9e>
 800c722:	464e      	mov	r6, r9
 800c724:	462f      	mov	r7, r5
 800c726:	2501      	movs	r5, #1
 800c728:	e7c3      	b.n	800c6b2 <__gethex+0x9e>
 800c72a:	2400      	movs	r4, #0
 800c72c:	1cb1      	adds	r1, r6, #2
 800c72e:	e7cc      	b.n	800c6ca <__gethex+0xb6>
 800c730:	2401      	movs	r4, #1
 800c732:	e7fb      	b.n	800c72c <__gethex+0x118>
 800c734:	fb03 0002 	mla	r0, r3, r2, r0
 800c738:	e7ce      	b.n	800c6d8 <__gethex+0xc4>
 800c73a:	4631      	mov	r1, r6
 800c73c:	e7de      	b.n	800c6fc <__gethex+0xe8>
 800c73e:	eba6 0309 	sub.w	r3, r6, r9
 800c742:	3b01      	subs	r3, #1
 800c744:	4629      	mov	r1, r5
 800c746:	2b07      	cmp	r3, #7
 800c748:	dc0a      	bgt.n	800c760 <__gethex+0x14c>
 800c74a:	9801      	ldr	r0, [sp, #4]
 800c74c:	f7fe f948 	bl	800a9e0 <_Balloc>
 800c750:	4604      	mov	r4, r0
 800c752:	b940      	cbnz	r0, 800c766 <__gethex+0x152>
 800c754:	4b5c      	ldr	r3, [pc, #368]	@ (800c8c8 <__gethex+0x2b4>)
 800c756:	4602      	mov	r2, r0
 800c758:	21e4      	movs	r1, #228	@ 0xe4
 800c75a:	485c      	ldr	r0, [pc, #368]	@ (800c8cc <__gethex+0x2b8>)
 800c75c:	f7ff fec0 	bl	800c4e0 <__assert_func>
 800c760:	3101      	adds	r1, #1
 800c762:	105b      	asrs	r3, r3, #1
 800c764:	e7ef      	b.n	800c746 <__gethex+0x132>
 800c766:	f100 0a14 	add.w	sl, r0, #20
 800c76a:	2300      	movs	r3, #0
 800c76c:	4655      	mov	r5, sl
 800c76e:	469b      	mov	fp, r3
 800c770:	45b1      	cmp	r9, r6
 800c772:	d337      	bcc.n	800c7e4 <__gethex+0x1d0>
 800c774:	f845 bb04 	str.w	fp, [r5], #4
 800c778:	eba5 050a 	sub.w	r5, r5, sl
 800c77c:	10ad      	asrs	r5, r5, #2
 800c77e:	6125      	str	r5, [r4, #16]
 800c780:	4658      	mov	r0, fp
 800c782:	f7fe fa1f 	bl	800abc4 <__hi0bits>
 800c786:	016d      	lsls	r5, r5, #5
 800c788:	f8d8 6000 	ldr.w	r6, [r8]
 800c78c:	1a2d      	subs	r5, r5, r0
 800c78e:	42b5      	cmp	r5, r6
 800c790:	dd54      	ble.n	800c83c <__gethex+0x228>
 800c792:	1bad      	subs	r5, r5, r6
 800c794:	4629      	mov	r1, r5
 800c796:	4620      	mov	r0, r4
 800c798:	f7fe fdb3 	bl	800b302 <__any_on>
 800c79c:	4681      	mov	r9, r0
 800c79e:	b178      	cbz	r0, 800c7c0 <__gethex+0x1ac>
 800c7a0:	1e6b      	subs	r3, r5, #1
 800c7a2:	1159      	asrs	r1, r3, #5
 800c7a4:	f003 021f 	and.w	r2, r3, #31
 800c7a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c7ac:	f04f 0901 	mov.w	r9, #1
 800c7b0:	fa09 f202 	lsl.w	r2, r9, r2
 800c7b4:	420a      	tst	r2, r1
 800c7b6:	d003      	beq.n	800c7c0 <__gethex+0x1ac>
 800c7b8:	454b      	cmp	r3, r9
 800c7ba:	dc36      	bgt.n	800c82a <__gethex+0x216>
 800c7bc:	f04f 0902 	mov.w	r9, #2
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f7ff febe 	bl	800c544 <rshift>
 800c7c8:	442f      	add	r7, r5
 800c7ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7ce:	42bb      	cmp	r3, r7
 800c7d0:	da42      	bge.n	800c858 <__gethex+0x244>
 800c7d2:	9801      	ldr	r0, [sp, #4]
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f7fe f943 	bl	800aa60 <_Bfree>
 800c7da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7dc:	2300      	movs	r3, #0
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	25a3      	movs	r5, #163	@ 0xa3
 800c7e2:	e793      	b.n	800c70c <__gethex+0xf8>
 800c7e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c7e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c7ea:	d012      	beq.n	800c812 <__gethex+0x1fe>
 800c7ec:	2b20      	cmp	r3, #32
 800c7ee:	d104      	bne.n	800c7fa <__gethex+0x1e6>
 800c7f0:	f845 bb04 	str.w	fp, [r5], #4
 800c7f4:	f04f 0b00 	mov.w	fp, #0
 800c7f8:	465b      	mov	r3, fp
 800c7fa:	7830      	ldrb	r0, [r6, #0]
 800c7fc:	9303      	str	r3, [sp, #12]
 800c7fe:	f7ff fef3 	bl	800c5e8 <__hexdig_fun>
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	f000 000f 	and.w	r0, r0, #15
 800c808:	4098      	lsls	r0, r3
 800c80a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c80e:	3304      	adds	r3, #4
 800c810:	e7ae      	b.n	800c770 <__gethex+0x15c>
 800c812:	45b1      	cmp	r9, r6
 800c814:	d8ea      	bhi.n	800c7ec <__gethex+0x1d8>
 800c816:	492b      	ldr	r1, [pc, #172]	@ (800c8c4 <__gethex+0x2b0>)
 800c818:	9303      	str	r3, [sp, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7ff fe33 	bl	800c488 <strncmp>
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	2800      	cmp	r0, #0
 800c826:	d1e1      	bne.n	800c7ec <__gethex+0x1d8>
 800c828:	e7a2      	b.n	800c770 <__gethex+0x15c>
 800c82a:	1ea9      	subs	r1, r5, #2
 800c82c:	4620      	mov	r0, r4
 800c82e:	f7fe fd68 	bl	800b302 <__any_on>
 800c832:	2800      	cmp	r0, #0
 800c834:	d0c2      	beq.n	800c7bc <__gethex+0x1a8>
 800c836:	f04f 0903 	mov.w	r9, #3
 800c83a:	e7c1      	b.n	800c7c0 <__gethex+0x1ac>
 800c83c:	da09      	bge.n	800c852 <__gethex+0x23e>
 800c83e:	1b75      	subs	r5, r6, r5
 800c840:	4621      	mov	r1, r4
 800c842:	9801      	ldr	r0, [sp, #4]
 800c844:	462a      	mov	r2, r5
 800c846:	f7fe fb23 	bl	800ae90 <__lshift>
 800c84a:	1b7f      	subs	r7, r7, r5
 800c84c:	4604      	mov	r4, r0
 800c84e:	f100 0a14 	add.w	sl, r0, #20
 800c852:	f04f 0900 	mov.w	r9, #0
 800c856:	e7b8      	b.n	800c7ca <__gethex+0x1b6>
 800c858:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c85c:	42bd      	cmp	r5, r7
 800c85e:	dd6f      	ble.n	800c940 <__gethex+0x32c>
 800c860:	1bed      	subs	r5, r5, r7
 800c862:	42ae      	cmp	r6, r5
 800c864:	dc34      	bgt.n	800c8d0 <__gethex+0x2bc>
 800c866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d022      	beq.n	800c8b4 <__gethex+0x2a0>
 800c86e:	2b03      	cmp	r3, #3
 800c870:	d024      	beq.n	800c8bc <__gethex+0x2a8>
 800c872:	2b01      	cmp	r3, #1
 800c874:	d115      	bne.n	800c8a2 <__gethex+0x28e>
 800c876:	42ae      	cmp	r6, r5
 800c878:	d113      	bne.n	800c8a2 <__gethex+0x28e>
 800c87a:	2e01      	cmp	r6, #1
 800c87c:	d10b      	bne.n	800c896 <__gethex+0x282>
 800c87e:	9a02      	ldr	r2, [sp, #8]
 800c880:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	2301      	movs	r3, #1
 800c888:	6123      	str	r3, [r4, #16]
 800c88a:	f8ca 3000 	str.w	r3, [sl]
 800c88e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c890:	2562      	movs	r5, #98	@ 0x62
 800c892:	601c      	str	r4, [r3, #0]
 800c894:	e73a      	b.n	800c70c <__gethex+0xf8>
 800c896:	1e71      	subs	r1, r6, #1
 800c898:	4620      	mov	r0, r4
 800c89a:	f7fe fd32 	bl	800b302 <__any_on>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d1ed      	bne.n	800c87e <__gethex+0x26a>
 800c8a2:	9801      	ldr	r0, [sp, #4]
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f7fe f8db 	bl	800aa60 <_Bfree>
 800c8aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	2550      	movs	r5, #80	@ 0x50
 800c8b2:	e72b      	b.n	800c70c <__gethex+0xf8>
 800c8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1f3      	bne.n	800c8a2 <__gethex+0x28e>
 800c8ba:	e7e0      	b.n	800c87e <__gethex+0x26a>
 800c8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1dd      	bne.n	800c87e <__gethex+0x26a>
 800c8c2:	e7ee      	b.n	800c8a2 <__gethex+0x28e>
 800c8c4:	0800e818 	.word	0x0800e818
 800c8c8:	0800e6ad 	.word	0x0800e6ad
 800c8cc:	0800e9c6 	.word	0x0800e9c6
 800c8d0:	1e6f      	subs	r7, r5, #1
 800c8d2:	f1b9 0f00 	cmp.w	r9, #0
 800c8d6:	d130      	bne.n	800c93a <__gethex+0x326>
 800c8d8:	b127      	cbz	r7, 800c8e4 <__gethex+0x2d0>
 800c8da:	4639      	mov	r1, r7
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f7fe fd10 	bl	800b302 <__any_on>
 800c8e2:	4681      	mov	r9, r0
 800c8e4:	117a      	asrs	r2, r7, #5
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c8ec:	f007 071f 	and.w	r7, r7, #31
 800c8f0:	40bb      	lsls	r3, r7
 800c8f2:	4213      	tst	r3, r2
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	bf18      	it	ne
 800c8fa:	f049 0902 	orrne.w	r9, r9, #2
 800c8fe:	f7ff fe21 	bl	800c544 <rshift>
 800c902:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c906:	1b76      	subs	r6, r6, r5
 800c908:	2502      	movs	r5, #2
 800c90a:	f1b9 0f00 	cmp.w	r9, #0
 800c90e:	d047      	beq.n	800c9a0 <__gethex+0x38c>
 800c910:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c914:	2b02      	cmp	r3, #2
 800c916:	d015      	beq.n	800c944 <__gethex+0x330>
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d017      	beq.n	800c94c <__gethex+0x338>
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d109      	bne.n	800c934 <__gethex+0x320>
 800c920:	f019 0f02 	tst.w	r9, #2
 800c924:	d006      	beq.n	800c934 <__gethex+0x320>
 800c926:	f8da 3000 	ldr.w	r3, [sl]
 800c92a:	ea49 0903 	orr.w	r9, r9, r3
 800c92e:	f019 0f01 	tst.w	r9, #1
 800c932:	d10e      	bne.n	800c952 <__gethex+0x33e>
 800c934:	f045 0510 	orr.w	r5, r5, #16
 800c938:	e032      	b.n	800c9a0 <__gethex+0x38c>
 800c93a:	f04f 0901 	mov.w	r9, #1
 800c93e:	e7d1      	b.n	800c8e4 <__gethex+0x2d0>
 800c940:	2501      	movs	r5, #1
 800c942:	e7e2      	b.n	800c90a <__gethex+0x2f6>
 800c944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c946:	f1c3 0301 	rsb	r3, r3, #1
 800c94a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0f0      	beq.n	800c934 <__gethex+0x320>
 800c952:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c956:	f104 0314 	add.w	r3, r4, #20
 800c95a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c95e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c962:	f04f 0c00 	mov.w	ip, #0
 800c966:	4618      	mov	r0, r3
 800c968:	f853 2b04 	ldr.w	r2, [r3], #4
 800c96c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c970:	d01b      	beq.n	800c9aa <__gethex+0x396>
 800c972:	3201      	adds	r2, #1
 800c974:	6002      	str	r2, [r0, #0]
 800c976:	2d02      	cmp	r5, #2
 800c978:	f104 0314 	add.w	r3, r4, #20
 800c97c:	d13c      	bne.n	800c9f8 <__gethex+0x3e4>
 800c97e:	f8d8 2000 	ldr.w	r2, [r8]
 800c982:	3a01      	subs	r2, #1
 800c984:	42b2      	cmp	r2, r6
 800c986:	d109      	bne.n	800c99c <__gethex+0x388>
 800c988:	1171      	asrs	r1, r6, #5
 800c98a:	2201      	movs	r2, #1
 800c98c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c990:	f006 061f 	and.w	r6, r6, #31
 800c994:	fa02 f606 	lsl.w	r6, r2, r6
 800c998:	421e      	tst	r6, r3
 800c99a:	d13a      	bne.n	800ca12 <__gethex+0x3fe>
 800c99c:	f045 0520 	orr.w	r5, r5, #32
 800c9a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9a2:	601c      	str	r4, [r3, #0]
 800c9a4:	9b02      	ldr	r3, [sp, #8]
 800c9a6:	601f      	str	r7, [r3, #0]
 800c9a8:	e6b0      	b.n	800c70c <__gethex+0xf8>
 800c9aa:	4299      	cmp	r1, r3
 800c9ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9b0:	d8d9      	bhi.n	800c966 <__gethex+0x352>
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	459b      	cmp	fp, r3
 800c9b6:	db17      	blt.n	800c9e8 <__gethex+0x3d4>
 800c9b8:	6861      	ldr	r1, [r4, #4]
 800c9ba:	9801      	ldr	r0, [sp, #4]
 800c9bc:	3101      	adds	r1, #1
 800c9be:	f7fe f80f 	bl	800a9e0 <_Balloc>
 800c9c2:	4681      	mov	r9, r0
 800c9c4:	b918      	cbnz	r0, 800c9ce <__gethex+0x3ba>
 800c9c6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca30 <__gethex+0x41c>)
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	2184      	movs	r1, #132	@ 0x84
 800c9cc:	e6c5      	b.n	800c75a <__gethex+0x146>
 800c9ce:	6922      	ldr	r2, [r4, #16]
 800c9d0:	3202      	adds	r2, #2
 800c9d2:	f104 010c 	add.w	r1, r4, #12
 800c9d6:	0092      	lsls	r2, r2, #2
 800c9d8:	300c      	adds	r0, #12
 800c9da:	f7fd f8a0 	bl	8009b1e <memcpy>
 800c9de:	4621      	mov	r1, r4
 800c9e0:	9801      	ldr	r0, [sp, #4]
 800c9e2:	f7fe f83d 	bl	800aa60 <_Bfree>
 800c9e6:	464c      	mov	r4, r9
 800c9e8:	6923      	ldr	r3, [r4, #16]
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9f0:	6122      	str	r2, [r4, #16]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	615a      	str	r2, [r3, #20]
 800c9f6:	e7be      	b.n	800c976 <__gethex+0x362>
 800c9f8:	6922      	ldr	r2, [r4, #16]
 800c9fa:	455a      	cmp	r2, fp
 800c9fc:	dd0b      	ble.n	800ca16 <__gethex+0x402>
 800c9fe:	2101      	movs	r1, #1
 800ca00:	4620      	mov	r0, r4
 800ca02:	f7ff fd9f 	bl	800c544 <rshift>
 800ca06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca0a:	3701      	adds	r7, #1
 800ca0c:	42bb      	cmp	r3, r7
 800ca0e:	f6ff aee0 	blt.w	800c7d2 <__gethex+0x1be>
 800ca12:	2501      	movs	r5, #1
 800ca14:	e7c2      	b.n	800c99c <__gethex+0x388>
 800ca16:	f016 061f 	ands.w	r6, r6, #31
 800ca1a:	d0fa      	beq.n	800ca12 <__gethex+0x3fe>
 800ca1c:	4453      	add	r3, sl
 800ca1e:	f1c6 0620 	rsb	r6, r6, #32
 800ca22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca26:	f7fe f8cd 	bl	800abc4 <__hi0bits>
 800ca2a:	42b0      	cmp	r0, r6
 800ca2c:	dbe7      	blt.n	800c9fe <__gethex+0x3ea>
 800ca2e:	e7f0      	b.n	800ca12 <__gethex+0x3fe>
 800ca30:	0800e6ad 	.word	0x0800e6ad

0800ca34 <L_shift>:
 800ca34:	f1c2 0208 	rsb	r2, r2, #8
 800ca38:	0092      	lsls	r2, r2, #2
 800ca3a:	b570      	push	{r4, r5, r6, lr}
 800ca3c:	f1c2 0620 	rsb	r6, r2, #32
 800ca40:	6843      	ldr	r3, [r0, #4]
 800ca42:	6804      	ldr	r4, [r0, #0]
 800ca44:	fa03 f506 	lsl.w	r5, r3, r6
 800ca48:	432c      	orrs	r4, r5
 800ca4a:	40d3      	lsrs	r3, r2
 800ca4c:	6004      	str	r4, [r0, #0]
 800ca4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca52:	4288      	cmp	r0, r1
 800ca54:	d3f4      	bcc.n	800ca40 <L_shift+0xc>
 800ca56:	bd70      	pop	{r4, r5, r6, pc}

0800ca58 <__match>:
 800ca58:	b530      	push	{r4, r5, lr}
 800ca5a:	6803      	ldr	r3, [r0, #0]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca62:	b914      	cbnz	r4, 800ca6a <__match+0x12>
 800ca64:	6003      	str	r3, [r0, #0]
 800ca66:	2001      	movs	r0, #1
 800ca68:	bd30      	pop	{r4, r5, pc}
 800ca6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ca72:	2d19      	cmp	r5, #25
 800ca74:	bf98      	it	ls
 800ca76:	3220      	addls	r2, #32
 800ca78:	42a2      	cmp	r2, r4
 800ca7a:	d0f0      	beq.n	800ca5e <__match+0x6>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e7f3      	b.n	800ca68 <__match+0x10>

0800ca80 <__hexnan>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	680b      	ldr	r3, [r1, #0]
 800ca86:	6801      	ldr	r1, [r0, #0]
 800ca88:	115e      	asrs	r6, r3, #5
 800ca8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca8e:	f013 031f 	ands.w	r3, r3, #31
 800ca92:	b087      	sub	sp, #28
 800ca94:	bf18      	it	ne
 800ca96:	3604      	addne	r6, #4
 800ca98:	2500      	movs	r5, #0
 800ca9a:	1f37      	subs	r7, r6, #4
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	4690      	mov	r8, r2
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	f846 5c04 	str.w	r5, [r6, #-4]
 800caa6:	46b9      	mov	r9, r7
 800caa8:	463c      	mov	r4, r7
 800caaa:	9502      	str	r5, [sp, #8]
 800caac:	46ab      	mov	fp, r5
 800caae:	784a      	ldrb	r2, [r1, #1]
 800cab0:	1c4b      	adds	r3, r1, #1
 800cab2:	9303      	str	r3, [sp, #12]
 800cab4:	b342      	cbz	r2, 800cb08 <__hexnan+0x88>
 800cab6:	4610      	mov	r0, r2
 800cab8:	9105      	str	r1, [sp, #20]
 800caba:	9204      	str	r2, [sp, #16]
 800cabc:	f7ff fd94 	bl	800c5e8 <__hexdig_fun>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d151      	bne.n	800cb68 <__hexnan+0xe8>
 800cac4:	9a04      	ldr	r2, [sp, #16]
 800cac6:	9905      	ldr	r1, [sp, #20]
 800cac8:	2a20      	cmp	r2, #32
 800caca:	d818      	bhi.n	800cafe <__hexnan+0x7e>
 800cacc:	9b02      	ldr	r3, [sp, #8]
 800cace:	459b      	cmp	fp, r3
 800cad0:	dd13      	ble.n	800cafa <__hexnan+0x7a>
 800cad2:	454c      	cmp	r4, r9
 800cad4:	d206      	bcs.n	800cae4 <__hexnan+0x64>
 800cad6:	2d07      	cmp	r5, #7
 800cad8:	dc04      	bgt.n	800cae4 <__hexnan+0x64>
 800cada:	462a      	mov	r2, r5
 800cadc:	4649      	mov	r1, r9
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff ffa8 	bl	800ca34 <L_shift>
 800cae4:	4544      	cmp	r4, r8
 800cae6:	d952      	bls.n	800cb8e <__hexnan+0x10e>
 800cae8:	2300      	movs	r3, #0
 800caea:	f1a4 0904 	sub.w	r9, r4, #4
 800caee:	f844 3c04 	str.w	r3, [r4, #-4]
 800caf2:	f8cd b008 	str.w	fp, [sp, #8]
 800caf6:	464c      	mov	r4, r9
 800caf8:	461d      	mov	r5, r3
 800cafa:	9903      	ldr	r1, [sp, #12]
 800cafc:	e7d7      	b.n	800caae <__hexnan+0x2e>
 800cafe:	2a29      	cmp	r2, #41	@ 0x29
 800cb00:	d157      	bne.n	800cbb2 <__hexnan+0x132>
 800cb02:	3102      	adds	r1, #2
 800cb04:	f8ca 1000 	str.w	r1, [sl]
 800cb08:	f1bb 0f00 	cmp.w	fp, #0
 800cb0c:	d051      	beq.n	800cbb2 <__hexnan+0x132>
 800cb0e:	454c      	cmp	r4, r9
 800cb10:	d206      	bcs.n	800cb20 <__hexnan+0xa0>
 800cb12:	2d07      	cmp	r5, #7
 800cb14:	dc04      	bgt.n	800cb20 <__hexnan+0xa0>
 800cb16:	462a      	mov	r2, r5
 800cb18:	4649      	mov	r1, r9
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f7ff ff8a 	bl	800ca34 <L_shift>
 800cb20:	4544      	cmp	r4, r8
 800cb22:	d936      	bls.n	800cb92 <__hexnan+0x112>
 800cb24:	f1a8 0204 	sub.w	r2, r8, #4
 800cb28:	4623      	mov	r3, r4
 800cb2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb32:	429f      	cmp	r7, r3
 800cb34:	d2f9      	bcs.n	800cb2a <__hexnan+0xaa>
 800cb36:	1b3b      	subs	r3, r7, r4
 800cb38:	f023 0303 	bic.w	r3, r3, #3
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	3401      	adds	r4, #1
 800cb40:	3e03      	subs	r6, #3
 800cb42:	42b4      	cmp	r4, r6
 800cb44:	bf88      	it	hi
 800cb46:	2304      	movhi	r3, #4
 800cb48:	4443      	add	r3, r8
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f843 2b04 	str.w	r2, [r3], #4
 800cb50:	429f      	cmp	r7, r3
 800cb52:	d2fb      	bcs.n	800cb4c <__hexnan+0xcc>
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	b91b      	cbnz	r3, 800cb60 <__hexnan+0xe0>
 800cb58:	4547      	cmp	r7, r8
 800cb5a:	d128      	bne.n	800cbae <__hexnan+0x12e>
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	603b      	str	r3, [r7, #0]
 800cb60:	2005      	movs	r0, #5
 800cb62:	b007      	add	sp, #28
 800cb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb68:	3501      	adds	r5, #1
 800cb6a:	2d08      	cmp	r5, #8
 800cb6c:	f10b 0b01 	add.w	fp, fp, #1
 800cb70:	dd06      	ble.n	800cb80 <__hexnan+0x100>
 800cb72:	4544      	cmp	r4, r8
 800cb74:	d9c1      	bls.n	800cafa <__hexnan+0x7a>
 800cb76:	2300      	movs	r3, #0
 800cb78:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb7c:	2501      	movs	r5, #1
 800cb7e:	3c04      	subs	r4, #4
 800cb80:	6822      	ldr	r2, [r4, #0]
 800cb82:	f000 000f 	and.w	r0, r0, #15
 800cb86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb8a:	6020      	str	r0, [r4, #0]
 800cb8c:	e7b5      	b.n	800cafa <__hexnan+0x7a>
 800cb8e:	2508      	movs	r5, #8
 800cb90:	e7b3      	b.n	800cafa <__hexnan+0x7a>
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0dd      	beq.n	800cb54 <__hexnan+0xd4>
 800cb98:	f1c3 0320 	rsb	r3, r3, #32
 800cb9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cba0:	40da      	lsrs	r2, r3
 800cba2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cba6:	4013      	ands	r3, r2
 800cba8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cbac:	e7d2      	b.n	800cb54 <__hexnan+0xd4>
 800cbae:	3f04      	subs	r7, #4
 800cbb0:	e7d0      	b.n	800cb54 <__hexnan+0xd4>
 800cbb2:	2004      	movs	r0, #4
 800cbb4:	e7d5      	b.n	800cb62 <__hexnan+0xe2>

0800cbb6 <__ascii_mbtowc>:
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	b901      	cbnz	r1, 800cbbc <__ascii_mbtowc+0x6>
 800cbba:	a901      	add	r1, sp, #4
 800cbbc:	b142      	cbz	r2, 800cbd0 <__ascii_mbtowc+0x1a>
 800cbbe:	b14b      	cbz	r3, 800cbd4 <__ascii_mbtowc+0x1e>
 800cbc0:	7813      	ldrb	r3, [r2, #0]
 800cbc2:	600b      	str	r3, [r1, #0]
 800cbc4:	7812      	ldrb	r2, [r2, #0]
 800cbc6:	1e10      	subs	r0, r2, #0
 800cbc8:	bf18      	it	ne
 800cbca:	2001      	movne	r0, #1
 800cbcc:	b002      	add	sp, #8
 800cbce:	4770      	bx	lr
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	e7fb      	b.n	800cbcc <__ascii_mbtowc+0x16>
 800cbd4:	f06f 0001 	mvn.w	r0, #1
 800cbd8:	e7f8      	b.n	800cbcc <__ascii_mbtowc+0x16>

0800cbda <_realloc_r>:
 800cbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbde:	4680      	mov	r8, r0
 800cbe0:	4615      	mov	r5, r2
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	b921      	cbnz	r1, 800cbf0 <_realloc_r+0x16>
 800cbe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbea:	4611      	mov	r1, r2
 800cbec:	f7fd be6c 	b.w	800a8c8 <_malloc_r>
 800cbf0:	b92a      	cbnz	r2, 800cbfe <_realloc_r+0x24>
 800cbf2:	f7fd fdf5 	bl	800a7e0 <_free_r>
 800cbf6:	2400      	movs	r4, #0
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbfe:	f000 f840 	bl	800cc82 <_malloc_usable_size_r>
 800cc02:	4285      	cmp	r5, r0
 800cc04:	4606      	mov	r6, r0
 800cc06:	d802      	bhi.n	800cc0e <_realloc_r+0x34>
 800cc08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cc0c:	d8f4      	bhi.n	800cbf8 <_realloc_r+0x1e>
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4640      	mov	r0, r8
 800cc12:	f7fd fe59 	bl	800a8c8 <_malloc_r>
 800cc16:	4607      	mov	r7, r0
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d0ec      	beq.n	800cbf6 <_realloc_r+0x1c>
 800cc1c:	42b5      	cmp	r5, r6
 800cc1e:	462a      	mov	r2, r5
 800cc20:	4621      	mov	r1, r4
 800cc22:	bf28      	it	cs
 800cc24:	4632      	movcs	r2, r6
 800cc26:	f7fc ff7a 	bl	8009b1e <memcpy>
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	f7fd fdd7 	bl	800a7e0 <_free_r>
 800cc32:	463c      	mov	r4, r7
 800cc34:	e7e0      	b.n	800cbf8 <_realloc_r+0x1e>

0800cc36 <__ascii_wctomb>:
 800cc36:	4603      	mov	r3, r0
 800cc38:	4608      	mov	r0, r1
 800cc3a:	b141      	cbz	r1, 800cc4e <__ascii_wctomb+0x18>
 800cc3c:	2aff      	cmp	r2, #255	@ 0xff
 800cc3e:	d904      	bls.n	800cc4a <__ascii_wctomb+0x14>
 800cc40:	228a      	movs	r2, #138	@ 0x8a
 800cc42:	601a      	str	r2, [r3, #0]
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc48:	4770      	bx	lr
 800cc4a:	700a      	strb	r2, [r1, #0]
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	4770      	bx	lr

0800cc50 <fiprintf>:
 800cc50:	b40e      	push	{r1, r2, r3}
 800cc52:	b503      	push	{r0, r1, lr}
 800cc54:	4601      	mov	r1, r0
 800cc56:	ab03      	add	r3, sp, #12
 800cc58:	4805      	ldr	r0, [pc, #20]	@ (800cc70 <fiprintf+0x20>)
 800cc5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5e:	6800      	ldr	r0, [r0, #0]
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	f000 f83f 	bl	800cce4 <_vfiprintf_r>
 800cc66:	b002      	add	sp, #8
 800cc68:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc6c:	b003      	add	sp, #12
 800cc6e:	4770      	bx	lr
 800cc70:	20000048 	.word	0x20000048

0800cc74 <abort>:
 800cc74:	b508      	push	{r3, lr}
 800cc76:	2006      	movs	r0, #6
 800cc78:	f000 fa08 	bl	800d08c <raise>
 800cc7c:	2001      	movs	r0, #1
 800cc7e:	f7f7 fae0 	bl	8004242 <_exit>

0800cc82 <_malloc_usable_size_r>:
 800cc82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc86:	1f18      	subs	r0, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bfbc      	itt	lt
 800cc8c:	580b      	ldrlt	r3, [r1, r0]
 800cc8e:	18c0      	addlt	r0, r0, r3
 800cc90:	4770      	bx	lr

0800cc92 <__sfputc_r>:
 800cc92:	6893      	ldr	r3, [r2, #8]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	b410      	push	{r4}
 800cc9a:	6093      	str	r3, [r2, #8]
 800cc9c:	da08      	bge.n	800ccb0 <__sfputc_r+0x1e>
 800cc9e:	6994      	ldr	r4, [r2, #24]
 800cca0:	42a3      	cmp	r3, r4
 800cca2:	db01      	blt.n	800cca8 <__sfputc_r+0x16>
 800cca4:	290a      	cmp	r1, #10
 800cca6:	d103      	bne.n	800ccb0 <__sfputc_r+0x1e>
 800cca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccac:	f000 b932 	b.w	800cf14 <__swbuf_r>
 800ccb0:	6813      	ldr	r3, [r2, #0]
 800ccb2:	1c58      	adds	r0, r3, #1
 800ccb4:	6010      	str	r0, [r2, #0]
 800ccb6:	7019      	strb	r1, [r3, #0]
 800ccb8:	4608      	mov	r0, r1
 800ccba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <__sfputs_r>:
 800ccc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	460f      	mov	r7, r1
 800ccc6:	4614      	mov	r4, r2
 800ccc8:	18d5      	adds	r5, r2, r3
 800ccca:	42ac      	cmp	r4, r5
 800cccc:	d101      	bne.n	800ccd2 <__sfputs_r+0x12>
 800ccce:	2000      	movs	r0, #0
 800ccd0:	e007      	b.n	800cce2 <__sfputs_r+0x22>
 800ccd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd6:	463a      	mov	r2, r7
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f7ff ffda 	bl	800cc92 <__sfputc_r>
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	d1f3      	bne.n	800ccca <__sfputs_r+0xa>
 800cce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cce4 <_vfiprintf_r>:
 800cce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce8:	460d      	mov	r5, r1
 800ccea:	b09d      	sub	sp, #116	@ 0x74
 800ccec:	4614      	mov	r4, r2
 800ccee:	4698      	mov	r8, r3
 800ccf0:	4606      	mov	r6, r0
 800ccf2:	b118      	cbz	r0, 800ccfc <_vfiprintf_r+0x18>
 800ccf4:	6a03      	ldr	r3, [r0, #32]
 800ccf6:	b90b      	cbnz	r3, 800ccfc <_vfiprintf_r+0x18>
 800ccf8:	f7fc fdc4 	bl	8009884 <__sinit>
 800ccfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccfe:	07d9      	lsls	r1, r3, #31
 800cd00:	d405      	bmi.n	800cd0e <_vfiprintf_r+0x2a>
 800cd02:	89ab      	ldrh	r3, [r5, #12]
 800cd04:	059a      	lsls	r2, r3, #22
 800cd06:	d402      	bmi.n	800cd0e <_vfiprintf_r+0x2a>
 800cd08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd0a:	f7fc ff06 	bl	8009b1a <__retarget_lock_acquire_recursive>
 800cd0e:	89ab      	ldrh	r3, [r5, #12]
 800cd10:	071b      	lsls	r3, r3, #28
 800cd12:	d501      	bpl.n	800cd18 <_vfiprintf_r+0x34>
 800cd14:	692b      	ldr	r3, [r5, #16]
 800cd16:	b99b      	cbnz	r3, 800cd40 <_vfiprintf_r+0x5c>
 800cd18:	4629      	mov	r1, r5
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	f000 f938 	bl	800cf90 <__swsetup_r>
 800cd20:	b170      	cbz	r0, 800cd40 <_vfiprintf_r+0x5c>
 800cd22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd24:	07dc      	lsls	r4, r3, #31
 800cd26:	d504      	bpl.n	800cd32 <_vfiprintf_r+0x4e>
 800cd28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd2c:	b01d      	add	sp, #116	@ 0x74
 800cd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd32:	89ab      	ldrh	r3, [r5, #12]
 800cd34:	0598      	lsls	r0, r3, #22
 800cd36:	d4f7      	bmi.n	800cd28 <_vfiprintf_r+0x44>
 800cd38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd3a:	f7fc feef 	bl	8009b1c <__retarget_lock_release_recursive>
 800cd3e:	e7f3      	b.n	800cd28 <_vfiprintf_r+0x44>
 800cd40:	2300      	movs	r3, #0
 800cd42:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd44:	2320      	movs	r3, #32
 800cd46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd4e:	2330      	movs	r3, #48	@ 0x30
 800cd50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf00 <_vfiprintf_r+0x21c>
 800cd54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd58:	f04f 0901 	mov.w	r9, #1
 800cd5c:	4623      	mov	r3, r4
 800cd5e:	469a      	mov	sl, r3
 800cd60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd64:	b10a      	cbz	r2, 800cd6a <_vfiprintf_r+0x86>
 800cd66:	2a25      	cmp	r2, #37	@ 0x25
 800cd68:	d1f9      	bne.n	800cd5e <_vfiprintf_r+0x7a>
 800cd6a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd6e:	d00b      	beq.n	800cd88 <_vfiprintf_r+0xa4>
 800cd70:	465b      	mov	r3, fp
 800cd72:	4622      	mov	r2, r4
 800cd74:	4629      	mov	r1, r5
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7ff ffa2 	bl	800ccc0 <__sfputs_r>
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	f000 80a7 	beq.w	800ced0 <_vfiprintf_r+0x1ec>
 800cd82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd84:	445a      	add	r2, fp
 800cd86:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd88:	f89a 3000 	ldrb.w	r3, [sl]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 809f 	beq.w	800ced0 <_vfiprintf_r+0x1ec>
 800cd92:	2300      	movs	r3, #0
 800cd94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd9c:	f10a 0a01 	add.w	sl, sl, #1
 800cda0:	9304      	str	r3, [sp, #16]
 800cda2:	9307      	str	r3, [sp, #28]
 800cda4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cda8:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdaa:	4654      	mov	r4, sl
 800cdac:	2205      	movs	r2, #5
 800cdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb2:	4853      	ldr	r0, [pc, #332]	@ (800cf00 <_vfiprintf_r+0x21c>)
 800cdb4:	f7f3 fa34 	bl	8000220 <memchr>
 800cdb8:	9a04      	ldr	r2, [sp, #16]
 800cdba:	b9d8      	cbnz	r0, 800cdf4 <_vfiprintf_r+0x110>
 800cdbc:	06d1      	lsls	r1, r2, #27
 800cdbe:	bf44      	itt	mi
 800cdc0:	2320      	movmi	r3, #32
 800cdc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdc6:	0713      	lsls	r3, r2, #28
 800cdc8:	bf44      	itt	mi
 800cdca:	232b      	movmi	r3, #43	@ 0x2b
 800cdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdd0:	f89a 3000 	ldrb.w	r3, [sl]
 800cdd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdd6:	d015      	beq.n	800ce04 <_vfiprintf_r+0x120>
 800cdd8:	9a07      	ldr	r2, [sp, #28]
 800cdda:	4654      	mov	r4, sl
 800cddc:	2000      	movs	r0, #0
 800cdde:	f04f 0c0a 	mov.w	ip, #10
 800cde2:	4621      	mov	r1, r4
 800cde4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cde8:	3b30      	subs	r3, #48	@ 0x30
 800cdea:	2b09      	cmp	r3, #9
 800cdec:	d94b      	bls.n	800ce86 <_vfiprintf_r+0x1a2>
 800cdee:	b1b0      	cbz	r0, 800ce1e <_vfiprintf_r+0x13a>
 800cdf0:	9207      	str	r2, [sp, #28]
 800cdf2:	e014      	b.n	800ce1e <_vfiprintf_r+0x13a>
 800cdf4:	eba0 0308 	sub.w	r3, r0, r8
 800cdf8:	fa09 f303 	lsl.w	r3, r9, r3
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	9304      	str	r3, [sp, #16]
 800ce00:	46a2      	mov	sl, r4
 800ce02:	e7d2      	b.n	800cdaa <_vfiprintf_r+0xc6>
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	1d19      	adds	r1, r3, #4
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	9103      	str	r1, [sp, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	bfbb      	ittet	lt
 800ce10:	425b      	neglt	r3, r3
 800ce12:	f042 0202 	orrlt.w	r2, r2, #2
 800ce16:	9307      	strge	r3, [sp, #28]
 800ce18:	9307      	strlt	r3, [sp, #28]
 800ce1a:	bfb8      	it	lt
 800ce1c:	9204      	strlt	r2, [sp, #16]
 800ce1e:	7823      	ldrb	r3, [r4, #0]
 800ce20:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce22:	d10a      	bne.n	800ce3a <_vfiprintf_r+0x156>
 800ce24:	7863      	ldrb	r3, [r4, #1]
 800ce26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce28:	d132      	bne.n	800ce90 <_vfiprintf_r+0x1ac>
 800ce2a:	9b03      	ldr	r3, [sp, #12]
 800ce2c:	1d1a      	adds	r2, r3, #4
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	9203      	str	r2, [sp, #12]
 800ce32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce36:	3402      	adds	r4, #2
 800ce38:	9305      	str	r3, [sp, #20]
 800ce3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf10 <_vfiprintf_r+0x22c>
 800ce3e:	7821      	ldrb	r1, [r4, #0]
 800ce40:	2203      	movs	r2, #3
 800ce42:	4650      	mov	r0, sl
 800ce44:	f7f3 f9ec 	bl	8000220 <memchr>
 800ce48:	b138      	cbz	r0, 800ce5a <_vfiprintf_r+0x176>
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	eba0 000a 	sub.w	r0, r0, sl
 800ce50:	2240      	movs	r2, #64	@ 0x40
 800ce52:	4082      	lsls	r2, r0
 800ce54:	4313      	orrs	r3, r2
 800ce56:	3401      	adds	r4, #1
 800ce58:	9304      	str	r3, [sp, #16]
 800ce5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce5e:	4829      	ldr	r0, [pc, #164]	@ (800cf04 <_vfiprintf_r+0x220>)
 800ce60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce64:	2206      	movs	r2, #6
 800ce66:	f7f3 f9db 	bl	8000220 <memchr>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d03f      	beq.n	800ceee <_vfiprintf_r+0x20a>
 800ce6e:	4b26      	ldr	r3, [pc, #152]	@ (800cf08 <_vfiprintf_r+0x224>)
 800ce70:	bb1b      	cbnz	r3, 800ceba <_vfiprintf_r+0x1d6>
 800ce72:	9b03      	ldr	r3, [sp, #12]
 800ce74:	3307      	adds	r3, #7
 800ce76:	f023 0307 	bic.w	r3, r3, #7
 800ce7a:	3308      	adds	r3, #8
 800ce7c:	9303      	str	r3, [sp, #12]
 800ce7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce80:	443b      	add	r3, r7
 800ce82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce84:	e76a      	b.n	800cd5c <_vfiprintf_r+0x78>
 800ce86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	2001      	movs	r0, #1
 800ce8e:	e7a8      	b.n	800cde2 <_vfiprintf_r+0xfe>
 800ce90:	2300      	movs	r3, #0
 800ce92:	3401      	adds	r4, #1
 800ce94:	9305      	str	r3, [sp, #20]
 800ce96:	4619      	mov	r1, r3
 800ce98:	f04f 0c0a 	mov.w	ip, #10
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cea2:	3a30      	subs	r2, #48	@ 0x30
 800cea4:	2a09      	cmp	r2, #9
 800cea6:	d903      	bls.n	800ceb0 <_vfiprintf_r+0x1cc>
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0c6      	beq.n	800ce3a <_vfiprintf_r+0x156>
 800ceac:	9105      	str	r1, [sp, #20]
 800ceae:	e7c4      	b.n	800ce3a <_vfiprintf_r+0x156>
 800ceb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e7f0      	b.n	800ce9c <_vfiprintf_r+0x1b8>
 800ceba:	ab03      	add	r3, sp, #12
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	462a      	mov	r2, r5
 800cec0:	4b12      	ldr	r3, [pc, #72]	@ (800cf0c <_vfiprintf_r+0x228>)
 800cec2:	a904      	add	r1, sp, #16
 800cec4:	4630      	mov	r0, r6
 800cec6:	f7fb fe85 	bl	8008bd4 <_printf_float>
 800ceca:	4607      	mov	r7, r0
 800cecc:	1c78      	adds	r0, r7, #1
 800cece:	d1d6      	bne.n	800ce7e <_vfiprintf_r+0x19a>
 800ced0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ced2:	07d9      	lsls	r1, r3, #31
 800ced4:	d405      	bmi.n	800cee2 <_vfiprintf_r+0x1fe>
 800ced6:	89ab      	ldrh	r3, [r5, #12]
 800ced8:	059a      	lsls	r2, r3, #22
 800ceda:	d402      	bmi.n	800cee2 <_vfiprintf_r+0x1fe>
 800cedc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cede:	f7fc fe1d 	bl	8009b1c <__retarget_lock_release_recursive>
 800cee2:	89ab      	ldrh	r3, [r5, #12]
 800cee4:	065b      	lsls	r3, r3, #25
 800cee6:	f53f af1f 	bmi.w	800cd28 <_vfiprintf_r+0x44>
 800ceea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ceec:	e71e      	b.n	800cd2c <_vfiprintf_r+0x48>
 800ceee:	ab03      	add	r3, sp, #12
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	462a      	mov	r2, r5
 800cef4:	4b05      	ldr	r3, [pc, #20]	@ (800cf0c <_vfiprintf_r+0x228>)
 800cef6:	a904      	add	r1, sp, #16
 800cef8:	4630      	mov	r0, r6
 800cefa:	f7fc f903 	bl	8009104 <_printf_i>
 800cefe:	e7e4      	b.n	800ceca <_vfiprintf_r+0x1e6>
 800cf00:	0800e971 	.word	0x0800e971
 800cf04:	0800e97b 	.word	0x0800e97b
 800cf08:	08008bd5 	.word	0x08008bd5
 800cf0c:	0800ccc1 	.word	0x0800ccc1
 800cf10:	0800e977 	.word	0x0800e977

0800cf14 <__swbuf_r>:
 800cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf16:	460e      	mov	r6, r1
 800cf18:	4614      	mov	r4, r2
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	b118      	cbz	r0, 800cf26 <__swbuf_r+0x12>
 800cf1e:	6a03      	ldr	r3, [r0, #32]
 800cf20:	b90b      	cbnz	r3, 800cf26 <__swbuf_r+0x12>
 800cf22:	f7fc fcaf 	bl	8009884 <__sinit>
 800cf26:	69a3      	ldr	r3, [r4, #24]
 800cf28:	60a3      	str	r3, [r4, #8]
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	071a      	lsls	r2, r3, #28
 800cf2e:	d501      	bpl.n	800cf34 <__swbuf_r+0x20>
 800cf30:	6923      	ldr	r3, [r4, #16]
 800cf32:	b943      	cbnz	r3, 800cf46 <__swbuf_r+0x32>
 800cf34:	4621      	mov	r1, r4
 800cf36:	4628      	mov	r0, r5
 800cf38:	f000 f82a 	bl	800cf90 <__swsetup_r>
 800cf3c:	b118      	cbz	r0, 800cf46 <__swbuf_r+0x32>
 800cf3e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cf42:	4638      	mov	r0, r7
 800cf44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	6922      	ldr	r2, [r4, #16]
 800cf4a:	1a98      	subs	r0, r3, r2
 800cf4c:	6963      	ldr	r3, [r4, #20]
 800cf4e:	b2f6      	uxtb	r6, r6
 800cf50:	4283      	cmp	r3, r0
 800cf52:	4637      	mov	r7, r6
 800cf54:	dc05      	bgt.n	800cf62 <__swbuf_r+0x4e>
 800cf56:	4621      	mov	r1, r4
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f7ff fa53 	bl	800c404 <_fflush_r>
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	d1ed      	bne.n	800cf3e <__swbuf_r+0x2a>
 800cf62:	68a3      	ldr	r3, [r4, #8]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	60a3      	str	r3, [r4, #8]
 800cf68:	6823      	ldr	r3, [r4, #0]
 800cf6a:	1c5a      	adds	r2, r3, #1
 800cf6c:	6022      	str	r2, [r4, #0]
 800cf6e:	701e      	strb	r6, [r3, #0]
 800cf70:	6962      	ldr	r2, [r4, #20]
 800cf72:	1c43      	adds	r3, r0, #1
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d004      	beq.n	800cf82 <__swbuf_r+0x6e>
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	07db      	lsls	r3, r3, #31
 800cf7c:	d5e1      	bpl.n	800cf42 <__swbuf_r+0x2e>
 800cf7e:	2e0a      	cmp	r6, #10
 800cf80:	d1df      	bne.n	800cf42 <__swbuf_r+0x2e>
 800cf82:	4621      	mov	r1, r4
 800cf84:	4628      	mov	r0, r5
 800cf86:	f7ff fa3d 	bl	800c404 <_fflush_r>
 800cf8a:	2800      	cmp	r0, #0
 800cf8c:	d0d9      	beq.n	800cf42 <__swbuf_r+0x2e>
 800cf8e:	e7d6      	b.n	800cf3e <__swbuf_r+0x2a>

0800cf90 <__swsetup_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4b29      	ldr	r3, [pc, #164]	@ (800d038 <__swsetup_r+0xa8>)
 800cf94:	4605      	mov	r5, r0
 800cf96:	6818      	ldr	r0, [r3, #0]
 800cf98:	460c      	mov	r4, r1
 800cf9a:	b118      	cbz	r0, 800cfa4 <__swsetup_r+0x14>
 800cf9c:	6a03      	ldr	r3, [r0, #32]
 800cf9e:	b90b      	cbnz	r3, 800cfa4 <__swsetup_r+0x14>
 800cfa0:	f7fc fc70 	bl	8009884 <__sinit>
 800cfa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa8:	0719      	lsls	r1, r3, #28
 800cfaa:	d422      	bmi.n	800cff2 <__swsetup_r+0x62>
 800cfac:	06da      	lsls	r2, r3, #27
 800cfae:	d407      	bmi.n	800cfc0 <__swsetup_r+0x30>
 800cfb0:	2209      	movs	r2, #9
 800cfb2:	602a      	str	r2, [r5, #0]
 800cfb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfb8:	81a3      	strh	r3, [r4, #12]
 800cfba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfbe:	e033      	b.n	800d028 <__swsetup_r+0x98>
 800cfc0:	0758      	lsls	r0, r3, #29
 800cfc2:	d512      	bpl.n	800cfea <__swsetup_r+0x5a>
 800cfc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfc6:	b141      	cbz	r1, 800cfda <__swsetup_r+0x4a>
 800cfc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfcc:	4299      	cmp	r1, r3
 800cfce:	d002      	beq.n	800cfd6 <__swsetup_r+0x46>
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f7fd fc05 	bl	800a7e0 <_free_r>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfda:	89a3      	ldrh	r3, [r4, #12]
 800cfdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cfe0:	81a3      	strh	r3, [r4, #12]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	6063      	str	r3, [r4, #4]
 800cfe6:	6923      	ldr	r3, [r4, #16]
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	89a3      	ldrh	r3, [r4, #12]
 800cfec:	f043 0308 	orr.w	r3, r3, #8
 800cff0:	81a3      	strh	r3, [r4, #12]
 800cff2:	6923      	ldr	r3, [r4, #16]
 800cff4:	b94b      	cbnz	r3, 800d00a <__swsetup_r+0x7a>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d000:	d003      	beq.n	800d00a <__swsetup_r+0x7a>
 800d002:	4621      	mov	r1, r4
 800d004:	4628      	mov	r0, r5
 800d006:	f000 f883 	bl	800d110 <__smakebuf_r>
 800d00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d00e:	f013 0201 	ands.w	r2, r3, #1
 800d012:	d00a      	beq.n	800d02a <__swsetup_r+0x9a>
 800d014:	2200      	movs	r2, #0
 800d016:	60a2      	str	r2, [r4, #8]
 800d018:	6962      	ldr	r2, [r4, #20]
 800d01a:	4252      	negs	r2, r2
 800d01c:	61a2      	str	r2, [r4, #24]
 800d01e:	6922      	ldr	r2, [r4, #16]
 800d020:	b942      	cbnz	r2, 800d034 <__swsetup_r+0xa4>
 800d022:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d026:	d1c5      	bne.n	800cfb4 <__swsetup_r+0x24>
 800d028:	bd38      	pop	{r3, r4, r5, pc}
 800d02a:	0799      	lsls	r1, r3, #30
 800d02c:	bf58      	it	pl
 800d02e:	6962      	ldrpl	r2, [r4, #20]
 800d030:	60a2      	str	r2, [r4, #8]
 800d032:	e7f4      	b.n	800d01e <__swsetup_r+0x8e>
 800d034:	2000      	movs	r0, #0
 800d036:	e7f7      	b.n	800d028 <__swsetup_r+0x98>
 800d038:	20000048 	.word	0x20000048

0800d03c <_raise_r>:
 800d03c:	291f      	cmp	r1, #31
 800d03e:	b538      	push	{r3, r4, r5, lr}
 800d040:	4605      	mov	r5, r0
 800d042:	460c      	mov	r4, r1
 800d044:	d904      	bls.n	800d050 <_raise_r+0x14>
 800d046:	2316      	movs	r3, #22
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d052:	b112      	cbz	r2, 800d05a <_raise_r+0x1e>
 800d054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d058:	b94b      	cbnz	r3, 800d06e <_raise_r+0x32>
 800d05a:	4628      	mov	r0, r5
 800d05c:	f000 f830 	bl	800d0c0 <_getpid_r>
 800d060:	4622      	mov	r2, r4
 800d062:	4601      	mov	r1, r0
 800d064:	4628      	mov	r0, r5
 800d066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d06a:	f000 b817 	b.w	800d09c <_kill_r>
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d00a      	beq.n	800d088 <_raise_r+0x4c>
 800d072:	1c59      	adds	r1, r3, #1
 800d074:	d103      	bne.n	800d07e <_raise_r+0x42>
 800d076:	2316      	movs	r3, #22
 800d078:	6003      	str	r3, [r0, #0]
 800d07a:	2001      	movs	r0, #1
 800d07c:	e7e7      	b.n	800d04e <_raise_r+0x12>
 800d07e:	2100      	movs	r1, #0
 800d080:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d084:	4620      	mov	r0, r4
 800d086:	4798      	blx	r3
 800d088:	2000      	movs	r0, #0
 800d08a:	e7e0      	b.n	800d04e <_raise_r+0x12>

0800d08c <raise>:
 800d08c:	4b02      	ldr	r3, [pc, #8]	@ (800d098 <raise+0xc>)
 800d08e:	4601      	mov	r1, r0
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	f7ff bfd3 	b.w	800d03c <_raise_r>
 800d096:	bf00      	nop
 800d098:	20000048 	.word	0x20000048

0800d09c <_kill_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	4d07      	ldr	r5, [pc, #28]	@ (800d0bc <_kill_r+0x20>)
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	4608      	mov	r0, r1
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	602b      	str	r3, [r5, #0]
 800d0aa:	f7f7 f8ba 	bl	8004222 <_kill>
 800d0ae:	1c43      	adds	r3, r0, #1
 800d0b0:	d102      	bne.n	800d0b8 <_kill_r+0x1c>
 800d0b2:	682b      	ldr	r3, [r5, #0]
 800d0b4:	b103      	cbz	r3, 800d0b8 <_kill_r+0x1c>
 800d0b6:	6023      	str	r3, [r4, #0]
 800d0b8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ba:	bf00      	nop
 800d0bc:	200008b0 	.word	0x200008b0

0800d0c0 <_getpid_r>:
 800d0c0:	f7f7 b8a7 	b.w	8004212 <_getpid>

0800d0c4 <__swhatbuf_r>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0cc:	2900      	cmp	r1, #0
 800d0ce:	b096      	sub	sp, #88	@ 0x58
 800d0d0:	4615      	mov	r5, r2
 800d0d2:	461e      	mov	r6, r3
 800d0d4:	da0d      	bge.n	800d0f2 <__swhatbuf_r+0x2e>
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0dc:	f04f 0100 	mov.w	r1, #0
 800d0e0:	bf14      	ite	ne
 800d0e2:	2340      	movne	r3, #64	@ 0x40
 800d0e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	6031      	str	r1, [r6, #0]
 800d0ec:	602b      	str	r3, [r5, #0]
 800d0ee:	b016      	add	sp, #88	@ 0x58
 800d0f0:	bd70      	pop	{r4, r5, r6, pc}
 800d0f2:	466a      	mov	r2, sp
 800d0f4:	f000 f848 	bl	800d188 <_fstat_r>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	dbec      	blt.n	800d0d6 <__swhatbuf_r+0x12>
 800d0fc:	9901      	ldr	r1, [sp, #4]
 800d0fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d106:	4259      	negs	r1, r3
 800d108:	4159      	adcs	r1, r3
 800d10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d10e:	e7eb      	b.n	800d0e8 <__swhatbuf_r+0x24>

0800d110 <__smakebuf_r>:
 800d110:	898b      	ldrh	r3, [r1, #12]
 800d112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d114:	079d      	lsls	r5, r3, #30
 800d116:	4606      	mov	r6, r0
 800d118:	460c      	mov	r4, r1
 800d11a:	d507      	bpl.n	800d12c <__smakebuf_r+0x1c>
 800d11c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	2301      	movs	r3, #1
 800d126:	6163      	str	r3, [r4, #20]
 800d128:	b003      	add	sp, #12
 800d12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d12c:	ab01      	add	r3, sp, #4
 800d12e:	466a      	mov	r2, sp
 800d130:	f7ff ffc8 	bl	800d0c4 <__swhatbuf_r>
 800d134:	9f00      	ldr	r7, [sp, #0]
 800d136:	4605      	mov	r5, r0
 800d138:	4639      	mov	r1, r7
 800d13a:	4630      	mov	r0, r6
 800d13c:	f7fd fbc4 	bl	800a8c8 <_malloc_r>
 800d140:	b948      	cbnz	r0, 800d156 <__smakebuf_r+0x46>
 800d142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d146:	059a      	lsls	r2, r3, #22
 800d148:	d4ee      	bmi.n	800d128 <__smakebuf_r+0x18>
 800d14a:	f023 0303 	bic.w	r3, r3, #3
 800d14e:	f043 0302 	orr.w	r3, r3, #2
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	e7e2      	b.n	800d11c <__smakebuf_r+0xc>
 800d156:	89a3      	ldrh	r3, [r4, #12]
 800d158:	6020      	str	r0, [r4, #0]
 800d15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d15e:	81a3      	strh	r3, [r4, #12]
 800d160:	9b01      	ldr	r3, [sp, #4]
 800d162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d166:	b15b      	cbz	r3, 800d180 <__smakebuf_r+0x70>
 800d168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d16c:	4630      	mov	r0, r6
 800d16e:	f000 f81d 	bl	800d1ac <_isatty_r>
 800d172:	b128      	cbz	r0, 800d180 <__smakebuf_r+0x70>
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	f023 0303 	bic.w	r3, r3, #3
 800d17a:	f043 0301 	orr.w	r3, r3, #1
 800d17e:	81a3      	strh	r3, [r4, #12]
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	431d      	orrs	r5, r3
 800d184:	81a5      	strh	r5, [r4, #12]
 800d186:	e7cf      	b.n	800d128 <__smakebuf_r+0x18>

0800d188 <_fstat_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4d07      	ldr	r5, [pc, #28]	@ (800d1a8 <_fstat_r+0x20>)
 800d18c:	2300      	movs	r3, #0
 800d18e:	4604      	mov	r4, r0
 800d190:	4608      	mov	r0, r1
 800d192:	4611      	mov	r1, r2
 800d194:	602b      	str	r3, [r5, #0]
 800d196:	f7f7 f8a4 	bl	80042e2 <_fstat>
 800d19a:	1c43      	adds	r3, r0, #1
 800d19c:	d102      	bne.n	800d1a4 <_fstat_r+0x1c>
 800d19e:	682b      	ldr	r3, [r5, #0]
 800d1a0:	b103      	cbz	r3, 800d1a4 <_fstat_r+0x1c>
 800d1a2:	6023      	str	r3, [r4, #0]
 800d1a4:	bd38      	pop	{r3, r4, r5, pc}
 800d1a6:	bf00      	nop
 800d1a8:	200008b0 	.word	0x200008b0

0800d1ac <_isatty_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d06      	ldr	r5, [pc, #24]	@ (800d1c8 <_isatty_r+0x1c>)
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	4608      	mov	r0, r1
 800d1b6:	602b      	str	r3, [r5, #0]
 800d1b8:	f7f7 f8a3 	bl	8004302 <_isatty>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_isatty_r+0x1a>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_isatty_r+0x1a>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	200008b0 	.word	0x200008b0
 800d1cc:	00000000 	.word	0x00000000

0800d1d0 <cos>:
 800d1d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1d2:	ec53 2b10 	vmov	r2, r3, d0
 800d1d6:	4826      	ldr	r0, [pc, #152]	@ (800d270 <cos+0xa0>)
 800d1d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d1dc:	4281      	cmp	r1, r0
 800d1de:	d806      	bhi.n	800d1ee <cos+0x1e>
 800d1e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d268 <cos+0x98>
 800d1e4:	b005      	add	sp, #20
 800d1e6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1ea:	f000 b899 	b.w	800d320 <__kernel_cos>
 800d1ee:	4821      	ldr	r0, [pc, #132]	@ (800d274 <cos+0xa4>)
 800d1f0:	4281      	cmp	r1, r0
 800d1f2:	d908      	bls.n	800d206 <cos+0x36>
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	f7f3 f86e 	bl	80002d8 <__aeabi_dsub>
 800d1fc:	ec41 0b10 	vmov	d0, r0, r1
 800d200:	b005      	add	sp, #20
 800d202:	f85d fb04 	ldr.w	pc, [sp], #4
 800d206:	4668      	mov	r0, sp
 800d208:	f000 fa0e 	bl	800d628 <__ieee754_rem_pio2>
 800d20c:	f000 0003 	and.w	r0, r0, #3
 800d210:	2801      	cmp	r0, #1
 800d212:	d00b      	beq.n	800d22c <cos+0x5c>
 800d214:	2802      	cmp	r0, #2
 800d216:	d015      	beq.n	800d244 <cos+0x74>
 800d218:	b9d8      	cbnz	r0, 800d252 <cos+0x82>
 800d21a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d21e:	ed9d 0b00 	vldr	d0, [sp]
 800d222:	f000 f87d 	bl	800d320 <__kernel_cos>
 800d226:	ec51 0b10 	vmov	r0, r1, d0
 800d22a:	e7e7      	b.n	800d1fc <cos+0x2c>
 800d22c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d230:	ed9d 0b00 	vldr	d0, [sp]
 800d234:	f000 f93c 	bl	800d4b0 <__kernel_sin>
 800d238:	ec53 2b10 	vmov	r2, r3, d0
 800d23c:	4610      	mov	r0, r2
 800d23e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d242:	e7db      	b.n	800d1fc <cos+0x2c>
 800d244:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d248:	ed9d 0b00 	vldr	d0, [sp]
 800d24c:	f000 f868 	bl	800d320 <__kernel_cos>
 800d250:	e7f2      	b.n	800d238 <cos+0x68>
 800d252:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d256:	ed9d 0b00 	vldr	d0, [sp]
 800d25a:	2001      	movs	r0, #1
 800d25c:	f000 f928 	bl	800d4b0 <__kernel_sin>
 800d260:	e7e1      	b.n	800d226 <cos+0x56>
 800d262:	bf00      	nop
 800d264:	f3af 8000 	nop.w
	...
 800d270:	3fe921fb 	.word	0x3fe921fb
 800d274:	7fefffff 	.word	0x7fefffff

0800d278 <sin>:
 800d278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d27a:	ec53 2b10 	vmov	r2, r3, d0
 800d27e:	4826      	ldr	r0, [pc, #152]	@ (800d318 <sin+0xa0>)
 800d280:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d284:	4281      	cmp	r1, r0
 800d286:	d807      	bhi.n	800d298 <sin+0x20>
 800d288:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d310 <sin+0x98>
 800d28c:	2000      	movs	r0, #0
 800d28e:	b005      	add	sp, #20
 800d290:	f85d eb04 	ldr.w	lr, [sp], #4
 800d294:	f000 b90c 	b.w	800d4b0 <__kernel_sin>
 800d298:	4820      	ldr	r0, [pc, #128]	@ (800d31c <sin+0xa4>)
 800d29a:	4281      	cmp	r1, r0
 800d29c:	d908      	bls.n	800d2b0 <sin+0x38>
 800d29e:	4610      	mov	r0, r2
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	f7f3 f819 	bl	80002d8 <__aeabi_dsub>
 800d2a6:	ec41 0b10 	vmov	d0, r0, r1
 800d2aa:	b005      	add	sp, #20
 800d2ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2b0:	4668      	mov	r0, sp
 800d2b2:	f000 f9b9 	bl	800d628 <__ieee754_rem_pio2>
 800d2b6:	f000 0003 	and.w	r0, r0, #3
 800d2ba:	2801      	cmp	r0, #1
 800d2bc:	d00c      	beq.n	800d2d8 <sin+0x60>
 800d2be:	2802      	cmp	r0, #2
 800d2c0:	d011      	beq.n	800d2e6 <sin+0x6e>
 800d2c2:	b9e8      	cbnz	r0, 800d300 <sin+0x88>
 800d2c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2c8:	ed9d 0b00 	vldr	d0, [sp]
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	f000 f8ef 	bl	800d4b0 <__kernel_sin>
 800d2d2:	ec51 0b10 	vmov	r0, r1, d0
 800d2d6:	e7e6      	b.n	800d2a6 <sin+0x2e>
 800d2d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2dc:	ed9d 0b00 	vldr	d0, [sp]
 800d2e0:	f000 f81e 	bl	800d320 <__kernel_cos>
 800d2e4:	e7f5      	b.n	800d2d2 <sin+0x5a>
 800d2e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2ea:	ed9d 0b00 	vldr	d0, [sp]
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	f000 f8de 	bl	800d4b0 <__kernel_sin>
 800d2f4:	ec53 2b10 	vmov	r2, r3, d0
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d2fe:	e7d2      	b.n	800d2a6 <sin+0x2e>
 800d300:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d304:	ed9d 0b00 	vldr	d0, [sp]
 800d308:	f000 f80a 	bl	800d320 <__kernel_cos>
 800d30c:	e7f2      	b.n	800d2f4 <sin+0x7c>
 800d30e:	bf00      	nop
	...
 800d318:	3fe921fb 	.word	0x3fe921fb
 800d31c:	7fefffff 	.word	0x7fefffff

0800d320 <__kernel_cos>:
 800d320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	ec57 6b10 	vmov	r6, r7, d0
 800d328:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d32c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d330:	ed8d 1b00 	vstr	d1, [sp]
 800d334:	d206      	bcs.n	800d344 <__kernel_cos+0x24>
 800d336:	4630      	mov	r0, r6
 800d338:	4639      	mov	r1, r7
 800d33a:	f7f3 fc35 	bl	8000ba8 <__aeabi_d2iz>
 800d33e:	2800      	cmp	r0, #0
 800d340:	f000 8088 	beq.w	800d454 <__kernel_cos+0x134>
 800d344:	4632      	mov	r2, r6
 800d346:	463b      	mov	r3, r7
 800d348:	4630      	mov	r0, r6
 800d34a:	4639      	mov	r1, r7
 800d34c:	f7f3 f97c 	bl	8000648 <__aeabi_dmul>
 800d350:	4b51      	ldr	r3, [pc, #324]	@ (800d498 <__kernel_cos+0x178>)
 800d352:	2200      	movs	r2, #0
 800d354:	4604      	mov	r4, r0
 800d356:	460d      	mov	r5, r1
 800d358:	f7f3 f976 	bl	8000648 <__aeabi_dmul>
 800d35c:	a340      	add	r3, pc, #256	@ (adr r3, 800d460 <__kernel_cos+0x140>)
 800d35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d362:	4682      	mov	sl, r0
 800d364:	468b      	mov	fp, r1
 800d366:	4620      	mov	r0, r4
 800d368:	4629      	mov	r1, r5
 800d36a:	f7f3 f96d 	bl	8000648 <__aeabi_dmul>
 800d36e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d468 <__kernel_cos+0x148>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	f7f2 ffb2 	bl	80002dc <__adddf3>
 800d378:	4622      	mov	r2, r4
 800d37a:	462b      	mov	r3, r5
 800d37c:	f7f3 f964 	bl	8000648 <__aeabi_dmul>
 800d380:	a33b      	add	r3, pc, #236	@ (adr r3, 800d470 <__kernel_cos+0x150>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	f7f2 ffa7 	bl	80002d8 <__aeabi_dsub>
 800d38a:	4622      	mov	r2, r4
 800d38c:	462b      	mov	r3, r5
 800d38e:	f7f3 f95b 	bl	8000648 <__aeabi_dmul>
 800d392:	a339      	add	r3, pc, #228	@ (adr r3, 800d478 <__kernel_cos+0x158>)
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	f7f2 ffa0 	bl	80002dc <__adddf3>
 800d39c:	4622      	mov	r2, r4
 800d39e:	462b      	mov	r3, r5
 800d3a0:	f7f3 f952 	bl	8000648 <__aeabi_dmul>
 800d3a4:	a336      	add	r3, pc, #216	@ (adr r3, 800d480 <__kernel_cos+0x160>)
 800d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3aa:	f7f2 ff95 	bl	80002d8 <__aeabi_dsub>
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	462b      	mov	r3, r5
 800d3b2:	f7f3 f949 	bl	8000648 <__aeabi_dmul>
 800d3b6:	a334      	add	r3, pc, #208	@ (adr r3, 800d488 <__kernel_cos+0x168>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f7f2 ff8e 	bl	80002dc <__adddf3>
 800d3c0:	4622      	mov	r2, r4
 800d3c2:	462b      	mov	r3, r5
 800d3c4:	f7f3 f940 	bl	8000648 <__aeabi_dmul>
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	462b      	mov	r3, r5
 800d3cc:	f7f3 f93c 	bl	8000648 <__aeabi_dmul>
 800d3d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	460d      	mov	r5, r1
 800d3d8:	4630      	mov	r0, r6
 800d3da:	4639      	mov	r1, r7
 800d3dc:	f7f3 f934 	bl	8000648 <__aeabi_dmul>
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f7f2 ff76 	bl	80002d8 <__aeabi_dsub>
 800d3ec:	4b2b      	ldr	r3, [pc, #172]	@ (800d49c <__kernel_cos+0x17c>)
 800d3ee:	4598      	cmp	r8, r3
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	460f      	mov	r7, r1
 800d3f4:	d810      	bhi.n	800d418 <__kernel_cos+0xf8>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4650      	mov	r0, sl
 800d3fc:	4659      	mov	r1, fp
 800d3fe:	f7f2 ff6b 	bl	80002d8 <__aeabi_dsub>
 800d402:	460b      	mov	r3, r1
 800d404:	4926      	ldr	r1, [pc, #152]	@ (800d4a0 <__kernel_cos+0x180>)
 800d406:	4602      	mov	r2, r0
 800d408:	2000      	movs	r0, #0
 800d40a:	f7f2 ff65 	bl	80002d8 <__aeabi_dsub>
 800d40e:	ec41 0b10 	vmov	d0, r0, r1
 800d412:	b003      	add	sp, #12
 800d414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d418:	4b22      	ldr	r3, [pc, #136]	@ (800d4a4 <__kernel_cos+0x184>)
 800d41a:	4921      	ldr	r1, [pc, #132]	@ (800d4a0 <__kernel_cos+0x180>)
 800d41c:	4598      	cmp	r8, r3
 800d41e:	bf8c      	ite	hi
 800d420:	4d21      	ldrhi	r5, [pc, #132]	@ (800d4a8 <__kernel_cos+0x188>)
 800d422:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d426:	2400      	movs	r4, #0
 800d428:	4622      	mov	r2, r4
 800d42a:	462b      	mov	r3, r5
 800d42c:	2000      	movs	r0, #0
 800d42e:	f7f2 ff53 	bl	80002d8 <__aeabi_dsub>
 800d432:	4622      	mov	r2, r4
 800d434:	4680      	mov	r8, r0
 800d436:	4689      	mov	r9, r1
 800d438:	462b      	mov	r3, r5
 800d43a:	4650      	mov	r0, sl
 800d43c:	4659      	mov	r1, fp
 800d43e:	f7f2 ff4b 	bl	80002d8 <__aeabi_dsub>
 800d442:	4632      	mov	r2, r6
 800d444:	463b      	mov	r3, r7
 800d446:	f7f2 ff47 	bl	80002d8 <__aeabi_dsub>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4640      	mov	r0, r8
 800d450:	4649      	mov	r1, r9
 800d452:	e7da      	b.n	800d40a <__kernel_cos+0xea>
 800d454:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d490 <__kernel_cos+0x170>
 800d458:	e7db      	b.n	800d412 <__kernel_cos+0xf2>
 800d45a:	bf00      	nop
 800d45c:	f3af 8000 	nop.w
 800d460:	be8838d4 	.word	0xbe8838d4
 800d464:	bda8fae9 	.word	0xbda8fae9
 800d468:	bdb4b1c4 	.word	0xbdb4b1c4
 800d46c:	3e21ee9e 	.word	0x3e21ee9e
 800d470:	809c52ad 	.word	0x809c52ad
 800d474:	3e927e4f 	.word	0x3e927e4f
 800d478:	19cb1590 	.word	0x19cb1590
 800d47c:	3efa01a0 	.word	0x3efa01a0
 800d480:	16c15177 	.word	0x16c15177
 800d484:	3f56c16c 	.word	0x3f56c16c
 800d488:	5555554c 	.word	0x5555554c
 800d48c:	3fa55555 	.word	0x3fa55555
 800d490:	00000000 	.word	0x00000000
 800d494:	3ff00000 	.word	0x3ff00000
 800d498:	3fe00000 	.word	0x3fe00000
 800d49c:	3fd33332 	.word	0x3fd33332
 800d4a0:	3ff00000 	.word	0x3ff00000
 800d4a4:	3fe90000 	.word	0x3fe90000
 800d4a8:	3fd20000 	.word	0x3fd20000
 800d4ac:	00000000 	.word	0x00000000

0800d4b0 <__kernel_sin>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	ec55 4b10 	vmov	r4, r5, d0
 800d4b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d4bc:	b085      	sub	sp, #20
 800d4be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d4c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d4c6:	4680      	mov	r8, r0
 800d4c8:	d205      	bcs.n	800d4d6 <__kernel_sin+0x26>
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	f7f3 fb6b 	bl	8000ba8 <__aeabi_d2iz>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d052      	beq.n	800d57c <__kernel_sin+0xcc>
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	462b      	mov	r3, r5
 800d4da:	4620      	mov	r0, r4
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f7f3 f8b3 	bl	8000648 <__aeabi_dmul>
 800d4e2:	4682      	mov	sl, r0
 800d4e4:	468b      	mov	fp, r1
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	f7f3 f8ab 	bl	8000648 <__aeabi_dmul>
 800d4f2:	a342      	add	r3, pc, #264	@ (adr r3, 800d5fc <__kernel_sin+0x14c>)
 800d4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f8:	e9cd 0100 	strd	r0, r1, [sp]
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	4659      	mov	r1, fp
 800d500:	f7f3 f8a2 	bl	8000648 <__aeabi_dmul>
 800d504:	a33f      	add	r3, pc, #252	@ (adr r3, 800d604 <__kernel_sin+0x154>)
 800d506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50a:	f7f2 fee5 	bl	80002d8 <__aeabi_dsub>
 800d50e:	4652      	mov	r2, sl
 800d510:	465b      	mov	r3, fp
 800d512:	f7f3 f899 	bl	8000648 <__aeabi_dmul>
 800d516:	a33d      	add	r3, pc, #244	@ (adr r3, 800d60c <__kernel_sin+0x15c>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	f7f2 fede 	bl	80002dc <__adddf3>
 800d520:	4652      	mov	r2, sl
 800d522:	465b      	mov	r3, fp
 800d524:	f7f3 f890 	bl	8000648 <__aeabi_dmul>
 800d528:	a33a      	add	r3, pc, #232	@ (adr r3, 800d614 <__kernel_sin+0x164>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f2 fed3 	bl	80002d8 <__aeabi_dsub>
 800d532:	4652      	mov	r2, sl
 800d534:	465b      	mov	r3, fp
 800d536:	f7f3 f887 	bl	8000648 <__aeabi_dmul>
 800d53a:	a338      	add	r3, pc, #224	@ (adr r3, 800d61c <__kernel_sin+0x16c>)
 800d53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d540:	f7f2 fecc 	bl	80002dc <__adddf3>
 800d544:	4606      	mov	r6, r0
 800d546:	460f      	mov	r7, r1
 800d548:	f1b8 0f00 	cmp.w	r8, #0
 800d54c:	d11b      	bne.n	800d586 <__kernel_sin+0xd6>
 800d54e:	4602      	mov	r2, r0
 800d550:	460b      	mov	r3, r1
 800d552:	4650      	mov	r0, sl
 800d554:	4659      	mov	r1, fp
 800d556:	f7f3 f877 	bl	8000648 <__aeabi_dmul>
 800d55a:	a325      	add	r3, pc, #148	@ (adr r3, 800d5f0 <__kernel_sin+0x140>)
 800d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d560:	f7f2 feba 	bl	80002d8 <__aeabi_dsub>
 800d564:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d568:	f7f3 f86e 	bl	8000648 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4620      	mov	r0, r4
 800d572:	4629      	mov	r1, r5
 800d574:	f7f2 feb2 	bl	80002dc <__adddf3>
 800d578:	4604      	mov	r4, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	ec45 4b10 	vmov	d0, r4, r5
 800d580:	b005      	add	sp, #20
 800d582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d58a:	4b1b      	ldr	r3, [pc, #108]	@ (800d5f8 <__kernel_sin+0x148>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	f7f3 f85b 	bl	8000648 <__aeabi_dmul>
 800d592:	4632      	mov	r2, r6
 800d594:	4680      	mov	r8, r0
 800d596:	4689      	mov	r9, r1
 800d598:	463b      	mov	r3, r7
 800d59a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d59e:	f7f3 f853 	bl	8000648 <__aeabi_dmul>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	4649      	mov	r1, r9
 800d5aa:	f7f2 fe95 	bl	80002d8 <__aeabi_dsub>
 800d5ae:	4652      	mov	r2, sl
 800d5b0:	465b      	mov	r3, fp
 800d5b2:	f7f3 f849 	bl	8000648 <__aeabi_dmul>
 800d5b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5ba:	f7f2 fe8d 	bl	80002d8 <__aeabi_dsub>
 800d5be:	a30c      	add	r3, pc, #48	@ (adr r3, 800d5f0 <__kernel_sin+0x140>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	460f      	mov	r7, r1
 800d5c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5cc:	f7f3 f83c 	bl	8000648 <__aeabi_dmul>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	f7f2 fe80 	bl	80002dc <__adddf3>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	f7f2 fe78 	bl	80002d8 <__aeabi_dsub>
 800d5e8:	e7c6      	b.n	800d578 <__kernel_sin+0xc8>
 800d5ea:	bf00      	nop
 800d5ec:	f3af 8000 	nop.w
 800d5f0:	55555549 	.word	0x55555549
 800d5f4:	3fc55555 	.word	0x3fc55555
 800d5f8:	3fe00000 	.word	0x3fe00000
 800d5fc:	5acfd57c 	.word	0x5acfd57c
 800d600:	3de5d93a 	.word	0x3de5d93a
 800d604:	8a2b9ceb 	.word	0x8a2b9ceb
 800d608:	3e5ae5e6 	.word	0x3e5ae5e6
 800d60c:	57b1fe7d 	.word	0x57b1fe7d
 800d610:	3ec71de3 	.word	0x3ec71de3
 800d614:	19c161d5 	.word	0x19c161d5
 800d618:	3f2a01a0 	.word	0x3f2a01a0
 800d61c:	1110f8a6 	.word	0x1110f8a6
 800d620:	3f811111 	.word	0x3f811111
 800d624:	00000000 	.word	0x00000000

0800d628 <__ieee754_rem_pio2>:
 800d628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d62c:	ec57 6b10 	vmov	r6, r7, d0
 800d630:	4bc5      	ldr	r3, [pc, #788]	@ (800d948 <__ieee754_rem_pio2+0x320>)
 800d632:	b08d      	sub	sp, #52	@ 0x34
 800d634:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d638:	4598      	cmp	r8, r3
 800d63a:	4604      	mov	r4, r0
 800d63c:	9704      	str	r7, [sp, #16]
 800d63e:	d807      	bhi.n	800d650 <__ieee754_rem_pio2+0x28>
 800d640:	2200      	movs	r2, #0
 800d642:	2300      	movs	r3, #0
 800d644:	ed80 0b00 	vstr	d0, [r0]
 800d648:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d64c:	2500      	movs	r5, #0
 800d64e:	e028      	b.n	800d6a2 <__ieee754_rem_pio2+0x7a>
 800d650:	4bbe      	ldr	r3, [pc, #760]	@ (800d94c <__ieee754_rem_pio2+0x324>)
 800d652:	4598      	cmp	r8, r3
 800d654:	d878      	bhi.n	800d748 <__ieee754_rem_pio2+0x120>
 800d656:	9b04      	ldr	r3, [sp, #16]
 800d658:	4dbd      	ldr	r5, [pc, #756]	@ (800d950 <__ieee754_rem_pio2+0x328>)
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	4630      	mov	r0, r6
 800d65e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d910 <__ieee754_rem_pio2+0x2e8>)
 800d660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d664:	4639      	mov	r1, r7
 800d666:	dd38      	ble.n	800d6da <__ieee754_rem_pio2+0xb2>
 800d668:	f7f2 fe36 	bl	80002d8 <__aeabi_dsub>
 800d66c:	45a8      	cmp	r8, r5
 800d66e:	4606      	mov	r6, r0
 800d670:	460f      	mov	r7, r1
 800d672:	d01a      	beq.n	800d6aa <__ieee754_rem_pio2+0x82>
 800d674:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d918 <__ieee754_rem_pio2+0x2f0>)
 800d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67a:	f7f2 fe2d 	bl	80002d8 <__aeabi_dsub>
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	4680      	mov	r8, r0
 800d684:	4689      	mov	r9, r1
 800d686:	4630      	mov	r0, r6
 800d688:	4639      	mov	r1, r7
 800d68a:	f7f2 fe25 	bl	80002d8 <__aeabi_dsub>
 800d68e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d918 <__ieee754_rem_pio2+0x2f0>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	f7f2 fe20 	bl	80002d8 <__aeabi_dsub>
 800d698:	e9c4 8900 	strd	r8, r9, [r4]
 800d69c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d6a0:	2501      	movs	r5, #1
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	b00d      	add	sp, #52	@ 0x34
 800d6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6aa:	a39d      	add	r3, pc, #628	@ (adr r3, 800d920 <__ieee754_rem_pio2+0x2f8>)
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	f7f2 fe12 	bl	80002d8 <__aeabi_dsub>
 800d6b4:	a39c      	add	r3, pc, #624	@ (adr r3, 800d928 <__ieee754_rem_pio2+0x300>)
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	460f      	mov	r7, r1
 800d6be:	f7f2 fe0b 	bl	80002d8 <__aeabi_dsub>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	4680      	mov	r8, r0
 800d6c8:	4689      	mov	r9, r1
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	4639      	mov	r1, r7
 800d6ce:	f7f2 fe03 	bl	80002d8 <__aeabi_dsub>
 800d6d2:	a395      	add	r3, pc, #596	@ (adr r3, 800d928 <__ieee754_rem_pio2+0x300>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	e7dc      	b.n	800d694 <__ieee754_rem_pio2+0x6c>
 800d6da:	f7f2 fdff 	bl	80002dc <__adddf3>
 800d6de:	45a8      	cmp	r8, r5
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	460f      	mov	r7, r1
 800d6e4:	d018      	beq.n	800d718 <__ieee754_rem_pio2+0xf0>
 800d6e6:	a38c      	add	r3, pc, #560	@ (adr r3, 800d918 <__ieee754_rem_pio2+0x2f0>)
 800d6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ec:	f7f2 fdf6 	bl	80002dc <__adddf3>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	460b      	mov	r3, r1
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	4689      	mov	r9, r1
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	f7f2 fdec 	bl	80002d8 <__aeabi_dsub>
 800d700:	a385      	add	r3, pc, #532	@ (adr r3, 800d918 <__ieee754_rem_pio2+0x2f0>)
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	f7f2 fde9 	bl	80002dc <__adddf3>
 800d70a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d70e:	e9c4 8900 	strd	r8, r9, [r4]
 800d712:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d716:	e7c4      	b.n	800d6a2 <__ieee754_rem_pio2+0x7a>
 800d718:	a381      	add	r3, pc, #516	@ (adr r3, 800d920 <__ieee754_rem_pio2+0x2f8>)
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f7f2 fddd 	bl	80002dc <__adddf3>
 800d722:	a381      	add	r3, pc, #516	@ (adr r3, 800d928 <__ieee754_rem_pio2+0x300>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	4606      	mov	r6, r0
 800d72a:	460f      	mov	r7, r1
 800d72c:	f7f2 fdd6 	bl	80002dc <__adddf3>
 800d730:	4602      	mov	r2, r0
 800d732:	460b      	mov	r3, r1
 800d734:	4680      	mov	r8, r0
 800d736:	4689      	mov	r9, r1
 800d738:	4630      	mov	r0, r6
 800d73a:	4639      	mov	r1, r7
 800d73c:	f7f2 fdcc 	bl	80002d8 <__aeabi_dsub>
 800d740:	a379      	add	r3, pc, #484	@ (adr r3, 800d928 <__ieee754_rem_pio2+0x300>)
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	e7de      	b.n	800d706 <__ieee754_rem_pio2+0xde>
 800d748:	4b82      	ldr	r3, [pc, #520]	@ (800d954 <__ieee754_rem_pio2+0x32c>)
 800d74a:	4598      	cmp	r8, r3
 800d74c:	f200 80d1 	bhi.w	800d8f2 <__ieee754_rem_pio2+0x2ca>
 800d750:	f000 f966 	bl	800da20 <fabs>
 800d754:	ec57 6b10 	vmov	r6, r7, d0
 800d758:	a375      	add	r3, pc, #468	@ (adr r3, 800d930 <__ieee754_rem_pio2+0x308>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	4630      	mov	r0, r6
 800d760:	4639      	mov	r1, r7
 800d762:	f7f2 ff71 	bl	8000648 <__aeabi_dmul>
 800d766:	4b7c      	ldr	r3, [pc, #496]	@ (800d958 <__ieee754_rem_pio2+0x330>)
 800d768:	2200      	movs	r2, #0
 800d76a:	f7f2 fdb7 	bl	80002dc <__adddf3>
 800d76e:	f7f3 fa1b 	bl	8000ba8 <__aeabi_d2iz>
 800d772:	4605      	mov	r5, r0
 800d774:	f7f2 fefe 	bl	8000574 <__aeabi_i2d>
 800d778:	4602      	mov	r2, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d780:	a363      	add	r3, pc, #396	@ (adr r3, 800d910 <__ieee754_rem_pio2+0x2e8>)
 800d782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d786:	f7f2 ff5f 	bl	8000648 <__aeabi_dmul>
 800d78a:	4602      	mov	r2, r0
 800d78c:	460b      	mov	r3, r1
 800d78e:	4630      	mov	r0, r6
 800d790:	4639      	mov	r1, r7
 800d792:	f7f2 fda1 	bl	80002d8 <__aeabi_dsub>
 800d796:	a360      	add	r3, pc, #384	@ (adr r3, 800d918 <__ieee754_rem_pio2+0x2f0>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	4682      	mov	sl, r0
 800d79e:	468b      	mov	fp, r1
 800d7a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7a4:	f7f2 ff50 	bl	8000648 <__aeabi_dmul>
 800d7a8:	2d1f      	cmp	r5, #31
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	460f      	mov	r7, r1
 800d7ae:	dc0c      	bgt.n	800d7ca <__ieee754_rem_pio2+0x1a2>
 800d7b0:	4b6a      	ldr	r3, [pc, #424]	@ (800d95c <__ieee754_rem_pio2+0x334>)
 800d7b2:	1e6a      	subs	r2, r5, #1
 800d7b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7b8:	4543      	cmp	r3, r8
 800d7ba:	d006      	beq.n	800d7ca <__ieee754_rem_pio2+0x1a2>
 800d7bc:	4632      	mov	r2, r6
 800d7be:	463b      	mov	r3, r7
 800d7c0:	4650      	mov	r0, sl
 800d7c2:	4659      	mov	r1, fp
 800d7c4:	f7f2 fd88 	bl	80002d8 <__aeabi_dsub>
 800d7c8:	e00e      	b.n	800d7e8 <__ieee754_rem_pio2+0x1c0>
 800d7ca:	463b      	mov	r3, r7
 800d7cc:	4632      	mov	r2, r6
 800d7ce:	4650      	mov	r0, sl
 800d7d0:	4659      	mov	r1, fp
 800d7d2:	f7f2 fd81 	bl	80002d8 <__aeabi_dsub>
 800d7d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d7da:	9305      	str	r3, [sp, #20]
 800d7dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d7e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d7e4:	2b10      	cmp	r3, #16
 800d7e6:	dc02      	bgt.n	800d7ee <__ieee754_rem_pio2+0x1c6>
 800d7e8:	e9c4 0100 	strd	r0, r1, [r4]
 800d7ec:	e039      	b.n	800d862 <__ieee754_rem_pio2+0x23a>
 800d7ee:	a34c      	add	r3, pc, #304	@ (adr r3, 800d920 <__ieee754_rem_pio2+0x2f8>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7f8:	f7f2 ff26 	bl	8000648 <__aeabi_dmul>
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	460f      	mov	r7, r1
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4650      	mov	r0, sl
 800d806:	4659      	mov	r1, fp
 800d808:	f7f2 fd66 	bl	80002d8 <__aeabi_dsub>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	4680      	mov	r8, r0
 800d812:	4689      	mov	r9, r1
 800d814:	4650      	mov	r0, sl
 800d816:	4659      	mov	r1, fp
 800d818:	f7f2 fd5e 	bl	80002d8 <__aeabi_dsub>
 800d81c:	4632      	mov	r2, r6
 800d81e:	463b      	mov	r3, r7
 800d820:	f7f2 fd5a 	bl	80002d8 <__aeabi_dsub>
 800d824:	a340      	add	r3, pc, #256	@ (adr r3, 800d928 <__ieee754_rem_pio2+0x300>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	4606      	mov	r6, r0
 800d82c:	460f      	mov	r7, r1
 800d82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d832:	f7f2 ff09 	bl	8000648 <__aeabi_dmul>
 800d836:	4632      	mov	r2, r6
 800d838:	463b      	mov	r3, r7
 800d83a:	f7f2 fd4d 	bl	80002d8 <__aeabi_dsub>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	4606      	mov	r6, r0
 800d844:	460f      	mov	r7, r1
 800d846:	4640      	mov	r0, r8
 800d848:	4649      	mov	r1, r9
 800d84a:	f7f2 fd45 	bl	80002d8 <__aeabi_dsub>
 800d84e:	9a05      	ldr	r2, [sp, #20]
 800d850:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	2b31      	cmp	r3, #49	@ 0x31
 800d858:	dc20      	bgt.n	800d89c <__ieee754_rem_pio2+0x274>
 800d85a:	e9c4 0100 	strd	r0, r1, [r4]
 800d85e:	46c2      	mov	sl, r8
 800d860:	46cb      	mov	fp, r9
 800d862:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d866:	4650      	mov	r0, sl
 800d868:	4642      	mov	r2, r8
 800d86a:	464b      	mov	r3, r9
 800d86c:	4659      	mov	r1, fp
 800d86e:	f7f2 fd33 	bl	80002d8 <__aeabi_dsub>
 800d872:	463b      	mov	r3, r7
 800d874:	4632      	mov	r2, r6
 800d876:	f7f2 fd2f 	bl	80002d8 <__aeabi_dsub>
 800d87a:	9b04      	ldr	r3, [sp, #16]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d882:	f6bf af0e 	bge.w	800d6a2 <__ieee754_rem_pio2+0x7a>
 800d886:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d88a:	6063      	str	r3, [r4, #4]
 800d88c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d890:	f8c4 8000 	str.w	r8, [r4]
 800d894:	60a0      	str	r0, [r4, #8]
 800d896:	60e3      	str	r3, [r4, #12]
 800d898:	426d      	negs	r5, r5
 800d89a:	e702      	b.n	800d6a2 <__ieee754_rem_pio2+0x7a>
 800d89c:	a326      	add	r3, pc, #152	@ (adr r3, 800d938 <__ieee754_rem_pio2+0x310>)
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8a6:	f7f2 fecf 	bl	8000648 <__aeabi_dmul>
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	460f      	mov	r7, r1
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	4649      	mov	r1, r9
 800d8b6:	f7f2 fd0f 	bl	80002d8 <__aeabi_dsub>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	460b      	mov	r3, r1
 800d8be:	4682      	mov	sl, r0
 800d8c0:	468b      	mov	fp, r1
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7f2 fd07 	bl	80002d8 <__aeabi_dsub>
 800d8ca:	4632      	mov	r2, r6
 800d8cc:	463b      	mov	r3, r7
 800d8ce:	f7f2 fd03 	bl	80002d8 <__aeabi_dsub>
 800d8d2:	a31b      	add	r3, pc, #108	@ (adr r3, 800d940 <__ieee754_rem_pio2+0x318>)
 800d8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d8:	4606      	mov	r6, r0
 800d8da:	460f      	mov	r7, r1
 800d8dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8e0:	f7f2 feb2 	bl	8000648 <__aeabi_dmul>
 800d8e4:	4632      	mov	r2, r6
 800d8e6:	463b      	mov	r3, r7
 800d8e8:	f7f2 fcf6 	bl	80002d8 <__aeabi_dsub>
 800d8ec:	4606      	mov	r6, r0
 800d8ee:	460f      	mov	r7, r1
 800d8f0:	e764      	b.n	800d7bc <__ieee754_rem_pio2+0x194>
 800d8f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d960 <__ieee754_rem_pio2+0x338>)
 800d8f4:	4598      	cmp	r8, r3
 800d8f6:	d935      	bls.n	800d964 <__ieee754_rem_pio2+0x33c>
 800d8f8:	4632      	mov	r2, r6
 800d8fa:	463b      	mov	r3, r7
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	4639      	mov	r1, r7
 800d900:	f7f2 fcea 	bl	80002d8 <__aeabi_dsub>
 800d904:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d908:	e9c4 0100 	strd	r0, r1, [r4]
 800d90c:	e69e      	b.n	800d64c <__ieee754_rem_pio2+0x24>
 800d90e:	bf00      	nop
 800d910:	54400000 	.word	0x54400000
 800d914:	3ff921fb 	.word	0x3ff921fb
 800d918:	1a626331 	.word	0x1a626331
 800d91c:	3dd0b461 	.word	0x3dd0b461
 800d920:	1a600000 	.word	0x1a600000
 800d924:	3dd0b461 	.word	0x3dd0b461
 800d928:	2e037073 	.word	0x2e037073
 800d92c:	3ba3198a 	.word	0x3ba3198a
 800d930:	6dc9c883 	.word	0x6dc9c883
 800d934:	3fe45f30 	.word	0x3fe45f30
 800d938:	2e000000 	.word	0x2e000000
 800d93c:	3ba3198a 	.word	0x3ba3198a
 800d940:	252049c1 	.word	0x252049c1
 800d944:	397b839a 	.word	0x397b839a
 800d948:	3fe921fb 	.word	0x3fe921fb
 800d94c:	4002d97b 	.word	0x4002d97b
 800d950:	3ff921fb 	.word	0x3ff921fb
 800d954:	413921fb 	.word	0x413921fb
 800d958:	3fe00000 	.word	0x3fe00000
 800d95c:	0800ea28 	.word	0x0800ea28
 800d960:	7fefffff 	.word	0x7fefffff
 800d964:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d968:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d96c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d970:	4630      	mov	r0, r6
 800d972:	460f      	mov	r7, r1
 800d974:	f7f3 f918 	bl	8000ba8 <__aeabi_d2iz>
 800d978:	f7f2 fdfc 	bl	8000574 <__aeabi_i2d>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	4630      	mov	r0, r6
 800d982:	4639      	mov	r1, r7
 800d984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d988:	f7f2 fca6 	bl	80002d8 <__aeabi_dsub>
 800d98c:	4b22      	ldr	r3, [pc, #136]	@ (800da18 <__ieee754_rem_pio2+0x3f0>)
 800d98e:	2200      	movs	r2, #0
 800d990:	f7f2 fe5a 	bl	8000648 <__aeabi_dmul>
 800d994:	460f      	mov	r7, r1
 800d996:	4606      	mov	r6, r0
 800d998:	f7f3 f906 	bl	8000ba8 <__aeabi_d2iz>
 800d99c:	f7f2 fdea 	bl	8000574 <__aeabi_i2d>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	4639      	mov	r1, r7
 800d9a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9ac:	f7f2 fc94 	bl	80002d8 <__aeabi_dsub>
 800d9b0:	4b19      	ldr	r3, [pc, #100]	@ (800da18 <__ieee754_rem_pio2+0x3f0>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f7f2 fe48 	bl	8000648 <__aeabi_dmul>
 800d9b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d9bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d9c0:	f04f 0803 	mov.w	r8, #3
 800d9c4:	2600      	movs	r6, #0
 800d9c6:	2700      	movs	r7, #0
 800d9c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d9cc:	4632      	mov	r2, r6
 800d9ce:	463b      	mov	r3, r7
 800d9d0:	46c2      	mov	sl, r8
 800d9d2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d9d6:	f7f3 f89f 	bl	8000b18 <__aeabi_dcmpeq>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d1f4      	bne.n	800d9c8 <__ieee754_rem_pio2+0x3a0>
 800d9de:	4b0f      	ldr	r3, [pc, #60]	@ (800da1c <__ieee754_rem_pio2+0x3f4>)
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	4653      	mov	r3, sl
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	a806      	add	r0, sp, #24
 800d9ee:	f000 f81f 	bl	800da30 <__kernel_rem_pio2>
 800d9f2:	9b04      	ldr	r3, [sp, #16]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	f6bf ae53 	bge.w	800d6a2 <__ieee754_rem_pio2+0x7a>
 800d9fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800da00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da04:	e9c4 2300 	strd	r2, r3, [r4]
 800da08:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800da0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800da14:	e740      	b.n	800d898 <__ieee754_rem_pio2+0x270>
 800da16:	bf00      	nop
 800da18:	41700000 	.word	0x41700000
 800da1c:	0800eaa8 	.word	0x0800eaa8

0800da20 <fabs>:
 800da20:	ec51 0b10 	vmov	r0, r1, d0
 800da24:	4602      	mov	r2, r0
 800da26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800da2a:	ec43 2b10 	vmov	d0, r2, r3
 800da2e:	4770      	bx	lr

0800da30 <__kernel_rem_pio2>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	ed2d 8b02 	vpush	{d8}
 800da38:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800da3c:	f112 0f14 	cmn.w	r2, #20
 800da40:	9306      	str	r3, [sp, #24]
 800da42:	9104      	str	r1, [sp, #16]
 800da44:	4bbe      	ldr	r3, [pc, #760]	@ (800dd40 <__kernel_rem_pio2+0x310>)
 800da46:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800da48:	9008      	str	r0, [sp, #32]
 800da4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	9b06      	ldr	r3, [sp, #24]
 800da52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800da56:	bfa8      	it	ge
 800da58:	1ed4      	subge	r4, r2, #3
 800da5a:	9305      	str	r3, [sp, #20]
 800da5c:	bfb2      	itee	lt
 800da5e:	2400      	movlt	r4, #0
 800da60:	2318      	movge	r3, #24
 800da62:	fb94 f4f3 	sdivge	r4, r4, r3
 800da66:	f06f 0317 	mvn.w	r3, #23
 800da6a:	fb04 3303 	mla	r3, r4, r3, r3
 800da6e:	eb03 0b02 	add.w	fp, r3, r2
 800da72:	9b00      	ldr	r3, [sp, #0]
 800da74:	9a05      	ldr	r2, [sp, #20]
 800da76:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800dd30 <__kernel_rem_pio2+0x300>
 800da7a:	eb03 0802 	add.w	r8, r3, r2
 800da7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800da80:	1aa7      	subs	r7, r4, r2
 800da82:	ae20      	add	r6, sp, #128	@ 0x80
 800da84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800da88:	2500      	movs	r5, #0
 800da8a:	4545      	cmp	r5, r8
 800da8c:	dd13      	ble.n	800dab6 <__kernel_rem_pio2+0x86>
 800da8e:	9b06      	ldr	r3, [sp, #24]
 800da90:	aa20      	add	r2, sp, #128	@ 0x80
 800da92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800da96:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800da9a:	f04f 0800 	mov.w	r8, #0
 800da9e:	9b00      	ldr	r3, [sp, #0]
 800daa0:	4598      	cmp	r8, r3
 800daa2:	dc31      	bgt.n	800db08 <__kernel_rem_pio2+0xd8>
 800daa4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800dd30 <__kernel_rem_pio2+0x300>
 800daa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800daac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dab0:	462f      	mov	r7, r5
 800dab2:	2600      	movs	r6, #0
 800dab4:	e01b      	b.n	800daee <__kernel_rem_pio2+0xbe>
 800dab6:	42ef      	cmn	r7, r5
 800dab8:	d407      	bmi.n	800daca <__kernel_rem_pio2+0x9a>
 800daba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dabe:	f7f2 fd59 	bl	8000574 <__aeabi_i2d>
 800dac2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dac6:	3501      	adds	r5, #1
 800dac8:	e7df      	b.n	800da8a <__kernel_rem_pio2+0x5a>
 800daca:	ec51 0b18 	vmov	r0, r1, d8
 800dace:	e7f8      	b.n	800dac2 <__kernel_rem_pio2+0x92>
 800dad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dad8:	f7f2 fdb6 	bl	8000648 <__aeabi_dmul>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dae4:	f7f2 fbfa 	bl	80002dc <__adddf3>
 800dae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daec:	3601      	adds	r6, #1
 800daee:	9b05      	ldr	r3, [sp, #20]
 800daf0:	429e      	cmp	r6, r3
 800daf2:	f1a7 0708 	sub.w	r7, r7, #8
 800daf6:	ddeb      	ble.n	800dad0 <__kernel_rem_pio2+0xa0>
 800daf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dafc:	f108 0801 	add.w	r8, r8, #1
 800db00:	ecaa 7b02 	vstmia	sl!, {d7}
 800db04:	3508      	adds	r5, #8
 800db06:	e7ca      	b.n	800da9e <__kernel_rem_pio2+0x6e>
 800db08:	9b00      	ldr	r3, [sp, #0]
 800db0a:	f8dd 8000 	ldr.w	r8, [sp]
 800db0e:	aa0c      	add	r2, sp, #48	@ 0x30
 800db10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db14:	930a      	str	r3, [sp, #40]	@ 0x28
 800db16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800db18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800db1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800db22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db24:	ab98      	add	r3, sp, #608	@ 0x260
 800db26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db2a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800db2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db32:	ac0c      	add	r4, sp, #48	@ 0x30
 800db34:	ab70      	add	r3, sp, #448	@ 0x1c0
 800db36:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800db3a:	46a1      	mov	r9, r4
 800db3c:	46c2      	mov	sl, r8
 800db3e:	f1ba 0f00 	cmp.w	sl, #0
 800db42:	f1a5 0508 	sub.w	r5, r5, #8
 800db46:	dc77      	bgt.n	800dc38 <__kernel_rem_pio2+0x208>
 800db48:	4658      	mov	r0, fp
 800db4a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800db4e:	f000 fac7 	bl	800e0e0 <scalbn>
 800db52:	ec57 6b10 	vmov	r6, r7, d0
 800db56:	2200      	movs	r2, #0
 800db58:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800db5c:	4630      	mov	r0, r6
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 fd72 	bl	8000648 <__aeabi_dmul>
 800db64:	ec41 0b10 	vmov	d0, r0, r1
 800db68:	f000 fb3a 	bl	800e1e0 <floor>
 800db6c:	4b75      	ldr	r3, [pc, #468]	@ (800dd44 <__kernel_rem_pio2+0x314>)
 800db6e:	ec51 0b10 	vmov	r0, r1, d0
 800db72:	2200      	movs	r2, #0
 800db74:	f7f2 fd68 	bl	8000648 <__aeabi_dmul>
 800db78:	4602      	mov	r2, r0
 800db7a:	460b      	mov	r3, r1
 800db7c:	4630      	mov	r0, r6
 800db7e:	4639      	mov	r1, r7
 800db80:	f7f2 fbaa 	bl	80002d8 <__aeabi_dsub>
 800db84:	460f      	mov	r7, r1
 800db86:	4606      	mov	r6, r0
 800db88:	f7f3 f80e 	bl	8000ba8 <__aeabi_d2iz>
 800db8c:	9002      	str	r0, [sp, #8]
 800db8e:	f7f2 fcf1 	bl	8000574 <__aeabi_i2d>
 800db92:	4602      	mov	r2, r0
 800db94:	460b      	mov	r3, r1
 800db96:	4630      	mov	r0, r6
 800db98:	4639      	mov	r1, r7
 800db9a:	f7f2 fb9d 	bl	80002d8 <__aeabi_dsub>
 800db9e:	f1bb 0f00 	cmp.w	fp, #0
 800dba2:	4606      	mov	r6, r0
 800dba4:	460f      	mov	r7, r1
 800dba6:	dd6c      	ble.n	800dc82 <__kernel_rem_pio2+0x252>
 800dba8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800dbac:	ab0c      	add	r3, sp, #48	@ 0x30
 800dbae:	9d02      	ldr	r5, [sp, #8]
 800dbb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbb4:	f1cb 0018 	rsb	r0, fp, #24
 800dbb8:	fa43 f200 	asr.w	r2, r3, r0
 800dbbc:	4415      	add	r5, r2
 800dbbe:	4082      	lsls	r2, r0
 800dbc0:	1a9b      	subs	r3, r3, r2
 800dbc2:	aa0c      	add	r2, sp, #48	@ 0x30
 800dbc4:	9502      	str	r5, [sp, #8]
 800dbc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dbca:	f1cb 0217 	rsb	r2, fp, #23
 800dbce:	fa43 f902 	asr.w	r9, r3, r2
 800dbd2:	f1b9 0f00 	cmp.w	r9, #0
 800dbd6:	dd64      	ble.n	800dca2 <__kernel_rem_pio2+0x272>
 800dbd8:	9b02      	ldr	r3, [sp, #8]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	3301      	adds	r3, #1
 800dbde:	9302      	str	r3, [sp, #8]
 800dbe0:	4615      	mov	r5, r2
 800dbe2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dbe6:	4590      	cmp	r8, r2
 800dbe8:	f300 80b8 	bgt.w	800dd5c <__kernel_rem_pio2+0x32c>
 800dbec:	f1bb 0f00 	cmp.w	fp, #0
 800dbf0:	dd07      	ble.n	800dc02 <__kernel_rem_pio2+0x1d2>
 800dbf2:	f1bb 0f01 	cmp.w	fp, #1
 800dbf6:	f000 80bf 	beq.w	800dd78 <__kernel_rem_pio2+0x348>
 800dbfa:	f1bb 0f02 	cmp.w	fp, #2
 800dbfe:	f000 80c6 	beq.w	800dd8e <__kernel_rem_pio2+0x35e>
 800dc02:	f1b9 0f02 	cmp.w	r9, #2
 800dc06:	d14c      	bne.n	800dca2 <__kernel_rem_pio2+0x272>
 800dc08:	4632      	mov	r2, r6
 800dc0a:	463b      	mov	r3, r7
 800dc0c:	494e      	ldr	r1, [pc, #312]	@ (800dd48 <__kernel_rem_pio2+0x318>)
 800dc0e:	2000      	movs	r0, #0
 800dc10:	f7f2 fb62 	bl	80002d8 <__aeabi_dsub>
 800dc14:	4606      	mov	r6, r0
 800dc16:	460f      	mov	r7, r1
 800dc18:	2d00      	cmp	r5, #0
 800dc1a:	d042      	beq.n	800dca2 <__kernel_rem_pio2+0x272>
 800dc1c:	4658      	mov	r0, fp
 800dc1e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800dd38 <__kernel_rem_pio2+0x308>
 800dc22:	f000 fa5d 	bl	800e0e0 <scalbn>
 800dc26:	4630      	mov	r0, r6
 800dc28:	4639      	mov	r1, r7
 800dc2a:	ec53 2b10 	vmov	r2, r3, d0
 800dc2e:	f7f2 fb53 	bl	80002d8 <__aeabi_dsub>
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	e034      	b.n	800dca2 <__kernel_rem_pio2+0x272>
 800dc38:	4b44      	ldr	r3, [pc, #272]	@ (800dd4c <__kernel_rem_pio2+0x31c>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc40:	f7f2 fd02 	bl	8000648 <__aeabi_dmul>
 800dc44:	f7f2 ffb0 	bl	8000ba8 <__aeabi_d2iz>
 800dc48:	f7f2 fc94 	bl	8000574 <__aeabi_i2d>
 800dc4c:	4b40      	ldr	r3, [pc, #256]	@ (800dd50 <__kernel_rem_pio2+0x320>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	4606      	mov	r6, r0
 800dc52:	460f      	mov	r7, r1
 800dc54:	f7f2 fcf8 	bl	8000648 <__aeabi_dmul>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc60:	f7f2 fb3a 	bl	80002d8 <__aeabi_dsub>
 800dc64:	f7f2 ffa0 	bl	8000ba8 <__aeabi_d2iz>
 800dc68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc6c:	f849 0b04 	str.w	r0, [r9], #4
 800dc70:	4639      	mov	r1, r7
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7f2 fb32 	bl	80002dc <__adddf3>
 800dc78:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800dc7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc80:	e75d      	b.n	800db3e <__kernel_rem_pio2+0x10e>
 800dc82:	d107      	bne.n	800dc94 <__kernel_rem_pio2+0x264>
 800dc84:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800dc88:	aa0c      	add	r2, sp, #48	@ 0x30
 800dc8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc8e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800dc92:	e79e      	b.n	800dbd2 <__kernel_rem_pio2+0x1a2>
 800dc94:	4b2f      	ldr	r3, [pc, #188]	@ (800dd54 <__kernel_rem_pio2+0x324>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	f7f2 ff5c 	bl	8000b54 <__aeabi_dcmpge>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d143      	bne.n	800dd28 <__kernel_rem_pio2+0x2f8>
 800dca0:	4681      	mov	r9, r0
 800dca2:	2200      	movs	r2, #0
 800dca4:	2300      	movs	r3, #0
 800dca6:	4630      	mov	r0, r6
 800dca8:	4639      	mov	r1, r7
 800dcaa:	f7f2 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	f000 80bf 	beq.w	800de32 <__kernel_rem_pio2+0x402>
 800dcb4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800dcb8:	2200      	movs	r2, #0
 800dcba:	9900      	ldr	r1, [sp, #0]
 800dcbc:	428b      	cmp	r3, r1
 800dcbe:	da6e      	bge.n	800dd9e <__kernel_rem_pio2+0x36e>
 800dcc0:	2a00      	cmp	r2, #0
 800dcc2:	f000 8089 	beq.w	800ddd8 <__kernel_rem_pio2+0x3a8>
 800dcc6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800dcca:	ab0c      	add	r3, sp, #48	@ 0x30
 800dccc:	f1ab 0b18 	sub.w	fp, fp, #24
 800dcd0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d0f6      	beq.n	800dcc6 <__kernel_rem_pio2+0x296>
 800dcd8:	4658      	mov	r0, fp
 800dcda:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800dd38 <__kernel_rem_pio2+0x308>
 800dcde:	f000 f9ff 	bl	800e0e0 <scalbn>
 800dce2:	f108 0301 	add.w	r3, r8, #1
 800dce6:	00da      	lsls	r2, r3, #3
 800dce8:	9205      	str	r2, [sp, #20]
 800dcea:	ec55 4b10 	vmov	r4, r5, d0
 800dcee:	aa70      	add	r2, sp, #448	@ 0x1c0
 800dcf0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800dd4c <__kernel_rem_pio2+0x31c>
 800dcf4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800dcf8:	4646      	mov	r6, r8
 800dcfa:	f04f 0a00 	mov.w	sl, #0
 800dcfe:	2e00      	cmp	r6, #0
 800dd00:	f280 80cf 	bge.w	800dea2 <__kernel_rem_pio2+0x472>
 800dd04:	4644      	mov	r4, r8
 800dd06:	2c00      	cmp	r4, #0
 800dd08:	f2c0 80fd 	blt.w	800df06 <__kernel_rem_pio2+0x4d6>
 800dd0c:	4b12      	ldr	r3, [pc, #72]	@ (800dd58 <__kernel_rem_pio2+0x328>)
 800dd0e:	461f      	mov	r7, r3
 800dd10:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dd12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd16:	9306      	str	r3, [sp, #24]
 800dd18:	f04f 0a00 	mov.w	sl, #0
 800dd1c:	f04f 0b00 	mov.w	fp, #0
 800dd20:	2600      	movs	r6, #0
 800dd22:	eba8 0504 	sub.w	r5, r8, r4
 800dd26:	e0e2      	b.n	800deee <__kernel_rem_pio2+0x4be>
 800dd28:	f04f 0902 	mov.w	r9, #2
 800dd2c:	e754      	b.n	800dbd8 <__kernel_rem_pio2+0x1a8>
 800dd2e:	bf00      	nop
	...
 800dd3c:	3ff00000 	.word	0x3ff00000
 800dd40:	0800ebf0 	.word	0x0800ebf0
 800dd44:	40200000 	.word	0x40200000
 800dd48:	3ff00000 	.word	0x3ff00000
 800dd4c:	3e700000 	.word	0x3e700000
 800dd50:	41700000 	.word	0x41700000
 800dd54:	3fe00000 	.word	0x3fe00000
 800dd58:	0800ebb0 	.word	0x0800ebb0
 800dd5c:	f854 3b04 	ldr.w	r3, [r4], #4
 800dd60:	b945      	cbnz	r5, 800dd74 <__kernel_rem_pio2+0x344>
 800dd62:	b123      	cbz	r3, 800dd6e <__kernel_rem_pio2+0x33e>
 800dd64:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800dd68:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	3201      	adds	r2, #1
 800dd70:	461d      	mov	r5, r3
 800dd72:	e738      	b.n	800dbe6 <__kernel_rem_pio2+0x1b6>
 800dd74:	1acb      	subs	r3, r1, r3
 800dd76:	e7f7      	b.n	800dd68 <__kernel_rem_pio2+0x338>
 800dd78:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800dd7c:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dd86:	a90c      	add	r1, sp, #48	@ 0x30
 800dd88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dd8c:	e739      	b.n	800dc02 <__kernel_rem_pio2+0x1d2>
 800dd8e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800dd92:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dd9c:	e7f3      	b.n	800dd86 <__kernel_rem_pio2+0x356>
 800dd9e:	a90c      	add	r1, sp, #48	@ 0x30
 800dda0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dda4:	3b01      	subs	r3, #1
 800dda6:	430a      	orrs	r2, r1
 800dda8:	e787      	b.n	800dcba <__kernel_rem_pio2+0x28a>
 800ddaa:	3401      	adds	r4, #1
 800ddac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ddb0:	2a00      	cmp	r2, #0
 800ddb2:	d0fa      	beq.n	800ddaa <__kernel_rem_pio2+0x37a>
 800ddb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ddba:	eb0d 0503 	add.w	r5, sp, r3
 800ddbe:	9b06      	ldr	r3, [sp, #24]
 800ddc0:	aa20      	add	r2, sp, #128	@ 0x80
 800ddc2:	4443      	add	r3, r8
 800ddc4:	f108 0701 	add.w	r7, r8, #1
 800ddc8:	3d98      	subs	r5, #152	@ 0x98
 800ddca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ddce:	4444      	add	r4, r8
 800ddd0:	42bc      	cmp	r4, r7
 800ddd2:	da04      	bge.n	800ddde <__kernel_rem_pio2+0x3ae>
 800ddd4:	46a0      	mov	r8, r4
 800ddd6:	e6a2      	b.n	800db1e <__kernel_rem_pio2+0xee>
 800ddd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddda:	2401      	movs	r4, #1
 800dddc:	e7e6      	b.n	800ddac <__kernel_rem_pio2+0x37c>
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800dde4:	f7f2 fbc6 	bl	8000574 <__aeabi_i2d>
 800dde8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e0b0 <__kernel_rem_pio2+0x680>
 800ddec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ddf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ddf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddf8:	46b2      	mov	sl, r6
 800ddfa:	f04f 0800 	mov.w	r8, #0
 800ddfe:	9b05      	ldr	r3, [sp, #20]
 800de00:	4598      	cmp	r8, r3
 800de02:	dd05      	ble.n	800de10 <__kernel_rem_pio2+0x3e0>
 800de04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de08:	3701      	adds	r7, #1
 800de0a:	eca5 7b02 	vstmia	r5!, {d7}
 800de0e:	e7df      	b.n	800ddd0 <__kernel_rem_pio2+0x3a0>
 800de10:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800de14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800de18:	f7f2 fc16 	bl	8000648 <__aeabi_dmul>
 800de1c:	4602      	mov	r2, r0
 800de1e:	460b      	mov	r3, r1
 800de20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de24:	f7f2 fa5a 	bl	80002dc <__adddf3>
 800de28:	f108 0801 	add.w	r8, r8, #1
 800de2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de30:	e7e5      	b.n	800ddfe <__kernel_rem_pio2+0x3ce>
 800de32:	f1cb 0000 	rsb	r0, fp, #0
 800de36:	ec47 6b10 	vmov	d0, r6, r7
 800de3a:	f000 f951 	bl	800e0e0 <scalbn>
 800de3e:	ec55 4b10 	vmov	r4, r5, d0
 800de42:	4b9d      	ldr	r3, [pc, #628]	@ (800e0b8 <__kernel_rem_pio2+0x688>)
 800de44:	2200      	movs	r2, #0
 800de46:	4620      	mov	r0, r4
 800de48:	4629      	mov	r1, r5
 800de4a:	f7f2 fe83 	bl	8000b54 <__aeabi_dcmpge>
 800de4e:	b300      	cbz	r0, 800de92 <__kernel_rem_pio2+0x462>
 800de50:	4b9a      	ldr	r3, [pc, #616]	@ (800e0bc <__kernel_rem_pio2+0x68c>)
 800de52:	2200      	movs	r2, #0
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	f7f2 fbf6 	bl	8000648 <__aeabi_dmul>
 800de5c:	f7f2 fea4 	bl	8000ba8 <__aeabi_d2iz>
 800de60:	4606      	mov	r6, r0
 800de62:	f7f2 fb87 	bl	8000574 <__aeabi_i2d>
 800de66:	4b94      	ldr	r3, [pc, #592]	@ (800e0b8 <__kernel_rem_pio2+0x688>)
 800de68:	2200      	movs	r2, #0
 800de6a:	f7f2 fbed 	bl	8000648 <__aeabi_dmul>
 800de6e:	460b      	mov	r3, r1
 800de70:	4602      	mov	r2, r0
 800de72:	4629      	mov	r1, r5
 800de74:	4620      	mov	r0, r4
 800de76:	f7f2 fa2f 	bl	80002d8 <__aeabi_dsub>
 800de7a:	f7f2 fe95 	bl	8000ba8 <__aeabi_d2iz>
 800de7e:	ab0c      	add	r3, sp, #48	@ 0x30
 800de80:	f10b 0b18 	add.w	fp, fp, #24
 800de84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800de88:	f108 0801 	add.w	r8, r8, #1
 800de8c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800de90:	e722      	b.n	800dcd8 <__kernel_rem_pio2+0x2a8>
 800de92:	4620      	mov	r0, r4
 800de94:	4629      	mov	r1, r5
 800de96:	f7f2 fe87 	bl	8000ba8 <__aeabi_d2iz>
 800de9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800de9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dea0:	e71a      	b.n	800dcd8 <__kernel_rem_pio2+0x2a8>
 800dea2:	ab0c      	add	r3, sp, #48	@ 0x30
 800dea4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dea8:	f7f2 fb64 	bl	8000574 <__aeabi_i2d>
 800deac:	4622      	mov	r2, r4
 800deae:	462b      	mov	r3, r5
 800deb0:	f7f2 fbca 	bl	8000648 <__aeabi_dmul>
 800deb4:	4652      	mov	r2, sl
 800deb6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800deba:	465b      	mov	r3, fp
 800debc:	4620      	mov	r0, r4
 800debe:	4629      	mov	r1, r5
 800dec0:	f7f2 fbc2 	bl	8000648 <__aeabi_dmul>
 800dec4:	3e01      	subs	r6, #1
 800dec6:	4604      	mov	r4, r0
 800dec8:	460d      	mov	r5, r1
 800deca:	e718      	b.n	800dcfe <__kernel_rem_pio2+0x2ce>
 800decc:	9906      	ldr	r1, [sp, #24]
 800dece:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800ded2:	9106      	str	r1, [sp, #24]
 800ded4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800ded8:	f7f2 fbb6 	bl	8000648 <__aeabi_dmul>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4650      	mov	r0, sl
 800dee2:	4659      	mov	r1, fp
 800dee4:	f7f2 f9fa 	bl	80002dc <__adddf3>
 800dee8:	3601      	adds	r6, #1
 800deea:	4682      	mov	sl, r0
 800deec:	468b      	mov	fp, r1
 800deee:	9b00      	ldr	r3, [sp, #0]
 800def0:	429e      	cmp	r6, r3
 800def2:	dc01      	bgt.n	800def8 <__kernel_rem_pio2+0x4c8>
 800def4:	42b5      	cmp	r5, r6
 800def6:	dae9      	bge.n	800decc <__kernel_rem_pio2+0x49c>
 800def8:	ab48      	add	r3, sp, #288	@ 0x120
 800defa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800defe:	e9c5 ab00 	strd	sl, fp, [r5]
 800df02:	3c01      	subs	r4, #1
 800df04:	e6ff      	b.n	800dd06 <__kernel_rem_pio2+0x2d6>
 800df06:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800df08:	2b02      	cmp	r3, #2
 800df0a:	dc0b      	bgt.n	800df24 <__kernel_rem_pio2+0x4f4>
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	dc39      	bgt.n	800df84 <__kernel_rem_pio2+0x554>
 800df10:	d05d      	beq.n	800dfce <__kernel_rem_pio2+0x59e>
 800df12:	9b02      	ldr	r3, [sp, #8]
 800df14:	f003 0007 	and.w	r0, r3, #7
 800df18:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800df1c:	ecbd 8b02 	vpop	{d8}
 800df20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df24:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800df26:	2b03      	cmp	r3, #3
 800df28:	d1f3      	bne.n	800df12 <__kernel_rem_pio2+0x4e2>
 800df2a:	9b05      	ldr	r3, [sp, #20]
 800df2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800df30:	eb0d 0403 	add.w	r4, sp, r3
 800df34:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800df38:	4625      	mov	r5, r4
 800df3a:	46c2      	mov	sl, r8
 800df3c:	f1ba 0f00 	cmp.w	sl, #0
 800df40:	f1a5 0508 	sub.w	r5, r5, #8
 800df44:	dc6b      	bgt.n	800e01e <__kernel_rem_pio2+0x5ee>
 800df46:	4645      	mov	r5, r8
 800df48:	2d01      	cmp	r5, #1
 800df4a:	f1a4 0408 	sub.w	r4, r4, #8
 800df4e:	f300 8087 	bgt.w	800e060 <__kernel_rem_pio2+0x630>
 800df52:	9c05      	ldr	r4, [sp, #20]
 800df54:	ab48      	add	r3, sp, #288	@ 0x120
 800df56:	441c      	add	r4, r3
 800df58:	2000      	movs	r0, #0
 800df5a:	2100      	movs	r1, #0
 800df5c:	f1b8 0f01 	cmp.w	r8, #1
 800df60:	f300 809c 	bgt.w	800e09c <__kernel_rem_pio2+0x66c>
 800df64:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800df68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800df6c:	f1b9 0f00 	cmp.w	r9, #0
 800df70:	f040 80a6 	bne.w	800e0c0 <__kernel_rem_pio2+0x690>
 800df74:	9b04      	ldr	r3, [sp, #16]
 800df76:	e9c3 7800 	strd	r7, r8, [r3]
 800df7a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800df7e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800df82:	e7c6      	b.n	800df12 <__kernel_rem_pio2+0x4e2>
 800df84:	9d05      	ldr	r5, [sp, #20]
 800df86:	ab48      	add	r3, sp, #288	@ 0x120
 800df88:	441d      	add	r5, r3
 800df8a:	4644      	mov	r4, r8
 800df8c:	2000      	movs	r0, #0
 800df8e:	2100      	movs	r1, #0
 800df90:	2c00      	cmp	r4, #0
 800df92:	da35      	bge.n	800e000 <__kernel_rem_pio2+0x5d0>
 800df94:	f1b9 0f00 	cmp.w	r9, #0
 800df98:	d038      	beq.n	800e00c <__kernel_rem_pio2+0x5dc>
 800df9a:	4602      	mov	r2, r0
 800df9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfa0:	9c04      	ldr	r4, [sp, #16]
 800dfa2:	e9c4 2300 	strd	r2, r3, [r4]
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800dfae:	f7f2 f993 	bl	80002d8 <__aeabi_dsub>
 800dfb2:	ad4a      	add	r5, sp, #296	@ 0x128
 800dfb4:	2401      	movs	r4, #1
 800dfb6:	45a0      	cmp	r8, r4
 800dfb8:	da2b      	bge.n	800e012 <__kernel_rem_pio2+0x5e2>
 800dfba:	f1b9 0f00 	cmp.w	r9, #0
 800dfbe:	d002      	beq.n	800dfc6 <__kernel_rem_pio2+0x596>
 800dfc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	9b04      	ldr	r3, [sp, #16]
 800dfc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dfcc:	e7a1      	b.n	800df12 <__kernel_rem_pio2+0x4e2>
 800dfce:	9c05      	ldr	r4, [sp, #20]
 800dfd0:	ab48      	add	r3, sp, #288	@ 0x120
 800dfd2:	441c      	add	r4, r3
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	f1b8 0f00 	cmp.w	r8, #0
 800dfdc:	da09      	bge.n	800dff2 <__kernel_rem_pio2+0x5c2>
 800dfde:	f1b9 0f00 	cmp.w	r9, #0
 800dfe2:	d002      	beq.n	800dfea <__kernel_rem_pio2+0x5ba>
 800dfe4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfe8:	4619      	mov	r1, r3
 800dfea:	9b04      	ldr	r3, [sp, #16]
 800dfec:	e9c3 0100 	strd	r0, r1, [r3]
 800dff0:	e78f      	b.n	800df12 <__kernel_rem_pio2+0x4e2>
 800dff2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dff6:	f7f2 f971 	bl	80002dc <__adddf3>
 800dffa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800dffe:	e7eb      	b.n	800dfd8 <__kernel_rem_pio2+0x5a8>
 800e000:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e004:	f7f2 f96a 	bl	80002dc <__adddf3>
 800e008:	3c01      	subs	r4, #1
 800e00a:	e7c1      	b.n	800df90 <__kernel_rem_pio2+0x560>
 800e00c:	4602      	mov	r2, r0
 800e00e:	460b      	mov	r3, r1
 800e010:	e7c6      	b.n	800dfa0 <__kernel_rem_pio2+0x570>
 800e012:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e016:	f7f2 f961 	bl	80002dc <__adddf3>
 800e01a:	3401      	adds	r4, #1
 800e01c:	e7cb      	b.n	800dfb6 <__kernel_rem_pio2+0x586>
 800e01e:	ed95 7b00 	vldr	d7, [r5]
 800e022:	ed8d 7b00 	vstr	d7, [sp]
 800e026:	ed95 7b02 	vldr	d7, [r5, #8]
 800e02a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e02e:	ec53 2b17 	vmov	r2, r3, d7
 800e032:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e036:	f7f2 f951 	bl	80002dc <__adddf3>
 800e03a:	4602      	mov	r2, r0
 800e03c:	460b      	mov	r3, r1
 800e03e:	4606      	mov	r6, r0
 800e040:	460f      	mov	r7, r1
 800e042:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e046:	f7f2 f947 	bl	80002d8 <__aeabi_dsub>
 800e04a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e04e:	f7f2 f945 	bl	80002dc <__adddf3>
 800e052:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e056:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e05a:	e9c5 6700 	strd	r6, r7, [r5]
 800e05e:	e76d      	b.n	800df3c <__kernel_rem_pio2+0x50c>
 800e060:	ed94 7b00 	vldr	d7, [r4]
 800e064:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e068:	ec51 0b17 	vmov	r0, r1, d7
 800e06c:	4652      	mov	r2, sl
 800e06e:	465b      	mov	r3, fp
 800e070:	ed8d 7b00 	vstr	d7, [sp]
 800e074:	f7f2 f932 	bl	80002dc <__adddf3>
 800e078:	4602      	mov	r2, r0
 800e07a:	460b      	mov	r3, r1
 800e07c:	4606      	mov	r6, r0
 800e07e:	460f      	mov	r7, r1
 800e080:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e084:	f7f2 f928 	bl	80002d8 <__aeabi_dsub>
 800e088:	4652      	mov	r2, sl
 800e08a:	465b      	mov	r3, fp
 800e08c:	f7f2 f926 	bl	80002dc <__adddf3>
 800e090:	3d01      	subs	r5, #1
 800e092:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e096:	e9c4 6700 	strd	r6, r7, [r4]
 800e09a:	e755      	b.n	800df48 <__kernel_rem_pio2+0x518>
 800e09c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0a0:	f7f2 f91c 	bl	80002dc <__adddf3>
 800e0a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e0a8:	e758      	b.n	800df5c <__kernel_rem_pio2+0x52c>
 800e0aa:	bf00      	nop
 800e0ac:	f3af 8000 	nop.w
	...
 800e0b8:	41700000 	.word	0x41700000
 800e0bc:	3e700000 	.word	0x3e700000
 800e0c0:	9b04      	ldr	r3, [sp, #16]
 800e0c2:	9a04      	ldr	r2, [sp, #16]
 800e0c4:	601f      	str	r7, [r3, #0]
 800e0c6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e0ca:	605c      	str	r4, [r3, #4]
 800e0cc:	609d      	str	r5, [r3, #8]
 800e0ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e0d2:	60d3      	str	r3, [r2, #12]
 800e0d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0d8:	6110      	str	r0, [r2, #16]
 800e0da:	6153      	str	r3, [r2, #20]
 800e0dc:	e719      	b.n	800df12 <__kernel_rem_pio2+0x4e2>
 800e0de:	bf00      	nop

0800e0e0 <scalbn>:
 800e0e0:	b570      	push	{r4, r5, r6, lr}
 800e0e2:	ec55 4b10 	vmov	r4, r5, d0
 800e0e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	462b      	mov	r3, r5
 800e0ee:	b991      	cbnz	r1, 800e116 <scalbn+0x36>
 800e0f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e0f4:	4323      	orrs	r3, r4
 800e0f6:	d03d      	beq.n	800e174 <scalbn+0x94>
 800e0f8:	4b35      	ldr	r3, [pc, #212]	@ (800e1d0 <scalbn+0xf0>)
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	2200      	movs	r2, #0
 800e100:	f7f2 faa2 	bl	8000648 <__aeabi_dmul>
 800e104:	4b33      	ldr	r3, [pc, #204]	@ (800e1d4 <scalbn+0xf4>)
 800e106:	429e      	cmp	r6, r3
 800e108:	4604      	mov	r4, r0
 800e10a:	460d      	mov	r5, r1
 800e10c:	da0f      	bge.n	800e12e <scalbn+0x4e>
 800e10e:	a328      	add	r3, pc, #160	@ (adr r3, 800e1b0 <scalbn+0xd0>)
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	e01e      	b.n	800e154 <scalbn+0x74>
 800e116:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e11a:	4291      	cmp	r1, r2
 800e11c:	d10b      	bne.n	800e136 <scalbn+0x56>
 800e11e:	4622      	mov	r2, r4
 800e120:	4620      	mov	r0, r4
 800e122:	4629      	mov	r1, r5
 800e124:	f7f2 f8da 	bl	80002dc <__adddf3>
 800e128:	4604      	mov	r4, r0
 800e12a:	460d      	mov	r5, r1
 800e12c:	e022      	b.n	800e174 <scalbn+0x94>
 800e12e:	460b      	mov	r3, r1
 800e130:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e134:	3936      	subs	r1, #54	@ 0x36
 800e136:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e13a:	4296      	cmp	r6, r2
 800e13c:	dd0d      	ble.n	800e15a <scalbn+0x7a>
 800e13e:	2d00      	cmp	r5, #0
 800e140:	a11d      	add	r1, pc, #116	@ (adr r1, 800e1b8 <scalbn+0xd8>)
 800e142:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e146:	da02      	bge.n	800e14e <scalbn+0x6e>
 800e148:	a11d      	add	r1, pc, #116	@ (adr r1, 800e1c0 <scalbn+0xe0>)
 800e14a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e14e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e1b8 <scalbn+0xd8>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	f7f2 fa78 	bl	8000648 <__aeabi_dmul>
 800e158:	e7e6      	b.n	800e128 <scalbn+0x48>
 800e15a:	1872      	adds	r2, r6, r1
 800e15c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e160:	428a      	cmp	r2, r1
 800e162:	dcec      	bgt.n	800e13e <scalbn+0x5e>
 800e164:	2a00      	cmp	r2, #0
 800e166:	dd08      	ble.n	800e17a <scalbn+0x9a>
 800e168:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e16c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e170:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e174:	ec45 4b10 	vmov	d0, r4, r5
 800e178:	bd70      	pop	{r4, r5, r6, pc}
 800e17a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e17e:	da08      	bge.n	800e192 <scalbn+0xb2>
 800e180:	2d00      	cmp	r5, #0
 800e182:	a10b      	add	r1, pc, #44	@ (adr r1, 800e1b0 <scalbn+0xd0>)
 800e184:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e188:	dac1      	bge.n	800e10e <scalbn+0x2e>
 800e18a:	a10f      	add	r1, pc, #60	@ (adr r1, 800e1c8 <scalbn+0xe8>)
 800e18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e190:	e7bd      	b.n	800e10e <scalbn+0x2e>
 800e192:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e196:	3236      	adds	r2, #54	@ 0x36
 800e198:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e19c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d8 <scalbn+0xf8>)
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	e7d4      	b.n	800e154 <scalbn+0x74>
 800e1aa:	bf00      	nop
 800e1ac:	f3af 8000 	nop.w
 800e1b0:	c2f8f359 	.word	0xc2f8f359
 800e1b4:	01a56e1f 	.word	0x01a56e1f
 800e1b8:	8800759c 	.word	0x8800759c
 800e1bc:	7e37e43c 	.word	0x7e37e43c
 800e1c0:	8800759c 	.word	0x8800759c
 800e1c4:	fe37e43c 	.word	0xfe37e43c
 800e1c8:	c2f8f359 	.word	0xc2f8f359
 800e1cc:	81a56e1f 	.word	0x81a56e1f
 800e1d0:	43500000 	.word	0x43500000
 800e1d4:	ffff3cb0 	.word	0xffff3cb0
 800e1d8:	3c900000 	.word	0x3c900000
 800e1dc:	00000000 	.word	0x00000000

0800e1e0 <floor>:
 800e1e0:	ec51 0b10 	vmov	r0, r1, d0
 800e1e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e1f0:	2e13      	cmp	r6, #19
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	dc34      	bgt.n	800e264 <floor+0x84>
 800e1fa:	2e00      	cmp	r6, #0
 800e1fc:	da17      	bge.n	800e22e <floor+0x4e>
 800e1fe:	a332      	add	r3, pc, #200	@ (adr r3, 800e2c8 <floor+0xe8>)
 800e200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e204:	f7f2 f86a 	bl	80002dc <__adddf3>
 800e208:	2200      	movs	r2, #0
 800e20a:	2300      	movs	r3, #0
 800e20c:	f7f2 fcac 	bl	8000b68 <__aeabi_dcmpgt>
 800e210:	b150      	cbz	r0, 800e228 <floor+0x48>
 800e212:	2c00      	cmp	r4, #0
 800e214:	da55      	bge.n	800e2c2 <floor+0xe2>
 800e216:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e21a:	432c      	orrs	r4, r5
 800e21c:	2500      	movs	r5, #0
 800e21e:	42ac      	cmp	r4, r5
 800e220:	4c2b      	ldr	r4, [pc, #172]	@ (800e2d0 <floor+0xf0>)
 800e222:	bf08      	it	eq
 800e224:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e228:	4621      	mov	r1, r4
 800e22a:	4628      	mov	r0, r5
 800e22c:	e023      	b.n	800e276 <floor+0x96>
 800e22e:	4f29      	ldr	r7, [pc, #164]	@ (800e2d4 <floor+0xf4>)
 800e230:	4137      	asrs	r7, r6
 800e232:	ea01 0307 	and.w	r3, r1, r7
 800e236:	4303      	orrs	r3, r0
 800e238:	d01d      	beq.n	800e276 <floor+0x96>
 800e23a:	a323      	add	r3, pc, #140	@ (adr r3, 800e2c8 <floor+0xe8>)
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	f7f2 f84c 	bl	80002dc <__adddf3>
 800e244:	2200      	movs	r2, #0
 800e246:	2300      	movs	r3, #0
 800e248:	f7f2 fc8e 	bl	8000b68 <__aeabi_dcmpgt>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d0eb      	beq.n	800e228 <floor+0x48>
 800e250:	2c00      	cmp	r4, #0
 800e252:	bfbe      	ittt	lt
 800e254:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e258:	4133      	asrlt	r3, r6
 800e25a:	18e4      	addlt	r4, r4, r3
 800e25c:	ea24 0407 	bic.w	r4, r4, r7
 800e260:	2500      	movs	r5, #0
 800e262:	e7e1      	b.n	800e228 <floor+0x48>
 800e264:	2e33      	cmp	r6, #51	@ 0x33
 800e266:	dd0a      	ble.n	800e27e <floor+0x9e>
 800e268:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e26c:	d103      	bne.n	800e276 <floor+0x96>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	f7f2 f833 	bl	80002dc <__adddf3>
 800e276:	ec41 0b10 	vmov	d0, r0, r1
 800e27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e282:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e286:	40df      	lsrs	r7, r3
 800e288:	4207      	tst	r7, r0
 800e28a:	d0f4      	beq.n	800e276 <floor+0x96>
 800e28c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e2c8 <floor+0xe8>)
 800e28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e292:	f7f2 f823 	bl	80002dc <__adddf3>
 800e296:	2200      	movs	r2, #0
 800e298:	2300      	movs	r3, #0
 800e29a:	f7f2 fc65 	bl	8000b68 <__aeabi_dcmpgt>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d0c2      	beq.n	800e228 <floor+0x48>
 800e2a2:	2c00      	cmp	r4, #0
 800e2a4:	da0a      	bge.n	800e2bc <floor+0xdc>
 800e2a6:	2e14      	cmp	r6, #20
 800e2a8:	d101      	bne.n	800e2ae <floor+0xce>
 800e2aa:	3401      	adds	r4, #1
 800e2ac:	e006      	b.n	800e2bc <floor+0xdc>
 800e2ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	40b3      	lsls	r3, r6
 800e2b6:	441d      	add	r5, r3
 800e2b8:	4545      	cmp	r5, r8
 800e2ba:	d3f6      	bcc.n	800e2aa <floor+0xca>
 800e2bc:	ea25 0507 	bic.w	r5, r5, r7
 800e2c0:	e7b2      	b.n	800e228 <floor+0x48>
 800e2c2:	2500      	movs	r5, #0
 800e2c4:	462c      	mov	r4, r5
 800e2c6:	e7af      	b.n	800e228 <floor+0x48>
 800e2c8:	8800759c 	.word	0x8800759c
 800e2cc:	7e37e43c 	.word	0x7e37e43c
 800e2d0:	bff00000 	.word	0xbff00000
 800e2d4:	000fffff 	.word	0x000fffff

0800e2d8 <_init>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	bf00      	nop
 800e2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2de:	bc08      	pop	{r3}
 800e2e0:	469e      	mov	lr, r3
 800e2e2:	4770      	bx	lr

0800e2e4 <_fini>:
 800e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e6:	bf00      	nop
 800e2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ea:	bc08      	pop	{r3}
 800e2ec:	469e      	mov	lr, r3
 800e2ee:	4770      	bx	lr
