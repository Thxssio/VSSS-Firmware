
VSSS_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d0c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f24  08005f24  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f24  08005f24  00006f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f2c  08005f2c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005f34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000010  08005f40  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005f40  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b40  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a5  00000000  00000000  0001ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0001d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e70  00000000  00000000  0001e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e9e3  00000000  00000000  0001f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014610  00000000  00000000  0003dbdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8346  00000000  00000000  000521eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a531  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  0011a574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ecc 	.word	0x08005ecc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005ecc 	.word	0x08005ecc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000e84:	f7ff fe14 	bl	8000ab0 <__aeabi_dcmpgt>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8000e9a:	e011      	b.n	8000ec0 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000ea8:	f7ff fde4 	bl	8000a74 <__aeabi_dcmplt>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d100      	bne.n	8000eb4 <PID_Init+0x60>
}
 8000eb2:	e005      	b.n	8000ec0 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6278      	str	r0, [r7, #36]	@ 0x24
 8000ed0:	6239      	str	r1, [r7, #32]
 8000ed2:	61fa      	str	r2, [r7, #28]
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	ed87 0b04 	vstr	d0, [r7, #16]
 8000eda:	ed87 1b02 	vstr	d1, [r7, #8]
 8000ede:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eea:	6a3a      	ldr	r2, [r7, #32]
 8000eec:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8000efa:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8000f50 <PID+0x88>
 8000efe:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8000f58 <PID+0x90>
 8000f02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f04:	f000 f956 	bl	80011b4 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	2264      	movs	r2, #100	@ 0x64
 8000f0c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8000f0e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000f12:	4619      	mov	r1, r3
 8000f14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f16:	f000 fa63 	bl	80013e0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8000f1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f1e:	4619      	mov	r1, r3
 8000f20:	ed97 2b00 	vldr	d2, [r7]
 8000f24:	ed97 1b02 	vldr	d1, [r7, #8]
 8000f28:	ed97 0b04 	vldr	d0, [r7, #16]
 8000f2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f2e:	f000 f9af 	bl	8001290 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8000f32:	f001 fb5d 	bl	80025f0 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	1ad2      	subs	r2, r2, r3
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	605a      	str	r2, [r3, #4]

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	f3af 8000 	nop.w
 8000f50:	00000000 	.word	0x00000000
 8000f54:	406fe000 	.word	0x406fe000
	...

08000f60 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6278      	str	r0, [r7, #36]	@ 0x24
 8000f68:	6239      	str	r1, [r7, #32]
 8000f6a:	61fa      	str	r2, [r7, #28]
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f72:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f76:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 8000f7a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	ed97 2b00 	vldr	d2, [r7]
 8000f88:	ed97 1b02 	vldr	d1, [r7, #8]
 8000f8c:	ed97 0b04 	vldr	d0, [r7, #16]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	6a39      	ldr	r1, [r7, #32]
 8000f96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000f98:	f7ff ff96 	bl	8000ec8 <PID>
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	@ 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <PID_Compute+0x14>
	{
		return _FALSE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e0db      	b.n	8001170 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8000fb8:	f001 fb1a 	bl	80025f0 <HAL_GetTick>
 8000fbc:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	6a3a      	ldr	r2, [r7, #32]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	f0c0 80cd 	bcc.w	800116e <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fec:	f7ff f918 	bl	8000220 <__aeabi_dsub>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000ffe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001002:	f7ff f90d 	bl	8000220 <__aeabi_dsub>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800101a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101e:	f7ff fab7 	bl	8000590 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff f8fb 	bl	8000224 <__adddf3>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d114      	bne.n	800106a <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800104c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001050:	f7ff fa9e 	bl	8000590 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4620      	mov	r0, r4
 800105a:	4629      	mov	r1, r5
 800105c:	f7ff f8e0 	bl	8000220 <__aeabi_dsub>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001076:	f7ff fd1b 	bl	8000ab0 <__aeabi_dcmpgt>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800108c:	e010      	b.n	80010b0 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800109a:	f7ff fceb 	bl	8000a74 <__aeabi_dcmplt>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80010be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010c2:	f7ff fa65 	bl	8000590 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80010ce:	e005      	b.n	80010dc <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80010e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010ec:	f7ff fa50 	bl	8000590 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff f892 	bl	8000220 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001104:	f7ff f88e 	bl	8000224 <__adddf3>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001116:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800111a:	f7ff fcc9 	bl	8000ab0 <__aeabi_dcmpgt>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800112a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800112e:	e00e      	b.n	800114e <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800113a:	f7ff fc9b 	bl	8000a74 <__aeabi_dcmplt>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800114a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001156:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001160:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001168:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 800116e:	2300      	movs	r3, #0
	}

}
 8001170:	4618      	mov	r0, r3
 8001172:	3730      	adds	r7, #48	@ 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bdb0      	pop	{r4, r5, r7, pc}

08001178 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	2b01      	cmp	r3, #1
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <PID_SetMode+0x2e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	785b      	ldrb	r3, [r3, #1]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff fe57 	bl	8000e54 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	705a      	strb	r2, [r3, #1]

}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6178      	str	r0, [r7, #20]
 80011bc:	ed87 0b02 	vstr	d0, [r7, #8]
 80011c0:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80011c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011cc:	f7ff fc66 	bl	8000a9c <__aeabi_dcmpge>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d158      	bne.n	8001288 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80011d6:	6979      	ldr	r1, [r7, #20]
 80011d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011dc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 80011e0:	6979      	ldr	r1, [r7, #20]
 80011e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011e6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d04b      	beq.n	800128a <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001200:	f7ff fc56 	bl	8000ab0 <__aeabi_dcmpgt>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001214:	e9c1 2300 	strd	r2, r3, [r1]
 8001218:	e012      	b.n	8001240 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001228:	f7ff fc24 	bl	8000a74 <__aeabi_dcmplt>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800123c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800124c:	f7ff fc30 	bl	8000ab0 <__aeabi_dcmpgt>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800125c:	6979      	ldr	r1, [r7, #20]
 800125e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001262:	e012      	b.n	800128a <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001270:	f7ff fc00 	bl	8000a74 <__aeabi_dcmplt>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001280:	6979      	ldr	r1, [r7, #20]
 8001282:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001286:	e000      	b.n	800128a <PID_SetOutputLimits+0xd6>
		return;
 8001288:	bf00      	nop
		}
		else { }

	}

}
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	61f8      	str	r0, [r7, #28]
 8001298:	ed87 0b04 	vstr	d0, [r7, #16]
 800129c:	ed87 1b02 	vstr	d1, [r7, #8]
 80012a0:	ed87 2b00 	vstr	d2, [r7]
 80012a4:	460b      	mov	r3, r1
 80012a6:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012b4:	f7ff fbde 	bl	8000a74 <__aeabi_dcmplt>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f040 8089 	bne.w	80013d2 <PID_SetTunings2+0x142>
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012cc:	f7ff fbd2 	bl	8000a74 <__aeabi_dcmplt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d17d      	bne.n	80013d2 <PID_SetTunings2+0x142>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012e2:	f7ff fbc7 	bl	8000a74 <__aeabi_dcmplt>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d172      	bne.n	80013d2 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	7efa      	ldrb	r2, [r7, #27]
 80012f0:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80012f2:	7efb      	ldrb	r3, [r7, #27]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001304:	69f9      	ldr	r1, [r7, #28]
 8001306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800130a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800130e:	69f9      	ldr	r1, [r7, #28]
 8001310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001314:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001318:	69f9      	ldr	r1, [r7, #28]
 800131a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800131e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f8b8 	bl	800049c <__aeabi_ui2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <PID_SetTunings2+0x14c>)
 8001332:	f7ff fa57 	bl	80007e4 <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800133e:	69f9      	ldr	r1, [r7, #28]
 8001340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001344:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001348:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800134c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001350:	f7ff f91e 	bl	8000590 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	69f9      	ldr	r1, [r7, #28]
 800135a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800135e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001366:	f7ff fa3d 	bl	80007e4 <__aeabi_ddiv>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	69f9      	ldr	r1, [r7, #28]
 8001370:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	78db      	ldrb	r3, [r3, #3]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d12b      	bne.n	80013d4 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001382:	f04f 0000 	mov.w	r0, #0
 8001386:	f04f 0100 	mov.w	r1, #0
 800138a:	f7fe ff49 	bl	8000220 <__aeabi_dsub>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	69f9      	ldr	r1, [r7, #28]
 8001394:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800139e:	f04f 0000 	mov.w	r0, #0
 80013a2:	f04f 0100 	mov.w	r1, #0
 80013a6:	f7fe ff3b 	bl	8000220 <__aeabi_dsub>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	69f9      	ldr	r1, [r7, #28]
 80013b0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013ba:	f04f 0000 	mov.w	r0, #0
 80013be:	f04f 0100 	mov.w	r1, #0
 80013c2:	f7fe ff2d 	bl	8000220 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	69f9      	ldr	r1, [r7, #28]
 80013cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 80013d0:	e000      	b.n	80013d4 <PID_SetTunings2+0x144>
		return;
 80013d2:	bf00      	nop

	}

}
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	408f4000 	.word	0x408f4000

080013e0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d02e      	beq.n	8001452 <PID_SetControllerDirection+0x72>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	78db      	ldrb	r3, [r3, #3]
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d029      	beq.n	8001452 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001404:	f04f 0000 	mov.w	r0, #0
 8001408:	f04f 0100 	mov.w	r1, #0
 800140c:	f7fe ff08 	bl	8000220 <__aeabi_dsub>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001420:	f04f 0000 	mov.w	r0, #0
 8001424:	f04f 0100 	mov.w	r1, #0
 8001428:	f7fe fefa 	bl	8000220 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800143c:	f04f 0000 	mov.w	r0, #0
 8001440:	f04f 0100 	mov.w	r1, #0
 8001444:	f7fe feec 	bl	8000220 <__aeabi_dsub>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	70da      	strb	r2, [r3, #3]

}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd2e      	ble.n	80014ce <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f7ff f823 	bl	80004bc <__aeabi_i2d>
 8001476:	4604      	mov	r4, r0
 8001478:	460d      	mov	r5, r1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f80c 	bl	800049c <__aeabi_ui2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4620      	mov	r0, r4
 800148a:	4629      	mov	r1, r5
 800148c:	f7ff f9aa 	bl	80007e4 <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800149e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014a2:	f7ff f875 	bl	8000590 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80014b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ba:	f7ff f993 	bl	80007e4 <__aeabi_ddiv>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]

	}

}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014d8 <Motor_Control>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Motor_Control(uint32_t pwm_left, uint8_t dir_left,
                   uint32_t pwm_right, uint8_t dir_right)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	72fb      	strb	r3, [r7, #11]
 80014e8:	4613      	mov	r3, r2
 80014ea:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
  */

  // Motor Esquerdo
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <Motor_Control+0x7c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (GPIO_PinState)(dir_left));
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2102      	movs	r1, #2
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f001 fb0b 	bl	8002b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (GPIO_PinState)(!dir_left));
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	2104      	movs	r1, #4
 8001512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001516:	f001 faff 	bl	8002b18 <HAL_GPIO_WritePin>

  // Motor Direito
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <Motor_Control+0x80>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  (GPIO_PinState)(dir_right));
 8001522:	7abb      	ldrb	r3, [r7, #10]
 8001524:	461a      	mov	r2, r3
 8001526:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152e:	f001 faf3 	bl	8002b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (GPIO_PinState)(!dir_right));
 8001532:	7abb      	ldrb	r3, [r7, #10]
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001548:	f001 fae6 	bl	8002b18 <HAL_GPIO_WritePin>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200000dc 	.word	0x200000dc
 8001558:	20000090 	.word	0x20000090

0800155c <Calculate_RPM>:

void Calculate_RPM(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8001562:	f001 f845 	bl	80025f0 <HAL_GetTick>
 8001566:	6178      	str	r0, [r7, #20]
    uint32_t delta_time = now - last_time;
 8001568:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <Calculate_RPM+0xdc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	613b      	str	r3, [r7, #16]
    if (delta_time == 0) return;
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d05a      	beq.n	800162e <Calculate_RPM+0xd2>

    int16_t current_left_encoder  = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8001578:	4b30      	ldr	r3, [pc, #192]	@ (800163c <Calculate_RPM+0xe0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	81fb      	strh	r3, [r7, #14]
    int16_t current_right_encoder = (int16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8001580:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <Calculate_RPM+0xe4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	81bb      	strh	r3, [r7, #12]

    int16_t delta_left  = current_left_encoder  - last_left_encoder;
 8001588:	89fa      	ldrh	r2, [r7, #14]
 800158a:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <Calculate_RPM+0xe8>)
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	b29b      	uxth	r3, r3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	817b      	strh	r3, [r7, #10]
    int16_t delta_right = current_right_encoder - last_right_encoder;
 8001598:	89ba      	ldrh	r2, [r7, #12]
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <Calculate_RPM+0xec>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	813b      	strh	r3, [r7, #8]

    float dt_min = ((float)delta_time) / 60000.0f;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800164c <Calculate_RPM+0xf0>
 80015b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ba:	edc7 7a01 	vstr	s15, [r7, #4]
    left_rpm  = (delta_left  / (float)ENCODER_PULSES_PER_REV) / dt_min;
 80015be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001650 <Calculate_RPM+0xf4>
 80015ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015da:	ee16 0a90 	vmov	r0, s13
 80015de:	f7fe ff7f 	bl	80004e0 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	491b      	ldr	r1, [pc, #108]	@ (8001654 <Calculate_RPM+0xf8>)
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
    right_rpm = (delta_right / (float)ENCODER_PULSES_PER_REV) / dt_min;
 80015ec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001650 <Calculate_RPM+0xf4>
 80015fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001600:	edd7 7a01 	vldr	s15, [r7, #4]
 8001604:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001608:	ee16 0a90 	vmov	r0, s13
 800160c:	f7fe ff68 	bl	80004e0 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4910      	ldr	r1, [pc, #64]	@ (8001658 <Calculate_RPM+0xfc>)
 8001616:	e9c1 2300 	strd	r2, r3, [r1]

    last_left_encoder  = current_left_encoder;
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <Calculate_RPM+0xe8>)
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	8013      	strh	r3, [r2, #0]
    last_right_encoder = current_right_encoder;
 8001620:	4a09      	ldr	r2, [pc, #36]	@ (8001648 <Calculate_RPM+0xec>)
 8001622:	89bb      	ldrh	r3, [r7, #12]
 8001624:	8013      	strh	r3, [r2, #0]
    last_time          = now;
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <Calculate_RPM+0xdc>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e000      	b.n	8001630 <Calculate_RPM+0xd4>
    if (delta_time == 0) return;
 800162e:	bf00      	nop
}
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000384 	.word	0x20000384
 800163c:	20000128 	.word	0x20000128
 8001640:	20000174 	.word	0x20000174
 8001644:	20000380 	.word	0x20000380
 8001648:	20000382 	.word	0x20000382
 800164c:	476a6000 	.word	0x476a6000
 8001650:	452be000 	.word	0x452be000
 8001654:	20000338 	.word	0x20000338
 8001658:	20000340 	.word	0x20000340
 800165c:	00000000 	.word	0x00000000

08001660 <Set_Motor_Speeds>:


void Set_Motor_Speeds(float vL, float vR) {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
 800166a:	edc7 0a00 	vstr	s1, [r7]
    Calculate_RPM();
 800166e:	f7ff ff75 	bl	800155c <Calculate_RPM>

    float target_rpm_left  = (vL * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe ff34 	bl	80004e0 <__aeabi_f2d>
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b80      	ldr	r3, [pc, #512]	@ (8001880 <Set_Motor_Speeds+0x220>)
 800167e:	f7fe ff87 	bl	8000590 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	a377      	add	r3, pc, #476	@ (adr r3, 8001868 <Set_Motor_Speeds+0x208>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7ff f8a8 	bl	80007e4 <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fa12 	bl	8000ac4 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	61fb      	str	r3, [r7, #28]
    float target_rpm_right = (vR * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f7fe ff1b 	bl	80004e0 <__aeabi_f2d>
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b74      	ldr	r3, [pc, #464]	@ (8001880 <Set_Motor_Speeds+0x220>)
 80016b0:	f7fe ff6e 	bl	8000590 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8001868 <Set_Motor_Speeds+0x208>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7ff f88f 	bl	80007e4 <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff f9f9 	bl	8000ac4 <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	61bb      	str	r3, [r7, #24]

    setpoint_left_rpm = target_rpm_left;
 80016d6:	69f8      	ldr	r0, [r7, #28]
 80016d8:	f7fe ff02 	bl	80004e0 <__aeabi_f2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4968      	ldr	r1, [pc, #416]	@ (8001884 <Set_Motor_Speeds+0x224>)
 80016e2:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 80016e6:	69b8      	ldr	r0, [r7, #24]
 80016e8:	f7fe fefa 	bl	80004e0 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4965      	ldr	r1, [pc, #404]	@ (8001888 <Set_Motor_Speeds+0x228>)
 80016f2:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft = left_rpm;
 80016f6:	4b65      	ldr	r3, [pc, #404]	@ (800188c <Set_Motor_Speeds+0x22c>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	4964      	ldr	r1, [pc, #400]	@ (8001890 <Set_Motor_Speeds+0x230>)
 80016fe:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_rpm;
 8001702:	4b64      	ldr	r3, [pc, #400]	@ (8001894 <Set_Motor_Speeds+0x234>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	4963      	ldr	r1, [pc, #396]	@ (8001898 <Set_Motor_Speeds+0x238>)
 800170a:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 800170e:	4863      	ldr	r0, [pc, #396]	@ (800189c <Set_Motor_Speeds+0x23c>)
 8001710:	f7ff fc48 	bl	8000fa4 <PID_Compute>
    PID_Compute(&pidRight);
 8001714:	4862      	ldr	r0, [pc, #392]	@ (80018a0 <Set_Motor_Speeds+0x240>)
 8001716:	f7ff fc45 	bl	8000fa4 <PID_Compute>

    float pwm_left  = fabs(outputLeft);
 800171a:	4b62      	ldr	r3, [pc, #392]	@ (80018a4 <Set_Motor_Speeds+0x244>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f9ce 	bl	8000ac4 <__aeabi_d2f>
 8001728:	ee07 0a90 	vmov	s15, r0
 800172c:	eef0 7ae7 	vabs.f32	s15, s15
 8001730:	edc7 7a05 	vstr	s15, [r7, #20]
    float pwm_right = fabs(outputRight);
 8001734:	4b5c      	ldr	r3, [pc, #368]	@ (80018a8 <Set_Motor_Speeds+0x248>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff f9c1 	bl	8000ac4 <__aeabi_d2f>
 8001742:	ee07 0a90 	vmov	s15, r0
 8001746:	eef0 7ae7 	vabs.f32	s15, s15
 800174a:	edc7 7a04 	vstr	s15, [r7, #16]

    pwm_left  = fmax(pwm_left, PWM_MIN);
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7fe fec6 	bl	80004e0 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8001870 <Set_Motor_Speeds+0x210>
 800175c:	ec43 2b10 	vmov	d0, r2, r3
 8001760:	f004 fb36 	bl	8005dd0 <fmax>
 8001764:	ec53 2b10 	vmov	r2, r3, d0
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f9aa 	bl	8000ac4 <__aeabi_d2f>
 8001770:	4603      	mov	r3, r0
 8001772:	617b      	str	r3, [r7, #20]
    pwm_right = fmax(pwm_right, PWM_MIN);
 8001774:	6938      	ldr	r0, [r7, #16]
 8001776:	f7fe feb3 	bl	80004e0 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001870 <Set_Motor_Speeds+0x210>
 8001782:	ec43 2b10 	vmov	d0, r2, r3
 8001786:	f004 fb23 	bl	8005dd0 <fmax>
 800178a:	ec53 2b10 	vmov	r2, r3, d0
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f997 	bl	8000ac4 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	613b      	str	r3, [r7, #16]

    pwm_left  = fmin(pwm_left, PWM_MAX);
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7fe fea0 	bl	80004e0 <__aeabi_f2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8001878 <Set_Motor_Speeds+0x218>
 80017a8:	ec43 2b10 	vmov	d0, r2, r3
 80017ac:	f004 fb3a 	bl	8005e24 <fmin>
 80017b0:	ec53 2b10 	vmov	r2, r3, d0
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f984 	bl	8000ac4 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	617b      	str	r3, [r7, #20]
    pwm_right = fmin(pwm_right, PWM_MAX);
 80017c0:	6938      	ldr	r0, [r7, #16]
 80017c2:	f7fe fe8d 	bl	80004e0 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001878 <Set_Motor_Speeds+0x218>
 80017ce:	ec43 2b10 	vmov	d0, r2, r3
 80017d2:	f004 fb27 	bl	8005e24 <fmin>
 80017d6:	ec53 2b10 	vmov	r2, r3, d0
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f971 	bl	8000ac4 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]

    uint8_t dir_left  = (outputLeft >= 0) ? 0 : 1;
 80017e6:	4b2f      	ldr	r3, [pc, #188]	@ (80018a4 <Set_Motor_Speeds+0x244>)
 80017e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ec:	2301      	movs	r3, #1
 80017ee:	461c      	mov	r4, r3
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	f7ff f950 	bl	8000a9c <__aeabi_dcmpge>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <Set_Motor_Speeds+0x1a6>
 8001802:	2300      	movs	r3, #0
 8001804:	461c      	mov	r4, r3
 8001806:	b2e3      	uxtb	r3, r4
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	73fb      	strb	r3, [r7, #15]
    uint8_t dir_right = (outputRight >= 0) ? 0 : 1;
 8001810:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <Set_Motor_Speeds+0x248>)
 8001812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001816:	2301      	movs	r3, #1
 8001818:	461c      	mov	r4, r3
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	f7ff f93b 	bl	8000a9c <__aeabi_dcmpge>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <Set_Motor_Speeds+0x1d0>
 800182c:	2300      	movs	r3, #0
 800182e:	461c      	mov	r4, r3
 8001830:	b2e3      	uxtb	r3, r4
 8001832:	f083 0301 	eor.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	73bb      	strb	r3, [r7, #14]

    Motor_Control((uint32_t)pwm_left, dir_left, (uint32_t)pwm_right, dir_right);
 800183a:	edd7 7a05 	vldr	s15, [r7, #20]
 800183e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001842:	edd7 7a04 	vldr	s15, [r7, #16]
 8001846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	7bf9      	ldrb	r1, [r7, #15]
 800184e:	ee17 2a90 	vmov	r2, s15
 8001852:	ee17 0a10 	vmov	r0, s14
 8001856:	f7ff fe3f 	bl	80014d8 <Motor_Control>
}
 800185a:	bf00      	nop
 800185c:	3724      	adds	r7, #36	@ 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	5b22baa6 	.word	0x5b22baa6
 800186c:	3fd8209f 	.word	0x3fd8209f
 8001870:	00000000 	.word	0x00000000
 8001874:	40590000 	.word	0x40590000
 8001878:	00000000 	.word	0x00000000
 800187c:	409a8c00 	.word	0x409a8c00
 8001880:	404e0000 	.word	0x404e0000
 8001884:	20000348 	.word	0x20000348
 8001888:	20000350 	.word	0x20000350
 800188c:	20000338 	.word	0x20000338
 8001890:	20000368 	.word	0x20000368
 8001894:	20000340 	.word	0x20000340
 8001898:	20000370 	.word	0x20000370
 800189c:	20000258 	.word	0x20000258
 80018a0:	200002c8 	.word	0x200002c8
 80018a4:	20000358 	.word	0x20000358
 80018a8:	20000360 	.word	0x20000360
 80018ac:	00000000 	.word	0x00000000

080018b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b6:	f000 fe36 	bl	8002526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f8b3 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018be:	f000 fb59 	bl	8001f74 <MX_GPIO_Init>
  MX_TIM1_Init();
 80018c2:	f000 f937 	bl	8001b34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80018c6:	f000 f9e5 	bl	8001c94 <MX_TIM2_Init>
  MX_TIM3_Init();
 80018ca:	f000 fa59 	bl	8001d80 <MX_TIM3_Init>
  MX_TIM4_Init();
 80018ce:	f000 faad 	bl	8001e2c <MX_TIM4_Init>
  MX_SPI1_Init();
 80018d2:	f000 f8f1 	bl	8001ab8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018d6:	f000 faff 	bl	8001ed8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80018da:	213c      	movs	r1, #60	@ 0x3c
 80018dc:	4840      	ldr	r0, [pc, #256]	@ (80019e0 <main+0x130>)
 80018de:	f002 fc0f 	bl	8004100 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80018e2:	213c      	movs	r1, #60	@ 0x3c
 80018e4:	483f      	ldr	r0, [pc, #252]	@ (80019e4 <main+0x134>)
 80018e6:	f002 fc0b 	bl	8004100 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018ea:	2100      	movs	r1, #0
 80018ec:	483e      	ldr	r0, [pc, #248]	@ (80019e8 <main+0x138>)
 80018ee:	f002 fa61 	bl	8003db4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018f2:	2100      	movs	r1, #0
 80018f4:	483d      	ldr	r0, [pc, #244]	@ (80019ec <main+0x13c>)
 80018f6:	f002 fa5d 	bl	8003db4 <HAL_TIM_PWM_Start>

  last_time          = HAL_GetTick();
 80018fa:	f000 fe79 	bl	80025f0 <HAL_GetTick>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a3b      	ldr	r2, [pc, #236]	@ (80019f0 <main+0x140>)
 8001902:	6013      	str	r3, [r2, #0]
  last_left_encoder  = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <main+0x130>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	b21a      	sxth	r2, r3
 800190c:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <main+0x144>)
 800190e:	801a      	strh	r2, [r3, #0]
  last_right_encoder = (int16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8001910:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <main+0x134>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	b21a      	sxth	r2, r3
 8001918:	4b37      	ldr	r3, [pc, #220]	@ (80019f8 <main+0x148>)
 800191a:	801a      	strh	r2, [r3, #0]

  PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 12.38, 100.0, 0.0, _PID_CD_DIRECT);
 800191c:	2300      	movs	r3, #0
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	ed9f 2b25 	vldr	d2, [pc, #148]	@ 80019b8 <main+0x108>
 8001924:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 80019c0 <main+0x110>
 8001928:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 80019c8 <main+0x118>
 800192c:	4b33      	ldr	r3, [pc, #204]	@ (80019fc <main+0x14c>)
 800192e:	4a34      	ldr	r2, [pc, #208]	@ (8001a00 <main+0x150>)
 8001930:	4934      	ldr	r1, [pc, #208]	@ (8001a04 <main+0x154>)
 8001932:	4835      	ldr	r0, [pc, #212]	@ (8001a08 <main+0x158>)
 8001934:	f7ff fb14 	bl	8000f60 <PID2>
  PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 12.38, 100.0, 0.0, _PID_CD_DIRECT);
 8001938:	2300      	movs	r3, #0
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	ed9f 2b1e 	vldr	d2, [pc, #120]	@ 80019b8 <main+0x108>
 8001940:	ed9f 1b1f 	vldr	d1, [pc, #124]	@ 80019c0 <main+0x110>
 8001944:	ed9f 0b20 	vldr	d0, [pc, #128]	@ 80019c8 <main+0x118>
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <main+0x15c>)
 800194a:	4a31      	ldr	r2, [pc, #196]	@ (8001a10 <main+0x160>)
 800194c:	4931      	ldr	r1, [pc, #196]	@ (8001a14 <main+0x164>)
 800194e:	4832      	ldr	r0, [pc, #200]	@ (8001a18 <main+0x168>)
 8001950:	f7ff fb06 	bl	8000f60 <PID2>

  PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8001954:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 80019d0 <main+0x120>
 8001958:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 80019d8 <main+0x128>
 800195c:	482a      	ldr	r0, [pc, #168]	@ (8001a08 <main+0x158>)
 800195e:	f7ff fc29 	bl	80011b4 <PID_SetOutputLimits>
  PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 8001962:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 80019d0 <main+0x120>
 8001966:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 80019d8 <main+0x128>
 800196a:	482b      	ldr	r0, [pc, #172]	@ (8001a18 <main+0x168>)
 800196c:	f7ff fc22 	bl	80011b4 <PID_SetOutputLimits>

  PID_SetSampleTime(&pidLeft, 10);
 8001970:	210a      	movs	r1, #10
 8001972:	4825      	ldr	r0, [pc, #148]	@ (8001a08 <main+0x158>)
 8001974:	f7ff fd74 	bl	8001460 <PID_SetSampleTime>
  PID_SetSampleTime(&pidRight, 10);
 8001978:	210a      	movs	r1, #10
 800197a:	4827      	ldr	r0, [pc, #156]	@ (8001a18 <main+0x168>)
 800197c:	f7ff fd70 	bl	8001460 <PID_SetSampleTime>

  PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8001980:	2101      	movs	r1, #1
 8001982:	4821      	ldr	r0, [pc, #132]	@ (8001a08 <main+0x158>)
 8001984:	f7ff fbf8 	bl	8001178 <PID_SetMode>
  PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001988:	2101      	movs	r1, #1
 800198a:	4823      	ldr	r0, [pc, #140]	@ (8001a18 <main+0x168>)
 800198c:	f7ff fbf4 	bl	8001178 <PID_SetMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Set_Motor_Speeds(vL, vR);
 8001990:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <main+0x16c>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <main+0x170>)
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	eef0 0a47 	vmov.f32	s1, s14
 80019a0:	eeb0 0a67 	vmov.f32	s0, s15
 80019a4:	f7ff fe5c 	bl	8001660 <Set_Motor_Speeds>
	  HAL_Delay(10);
 80019a8:	200a      	movs	r0, #10
 80019aa:	f000 fe2d 	bl	8002608 <HAL_Delay>
	  Set_Motor_Speeds(vL, vR);
 80019ae:	bf00      	nop
 80019b0:	e7ee      	b.n	8001990 <main+0xe0>
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
	...
 80019c4:	40590000 	.word	0x40590000
 80019c8:	5c28f5c3 	.word	0x5c28f5c3
 80019cc:	4028c28f 	.word	0x4028c28f
 80019d0:	00000000 	.word	0x00000000
 80019d4:	409a8c00 	.word	0x409a8c00
 80019d8:	00000000 	.word	0x00000000
 80019dc:	c09a8c00 	.word	0xc09a8c00
 80019e0:	20000128 	.word	0x20000128
 80019e4:	20000174 	.word	0x20000174
 80019e8:	20000090 	.word	0x20000090
 80019ec:	200000dc 	.word	0x200000dc
 80019f0:	20000384 	.word	0x20000384
 80019f4:	20000380 	.word	0x20000380
 80019f8:	20000382 	.word	0x20000382
 80019fc:	20000348 	.word	0x20000348
 8001a00:	20000358 	.word	0x20000358
 8001a04:	20000368 	.word	0x20000368
 8001a08:	20000258 	.word	0x20000258
 8001a0c:	20000350 	.word	0x20000350
 8001a10:	20000360 	.word	0x20000360
 8001a14:	20000370 	.word	0x20000370
 8001a18:	200002c8 	.word	0x200002c8
 8001a1c:	20000378 	.word	0x20000378
 8001a20:	2000037c 	.word	0x2000037c

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	@ 0x50
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2238      	movs	r2, #56	@ 0x38
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 f9a0 	bl	8005d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f001 f87e 	bl	8002b48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a54:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a62:	2355      	movs	r3, #85	@ 0x55
 8001a64:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a66:	2302      	movs	r3, #2
 8001a68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 f91a 	bl	8002cb0 <HAL_RCC_OscConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a82:	f000 fae5 	bl	8002050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a86:	230f      	movs	r3, #15
 8001a88:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fc18 	bl	80032d4 <HAL_RCC_ClockConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001aaa:	f000 fad1 	bl	8002050 <Error_Handler>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3750      	adds	r7, #80	@ 0x50
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001abe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b30 <MX_SPI1_Init+0x78>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001ad2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001ad6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ade:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aec:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001b06:	2207      	movs	r2, #7
 8001b08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001b12:	2208      	movs	r2, #8
 8001b14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_SPI1_Init+0x74>)
 8001b18:	f001 ffe8 	bl	8003aec <HAL_SPI_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b22:	f000 fa95 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000002c 	.word	0x2000002c
 8001b30:	40013000 	.word	0x40013000

08001b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b09c      	sub	sp, #112	@ 0x70
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	615a      	str	r2, [r3, #20]
 8001b66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	2234      	movs	r2, #52	@ 0x34
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 f902 	bl	8005d78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b74:	4b45      	ldr	r3, [pc, #276]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001b76:	4a46      	ldr	r2, [pc, #280]	@ (8001c90 <MX_TIM1_Init+0x15c>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b7a:	4b44      	ldr	r3, [pc, #272]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b42      	ldr	r3, [pc, #264]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8001b86:	4b41      	ldr	r3, [pc, #260]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001b88:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b94:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ba0:	483a      	ldr	r0, [pc, #232]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001ba2:	f002 f84e 	bl	8003c42 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bac:	f000 fa50 	bl	8002050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bb4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bb6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4833      	ldr	r0, [pc, #204]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001bbe:	f002 fc41 	bl	8004444 <HAL_TIM_ConfigClockSource>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001bc8:	f000 fa42 	bl	8002050 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bcc:	482f      	ldr	r0, [pc, #188]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001bce:	f002 f88f 	bl	8003cf0 <HAL_TIM_PWM_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001bd8:	f000 fa3a 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001be8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bec:	4619      	mov	r1, r3
 8001bee:	4827      	ldr	r0, [pc, #156]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001bf0:	f003 f976 	bl	8004ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001bfa:	f000 fa29 	bl	8002050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfe:	2360      	movs	r3, #96	@ 0x60
 8001c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c06:	2300      	movs	r3, #0
 8001c08:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4619      	mov	r1, r3
 8001c22:	481a      	ldr	r0, [pc, #104]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001c24:	f002 fafa 	bl	800421c <HAL_TIM_PWM_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c2e:	f000 fa0f 	bl	8002050 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001c70:	f003 f9b8 	bl	8004fe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001c7a:	f000 f9e9 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <MX_TIM1_Init+0x158>)
 8001c80:	f000 fb16 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001c84:	bf00      	nop
 8001c86:	3770      	adds	r7, #112	@ 0x70
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000090 	.word	0x20000090
 8001c90:	40012c00 	.word	0x40012c00

08001c94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08e      	sub	sp, #56	@ 0x38
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001cc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ccc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cce:	4b2b      	ldr	r3, [pc, #172]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	4b29      	ldr	r3, [pc, #164]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 8001cda:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001cdc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001ce0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce8:	4b24      	ldr	r3, [pc, #144]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cee:	4823      	ldr	r0, [pc, #140]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001cf0:	f001 ffa7 	bl	8003c42 <HAL_TIM_Base_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cfa:	f000 f9a9 	bl	8002050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481c      	ldr	r0, [pc, #112]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001d0c:	f002 fb9a 	bl	8004444 <HAL_TIM_ConfigClockSource>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d16:	f000 f99b 	bl	8002050 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d1a:	4818      	ldr	r0, [pc, #96]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001d1c:	f001 ffe8 	bl	8003cf0 <HAL_TIM_PWM_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d26:	f000 f993 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4810      	ldr	r0, [pc, #64]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001d3a:	f003 f8d1 	bl	8004ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d44:	f000 f984 	bl	8002050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d48:	2360      	movs	r3, #96	@ 0x60
 8001d4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001d60:	f002 fa5c 	bl	800421c <HAL_TIM_PWM_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d6a:	f000 f971 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d6e:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <MX_TIM2_Init+0xe8>)
 8001d70:	f000 fa9e 	bl	80022b0 <HAL_TIM_MspPostInit>

}
 8001d74:	bf00      	nop
 8001d76:	3738      	adds	r7, #56	@ 0x38
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200000dc 	.word	0x200000dc

08001d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	@ 0x30
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	2224      	movs	r2, #36	@ 0x24
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fff2 	bl	8005d78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001da0:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <MX_TIM3_Init+0xa8>)
 8001da2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001db2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001db6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	4619      	mov	r1, r3
 8001dee:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001df0:	f002 f8e0 	bl	8003fb4 <HAL_TIM_Encoder_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001dfa:	f000 f929 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	@ (8001e24 <MX_TIM3_Init+0xa4>)
 8001e0c:	f003 f868 	bl	8004ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e16:	f000 f91b 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3730      	adds	r7, #48	@ 0x30
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000128 	.word	0x20000128
 8001e28:	40000400 	.word	0x40000400

08001e2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08c      	sub	sp, #48	@ 0x30
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	2224      	movs	r2, #36	@ 0x24
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 ff9c 	bl	8005d78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e40:	463b      	mov	r3, r7
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001e4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <MX_TIM4_Init+0xa8>)
 8001e4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001e5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e70:	2303      	movs	r3, #3
 8001e72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001e9c:	f002 f88a 	bl	8003fb4 <HAL_TIM_Encoder_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ea6:	f000 f8d3 	bl	8002050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	@ (8001ed0 <MX_TIM4_Init+0xa4>)
 8001eb8:	f003 f812 	bl	8004ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ec2:	f000 f8c5 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	3730      	adds	r7, #48	@ 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000174 	.word	0x20000174
 8001ed4:	40000800 	.word	0x40000800

08001ed8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001edc:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001ede:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <MX_USART1_UART_Init+0x94>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001ee4:	4a22      	ldr	r2, [pc, #136]	@ (8001f70 <MX_USART1_UART_Init+0x98>)
 8001ee6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001efa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001efc:	220c      	movs	r2, #12
 8001efe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f00:	4b19      	ldr	r3, [pc, #100]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f1e:	4812      	ldr	r0, [pc, #72]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f20:	f003 f8ec 	bl	80050fc <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001f2a:	f000 f891 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f32:	f003 fe57 	bl	8005be4 <HAL_UARTEx_SetTxFifoThreshold>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001f3c:	f000 f888 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f40:	2100      	movs	r1, #0
 8001f42:	4809      	ldr	r0, [pc, #36]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f44:	f003 fe8c 	bl	8005c60 <HAL_UARTEx_SetRxFifoThreshold>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001f4e:	f000 f87f 	bl	8002050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_USART1_UART_Init+0x90>)
 8001f54:	f003 fe0d 	bl	8005b72 <HAL_UARTEx_DisableFifoMode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001f5e:	f000 f877 	bl	8002050 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200001c0 	.word	0x200001c0
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	000f4240 	.word	0x000f4240

08001f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f96:	4b2c      	ldr	r3, [pc, #176]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	4a28      	ldr	r2, [pc, #160]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fae:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <MX_GPIO_Init+0xd4>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f240 6106 	movw	r1, #1542	@ 0x606
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff4:	f000 fd90 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2140      	movs	r1, #64	@ 0x40
 8001ffc:	4813      	ldr	r0, [pc, #76]	@ (800204c <MX_GPIO_Init+0xd8>)
 8001ffe:	f000 fd8b 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_9|GPIO_PIN_10;
 8002002:	f240 6306 	movw	r3, #1542	@ 0x606
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800201e:	f000 fbf9 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002022:	2340      	movs	r3, #64	@ 0x40
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4804      	ldr	r0, [pc, #16]	@ (800204c <MX_GPIO_Init+0xd8>)
 800203a:	f000 fbeb 	bl	8002814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	@ 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	48000800 	.word	0x48000800

08002050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002054:	b672      	cpsid	i
}
 8002056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <Error_Handler+0x8>

0800205c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <HAL_MspInit+0x44>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	4a0e      	ldr	r2, [pc, #56]	@ (80020a0 <HAL_MspInit+0x44>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6613      	str	r3, [r2, #96]	@ 0x60
 800206e:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <HAL_MspInit+0x44>)
 8002070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_MspInit+0x44>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	4a08      	ldr	r2, [pc, #32]	@ (80020a0 <HAL_MspInit+0x44>)
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002084:	6593      	str	r3, [r2, #88]	@ 0x58
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_MspInit+0x44>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002092:	f000 fdfd 	bl	8002c90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	@ 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a25      	ldr	r2, [pc, #148]	@ (8002158 <HAL_SPI_MspInit+0xb4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d144      	bne.n	8002150 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020c6:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	4a24      	ldr	r2, [pc, #144]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020d2:	4b22      	ldr	r3, [pc, #136]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	4a1e      	ldr	r2, [pc, #120]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a18      	ldr	r2, [pc, #96]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002102:	4b16      	ldr	r3, [pc, #88]	@ (800215c <HAL_SPI_MspInit+0xb8>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800210e:	23a0      	movs	r3, #160	@ 0xa0
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800211e:	2305      	movs	r3, #5
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800212c:	f000 fb72 	bl	8002814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002130:	2310      	movs	r3, #16
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002140:	2305      	movs	r3, #5
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	@ (8002160 <HAL_SPI_MspInit+0xbc>)
 800214c:	f000 fb62 	bl	8002814 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	@ 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40013000 	.word	0x40013000
 800215c:	40021000 	.word	0x40021000
 8002160:	48000400 	.word	0x48000400

08002164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a13      	ldr	r2, [pc, #76]	@ (80021c0 <HAL_TIM_Base_MspInit+0x5c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10c      	bne.n	8002190 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002176:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_TIM_Base_MspInit+0x60>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <HAL_TIM_Base_MspInit+0x60>)
 800217c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002180:	6613      	str	r3, [r2, #96]	@ 0x60
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_TIM_Base_MspInit+0x60>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800218e:	e010      	b.n	80021b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002198:	d10b      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_TIM_Base_MspInit+0x60>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	4a09      	ldr	r2, [pc, #36]	@ (80021c4 <HAL_TIM_Base_MspInit+0x60>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <HAL_TIM_Base_MspInit+0x60>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2f      	ldr	r2, [pc, #188]	@ (80022a4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d129      	bne.n	800223e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	4a2e      	ldr	r2, [pc, #184]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f6:	4b2c      	ldr	r3, [pc, #176]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b29      	ldr	r3, [pc, #164]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	4a28      	ldr	r2, [pc, #160]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220e:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800221a:	2350      	movs	r3, #80	@ 0x50
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800222a:	2302      	movs	r3, #2
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002238:	f000 faec 	bl	8002814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800223c:	e02e      	b.n	800229c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1a      	ldr	r2, [pc, #104]	@ (80022ac <HAL_TIM_Encoder_MspInit+0xe4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d129      	bne.n	800229c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002248:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6593      	str	r3, [r2, #88]	@ 0x58
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002264:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002278:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800228a:	230a      	movs	r3, #10
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002298:	f000 fabc 	bl	8002814 <HAL_GPIO_Init>
}
 800229c:	bf00      	nop
 800229e:	3730      	adds	r7, #48	@ 0x30
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40000800 	.word	0x40000800

080022b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a23      	ldr	r2, [pc, #140]	@ (800235c <HAL_TIM_MspPostInit+0xac>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d11e      	bne.n	8002310 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	4a22      	ldr	r2, [pc, #136]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022fc:	2306      	movs	r3, #6
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230a:	f000 fa83 	bl	8002814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800230e:	e021      	b.n	8002354 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002318:	d11c      	bne.n	8002354 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	4a10      	ldr	r2, [pc, #64]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_TIM_MspPostInit+0xb0>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002332:	2301      	movs	r3, #1
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002342:	2301      	movs	r3, #1
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002350:	f000 fa60 	bl	8002814 <HAL_GPIO_Init>
}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	@ 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09c      	sub	sp, #112	@ 0x70
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	2244      	movs	r2, #68	@ 0x44
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fcf7 	bl	8005d78 <memset>
  if(huart->Instance==USART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2c      	ldr	r2, [pc, #176]	@ (8002440 <HAL_UART_MspInit+0xdc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d151      	bne.n	8002438 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002394:	2301      	movs	r3, #1
 8002396:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	4618      	mov	r0, r3
 80023a2:	f001 f9b3 	bl	800370c <HAL_RCCEx_PeriphCLKConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023ac:	f7ff fe50 	bl	8002050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b0:	4b24      	ldr	r3, [pc, #144]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b4:	4a23      	ldr	r2, [pc, #140]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80023bc:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e4:	4a17      	ldr	r2, [pc, #92]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023e6:	f043 0302 	orr.w	r3, r3, #2
 80023ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ec:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_UART_MspInit+0xe0>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023f8:	2310      	movs	r3, #16
 80023fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002408:	2307      	movs	r3, #7
 800240a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002410:	4619      	mov	r1, r3
 8002412:	480d      	ldr	r0, [pc, #52]	@ (8002448 <HAL_UART_MspInit+0xe4>)
 8002414:	f000 f9fe 	bl	8002814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002428:	2307      	movs	r3, #7
 800242a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002430:	4619      	mov	r1, r3
 8002432:	4806      	ldr	r0, [pc, #24]	@ (800244c <HAL_UART_MspInit+0xe8>)
 8002434:	f000 f9ee 	bl	8002814 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002438:	bf00      	nop
 800243a:	3770      	adds	r7, #112	@ 0x70
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013800 	.word	0x40013800
 8002444:	40021000 	.word	0x40021000
 8002448:	48000800 	.word	0x48000800
 800244c:	48000400 	.word	0x48000400

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <NMI_Handler+0x4>

08002458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <HardFault_Handler+0x4>

08002460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <MemManage_Handler+0x4>

08002468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <UsageFault_Handler+0x4>

08002478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a6:	f000 f891 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <SystemInit+0x20>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <SystemInit+0x20>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d4:	480d      	ldr	r0, [pc, #52]	@ (800250c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d8:	f7ff ffea 	bl	80024b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024dc:	480c      	ldr	r0, [pc, #48]	@ (8002510 <LoopForever+0x6>)
  ldr r1, =_edata
 80024de:	490d      	ldr	r1, [pc, #52]	@ (8002514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <LoopForever+0xe>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002520 <LoopForever+0x16>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002502:	f003 fc41 	bl	8005d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002506:	f7ff f9d3 	bl	80018b0 <main>

0800250a <LoopForever>:

LoopForever:
    b LoopForever
 800250a:	e7fe      	b.n	800250a <LoopForever>
  ldr   r0, =_estack
 800250c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002514:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002518:	08005f34 	.word	0x08005f34
  ldr r2, =_sbss
 800251c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002520:	2000038c 	.word	0x2000038c

08002524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002524:	e7fe      	b.n	8002524 <ADC1_2_IRQHandler>

08002526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 f93d 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002536:	200f      	movs	r0, #15
 8002538:	f000 f80e 	bl	8002558 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	71fb      	strb	r3, [r7, #7]
 8002546:	e001      	b.n	800254c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002548:	f7ff fd88 	bl	800205c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800254c:	79fb      	ldrb	r3, [r7, #7]

}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_InitTick+0x68>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d022      	beq.n	80025b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_InitTick+0x6c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_InitTick+0x68>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f93a 	bl	80027fa <HAL_SYSTICK_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	d809      	bhi.n	80025a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002592:	2200      	movs	r2, #0
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800259a:	f000 f914 	bl	80027c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_InitTick+0x70>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e007      	b.n	80025b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e004      	b.n	80025b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_IncTick+0x1c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_IncTick+0x20>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	4a03      	ldr	r2, [pc, #12]	@ (80025e8 <HAL_IncTick+0x1c>)
 80025dc:	6013      	str	r3, [r2, #0]
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	20000388 	.word	0x20000388
 80025ec:	20000008 	.word	0x20000008

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000388 	.word	0x20000388

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff ffee 	bl	80025f0 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002620:	d004      	beq.n	800262c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_Delay+0x40>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262c:	bf00      	nop
 800262e:	f7ff ffdf 	bl	80025f0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	d8f7      	bhi.n	800262e <HAL_Delay+0x26>
  {
  }
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000008 	.word	0x20000008

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	@ (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	@ (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	@ 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	@ 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff47 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff5e 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff90 	bl	8002704 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5f 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffb2 	bl	800276c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002822:	e15a      	b.n	8002ada <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 814c 	beq.w	8002ad4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d005      	beq.n	8002854 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002850:	2b02      	cmp	r3, #2
 8002852:	d130      	bne.n	80028b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800288a:	2201      	movs	r2, #1
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0201 	and.w	r2, r3, #1
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d017      	beq.n	80028f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d123      	bne.n	8002946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	6939      	ldr	r1, [r7, #16]
 8002942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80a6 	beq.w	8002ad4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002988:	4b5b      	ldr	r3, [pc, #364]	@ (8002af8 <HAL_GPIO_Init+0x2e4>)
 800298a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298c:	4a5a      	ldr	r2, [pc, #360]	@ (8002af8 <HAL_GPIO_Init+0x2e4>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6613      	str	r3, [r2, #96]	@ 0x60
 8002994:	4b58      	ldr	r3, [pc, #352]	@ (8002af8 <HAL_GPIO_Init+0x2e4>)
 8002996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a0:	4a56      	ldr	r2, [pc, #344]	@ (8002afc <HAL_GPIO_Init+0x2e8>)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029ca:	d01f      	beq.n	8002a0c <HAL_GPIO_Init+0x1f8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002b00 <HAL_GPIO_Init+0x2ec>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d019      	beq.n	8002a08 <HAL_GPIO_Init+0x1f4>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002b04 <HAL_GPIO_Init+0x2f0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <HAL_GPIO_Init+0x1f0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a4a      	ldr	r2, [pc, #296]	@ (8002b08 <HAL_GPIO_Init+0x2f4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00d      	beq.n	8002a00 <HAL_GPIO_Init+0x1ec>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a49      	ldr	r2, [pc, #292]	@ (8002b0c <HAL_GPIO_Init+0x2f8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <HAL_GPIO_Init+0x1e8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a48      	ldr	r2, [pc, #288]	@ (8002b10 <HAL_GPIO_Init+0x2fc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_GPIO_Init+0x1e4>
 80029f4:	2305      	movs	r3, #5
 80029f6:	e00a      	b.n	8002a0e <HAL_GPIO_Init+0x1fa>
 80029f8:	2306      	movs	r3, #6
 80029fa:	e008      	b.n	8002a0e <HAL_GPIO_Init+0x1fa>
 80029fc:	2304      	movs	r3, #4
 80029fe:	e006      	b.n	8002a0e <HAL_GPIO_Init+0x1fa>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e004      	b.n	8002a0e <HAL_GPIO_Init+0x1fa>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0x1fa>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_GPIO_Init+0x1fa>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	f002 0203 	and.w	r2, r2, #3
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	4093      	lsls	r3, r2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a1e:	4937      	ldr	r1, [pc, #220]	@ (8002afc <HAL_GPIO_Init+0x2e8>)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a2c:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a50:	4a30      	ldr	r2, [pc, #192]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a56:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a7a:	4a26      	ldr	r2, [pc, #152]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a80:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ace:	4a11      	ldr	r2, [pc, #68]	@ (8002b14 <HAL_GPIO_Init+0x300>)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f47f ae9d 	bne.w	8002824 <HAL_GPIO_Init+0x10>
  }
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	48000400 	.word	0x48000400
 8002b04:	48000800 	.word	0x48000800
 8002b08:	48000c00 	.word	0x48000c00
 8002b0c:	48001000 	.word	0x48001000
 8002b10:	48001400 	.word	0x48001400
 8002b14:	40010400 	.word	0x40010400

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b36:	887a      	ldrh	r2, [r7, #2]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d141      	bne.n	8002bda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b56:	4b4b      	ldr	r3, [pc, #300]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d131      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b64:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b6a:	4a46      	ldr	r2, [pc, #280]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b74:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b7c:	4a41      	ldr	r2, [pc, #260]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b84:	4b40      	ldr	r3, [pc, #256]	@ (8002c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2232      	movs	r2, #50	@ 0x32
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	0c9b      	lsrs	r3, r3, #18
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b9a:	e002      	b.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ba2:	4b38      	ldr	r3, [pc, #224]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bae:	d102      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f2      	bne.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb6:	4b33      	ldr	r3, [pc, #204]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc2:	d158      	bne.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e057      	b.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bce:	4a2d      	ldr	r2, [pc, #180]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bd8:	e04d      	b.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be0:	d141      	bne.n	8002c66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002be2:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bee:	d131      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf0:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bf6:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c00:	4b20      	ldr	r3, [pc, #128]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c08:	4a1e      	ldr	r2, [pc, #120]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2232      	movs	r2, #50	@ 0x32
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	0c9b      	lsrs	r3, r3, #18
 8002c22:	3301      	adds	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c26:	e002      	b.n	8002c2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3a:	d102      	bne.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f2      	bne.n	8002c28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c4e:	d112      	bne.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e011      	b.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c64:	e007      	b.n	8002c76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c66:	4b07      	ldr	r3, [pc, #28]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c6e:	4a05      	ldr	r2, [pc, #20]	@ (8002c84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40007000 	.word	0x40007000
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	431bde83 	.word	0x431bde83

08002c90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c9e:	6093      	str	r3, [r2, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40007000 	.word	0x40007000

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e2fe      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d075      	beq.n	8002dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cce:	4b97      	ldr	r3, [pc, #604]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cd8:	4b94      	ldr	r3, [pc, #592]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d102      	bne.n	8002cee <HAL_RCC_OscConfig+0x3e>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d002      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x44>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d10b      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d05b      	beq.n	8002db8 <HAL_RCC_OscConfig+0x108>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d157      	bne.n	8002db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e2d9      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d14:	d106      	bne.n	8002d24 <HAL_RCC_OscConfig+0x74>
 8002d16:	4b85      	ldr	r3, [pc, #532]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a84      	ldr	r2, [pc, #528]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e01d      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7e      	ldr	r2, [pc, #504]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7b      	ldr	r2, [pc, #492]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0xb0>
 8002d48:	4b78      	ldr	r3, [pc, #480]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a77      	ldr	r2, [pc, #476]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b75      	ldr	r3, [pc, #468]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a74      	ldr	r2, [pc, #464]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff fc42 	bl	80025f0 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff fc3e 	bl	80025f0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e29e      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d82:	4b6a      	ldr	r3, [pc, #424]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0xc0>
 8002d8e:	e014      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7ff fc2e 	bl	80025f0 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d98:	f7ff fc2a 	bl	80025f0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	@ 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e28a      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002daa:	4b60      	ldr	r3, [pc, #384]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0xe8>
 8002db6:	e000      	b.n	8002dba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d075      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc6:	4b59      	ldr	r3, [pc, #356]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd0:	4b56      	ldr	r3, [pc, #344]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_OscConfig+0x136>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_OscConfig+0x13c>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11f      	bne.n	8002e2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dec:	4b4f      	ldr	r3, [pc, #316]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x154>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e25d      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b49      	ldr	r3, [pc, #292]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	061b      	lsls	r3, r3, #24
 8002e12:	4946      	ldr	r1, [pc, #280]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e18:	4b45      	ldr	r3, [pc, #276]	@ (8002f30 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fb9b 	bl	8002558 <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d043      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e249      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d023      	beq.n	8002e7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a3c      	ldr	r2, [pc, #240]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff fbd6 	bl	80025f0 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e48:	f7ff fbd2 	bl	80025f0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e232      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e5a:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	061b      	lsls	r3, r3, #24
 8002e74:	492d      	ldr	r1, [pc, #180]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
 8002e7a:	e01a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2a      	ldr	r2, [pc, #168]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002e82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7ff fbb2 	bl	80025f0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7ff fbae 	bl	80025f0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e20e      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea2:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1e0>
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d041      	beq.n	8002f42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ecc:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7ff fb8b 	bl	80025f0 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ede:	f7ff fb87 	bl	80025f0 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1e7      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ef      	beq.n	8002ede <HAL_RCC_OscConfig+0x22e>
 8002efe:	e020      	b.n	8002f42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f06:	4a09      	ldr	r2, [pc, #36]	@ (8002f2c <HAL_RCC_OscConfig+0x27c>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f10:	f7ff fb6e 	bl	80025f0 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f16:	e00d      	b.n	8002f34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f18:	f7ff fb6a 	bl	80025f0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d906      	bls.n	8002f34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1ca      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f34:	4b8c      	ldr	r3, [pc, #560]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1ea      	bne.n	8002f18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80a6 	beq.w	800309c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f54:	4b84      	ldr	r3, [pc, #528]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_OscConfig+0x2b4>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x2b6>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f76:	4b7c      	ldr	r3, [pc, #496]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f86:	4b79      	ldr	r3, [pc, #484]	@ (800316c <HAL_RCC_OscConfig+0x4bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f92:	4b76      	ldr	r3, [pc, #472]	@ (800316c <HAL_RCC_OscConfig+0x4bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a75      	ldr	r2, [pc, #468]	@ (800316c <HAL_RCC_OscConfig+0x4bc>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fb27 	bl	80025f0 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7ff fb23 	bl	80025f0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e183      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb8:	4b6c      	ldr	r3, [pc, #432]	@ (800316c <HAL_RCC_OscConfig+0x4bc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_RCC_OscConfig+0x32e>
 8002fcc:	4b66      	ldr	r3, [pc, #408]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd2:	4a65      	ldr	r2, [pc, #404]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fdc:	e024      	b.n	8003028 <HAL_RCC_OscConfig+0x378>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d110      	bne.n	8003008 <HAL_RCC_OscConfig+0x358>
 8002fe6:	4b60      	ldr	r3, [pc, #384]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fec:	4a5e      	ldr	r2, [pc, #376]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003006:	e00f      	b.n	8003028 <HAL_RCC_OscConfig+0x378>
 8003008:	4b57      	ldr	r3, [pc, #348]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	4a56      	ldr	r2, [pc, #344]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003018:	4b53      	ldr	r3, [pc, #332]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301e:	4a52      	ldr	r2, [pc, #328]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003020:	f023 0304 	bic.w	r3, r3, #4
 8003024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d016      	beq.n	800305e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7ff fade 	bl	80025f0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7ff fada 	bl	80025f0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e138      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304e:	4b46      	ldr	r3, [pc, #280]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ed      	beq.n	8003038 <HAL_RCC_OscConfig+0x388>
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7ff fac7 	bl	80025f0 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7ff fac3 	bl	80025f0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e121      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800307c:	4b3a      	ldr	r3, [pc, #232]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ed      	bne.n	8003066 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800308a:	7ffb      	ldrb	r3, [r7, #31]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b35      	ldr	r3, [pc, #212]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	4a34      	ldr	r2, [pc, #208]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800309a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d03c      	beq.n	8003122 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01c      	beq.n	80030ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 80030b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7ff fa96 	bl	80025f0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030c8:	f7ff fa92 	bl	80025f0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0f2      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030da:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0ef      	beq.n	80030c8 <HAL_RCC_OscConfig+0x418>
 80030e8:	e01b      	b.n	8003122 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 80030ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fa:	f7ff fa79 	bl	80025f0 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003102:	f7ff fa75 	bl	80025f0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0d5      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003114:	4b14      	ldr	r3, [pc, #80]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ef      	bne.n	8003102 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80c9 	beq.w	80032be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800312c:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b0c      	cmp	r3, #12
 8003136:	f000 8083 	beq.w	8003240 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d15e      	bne.n	8003200 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a08      	ldr	r2, [pc, #32]	@ (8003168 <HAL_RCC_OscConfig+0x4b8>)
 8003148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800314c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314e:	f7ff fa4f 	bl	80025f0 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003154:	e00c      	b.n	8003170 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7ff fa4b 	bl	80025f0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d905      	bls.n	8003170 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0ab      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
 8003168:	40021000 	.word	0x40021000
 800316c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003170:	4b55      	ldr	r3, [pc, #340]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ec      	bne.n	8003156 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800317c:	4b52      	ldr	r3, [pc, #328]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	4b52      	ldr	r3, [pc, #328]	@ (80032cc <HAL_RCC_OscConfig+0x61c>)
 8003182:	4013      	ands	r3, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6a11      	ldr	r1, [r2, #32]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800318c:	3a01      	subs	r2, #1
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	4311      	orrs	r1, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003196:	0212      	lsls	r2, r2, #8
 8003198:	4311      	orrs	r1, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800319e:	0852      	lsrs	r2, r2, #1
 80031a0:	3a01      	subs	r2, #1
 80031a2:	0552      	lsls	r2, r2, #21
 80031a4:	4311      	orrs	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031aa:	0852      	lsrs	r2, r2, #1
 80031ac:	3a01      	subs	r2, #1
 80031ae:	0652      	lsls	r2, r2, #25
 80031b0:	4311      	orrs	r1, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031b6:	06d2      	lsls	r2, r2, #27
 80031b8:	430a      	orrs	r2, r1
 80031ba:	4943      	ldr	r1, [pc, #268]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c0:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a40      	ldr	r2, [pc, #256]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031cc:	4b3e      	ldr	r3, [pc, #248]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a3d      	ldr	r2, [pc, #244]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7ff fa0a 	bl	80025f0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e0:	f7ff fa06 	bl	80025f0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e066      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f2:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x530>
 80031fe:	e05e      	b.n	80032be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003200:	4b31      	ldr	r3, [pc, #196]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a30      	ldr	r2, [pc, #192]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 8003206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7ff f9f0 	bl	80025f0 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7ff f9ec 	bl	80025f0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04c      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003226:	4b28      	ldr	r3, [pc, #160]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003232:	4b25      	ldr	r3, [pc, #148]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4924      	ldr	r1, [pc, #144]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_RCC_OscConfig+0x620>)
 800323a:	4013      	ands	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
 800323e:	e03e      	b.n	80032be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e039      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800324c:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <HAL_RCC_OscConfig+0x618>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 0203 	and.w	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	429a      	cmp	r2, r3
 800325e:	d12c      	bne.n	80032ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	3b01      	subs	r3, #1
 800326c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d123      	bne.n	80032ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d11b      	bne.n	80032ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d113      	bne.n	80032ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	3b01      	subs	r3, #1
 80032a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3720      	adds	r7, #32
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	019f800c 	.word	0x019f800c
 80032d0:	feeefffc 	.word	0xfeeefffc

080032d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e11e      	b.n	800352a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b91      	ldr	r3, [pc, #580]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b8e      	ldr	r3, [pc, #568]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020f 	bic.w	r2, r3, #15
 8003302:	498c      	ldr	r1, [pc, #560]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b8a      	ldr	r3, [pc, #552]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e106      	b.n	800352a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d073      	beq.n	8003410 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d129      	bne.n	8003384 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003330:	4b81      	ldr	r3, [pc, #516]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0f4      	b.n	800352a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003340:	f000 f99e 	bl	8003680 <RCC_GetSysClockFreqFromPLLSource>
 8003344:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4a7c      	ldr	r2, [pc, #496]	@ (800353c <HAL_RCC_ClockConfig+0x268>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d93f      	bls.n	80033ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800334e:	4b7a      	ldr	r3, [pc, #488]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003362:	2b00      	cmp	r3, #0
 8003364:	d033      	beq.n	80033ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800336a:	2b00      	cmp	r3, #0
 800336c:	d12f      	bne.n	80033ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800336e:	4b72      	ldr	r3, [pc, #456]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003376:	4a70      	ldr	r2, [pc, #448]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800337c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	e024      	b.n	80033ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d107      	bne.n	800339c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800338c:	4b6a      	ldr	r3, [pc, #424]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0c6      	b.n	800352a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339c:	4b66      	ldr	r3, [pc, #408]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0be      	b.n	800352a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033ac:	f000 f8ce 	bl	800354c <HAL_RCC_GetSysClockFreq>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4a61      	ldr	r2, [pc, #388]	@ (800353c <HAL_RCC_ClockConfig+0x268>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d909      	bls.n	80033ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80033c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033ca:	2380      	movs	r3, #128	@ 0x80
 80033cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f023 0203 	bic.w	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4957      	ldr	r1, [pc, #348]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e0:	f7ff f906 	bl	80025f0 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e8:	f7ff f902 	bl	80025f0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e095      	b.n	800352a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 020c 	and.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	429a      	cmp	r2, r3
 800340e:	d1eb      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003428:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a42      	ldr	r2, [pc, #264]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 800342e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003432:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003440:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003448:	4a3b      	ldr	r2, [pc, #236]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 800344a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800344e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003450:	4b39      	ldr	r3, [pc, #228]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4936      	ldr	r1, [pc, #216]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
 8003462:	e008      	b.n	8003476 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b80      	cmp	r3, #128	@ 0x80
 8003468:	d105      	bne.n	8003476 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800346a:	4b33      	ldr	r3, [pc, #204]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4a32      	ldr	r2, [pc, #200]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003470:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003474:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003476:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d21d      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003484:	4b2b      	ldr	r3, [pc, #172]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 020f 	bic.w	r2, r3, #15
 800348c:	4929      	ldr	r1, [pc, #164]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003494:	f7ff f8ac 	bl	80025f0 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7ff f8a8 	bl	80025f0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e03b      	b.n	800352a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <HAL_RCC_ClockConfig+0x260>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1ed      	bne.n	800349c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4917      	ldr	r1, [pc, #92]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	490f      	ldr	r1, [pc, #60]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034fe:	f000 f825 	bl	800354c <HAL_RCC_GetSysClockFreq>
 8003502:	4602      	mov	r2, r0
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <HAL_RCC_ClockConfig+0x264>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	490c      	ldr	r1, [pc, #48]	@ (8003540 <HAL_RCC_ClockConfig+0x26c>)
 8003510:	5ccb      	ldrb	r3, [r1, r3]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	4a0a      	ldr	r2, [pc, #40]	@ (8003544 <HAL_RCC_ClockConfig+0x270>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800351e:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <HAL_RCC_ClockConfig+0x274>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f818 	bl	8002558 <HAL_InitTick>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	04c4b400 	.word	0x04c4b400
 8003540:	08005ee4 	.word	0x08005ee4
 8003544:	20000000 	.word	0x20000000
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003552:	4b2c      	ldr	r3, [pc, #176]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d102      	bne.n	8003564 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800355e:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e047      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003564:	4b27      	ldr	r3, [pc, #156]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d102      	bne.n	8003576 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003570:	4b26      	ldr	r3, [pc, #152]	@ (800360c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e03e      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003576:	4b23      	ldr	r3, [pc, #140]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d136      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003582:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800358c:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3301      	adds	r3, #1
 8003598:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d10c      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035a0:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	4a16      	ldr	r2, [pc, #88]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035aa:	68d2      	ldr	r2, [r2, #12]
 80035ac:	0a12      	lsrs	r2, r2, #8
 80035ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	617b      	str	r3, [r7, #20]
      break;
 80035b8:	e00c      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ba:	4a13      	ldr	r2, [pc, #76]	@ (8003608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	4a10      	ldr	r2, [pc, #64]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	0a12      	lsrs	r2, r2, #8
 80035c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
      break;
 80035d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	0e5b      	lsrs	r3, r3, #25
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	3301      	adds	r3, #1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	e001      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035f4:	693b      	ldr	r3, [r7, #16]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	00f42400 	.word	0x00f42400
 800360c:	007a1200 	.word	0x007a1200

08003610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003614:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <HAL_RCC_GetHCLKFreq+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000000 	.word	0x20000000

08003628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800362c:	f7ff fff0 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4904      	ldr	r1, [pc, #16]	@ (8003650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	08005ef4 	.word	0x08005ef4

08003654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003658:	f7ff ffda 	bl	8003610 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0adb      	lsrs	r3, r3, #11
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4904      	ldr	r1, [pc, #16]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x28>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	08005ef4 	.word	0x08005ef4

08003680 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003686:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d10c      	bne.n	80036be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036a4:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ae:	68d2      	ldr	r2, [r2, #12]
 80036b0:	0a12      	lsrs	r2, r2, #8
 80036b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	617b      	str	r3, [r7, #20]
    break;
 80036bc:	e00c      	b.n	80036d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036be:	4a12      	ldr	r2, [pc, #72]	@ (8003708 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	0a12      	lsrs	r2, r2, #8
 80036cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    break;
 80036d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0e5b      	lsrs	r3, r3, #25
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	3301      	adds	r3, #1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036f2:	687b      	ldr	r3, [r7, #4]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40021000 	.word	0x40021000
 8003704:	007a1200 	.word	0x007a1200
 8003708:	00f42400 	.word	0x00f42400

0800370c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003714:	2300      	movs	r3, #0
 8003716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003718:	2300      	movs	r3, #0
 800371a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8098 	beq.w	800385a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372e:	4b43      	ldr	r3, [pc, #268]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	4b40      	ldr	r3, [pc, #256]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	4a3f      	ldr	r2, [pc, #252]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6593      	str	r3, [r2, #88]	@ 0x58
 8003746:	4b3d      	ldr	r3, [pc, #244]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003756:	4b3a      	ldr	r3, [pc, #232]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a39      	ldr	r2, [pc, #228]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003762:	f7fe ff45 	bl	80025f0 <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003768:	e009      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe ff41 	bl	80025f0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d902      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	74fb      	strb	r3, [r7, #19]
        break;
 800377c:	e005      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800377e:	4b30      	ldr	r3, [pc, #192]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ef      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800378a:	7cfb      	ldrb	r3, [r7, #19]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d159      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003790:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01e      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d019      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ac:	4b23      	ldr	r3, [pc, #140]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b8:	4b20      	ldr	r3, [pc, #128]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a1f      	ldr	r2, [pc, #124]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	4b1c      	ldr	r3, [pc, #112]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037d8:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe ff01 	bl	80025f0 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f0:	e00b      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fe fefd 	bl	80025f0 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d902      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	74fb      	strb	r3, [r7, #19]
            break;
 8003808:	e006      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	4b0c      	ldr	r3, [pc, #48]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ec      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800381e:	4b07      	ldr	r3, [pc, #28]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	4903      	ldr	r1, [pc, #12]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003834:	e008      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003836:	7cfb      	ldrb	r3, [r7, #19]
 8003838:	74bb      	strb	r3, [r7, #18]
 800383a:	e005      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800383c:	40021000 	.word	0x40021000
 8003840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003848:	7c7b      	ldrb	r3, [r7, #17]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d105      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4ba6      	ldr	r3, [pc, #664]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	4aa5      	ldr	r2, [pc, #660]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003858:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003866:	4ba0      	ldr	r3, [pc, #640]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f023 0203 	bic.w	r2, r3, #3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	499c      	ldr	r1, [pc, #624]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003888:	4b97      	ldr	r3, [pc, #604]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388e:	f023 020c 	bic.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4994      	ldr	r1, [pc, #592]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038aa:	4b8f      	ldr	r3, [pc, #572]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	498b      	ldr	r1, [pc, #556]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038cc:	4b86      	ldr	r3, [pc, #536]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	4983      	ldr	r1, [pc, #524]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ee:	4b7e      	ldr	r3, [pc, #504]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	497a      	ldr	r1, [pc, #488]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003910:	4b75      	ldr	r3, [pc, #468]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003916:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4972      	ldr	r1, [pc, #456]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003932:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003938:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4969      	ldr	r1, [pc, #420]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003954:	4b64      	ldr	r3, [pc, #400]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	4961      	ldr	r1, [pc, #388]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003976:	4b5c      	ldr	r3, [pc, #368]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	4958      	ldr	r1, [pc, #352]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d015      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003998:	4b53      	ldr	r3, [pc, #332]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	4950      	ldr	r1, [pc, #320]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b6:	d105      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039d0:	4b45      	ldr	r3, [pc, #276]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	4942      	ldr	r1, [pc, #264]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039ee:	d105      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039f0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039fa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a08:	4b37      	ldr	r3, [pc, #220]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	4934      	ldr	r1, [pc, #208]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a26:	d105      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a28:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a40:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	4926      	ldr	r1, [pc, #152]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b21      	ldr	r3, [pc, #132]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a20      	ldr	r2, [pc, #128]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a86:	4918      	ldr	r1, [pc, #96]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a98:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a12      	ldr	r2, [pc, #72]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aa2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003abe:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a04      	ldr	r2, [pc, #16]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ada:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003adc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e09d      	b.n	8003c3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b0e:	d009      	beq.n	8003b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fe fab0 	bl	80020a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b64:	d902      	bls.n	8003b6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e002      	b.n	8003b72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b7a:	d007      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	ea42 0103 	orr.w	r1, r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 0204 	and.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c08:	ea42 0103 	orr.w	r1, r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e049      	b.n	8003ce8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7fe fa7b 	bl	8002164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f000 fcd9 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e049      	b.n	8003d96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f841 	bl	8003d9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f000 fc82 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_TIM_PWM_Start+0x24>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e03c      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d109      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x3e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e02f      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d109      	bne.n	8003e0c <HAL_TIM_PWM_Start+0x58>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e022      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d109      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x72>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e015      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d109      	bne.n	8003e40 <HAL_TIM_PWM_Start+0x8c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e008      	b.n	8003e52 <HAL_TIM_PWM_Start+0x9e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e097      	b.n	8003f8a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xb6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e68:	e023      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0xc6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e78:	e01b      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xd6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e88:	e013      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start+0xe6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e98:	e00b      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start+0xf6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ea8:	e003      	b.n	8003eb2 <HAL_TIM_PWM_Start+0xfe>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ffea 	bl	8004e94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a33      	ldr	r2, [pc, #204]	@ (8003f94 <HAL_TIM_PWM_Start+0x1e0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x13e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <HAL_TIM_PWM_Start+0x1e4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x13e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a30      	ldr	r2, [pc, #192]	@ (8003f9c <HAL_TIM_PWM_Start+0x1e8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x13e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa0 <HAL_TIM_PWM_Start+0x1ec>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x13e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa4 <HAL_TIM_PWM_Start+0x1f0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0x142>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_TIM_PWM_Start+0x144>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a20      	ldr	r2, [pc, #128]	@ (8003f94 <HAL_TIM_PWM_Start+0x1e0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d018      	beq.n	8003f48 <HAL_TIM_PWM_Start+0x194>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1e:	d013      	beq.n	8003f48 <HAL_TIM_PWM_Start+0x194>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a20      	ldr	r2, [pc, #128]	@ (8003fa8 <HAL_TIM_PWM_Start+0x1f4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00e      	beq.n	8003f48 <HAL_TIM_PWM_Start+0x194>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fac <HAL_TIM_PWM_Start+0x1f8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <HAL_TIM_PWM_Start+0x194>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <HAL_TIM_PWM_Start+0x1e4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_TIM_PWM_Start+0x194>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <HAL_TIM_PWM_Start+0x1e8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d115      	bne.n	8003f74 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	4b18      	ldr	r3, [pc, #96]	@ (8003fb0 <HAL_TIM_PWM_Start+0x1fc>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b06      	cmp	r3, #6
 8003f58:	d015      	beq.n	8003f86 <HAL_TIM_PWM_Start+0x1d2>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f60:	d011      	beq.n	8003f86 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f72:	e008      	b.n	8003f86 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e000      	b.n	8003f88 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40013400 	.word	0x40013400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	00010007 	.word	0x00010007

08003fb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e097      	b.n	80040f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7fe f8f3 	bl	80021c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003ff8:	f023 0307 	bic.w	r3, r3, #7
 8003ffc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 fb15 	bl	8004638 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	4313      	orrs	r3, r2
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004054:	f023 030c 	bic.w	r3, r3, #12
 8004058:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004060:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	4313      	orrs	r3, r2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	011a      	lsls	r2, r3, #4
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	031b      	lsls	r3, r3, #12
 8004084:	4313      	orrs	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	4313      	orrs	r3, r2
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004110:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004118:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004120:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004128:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d110      	bne.n	8004152 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d102      	bne.n	800413c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004136:	7b7b      	ldrb	r3, [r7, #13]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e069      	b.n	8004214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004150:	e031      	b.n	80041b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d110      	bne.n	800417a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d102      	bne.n	8004164 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800415e:	7b3b      	ldrb	r3, [r7, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d001      	beq.n	8004168 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e055      	b.n	8004214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004178:	e01d      	b.n	80041b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d108      	bne.n	8004192 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d105      	bne.n	8004192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	7b7b      	ldrb	r3, [r7, #13]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d102      	bne.n	8004192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800418c:	7b3b      	ldrb	r3, [r7, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e03e      	b.n	8004214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_TIM_Encoder_Start+0xc4>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d008      	beq.n	80041d4 <HAL_TIM_Encoder_Start+0xd4>
 80041c2:	e00f      	b.n	80041e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2201      	movs	r2, #1
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fe61 	bl	8004e94 <TIM_CCxChannelCmd>
      break;
 80041d2:	e016      	b.n	8004202 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	2104      	movs	r1, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fe59 	bl	8004e94 <TIM_CCxChannelCmd>
      break;
 80041e2:	e00e      	b.n	8004202 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2201      	movs	r2, #1
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fe51 	bl	8004e94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	2104      	movs	r1, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fe4a 	bl	8004e94 <TIM_CCxChannelCmd>
      break;
 8004200:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004236:	2302      	movs	r3, #2
 8004238:	e0ff      	b.n	800443a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b14      	cmp	r3, #20
 8004246:	f200 80f0 	bhi.w	800442a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800424a:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	080042a5 	.word	0x080042a5
 8004254:	0800442b 	.word	0x0800442b
 8004258:	0800442b 	.word	0x0800442b
 800425c:	0800442b 	.word	0x0800442b
 8004260:	080042e5 	.word	0x080042e5
 8004264:	0800442b 	.word	0x0800442b
 8004268:	0800442b 	.word	0x0800442b
 800426c:	0800442b 	.word	0x0800442b
 8004270:	08004327 	.word	0x08004327
 8004274:	0800442b 	.word	0x0800442b
 8004278:	0800442b 	.word	0x0800442b
 800427c:	0800442b 	.word	0x0800442b
 8004280:	08004367 	.word	0x08004367
 8004284:	0800442b 	.word	0x0800442b
 8004288:	0800442b 	.word	0x0800442b
 800428c:	0800442b 	.word	0x0800442b
 8004290:	080043a9 	.word	0x080043a9
 8004294:	0800442b 	.word	0x0800442b
 8004298:	0800442b 	.word	0x0800442b
 800429c:	0800442b 	.word	0x0800442b
 80042a0:	080043e9 	.word	0x080043e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fa60 	bl	8004770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0208 	orr.w	r2, r2, #8
 80042be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0204 	bic.w	r2, r2, #4
 80042ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6999      	ldr	r1, [r3, #24]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	619a      	str	r2, [r3, #24]
      break;
 80042e2:	e0a5      	b.n	8004430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fad0 	bl	8004890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699a      	ldr	r2, [r3, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6999      	ldr	r1, [r3, #24]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	619a      	str	r2, [r3, #24]
      break;
 8004324:	e084      	b.n	8004430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fb39 	bl	80049a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0208 	orr.w	r2, r2, #8
 8004340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0204 	bic.w	r2, r2, #4
 8004350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69d9      	ldr	r1, [r3, #28]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	61da      	str	r2, [r3, #28]
      break;
 8004364:	e064      	b.n	8004430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fba1 	bl	8004ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69d9      	ldr	r1, [r3, #28]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	021a      	lsls	r2, r3, #8
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	61da      	str	r2, [r3, #28]
      break;
 80043a6:	e043      	b.n	8004430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fc0a 	bl	8004bc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0208 	orr.w	r2, r2, #8
 80043c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0204 	bic.w	r2, r2, #4
 80043d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80043e6:	e023      	b.n	8004430 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fc4e 	bl	8004c90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004402:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004412:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004428:	e002      	b.n	8004430 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
      break;
 800442e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop

08004444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIM_ConfigClockSource+0x1c>
 800445c:	2302      	movs	r3, #2
 800445e:	e0de      	b.n	800461e <HAL_TIM_ConfigClockSource+0x1da>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800447e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800448a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a63      	ldr	r2, [pc, #396]	@ (8004628 <HAL_TIM_ConfigClockSource+0x1e4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	f000 80a9 	beq.w	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044a0:	4a61      	ldr	r2, [pc, #388]	@ (8004628 <HAL_TIM_ConfigClockSource+0x1e4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	f200 80ae 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 80044a8:	4a60      	ldr	r2, [pc, #384]	@ (800462c <HAL_TIM_ConfigClockSource+0x1e8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	f000 80a1 	beq.w	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044b0:	4a5e      	ldr	r2, [pc, #376]	@ (800462c <HAL_TIM_ConfigClockSource+0x1e8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	f200 80a6 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 80044b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004630 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	f000 8099 	beq.w	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044c0:	4a5b      	ldr	r2, [pc, #364]	@ (8004630 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	f200 809e 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 80044c8:	4a5a      	ldr	r2, [pc, #360]	@ (8004634 <HAL_TIM_ConfigClockSource+0x1f0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	f000 8091 	beq.w	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044d0:	4a58      	ldr	r2, [pc, #352]	@ (8004634 <HAL_TIM_ConfigClockSource+0x1f0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	f200 8096 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 80044d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044dc:	f000 8089 	beq.w	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 80044e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044e4:	f200 808e 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ec:	d03e      	beq.n	800456c <HAL_TIM_ConfigClockSource+0x128>
 80044ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f2:	f200 8087 	bhi.w	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fa:	f000 8086 	beq.w	800460a <HAL_TIM_ConfigClockSource+0x1c6>
 80044fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004502:	d87f      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 8004504:	2b70      	cmp	r3, #112	@ 0x70
 8004506:	d01a      	beq.n	800453e <HAL_TIM_ConfigClockSource+0xfa>
 8004508:	2b70      	cmp	r3, #112	@ 0x70
 800450a:	d87b      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 800450c:	2b60      	cmp	r3, #96	@ 0x60
 800450e:	d050      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
 8004510:	2b60      	cmp	r3, #96	@ 0x60
 8004512:	d877      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 8004514:	2b50      	cmp	r3, #80	@ 0x50
 8004516:	d03c      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x14e>
 8004518:	2b50      	cmp	r3, #80	@ 0x50
 800451a:	d873      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 800451c:	2b40      	cmp	r3, #64	@ 0x40
 800451e:	d058      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x18e>
 8004520:	2b40      	cmp	r3, #64	@ 0x40
 8004522:	d86f      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 8004524:	2b30      	cmp	r3, #48	@ 0x30
 8004526:	d064      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004528:	2b30      	cmp	r3, #48	@ 0x30
 800452a:	d86b      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 800452c:	2b20      	cmp	r3, #32
 800452e:	d060      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004530:	2b20      	cmp	r3, #32
 8004532:	d867      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05c      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004538:	2b10      	cmp	r3, #16
 800453a:	d05a      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x1ae>
 800453c:	e062      	b.n	8004604 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800454e:	f000 fc81 	bl	8004e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004560:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	609a      	str	r2, [r3, #8]
      break;
 800456a:	e04f      	b.n	800460c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800457c:	f000 fc6a 	bl	8004e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800458e:	609a      	str	r2, [r3, #8]
      break;
 8004590:	e03c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800459e:	461a      	mov	r2, r3
 80045a0:	f000 fbdc 	bl	8004d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2150      	movs	r1, #80	@ 0x50
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fc35 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 80045b0:	e02c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 fbfb 	bl	8004dba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2160      	movs	r1, #96	@ 0x60
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fc25 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 80045d0:	e01c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	461a      	mov	r2, r3
 80045e0:	f000 fbbc 	bl	8004d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2140      	movs	r1, #64	@ 0x40
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fc15 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 80045f0:	e00c      	b.n	800460c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f000 fc0c 	bl	8004e1a <TIM_ITRx_SetConfig>
      break;
 8004602:	e003      	b.n	800460c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e000      	b.n	800460c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800460a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	00100070 	.word	0x00100070
 800462c:	00100040 	.word	0x00100040
 8004630:	00100030 	.word	0x00100030
 8004634:	00100020 	.word	0x00100020

08004638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a42      	ldr	r2, [pc, #264]	@ (8004754 <TIM_Base_SetConfig+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00f      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d00b      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a3f      	ldr	r2, [pc, #252]	@ (8004758 <TIM_Base_SetConfig+0x120>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a3e      	ldr	r2, [pc, #248]	@ (800475c <TIM_Base_SetConfig+0x124>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_Base_SetConfig+0x38>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a3d      	ldr	r2, [pc, #244]	@ (8004760 <TIM_Base_SetConfig+0x128>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d108      	bne.n	8004682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a33      	ldr	r2, [pc, #204]	@ (8004754 <TIM_Base_SetConfig+0x11c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01b      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004690:	d017      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a30      	ldr	r2, [pc, #192]	@ (8004758 <TIM_Base_SetConfig+0x120>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2f      	ldr	r2, [pc, #188]	@ (800475c <TIM_Base_SetConfig+0x124>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00f      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004760 <TIM_Base_SetConfig+0x128>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00b      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004764 <TIM_Base_SetConfig+0x12c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <TIM_Base_SetConfig+0x130>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d003      	beq.n	80046c2 <TIM_Base_SetConfig+0x8a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a2b      	ldr	r2, [pc, #172]	@ (800476c <TIM_Base_SetConfig+0x134>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a16      	ldr	r2, [pc, #88]	@ (8004754 <TIM_Base_SetConfig+0x11c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00f      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <TIM_Base_SetConfig+0x128>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00b      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a16      	ldr	r2, [pc, #88]	@ (8004764 <TIM_Base_SetConfig+0x12c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a15      	ldr	r2, [pc, #84]	@ (8004768 <TIM_Base_SetConfig+0x130>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_Base_SetConfig+0xe8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a14      	ldr	r2, [pc, #80]	@ (800476c <TIM_Base_SetConfig+0x134>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d103      	bne.n	8004728 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d105      	bne.n	8004746 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	611a      	str	r2, [r3, #16]
  }
}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40012c00 	.word	0x40012c00
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40013400 	.word	0x40013400
 8004764:	40014000 	.word	0x40014000
 8004768:	40014400 	.word	0x40014400
 800476c:	40014800 	.word	0x40014800

08004770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f023 0201 	bic.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f023 0302 	bic.w	r3, r3, #2
 80047bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a2c      	ldr	r2, [pc, #176]	@ (800487c <TIM_OC1_SetConfig+0x10c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00f      	beq.n	80047f0 <TIM_OC1_SetConfig+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <TIM_OC1_SetConfig+0x110>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <TIM_OC1_SetConfig+0x80>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <TIM_OC1_SetConfig+0x114>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d007      	beq.n	80047f0 <TIM_OC1_SetConfig+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a29      	ldr	r2, [pc, #164]	@ (8004888 <TIM_OC1_SetConfig+0x118>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_OC1_SetConfig+0x80>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a28      	ldr	r2, [pc, #160]	@ (800488c <TIM_OC1_SetConfig+0x11c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10c      	bne.n	800480a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f023 0308 	bic.w	r3, r3, #8
 80047f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a1b      	ldr	r2, [pc, #108]	@ (800487c <TIM_OC1_SetConfig+0x10c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00f      	beq.n	8004832 <TIM_OC1_SetConfig+0xc2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1a      	ldr	r2, [pc, #104]	@ (8004880 <TIM_OC1_SetConfig+0x110>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_OC1_SetConfig+0xc2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <TIM_OC1_SetConfig+0x114>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_OC1_SetConfig+0xc2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <TIM_OC1_SetConfig+0x118>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_OC1_SetConfig+0xc2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a17      	ldr	r2, [pc, #92]	@ (800488c <TIM_OC1_SetConfig+0x11c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d111      	bne.n	8004856 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40013400 	.word	0x40013400
 8004884:	40014000 	.word	0x40014000
 8004888:	40014400 	.word	0x40014400
 800488c:	40014800 	.word	0x40014800

08004890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f023 0210 	bic.w	r2, r3, #16
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0320 	bic.w	r3, r3, #32
 80048de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a28      	ldr	r2, [pc, #160]	@ (8004990 <TIM_OC2_SetConfig+0x100>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC2_SetConfig+0x6c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a27      	ldr	r2, [pc, #156]	@ (8004994 <TIM_OC2_SetConfig+0x104>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10d      	bne.n	8004918 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004916:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <TIM_OC2_SetConfig+0x100>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00f      	beq.n	8004940 <TIM_OC2_SetConfig+0xb0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <TIM_OC2_SetConfig+0x104>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00b      	beq.n	8004940 <TIM_OC2_SetConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a1b      	ldr	r2, [pc, #108]	@ (8004998 <TIM_OC2_SetConfig+0x108>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_OC2_SetConfig+0xb0>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a1a      	ldr	r2, [pc, #104]	@ (800499c <TIM_OC2_SetConfig+0x10c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_OC2_SetConfig+0xb0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a19      	ldr	r2, [pc, #100]	@ (80049a0 <TIM_OC2_SetConfig+0x110>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d113      	bne.n	8004968 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800494e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40013400 	.word	0x40013400
 8004998:	40014000 	.word	0x40014000
 800499c:	40014400 	.word	0x40014400
 80049a0:	40014800 	.word	0x40014800

080049a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a27      	ldr	r2, [pc, #156]	@ (8004aa0 <TIM_OC3_SetConfig+0xfc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC3_SetConfig+0x6a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a26      	ldr	r2, [pc, #152]	@ (8004aa4 <TIM_OC3_SetConfig+0x100>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10d      	bne.n	8004a2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <TIM_OC3_SetConfig+0xfc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00f      	beq.n	8004a52 <TIM_OC3_SetConfig+0xae>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <TIM_OC3_SetConfig+0x100>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_OC3_SetConfig+0xae>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa8 <TIM_OC3_SetConfig+0x104>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_OC3_SetConfig+0xae>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a19      	ldr	r2, [pc, #100]	@ (8004aac <TIM_OC3_SetConfig+0x108>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_OC3_SetConfig+0xae>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a18      	ldr	r2, [pc, #96]	@ (8004ab0 <TIM_OC3_SetConfig+0x10c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d113      	bne.n	8004a7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	621a      	str	r2, [r3, #32]
}
 8004a94:	bf00      	nop
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40013400 	.word	0x40013400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800

08004ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a28      	ldr	r2, [pc, #160]	@ (8004bb4 <TIM_OC4_SetConfig+0x100>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_OC4_SetConfig+0x6c>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a27      	ldr	r2, [pc, #156]	@ (8004bb8 <TIM_OC4_SetConfig+0x104>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10d      	bne.n	8004b3c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <TIM_OC4_SetConfig+0x100>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00f      	beq.n	8004b64 <TIM_OC4_SetConfig+0xb0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <TIM_OC4_SetConfig+0x104>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <TIM_OC4_SetConfig+0xb0>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <TIM_OC4_SetConfig+0x108>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <TIM_OC4_SetConfig+0xb0>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <TIM_OC4_SetConfig+0x10c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_OC4_SetConfig+0xb0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a19      	ldr	r2, [pc, #100]	@ (8004bc4 <TIM_OC4_SetConfig+0x110>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d113      	bne.n	8004b8c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	019b      	lsls	r3, r3, #6
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	019b      	lsls	r3, r3, #6
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40013400 	.word	0x40013400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800

08004bc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	041b      	lsls	r3, r3, #16
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a17      	ldr	r2, [pc, #92]	@ (8004c7c <TIM_OC5_SetConfig+0xb4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00f      	beq.n	8004c42 <TIM_OC5_SetConfig+0x7a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a16      	ldr	r2, [pc, #88]	@ (8004c80 <TIM_OC5_SetConfig+0xb8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_OC5_SetConfig+0x7a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	@ (8004c84 <TIM_OC5_SetConfig+0xbc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_OC5_SetConfig+0x7a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a14      	ldr	r2, [pc, #80]	@ (8004c88 <TIM_OC5_SetConfig+0xc0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC5_SetConfig+0x7a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	@ (8004c8c <TIM_OC5_SetConfig+0xc4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d109      	bne.n	8004c56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	621a      	str	r2, [r3, #32]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40013400 	.word	0x40013400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800

08004c90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	051b      	lsls	r3, r3, #20
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a18      	ldr	r2, [pc, #96]	@ (8004d48 <TIM_OC6_SetConfig+0xb8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00f      	beq.n	8004d0c <TIM_OC6_SetConfig+0x7c>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a17      	ldr	r2, [pc, #92]	@ (8004d4c <TIM_OC6_SetConfig+0xbc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <TIM_OC6_SetConfig+0x7c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <TIM_OC6_SetConfig+0xc0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <TIM_OC6_SetConfig+0x7c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	@ (8004d54 <TIM_OC6_SetConfig+0xc4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC6_SetConfig+0x7c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a14      	ldr	r2, [pc, #80]	@ (8004d58 <TIM_OC6_SetConfig+0xc8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d109      	bne.n	8004d20 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	029b      	lsls	r3, r3, #10
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 030a 	bic.w	r3, r3, #10
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f023 0210 	bic.w	r2, r3, #16
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004de4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	031b      	lsls	r3, r3, #12
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004df6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f043 0307 	orr.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	021a      	lsls	r2, r3, #8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	609a      	str	r2, [r3, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a1a      	ldr	r2, [r3, #32]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e065      	b.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d108      	bne.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6e:	d013      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a12      	ldr	r2, [pc, #72]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a13      	ldr	r2, [pc, #76]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10c      	bne.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40013400 	.word	0x40013400
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40014000 	.word	0x40014000

08004fe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e073      	b.n	80050e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d11c      	bne.n	80050d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	051b      	lsls	r3, r3, #20
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40013400 	.word	0x40013400

080050fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e042      	b.n	8005194 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fd f91f 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2224      	movs	r2, #36	@ 0x24
 800512a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 faf4 	bl	8005734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f825 	bl	800519c <UART_SetConfig>
 8005152:	4603      	mov	r3, r0
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e01b      	b.n	8005194 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800516a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800517a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fb73 	bl	8005878 <UART_CheckIdleState>
 8005192:	4603      	mov	r3, r0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a0:	b08c      	sub	sp, #48	@ 0x30
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4bab      	ldr	r3, [pc, #684]	@ (8005478 <UART_SetConfig+0x2dc>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4aa0      	ldr	r2, [pc, #640]	@ (800547c <UART_SetConfig+0x2e0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005204:	4313      	orrs	r3, r2
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005212:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800521c:	430b      	orrs	r3, r1
 800521e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005226:	f023 010f 	bic.w	r1, r3, #15
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a91      	ldr	r2, [pc, #580]	@ (8005480 <UART_SetConfig+0x2e4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d125      	bne.n	800528c <UART_SetConfig+0xf0>
 8005240:	4b90      	ldr	r3, [pc, #576]	@ (8005484 <UART_SetConfig+0x2e8>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b03      	cmp	r3, #3
 800524c:	d81a      	bhi.n	8005284 <UART_SetConfig+0xe8>
 800524e:	a201      	add	r2, pc, #4	@ (adr r2, 8005254 <UART_SetConfig+0xb8>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	08005265 	.word	0x08005265
 8005258:	08005275 	.word	0x08005275
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800527d 	.word	0x0800527d
 8005264:	2301      	movs	r3, #1
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	e0d6      	b.n	800541a <UART_SetConfig+0x27e>
 800526c:	2302      	movs	r3, #2
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e0d2      	b.n	800541a <UART_SetConfig+0x27e>
 8005274:	2304      	movs	r3, #4
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527a:	e0ce      	b.n	800541a <UART_SetConfig+0x27e>
 800527c:	2308      	movs	r3, #8
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005282:	e0ca      	b.n	800541a <UART_SetConfig+0x27e>
 8005284:	2310      	movs	r3, #16
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528a:	e0c6      	b.n	800541a <UART_SetConfig+0x27e>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a7d      	ldr	r2, [pc, #500]	@ (8005488 <UART_SetConfig+0x2ec>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d138      	bne.n	8005308 <UART_SetConfig+0x16c>
 8005296:	4b7b      	ldr	r3, [pc, #492]	@ (8005484 <UART_SetConfig+0x2e8>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d82d      	bhi.n	8005300 <UART_SetConfig+0x164>
 80052a4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <UART_SetConfig+0x110>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	08005301 	.word	0x08005301
 80052b4:	08005301 	.word	0x08005301
 80052b8:	08005301 	.word	0x08005301
 80052bc:	080052f1 	.word	0x080052f1
 80052c0:	08005301 	.word	0x08005301
 80052c4:	08005301 	.word	0x08005301
 80052c8:	08005301 	.word	0x08005301
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	08005301 	.word	0x08005301
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005301 	.word	0x08005301
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e098      	b.n	800541a <UART_SetConfig+0x27e>
 80052e8:	2302      	movs	r3, #2
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e094      	b.n	800541a <UART_SetConfig+0x27e>
 80052f0:	2304      	movs	r3, #4
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e090      	b.n	800541a <UART_SetConfig+0x27e>
 80052f8:	2308      	movs	r3, #8
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	e08c      	b.n	800541a <UART_SetConfig+0x27e>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005306:	e088      	b.n	800541a <UART_SetConfig+0x27e>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a5f      	ldr	r2, [pc, #380]	@ (800548c <UART_SetConfig+0x2f0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d125      	bne.n	800535e <UART_SetConfig+0x1c2>
 8005312:	4b5c      	ldr	r3, [pc, #368]	@ (8005484 <UART_SetConfig+0x2e8>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005318:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800531c:	2b30      	cmp	r3, #48	@ 0x30
 800531e:	d016      	beq.n	800534e <UART_SetConfig+0x1b2>
 8005320:	2b30      	cmp	r3, #48	@ 0x30
 8005322:	d818      	bhi.n	8005356 <UART_SetConfig+0x1ba>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d00a      	beq.n	800533e <UART_SetConfig+0x1a2>
 8005328:	2b20      	cmp	r3, #32
 800532a:	d814      	bhi.n	8005356 <UART_SetConfig+0x1ba>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <UART_SetConfig+0x19a>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d008      	beq.n	8005346 <UART_SetConfig+0x1aa>
 8005334:	e00f      	b.n	8005356 <UART_SetConfig+0x1ba>
 8005336:	2300      	movs	r3, #0
 8005338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533c:	e06d      	b.n	800541a <UART_SetConfig+0x27e>
 800533e:	2302      	movs	r3, #2
 8005340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005344:	e069      	b.n	800541a <UART_SetConfig+0x27e>
 8005346:	2304      	movs	r3, #4
 8005348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534c:	e065      	b.n	800541a <UART_SetConfig+0x27e>
 800534e:	2308      	movs	r3, #8
 8005350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005354:	e061      	b.n	800541a <UART_SetConfig+0x27e>
 8005356:	2310      	movs	r3, #16
 8005358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535c:	e05d      	b.n	800541a <UART_SetConfig+0x27e>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a4b      	ldr	r2, [pc, #300]	@ (8005490 <UART_SetConfig+0x2f4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d125      	bne.n	80053b4 <UART_SetConfig+0x218>
 8005368:	4b46      	ldr	r3, [pc, #280]	@ (8005484 <UART_SetConfig+0x2e8>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005372:	2bc0      	cmp	r3, #192	@ 0xc0
 8005374:	d016      	beq.n	80053a4 <UART_SetConfig+0x208>
 8005376:	2bc0      	cmp	r3, #192	@ 0xc0
 8005378:	d818      	bhi.n	80053ac <UART_SetConfig+0x210>
 800537a:	2b80      	cmp	r3, #128	@ 0x80
 800537c:	d00a      	beq.n	8005394 <UART_SetConfig+0x1f8>
 800537e:	2b80      	cmp	r3, #128	@ 0x80
 8005380:	d814      	bhi.n	80053ac <UART_SetConfig+0x210>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <UART_SetConfig+0x1f0>
 8005386:	2b40      	cmp	r3, #64	@ 0x40
 8005388:	d008      	beq.n	800539c <UART_SetConfig+0x200>
 800538a:	e00f      	b.n	80053ac <UART_SetConfig+0x210>
 800538c:	2300      	movs	r3, #0
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005392:	e042      	b.n	800541a <UART_SetConfig+0x27e>
 8005394:	2302      	movs	r3, #2
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800539a:	e03e      	b.n	800541a <UART_SetConfig+0x27e>
 800539c:	2304      	movs	r3, #4
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a2:	e03a      	b.n	800541a <UART_SetConfig+0x27e>
 80053a4:	2308      	movs	r3, #8
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053aa:	e036      	b.n	800541a <UART_SetConfig+0x27e>
 80053ac:	2310      	movs	r3, #16
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b2:	e032      	b.n	800541a <UART_SetConfig+0x27e>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a30      	ldr	r2, [pc, #192]	@ (800547c <UART_SetConfig+0x2e0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d12a      	bne.n	8005414 <UART_SetConfig+0x278>
 80053be:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <UART_SetConfig+0x2e8>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80053c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053cc:	d01a      	beq.n	8005404 <UART_SetConfig+0x268>
 80053ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053d2:	d81b      	bhi.n	800540c <UART_SetConfig+0x270>
 80053d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053d8:	d00c      	beq.n	80053f4 <UART_SetConfig+0x258>
 80053da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053de:	d815      	bhi.n	800540c <UART_SetConfig+0x270>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <UART_SetConfig+0x250>
 80053e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053e8:	d008      	beq.n	80053fc <UART_SetConfig+0x260>
 80053ea:	e00f      	b.n	800540c <UART_SetConfig+0x270>
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	e012      	b.n	800541a <UART_SetConfig+0x27e>
 80053f4:	2302      	movs	r3, #2
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fa:	e00e      	b.n	800541a <UART_SetConfig+0x27e>
 80053fc:	2304      	movs	r3, #4
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005402:	e00a      	b.n	800541a <UART_SetConfig+0x27e>
 8005404:	2308      	movs	r3, #8
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540a:	e006      	b.n	800541a <UART_SetConfig+0x27e>
 800540c:	2310      	movs	r3, #16
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005412:	e002      	b.n	800541a <UART_SetConfig+0x27e>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a17      	ldr	r2, [pc, #92]	@ (800547c <UART_SetConfig+0x2e0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	f040 80a8 	bne.w	8005576 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005426:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800542a:	2b08      	cmp	r3, #8
 800542c:	d834      	bhi.n	8005498 <UART_SetConfig+0x2fc>
 800542e:	a201      	add	r2, pc, #4	@ (adr r2, 8005434 <UART_SetConfig+0x298>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	08005459 	.word	0x08005459
 8005438:	08005499 	.word	0x08005499
 800543c:	08005461 	.word	0x08005461
 8005440:	08005499 	.word	0x08005499
 8005444:	08005467 	.word	0x08005467
 8005448:	08005499 	.word	0x08005499
 800544c:	08005499 	.word	0x08005499
 8005450:	08005499 	.word	0x08005499
 8005454:	0800546f 	.word	0x0800546f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005458:	f7fe f8e6 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 800545c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800545e:	e021      	b.n	80054a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005460:	4b0c      	ldr	r3, [pc, #48]	@ (8005494 <UART_SetConfig+0x2f8>)
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005464:	e01e      	b.n	80054a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005466:	f7fe f871 	bl	800354c <HAL_RCC_GetSysClockFreq>
 800546a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800546c:	e01a      	b.n	80054a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005474:	e016      	b.n	80054a4 <UART_SetConfig+0x308>
 8005476:	bf00      	nop
 8005478:	cfff69f3 	.word	0xcfff69f3
 800547c:	40008000 	.word	0x40008000
 8005480:	40013800 	.word	0x40013800
 8005484:	40021000 	.word	0x40021000
 8005488:	40004400 	.word	0x40004400
 800548c:	40004800 	.word	0x40004800
 8005490:	40004c00 	.word	0x40004c00
 8005494:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 812a 	beq.w	8005700 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	4a9e      	ldr	r2, [pc, #632]	@ (800572c <UART_SetConfig+0x590>)
 80054b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80054be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d305      	bcc.n	80054dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d903      	bls.n	80054e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054e2:	e10d      	b.n	8005700 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	2200      	movs	r2, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	60fa      	str	r2, [r7, #12]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	4a8e      	ldr	r2, [pc, #568]	@ (800572c <UART_SetConfig+0x590>)
 80054f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2200      	movs	r2, #0
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005502:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005506:	f7fb fb2d 	bl	8000b64 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	020b      	lsls	r3, r1, #8
 800551c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005520:	0202      	lsls	r2, r0, #8
 8005522:	6979      	ldr	r1, [r7, #20]
 8005524:	6849      	ldr	r1, [r1, #4]
 8005526:	0849      	lsrs	r1, r1, #1
 8005528:	2000      	movs	r0, #0
 800552a:	460c      	mov	r4, r1
 800552c:	4605      	mov	r5, r0
 800552e:	eb12 0804 	adds.w	r8, r2, r4
 8005532:	eb43 0905 	adc.w	r9, r3, r5
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	469a      	mov	sl, r3
 800553e:	4693      	mov	fp, r2
 8005540:	4652      	mov	r2, sl
 8005542:	465b      	mov	r3, fp
 8005544:	4640      	mov	r0, r8
 8005546:	4649      	mov	r1, r9
 8005548:	f7fb fb0c 	bl	8000b64 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4613      	mov	r3, r2
 8005552:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800555a:	d308      	bcc.n	800556e <UART_SetConfig+0x3d2>
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005562:	d204      	bcs.n	800556e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	e0c8      	b.n	8005700 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005574:	e0c4      	b.n	8005700 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800557e:	d167      	bne.n	8005650 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005580:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005584:	2b08      	cmp	r3, #8
 8005586:	d828      	bhi.n	80055da <UART_SetConfig+0x43e>
 8005588:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <UART_SetConfig+0x3f4>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080055c5 	.word	0x080055c5
 800559c:	080055db 	.word	0x080055db
 80055a0:	080055cb 	.word	0x080055cb
 80055a4:	080055db 	.word	0x080055db
 80055a8:	080055db 	.word	0x080055db
 80055ac:	080055db 	.word	0x080055db
 80055b0:	080055d3 	.word	0x080055d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b4:	f7fe f838 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 80055b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ba:	e014      	b.n	80055e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055bc:	f7fe f84a 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 80055c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055c2:	e010      	b.n	80055e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005730 <UART_SetConfig+0x594>)
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055c8:	e00d      	b.n	80055e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ca:	f7fd ffbf 	bl	800354c <HAL_RCC_GetSysClockFreq>
 80055ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055d0:	e009      	b.n	80055e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055d8:	e005      	b.n	80055e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8089 	beq.w	8005700 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	4a4e      	ldr	r2, [pc, #312]	@ (800572c <UART_SetConfig+0x590>)
 80055f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f8:	461a      	mov	r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005600:	005a      	lsls	r2, r3, #1
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	441a      	add	r2, r3
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	d916      	bls.n	8005648 <UART_SetConfig+0x4ac>
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005620:	d212      	bcs.n	8005648 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	b29b      	uxth	r3, r3
 8005626:	f023 030f 	bic.w	r3, r3, #15
 800562a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	b29b      	uxth	r3, r3
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	b29a      	uxth	r2, r3
 8005638:	8bfb      	ldrh	r3, [r7, #30]
 800563a:	4313      	orrs	r3, r2
 800563c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	8bfa      	ldrh	r2, [r7, #30]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	e05b      	b.n	8005700 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800564e:	e057      	b.n	8005700 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005650:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005654:	2b08      	cmp	r3, #8
 8005656:	d828      	bhi.n	80056aa <UART_SetConfig+0x50e>
 8005658:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <UART_SetConfig+0x4c4>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005685 	.word	0x08005685
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005695 	.word	0x08005695
 800566c:	080056ab 	.word	0x080056ab
 8005670:	0800569b 	.word	0x0800569b
 8005674:	080056ab 	.word	0x080056ab
 8005678:	080056ab 	.word	0x080056ab
 800567c:	080056ab 	.word	0x080056ab
 8005680:	080056a3 	.word	0x080056a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005684:	f7fd ffd0 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8005688:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800568a:	e014      	b.n	80056b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800568c:	f7fd ffe2 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005692:	e010      	b.n	80056b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005694:	4b26      	ldr	r3, [pc, #152]	@ (8005730 <UART_SetConfig+0x594>)
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005698:	e00d      	b.n	80056b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800569a:	f7fd ff57 	bl	800354c <HAL_RCC_GetSysClockFreq>
 800569e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056a0:	e009      	b.n	80056b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056a8:	e005      	b.n	80056b6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056b4:	bf00      	nop
    }

    if (pclk != 0U)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d021      	beq.n	8005700 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c0:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <UART_SetConfig+0x590>)
 80056c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	441a      	add	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2b0f      	cmp	r3, #15
 80056e4:	d909      	bls.n	80056fa <UART_SetConfig+0x55e>
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ec:	d205      	bcs.n	80056fa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e002      	b.n	8005700 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2201      	movs	r2, #1
 8005704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2201      	movs	r2, #1
 800570c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800571c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005720:	4618      	mov	r0, r3
 8005722:	3730      	adds	r7, #48	@ 0x30
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800572a:	bf00      	nop
 800572c:	08005efc 	.word	0x08005efc
 8005730:	00f42400 	.word	0x00f42400

08005734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005832:	d10a      	bne.n	800584a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b098      	sub	sp, #96	@ 0x60
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005888:	f7fc feb2 	bl	80025f0 <HAL_GetTick>
 800588c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b08      	cmp	r3, #8
 800589a:	d12f      	bne.n	80058fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a4:	2200      	movs	r2, #0
 80058a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f88e 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d022      	beq.n	80058fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e6      	bne.n	80058b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e063      	b.n	80059c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d149      	bne.n	800599e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005912:	2200      	movs	r2, #0
 8005914:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f857 	bl	80059cc <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d03c      	beq.n	800599e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	623b      	str	r3, [r7, #32]
   return(result);
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005942:	633b      	str	r3, [r7, #48]	@ 0x30
 8005944:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e6      	bne.n	8005924 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	60fb      	str	r3, [r7, #12]
   return(result);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005976:	61fa      	str	r2, [r7, #28]
 8005978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	69b9      	ldr	r1, [r7, #24]
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	617b      	str	r3, [r7, #20]
   return(result);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1e5      	bne.n	8005956 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e012      	b.n	80059c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3758      	adds	r7, #88	@ 0x58
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059dc:	e04f      	b.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059e4:	d04b      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e6:	f7fc fe03 	bl	80025f0 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <UART_WaitOnFlagUntilTimeout+0x30>
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e04e      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d037      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b80      	cmp	r3, #128	@ 0x80
 8005a12:	d034      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b40      	cmp	r3, #64	@ 0x40
 8005a18:	d031      	beq.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d110      	bne.n	8005a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f838 	bl	8005aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e029      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a58:	d111      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f81e 	bl	8005aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e00f      	b.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4013      	ands	r3, r2
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2301      	moveq	r3, #1
 8005a90:	2300      	movne	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d0a0      	beq.n	80059de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b095      	sub	sp, #84	@ 0x54
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ace:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e6      	bne.n	8005aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e3      	bne.n	8005ae0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d118      	bne.n	8005b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0310 	bic.w	r3, r3, #16
 8005b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6979      	ldr	r1, [r7, #20]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e6      	bne.n	8005b20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b66:	bf00      	nop
 8005b68:	3754      	adds	r7, #84	@ 0x54
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e027      	b.n	8005bd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2224      	movs	r2, #36	@ 0x24
 8005b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0201 	bic.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e02d      	b.n	8005c58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2224      	movs	r2, #36	@ 0x24
 8005c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f84f 	bl	8005cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e02d      	b.n	8005cd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2224      	movs	r2, #36	@ 0x24
 8005c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f811 	bl	8005cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d108      	bne.n	8005cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cfc:	e031      	b.n	8005d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cfe:	2308      	movs	r3, #8
 8005d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d02:	2308      	movs	r3, #8
 8005d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	0e5b      	lsrs	r3, r3, #25
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	0f5b      	lsrs	r3, r3, #29
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	7b3a      	ldrb	r2, [r7, #12]
 8005d2a:	4911      	ldr	r1, [pc, #68]	@ (8005d70 <UARTEx_SetNbDataToProcess+0x94>)
 8005d2c:	5c8a      	ldrb	r2, [r1, r2]
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d32:	7b3a      	ldrb	r2, [r7, #12]
 8005d34:	490f      	ldr	r1, [pc, #60]	@ (8005d74 <UARTEx_SetNbDataToProcess+0x98>)
 8005d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	7b7a      	ldrb	r2, [r7, #13]
 8005d48:	4909      	ldr	r1, [pc, #36]	@ (8005d70 <UARTEx_SetNbDataToProcess+0x94>)
 8005d4a:	5c8a      	ldrb	r2, [r1, r2]
 8005d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d50:	7b7a      	ldrb	r2, [r7, #13]
 8005d52:	4908      	ldr	r1, [pc, #32]	@ (8005d74 <UARTEx_SetNbDataToProcess+0x98>)
 8005d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	08005f14 	.word	0x08005f14
 8005d74:	08005f1c 	.word	0x08005f1c

08005d78 <memset>:
 8005d78:	4402      	add	r2, r0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d100      	bne.n	8005d82 <memset+0xa>
 8005d80:	4770      	bx	lr
 8005d82:	f803 1b01 	strb.w	r1, [r3], #1
 8005d86:	e7f9      	b.n	8005d7c <memset+0x4>

08005d88 <__libc_init_array>:
 8005d88:	b570      	push	{r4, r5, r6, lr}
 8005d8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005dc0 <__libc_init_array+0x38>)
 8005d8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005dc4 <__libc_init_array+0x3c>)
 8005d8e:	1b64      	subs	r4, r4, r5
 8005d90:	10a4      	asrs	r4, r4, #2
 8005d92:	2600      	movs	r6, #0
 8005d94:	42a6      	cmp	r6, r4
 8005d96:	d109      	bne.n	8005dac <__libc_init_array+0x24>
 8005d98:	4d0b      	ldr	r5, [pc, #44]	@ (8005dc8 <__libc_init_array+0x40>)
 8005d9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005dcc <__libc_init_array+0x44>)
 8005d9c:	f000 f896 	bl	8005ecc <_init>
 8005da0:	1b64      	subs	r4, r4, r5
 8005da2:	10a4      	asrs	r4, r4, #2
 8005da4:	2600      	movs	r6, #0
 8005da6:	42a6      	cmp	r6, r4
 8005da8:	d105      	bne.n	8005db6 <__libc_init_array+0x2e>
 8005daa:	bd70      	pop	{r4, r5, r6, pc}
 8005dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db0:	4798      	blx	r3
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7ee      	b.n	8005d94 <__libc_init_array+0xc>
 8005db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dba:	4798      	blx	r3
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7f2      	b.n	8005da6 <__libc_init_array+0x1e>
 8005dc0:	08005f2c 	.word	0x08005f2c
 8005dc4:	08005f2c 	.word	0x08005f2c
 8005dc8:	08005f2c 	.word	0x08005f2c
 8005dcc:	08005f30 	.word	0x08005f30

08005dd0 <fmax>:
 8005dd0:	b508      	push	{r3, lr}
 8005dd2:	ed2d 8b04 	vpush	{d8-d9}
 8005dd6:	eeb0 8a40 	vmov.f32	s16, s0
 8005dda:	eef0 8a60 	vmov.f32	s17, s1
 8005dde:	eeb0 9a41 	vmov.f32	s18, s2
 8005de2:	eef0 9a61 	vmov.f32	s19, s3
 8005de6:	f000 f847 	bl	8005e78 <__fpclassifyd>
 8005dea:	b950      	cbnz	r0, 8005e02 <fmax+0x32>
 8005dec:	eeb0 8a49 	vmov.f32	s16, s18
 8005df0:	eef0 8a69 	vmov.f32	s17, s19
 8005df4:	eeb0 0a48 	vmov.f32	s0, s16
 8005df8:	eef0 0a68 	vmov.f32	s1, s17
 8005dfc:	ecbd 8b04 	vpop	{d8-d9}
 8005e00:	bd08      	pop	{r3, pc}
 8005e02:	eeb0 0a49 	vmov.f32	s0, s18
 8005e06:	eef0 0a69 	vmov.f32	s1, s19
 8005e0a:	f000 f835 	bl	8005e78 <__fpclassifyd>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d0f0      	beq.n	8005df4 <fmax+0x24>
 8005e12:	ec53 2b19 	vmov	r2, r3, d9
 8005e16:	ec51 0b18 	vmov	r0, r1, d8
 8005e1a:	f7fa fe49 	bl	8000ab0 <__aeabi_dcmpgt>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d0e4      	beq.n	8005dec <fmax+0x1c>
 8005e22:	e7e7      	b.n	8005df4 <fmax+0x24>

08005e24 <fmin>:
 8005e24:	b508      	push	{r3, lr}
 8005e26:	ed2d 8b04 	vpush	{d8-d9}
 8005e2a:	eeb0 8a40 	vmov.f32	s16, s0
 8005e2e:	eef0 8a60 	vmov.f32	s17, s1
 8005e32:	eeb0 9a41 	vmov.f32	s18, s2
 8005e36:	eef0 9a61 	vmov.f32	s19, s3
 8005e3a:	f000 f81d 	bl	8005e78 <__fpclassifyd>
 8005e3e:	b950      	cbnz	r0, 8005e56 <fmin+0x32>
 8005e40:	eeb0 8a49 	vmov.f32	s16, s18
 8005e44:	eef0 8a69 	vmov.f32	s17, s19
 8005e48:	eeb0 0a48 	vmov.f32	s0, s16
 8005e4c:	eef0 0a68 	vmov.f32	s1, s17
 8005e50:	ecbd 8b04 	vpop	{d8-d9}
 8005e54:	bd08      	pop	{r3, pc}
 8005e56:	eeb0 0a49 	vmov.f32	s0, s18
 8005e5a:	eef0 0a69 	vmov.f32	s1, s19
 8005e5e:	f000 f80b 	bl	8005e78 <__fpclassifyd>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d0f0      	beq.n	8005e48 <fmin+0x24>
 8005e66:	ec53 2b19 	vmov	r2, r3, d9
 8005e6a:	ec51 0b18 	vmov	r0, r1, d8
 8005e6e:	f7fa fe01 	bl	8000a74 <__aeabi_dcmplt>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0e4      	beq.n	8005e40 <fmin+0x1c>
 8005e76:	e7e7      	b.n	8005e48 <fmin+0x24>

08005e78 <__fpclassifyd>:
 8005e78:	ec51 0b10 	vmov	r0, r1, d0
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8005e82:	460b      	mov	r3, r1
 8005e84:	d019      	beq.n	8005eba <__fpclassifyd+0x42>
 8005e86:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8005e8a:	490e      	ldr	r1, [pc, #56]	@ (8005ec4 <__fpclassifyd+0x4c>)
 8005e8c:	428a      	cmp	r2, r1
 8005e8e:	d90e      	bls.n	8005eae <__fpclassifyd+0x36>
 8005e90:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8005e94:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8005e98:	428a      	cmp	r2, r1
 8005e9a:	d908      	bls.n	8005eae <__fpclassifyd+0x36>
 8005e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec8 <__fpclassifyd+0x50>)
 8005e9e:	4213      	tst	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <__fpclassifyd+0x3a>
 8005ea2:	4294      	cmp	r4, r2
 8005ea4:	d107      	bne.n	8005eb6 <__fpclassifyd+0x3e>
 8005ea6:	fab0 f080 	clz	r0, r0
 8005eaa:	0940      	lsrs	r0, r0, #5
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	2004      	movs	r0, #4
 8005eb0:	e7fc      	b.n	8005eac <__fpclassifyd+0x34>
 8005eb2:	2003      	movs	r0, #3
 8005eb4:	e7fa      	b.n	8005eac <__fpclassifyd+0x34>
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	e7f8      	b.n	8005eac <__fpclassifyd+0x34>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d1ee      	bne.n	8005e9c <__fpclassifyd+0x24>
 8005ebe:	2002      	movs	r0, #2
 8005ec0:	e7f4      	b.n	8005eac <__fpclassifyd+0x34>
 8005ec2:	bf00      	nop
 8005ec4:	7fdfffff 	.word	0x7fdfffff
 8005ec8:	7ff00000 	.word	0x7ff00000

08005ecc <_init>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_fini>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr
