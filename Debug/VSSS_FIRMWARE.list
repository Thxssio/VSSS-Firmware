
VSSS_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a01c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800a200  0800a200  0000b200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5d8  0800a5d8  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5d8  0800a5d8  0000b5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e0  0800a5e0  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e0  0800a5e0  0000b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5e4  0800a5e4  0000b5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800a5e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200001f0  0800a7d4  0000c1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  0800a7d4  0000c710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150bf  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae6  00000000  00000000  000212db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00023dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f71  00000000  00000000  00025190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff0e  00000000  00000000  00026101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d02  00000000  00000000  0004600f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb068  00000000  00000000  0005bd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000666c  00000000  00000000  00126dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a1e4 	.word	0x0800a1e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800a1e4 	.word	0x0800a1e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000fb8:	f7ff fdd6 	bl	8000b68 <__aeabi_dcmpgt>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8000fce:	e011      	b.n	8000ff4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000fdc:	f7ff fda6 	bl	8000b2c <__aeabi_dcmplt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <PID_Init+0x60>
}
 8000fe6:	e005      	b.n	8000ff4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	0000      	movs	r0, r0
	...

08001000 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	@ 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6278      	str	r0, [r7, #36]	@ 0x24
 8001008:	6239      	str	r1, [r7, #32]
 800100a:	61fa      	str	r2, [r7, #28]
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001012:	ed87 1b02 	vstr	d1, [r7, #8]
 8001016:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001022:	6a3a      	ldr	r2, [r7, #32]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	2200      	movs	r2, #0
 8001030:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001032:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001088 <PID+0x88>
 8001036:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001090 <PID+0x90>
 800103a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800103c:	f000 f956 	bl	80012ec <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	2264      	movs	r2, #100	@ 0x64
 8001044:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8001046:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800104a:	4619      	mov	r1, r3
 800104c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800104e:	f000 fa63 	bl	8001518 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001052:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001056:	4619      	mov	r1, r3
 8001058:	ed97 2b00 	vldr	d2, [r7]
 800105c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001060:	ed97 0b04 	vldr	d0, [r7, #16]
 8001064:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001066:	f000 f9af 	bl	80013c8 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800106a:	f001 ff07 	bl	8002e7c <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001078:	605a      	str	r2, [r3, #4]

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	00000000 	.word	0x00000000
 800108c:	406fe000 	.word	0x406fe000
	...

08001098 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	@ 0x30
 800109c:	af02      	add	r7, sp, #8
 800109e:	6278      	str	r0, [r7, #36]	@ 0x24
 80010a0:	6239      	str	r1, [r7, #32]
 80010a2:	61fa      	str	r2, [r7, #28]
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	ed87 0b04 	vstr	d0, [r7, #16]
 80010aa:	ed87 1b02 	vstr	d1, [r7, #8]
 80010ae:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 80010b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	ed97 2b00 	vldr	d2, [r7]
 80010c0:	ed97 1b02 	vldr	d1, [r7, #8]
 80010c4:	ed97 0b04 	vldr	d0, [r7, #16]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	6a39      	ldr	r1, [r7, #32]
 80010ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010d0:	f7ff ff96 	bl	8001000 <PID>
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08c      	sub	sp, #48	@ 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <PID_Compute+0x14>
	{
		return _FALSE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e0db      	b.n	80012a8 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80010f0:	f001 fec4 	bl	8002e7c <HAL_GetTick>
 80010f4:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	6a3a      	ldr	r2, [r7, #32]
 8001106:	429a      	cmp	r2, r3
 8001108:	f0c0 80cd 	bcc.w	80012a6 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001124:	f7ff f8d8 	bl	80002d8 <__aeabi_dsub>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113a:	f7ff f8cd 	bl	80002d8 <__aeabi_dsub>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001152:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001156:	f7ff fa77 	bl	8000648 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8bb 	bl	80002dc <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d114      	bne.n	80011a2 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001188:	f7ff fa5e 	bl	8000648 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f7ff f8a0 	bl	80002d8 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80011ae:	f7ff fcdb 	bl	8000b68 <__aeabi_dcmpgt>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80011c4:	e010      	b.n	80011e8 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80011d2:	f7ff fcab 	bl	8000b2c <__aeabi_dcmplt>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80011f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011fa:	f7ff fa25 	bl	8000648 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001206:	e005      	b.n	8001214 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001220:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001224:	f7ff fa10 	bl	8000648 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	f7ff f852 	bl	80002d8 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800123c:	f7ff f84e 	bl	80002dc <__adddf3>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800124e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001252:	f7ff fc89 	bl	8000b68 <__aeabi_dcmpgt>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001262:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001266:	e00e      	b.n	8001286 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800126e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001272:	f7ff fc5b 	bl	8000b2c <__aeabi_dcmplt>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001282:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800128a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800128e:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001298:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a0:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 80012a6:	2300      	movs	r3, #0
	}

}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3730      	adds	r7, #48	@ 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdb0      	pop	{r4, r5, r7, pc}

080012b0 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <PID_SetMode+0x2e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fe55 	bl	8000f88 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	705a      	strb	r2, [r3, #1]

}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6178      	str	r0, [r7, #20]
 80012f4:	ed87 0b02 	vstr	d0, [r7, #8]
 80012f8:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80012fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001300:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001304:	f7ff fc26 	bl	8000b54 <__aeabi_dcmpge>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d158      	bne.n	80013c0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800130e:	6979      	ldr	r1, [r7, #20]
 8001310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001314:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001318:	6979      	ldr	r1, [r7, #20]
 800131a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800131e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d04b      	beq.n	80013c2 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001338:	f7ff fc16 	bl	8000b68 <__aeabi_dcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d007      	beq.n	8001352 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800134c:	e9c1 2300 	strd	r2, r3, [r1]
 8001350:	e012      	b.n	8001378 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001360:	f7ff fbe4 	bl	8000b2c <__aeabi_dcmplt>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001374:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001384:	f7ff fbf0 	bl	8000b68 <__aeabi_dcmpgt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001394:	6979      	ldr	r1, [r7, #20]
 8001396:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800139a:	e012      	b.n	80013c2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80013a8:	f7ff fbc0 	bl	8000b2c <__aeabi_dcmplt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80013b8:	6979      	ldr	r1, [r7, #20]
 80013ba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80013be:	e000      	b.n	80013c2 <PID_SetOutputLimits+0xd6>
		return;
 80013c0:	bf00      	nop
		}
		else { }

	}

}
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	61f8      	str	r0, [r7, #28]
 80013d0:	ed87 0b04 	vstr	d0, [r7, #16]
 80013d4:	ed87 1b02 	vstr	d1, [r7, #8]
 80013d8:	ed87 2b00 	vstr	d2, [r7]
 80013dc:	460b      	mov	r3, r1
 80013de:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ec:	f7ff fb9e 	bl	8000b2c <__aeabi_dcmplt>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 8089 	bne.w	800150a <PID_SetTunings2+0x142>
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001404:	f7ff fb92 	bl	8000b2c <__aeabi_dcmplt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d17d      	bne.n	800150a <PID_SetTunings2+0x142>
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800141a:	f7ff fb87 	bl	8000b2c <__aeabi_dcmplt>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d172      	bne.n	800150a <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	7efa      	ldrb	r2, [r7, #27]
 8001428:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	2b01      	cmp	r3, #1
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800143c:	69f9      	ldr	r1, [r7, #28]
 800143e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001442:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001446:	69f9      	ldr	r1, [r7, #28]
 8001448:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800144c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001450:	69f9      	ldr	r1, [r7, #28]
 8001452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001456:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f878 	bl	8000554 <__aeabi_ui2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <PID_SetTunings2+0x14c>)
 800146a:	f7ff fa17 	bl	800089c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8001476:	69f9      	ldr	r1, [r7, #28]
 8001478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800147c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001480:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001484:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001488:	f7ff f8de 	bl	8000648 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	69f9      	ldr	r1, [r7, #28]
 8001492:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800149a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800149e:	f7ff f9fd 	bl	800089c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	69f9      	ldr	r1, [r7, #28]
 80014a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	78db      	ldrb	r3, [r3, #3]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d12b      	bne.n	800150c <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	f7fe ff09 	bl	80002d8 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	69f9      	ldr	r1, [r7, #28]
 80014cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80014d6:	f04f 0000 	mov.w	r0, #0
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	f7fe fefb 	bl	80002d8 <__aeabi_dsub>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	69f9      	ldr	r1, [r7, #28]
 80014e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f04f 0100 	mov.w	r1, #0
 80014fa:	f7fe feed 	bl	80002d8 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	69f9      	ldr	r1, [r7, #28]
 8001504:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001508:	e000      	b.n	800150c <PID_SetTunings2+0x144>
		return;
 800150a:	bf00      	nop

	}

}
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	408f4000 	.word	0x408f4000

08001518 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d02e      	beq.n	800158a <PID_SetControllerDirection+0x72>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	78db      	ldrb	r3, [r3, #3]
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	429a      	cmp	r2, r3
 8001534:	d029      	beq.n	800158a <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f7fe fec8 	bl	80002d8 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001558:	f04f 0000 	mov.w	r0, #0
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	f7fe feba 	bl	80002d8 <__aeabi_dsub>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	f7fe feac 	bl	80002d8 <__aeabi_dsub>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	70da      	strb	r2, [r3, #3]

}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dd2e      	ble.n	8001606 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f7fe ffe3 	bl	8000574 <__aeabi_i2d>
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffcc 	bl	8000554 <__aeabi_ui2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7ff f96a 	bl	800089c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80015d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015da:	f7ff f835 	bl	8000648 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80015ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015f2:	f7ff f953 	bl	800089c <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]

	}

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001610 <Motor_Control>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Motor_Control(uint32_t pwm_left, uint8_t dir_left,
                   uint32_t pwm_right, uint8_t dir_right)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	461a      	mov	r2, r3
 800161c:	460b      	mov	r3, r1
 800161e:	72fb      	strb	r3, [r7, #11]
 8001620:	4613      	mov	r3, r2
 8001622:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
  */

  // Motor Esquerdo
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <Motor_Control+0x7c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	461a      	mov	r2, r3
 8001630:	2102      	movs	r1, #2
 8001632:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001636:	f001 feb5 	bl	80033a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	2104      	movs	r1, #4
 800164a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164e:	f001 fea9 	bl	80033a4 <HAL_GPIO_WritePin>

  // Motor Direito
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <Motor_Control+0x80>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin,  (GPIO_PinState)(dir_right));
 800165a:	7abb      	ldrb	r3, [r7, #10]
 800165c:	461a      	mov	r2, r3
 800165e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001662:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001666:	f001 fe9d 	bl	80033a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 800166a:	7abb      	ldrb	r3, [r7, #10]
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800167c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001680:	f001 fe90 	bl	80033a4 <HAL_GPIO_WritePin>
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002bc 	.word	0x200002bc
 8001690:	20000270 	.word	0x20000270

08001694 <Calculate_RPM>:

void Calculate_RPM(void) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800169a:	f001 fbef 	bl	8002e7c <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]
    uint32_t delta_time = now - last_time;
 80016a0:	4b33      	ldr	r3, [pc, #204]	@ (8001770 <Calculate_RPM+0xdc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	613b      	str	r3, [r7, #16]
    if (delta_time == 0) return;
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05a      	beq.n	8001766 <Calculate_RPM+0xd2>

    int16_t current_left_encoder  = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 80016b0:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <Calculate_RPM+0xe0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	81fb      	strh	r3, [r7, #14]
    int16_t current_right_encoder = (int16_t)__HAL_TIM_GET_COUNTER(&htim4);
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <Calculate_RPM+0xe4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	81bb      	strh	r3, [r7, #12]

    int16_t delta_left  = current_left_encoder  - last_left_encoder;
 80016c0:	89fa      	ldrh	r2, [r7, #14]
 80016c2:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <Calculate_RPM+0xe8>)
 80016c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	817b      	strh	r3, [r7, #10]
    int16_t delta_right = current_right_encoder - last_right_encoder;
 80016d0:	89ba      	ldrh	r2, [r7, #12]
 80016d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <Calculate_RPM+0xec>)
 80016d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	b29b      	uxth	r3, r3
 80016de:	813b      	strh	r3, [r7, #8]

    float dt_min = ((float)delta_time) / 60000.0f;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001784 <Calculate_RPM+0xf0>
 80016ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f2:	edc7 7a01 	vstr	s15, [r7, #4]
    left_rpm  = (delta_left  / (float)ENCODER_PULSES_PER_REV) / dt_min;
 80016f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016fa:	ee07 3a90 	vmov	s15, r3
 80016fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001702:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001788 <Calculate_RPM+0xf4>
 8001706:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800170a:	edd7 7a01 	vldr	s15, [r7, #4]
 800170e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001712:	ee16 0a90 	vmov	r0, s13
 8001716:	f7fe ff3f 	bl	8000598 <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	491b      	ldr	r1, [pc, #108]	@ (800178c <Calculate_RPM+0xf8>)
 8001720:	e9c1 2300 	strd	r2, r3, [r1]
    right_rpm = (delta_right / (float)ENCODER_PULSES_PER_REV) / dt_min;
 8001724:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001730:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001788 <Calculate_RPM+0xf4>
 8001734:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001738:	edd7 7a01 	vldr	s15, [r7, #4]
 800173c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001740:	ee16 0a90 	vmov	r0, s13
 8001744:	f7fe ff28 	bl	8000598 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4910      	ldr	r1, [pc, #64]	@ (8001790 <Calculate_RPM+0xfc>)
 800174e:	e9c1 2300 	strd	r2, r3, [r1]

    last_left_encoder  = current_left_encoder;
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <Calculate_RPM+0xe8>)
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	8013      	strh	r3, [r2, #0]
    last_right_encoder = current_right_encoder;
 8001758:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <Calculate_RPM+0xec>)
 800175a:	89bb      	ldrh	r3, [r7, #12]
 800175c:	8013      	strh	r3, [r2, #0]
    last_time          = now;
 800175e:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <Calculate_RPM+0xdc>)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e000      	b.n	8001768 <Calculate_RPM+0xd4>
    if (delta_time == 0) return;
 8001766:	bf00      	nop
}
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000564 	.word	0x20000564
 8001774:	20000308 	.word	0x20000308
 8001778:	20000354 	.word	0x20000354
 800177c:	20000560 	.word	0x20000560
 8001780:	20000562 	.word	0x20000562
 8001784:	476a6000 	.word	0x476a6000
 8001788:	452be000 	.word	0x452be000
 800178c:	20000518 	.word	0x20000518
 8001790:	20000520 	.word	0x20000520
 8001794:	00000000 	.word	0x00000000

08001798 <Set_Motor_Speeds>:


void Set_Motor_Speeds(float vL, float vR) {
 8001798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800179c:	b088      	sub	sp, #32
 800179e:	af00      	add	r7, sp, #0
 80017a0:	ed87 0a01 	vstr	s0, [r7, #4]
 80017a4:	edc7 0a00 	vstr	s1, [r7]
    Calculate_RPM();
 80017a8:	f7ff ff74 	bl	8001694 <Calculate_RPM>



    float target_rpm_left  = (vL * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe fef3 	bl	8000598 <__aeabi_f2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4bbc      	ldr	r3, [pc, #752]	@ (8001aa8 <Set_Motor_Speeds+0x310>)
 80017b8:	f7fe ff46 	bl	8000648 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	a3b0      	add	r3, pc, #704	@ (adr r3, 8001a88 <Set_Motor_Speeds+0x2f0>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7ff f867 	bl	800089c <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff fa0f 	bl	8000bf8 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	61fb      	str	r3, [r7, #28]
    float target_rpm_right = (vR * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 80017de:	6838      	ldr	r0, [r7, #0]
 80017e0:	f7fe feda 	bl	8000598 <__aeabi_f2d>
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4baf      	ldr	r3, [pc, #700]	@ (8001aa8 <Set_Motor_Speeds+0x310>)
 80017ea:	f7fe ff2d 	bl	8000648 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001a88 <Set_Motor_Speeds+0x2f0>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7ff f84e 	bl	800089c <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9f6 	bl	8000bf8 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	61bb      	str	r3, [r7, #24]

    setpoint_left_rpm  = target_rpm_left;
 8001810:	69f8      	ldr	r0, [r7, #28]
 8001812:	f7fe fec1 	bl	8000598 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	49a4      	ldr	r1, [pc, #656]	@ (8001aac <Set_Motor_Speeds+0x314>)
 800181c:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 8001820:	69b8      	ldr	r0, [r7, #24]
 8001822:	f7fe feb9 	bl	8000598 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	49a1      	ldr	r1, [pc, #644]	@ (8001ab0 <Set_Motor_Speeds+0x318>)
 800182c:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_rpm;
 8001830:	4ba0      	ldr	r3, [pc, #640]	@ (8001ab4 <Set_Motor_Speeds+0x31c>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	49a0      	ldr	r1, [pc, #640]	@ (8001ab8 <Set_Motor_Speeds+0x320>)
 8001838:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_rpm;
 800183c:	4b9f      	ldr	r3, [pc, #636]	@ (8001abc <Set_Motor_Speeds+0x324>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	499f      	ldr	r1, [pc, #636]	@ (8001ac0 <Set_Motor_Speeds+0x328>)
 8001844:	e9c1 2300 	strd	r2, r3, [r1]

    PID_Compute(&pidLeft);
 8001848:	489e      	ldr	r0, [pc, #632]	@ (8001ac4 <Set_Motor_Speeds+0x32c>)
 800184a:	f7ff fc47 	bl	80010dc <PID_Compute>
    PID_Compute(&pidRight);
 800184e:	489e      	ldr	r0, [pc, #632]	@ (8001ac8 <Set_Motor_Speeds+0x330>)
 8001850:	f7ff fc44 	bl	80010dc <PID_Compute>


    if (outputLeft > PWM_MAX) {
 8001854:	4b9d      	ldr	r3, [pc, #628]	@ (8001acc <Set_Motor_Speeds+0x334>)
 8001856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185a:	a38d      	add	r3, pc, #564	@ (adr r3, 8001a90 <Set_Motor_Speeds+0x2f8>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7ff f982 	bl	8000b68 <__aeabi_dcmpgt>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <Set_Motor_Speeds+0xe0>
        outputLeft = PWM_MAX;
 800186a:	4998      	ldr	r1, [pc, #608]	@ (8001acc <Set_Motor_Speeds+0x334>)
 800186c:	a388      	add	r3, pc, #544	@ (adr r3, 8001a90 <Set_Motor_Speeds+0x2f8>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	e9c1 2300 	strd	r2, r3, [r1]
 8001876:	e010      	b.n	800189a <Set_Motor_Speeds+0x102>
    } else if (outputLeft < -PWM_MAX) {
 8001878:	4b94      	ldr	r3, [pc, #592]	@ (8001acc <Set_Motor_Speeds+0x334>)
 800187a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187e:	a386      	add	r3, pc, #536	@ (adr r3, 8001a98 <Set_Motor_Speeds+0x300>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f952 	bl	8000b2c <__aeabi_dcmplt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <Set_Motor_Speeds+0x102>
        outputLeft = -PWM_MAX;
 800188e:	498f      	ldr	r1, [pc, #572]	@ (8001acc <Set_Motor_Speeds+0x334>)
 8001890:	a381      	add	r3, pc, #516	@ (adr r3, 8001a98 <Set_Motor_Speeds+0x300>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (outputRight > PWM_MAX) {
 800189a:	4b8d      	ldr	r3, [pc, #564]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 800189c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a0:	a37b      	add	r3, pc, #492	@ (adr r3, 8001a90 <Set_Motor_Speeds+0x2f8>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7ff f95f 	bl	8000b68 <__aeabi_dcmpgt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <Set_Motor_Speeds+0x126>
        outputRight = PWM_MAX;
 80018b0:	4987      	ldr	r1, [pc, #540]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 80018b2:	a377      	add	r3, pc, #476	@ (adr r3, 8001a90 <Set_Motor_Speeds+0x2f8>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]
 80018bc:	e010      	b.n	80018e0 <Set_Motor_Speeds+0x148>
    } else if (outputRight < -PWM_MAX) {
 80018be:	4b84      	ldr	r3, [pc, #528]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 80018c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c4:	a374      	add	r3, pc, #464	@ (adr r3, 8001a98 <Set_Motor_Speeds+0x300>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7ff f92f 	bl	8000b2c <__aeabi_dcmplt>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <Set_Motor_Speeds+0x148>
        outputRight = -PWM_MAX;
 80018d4:	497e      	ldr	r1, [pc, #504]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 80018d6:	a370      	add	r3, pc, #448	@ (adr r3, 8001a98 <Set_Motor_Speeds+0x300>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	e9c1 2300 	strd	r2, r3, [r1]
    }


    if (fabs(outputLeft) < OUTPUT_TOLERANCE) outputLeft = 0;
 80018e0:	4b7a      	ldr	r3, [pc, #488]	@ (8001acc <Set_Motor_Speeds+0x334>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	4690      	mov	r8, r2
 80018e8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b78      	ldr	r3, [pc, #480]	@ (8001ad4 <Set_Motor_Speeds+0x33c>)
 80018f2:	4640      	mov	r0, r8
 80018f4:	4649      	mov	r1, r9
 80018f6:	f7ff f919 	bl	8000b2c <__aeabi_dcmplt>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <Set_Motor_Speeds+0x176>
 8001900:	4972      	ldr	r1, [pc, #456]	@ (8001acc <Set_Motor_Speeds+0x334>)
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9c1 2300 	strd	r2, r3, [r1]
    if (fabs(outputRight) < OUTPUT_TOLERANCE) outputRight = 0;
 800190e:	4b70      	ldr	r3, [pc, #448]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	4614      	mov	r4, r2
 8001916:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad4 <Set_Motor_Speeds+0x33c>)
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7ff f902 	bl	8000b2c <__aeabi_dcmplt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <Set_Motor_Speeds+0x1a4>
 800192e:	4968      	ldr	r1, [pc, #416]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9c1 2300 	strd	r2, r3, [r1]


    float pwm_left  = fabs(outputLeft);
 800193c:	4b63      	ldr	r3, [pc, #396]	@ (8001acc <Set_Motor_Speeds+0x334>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f957 	bl	8000bf8 <__aeabi_d2f>
 800194a:	ee07 0a90 	vmov	s15, r0
 800194e:	eef0 7ae7 	vabs.f32	s15, s15
 8001952:	edc7 7a05 	vstr	s15, [r7, #20]
    float pwm_right = fabs(outputRight);
 8001956:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f94a 	bl	8000bf8 <__aeabi_d2f>
 8001964:	ee07 0a90 	vmov	s15, r0
 8001968:	eef0 7ae7 	vabs.f32	s15, s15
 800196c:	edc7 7a04 	vstr	s15, [r7, #16]

    pwm_left  = fmax(pwm_left, PWM_MIN);
 8001970:	6978      	ldr	r0, [r7, #20]
 8001972:	f7fe fe11 	bl	8000598 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	ed9f 1b49 	vldr	d1, [pc, #292]	@ 8001aa0 <Set_Motor_Speeds+0x308>
 800197e:	ec43 2b10 	vmov	d0, r2, r3
 8001982:	f008 fbb1 	bl	800a0e8 <fmax>
 8001986:	ec53 2b10 	vmov	r2, r3, d0
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff f933 	bl	8000bf8 <__aeabi_d2f>
 8001992:	4603      	mov	r3, r0
 8001994:	617b      	str	r3, [r7, #20]
    pwm_left  = fmin(pwm_left, PWM_MAX);
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7fe fdfe 	bl	8000598 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	ed9f 1b3b 	vldr	d1, [pc, #236]	@ 8001a90 <Set_Motor_Speeds+0x2f8>
 80019a4:	ec43 2b10 	vmov	d0, r2, r3
 80019a8:	f008 fbc8 	bl	800a13c <fmin>
 80019ac:	ec53 2b10 	vmov	r2, r3, d0
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f920 	bl	8000bf8 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	617b      	str	r3, [r7, #20]
    pwm_right = fmax(pwm_right, PWM_MIN);
 80019bc:	6938      	ldr	r0, [r7, #16]
 80019be:	f7fe fdeb 	bl	8000598 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8001aa0 <Set_Motor_Speeds+0x308>
 80019ca:	ec43 2b10 	vmov	d0, r2, r3
 80019ce:	f008 fb8b 	bl	800a0e8 <fmax>
 80019d2:	ec53 2b10 	vmov	r2, r3, d0
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f90d 	bl	8000bf8 <__aeabi_d2f>
 80019de:	4603      	mov	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]
    pwm_right = fmin(pwm_right, PWM_MAX);
 80019e2:	6938      	ldr	r0, [r7, #16]
 80019e4:	f7fe fdd8 	bl	8000598 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	ed9f 1b28 	vldr	d1, [pc, #160]	@ 8001a90 <Set_Motor_Speeds+0x2f8>
 80019f0:	ec43 2b10 	vmov	d0, r2, r3
 80019f4:	f008 fba2 	bl	800a13c <fmin>
 80019f8:	ec53 2b10 	vmov	r2, r3, d0
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f8fa 	bl	8000bf8 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	613b      	str	r3, [r7, #16]


    uint8_t dir_left  = (outputLeft >= 0) ? 0 : 1;
 8001a08:	4b30      	ldr	r3, [pc, #192]	@ (8001acc <Set_Motor_Speeds+0x334>)
 8001a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	461c      	mov	r4, r3
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	f7ff f89b 	bl	8000b54 <__aeabi_dcmpge>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <Set_Motor_Speeds+0x290>
 8001a24:	2300      	movs	r3, #0
 8001a26:	461c      	mov	r4, r3
 8001a28:	b2e3      	uxtb	r3, r4
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	73fb      	strb	r3, [r7, #15]
    uint8_t dir_right = (outputRight >= 0) ? 0 : 1;
 8001a32:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <Set_Motor_Speeds+0x338>)
 8001a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	f7ff f886 	bl	8000b54 <__aeabi_dcmpge>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <Set_Motor_Speeds+0x2ba>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	461c      	mov	r4, r3
 8001a52:	b2e3      	uxtb	r3, r4
 8001a54:	f083 0301 	eor.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	73bb      	strb	r3, [r7, #14]

    Motor_Control((uint32_t)pwm_left, dir_left, (uint32_t)pwm_right, dir_right);
 8001a5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a60:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	7bf9      	ldrb	r1, [r7, #15]
 8001a70:	ee17 2a90 	vmov	r2, s15
 8001a74:	ee17 0a10 	vmov	r0, s14
 8001a78:	f7ff fdca 	bl	8001610 <Motor_Control>

}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a86:	bf00      	nop
 8001a88:	5b22baa6 	.word	0x5b22baa6
 8001a8c:	3fd8209f 	.word	0x3fd8209f
 8001a90:	00000000 	.word	0x00000000
 8001a94:	409a8c00 	.word	0x409a8c00
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	c09a8c00 	.word	0xc09a8c00
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	405e0000 	.word	0x405e0000
 8001aa8:	404e0000 	.word	0x404e0000
 8001aac:	20000528 	.word	0x20000528
 8001ab0:	20000530 	.word	0x20000530
 8001ab4:	20000518 	.word	0x20000518
 8001ab8:	20000548 	.word	0x20000548
 8001abc:	20000520 	.word	0x20000520
 8001ac0:	20000550 	.word	0x20000550
 8001ac4:	20000438 	.word	0x20000438
 8001ac8:	200004a8 	.word	0x200004a8
 8001acc:	20000538 	.word	0x20000538
 8001ad0:	20000540 	.word	0x20000540
 8001ad4:	40080000 	.word	0x40080000

08001ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ade:	f001 f968 	bl	8002db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae2:	f000 f907 	bl	8001cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae6:	f000 fbad 	bl	8002244 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001aea:	f000 f98b 	bl	8001e04 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001aee:	f000 fa39 	bl	8001f64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001af2:	f000 faad 	bl	8002050 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001af6:	f000 fb01 	bl	80020fc <MX_TIM4_Init>
  MX_SPI1_Init();
 8001afa:	f000 f945 	bl	8001d88 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001afe:	f000 fb53 	bl	80021a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b02:	213c      	movs	r1, #60	@ 0x3c
 8001b04:	4864      	ldr	r0, [pc, #400]	@ (8001c98 <main+0x1c0>)
 8001b06:	f003 fdc9 	bl	800569c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b0a:	213c      	movs	r1, #60	@ 0x3c
 8001b0c:	4863      	ldr	r0, [pc, #396]	@ (8001c9c <main+0x1c4>)
 8001b0e:	f003 fdc5 	bl	800569c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b12:	2100      	movs	r1, #0
 8001b14:	4862      	ldr	r0, [pc, #392]	@ (8001ca0 <main+0x1c8>)
 8001b16:	f003 fc1b 	bl	8005350 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4861      	ldr	r0, [pc, #388]	@ (8001ca4 <main+0x1cc>)
 8001b1e:	f003 fc17 	bl	8005350 <HAL_TIM_PWM_Start>

  last_time          = HAL_GetTick();
 8001b22:	f001 f9ab 	bl	8002e7c <HAL_GetTick>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca8 <main+0x1d0>)
 8001b2a:	6013      	str	r3, [r2, #0]
  last_left_encoder  = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8001b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <main+0x1c0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b5d      	ldr	r3, [pc, #372]	@ (8001cac <main+0x1d4>)
 8001b36:	801a      	strh	r2, [r3, #0]
  last_right_encoder = (int16_t)__HAL_TIM_GET_COUNTER(&htim4);
 8001b38:	4b58      	ldr	r3, [pc, #352]	@ (8001c9c <main+0x1c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb0 <main+0x1d8>)
 8001b42:	801a      	strh	r2, [r3, #0]

  PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 19.42, 435.7, 0.2, _PID_CD_DIRECT);
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	ed9f 2b49 	vldr	d2, [pc, #292]	@ 8001c70 <main+0x198>
 8001b4c:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 8001c78 <main+0x1a0>
 8001b50:	ed9f 0b4b 	vldr	d0, [pc, #300]	@ 8001c80 <main+0x1a8>
 8001b54:	4b57      	ldr	r3, [pc, #348]	@ (8001cb4 <main+0x1dc>)
 8001b56:	4a58      	ldr	r2, [pc, #352]	@ (8001cb8 <main+0x1e0>)
 8001b58:	4958      	ldr	r1, [pc, #352]	@ (8001cbc <main+0x1e4>)
 8001b5a:	4859      	ldr	r0, [pc, #356]	@ (8001cc0 <main+0x1e8>)
 8001b5c:	f7ff fa9c 	bl	8001098 <PID2>
  PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 19.42, 435.7, 0.2, _PID_CD_DIRECT);
 8001b60:	2300      	movs	r3, #0
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	ed9f 2b42 	vldr	d2, [pc, #264]	@ 8001c70 <main+0x198>
 8001b68:	ed9f 1b43 	vldr	d1, [pc, #268]	@ 8001c78 <main+0x1a0>
 8001b6c:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 8001c80 <main+0x1a8>
 8001b70:	4b54      	ldr	r3, [pc, #336]	@ (8001cc4 <main+0x1ec>)
 8001b72:	4a55      	ldr	r2, [pc, #340]	@ (8001cc8 <main+0x1f0>)
 8001b74:	4955      	ldr	r1, [pc, #340]	@ (8001ccc <main+0x1f4>)
 8001b76:	4856      	ldr	r0, [pc, #344]	@ (8001cd0 <main+0x1f8>)
 8001b78:	f7ff fa8e 	bl	8001098 <PID2>

  PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8001b7c:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8001c88 <main+0x1b0>
 8001b80:	ed9f 0b43 	vldr	d0, [pc, #268]	@ 8001c90 <main+0x1b8>
 8001b84:	484e      	ldr	r0, [pc, #312]	@ (8001cc0 <main+0x1e8>)
 8001b86:	f7ff fbb1 	bl	80012ec <PID_SetOutputLimits>
  PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 8001b8a:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 8001c88 <main+0x1b0>
 8001b8e:	ed9f 0b40 	vldr	d0, [pc, #256]	@ 8001c90 <main+0x1b8>
 8001b92:	484f      	ldr	r0, [pc, #316]	@ (8001cd0 <main+0x1f8>)
 8001b94:	f7ff fbaa 	bl	80012ec <PID_SetOutputLimits>

  PID_SetSampleTime(&pidLeft, 10);
 8001b98:	210a      	movs	r1, #10
 8001b9a:	4849      	ldr	r0, [pc, #292]	@ (8001cc0 <main+0x1e8>)
 8001b9c:	f7ff fcfc 	bl	8001598 <PID_SetSampleTime>
  PID_SetSampleTime(&pidRight, 10);
 8001ba0:	210a      	movs	r1, #10
 8001ba2:	484b      	ldr	r0, [pc, #300]	@ (8001cd0 <main+0x1f8>)
 8001ba4:	f7ff fcf8 	bl	8001598 <PID_SetSampleTime>

  PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4845      	ldr	r0, [pc, #276]	@ (8001cc0 <main+0x1e8>)
 8001bac:	f7ff fb80 	bl	80012b0 <PID_SetMode>
  PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4847      	ldr	r0, [pc, #284]	@ (8001cd0 <main+0x1f8>)
 8001bb4:	f7ff fb7c 	bl	80012b0 <PID_SetMode>

  NRF24_Init();
 8001bb8:	f000 fd20 	bl	80025fc <NRF24_Init>
  NRF24_RxMode(RxAddress,76);
 8001bbc:	214c      	movs	r1, #76	@ 0x4c
 8001bbe:	4845      	ldr	r0, [pc, #276]	@ (8001cd4 <main+0x1fc>)
 8001bc0:	f000 fd43 	bl	800264a <NRF24_RxMode>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg1, strlen(msg1), 1000);
 8001bc4:	4844      	ldr	r0, [pc, #272]	@ (8001cd8 <main+0x200>)
 8001bc6:	f7fe fb7b 	bl	80002c0 <strlen>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	4941      	ldr	r1, [pc, #260]	@ (8001cd8 <main+0x200>)
 8001bd4:	4841      	ldr	r0, [pc, #260]	@ (8001cdc <main+0x204>)
 8001bd6:	f004 fdaf 	bl	8006738 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (isDataAvailable(2) == 1)
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f000 fd74 	bl	80026c8 <isDataAvailable>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10f      	bne.n	8001c06 <main+0x12e>
      {
          NRF24_Receive(RxData);
 8001be6:	483e      	ldr	r0, [pc, #248]	@ (8001ce0 <main+0x208>)
 8001be8:	f000 fd8e 	bl	8002708 <NRF24_Receive>
          uint8_t status = nrf24_ReadReg(STATUS);
 8001bec:	2007      	movs	r0, #7
 8001bee:	f000 fc29 	bl	8002444 <nrf24_ReadReg>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
          memcpy(&vL, &RxData[0], sizeof(float));
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <main+0x208>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a3a      	ldr	r2, [pc, #232]	@ (8001ce4 <main+0x20c>)
 8001bfc:	6013      	str	r3, [r2, #0]
          memcpy(&vR, &RxData[4], sizeof(float));
 8001bfe:	4b38      	ldr	r3, [pc, #224]	@ (8001ce0 <main+0x208>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4a39      	ldr	r2, [pc, #228]	@ (8001ce8 <main+0x210>)
 8001c04:	6013      	str	r3, [r2, #0]
      }

      snprintf((char *)data, sizeof(data), "vL: %.2f, vR: %.2f\r\n", vL, vR);
 8001c06:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <main+0x20c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fcc4 	bl	8000598 <__aeabi_f2d>
 8001c10:	4604      	mov	r4, r0
 8001c12:	460d      	mov	r5, r1
 8001c14:	4b34      	ldr	r3, [pc, #208]	@ (8001ce8 <main+0x210>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcbd 	bl	8000598 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c26:	e9cd 4500 	strd	r4, r5, [sp]
 8001c2a:	4a30      	ldr	r2, [pc, #192]	@ (8001cec <main+0x214>)
 8001c2c:	2132      	movs	r1, #50	@ 0x32
 8001c2e:	4830      	ldr	r0, [pc, #192]	@ (8001cf0 <main+0x218>)
 8001c30:	f006 f918 	bl	8007e64 <sniprintf>
      HAL_UART_Transmit(&huart1, data, strlen((char *)data), 1000);
 8001c34:	482e      	ldr	r0, [pc, #184]	@ (8001cf0 <main+0x218>)
 8001c36:	f7fe fb43 	bl	80002c0 <strlen>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c42:	492b      	ldr	r1, [pc, #172]	@ (8001cf0 <main+0x218>)
 8001c44:	4825      	ldr	r0, [pc, #148]	@ (8001cdc <main+0x204>)
 8001c46:	f004 fd77 	bl	8006738 <HAL_UART_Transmit>
      Set_Motor_Speeds(vL, vR);
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <main+0x20c>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <main+0x210>)
 8001c52:	ed93 7a00 	vldr	s14, [r3]
 8001c56:	eef0 0a47 	vmov.f32	s1, s14
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	f7ff fd9b 	bl	8001798 <Set_Motor_Speeds>
//      Motor_Control((uint32_t)pwm_left, 1, (uint32_t)pwm_right, 1); //COLETAS DE DADOS
//      Send_Data_to_PC(); //COLETAS DE DADOS
      HAL_Delay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f001 f916 	bl	8002e94 <HAL_Delay>
      if (isDataAvailable(2) == 1)
 8001c68:	e7b7      	b.n	8001bda <main+0x102>
 8001c6a:	bf00      	nop
 8001c6c:	f3af 8000 	nop.w
 8001c70:	9999999a 	.word	0x9999999a
 8001c74:	3fc99999 	.word	0x3fc99999
 8001c78:	33333333 	.word	0x33333333
 8001c7c:	407b3b33 	.word	0x407b3b33
 8001c80:	1eb851ec 	.word	0x1eb851ec
 8001c84:	40336b85 	.word	0x40336b85
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	409a8c00 	.word	0x409a8c00
 8001c90:	00000000 	.word	0x00000000
 8001c94:	c09a8c00 	.word	0xc09a8c00
 8001c98:	20000308 	.word	0x20000308
 8001c9c:	20000354 	.word	0x20000354
 8001ca0:	20000270 	.word	0x20000270
 8001ca4:	200002bc 	.word	0x200002bc
 8001ca8:	20000564 	.word	0x20000564
 8001cac:	20000560 	.word	0x20000560
 8001cb0:	20000562 	.word	0x20000562
 8001cb4:	20000528 	.word	0x20000528
 8001cb8:	20000538 	.word	0x20000538
 8001cbc:	20000548 	.word	0x20000548
 8001cc0:	20000438 	.word	0x20000438
 8001cc4:	20000530 	.word	0x20000530
 8001cc8:	20000540 	.word	0x20000540
 8001ccc:	20000550 	.word	0x20000550
 8001cd0:	200004a8 	.word	0x200004a8
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	200003a0 	.word	0x200003a0
 8001ce0:	20000568 	.word	0x20000568
 8001ce4:	20000558 	.word	0x20000558
 8001ce8:	2000055c 	.word	0x2000055c
 8001cec:	0800a200 	.word	0x0800a200
 8001cf0:	20000588 	.word	0x20000588

08001cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	@ 0x50
 8001cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	2238      	movs	r2, #56	@ 0x38
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f006 f925 	bl	8007f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f001 fb5c 	bl	80033d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d24:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d26:	2302      	movs	r3, #2
 8001d28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d32:	2355      	movs	r3, #85	@ 0x55
 8001d34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d36:	2302      	movs	r3, #2
 8001d38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d42:	f107 0318 	add.w	r3, r7, #24
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 fbf8 	bl	800353c <HAL_RCC_OscConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d52:	f000 faf9 	bl	8002348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d56:	230f      	movs	r3, #15
 8001d58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f001 fef6 	bl	8003b60 <HAL_RCC_ClockConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d7a:	f000 fae5 	bl	8002348 <Error_Handler>
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3750      	adds	r7, #80	@ 0x50
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <MX_SPI1_Init+0x78>)
 8001d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001d94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001da2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001da6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dae:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001de2:	2208      	movs	r2, #8
 8001de4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <MX_SPI1_Init+0x74>)
 8001de8:	f002 fac6 	bl	8004378 <HAL_SPI_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001df2:	f000 faa9 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000020c 	.word	0x2000020c
 8001e00:	40013000 	.word	0x40013000

08001e04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09c      	sub	sp, #112	@ 0x70
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2234      	movs	r2, #52	@ 0x34
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f006 f887 	bl	8007f52 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e44:	4b45      	ldr	r3, [pc, #276]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e46:	4a46      	ldr	r2, [pc, #280]	@ (8001f60 <MX_TIM1_Init+0x15c>)
 8001e48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e4a:	4b44      	ldr	r3, [pc, #272]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e50:	4b42      	ldr	r3, [pc, #264]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 8001e56:	4b41      	ldr	r3, [pc, #260]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e58:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001e5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e64:	4b3d      	ldr	r3, [pc, #244]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e70:	483a      	ldr	r0, [pc, #232]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e72:	f003 f9b5 	bl	80051e0 <HAL_TIM_Base_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e7c:	f000 fa64 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4833      	ldr	r0, [pc, #204]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e8e:	f003 fda7 	bl	80059e0 <HAL_TIM_ConfigClockSource>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e98:	f000 fa56 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e9c:	482f      	ldr	r0, [pc, #188]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001e9e:	f003 f9f6 	bl	800528e <HAL_TIM_PWM_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001ea8:	f000 fa4e 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4827      	ldr	r0, [pc, #156]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001ec0:	f004 fadc 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001eca:	f000 fa3d 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ece:	2360      	movs	r3, #96	@ 0x60
 8001ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eda:	2300      	movs	r3, #0
 8001edc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481a      	ldr	r0, [pc, #104]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001ef4:	f003 fc60 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001efe:	f000 fa23 	bl	8002348 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f32:	2300      	movs	r3, #0
 8001f34:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4807      	ldr	r0, [pc, #28]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001f40:	f004 fb1e 	bl	8006580 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001f4a:	f000 f9fd 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f4e:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <MX_TIM1_Init+0x158>)
 8001f50:	f000 fd2e 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 8001f54:	bf00      	nop
 8001f56:	3770      	adds	r7, #112	@ 0x70
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000270 	.word	0x20000270
 8001f60:	40012c00 	.word	0x40012c00

08001f64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08e      	sub	sp, #56	@ 0x38
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f84:	463b      	mov	r3, r7
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	615a      	str	r2, [r3, #20]
 8001f94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f96:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001f98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 8001faa:	4b28      	ldr	r3, [pc, #160]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fac:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001fb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fbe:	4823      	ldr	r0, [pc, #140]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fc0:	f003 f90e 	bl	80051e0 <HAL_TIM_Base_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001fca:	f000 f9bd 	bl	8002348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481c      	ldr	r0, [pc, #112]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fdc:	f003 fd00 	bl	80059e0 <HAL_TIM_ConfigClockSource>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001fe6:	f000 f9af 	bl	8002348 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fea:	4818      	ldr	r0, [pc, #96]	@ (800204c <MX_TIM2_Init+0xe8>)
 8001fec:	f003 f94f 	bl	800528e <HAL_TIM_PWM_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ff6:	f000 f9a7 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4810      	ldr	r0, [pc, #64]	@ (800204c <MX_TIM2_Init+0xe8>)
 800200a:	f004 fa37 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002014:	f000 f998 	bl	8002348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002018:	2360      	movs	r3, #96	@ 0x60
 800201a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	2200      	movs	r2, #0
 800202c:	4619      	mov	r1, r3
 800202e:	4807      	ldr	r0, [pc, #28]	@ (800204c <MX_TIM2_Init+0xe8>)
 8002030:	f003 fbc2 	bl	80057b8 <HAL_TIM_PWM_ConfigChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800203a:	f000 f985 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800203e:	4803      	ldr	r0, [pc, #12]	@ (800204c <MX_TIM2_Init+0xe8>)
 8002040:	f000 fcb6 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 8002044:	bf00      	nop
 8002046:	3738      	adds	r7, #56	@ 0x38
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200002bc 	.word	0x200002bc

08002050 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	@ 0x30
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	2224      	movs	r2, #36	@ 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f005 ff77 	bl	8007f52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	463b      	mov	r3, r7
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800206e:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 8002070:	4a21      	ldr	r2, [pc, #132]	@ (80020f8 <MX_TIM3_Init+0xa8>)
 8002072:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002074:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002080:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 8002082:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002086:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b1a      	ldr	r3, [pc, #104]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002094:	2303      	movs	r3, #3
 8002096:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800209c:	2301      	movs	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ac:	2301      	movs	r3, #1
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 80020c0:	f003 fa46 	bl	8005550 <HAL_TIM_Encoder_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020ca:	f000 f93d 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020d6:	463b      	mov	r3, r7
 80020d8:	4619      	mov	r1, r3
 80020da:	4806      	ldr	r0, [pc, #24]	@ (80020f4 <MX_TIM3_Init+0xa4>)
 80020dc:	f004 f9ce 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80020e6:	f000 f92f 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3730      	adds	r7, #48	@ 0x30
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000308 	.word	0x20000308
 80020f8:	40000400 	.word	0x40000400

080020fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	@ 0x30
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	2224      	movs	r2, #36	@ 0x24
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f005 ff21 	bl	8007f52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800211a:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 800211c:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <MX_TIM4_Init+0xa8>)
 800211e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 8002122:	2200      	movs	r2, #0
 8002124:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b1e      	ldr	r3, [pc, #120]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800212c:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 800212e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002132:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002140:	2303      	movs	r3, #3
 8002142:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002148:	2301      	movs	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002158:	2301      	movs	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4619      	mov	r1, r3
 800216a:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 800216c:	f003 f9f0 	bl	8005550 <HAL_TIM_Encoder_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002176:	f000 f8e7 	bl	8002348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002182:	463b      	mov	r3, r7
 8002184:	4619      	mov	r1, r3
 8002186:	4806      	ldr	r0, [pc, #24]	@ (80021a0 <MX_TIM4_Init+0xa4>)
 8002188:	f004 f978 	bl	800647c <HAL_TIMEx_MasterConfigSynchronization>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002192:	f000 f8d9 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002196:	bf00      	nop
 8002198:	3730      	adds	r7, #48	@ 0x30
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000354 	.word	0x20000354
 80021a4:	40000800 	.word	0x40000800

080021a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021ac:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021ae:	4a23      	ldr	r2, [pc, #140]	@ (800223c <MX_USART1_UART_Init+0x94>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021b4:	4a22      	ldr	r2, [pc, #136]	@ (8002240 <MX_USART1_UART_Init+0x98>)
 80021b6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021cc:	220c      	movs	r2, #12
 80021ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ee:	4812      	ldr	r0, [pc, #72]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 80021f0:	f004 fa52 	bl	8006698 <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80021fa:	f000 f8a5 	bl	8002348 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021fe:	2100      	movs	r1, #0
 8002200:	480d      	ldr	r0, [pc, #52]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 8002202:	f005 f84b 	bl	800729c <HAL_UARTEx_SetTxFifoThreshold>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800220c:	f000 f89c 	bl	8002348 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002210:	2100      	movs	r1, #0
 8002212:	4809      	ldr	r0, [pc, #36]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 8002214:	f005 f880 	bl	8007318 <HAL_UARTEx_SetRxFifoThreshold>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800221e:	f000 f893 	bl	8002348 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002222:	4805      	ldr	r0, [pc, #20]	@ (8002238 <MX_USART1_UART_Init+0x90>)
 8002224:	f005 f801 	bl	800722a <HAL_UARTEx_DisableFifoMode>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800222e:	f000 f88b 	bl	8002348 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200003a0 	.word	0x200003a0
 800223c:	40013800 	.word	0x40013800
 8002240:	000f4240 	.word	0x000f4240

08002244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800225a:	4b38      	ldr	r3, [pc, #224]	@ (800233c <MX_GPIO_Init+0xf8>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	4a37      	ldr	r2, [pc, #220]	@ (800233c <MX_GPIO_Init+0xf8>)
 8002260:	f043 0320 	orr.w	r3, r3, #32
 8002264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002266:	4b35      	ldr	r3, [pc, #212]	@ (800233c <MX_GPIO_Init+0xf8>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b32      	ldr	r3, [pc, #200]	@ (800233c <MX_GPIO_Init+0xf8>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	4a31      	ldr	r2, [pc, #196]	@ (800233c <MX_GPIO_Init+0xf8>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227e:	4b2f      	ldr	r3, [pc, #188]	@ (800233c <MX_GPIO_Init+0xf8>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800228a:	4b2c      	ldr	r3, [pc, #176]	@ (800233c <MX_GPIO_Init+0xf8>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	4a2b      	ldr	r2, [pc, #172]	@ (800233c <MX_GPIO_Init+0xf8>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002296:	4b29      	ldr	r3, [pc, #164]	@ (800233c <MX_GPIO_Init+0xf8>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	4b26      	ldr	r3, [pc, #152]	@ (800233c <MX_GPIO_Init+0xf8>)
 80022a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a6:	4a25      	ldr	r2, [pc, #148]	@ (800233c <MX_GPIO_Init+0xf8>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ae:	4b23      	ldr	r3, [pc, #140]	@ (800233c <MX_GPIO_Init+0xf8>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f240 6106 	movw	r1, #1542	@ 0x606
 80022c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022c4:	f001 f86e 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2103      	movs	r1, #3
 80022cc:	481c      	ldr	r0, [pc, #112]	@ (8002340 <MX_GPIO_Init+0xfc>)
 80022ce:	f001 f869 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2140      	movs	r1, #64	@ 0x40
 80022d6:	481b      	ldr	r0, [pc, #108]	@ (8002344 <MX_GPIO_Init+0x100>)
 80022d8:	f001 f864 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 80022dc:	f240 6306 	movw	r3, #1542	@ 0x606
 80022e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f8:	f000 fed2 	bl	80030a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80022fc:	2303      	movs	r3, #3
 80022fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	480b      	ldr	r0, [pc, #44]	@ (8002340 <MX_GPIO_Init+0xfc>)
 8002314:	f000 fec4 	bl	80030a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002318:	2340      	movs	r3, #64	@ 0x40
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231c:	2301      	movs	r3, #1
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	@ (8002344 <MX_GPIO_Init+0x100>)
 8002330:	f000 feb6 	bl	80030a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	@ 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	48000400 	.word	0x48000400
 8002344:	48000800 	.word	0x48000800

08002348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <Error_Handler+0x8>

08002354 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_0


void CS_Select (void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8002358:	2200      	movs	r2, #0
 800235a:	2101      	movs	r1, #1
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <CS_Select+0x14>)
 800235e:	f001 f821 	bl	80033a4 <HAL_GPIO_WritePin>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	48000400 	.word	0x48000400

0800236c <CS_UnSelect>:

void CS_UnSelect (void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	2101      	movs	r1, #1
 8002374:	4802      	ldr	r0, [pc, #8]	@ (8002380 <CS_UnSelect+0x14>)
 8002376:	f001 f815 	bl	80033a4 <HAL_GPIO_WritePin>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	48000400 	.word	0x48000400

08002384 <CE_Enable>:


void CE_Enable (void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	2102      	movs	r1, #2
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <CE_Enable+0x14>)
 800238e:	f001 f809 	bl	80033a4 <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	48000400 	.word	0x48000400

0800239c <CE_Disable>:

void CE_Disable (void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2102      	movs	r1, #2
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <CE_Disable+0x14>)
 80023a6:	f000 fffd 	bl	80033a4 <HAL_GPIO_WritePin>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	48000400 	.word	0x48000400

080023b4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f043 0320 	orr.w	r3, r3, #32
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80023d2:	f7ff ffbf 	bl	8002354 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80023d6:	f107 010c 	add.w	r1, r7, #12
 80023da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023de:	2202      	movs	r2, #2
 80023e0:	4804      	ldr	r0, [pc, #16]	@ (80023f4 <nrf24_WriteReg+0x40>)
 80023e2:	f002 f874 	bl	80044ce <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80023e6:	f7ff ffc1 	bl	800236c <CS_UnSelect>
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000020c 	.word	0x2000020c

080023f8 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	f043 0320 	orr.w	r3, r3, #32
 800240c:	b2db      	uxtb	r3, r3
 800240e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002410:	f7ff ffa0 	bl	8002354 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8002414:	f107 0114 	add.w	r1, r7, #20
 8002418:	2364      	movs	r3, #100	@ 0x64
 800241a:	2201      	movs	r2, #1
 800241c:	4808      	ldr	r0, [pc, #32]	@ (8002440 <nrf24_WriteRegMulti+0x48>)
 800241e:	f002 f856 	bl	80044ce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	b29a      	uxth	r2, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	4804      	ldr	r0, [pc, #16]	@ (8002440 <nrf24_WriteRegMulti+0x48>)
 800242e:	f002 f84e 	bl	80044ce <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002432:	f7ff ff9b 	bl	800236c <CS_UnSelect>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000020c 	.word	0x2000020c

08002444 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002452:	f7ff ff7f 	bl	8002354 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8002456:	1df9      	adds	r1, r7, #7
 8002458:	2364      	movs	r3, #100	@ 0x64
 800245a:	2201      	movs	r2, #1
 800245c:	4808      	ldr	r0, [pc, #32]	@ (8002480 <nrf24_ReadReg+0x3c>)
 800245e:	f002 f836 	bl	80044ce <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8002462:	f107 010f 	add.w	r1, r7, #15
 8002466:	2364      	movs	r3, #100	@ 0x64
 8002468:	2201      	movs	r2, #1
 800246a:	4805      	ldr	r0, [pc, #20]	@ (8002480 <nrf24_ReadReg+0x3c>)
 800246c:	f002 f9a5 	bl	80047ba <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002470:	f7ff ff7c 	bl	800236c <CS_UnSelect>

	return data;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000020c 	.word	0x2000020c

08002484 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800248e:	f7ff ff61 	bl	8002354 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8002492:	1df9      	adds	r1, r7, #7
 8002494:	2364      	movs	r3, #100	@ 0x64
 8002496:	2201      	movs	r2, #1
 8002498:	4804      	ldr	r0, [pc, #16]	@ (80024ac <nrfsendCmd+0x28>)
 800249a:	f002 f818 	bl	80044ce <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800249e:	f7ff ff65 	bl	800236c <CS_UnSelect>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000020c 	.word	0x2000020c

080024b0 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b07      	cmp	r3, #7
 80024be:	d104      	bne.n	80024ca <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80024c0:	2100      	movs	r1, #0
 80024c2:	2007      	movs	r0, #7
 80024c4:	f7ff ff76 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80024c8:	e090      	b.n	80025ec <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b17      	cmp	r3, #23
 80024ce:	d104      	bne.n	80024da <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80024d0:	2111      	movs	r1, #17
 80024d2:	2017      	movs	r0, #23
 80024d4:	f7ff ff6e 	bl	80023b4 <nrf24_WriteReg>
}
 80024d8:	e088      	b.n	80025ec <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80024da:	2108      	movs	r1, #8
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff ff69 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80024e2:	213f      	movs	r1, #63	@ 0x3f
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff ff65 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80024ea:	2103      	movs	r1, #3
 80024ec:	2002      	movs	r0, #2
 80024ee:	f7ff ff61 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80024f2:	2103      	movs	r1, #3
 80024f4:	2003      	movs	r0, #3
 80024f6:	f7ff ff5d 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80024fa:	2103      	movs	r1, #3
 80024fc:	2004      	movs	r0, #4
 80024fe:	f7ff ff59 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8002502:	2102      	movs	r1, #2
 8002504:	2005      	movs	r0, #5
 8002506:	f7ff ff55 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800250a:	210e      	movs	r1, #14
 800250c:	2006      	movs	r0, #6
 800250e:	f7ff ff51 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8002512:	2100      	movs	r1, #0
 8002514:	2007      	movs	r0, #7
 8002516:	f7ff ff4d 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800251a:	2100      	movs	r1, #0
 800251c:	2008      	movs	r0, #8
 800251e:	f7ff ff49 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8002522:	2100      	movs	r1, #0
 8002524:	2009      	movs	r0, #9
 8002526:	f7ff ff45 	bl	80023b4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800252a:	4a32      	ldr	r2, [pc, #200]	@ (80025f4 <nrf24_reset+0x144>)
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002534:	6018      	str	r0, [r3, #0]
 8002536:	3304      	adds	r3, #4
 8002538:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800253a:	f107 0318 	add.w	r3, r7, #24
 800253e:	2205      	movs	r2, #5
 8002540:	4619      	mov	r1, r3
 8002542:	200a      	movs	r0, #10
 8002544:	f7ff ff58 	bl	80023f8 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8002548:	4a2b      	ldr	r2, [pc, #172]	@ (80025f8 <nrf24_reset+0x148>)
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002552:	6018      	str	r0, [r3, #0]
 8002554:	3304      	adds	r3, #4
 8002556:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	2205      	movs	r2, #5
 800255e:	4619      	mov	r1, r3
 8002560:	200b      	movs	r0, #11
 8002562:	f7ff ff49 	bl	80023f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8002566:	21c3      	movs	r1, #195	@ 0xc3
 8002568:	200c      	movs	r0, #12
 800256a:	f7ff ff23 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800256e:	21c4      	movs	r1, #196	@ 0xc4
 8002570:	200d      	movs	r0, #13
 8002572:	f7ff ff1f 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8002576:	21c5      	movs	r1, #197	@ 0xc5
 8002578:	200e      	movs	r0, #14
 800257a:	f7ff ff1b 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800257e:	21c6      	movs	r1, #198	@ 0xc6
 8002580:	200f      	movs	r0, #15
 8002582:	f7ff ff17 	bl	80023b4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8002586:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <nrf24_reset+0x144>)
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002590:	6018      	str	r0, [r3, #0]
 8002592:	3304      	adds	r3, #4
 8002594:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	2205      	movs	r2, #5
 800259c:	4619      	mov	r1, r3
 800259e:	2010      	movs	r0, #16
 80025a0:	f7ff ff2a 	bl	80023f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80025a4:	2100      	movs	r1, #0
 80025a6:	2011      	movs	r0, #17
 80025a8:	f7ff ff04 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80025ac:	2100      	movs	r1, #0
 80025ae:	2012      	movs	r0, #18
 80025b0:	f7ff ff00 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80025b4:	2100      	movs	r1, #0
 80025b6:	2013      	movs	r0, #19
 80025b8:	f7ff fefc 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80025bc:	2100      	movs	r1, #0
 80025be:	2014      	movs	r0, #20
 80025c0:	f7ff fef8 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80025c4:	2100      	movs	r1, #0
 80025c6:	2015      	movs	r0, #21
 80025c8:	f7ff fef4 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	2016      	movs	r0, #22
 80025d0:	f7ff fef0 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80025d4:	2111      	movs	r1, #17
 80025d6:	2017      	movs	r0, #23
 80025d8:	f7ff feec 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80025dc:	2100      	movs	r1, #0
 80025de:	201c      	movs	r0, #28
 80025e0:	f7ff fee8 	bl	80023b4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80025e4:	2100      	movs	r1, #0
 80025e6:	201d      	movs	r0, #29
 80025e8:	f7ff fee4 	bl	80023b4 <nrf24_WriteReg>
}
 80025ec:	bf00      	nop
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	0800a218 	.word	0x0800a218
 80025f8:	0800a220 	.word	0x0800a220

080025fc <NRF24_Init>:




void NRF24_Init (void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8002600:	f7ff fecc 	bl	800239c <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff ff53 	bl	80024b0 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fed1 	bl	80023b4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8002612:	2100      	movs	r1, #0
 8002614:	2001      	movs	r0, #1
 8002616:	f7ff fecd 	bl	80023b4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800261a:	2100      	movs	r1, #0
 800261c:	2002      	movs	r0, #2
 800261e:	f7ff fec9 	bl	80023b4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8002622:	2103      	movs	r1, #3
 8002624:	2003      	movs	r0, #3
 8002626:	f7ff fec5 	bl	80023b4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800262a:	2100      	movs	r1, #0
 800262c:	2004      	movs	r0, #4
 800262e:	f7ff fec1 	bl	80023b4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8002632:	2100      	movs	r1, #0
 8002634:	2005      	movs	r0, #5
 8002636:	f7ff febd 	bl	80023b4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800263a:	210e      	movs	r1, #14
 800263c:	2006      	movs	r0, #6
 800263e:	f7ff feb9 	bl	80023b4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002642:	f7ff fe9f 	bl	8002384 <CE_Enable>

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}

0800264a <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8002656:	f7ff fea1 	bl	800239c <CE_Disable>

	nrf24_reset (STATUS);
 800265a:	2007      	movs	r0, #7
 800265c:	f7ff ff28 	bl	80024b0 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	4619      	mov	r1, r3
 8002664:	2005      	movs	r0, #5
 8002666:	f7ff fea5 	bl	80023b4 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800266a:	2002      	movs	r0, #2
 800266c:	f7ff feea 	bl	8002444 <nrf24_ReadReg>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	4619      	mov	r1, r3
 8002680:	2002      	movs	r0, #2
 8002682:	f7ff fe97 	bl	80023b4 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8002686:	2205      	movs	r2, #5
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	200b      	movs	r0, #11
 800268c:	f7ff feb4 	bl	80023f8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8002690:	21ee      	movs	r1, #238	@ 0xee
 8002692:	200c      	movs	r0, #12
 8002694:	f7ff fe8e 	bl	80023b4 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8002698:	2120      	movs	r1, #32
 800269a:	2013      	movs	r0, #19
 800269c:	f7ff fe8a 	bl	80023b4 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff fecf 	bl	8002444 <nrf24_ReadReg>
 80026a6:	4603      	mov	r3, r0
 80026a8:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80026aa:	7bbb      	ldrb	r3, [r7, #14]
 80026ac:	f043 0303 	orr.w	r3, r3, #3
 80026b0:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	4619      	mov	r1, r3
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7ff fe7c 	bl	80023b4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80026bc:	f7ff fe62 	bl	8002384 <CE_Enable>
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 80026d0:	2007      	movs	r0, #7
 80026d2:	f7ff feb7 	bl	8002444 <nrf24_ReadReg>
 80026d6:	4603      	mov	r3, r0
 80026d8:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <isDataAvailable+0x34>
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80026f0:	2140      	movs	r1, #64	@ 0x40
 80026f2:	2007      	movs	r0, #7
 80026f4:	f7ff fe5e 	bl	80023b4 <nrf24_WriteReg>

		return 1;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <isDataAvailable+0x36>
	}

	return 0;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8002714:	f7ff fe1e 	bl	8002354 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8002718:	2361      	movs	r3, #97	@ 0x61
 800271a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800271c:	f107 010f 	add.w	r1, r7, #15
 8002720:	2364      	movs	r3, #100	@ 0x64
 8002722:	2201      	movs	r2, #1
 8002724:	480c      	ldr	r0, [pc, #48]	@ (8002758 <NRF24_Receive+0x50>)
 8002726:	f001 fed2 	bl	80044ce <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 800272a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800272e:	2220      	movs	r2, #32
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4809      	ldr	r0, [pc, #36]	@ (8002758 <NRF24_Receive+0x50>)
 8002734:	f002 f841 	bl	80047ba <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8002738:	f7ff fe18 	bl	800236c <CS_UnSelect>

	HAL_Delay(1);
 800273c:	2001      	movs	r0, #1
 800273e:	f000 fba9 	bl	8002e94 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8002742:	23e2      	movs	r3, #226	@ 0xe2
 8002744:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fe9b 	bl	8002484 <nrfsendCmd>
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000020c 	.word	0x2000020c

0800275c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002762:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <HAL_MspInit+0x44>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <HAL_MspInit+0x44>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6613      	str	r3, [r2, #96]	@ 0x60
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <HAL_MspInit+0x44>)
 8002770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_MspInit+0x44>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <HAL_MspInit+0x44>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002784:	6593      	str	r3, [r2, #88]	@ 0x58
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_MspInit+0x44>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002792:	f000 fec3 	bl	800351c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a25      	ldr	r2, [pc, #148]	@ (8002858 <HAL_SPI_MspInit+0xb4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d144      	bne.n	8002850 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027c6:	4b25      	ldr	r3, [pc, #148]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ca:	4a24      	ldr	r2, [pc, #144]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80027d2:	4b22      	ldr	r3, [pc, #136]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b1f      	ldr	r3, [pc, #124]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e2:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ea:	4b1c      	ldr	r3, [pc, #112]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fa:	4a18      	ldr	r2, [pc, #96]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002802:	4b16      	ldr	r3, [pc, #88]	@ (800285c <HAL_SPI_MspInit+0xb8>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 800280e:	23a0      	movs	r3, #160	@ 0xa0
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800281e:	2305      	movs	r3, #5
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800282c:	f000 fc38 	bl	80030a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002830:	2310      	movs	r3, #16
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002840:	2305      	movs	r3, #5
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	4805      	ldr	r0, [pc, #20]	@ (8002860 <HAL_SPI_MspInit+0xbc>)
 800284c:	f000 fc28 	bl	80030a0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	@ 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40013000 	.word	0x40013000
 800285c:	40021000 	.word	0x40021000
 8002860:	48000400 	.word	0x48000400

08002864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <HAL_TIM_Base_MspInit+0x5c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10c      	bne.n	8002890 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_TIM_Base_MspInit+0x60>)
 8002878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287a:	4a12      	ldr	r2, [pc, #72]	@ (80028c4 <HAL_TIM_Base_MspInit+0x60>)
 800287c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002880:	6613      	str	r3, [r2, #96]	@ 0x60
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_TIM_Base_MspInit+0x60>)
 8002884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800288e:	e010      	b.n	80028b2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002898:	d10b      	bne.n	80028b2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_TIM_Base_MspInit+0x60>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289e:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_TIM_Base_MspInit+0x60>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_TIM_Base_MspInit+0x60>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	@ 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2f      	ldr	r2, [pc, #188]	@ (80029a4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d129      	bne.n	800293e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ea:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	4a2e      	ldr	r2, [pc, #184]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f6:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	4a28      	ldr	r2, [pc, #160]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800290e:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 800291a:	2350      	movs	r3, #80	@ 0x50
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800292a:	2302      	movs	r3, #2
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	f107 031c 	add.w	r3, r7, #28
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002938:	f000 fbb2 	bl	80030a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800293c:	e02e      	b.n	800299c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_TIM_Encoder_MspInit+0xe4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d129      	bne.n	800299c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002948:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294c:	4a16      	ldr	r2, [pc, #88]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6593      	str	r3, [r2, #88]	@ 0x58
 8002954:	4b14      	ldr	r3, [pc, #80]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296c:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800296e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 8002978:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800297c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800298a:	230a      	movs	r3, #10
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	f107 031c 	add.w	r3, r7, #28
 8002992:	4619      	mov	r1, r3
 8002994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002998:	f000 fb82 	bl	80030a0 <HAL_GPIO_Init>
}
 800299c:	bf00      	nop
 800299e:	3730      	adds	r7, #48	@ 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40000800 	.word	0x40000800

080029b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	@ 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_TIM_MspPostInit+0xac>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d11e      	bne.n	8002a10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <HAL_TIM_MspPostInit+0xb0>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d6:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <HAL_TIM_MspPostInit+0xb0>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029de:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <HAL_TIM_MspPostInit+0xb0>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 80029ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f8:	2302      	movs	r3, #2
 80029fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80029fc:	2306      	movs	r3, #6
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a0a:	f000 fb49 	bl	80030a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a0e:	e021      	b.n	8002a54 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a18:	d11c      	bne.n	8002a54 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_TIM_MspPostInit+0xb0>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	4a10      	ldr	r2, [pc, #64]	@ (8002a60 <HAL_TIM_MspPostInit+0xb0>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_TIM_MspPostInit+0xb0>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 8002a32:	2301      	movs	r3, #1
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a42:	2301      	movs	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a50:	f000 fb26 	bl	80030a0 <HAL_GPIO_Init>
}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	@ 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40021000 	.word	0x40021000

08002a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b09c      	sub	sp, #112	@ 0x70
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a7c:	f107 0318 	add.w	r3, r7, #24
 8002a80:	2244      	movs	r2, #68	@ 0x44
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 fa64 	bl	8007f52 <memset>
  if(huart->Instance==USART1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b40 <HAL_UART_MspInit+0xdc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d151      	bne.n	8002b38 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 fa79 	bl	8003f98 <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002aac:	f7ff fc4c 	bl	8002348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab0:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab4:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002ab6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aba:	6613      	str	r3, [r2, #96]	@ 0x60
 8002abc:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002acc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae0:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae4:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aec:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_UART_MspInit+0xe0>)
 8002aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8002af8:	2310      	movs	r3, #16
 8002afa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afc:	2302      	movs	r3, #2
 8002afe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b10:	4619      	mov	r1, r3
 8002b12:	480d      	ldr	r0, [pc, #52]	@ (8002b48 <HAL_UART_MspInit+0xe4>)
 8002b14:	f000 fac4 	bl	80030a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b30:	4619      	mov	r1, r3
 8002b32:	4806      	ldr	r0, [pc, #24]	@ (8002b4c <HAL_UART_MspInit+0xe8>)
 8002b34:	f000 fab4 	bl	80030a0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b38:	bf00      	nop
 8002b3a:	3770      	adds	r7, #112	@ 0x70
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	48000800 	.word	0x48000800
 8002b4c:	48000400 	.word	0x48000400

08002b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <NMI_Handler+0x4>

08002b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <HardFault_Handler+0x4>

08002b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <MemManage_Handler+0x4>

08002b68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <BusFault_Handler+0x4>

08002b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <UsageFault_Handler+0x4>

08002b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba6:	f000 f957 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  return 1;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_kill>:

int _kill(int pid, int sig)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bc8:	f005 fa16 	bl	8007ff8 <__errno>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2216      	movs	r2, #22
 8002bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_exit>:

void _exit (int status)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002be6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffe7 	bl	8002bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <_exit+0x12>

08002bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e00a      	b.n	8002c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c06:	f3af 8000 	nop.w
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	60ba      	str	r2, [r7, #8]
 8002c12:	b2ca      	uxtb	r2, r1
 8002c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	dbf0      	blt.n	8002c06 <_read+0x12>
  }

  return len;
 8002c24:	687b      	ldr	r3, [r7, #4]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e009      	b.n	8002c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60ba      	str	r2, [r7, #8]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	dbf1      	blt.n	8002c40 <_write+0x12>
  }
  return len;
 8002c5c:	687b      	ldr	r3, [r7, #4]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <_close>:

int _close(int file)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <_isatty>:

int _isatty(int file)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <_sbrk+0x5c>)
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <_sbrk+0x60>)
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce4:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <_sbrk+0x64>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cec:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <_sbrk+0x64>)
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <_sbrk+0x68>)
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cf2:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d207      	bcs.n	8002d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d00:	f005 f97a 	bl	8007ff8 <__errno>
 8002d04:	4603      	mov	r3, r0
 8002d06:	220c      	movs	r2, #12
 8002d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d0e:	e009      	b.n	8002d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d10:	4b08      	ldr	r3, [pc, #32]	@ (8002d34 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d16:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <_sbrk+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a05      	ldr	r2, [pc, #20]	@ (8002d34 <_sbrk+0x64>)
 8002d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20008000 	.word	0x20008000
 8002d30:	00000400 	.word	0x00000400
 8002d34:	200005bc 	.word	0x200005bc
 8002d38:	20000710 	.word	0x20000710

08002d3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <SystemInit+0x20>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <SystemInit+0x20>)
 8002d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d60:	480d      	ldr	r0, [pc, #52]	@ (8002d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d64:	f7ff ffea 	bl	8002d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d68:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d6a:	490d      	ldr	r1, [pc, #52]	@ (8002da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <LoopForever+0xe>)
  movs r3, #0
 8002d6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d70:	e002      	b.n	8002d78 <LoopCopyDataInit>

08002d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d76:	3304      	adds	r3, #4

08002d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d7c:	d3f9      	bcc.n	8002d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d80:	4c0a      	ldr	r4, [pc, #40]	@ (8002dac <LoopForever+0x16>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d84:	e001      	b.n	8002d8a <LoopFillZerobss>

08002d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d88:	3204      	adds	r2, #4

08002d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d8c:	d3fb      	bcc.n	8002d86 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002d8e:	f005 f939 	bl	8008004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d92:	f7fe fea1 	bl	8001ad8 <main>

08002d96 <LoopForever>:

LoopForever:
    b LoopForever
 8002d96:	e7fe      	b.n	8002d96 <LoopForever>
  ldr   r0, =_estack
 8002d98:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002da4:	0800a5e8 	.word	0x0800a5e8
  ldr r2, =_sbss
 8002da8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002dac:	20000710 	.word	0x20000710

08002db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC1_2_IRQHandler>

08002db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 f93d 	bl	800303c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dc2:	200f      	movs	r0, #15
 8002dc4:	f000 f80e 	bl	8002de4 <HAL_InitTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	71fb      	strb	r3, [r7, #7]
 8002dd2:	e001      	b.n	8002dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dd4:	f7ff fcc2 	bl	800275c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002df0:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <HAL_InitTick+0x68>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d022      	beq.n	8002e3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002df8:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <HAL_InitTick+0x6c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <HAL_InitTick+0x68>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f93a 	bl	8003086 <HAL_SYSTICK_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10f      	bne.n	8002e38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	d809      	bhi.n	8002e32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e26:	f000 f914 	bl	8003052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <HAL_InitTick+0x70>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	e007      	b.n	8002e42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
 8002e36:	e004      	b.n	8002e42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e001      	b.n	8002e42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000020 	.word	0x20000020
 8002e50:	20000018 	.word	0x20000018
 8002e54:	2000001c 	.word	0x2000001c

08002e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_IncTick+0x1c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	4a03      	ldr	r2, [pc, #12]	@ (8002e74 <HAL_IncTick+0x1c>)
 8002e68:	6013      	str	r3, [r2, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	200005c0 	.word	0x200005c0
 8002e78:	20000020 	.word	0x20000020

08002e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b03      	ldr	r3, [pc, #12]	@ (8002e90 <HAL_GetTick+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	200005c0 	.word	0x200005c0

08002e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e9c:	f7ff ffee 	bl	8002e7c <HAL_GetTick>
 8002ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eac:	d004      	beq.n	8002eb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_Delay+0x40>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eb8:	bf00      	nop
 8002eba:	f7ff ffdf 	bl	8002e7c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d8f7      	bhi.n	8002eba <HAL_Delay+0x26>
  {
  }
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000020 	.word	0x20000020

08002ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0a:	4a04      	ldr	r2, [pc, #16]	@ (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	60d3      	str	r3, [r2, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <__NVIC_GetPriorityGrouping+0x18>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 0307 	and.w	r3, r3, #7
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	db0a      	blt.n	8002f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	490c      	ldr	r1, [pc, #48]	@ (8002f88 <__NVIC_SetPriority+0x4c>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f64:	e00a      	b.n	8002f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4908      	ldr	r1, [pc, #32]	@ (8002f8c <__NVIC_SetPriority+0x50>)
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	3b04      	subs	r3, #4
 8002f74:	0112      	lsls	r2, r2, #4
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	440b      	add	r3, r1
 8002f7a:	761a      	strb	r2, [r3, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	@ 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f1c3 0307 	rsb	r3, r3, #7
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	bf28      	it	cs
 8002fae:	2304      	movcs	r3, #4
 8002fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d902      	bls.n	8002fc0 <NVIC_EncodePriority+0x30>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3b03      	subs	r3, #3
 8002fbe:	e000      	b.n	8002fc2 <NVIC_EncodePriority+0x32>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43d9      	mvns	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	4313      	orrs	r3, r2
         );
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3724      	adds	r7, #36	@ 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003008:	d301      	bcc.n	800300e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800300a:	2301      	movs	r3, #1
 800300c:	e00f      	b.n	800302e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300e:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <SysTick_Config+0x40>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003016:	210f      	movs	r1, #15
 8003018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800301c:	f7ff ff8e 	bl	8002f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003020:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <SysTick_Config+0x40>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003026:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <SysTick_Config+0x40>)
 8003028:	2207      	movs	r2, #7
 800302a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000e010 	.word	0xe000e010

0800303c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff47 	bl	8002ed8 <__NVIC_SetPriorityGrouping>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003060:	f7ff ff5e 	bl	8002f20 <__NVIC_GetPriorityGrouping>
 8003064:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	6978      	ldr	r0, [r7, #20]
 800306c:	f7ff ff90 	bl	8002f90 <NVIC_EncodePriority>
 8003070:	4602      	mov	r2, r0
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff5f 	bl	8002f3c <__NVIC_SetPriority>
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ffb2 	bl	8002ff8 <SysTick_Config>
 8003094:	4603      	mov	r3, r0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030ae:	e15a      	b.n	8003366 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2101      	movs	r1, #1
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	4013      	ands	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 814c 	beq.w	8003360 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d005      	beq.n	80030e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d130      	bne.n	8003142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2203      	movs	r2, #3
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003116:	2201      	movs	r2, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 0201 	and.w	r2, r3, #1
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	2b03      	cmp	r3, #3
 800314c:	d017      	beq.n	800317e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2203      	movs	r2, #3
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4013      	ands	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d123      	bne.n	80031d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	08da      	lsrs	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3208      	adds	r2, #8
 8003192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	08da      	lsrs	r2, r3, #3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3208      	adds	r2, #8
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80a6 	beq.w	8003360 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003214:	4b5b      	ldr	r3, [pc, #364]	@ (8003384 <HAL_GPIO_Init+0x2e4>)
 8003216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003218:	4a5a      	ldr	r2, [pc, #360]	@ (8003384 <HAL_GPIO_Init+0x2e4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003220:	4b58      	ldr	r3, [pc, #352]	@ (8003384 <HAL_GPIO_Init+0x2e4>)
 8003222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322c:	4a56      	ldr	r2, [pc, #344]	@ (8003388 <HAL_GPIO_Init+0x2e8>)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	220f      	movs	r2, #15
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003256:	d01f      	beq.n	8003298 <HAL_GPIO_Init+0x1f8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a4c      	ldr	r2, [pc, #304]	@ (800338c <HAL_GPIO_Init+0x2ec>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d019      	beq.n	8003294 <HAL_GPIO_Init+0x1f4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a4b      	ldr	r2, [pc, #300]	@ (8003390 <HAL_GPIO_Init+0x2f0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <HAL_GPIO_Init+0x1f0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a4a      	ldr	r2, [pc, #296]	@ (8003394 <HAL_GPIO_Init+0x2f4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00d      	beq.n	800328c <HAL_GPIO_Init+0x1ec>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a49      	ldr	r2, [pc, #292]	@ (8003398 <HAL_GPIO_Init+0x2f8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <HAL_GPIO_Init+0x1e8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a48      	ldr	r2, [pc, #288]	@ (800339c <HAL_GPIO_Init+0x2fc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_GPIO_Init+0x1e4>
 8003280:	2305      	movs	r3, #5
 8003282:	e00a      	b.n	800329a <HAL_GPIO_Init+0x1fa>
 8003284:	2306      	movs	r3, #6
 8003286:	e008      	b.n	800329a <HAL_GPIO_Init+0x1fa>
 8003288:	2304      	movs	r3, #4
 800328a:	e006      	b.n	800329a <HAL_GPIO_Init+0x1fa>
 800328c:	2303      	movs	r3, #3
 800328e:	e004      	b.n	800329a <HAL_GPIO_Init+0x1fa>
 8003290:	2302      	movs	r3, #2
 8003292:	e002      	b.n	800329a <HAL_GPIO_Init+0x1fa>
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_GPIO_Init+0x1fa>
 8003298:	2300      	movs	r3, #0
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	f002 0203 	and.w	r2, r2, #3
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	4093      	lsls	r3, r2
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032aa:	4937      	ldr	r1, [pc, #220]	@ (8003388 <HAL_GPIO_Init+0x2e8>)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032b8:	4b39      	ldr	r3, [pc, #228]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032dc:	4a30      	ldr	r2, [pc, #192]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032e2:	4b2f      	ldr	r3, [pc, #188]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003306:	4a26      	ldr	r2, [pc, #152]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800330c:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003330:	4a1b      	ldr	r2, [pc, #108]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003336:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800335a:	4a11      	ldr	r2, [pc, #68]	@ (80033a0 <HAL_GPIO_Init+0x300>)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3301      	adds	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	f47f ae9d 	bne.w	80030b0 <HAL_GPIO_Init+0x10>
  }
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	40021000 	.word	0x40021000
 8003388:	40010000 	.word	0x40010000
 800338c:	48000400 	.word	0x48000400
 8003390:	48000800 	.word	0x48000800
 8003394:	48000c00 	.word	0x48000c00
 8003398:	48001000 	.word	0x48001000
 800339c:	48001400 	.word	0x48001400
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d141      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ee:	d131      	bne.n	8003454 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f0:	4b47      	ldr	r3, [pc, #284]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033f6:	4a46      	ldr	r2, [pc, #280]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003400:	4b43      	ldr	r3, [pc, #268]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003408:	4a41      	ldr	r2, [pc, #260]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800340e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003410:	4b40      	ldr	r3, [pc, #256]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2232      	movs	r2, #50	@ 0x32
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	4a3f      	ldr	r2, [pc, #252]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	0c9b      	lsrs	r3, r3, #18
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003426:	e002      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3b01      	subs	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800342e:	4b38      	ldr	r3, [pc, #224]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800343a:	d102      	bne.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f2      	bne.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003442:	4b33      	ldr	r3, [pc, #204]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344e:	d158      	bne.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e057      	b.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003454:	4b2e      	ldr	r3, [pc, #184]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345a:	4a2d      	ldr	r2, [pc, #180]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003464:	e04d      	b.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800346c:	d141      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800346e:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347a:	d131      	bne.n	80034e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800347c:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003482:	4a23      	ldr	r2, [pc, #140]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800348c:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003494:	4a1e      	ldr	r2, [pc, #120]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800349a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800349c:	4b1d      	ldr	r3, [pc, #116]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2232      	movs	r2, #50	@ 0x32
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	0c9b      	lsrs	r3, r3, #18
 80034ae:	3301      	adds	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b2:	e002      	b.n	80034ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c6:	d102      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f2      	bne.n	80034b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034da:	d112      	bne.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e011      	b.n	8003504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034f0:	e007      	b.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034fa:	4a05      	ldr	r2, [pc, #20]	@ (8003510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003500:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40007000 	.word	0x40007000
 8003514:	20000018 	.word	0x20000018
 8003518:	431bde83 	.word	0x431bde83

0800351c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800352a:	6093      	str	r3, [r2, #8]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40007000 	.word	0x40007000

0800353c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e2fe      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d075      	beq.n	8003646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	4b97      	ldr	r3, [pc, #604]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003564:	4b94      	ldr	r3, [pc, #592]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x3e>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d002      	beq.n	8003580 <HAL_RCC_OscConfig+0x44>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10b      	bne.n	8003598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	4b8d      	ldr	r3, [pc, #564]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d05b      	beq.n	8003644 <HAL_RCC_OscConfig+0x108>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d157      	bne.n	8003644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e2d9      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a0:	d106      	bne.n	80035b0 <HAL_RCC_OscConfig+0x74>
 80035a2:	4b85      	ldr	r3, [pc, #532]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a84      	ldr	r2, [pc, #528]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e01d      	b.n	80035ec <HAL_RCC_OscConfig+0xb0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x98>
 80035ba:	4b7f      	ldr	r3, [pc, #508]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7e      	ldr	r2, [pc, #504]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b7c      	ldr	r3, [pc, #496]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7b      	ldr	r2, [pc, #492]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0xb0>
 80035d4:	4b78      	ldr	r3, [pc, #480]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a77      	ldr	r2, [pc, #476]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b75      	ldr	r3, [pc, #468]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a74      	ldr	r2, [pc, #464]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7ff fc42 	bl	8002e7c <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7ff fc3e 	bl	8002e7c <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	@ 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e29e      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800360e:	4b6a      	ldr	r3, [pc, #424]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0xc0>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7ff fc2e 	bl	8002e7c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7ff fc2a 	bl	8002e7c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	@ 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e28a      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003636:	4b60      	ldr	r3, [pc, #384]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0xe8>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d075      	beq.n	800373e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003652:	4b59      	ldr	r3, [pc, #356]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800365c:	4b56      	ldr	r3, [pc, #344]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d102      	bne.n	8003672 <HAL_RCC_OscConfig+0x136>
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d002      	beq.n	8003678 <HAL_RCC_OscConfig+0x13c>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d11f      	bne.n	80036b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003678:	4b4f      	ldr	r3, [pc, #316]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_OscConfig+0x154>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e25d      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b49      	ldr	r3, [pc, #292]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	4946      	ldr	r1, [pc, #280]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036a4:	4b45      	ldr	r3, [pc, #276]	@ (80037bc <HAL_RCC_OscConfig+0x280>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff fb9b 	bl	8002de4 <HAL_InitTick>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d043      	beq.n	800373c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e249      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d023      	beq.n	8003708 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c0:	4b3d      	ldr	r3, [pc, #244]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3c      	ldr	r2, [pc, #240]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7ff fbd6 	bl	8002e7c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7ff fbd2 	bl	8002e7c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e232      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e6:	4b34      	ldr	r3, [pc, #208]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b31      	ldr	r3, [pc, #196]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	061b      	lsls	r3, r3, #24
 8003700:	492d      	ldr	r1, [pc, #180]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
 8003706:	e01a      	b.n	800373e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003708:	4b2b      	ldr	r3, [pc, #172]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2a      	ldr	r2, [pc, #168]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800370e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff fbb2 	bl	8002e7c <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff fbae 	bl	8002e7c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e20e      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800372e:	4b22      	ldr	r3, [pc, #136]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1e0>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d041      	beq.n	80037ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01c      	beq.n	800378c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b19      	ldr	r3, [pc, #100]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003758:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7ff fb8b 	bl	8002e7c <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376a:	f7ff fb87 	bl	8002e7c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e1e7      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800377c:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0ef      	beq.n	800376a <HAL_RCC_OscConfig+0x22e>
 800378a:	e020      	b.n	80037ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 800378e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003792:	4a09      	ldr	r2, [pc, #36]	@ (80037b8 <HAL_RCC_OscConfig+0x27c>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7ff fb6e 	bl	8002e7c <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a2:	e00d      	b.n	80037c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7ff fb6a 	bl	8002e7c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d906      	bls.n	80037c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e1ca      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c0:	4b8c      	ldr	r3, [pc, #560]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ea      	bne.n	80037a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a6 	beq.w	8003928 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037e0:	4b84      	ldr	r3, [pc, #528]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2b4>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x2b6>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	4b7f      	ldr	r3, [pc, #508]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	4a7e      	ldr	r2, [pc, #504]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003800:	6593      	str	r3, [r2, #88]	@ 0x58
 8003802:	4b7c      	ldr	r3, [pc, #496]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003812:	4b79      	ldr	r3, [pc, #484]	@ (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381e:	4b76      	ldr	r3, [pc, #472]	@ (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	@ (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7ff fb27 	bl	8002e7c <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7ff fb23 	bl	8002e7c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e183      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003844:	4b6c      	ldr	r3, [pc, #432]	@ (80039f8 <HAL_RCC_OscConfig+0x4bc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d108      	bne.n	800386a <HAL_RCC_OscConfig+0x32e>
 8003858:	4b66      	ldr	r3, [pc, #408]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	4a65      	ldr	r2, [pc, #404]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003868:	e024      	b.n	80038b4 <HAL_RCC_OscConfig+0x378>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b05      	cmp	r3, #5
 8003870:	d110      	bne.n	8003894 <HAL_RCC_OscConfig+0x358>
 8003872:	4b60      	ldr	r3, [pc, #384]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003878:	4a5e      	ldr	r2, [pc, #376]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003882:	4b5c      	ldr	r3, [pc, #368]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003888:	4a5a      	ldr	r2, [pc, #360]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003892:	e00f      	b.n	80038b4 <HAL_RCC_OscConfig+0x378>
 8003894:	4b57      	ldr	r3, [pc, #348]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	4a56      	ldr	r2, [pc, #344]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a4:	4b53      	ldr	r3, [pc, #332]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	4a52      	ldr	r2, [pc, #328]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7ff fade 	bl	8002e7c <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7ff fada 	bl	8002e7c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e138      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	4b46      	ldr	r3, [pc, #280]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ed      	beq.n	80038c4 <HAL_RCC_OscConfig+0x388>
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7ff fac7 	bl	8002e7c <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7ff fac3 	bl	8002e7c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e121      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003908:	4b3a      	ldr	r3, [pc, #232]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1ed      	bne.n	80038f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003916:	7ffb      	ldrb	r3, [r7, #31]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391c:	4b35      	ldr	r3, [pc, #212]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	4a34      	ldr	r2, [pc, #208]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003926:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03c      	beq.n	80039ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01c      	beq.n	8003976 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800393c:	4b2d      	ldr	r3, [pc, #180]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800393e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003942:	4a2c      	ldr	r2, [pc, #176]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7ff fa96 	bl	8002e7c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003954:	f7ff fa92 	bl	8002e7c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0f2      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003966:	4b23      	ldr	r3, [pc, #140]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003968:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <HAL_RCC_OscConfig+0x418>
 8003974:	e01b      	b.n	80039ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003976:	4b1f      	ldr	r3, [pc, #124]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 8003978:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800397c:	4a1d      	ldr	r2, [pc, #116]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7ff fa79 	bl	8002e7c <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800398e:	f7ff fa75 	bl	8002e7c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0d5      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a0:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80c9 	beq.w	8003b4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b8:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	f000 8083 	beq.w	8003acc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d15e      	bne.n	8003a8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a08      	ldr	r2, [pc, #32]	@ (80039f4 <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7ff fa4f 	bl	8002e7c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	e00c      	b.n	80039fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7ff fa4b 	bl	8002e7c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d905      	bls.n	80039fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0ab      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fc:	4b55      	ldr	r3, [pc, #340]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ec      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a08:	4b52      	ldr	r3, [pc, #328]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	4b52      	ldr	r3, [pc, #328]	@ (8003b58 <HAL_RCC_OscConfig+0x61c>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6a11      	ldr	r1, [r2, #32]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	4311      	orrs	r1, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a22:	0212      	lsls	r2, r2, #8
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a2a:	0852      	lsrs	r2, r2, #1
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	0552      	lsls	r2, r2, #21
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a36:	0852      	lsrs	r2, r2, #1
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0652      	lsls	r2, r2, #25
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a42:	06d2      	lsls	r2, r2, #27
 8003a44:	430a      	orrs	r2, r1
 8003a46:	4943      	ldr	r1, [pc, #268]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a4c:	4b41      	ldr	r3, [pc, #260]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a40      	ldr	r2, [pc, #256]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a58:	4b3e      	ldr	r3, [pc, #248]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7ff fa0a 	bl	8002e7c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6c:	f7ff fa06 	bl	8002e7c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e066      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7e:	4b35      	ldr	r3, [pc, #212]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x530>
 8003a8a:	e05e      	b.n	8003b4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b31      	ldr	r3, [pc, #196]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a30      	ldr	r2, [pc, #192]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7ff f9f0 	bl	8002e7c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7ff f9ec 	bl	8002e7c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e04c      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab2:	4b28      	ldr	r3, [pc, #160]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003abe:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	4924      	ldr	r1, [pc, #144]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003ac4:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <HAL_RCC_OscConfig+0x620>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	60cb      	str	r3, [r1, #12]
 8003aca:	e03e      	b.n	8003b4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e039      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b54 <HAL_RCC_OscConfig+0x618>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0203 	and.w	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d12c      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	3b01      	subs	r3, #1
 8003af8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d123      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d11b      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d113      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d109      	bne.n	8003b46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d001      	beq.n	8003b4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40021000 	.word	0x40021000
 8003b58:	019f800c 	.word	0x019f800c
 8003b5c:	feeefffc 	.word	0xfeeefffc

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e11e      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b91      	ldr	r3, [pc, #580]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b8e      	ldr	r3, [pc, #568]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	498c      	ldr	r1, [pc, #560]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b8a      	ldr	r3, [pc, #552]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e106      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d073      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d129      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bbc:	4b81      	ldr	r3, [pc, #516]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0f4      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003bcc:	f000 f99e 	bl	8003f0c <RCC_GetSysClockFreqFromPLLSource>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc8 <HAL_RCC_ClockConfig+0x268>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d93f      	bls.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bda:	4b7a      	ldr	r3, [pc, #488]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d033      	beq.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d12f      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfa:	4b72      	ldr	r3, [pc, #456]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c02:	4a70      	ldr	r2, [pc, #448]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c0a:	2380      	movs	r3, #128	@ 0x80
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e024      	b.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c18:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d109      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0c6      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c28:	4b66      	ldr	r3, [pc, #408]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0be      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c38:	f000 f8ce 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4a61      	ldr	r2, [pc, #388]	@ (8003dc8 <HAL_RCC_ClockConfig+0x268>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d909      	bls.n	8003c5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c46:	4b5f      	ldr	r3, [pc, #380]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c4e:	4a5d      	ldr	r2, [pc, #372]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4957      	ldr	r1, [pc, #348]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7ff f906 	bl	8002e7c <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7ff f902 	bl	8002e7c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e095      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d023      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b43      	ldr	r3, [pc, #268]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a42      	ldr	r2, [pc, #264]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cbe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b39      	ldr	r3, [pc, #228]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4936      	ldr	r1, [pc, #216]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2b80      	cmp	r3, #128	@ 0x80
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cf6:	4b33      	ldr	r3, [pc, #204]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4a32      	ldr	r2, [pc, #200]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d02:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d21d      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d10:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 020f 	bic.w	r2, r3, #15
 8003d18:	4929      	ldr	r1, [pc, #164]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d20:	f7ff f8ac 	bl	8002e7c <HAL_GetTick>
 8003d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d28:	f7ff f8a8 	bl	8002e7c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e03b      	b.n	8003db6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b20      	ldr	r3, [pc, #128]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1ed      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d58:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4917      	ldr	r1, [pc, #92]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d76:	4b13      	ldr	r3, [pc, #76]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	490f      	ldr	r1, [pc, #60]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d8a:	f000 f825 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	490c      	ldr	r1, [pc, #48]	@ (8003dcc <HAL_RCC_ClockConfig+0x26c>)
 8003d9c:	5ccb      	ldrb	r3, [r1, r3]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	fa22 f303 	lsr.w	r3, r2, r3
 8003da6:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd0 <HAL_RCC_ClockConfig+0x270>)
 8003da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003daa:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <HAL_RCC_ClockConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f818 	bl	8002de4 <HAL_InitTick>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40022000 	.word	0x40022000
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	04c4b400 	.word	0x04c4b400
 8003dcc:	0800a228 	.word	0x0800a228
 8003dd0:	20000018 	.word	0x20000018
 8003dd4:	2000001c 	.word	0x2000001c

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dde:	4b2c      	ldr	r3, [pc, #176]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dea:	4b2a      	ldr	r3, [pc, #168]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	e047      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003df0:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d102      	bne.n	8003e02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dfc:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	e03e      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e02:	4b23      	ldr	r3, [pc, #140]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b0c      	cmp	r3, #12
 8003e0c:	d136      	bne.n	8003e7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e0e:	4b20      	ldr	r3, [pc, #128]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e18:	4b1d      	ldr	r3, [pc, #116]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	3301      	adds	r3, #1
 8003e24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d10c      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e36:	68d2      	ldr	r2, [r2, #12]
 8003e38:	0a12      	lsrs	r2, r2, #8
 8003e3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	617b      	str	r3, [r7, #20]
      break;
 8003e44:	e00c      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e46:	4a13      	ldr	r2, [pc, #76]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	4a10      	ldr	r2, [pc, #64]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e50:	68d2      	ldr	r2, [r2, #12]
 8003e52:	0a12      	lsrs	r2, r2, #8
 8003e54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e58:	fb02 f303 	mul.w	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
      break;
 8003e5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	0e5b      	lsrs	r3, r3, #25
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	e001      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e80:	693b      	ldr	r3, [r7, #16]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	007a1200 	.word	0x007a1200

08003e9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	@ (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000018 	.word	0x20000018

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4904      	ldr	r1, [pc, #16]	@ (8003edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	0800a238 	.word	0x0800a238

08003ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ee4:	f7ff ffda 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	0adb      	lsrs	r3, r3, #11
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4904      	ldr	r1, [pc, #16]	@ (8003f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	0800a238 	.word	0x0800a238

08003f0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f12:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d10c      	bne.n	8003f4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f30:	4a17      	ldr	r2, [pc, #92]	@ (8003f90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	4a14      	ldr	r2, [pc, #80]	@ (8003f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f3a:	68d2      	ldr	r2, [r2, #12]
 8003f3c:	0a12      	lsrs	r2, r2, #8
 8003f3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	617b      	str	r3, [r7, #20]
    break;
 8003f48:	e00c      	b.n	8003f64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f4a:	4a12      	ldr	r2, [pc, #72]	@ (8003f94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	4a0e      	ldr	r2, [pc, #56]	@ (8003f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	0a12      	lsrs	r2, r2, #8
 8003f58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
    break;
 8003f62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f64:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	0e5b      	lsrs	r3, r3, #25
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f7e:	687b      	ldr	r3, [r7, #4]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	007a1200 	.word	0x007a1200
 8003f94:	00f42400 	.word	0x00f42400

08003f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8098 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fba:	4b43      	ldr	r3, [pc, #268]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10d      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc6:	4b40      	ldr	r3, [pc, #256]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fca:	4a3f      	ldr	r2, [pc, #252]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a39      	ldr	r2, [pc, #228]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fee:	f7fe ff45 	bl	8002e7c <HAL_GetTick>
 8003ff2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ff4:	e009      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff6:	f7fe ff41 	bl	8002e7c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d902      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	74fb      	strb	r3, [r7, #19]
        break;
 8004008:	e005      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800400a:	4b30      	ldr	r3, [pc, #192]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ef      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d159      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800401c:	4b2a      	ldr	r3, [pc, #168]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004026:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01e      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	429a      	cmp	r2, r3
 8004036:	d019      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004038:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004042:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004044:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004054:	4b1c      	ldr	r3, [pc, #112]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	4a1b      	ldr	r2, [pc, #108]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004064:	4a18      	ldr	r2, [pc, #96]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fe ff01 	bl	8002e7c <HAL_GetTick>
 800407a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407c:	e00b      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fe fefd 	bl	8002e7c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d902      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	74fb      	strb	r3, [r7, #19]
            break;
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004096:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ec      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040aa:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	4903      	ldr	r1, [pc, #12]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040c0:	e008      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	74bb      	strb	r3, [r7, #18]
 80040c6:	e005      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d4:	7c7b      	ldrb	r3, [r7, #17]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d105      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040da:	4ba6      	ldr	r3, [pc, #664]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	4aa5      	ldr	r2, [pc, #660]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f2:	4ba0      	ldr	r3, [pc, #640]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f8:	f023 0203 	bic.w	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	499c      	ldr	r1, [pc, #624]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004114:	4b97      	ldr	r3, [pc, #604]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411a:	f023 020c 	bic.w	r2, r3, #12
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4994      	ldr	r1, [pc, #592]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004136:	4b8f      	ldr	r3, [pc, #572]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	498b      	ldr	r1, [pc, #556]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004158:	4b86      	ldr	r3, [pc, #536]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	4983      	ldr	r1, [pc, #524]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417a:	4b7e      	ldr	r3, [pc, #504]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004180:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	497a      	ldr	r1, [pc, #488]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419c:	4b75      	ldr	r3, [pc, #468]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	4972      	ldr	r1, [pc, #456]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041be:	4b6d      	ldr	r3, [pc, #436]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4969      	ldr	r1, [pc, #420]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e0:	4b64      	ldr	r3, [pc, #400]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4961      	ldr	r1, [pc, #388]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004202:	4b5c      	ldr	r3, [pc, #368]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004208:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	4958      	ldr	r1, [pc, #352]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d015      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004224:	4b53      	ldr	r3, [pc, #332]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	4950      	ldr	r1, [pc, #320]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004244:	4b4b      	ldr	r3, [pc, #300]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a4a      	ldr	r2, [pc, #296]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800424e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004258:	2b00      	cmp	r3, #0
 800425a:	d015      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800425c:	4b45      	ldr	r3, [pc, #276]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	4942      	ldr	r1, [pc, #264]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800427a:	d105      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b3d      	ldr	r3, [pc, #244]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a3c      	ldr	r2, [pc, #240]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004286:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004294:	4b37      	ldr	r3, [pc, #220]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	4934      	ldr	r1, [pc, #208]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042b2:	d105      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042cc:	4b29      	ldr	r3, [pc, #164]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042da:	4926      	ldr	r1, [pc, #152]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ea:	d105      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ec:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a20      	ldr	r2, [pc, #128]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004304:	4b1b      	ldr	r3, [pc, #108]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	4918      	ldr	r1, [pc, #96]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004322:	d105      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004324:	4b13      	ldr	r3, [pc, #76]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800432e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d015      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800433c:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434a:	490a      	ldr	r1, [pc, #40]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800435a:	d105      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a04      	ldr	r2, [pc, #16]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004366:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004368:	7cbb      	ldrb	r3, [r7, #18]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000

08004378 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e09d      	b.n	80044c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800439a:	d009      	beq.n	80043b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	61da      	str	r2, [r3, #28]
 80043a2:	e005      	b.n	80043b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fe f9ea 	bl	80027a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043f0:	d902      	bls.n	80043f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e002      	b.n	80043fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004406:	d007      	beq.n	8004418 <HAL_SPI_Init+0xa0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004410:	d002      	beq.n	8004418 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445a:	ea42 0103 	orr.w	r1, r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	f003 0204 	and.w	r2, r3, #4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	f003 0308 	and.w	r3, r3, #8
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004494:	ea42 0103 	orr.w	r1, r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044de:	f7fe fccd 	bl	8002e7c <HAL_GetTick>
 80044e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d001      	beq.n	80044f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	e15c      	b.n	80047b2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Transmit+0x36>
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e154      	b.n	80047b2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_SPI_Transmit+0x48>
 8004512:	2302      	movs	r3, #2
 8004514:	e14d      	b.n	80047b2 <HAL_SPI_Transmit+0x2e4>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004568:	d10f      	bne.n	800458a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004578:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004588:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d007      	beq.n	80045a8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045b0:	d952      	bls.n	8004658 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <HAL_SPI_Transmit+0xf2>
 80045ba:	8b7b      	ldrh	r3, [r7, #26]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d145      	bne.n	800464c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045e4:	e032      	b.n	800464c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d112      	bne.n	800461a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004618:	e018      	b.n	800464c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800461a:	f7fe fc2f 	bl	8002e7c <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d803      	bhi.n	8004632 <HAL_SPI_Transmit+0x164>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004630:	d102      	bne.n	8004638 <HAL_SPI_Transmit+0x16a>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e0b2      	b.n	80047b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1c7      	bne.n	80045e6 <HAL_SPI_Transmit+0x118>
 8004656:	e083      	b.n	8004760 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_SPI_Transmit+0x198>
 8004660:	8b7b      	ldrh	r3, [r7, #26]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d177      	bne.n	8004756 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d912      	bls.n	8004696 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	1c9a      	adds	r2, r3, #2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b02      	subs	r3, #2
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004694:	e05f      	b.n	8004756 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	7812      	ldrb	r2, [r2, #0]
 80046a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80046bc:	e04b      	b.n	8004756 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d12b      	bne.n	8004724 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d912      	bls.n	80046fc <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	1c9a      	adds	r2, r3, #2
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b02      	subs	r3, #2
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046fa:	e02c      	b.n	8004756 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004722:	e018      	b.n	8004756 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004724:	f7fe fbaa 	bl	8002e7c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d803      	bhi.n	800473c <HAL_SPI_Transmit+0x26e>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800473a:	d102      	bne.n	8004742 <HAL_SPI_Transmit+0x274>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e02d      	b.n	80047b2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ae      	bne.n	80046be <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fcf5 	bl	8005154 <SPI_EndRxTxTransaction>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	af02      	add	r7, sp, #8
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d001      	beq.n	80047da <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
 80047d8:	e123      	b.n	8004a22 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_Receive+0x2c>
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e11b      	b.n	8004a22 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047f2:	d112      	bne.n	800481a <HAL_SPI_Receive+0x60>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10e      	bne.n	800481a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2204      	movs	r2, #4
 8004800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	4613      	mov	r3, r2
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f90a 	bl	8004a2a <HAL_SPI_TransmitReceive>
 8004816:	4603      	mov	r3, r0
 8004818:	e103      	b.n	8004a22 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800481a:	f7fe fb2f 	bl	8002e7c <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_SPI_Receive+0x74>
 800482a:	2302      	movs	r3, #2
 800482c:	e0f9      	b.n	8004a22 <HAL_SPI_Receive+0x268>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2204      	movs	r2, #4
 800483a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	88fa      	ldrh	r2, [r7, #6]
 8004856:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004880:	d908      	bls.n	8004894 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	e007      	b.n	80048a4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048a2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ac:	d10f      	bne.n	80048ce <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d007      	beq.n	80048ec <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048f4:	d875      	bhi.n	80049e2 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048f6:	e037      	b.n	8004968 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b01      	cmp	r3, #1
 8004904:	d117      	bne.n	8004936 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f103 020c 	add.w	r2, r3, #12
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004934:	e018      	b.n	8004968 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004936:	f7fe faa1 	bl	8002e7c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d803      	bhi.n	800494e <HAL_SPI_Receive+0x194>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800494c:	d102      	bne.n	8004954 <HAL_SPI_Receive+0x19a>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e05c      	b.n	8004a22 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1c1      	bne.n	80048f8 <HAL_SPI_Receive+0x13e>
 8004974:	e03b      	b.n	80049ee <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d115      	bne.n	80049b0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498e:	b292      	uxth	r2, r2
 8004990:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	1c9a      	adds	r2, r3, #2
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80049ae:	e018      	b.n	80049e2 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b0:	f7fe fa64 	bl	8002e7c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d803      	bhi.n	80049c8 <HAL_SPI_Receive+0x20e>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_Receive+0x214>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e01f      	b.n	8004a22 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1c3      	bne.n	8004976 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fb56 	bl	80050a4 <SPI_EndRxTransaction>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b08a      	sub	sp, #40	@ 0x28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a3c:	f7fe fa1e 	bl	8002e7c <HAL_GetTick>
 8004a40:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a48:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004a50:	887b      	ldrh	r3, [r7, #2]
 8004a52:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a58:	7ffb      	ldrb	r3, [r7, #31]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d00c      	beq.n	8004a78 <HAL_SPI_TransmitReceive+0x4e>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a64:	d106      	bne.n	8004a74 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <HAL_SPI_TransmitReceive+0x4a>
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d001      	beq.n	8004a78 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
 8004a76:	e1f3      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x60>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x60>
 8004a84:	887b      	ldrh	r3, [r7, #2]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1e8      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_SPI_TransmitReceive+0x72>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e1e1      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x436>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d003      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2205      	movs	r2, #5
 8004ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	887a      	ldrh	r2, [r7, #2]
 8004ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	887a      	ldrh	r2, [r7, #2]
 8004ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004afa:	d802      	bhi.n	8004b02 <HAL_SPI_TransmitReceive+0xd8>
 8004afc:	8abb      	ldrh	r3, [r7, #20]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d908      	bls.n	8004b14 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	e007      	b.n	8004b24 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2e:	2b40      	cmp	r3, #64	@ 0x40
 8004b30:	d007      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b4a:	f240 8083 	bls.w	8004c54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x132>
 8004b56:	8afb      	ldrh	r3, [r7, #22]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d16f      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	1c9a      	adds	r2, r3, #2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b80:	e05c      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_SPI_TransmitReceive+0x19e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_SPI_TransmitReceive+0x19e>
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d113      	bne.n	8004bc8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	881a      	ldrh	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	1c9a      	adds	r2, r3, #2
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d11c      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x1e6>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d016      	beq.n	8004c10 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	b292      	uxth	r2, r2
 8004bee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	1c9a      	adds	r2, r3, #2
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c10:	f7fe f934 	bl	8002e7c <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d80d      	bhi.n	8004c3c <HAL_SPI_TransmitReceive+0x212>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c26:	d009      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e111      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d19d      	bne.n	8004b82 <HAL_SPI_TransmitReceive+0x158>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d197      	bne.n	8004b82 <HAL_SPI_TransmitReceive+0x158>
 8004c52:	e0e5      	b.n	8004e20 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_SPI_TransmitReceive+0x23a>
 8004c5c:	8afb      	ldrh	r3, [r7, #22]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	f040 80d1 	bne.w	8004e06 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d912      	bls.n	8004c94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c72:	881a      	ldrh	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	1c9a      	adds	r2, r3, #2
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b02      	subs	r3, #2
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c92:	e0b8      	b.n	8004e06 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cba:	e0a4      	b.n	8004e06 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d134      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x30a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d02f      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x30a>
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d12c      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d912      	bls.n	8004d0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	881a      	ldrh	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf4:	1c9a      	adds	r2, r3, #2
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b02      	subs	r3, #2
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004d08:	e012      	b.n	8004d30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d148      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x3aa>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d042      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d923      	bls.n	8004da2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	b292      	uxth	r2, r2
 8004d66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6c:	1c9a      	adds	r2, r3, #2
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b02      	subs	r3, #2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d81f      	bhi.n	8004dd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d9e:	605a      	str	r2, [r3, #4]
 8004da0:	e016      	b.n	8004dd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f103 020c 	add.w	r2, r3, #12
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004dd4:	f7fe f852 	bl	8002e7c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d803      	bhi.n	8004dec <HAL_SPI_TransmitReceive+0x3c2>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dea:	d102      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x3c8>
 8004dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e02c      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f47f af55 	bne.w	8004cbc <HAL_SPI_TransmitReceive+0x292>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f47f af4e 	bne.w	8004cbc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f995 	bl	8005154 <SPI_EndRxTxTransaction>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e00e      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
  }
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	@ 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e78:	f7fe f800 	bl	8002e7c <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e88:	f7fd fff8 	bl	8002e7c <HAL_GetTick>
 8004e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e8e:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	015b      	lsls	r3, r3, #5
 8004e94:	0d1b      	lsrs	r3, r3, #20
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	fb02 f303 	mul.w	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9e:	e054      	b.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ea6:	d050      	beq.n	8004f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ea8:	f7fd ffe8 	bl	8002e7c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d902      	bls.n	8004ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d13d      	bne.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ed6:	d111      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee0:	d004      	beq.n	8004eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d107      	bne.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f04:	d10f      	bne.n	8004f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e017      	b.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	bf0c      	ite	eq
 8004f5a:	2301      	moveq	r3, #1
 8004f5c:	2300      	movne	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d19b      	bne.n	8004ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000018 	.word	0x20000018

08004f78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	@ 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f8a:	f7fd ff77 	bl	8002e7c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	4413      	add	r3, r2
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f9a:	f7fd ff6f 	bl	8002e7c <HAL_GetTick>
 8004f9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80050a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00da      	lsls	r2, r3, #3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	0d1b      	lsrs	r3, r3, #20
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fc0:	e060      	b.n	8005084 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004fc8:	d107      	bne.n	8004fda <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe0:	d050      	beq.n	8005084 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fe2:	f7fd ff4b 	bl	8002e7c <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d902      	bls.n	8004ff8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d13d      	bne.n	8005074 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005006:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005010:	d111      	bne.n	8005036 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501a:	d004      	beq.n	8005026 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005024:	d107      	bne.n	8005036 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005034:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503e:	d10f      	bne.n	8005060 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800505e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e010      	b.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3b01      	subs	r3, #1
 8005082:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d196      	bne.n	8004fc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3728      	adds	r7, #40	@ 0x28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000018 	.word	0x20000018

080050a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050b8:	d111      	bne.n	80050de <SPI_EndRxTransaction+0x3a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c2:	d004      	beq.n	80050ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050cc:	d107      	bne.n	80050de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	@ 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff febd 	bl	8004e68 <SPI_WaitFlagStateUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e023      	b.n	800514c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510c:	d11d      	bne.n	800514a <SPI_EndRxTransaction+0xa6>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005116:	d004      	beq.n	8005122 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005120:	d113      	bne.n	800514a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff22 	bl	8004f78 <SPI_WaitFifoStateUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	f043 0220 	orr.w	r2, r3, #32
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e000      	b.n	800514c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af02      	add	r7, sp, #8
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff ff03 	bl	8004f78 <SPI_WaitFifoStateUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e027      	b.n	80051d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	2180      	movs	r1, #128	@ 0x80
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff fe68 	bl	8004e68 <SPI_WaitFlagStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e014      	b.n	80051d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff fedc 	bl	8004f78 <SPI_WaitFifoStateUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e000      	b.n	80051d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e049      	b.n	8005286 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fd fb2c 	bl	8002864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fcd8 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e049      	b.n	8005334 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f841 	bl	800533c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f000 fc81 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <HAL_TIM_PWM_Start+0x24>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e03c      	b.n	80053ee <HAL_TIM_PWM_Start+0x9e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b04      	cmp	r3, #4
 8005378:	d109      	bne.n	800538e <HAL_TIM_PWM_Start+0x3e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e02f      	b.n	80053ee <HAL_TIM_PWM_Start+0x9e>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b08      	cmp	r3, #8
 8005392:	d109      	bne.n	80053a8 <HAL_TIM_PWM_Start+0x58>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	e022      	b.n	80053ee <HAL_TIM_PWM_Start+0x9e>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	d109      	bne.n	80053c2 <HAL_TIM_PWM_Start+0x72>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	bf14      	ite	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	2300      	moveq	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	e015      	b.n	80053ee <HAL_TIM_PWM_Start+0x9e>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start+0x8c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e008      	b.n	80053ee <HAL_TIM_PWM_Start+0x9e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e097      	b.n	8005526 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Start+0xb6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005404:	e023      	b.n	800544e <HAL_TIM_PWM_Start+0xfe>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d104      	bne.n	8005416 <HAL_TIM_PWM_Start+0xc6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005414:	e01b      	b.n	800544e <HAL_TIM_PWM_Start+0xfe>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d104      	bne.n	8005426 <HAL_TIM_PWM_Start+0xd6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005424:	e013      	b.n	800544e <HAL_TIM_PWM_Start+0xfe>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b0c      	cmp	r3, #12
 800542a:	d104      	bne.n	8005436 <HAL_TIM_PWM_Start+0xe6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005434:	e00b      	b.n	800544e <HAL_TIM_PWM_Start+0xfe>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b10      	cmp	r3, #16
 800543a:	d104      	bne.n	8005446 <HAL_TIM_PWM_Start+0xf6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005444:	e003      	b.n	800544e <HAL_TIM_PWM_Start+0xfe>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2201      	movs	r2, #1
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 ffea 	bl	8006430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a33      	ldr	r2, [pc, #204]	@ (8005530 <HAL_TIM_PWM_Start+0x1e0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <HAL_TIM_PWM_Start+0x13e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a32      	ldr	r2, [pc, #200]	@ (8005534 <HAL_TIM_PWM_Start+0x1e4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <HAL_TIM_PWM_Start+0x13e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a30      	ldr	r2, [pc, #192]	@ (8005538 <HAL_TIM_PWM_Start+0x1e8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_TIM_PWM_Start+0x13e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2f      	ldr	r2, [pc, #188]	@ (800553c <HAL_TIM_PWM_Start+0x1ec>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIM_PWM_Start+0x13e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2d      	ldr	r2, [pc, #180]	@ (8005540 <HAL_TIM_PWM_Start+0x1f0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <HAL_TIM_PWM_Start+0x142>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <HAL_TIM_PWM_Start+0x144>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a20      	ldr	r2, [pc, #128]	@ (8005530 <HAL_TIM_PWM_Start+0x1e0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d018      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x194>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ba:	d013      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x194>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a20      	ldr	r2, [pc, #128]	@ (8005544 <HAL_TIM_PWM_Start+0x1f4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00e      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x194>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005548 <HAL_TIM_PWM_Start+0x1f8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x194>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a17      	ldr	r2, [pc, #92]	@ (8005534 <HAL_TIM_PWM_Start+0x1e4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a16      	ldr	r2, [pc, #88]	@ (8005538 <HAL_TIM_PWM_Start+0x1e8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d115      	bne.n	8005510 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	4b18      	ldr	r3, [pc, #96]	@ (800554c <HAL_TIM_PWM_Start+0x1fc>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d015      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1d2>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054fc:	d011      	beq.n	8005522 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e000      	b.n	8005524 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40013400 	.word	0x40013400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	00010007 	.word	0x00010007

08005550 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e097      	b.n	8005694 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fd f9a5 	bl	80028c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005594:	f023 0307 	bic.w	r3, r3, #7
 8005598:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f000 fb15 	bl	8005bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	4313      	orrs	r3, r2
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80055f0:	f023 030c 	bic.w	r3, r3, #12
 80055f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005600:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	4313      	orrs	r3, r2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	011a      	lsls	r2, r3, #4
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	031b      	lsls	r3, r3, #12
 8005620:	4313      	orrs	r3, r2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005636:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	4313      	orrs	r3, r2
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d110      	bne.n	80056ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d102      	bne.n	80056d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056d2:	7b7b      	ldrb	r3, [r7, #13]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d001      	beq.n	80056dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e069      	b.n	80057b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ec:	e031      	b.n	8005752 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d110      	bne.n	8005716 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d102      	bne.n	8005700 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056fa:	7b3b      	ldrb	r3, [r7, #12]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d001      	beq.n	8005704 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e055      	b.n	80057b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005714:	e01d      	b.n	8005752 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800571c:	7bbb      	ldrb	r3, [r7, #14]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d105      	bne.n	800572e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005722:	7b7b      	ldrb	r3, [r7, #13]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d102      	bne.n	800572e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005728:	7b3b      	ldrb	r3, [r7, #12]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d001      	beq.n	8005732 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e03e      	b.n	80057b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2202      	movs	r2, #2
 8005746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_TIM_Encoder_Start+0xc4>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d008      	beq.n	8005770 <HAL_TIM_Encoder_Start+0xd4>
 800575e:	e00f      	b.n	8005780 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fe61 	bl	8006430 <TIM_CCxChannelCmd>
      break;
 800576e:	e016      	b.n	800579e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2201      	movs	r2, #1
 8005776:	2104      	movs	r1, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fe59 	bl	8006430 <TIM_CCxChannelCmd>
      break;
 800577e:	e00e      	b.n	800579e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2201      	movs	r2, #1
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fe51 	bl	8006430 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	2104      	movs	r1, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fe4a 	bl	8006430 <TIM_CCxChannelCmd>
      break;
 800579c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0ff      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b14      	cmp	r3, #20
 80057e2:	f200 80f0 	bhi.w	80059c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005841 	.word	0x08005841
 80057f0:	080059c7 	.word	0x080059c7
 80057f4:	080059c7 	.word	0x080059c7
 80057f8:	080059c7 	.word	0x080059c7
 80057fc:	08005881 	.word	0x08005881
 8005800:	080059c7 	.word	0x080059c7
 8005804:	080059c7 	.word	0x080059c7
 8005808:	080059c7 	.word	0x080059c7
 800580c:	080058c3 	.word	0x080058c3
 8005810:	080059c7 	.word	0x080059c7
 8005814:	080059c7 	.word	0x080059c7
 8005818:	080059c7 	.word	0x080059c7
 800581c:	08005903 	.word	0x08005903
 8005820:	080059c7 	.word	0x080059c7
 8005824:	080059c7 	.word	0x080059c7
 8005828:	080059c7 	.word	0x080059c7
 800582c:	08005945 	.word	0x08005945
 8005830:	080059c7 	.word	0x080059c7
 8005834:	080059c7 	.word	0x080059c7
 8005838:	080059c7 	.word	0x080059c7
 800583c:	08005985 	.word	0x08005985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fa60 	bl	8005d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0208 	orr.w	r2, r2, #8
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0204 	bic.w	r2, r2, #4
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	619a      	str	r2, [r3, #24]
      break;
 800587e:	e0a5      	b.n	80059cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fad0 	bl	8005e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800589a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6999      	ldr	r1, [r3, #24]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	021a      	lsls	r2, r3, #8
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	619a      	str	r2, [r3, #24]
      break;
 80058c0:	e084      	b.n	80059cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fb39 	bl	8005f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0208 	orr.w	r2, r2, #8
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0204 	bic.w	r2, r2, #4
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691a      	ldr	r2, [r3, #16]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	61da      	str	r2, [r3, #28]
      break;
 8005900:	e064      	b.n	80059cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fba1 	bl	8006050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800591c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800592c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69d9      	ldr	r1, [r3, #28]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	021a      	lsls	r2, r3, #8
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	61da      	str	r2, [r3, #28]
      break;
 8005942:	e043      	b.n	80059cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fc0a 	bl	8006164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0208 	orr.w	r2, r2, #8
 800595e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0204 	bic.w	r2, r2, #4
 800596e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005982:	e023      	b.n	80059cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fc4e 	bl	800622c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800599e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	021a      	lsls	r2, r3, #8
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059c4:	e002      	b.n	80059cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	75fb      	strb	r3, [r7, #23]
      break;
 80059ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop

080059e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_ConfigClockSource+0x1c>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e0de      	b.n	8005bba <HAL_TIM_ConfigClockSource+0x1da>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a63      	ldr	r2, [pc, #396]	@ (8005bc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	f000 80a9 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a3c:	4a61      	ldr	r2, [pc, #388]	@ (8005bc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	f200 80ae 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a44:	4a60      	ldr	r2, [pc, #384]	@ (8005bc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f000 80a1 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005bc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f200 80a6 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a54:	4a5d      	ldr	r2, [pc, #372]	@ (8005bcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	f000 8099 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a5c:	4a5b      	ldr	r2, [pc, #364]	@ (8005bcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	f200 809e 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a64:	4a5a      	ldr	r2, [pc, #360]	@ (8005bd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f000 8091 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a6c:	4a58      	ldr	r2, [pc, #352]	@ (8005bd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	f200 8096 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a78:	f000 8089 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005a7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a80:	f200 808e 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a88:	d03e      	beq.n	8005b08 <HAL_TIM_ConfigClockSource+0x128>
 8005a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a8e:	f200 8087 	bhi.w	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a96:	f000 8086 	beq.w	8005ba6 <HAL_TIM_ConfigClockSource+0x1c6>
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a9e:	d87f      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005aa0:	2b70      	cmp	r3, #112	@ 0x70
 8005aa2:	d01a      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0xfa>
 8005aa4:	2b70      	cmp	r3, #112	@ 0x70
 8005aa6:	d87b      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005aa8:	2b60      	cmp	r3, #96	@ 0x60
 8005aaa:	d050      	beq.n	8005b4e <HAL_TIM_ConfigClockSource+0x16e>
 8005aac:	2b60      	cmp	r3, #96	@ 0x60
 8005aae:	d877      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab0:	2b50      	cmp	r3, #80	@ 0x50
 8005ab2:	d03c      	beq.n	8005b2e <HAL_TIM_ConfigClockSource+0x14e>
 8005ab4:	2b50      	cmp	r3, #80	@ 0x50
 8005ab6:	d873      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab8:	2b40      	cmp	r3, #64	@ 0x40
 8005aba:	d058      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x18e>
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	d86f      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac0:	2b30      	cmp	r3, #48	@ 0x30
 8005ac2:	d064      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ac4:	2b30      	cmp	r3, #48	@ 0x30
 8005ac6:	d86b      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d060      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d867      	bhi.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d05c      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d05a      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x1ae>
 8005ad8:	e062      	b.n	8005ba0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aea:	f000 fc81 	bl	80063f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	609a      	str	r2, [r3, #8]
      break;
 8005b06:	e04f      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b18:	f000 fc6a 	bl	80063f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b2a:	609a      	str	r2, [r3, #8]
      break;
 8005b2c:	e03c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f000 fbdc 	bl	80062f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2150      	movs	r1, #80	@ 0x50
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fc35 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005b4c:	e02c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f000 fbfb 	bl	8006356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2160      	movs	r1, #96	@ 0x60
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fc25 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005b6c:	e01c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f000 fbbc 	bl	80062f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2140      	movs	r1, #64	@ 0x40
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fc15 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005b8c:	e00c      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f000 fc0c 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8005b9e:	e003      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba4:	e000      	b.n	8005ba8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	00100070 	.word	0x00100070
 8005bc8:	00100040 	.word	0x00100040
 8005bcc:	00100030 	.word	0x00100030
 8005bd0:	00100020 	.word	0x00100020

08005bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a42      	ldr	r2, [pc, #264]	@ (8005cf0 <TIM_Base_SetConfig+0x11c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00f      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf2:	d00b      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cf4 <TIM_Base_SetConfig+0x120>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d007      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3e      	ldr	r2, [pc, #248]	@ (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0x38>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3d      	ldr	r2, [pc, #244]	@ (8005cfc <TIM_Base_SetConfig+0x128>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d108      	bne.n	8005c1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a33      	ldr	r2, [pc, #204]	@ (8005cf0 <TIM_Base_SetConfig+0x11c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01b      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2c:	d017      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a30      	ldr	r2, [pc, #192]	@ (8005cf4 <TIM_Base_SetConfig+0x120>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2f      	ldr	r2, [pc, #188]	@ (8005cf8 <TIM_Base_SetConfig+0x124>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00f      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2e      	ldr	r2, [pc, #184]	@ (8005cfc <TIM_Base_SetConfig+0x128>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00b      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2d      	ldr	r2, [pc, #180]	@ (8005d00 <TIM_Base_SetConfig+0x12c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d007      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2c      	ldr	r2, [pc, #176]	@ (8005d04 <TIM_Base_SetConfig+0x130>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_Base_SetConfig+0x8a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2b      	ldr	r2, [pc, #172]	@ (8005d08 <TIM_Base_SetConfig+0x134>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a16      	ldr	r2, [pc, #88]	@ (8005cf0 <TIM_Base_SetConfig+0x11c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00f      	beq.n	8005cbc <TIM_Base_SetConfig+0xe8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	@ (8005cfc <TIM_Base_SetConfig+0x128>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00b      	beq.n	8005cbc <TIM_Base_SetConfig+0xe8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a16      	ldr	r2, [pc, #88]	@ (8005d00 <TIM_Base_SetConfig+0x12c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d007      	beq.n	8005cbc <TIM_Base_SetConfig+0xe8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a15      	ldr	r2, [pc, #84]	@ (8005d04 <TIM_Base_SetConfig+0x130>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_Base_SetConfig+0xe8>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a14      	ldr	r2, [pc, #80]	@ (8005d08 <TIM_Base_SetConfig+0x134>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f023 0201 	bic.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	611a      	str	r2, [r3, #16]
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f023 0201 	bic.w	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 0302 	bic.w	r3, r3, #2
 8005d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a2c      	ldr	r2, [pc, #176]	@ (8005e18 <TIM_OC1_SetConfig+0x10c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00f      	beq.n	8005d8c <TIM_OC1_SetConfig+0x80>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005e1c <TIM_OC1_SetConfig+0x110>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_OC1_SetConfig+0x80>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a2a      	ldr	r2, [pc, #168]	@ (8005e20 <TIM_OC1_SetConfig+0x114>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_OC1_SetConfig+0x80>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a29      	ldr	r2, [pc, #164]	@ (8005e24 <TIM_OC1_SetConfig+0x118>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_OC1_SetConfig+0x80>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a28      	ldr	r2, [pc, #160]	@ (8005e28 <TIM_OC1_SetConfig+0x11c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d10c      	bne.n	8005da6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0308 	bic.w	r3, r3, #8
 8005d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f023 0304 	bic.w	r3, r3, #4
 8005da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <TIM_OC1_SetConfig+0x10c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00f      	beq.n	8005dce <TIM_OC1_SetConfig+0xc2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e1c <TIM_OC1_SetConfig+0x110>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00b      	beq.n	8005dce <TIM_OC1_SetConfig+0xc2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a19      	ldr	r2, [pc, #100]	@ (8005e20 <TIM_OC1_SetConfig+0x114>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <TIM_OC1_SetConfig+0xc2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a18      	ldr	r2, [pc, #96]	@ (8005e24 <TIM_OC1_SetConfig+0x118>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_OC1_SetConfig+0xc2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a17      	ldr	r2, [pc, #92]	@ (8005e28 <TIM_OC1_SetConfig+0x11c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d111      	bne.n	8005df2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40014000 	.word	0x40014000
 8005e24:	40014400 	.word	0x40014400
 8005e28:	40014800 	.word	0x40014800

08005e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f023 0210 	bic.w	r2, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 0320 	bic.w	r3, r3, #32
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a28      	ldr	r2, [pc, #160]	@ (8005f2c <TIM_OC2_SetConfig+0x100>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d003      	beq.n	8005e98 <TIM_OC2_SetConfig+0x6c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a27      	ldr	r2, [pc, #156]	@ (8005f30 <TIM_OC2_SetConfig+0x104>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d10d      	bne.n	8005eb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f2c <TIM_OC2_SetConfig+0x100>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00f      	beq.n	8005edc <TIM_OC2_SetConfig+0xb0>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8005f30 <TIM_OC2_SetConfig+0x104>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <TIM_OC2_SetConfig+0xb0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f34 <TIM_OC2_SetConfig+0x108>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d007      	beq.n	8005edc <TIM_OC2_SetConfig+0xb0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a1a      	ldr	r2, [pc, #104]	@ (8005f38 <TIM_OC2_SetConfig+0x10c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_OC2_SetConfig+0xb0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a19      	ldr	r2, [pc, #100]	@ (8005f3c <TIM_OC2_SetConfig+0x110>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d113      	bne.n	8005f04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40013400 	.word	0x40013400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800

08005f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a27      	ldr	r2, [pc, #156]	@ (800603c <TIM_OC3_SetConfig+0xfc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC3_SetConfig+0x6a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a26      	ldr	r2, [pc, #152]	@ (8006040 <TIM_OC3_SetConfig+0x100>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10d      	bne.n	8005fc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800603c <TIM_OC3_SetConfig+0xfc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00f      	beq.n	8005fee <TIM_OC3_SetConfig+0xae>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006040 <TIM_OC3_SetConfig+0x100>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00b      	beq.n	8005fee <TIM_OC3_SetConfig+0xae>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006044 <TIM_OC3_SetConfig+0x104>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <TIM_OC3_SetConfig+0xae>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a19      	ldr	r2, [pc, #100]	@ (8006048 <TIM_OC3_SetConfig+0x108>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_OC3_SetConfig+0xae>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a18      	ldr	r2, [pc, #96]	@ (800604c <TIM_OC3_SetConfig+0x10c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d113      	bne.n	8006016 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40013400 	.word	0x40013400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800

08006050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800609e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	031b      	lsls	r3, r3, #12
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a28      	ldr	r2, [pc, #160]	@ (8006150 <TIM_OC4_SetConfig+0x100>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC4_SetConfig+0x6c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a27      	ldr	r2, [pc, #156]	@ (8006154 <TIM_OC4_SetConfig+0x104>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d10d      	bne.n	80060d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	031b      	lsls	r3, r3, #12
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a1d      	ldr	r2, [pc, #116]	@ (8006150 <TIM_OC4_SetConfig+0x100>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00f      	beq.n	8006100 <TIM_OC4_SetConfig+0xb0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006154 <TIM_OC4_SetConfig+0x104>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00b      	beq.n	8006100 <TIM_OC4_SetConfig+0xb0>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <TIM_OC4_SetConfig+0x108>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_OC4_SetConfig+0xb0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1a      	ldr	r2, [pc, #104]	@ (800615c <TIM_OC4_SetConfig+0x10c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_OC4_SetConfig+0xb0>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a19      	ldr	r2, [pc, #100]	@ (8006160 <TIM_OC4_SetConfig+0x110>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d113      	bne.n	8006128 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006106:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800610e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	019b      	lsls	r3, r3, #6
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40013400 	.word	0x40013400
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800

08006164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80061a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a17      	ldr	r2, [pc, #92]	@ (8006218 <TIM_OC5_SetConfig+0xb4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00f      	beq.n	80061de <TIM_OC5_SetConfig+0x7a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a16      	ldr	r2, [pc, #88]	@ (800621c <TIM_OC5_SetConfig+0xb8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00b      	beq.n	80061de <TIM_OC5_SetConfig+0x7a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a15      	ldr	r2, [pc, #84]	@ (8006220 <TIM_OC5_SetConfig+0xbc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d007      	beq.n	80061de <TIM_OC5_SetConfig+0x7a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a14      	ldr	r2, [pc, #80]	@ (8006224 <TIM_OC5_SetConfig+0xc0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d003      	beq.n	80061de <TIM_OC5_SetConfig+0x7a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a13      	ldr	r2, [pc, #76]	@ (8006228 <TIM_OC5_SetConfig+0xc4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d109      	bne.n	80061f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40013400 	.word	0x40013400
 8006220:	40014000 	.word	0x40014000
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800

0800622c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800625a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800625e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	051b      	lsls	r3, r3, #20
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a18      	ldr	r2, [pc, #96]	@ (80062e4 <TIM_OC6_SetConfig+0xb8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00f      	beq.n	80062a8 <TIM_OC6_SetConfig+0x7c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a17      	ldr	r2, [pc, #92]	@ (80062e8 <TIM_OC6_SetConfig+0xbc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00b      	beq.n	80062a8 <TIM_OC6_SetConfig+0x7c>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a16      	ldr	r2, [pc, #88]	@ (80062ec <TIM_OC6_SetConfig+0xc0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <TIM_OC6_SetConfig+0x7c>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a15      	ldr	r2, [pc, #84]	@ (80062f0 <TIM_OC6_SetConfig+0xc4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC6_SetConfig+0x7c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a14      	ldr	r2, [pc, #80]	@ (80062f4 <TIM_OC6_SetConfig+0xc8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d109      	bne.n	80062bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	029b      	lsls	r3, r3, #10
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	621a      	str	r2, [r3, #32]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800

080062f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 030a 	bic.w	r3, r3, #10
 8006334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006356:	b480      	push	{r7}
 8006358:	b087      	sub	sp, #28
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f023 0210 	bic.w	r2, r3, #16
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006392:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f043 0307 	orr.w	r3, r3, #7
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	609a      	str	r2, [r3, #8]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800640a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	021a      	lsls	r2, r3, #8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	431a      	orrs	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2201      	movs	r2, #1
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	43db      	mvns	r3, r3
 8006452:	401a      	ands	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	fa01 f303 	lsl.w	r3, r1, r3
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
	...

0800647c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648c:	2b01      	cmp	r3, #1
 800648e:	d101      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006490:	2302      	movs	r3, #2
 8006492:	e065      	b.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a2c      	ldr	r2, [pc, #176]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d108      	bne.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80064e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1b      	ldr	r2, [pc, #108]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650a:	d013      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a18      	ldr	r2, [pc, #96]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a12      	ldr	r2, [pc, #72]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a13      	ldr	r2, [pc, #76]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10c      	bne.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800653a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	4313      	orrs	r3, r2
 8006544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40013400 	.word	0x40013400
 8006574:	40000400 	.word	0x40000400
 8006578:	40000800 	.word	0x40000800
 800657c:	40014000 	.word	0x40014000

08006580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006598:	2302      	movs	r3, #2
 800659a:	e073      	b.n	8006684 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	041b      	lsls	r3, r3, #16
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a19      	ldr	r2, [pc, #100]	@ (8006690 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d004      	beq.n	8006638 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a18      	ldr	r2, [pc, #96]	@ (8006694 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d11c      	bne.n	8006672 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	051b      	lsls	r3, r3, #20
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40013400 	.word	0x40013400

08006698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e042      	b.n	8006730 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d106      	bne.n	80066c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fc f9d1 	bl	8002a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2224      	movs	r2, #36	@ 0x24
 80066c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fb82 	bl	8006dec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f8b3 	bl	8006854 <UART_SetConfig>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e01b      	b.n	8006730 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fc01 	bl	8006f30 <UART_CheckIdleState>
 800672e:	4603      	mov	r3, r0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08a      	sub	sp, #40	@ 0x28
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674e:	2b20      	cmp	r3, #32
 8006750:	d17b      	bne.n	800684a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <HAL_UART_Transmit+0x26>
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e074      	b.n	800684c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2221      	movs	r2, #33	@ 0x21
 800676e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006772:	f7fc fb83 	bl	8002e7c <HAL_GetTick>
 8006776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	88fa      	ldrh	r2, [r7, #6]
 800677c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006790:	d108      	bne.n	80067a4 <HAL_UART_Transmit+0x6c>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e003      	b.n	80067ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067ac:	e030      	b.n	8006810 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2180      	movs	r1, #128	@ 0x80
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fc63 	bl	8007084 <UART_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e03d      	b.n	800684c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	3302      	adds	r3, #2
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	e007      	b.n	80067fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	781a      	ldrb	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	3301      	adds	r3, #1
 80067fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1c8      	bne.n	80067ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2200      	movs	r2, #0
 8006824:	2140      	movs	r1, #64	@ 0x40
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 fc2c 	bl	8007084 <UART_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e006      	b.n	800684c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e000      	b.n	800684c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800684a:	2302      	movs	r3, #2
  }
}
 800684c:	4618      	mov	r0, r3
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006858:	b08c      	sub	sp, #48	@ 0x30
 800685a:	af00      	add	r7, sp, #0
 800685c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	431a      	orrs	r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4313      	orrs	r3, r2
 800687a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4bab      	ldr	r3, [pc, #684]	@ (8006b30 <UART_SetConfig+0x2dc>)
 8006884:	4013      	ands	r3, r2
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800688c:	430b      	orrs	r3, r1
 800688e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4aa0      	ldr	r2, [pc, #640]	@ (8006b34 <UART_SetConfig+0x2e0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068bc:	4313      	orrs	r3, r2
 80068be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80068ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d4:	430b      	orrs	r3, r1
 80068d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068de:	f023 010f 	bic.w	r1, r3, #15
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a91      	ldr	r2, [pc, #580]	@ (8006b38 <UART_SetConfig+0x2e4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d125      	bne.n	8006944 <UART_SetConfig+0xf0>
 80068f8:	4b90      	ldr	r3, [pc, #576]	@ (8006b3c <UART_SetConfig+0x2e8>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b03      	cmp	r3, #3
 8006904:	d81a      	bhi.n	800693c <UART_SetConfig+0xe8>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0xb8>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	0800691d 	.word	0x0800691d
 8006910:	0800692d 	.word	0x0800692d
 8006914:	08006925 	.word	0x08006925
 8006918:	08006935 	.word	0x08006935
 800691c:	2301      	movs	r3, #1
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006922:	e0d6      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006924:	2302      	movs	r3, #2
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800692a:	e0d2      	b.n	8006ad2 <UART_SetConfig+0x27e>
 800692c:	2304      	movs	r3, #4
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006932:	e0ce      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006934:	2308      	movs	r3, #8
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693a:	e0ca      	b.n	8006ad2 <UART_SetConfig+0x27e>
 800693c:	2310      	movs	r3, #16
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006942:	e0c6      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a7d      	ldr	r2, [pc, #500]	@ (8006b40 <UART_SetConfig+0x2ec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d138      	bne.n	80069c0 <UART_SetConfig+0x16c>
 800694e:	4b7b      	ldr	r3, [pc, #492]	@ (8006b3c <UART_SetConfig+0x2e8>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006954:	f003 030c 	and.w	r3, r3, #12
 8006958:	2b0c      	cmp	r3, #12
 800695a:	d82d      	bhi.n	80069b8 <UART_SetConfig+0x164>
 800695c:	a201      	add	r2, pc, #4	@ (adr r2, 8006964 <UART_SetConfig+0x110>)
 800695e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006962:	bf00      	nop
 8006964:	08006999 	.word	0x08006999
 8006968:	080069b9 	.word	0x080069b9
 800696c:	080069b9 	.word	0x080069b9
 8006970:	080069b9 	.word	0x080069b9
 8006974:	080069a9 	.word	0x080069a9
 8006978:	080069b9 	.word	0x080069b9
 800697c:	080069b9 	.word	0x080069b9
 8006980:	080069b9 	.word	0x080069b9
 8006984:	080069a1 	.word	0x080069a1
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069b9 	.word	0x080069b9
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069b1 	.word	0x080069b1
 8006998:	2300      	movs	r3, #0
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699e:	e098      	b.n	8006ad2 <UART_SetConfig+0x27e>
 80069a0:	2302      	movs	r3, #2
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a6:	e094      	b.n	8006ad2 <UART_SetConfig+0x27e>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ae:	e090      	b.n	8006ad2 <UART_SetConfig+0x27e>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b6:	e08c      	b.n	8006ad2 <UART_SetConfig+0x27e>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069be:	e088      	b.n	8006ad2 <UART_SetConfig+0x27e>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a5f      	ldr	r2, [pc, #380]	@ (8006b44 <UART_SetConfig+0x2f0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d125      	bne.n	8006a16 <UART_SetConfig+0x1c2>
 80069ca:	4b5c      	ldr	r3, [pc, #368]	@ (8006b3c <UART_SetConfig+0x2e8>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069d4:	2b30      	cmp	r3, #48	@ 0x30
 80069d6:	d016      	beq.n	8006a06 <UART_SetConfig+0x1b2>
 80069d8:	2b30      	cmp	r3, #48	@ 0x30
 80069da:	d818      	bhi.n	8006a0e <UART_SetConfig+0x1ba>
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d00a      	beq.n	80069f6 <UART_SetConfig+0x1a2>
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d814      	bhi.n	8006a0e <UART_SetConfig+0x1ba>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <UART_SetConfig+0x19a>
 80069e8:	2b10      	cmp	r3, #16
 80069ea:	d008      	beq.n	80069fe <UART_SetConfig+0x1aa>
 80069ec:	e00f      	b.n	8006a0e <UART_SetConfig+0x1ba>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f4:	e06d      	b.n	8006ad2 <UART_SetConfig+0x27e>
 80069f6:	2302      	movs	r3, #2
 80069f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fc:	e069      	b.n	8006ad2 <UART_SetConfig+0x27e>
 80069fe:	2304      	movs	r3, #4
 8006a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a04:	e065      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a06:	2308      	movs	r3, #8
 8006a08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0c:	e061      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a0e:	2310      	movs	r3, #16
 8006a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a14:	e05d      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a4b      	ldr	r2, [pc, #300]	@ (8006b48 <UART_SetConfig+0x2f4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d125      	bne.n	8006a6c <UART_SetConfig+0x218>
 8006a20:	4b46      	ldr	r3, [pc, #280]	@ (8006b3c <UART_SetConfig+0x2e8>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a2c:	d016      	beq.n	8006a5c <UART_SetConfig+0x208>
 8006a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a30:	d818      	bhi.n	8006a64 <UART_SetConfig+0x210>
 8006a32:	2b80      	cmp	r3, #128	@ 0x80
 8006a34:	d00a      	beq.n	8006a4c <UART_SetConfig+0x1f8>
 8006a36:	2b80      	cmp	r3, #128	@ 0x80
 8006a38:	d814      	bhi.n	8006a64 <UART_SetConfig+0x210>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <UART_SetConfig+0x1f0>
 8006a3e:	2b40      	cmp	r3, #64	@ 0x40
 8006a40:	d008      	beq.n	8006a54 <UART_SetConfig+0x200>
 8006a42:	e00f      	b.n	8006a64 <UART_SetConfig+0x210>
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	e042      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	e03e      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5a:	e03a      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a62:	e036      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e032      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a30      	ldr	r2, [pc, #192]	@ (8006b34 <UART_SetConfig+0x2e0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d12a      	bne.n	8006acc <UART_SetConfig+0x278>
 8006a76:	4b31      	ldr	r3, [pc, #196]	@ (8006b3c <UART_SetConfig+0x2e8>)
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a84:	d01a      	beq.n	8006abc <UART_SetConfig+0x268>
 8006a86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a8a:	d81b      	bhi.n	8006ac4 <UART_SetConfig+0x270>
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a90:	d00c      	beq.n	8006aac <UART_SetConfig+0x258>
 8006a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a96:	d815      	bhi.n	8006ac4 <UART_SetConfig+0x270>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <UART_SetConfig+0x250>
 8006a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa0:	d008      	beq.n	8006ab4 <UART_SetConfig+0x260>
 8006aa2:	e00f      	b.n	8006ac4 <UART_SetConfig+0x270>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e012      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e00e      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e00a      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e006      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e002      	b.n	8006ad2 <UART_SetConfig+0x27e>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <UART_SetConfig+0x2e0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f040 80a8 	bne.w	8006c2e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ade:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d834      	bhi.n	8006b50 <UART_SetConfig+0x2fc>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <UART_SetConfig+0x298>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b51 	.word	0x08006b51
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b1f 	.word	0x08006b1f
 8006b00:	08006b51 	.word	0x08006b51
 8006b04:	08006b51 	.word	0x08006b51
 8006b08:	08006b51 	.word	0x08006b51
 8006b0c:	08006b27 	.word	0x08006b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fd f9d0 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8006b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b16:	e021      	b.n	8006b5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b18:	4b0c      	ldr	r3, [pc, #48]	@ (8006b4c <UART_SetConfig+0x2f8>)
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b1c:	e01e      	b.n	8006b5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1e:	f7fd f95b 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8006b22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b24:	e01a      	b.n	8006b5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b2c:	e016      	b.n	8006b5c <UART_SetConfig+0x308>
 8006b2e:	bf00      	nop
 8006b30:	cfff69f3 	.word	0xcfff69f3
 8006b34:	40008000 	.word	0x40008000
 8006b38:	40013800 	.word	0x40013800
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	40004400 	.word	0x40004400
 8006b44:	40004800 	.word	0x40004800
 8006b48:	40004c00 	.word	0x40004c00
 8006b4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 812a 	beq.w	8006db8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	4a9e      	ldr	r2, [pc, #632]	@ (8006de4 <UART_SetConfig+0x590>)
 8006b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	4413      	add	r3, r2
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d305      	bcc.n	8006b94 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b9a:	e10d      	b.n	8006db8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	60fa      	str	r2, [r7, #12]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	4a8e      	ldr	r2, [pc, #568]	@ (8006de4 <UART_SetConfig+0x590>)
 8006baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	607a      	str	r2, [r7, #4]
 8006bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bbe:	f7fa f86b 	bl	8000c98 <__aeabi_uldivmod>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	4619      	mov	r1, r3
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	020b      	lsls	r3, r1, #8
 8006bd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bd8:	0202      	lsls	r2, r0, #8
 8006bda:	6979      	ldr	r1, [r7, #20]
 8006bdc:	6849      	ldr	r1, [r1, #4]
 8006bde:	0849      	lsrs	r1, r1, #1
 8006be0:	2000      	movs	r0, #0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4605      	mov	r5, r0
 8006be6:	eb12 0804 	adds.w	r8, r2, r4
 8006bea:	eb43 0905 	adc.w	r9, r3, r5
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	469a      	mov	sl, r3
 8006bf6:	4693      	mov	fp, r2
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	465b      	mov	r3, fp
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	4649      	mov	r1, r9
 8006c00:	f7fa f84a 	bl	8000c98 <__aeabi_uldivmod>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4613      	mov	r3, r2
 8006c0a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c12:	d308      	bcc.n	8006c26 <UART_SetConfig+0x3d2>
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c1a:	d204      	bcs.n	8006c26 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6a3a      	ldr	r2, [r7, #32]
 8006c22:	60da      	str	r2, [r3, #12]
 8006c24:	e0c8      	b.n	8006db8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c2c:	e0c4      	b.n	8006db8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c36:	d167      	bne.n	8006d08 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006c38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d828      	bhi.n	8006c92 <UART_SetConfig+0x43e>
 8006c40:	a201      	add	r2, pc, #4	@ (adr r2, 8006c48 <UART_SetConfig+0x3f4>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c6d 	.word	0x08006c6d
 8006c4c:	08006c75 	.word	0x08006c75
 8006c50:	08006c7d 	.word	0x08006c7d
 8006c54:	08006c93 	.word	0x08006c93
 8006c58:	08006c83 	.word	0x08006c83
 8006c5c:	08006c93 	.word	0x08006c93
 8006c60:	08006c93 	.word	0x08006c93
 8006c64:	08006c93 	.word	0x08006c93
 8006c68:	08006c8b 	.word	0x08006c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c6c:	f7fd f922 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8006c70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c72:	e014      	b.n	8006c9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c74:	f7fd f934 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 8006c78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c7a:	e010      	b.n	8006c9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8006de8 <UART_SetConfig+0x594>)
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c80:	e00d      	b.n	8006c9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c82:	f7fd f8a9 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8006c86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c88:	e009      	b.n	8006c9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c90:	e005      	b.n	8006c9e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8089 	beq.w	8006db8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	4a4e      	ldr	r2, [pc, #312]	@ (8006de4 <UART_SetConfig+0x590>)
 8006cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cb8:	005a      	lsls	r2, r3, #1
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	085b      	lsrs	r3, r3, #1
 8006cc0:	441a      	add	r2, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	2b0f      	cmp	r3, #15
 8006cd0:	d916      	bls.n	8006d00 <UART_SetConfig+0x4ac>
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd8:	d212      	bcs.n	8006d00 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f023 030f 	bic.w	r3, r3, #15
 8006ce2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	8bfb      	ldrh	r3, [r7, #30]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	8bfa      	ldrh	r2, [r7, #30]
 8006cfc:	60da      	str	r2, [r3, #12]
 8006cfe:	e05b      	b.n	8006db8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d06:	e057      	b.n	8006db8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d828      	bhi.n	8006d62 <UART_SetConfig+0x50e>
 8006d10:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <UART_SetConfig+0x4c4>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d4d 	.word	0x08006d4d
 8006d24:	08006d63 	.word	0x08006d63
 8006d28:	08006d53 	.word	0x08006d53
 8006d2c:	08006d63 	.word	0x08006d63
 8006d30:	08006d63 	.word	0x08006d63
 8006d34:	08006d63 	.word	0x08006d63
 8006d38:	08006d5b 	.word	0x08006d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d3c:	f7fd f8ba 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d42:	e014      	b.n	8006d6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d44:	f7fd f8cc 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 8006d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d4a:	e010      	b.n	8006d6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d4c:	4b26      	ldr	r3, [pc, #152]	@ (8006de8 <UART_SetConfig+0x594>)
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d50:	e00d      	b.n	8006d6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d52:	f7fd f841 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8006d56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d58:	e009      	b.n	8006d6e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d60:	e005      	b.n	8006d6e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d6c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d021      	beq.n	8006db8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	4a1a      	ldr	r2, [pc, #104]	@ (8006de4 <UART_SetConfig+0x590>)
 8006d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	085b      	lsrs	r3, r3, #1
 8006d8c:	441a      	add	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	2b0f      	cmp	r3, #15
 8006d9c:	d909      	bls.n	8006db2 <UART_SetConfig+0x55e>
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da4:	d205      	bcs.n	8006db2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	60da      	str	r2, [r3, #12]
 8006db0:	e002      	b.n	8006db8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006dd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3730      	adds	r7, #48	@ 0x30
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de2:	bf00      	nop
 8006de4:	0800a240 	.word	0x0800a240
 8006de8:	00f42400 	.word	0x00f42400

08006dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01a      	beq.n	8006f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eea:	d10a      	bne.n	8006f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  }
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b098      	sub	sp, #96	@ 0x60
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f40:	f7fb ff9c 	bl	8002e7c <HAL_GetTick>
 8006f44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d12f      	bne.n	8006fb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f88e 	bl	8007084 <UART_WaitOnFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d022      	beq.n	8006fb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f82:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e6      	bne.n	8006f6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e063      	b.n	800707c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d149      	bne.n	8007056 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f857 	bl	8007084 <UART_WaitOnFlagUntilTimeout>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d03c      	beq.n	8007056 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	e853 3f00 	ldrex	r3, [r3]
 8006fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e6      	bne.n	8006fdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3308      	adds	r3, #8
 8007014:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	60fb      	str	r3, [r7, #12]
   return(result);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f023 0301 	bic.w	r3, r3, #1
 8007024:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3308      	adds	r3, #8
 800702c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800702e:	61fa      	str	r2, [r7, #28]
 8007030:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69b9      	ldr	r1, [r7, #24]
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	617b      	str	r3, [r7, #20]
   return(result);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e012      	b.n	800707c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3758      	adds	r7, #88	@ 0x58
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007094:	e04f      	b.n	8007136 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800709c:	d04b      	beq.n	8007136 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709e:	f7fb feed 	bl	8002e7c <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e04e      	b.n	8007156 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d037      	beq.n	8007136 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b80      	cmp	r3, #128	@ 0x80
 80070ca:	d034      	beq.n	8007136 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b40      	cmp	r3, #64	@ 0x40
 80070d0:	d031      	beq.n	8007136 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f003 0308 	and.w	r3, r3, #8
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d110      	bne.n	8007102 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2208      	movs	r2, #8
 80070e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f838 	bl	800715e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2208      	movs	r2, #8
 80070f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e029      	b.n	8007156 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800710c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007110:	d111      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800711a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f81e 	bl	800715e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e00f      	b.n	8007156 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4013      	ands	r3, r2
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	429a      	cmp	r2, r3
 8007144:	bf0c      	ite	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	2300      	movne	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	429a      	cmp	r2, r3
 8007152:	d0a0      	beq.n	8007096 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800715e:	b480      	push	{r7}
 8007160:	b095      	sub	sp, #84	@ 0x54
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800717a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	461a      	mov	r2, r3
 8007182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007184:	643b      	str	r3, [r7, #64]	@ 0x40
 8007186:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800718a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e6      	bne.n	8007166 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3308      	adds	r3, #8
 800719e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	e853 3f00 	ldrex	r3, [r3]
 80071a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3308      	adds	r3, #8
 80071ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e3      	bne.n	8007198 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d118      	bne.n	800720a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f023 0310 	bic.w	r3, r3, #16
 80071ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6979      	ldr	r1, [r7, #20]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	613b      	str	r3, [r7, #16]
   return(result);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e6      	bne.n	80071d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800721e:	bf00      	nop
 8007220:	3754      	adds	r7, #84	@ 0x54
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UARTEx_DisableFifoMode+0x16>
 800723c:	2302      	movs	r3, #2
 800723e:	e027      	b.n	8007290 <HAL_UARTEx_DisableFifoMode+0x66>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2224      	movs	r2, #36	@ 0x24
 800724c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800726e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e02d      	b.n	8007310 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2224      	movs	r2, #36	@ 0x24
 80072c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f84f 	bl	8007394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800732c:	2302      	movs	r3, #2
 800732e:	e02d      	b.n	800738c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2224      	movs	r2, #36	@ 0x24
 800733c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f811 	bl	8007394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d108      	bne.n	80073b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073b4:	e031      	b.n	800741a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073b6:	2308      	movs	r3, #8
 80073b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073ba:	2308      	movs	r3, #8
 80073bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	0e5b      	lsrs	r3, r3, #25
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	0f5b      	lsrs	r3, r3, #29
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	7b3a      	ldrb	r2, [r7, #12]
 80073e2:	4911      	ldr	r1, [pc, #68]	@ (8007428 <UARTEx_SetNbDataToProcess+0x94>)
 80073e4:	5c8a      	ldrb	r2, [r1, r2]
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ea:	7b3a      	ldrb	r2, [r7, #12]
 80073ec:	490f      	ldr	r1, [pc, #60]	@ (800742c <UARTEx_SetNbDataToProcess+0x98>)
 80073ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	7b7a      	ldrb	r2, [r7, #13]
 8007400:	4909      	ldr	r1, [pc, #36]	@ (8007428 <UARTEx_SetNbDataToProcess+0x94>)
 8007402:	5c8a      	ldrb	r2, [r1, r2]
 8007404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007408:	7b7a      	ldrb	r2, [r7, #13]
 800740a:	4908      	ldr	r1, [pc, #32]	@ (800742c <UARTEx_SetNbDataToProcess+0x98>)
 800740c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800740e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	0800a258 	.word	0x0800a258
 800742c:	0800a260 	.word	0x0800a260

08007430 <__cvt>:
 8007430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007434:	ec57 6b10 	vmov	r6, r7, d0
 8007438:	2f00      	cmp	r7, #0
 800743a:	460c      	mov	r4, r1
 800743c:	4619      	mov	r1, r3
 800743e:	463b      	mov	r3, r7
 8007440:	bfbb      	ittet	lt
 8007442:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007446:	461f      	movlt	r7, r3
 8007448:	2300      	movge	r3, #0
 800744a:	232d      	movlt	r3, #45	@ 0x2d
 800744c:	700b      	strb	r3, [r1, #0]
 800744e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007450:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007454:	4691      	mov	r9, r2
 8007456:	f023 0820 	bic.w	r8, r3, #32
 800745a:	bfbc      	itt	lt
 800745c:	4632      	movlt	r2, r6
 800745e:	4616      	movlt	r6, r2
 8007460:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007464:	d005      	beq.n	8007472 <__cvt+0x42>
 8007466:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800746a:	d100      	bne.n	800746e <__cvt+0x3e>
 800746c:	3401      	adds	r4, #1
 800746e:	2102      	movs	r1, #2
 8007470:	e000      	b.n	8007474 <__cvt+0x44>
 8007472:	2103      	movs	r1, #3
 8007474:	ab03      	add	r3, sp, #12
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	ab02      	add	r3, sp, #8
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	ec47 6b10 	vmov	d0, r6, r7
 8007480:	4653      	mov	r3, sl
 8007482:	4622      	mov	r2, r4
 8007484:	f000 fe70 	bl	8008168 <_dtoa_r>
 8007488:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800748c:	4605      	mov	r5, r0
 800748e:	d119      	bne.n	80074c4 <__cvt+0x94>
 8007490:	f019 0f01 	tst.w	r9, #1
 8007494:	d00e      	beq.n	80074b4 <__cvt+0x84>
 8007496:	eb00 0904 	add.w	r9, r0, r4
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	4630      	mov	r0, r6
 80074a0:	4639      	mov	r1, r7
 80074a2:	f7f9 fb39 	bl	8000b18 <__aeabi_dcmpeq>
 80074a6:	b108      	cbz	r0, 80074ac <__cvt+0x7c>
 80074a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80074ac:	2230      	movs	r2, #48	@ 0x30
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	454b      	cmp	r3, r9
 80074b2:	d31e      	bcc.n	80074f2 <__cvt+0xc2>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074b8:	1b5b      	subs	r3, r3, r5
 80074ba:	4628      	mov	r0, r5
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	b004      	add	sp, #16
 80074c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074c8:	eb00 0904 	add.w	r9, r0, r4
 80074cc:	d1e5      	bne.n	800749a <__cvt+0x6a>
 80074ce:	7803      	ldrb	r3, [r0, #0]
 80074d0:	2b30      	cmp	r3, #48	@ 0x30
 80074d2:	d10a      	bne.n	80074ea <__cvt+0xba>
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	4630      	mov	r0, r6
 80074da:	4639      	mov	r1, r7
 80074dc:	f7f9 fb1c 	bl	8000b18 <__aeabi_dcmpeq>
 80074e0:	b918      	cbnz	r0, 80074ea <__cvt+0xba>
 80074e2:	f1c4 0401 	rsb	r4, r4, #1
 80074e6:	f8ca 4000 	str.w	r4, [sl]
 80074ea:	f8da 3000 	ldr.w	r3, [sl]
 80074ee:	4499      	add	r9, r3
 80074f0:	e7d3      	b.n	800749a <__cvt+0x6a>
 80074f2:	1c59      	adds	r1, r3, #1
 80074f4:	9103      	str	r1, [sp, #12]
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	e7d9      	b.n	80074ae <__cvt+0x7e>

080074fa <__exponent>:
 80074fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074fc:	2900      	cmp	r1, #0
 80074fe:	bfba      	itte	lt
 8007500:	4249      	neglt	r1, r1
 8007502:	232d      	movlt	r3, #45	@ 0x2d
 8007504:	232b      	movge	r3, #43	@ 0x2b
 8007506:	2909      	cmp	r1, #9
 8007508:	7002      	strb	r2, [r0, #0]
 800750a:	7043      	strb	r3, [r0, #1]
 800750c:	dd29      	ble.n	8007562 <__exponent+0x68>
 800750e:	f10d 0307 	add.w	r3, sp, #7
 8007512:	461d      	mov	r5, r3
 8007514:	270a      	movs	r7, #10
 8007516:	461a      	mov	r2, r3
 8007518:	fbb1 f6f7 	udiv	r6, r1, r7
 800751c:	fb07 1416 	mls	r4, r7, r6, r1
 8007520:	3430      	adds	r4, #48	@ 0x30
 8007522:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007526:	460c      	mov	r4, r1
 8007528:	2c63      	cmp	r4, #99	@ 0x63
 800752a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800752e:	4631      	mov	r1, r6
 8007530:	dcf1      	bgt.n	8007516 <__exponent+0x1c>
 8007532:	3130      	adds	r1, #48	@ 0x30
 8007534:	1e94      	subs	r4, r2, #2
 8007536:	f803 1c01 	strb.w	r1, [r3, #-1]
 800753a:	1c41      	adds	r1, r0, #1
 800753c:	4623      	mov	r3, r4
 800753e:	42ab      	cmp	r3, r5
 8007540:	d30a      	bcc.n	8007558 <__exponent+0x5e>
 8007542:	f10d 0309 	add.w	r3, sp, #9
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	42ac      	cmp	r4, r5
 800754a:	bf88      	it	hi
 800754c:	2300      	movhi	r3, #0
 800754e:	3302      	adds	r3, #2
 8007550:	4403      	add	r3, r0
 8007552:	1a18      	subs	r0, r3, r0
 8007554:	b003      	add	sp, #12
 8007556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007558:	f813 6b01 	ldrb.w	r6, [r3], #1
 800755c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007560:	e7ed      	b.n	800753e <__exponent+0x44>
 8007562:	2330      	movs	r3, #48	@ 0x30
 8007564:	3130      	adds	r1, #48	@ 0x30
 8007566:	7083      	strb	r3, [r0, #2]
 8007568:	70c1      	strb	r1, [r0, #3]
 800756a:	1d03      	adds	r3, r0, #4
 800756c:	e7f1      	b.n	8007552 <__exponent+0x58>
	...

08007570 <_printf_float>:
 8007570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	b08d      	sub	sp, #52	@ 0x34
 8007576:	460c      	mov	r4, r1
 8007578:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800757c:	4616      	mov	r6, r2
 800757e:	461f      	mov	r7, r3
 8007580:	4605      	mov	r5, r0
 8007582:	f000 fcef 	bl	8007f64 <_localeconv_r>
 8007586:	6803      	ldr	r3, [r0, #0]
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	4618      	mov	r0, r3
 800758c:	f7f8 fe98 	bl	80002c0 <strlen>
 8007590:	2300      	movs	r3, #0
 8007592:	930a      	str	r3, [sp, #40]	@ 0x28
 8007594:	f8d8 3000 	ldr.w	r3, [r8]
 8007598:	9005      	str	r0, [sp, #20]
 800759a:	3307      	adds	r3, #7
 800759c:	f023 0307 	bic.w	r3, r3, #7
 80075a0:	f103 0208 	add.w	r2, r3, #8
 80075a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80075a8:	f8d4 b000 	ldr.w	fp, [r4]
 80075ac:	f8c8 2000 	str.w	r2, [r8]
 80075b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80075b8:	9307      	str	r3, [sp, #28]
 80075ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80075be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80075c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007838 <_printf_float+0x2c8>)
 80075c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075cc:	f7f9 fad6 	bl	8000b7c <__aeabi_dcmpun>
 80075d0:	bb70      	cbnz	r0, 8007630 <_printf_float+0xc0>
 80075d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075d6:	4b98      	ldr	r3, [pc, #608]	@ (8007838 <_printf_float+0x2c8>)
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075dc:	f7f9 fab0 	bl	8000b40 <__aeabi_dcmple>
 80075e0:	bb30      	cbnz	r0, 8007630 <_printf_float+0xc0>
 80075e2:	2200      	movs	r2, #0
 80075e4:	2300      	movs	r3, #0
 80075e6:	4640      	mov	r0, r8
 80075e8:	4649      	mov	r1, r9
 80075ea:	f7f9 fa9f 	bl	8000b2c <__aeabi_dcmplt>
 80075ee:	b110      	cbz	r0, 80075f6 <_printf_float+0x86>
 80075f0:	232d      	movs	r3, #45	@ 0x2d
 80075f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f6:	4a91      	ldr	r2, [pc, #580]	@ (800783c <_printf_float+0x2cc>)
 80075f8:	4b91      	ldr	r3, [pc, #580]	@ (8007840 <_printf_float+0x2d0>)
 80075fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075fe:	bf94      	ite	ls
 8007600:	4690      	movls	r8, r2
 8007602:	4698      	movhi	r8, r3
 8007604:	2303      	movs	r3, #3
 8007606:	6123      	str	r3, [r4, #16]
 8007608:	f02b 0304 	bic.w	r3, fp, #4
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	f04f 0900 	mov.w	r9, #0
 8007612:	9700      	str	r7, [sp, #0]
 8007614:	4633      	mov	r3, r6
 8007616:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007618:	4621      	mov	r1, r4
 800761a:	4628      	mov	r0, r5
 800761c:	f000 f9d2 	bl	80079c4 <_printf_common>
 8007620:	3001      	adds	r0, #1
 8007622:	f040 808d 	bne.w	8007740 <_printf_float+0x1d0>
 8007626:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800762a:	b00d      	add	sp, #52	@ 0x34
 800762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007630:	4642      	mov	r2, r8
 8007632:	464b      	mov	r3, r9
 8007634:	4640      	mov	r0, r8
 8007636:	4649      	mov	r1, r9
 8007638:	f7f9 faa0 	bl	8000b7c <__aeabi_dcmpun>
 800763c:	b140      	cbz	r0, 8007650 <_printf_float+0xe0>
 800763e:	464b      	mov	r3, r9
 8007640:	2b00      	cmp	r3, #0
 8007642:	bfbc      	itt	lt
 8007644:	232d      	movlt	r3, #45	@ 0x2d
 8007646:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800764a:	4a7e      	ldr	r2, [pc, #504]	@ (8007844 <_printf_float+0x2d4>)
 800764c:	4b7e      	ldr	r3, [pc, #504]	@ (8007848 <_printf_float+0x2d8>)
 800764e:	e7d4      	b.n	80075fa <_printf_float+0x8a>
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007656:	9206      	str	r2, [sp, #24]
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	d13b      	bne.n	80076d4 <_printf_float+0x164>
 800765c:	2306      	movs	r3, #6
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007664:	2300      	movs	r3, #0
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	9303      	str	r3, [sp, #12]
 800766a:	ab0a      	add	r3, sp, #40	@ 0x28
 800766c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007670:	ab09      	add	r3, sp, #36	@ 0x24
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	6861      	ldr	r1, [r4, #4]
 8007676:	ec49 8b10 	vmov	d0, r8, r9
 800767a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800767e:	4628      	mov	r0, r5
 8007680:	f7ff fed6 	bl	8007430 <__cvt>
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007688:	2b47      	cmp	r3, #71	@ 0x47
 800768a:	4680      	mov	r8, r0
 800768c:	d129      	bne.n	80076e2 <_printf_float+0x172>
 800768e:	1cc8      	adds	r0, r1, #3
 8007690:	db02      	blt.n	8007698 <_printf_float+0x128>
 8007692:	6863      	ldr	r3, [r4, #4]
 8007694:	4299      	cmp	r1, r3
 8007696:	dd41      	ble.n	800771c <_printf_float+0x1ac>
 8007698:	f1aa 0a02 	sub.w	sl, sl, #2
 800769c:	fa5f fa8a 	uxtb.w	sl, sl
 80076a0:	3901      	subs	r1, #1
 80076a2:	4652      	mov	r2, sl
 80076a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80076a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80076aa:	f7ff ff26 	bl	80074fa <__exponent>
 80076ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076b0:	1813      	adds	r3, r2, r0
 80076b2:	2a01      	cmp	r2, #1
 80076b4:	4681      	mov	r9, r0
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	dc02      	bgt.n	80076c0 <_printf_float+0x150>
 80076ba:	6822      	ldr	r2, [r4, #0]
 80076bc:	07d2      	lsls	r2, r2, #31
 80076be:	d501      	bpl.n	80076c4 <_printf_float+0x154>
 80076c0:	3301      	adds	r3, #1
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0a2      	beq.n	8007612 <_printf_float+0xa2>
 80076cc:	232d      	movs	r3, #45	@ 0x2d
 80076ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d2:	e79e      	b.n	8007612 <_printf_float+0xa2>
 80076d4:	9a06      	ldr	r2, [sp, #24]
 80076d6:	2a47      	cmp	r2, #71	@ 0x47
 80076d8:	d1c2      	bne.n	8007660 <_printf_float+0xf0>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1c0      	bne.n	8007660 <_printf_float+0xf0>
 80076de:	2301      	movs	r3, #1
 80076e0:	e7bd      	b.n	800765e <_printf_float+0xee>
 80076e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076e6:	d9db      	bls.n	80076a0 <_printf_float+0x130>
 80076e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076ec:	d118      	bne.n	8007720 <_printf_float+0x1b0>
 80076ee:	2900      	cmp	r1, #0
 80076f0:	6863      	ldr	r3, [r4, #4]
 80076f2:	dd0b      	ble.n	800770c <_printf_float+0x19c>
 80076f4:	6121      	str	r1, [r4, #16]
 80076f6:	b913      	cbnz	r3, 80076fe <_printf_float+0x18e>
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	07d0      	lsls	r0, r2, #31
 80076fc:	d502      	bpl.n	8007704 <_printf_float+0x194>
 80076fe:	3301      	adds	r3, #1
 8007700:	440b      	add	r3, r1
 8007702:	6123      	str	r3, [r4, #16]
 8007704:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007706:	f04f 0900 	mov.w	r9, #0
 800770a:	e7db      	b.n	80076c4 <_printf_float+0x154>
 800770c:	b913      	cbnz	r3, 8007714 <_printf_float+0x1a4>
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	07d2      	lsls	r2, r2, #31
 8007712:	d501      	bpl.n	8007718 <_printf_float+0x1a8>
 8007714:	3302      	adds	r3, #2
 8007716:	e7f4      	b.n	8007702 <_printf_float+0x192>
 8007718:	2301      	movs	r3, #1
 800771a:	e7f2      	b.n	8007702 <_printf_float+0x192>
 800771c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007722:	4299      	cmp	r1, r3
 8007724:	db05      	blt.n	8007732 <_printf_float+0x1c2>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	6121      	str	r1, [r4, #16]
 800772a:	07d8      	lsls	r0, r3, #31
 800772c:	d5ea      	bpl.n	8007704 <_printf_float+0x194>
 800772e:	1c4b      	adds	r3, r1, #1
 8007730:	e7e7      	b.n	8007702 <_printf_float+0x192>
 8007732:	2900      	cmp	r1, #0
 8007734:	bfd4      	ite	le
 8007736:	f1c1 0202 	rsble	r2, r1, #2
 800773a:	2201      	movgt	r2, #1
 800773c:	4413      	add	r3, r2
 800773e:	e7e0      	b.n	8007702 <_printf_float+0x192>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	055a      	lsls	r2, r3, #21
 8007744:	d407      	bmi.n	8007756 <_printf_float+0x1e6>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	4642      	mov	r2, r8
 800774a:	4631      	mov	r1, r6
 800774c:	4628      	mov	r0, r5
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	d12b      	bne.n	80077ac <_printf_float+0x23c>
 8007754:	e767      	b.n	8007626 <_printf_float+0xb6>
 8007756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800775a:	f240 80dd 	bls.w	8007918 <_printf_float+0x3a8>
 800775e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	f7f9 f9d7 	bl	8000b18 <__aeabi_dcmpeq>
 800776a:	2800      	cmp	r0, #0
 800776c:	d033      	beq.n	80077d6 <_printf_float+0x266>
 800776e:	4a37      	ldr	r2, [pc, #220]	@ (800784c <_printf_float+0x2dc>)
 8007770:	2301      	movs	r3, #1
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	f43f af54 	beq.w	8007626 <_printf_float+0xb6>
 800777e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007782:	4543      	cmp	r3, r8
 8007784:	db02      	blt.n	800778c <_printf_float+0x21c>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	07d8      	lsls	r0, r3, #31
 800778a:	d50f      	bpl.n	80077ac <_printf_float+0x23c>
 800778c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f af45 	beq.w	8007626 <_printf_float+0xb6>
 800779c:	f04f 0900 	mov.w	r9, #0
 80077a0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80077a4:	f104 0a1a 	add.w	sl, r4, #26
 80077a8:	45c8      	cmp	r8, r9
 80077aa:	dc09      	bgt.n	80077c0 <_printf_float+0x250>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	079b      	lsls	r3, r3, #30
 80077b0:	f100 8103 	bmi.w	80079ba <_printf_float+0x44a>
 80077b4:	68e0      	ldr	r0, [r4, #12]
 80077b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077b8:	4298      	cmp	r0, r3
 80077ba:	bfb8      	it	lt
 80077bc:	4618      	movlt	r0, r3
 80077be:	e734      	b.n	800762a <_printf_float+0xba>
 80077c0:	2301      	movs	r3, #1
 80077c2:	4652      	mov	r2, sl
 80077c4:	4631      	mov	r1, r6
 80077c6:	4628      	mov	r0, r5
 80077c8:	47b8      	blx	r7
 80077ca:	3001      	adds	r0, #1
 80077cc:	f43f af2b 	beq.w	8007626 <_printf_float+0xb6>
 80077d0:	f109 0901 	add.w	r9, r9, #1
 80077d4:	e7e8      	b.n	80077a8 <_printf_float+0x238>
 80077d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dc39      	bgt.n	8007850 <_printf_float+0x2e0>
 80077dc:	4a1b      	ldr	r2, [pc, #108]	@ (800784c <_printf_float+0x2dc>)
 80077de:	2301      	movs	r3, #1
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f af1d 	beq.w	8007626 <_printf_float+0xb6>
 80077ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077f0:	ea59 0303 	orrs.w	r3, r9, r3
 80077f4:	d102      	bne.n	80077fc <_printf_float+0x28c>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	07d9      	lsls	r1, r3, #31
 80077fa:	d5d7      	bpl.n	80077ac <_printf_float+0x23c>
 80077fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f af0d 	beq.w	8007626 <_printf_float+0xb6>
 800780c:	f04f 0a00 	mov.w	sl, #0
 8007810:	f104 0b1a 	add.w	fp, r4, #26
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	425b      	negs	r3, r3
 8007818:	4553      	cmp	r3, sl
 800781a:	dc01      	bgt.n	8007820 <_printf_float+0x2b0>
 800781c:	464b      	mov	r3, r9
 800781e:	e793      	b.n	8007748 <_printf_float+0x1d8>
 8007820:	2301      	movs	r3, #1
 8007822:	465a      	mov	r2, fp
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f aefb 	beq.w	8007626 <_printf_float+0xb6>
 8007830:	f10a 0a01 	add.w	sl, sl, #1
 8007834:	e7ee      	b.n	8007814 <_printf_float+0x2a4>
 8007836:	bf00      	nop
 8007838:	7fefffff 	.word	0x7fefffff
 800783c:	0800a268 	.word	0x0800a268
 8007840:	0800a26c 	.word	0x0800a26c
 8007844:	0800a270 	.word	0x0800a270
 8007848:	0800a274 	.word	0x0800a274
 800784c:	0800a278 	.word	0x0800a278
 8007850:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007852:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007856:	4553      	cmp	r3, sl
 8007858:	bfa8      	it	ge
 800785a:	4653      	movge	r3, sl
 800785c:	2b00      	cmp	r3, #0
 800785e:	4699      	mov	r9, r3
 8007860:	dc36      	bgt.n	80078d0 <_printf_float+0x360>
 8007862:	f04f 0b00 	mov.w	fp, #0
 8007866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800786a:	f104 021a 	add.w	r2, r4, #26
 800786e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007870:	9306      	str	r3, [sp, #24]
 8007872:	eba3 0309 	sub.w	r3, r3, r9
 8007876:	455b      	cmp	r3, fp
 8007878:	dc31      	bgt.n	80078de <_printf_float+0x36e>
 800787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787c:	459a      	cmp	sl, r3
 800787e:	dc3a      	bgt.n	80078f6 <_printf_float+0x386>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d437      	bmi.n	80078f6 <_printf_float+0x386>
 8007886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007888:	ebaa 0903 	sub.w	r9, sl, r3
 800788c:	9b06      	ldr	r3, [sp, #24]
 800788e:	ebaa 0303 	sub.w	r3, sl, r3
 8007892:	4599      	cmp	r9, r3
 8007894:	bfa8      	it	ge
 8007896:	4699      	movge	r9, r3
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	dc33      	bgt.n	8007906 <_printf_float+0x396>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078a6:	f104 0b1a 	add.w	fp, r4, #26
 80078aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ac:	ebaa 0303 	sub.w	r3, sl, r3
 80078b0:	eba3 0309 	sub.w	r3, r3, r9
 80078b4:	4543      	cmp	r3, r8
 80078b6:	f77f af79 	ble.w	80077ac <_printf_float+0x23c>
 80078ba:	2301      	movs	r3, #1
 80078bc:	465a      	mov	r2, fp
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f aeae 	beq.w	8007626 <_printf_float+0xb6>
 80078ca:	f108 0801 	add.w	r8, r8, #1
 80078ce:	e7ec      	b.n	80078aa <_printf_float+0x33a>
 80078d0:	4642      	mov	r2, r8
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	d1c2      	bne.n	8007862 <_printf_float+0x2f2>
 80078dc:	e6a3      	b.n	8007626 <_printf_float+0xb6>
 80078de:	2301      	movs	r3, #1
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	9206      	str	r2, [sp, #24]
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f ae9c 	beq.w	8007626 <_printf_float+0xb6>
 80078ee:	9a06      	ldr	r2, [sp, #24]
 80078f0:	f10b 0b01 	add.w	fp, fp, #1
 80078f4:	e7bb      	b.n	800786e <_printf_float+0x2fe>
 80078f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	d1c0      	bne.n	8007886 <_printf_float+0x316>
 8007904:	e68f      	b.n	8007626 <_printf_float+0xb6>
 8007906:	9a06      	ldr	r2, [sp, #24]
 8007908:	464b      	mov	r3, r9
 800790a:	4442      	add	r2, r8
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	47b8      	blx	r7
 8007912:	3001      	adds	r0, #1
 8007914:	d1c3      	bne.n	800789e <_printf_float+0x32e>
 8007916:	e686      	b.n	8007626 <_printf_float+0xb6>
 8007918:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800791c:	f1ba 0f01 	cmp.w	sl, #1
 8007920:	dc01      	bgt.n	8007926 <_printf_float+0x3b6>
 8007922:	07db      	lsls	r3, r3, #31
 8007924:	d536      	bpl.n	8007994 <_printf_float+0x424>
 8007926:	2301      	movs	r3, #1
 8007928:	4642      	mov	r2, r8
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	f43f ae78 	beq.w	8007626 <_printf_float+0xb6>
 8007936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	f43f ae70 	beq.w	8007626 <_printf_float+0xb6>
 8007946:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800794a:	2200      	movs	r2, #0
 800794c:	2300      	movs	r3, #0
 800794e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007952:	f7f9 f8e1 	bl	8000b18 <__aeabi_dcmpeq>
 8007956:	b9c0      	cbnz	r0, 800798a <_printf_float+0x41a>
 8007958:	4653      	mov	r3, sl
 800795a:	f108 0201 	add.w	r2, r8, #1
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	d10c      	bne.n	8007982 <_printf_float+0x412>
 8007968:	e65d      	b.n	8007626 <_printf_float+0xb6>
 800796a:	2301      	movs	r3, #1
 800796c:	465a      	mov	r2, fp
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae56 	beq.w	8007626 <_printf_float+0xb6>
 800797a:	f108 0801 	add.w	r8, r8, #1
 800797e:	45d0      	cmp	r8, sl
 8007980:	dbf3      	blt.n	800796a <_printf_float+0x3fa>
 8007982:	464b      	mov	r3, r9
 8007984:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007988:	e6df      	b.n	800774a <_printf_float+0x1da>
 800798a:	f04f 0800 	mov.w	r8, #0
 800798e:	f104 0b1a 	add.w	fp, r4, #26
 8007992:	e7f4      	b.n	800797e <_printf_float+0x40e>
 8007994:	2301      	movs	r3, #1
 8007996:	4642      	mov	r2, r8
 8007998:	e7e1      	b.n	800795e <_printf_float+0x3ee>
 800799a:	2301      	movs	r3, #1
 800799c:	464a      	mov	r2, r9
 800799e:	4631      	mov	r1, r6
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b8      	blx	r7
 80079a4:	3001      	adds	r0, #1
 80079a6:	f43f ae3e 	beq.w	8007626 <_printf_float+0xb6>
 80079aa:	f108 0801 	add.w	r8, r8, #1
 80079ae:	68e3      	ldr	r3, [r4, #12]
 80079b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079b2:	1a5b      	subs	r3, r3, r1
 80079b4:	4543      	cmp	r3, r8
 80079b6:	dcf0      	bgt.n	800799a <_printf_float+0x42a>
 80079b8:	e6fc      	b.n	80077b4 <_printf_float+0x244>
 80079ba:	f04f 0800 	mov.w	r8, #0
 80079be:	f104 0919 	add.w	r9, r4, #25
 80079c2:	e7f4      	b.n	80079ae <_printf_float+0x43e>

080079c4 <_printf_common>:
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	4616      	mov	r6, r2
 80079ca:	4698      	mov	r8, r3
 80079cc:	688a      	ldr	r2, [r1, #8]
 80079ce:	690b      	ldr	r3, [r1, #16]
 80079d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079d4:	4293      	cmp	r3, r2
 80079d6:	bfb8      	it	lt
 80079d8:	4613      	movlt	r3, r2
 80079da:	6033      	str	r3, [r6, #0]
 80079dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079e0:	4607      	mov	r7, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	b10a      	cbz	r2, 80079ea <_printf_common+0x26>
 80079e6:	3301      	adds	r3, #1
 80079e8:	6033      	str	r3, [r6, #0]
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	0699      	lsls	r1, r3, #26
 80079ee:	bf42      	ittt	mi
 80079f0:	6833      	ldrmi	r3, [r6, #0]
 80079f2:	3302      	addmi	r3, #2
 80079f4:	6033      	strmi	r3, [r6, #0]
 80079f6:	6825      	ldr	r5, [r4, #0]
 80079f8:	f015 0506 	ands.w	r5, r5, #6
 80079fc:	d106      	bne.n	8007a0c <_printf_common+0x48>
 80079fe:	f104 0a19 	add.w	sl, r4, #25
 8007a02:	68e3      	ldr	r3, [r4, #12]
 8007a04:	6832      	ldr	r2, [r6, #0]
 8007a06:	1a9b      	subs	r3, r3, r2
 8007a08:	42ab      	cmp	r3, r5
 8007a0a:	dc26      	bgt.n	8007a5a <_printf_common+0x96>
 8007a0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a10:	6822      	ldr	r2, [r4, #0]
 8007a12:	3b00      	subs	r3, #0
 8007a14:	bf18      	it	ne
 8007a16:	2301      	movne	r3, #1
 8007a18:	0692      	lsls	r2, r2, #26
 8007a1a:	d42b      	bmi.n	8007a74 <_printf_common+0xb0>
 8007a1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a20:	4641      	mov	r1, r8
 8007a22:	4638      	mov	r0, r7
 8007a24:	47c8      	blx	r9
 8007a26:	3001      	adds	r0, #1
 8007a28:	d01e      	beq.n	8007a68 <_printf_common+0xa4>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	6922      	ldr	r2, [r4, #16]
 8007a2e:	f003 0306 	and.w	r3, r3, #6
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	bf02      	ittt	eq
 8007a36:	68e5      	ldreq	r5, [r4, #12]
 8007a38:	6833      	ldreq	r3, [r6, #0]
 8007a3a:	1aed      	subeq	r5, r5, r3
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	bf0c      	ite	eq
 8007a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a44:	2500      	movne	r5, #0
 8007a46:	4293      	cmp	r3, r2
 8007a48:	bfc4      	itt	gt
 8007a4a:	1a9b      	subgt	r3, r3, r2
 8007a4c:	18ed      	addgt	r5, r5, r3
 8007a4e:	2600      	movs	r6, #0
 8007a50:	341a      	adds	r4, #26
 8007a52:	42b5      	cmp	r5, r6
 8007a54:	d11a      	bne.n	8007a8c <_printf_common+0xc8>
 8007a56:	2000      	movs	r0, #0
 8007a58:	e008      	b.n	8007a6c <_printf_common+0xa8>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4652      	mov	r2, sl
 8007a5e:	4641      	mov	r1, r8
 8007a60:	4638      	mov	r0, r7
 8007a62:	47c8      	blx	r9
 8007a64:	3001      	adds	r0, #1
 8007a66:	d103      	bne.n	8007a70 <_printf_common+0xac>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a70:	3501      	adds	r5, #1
 8007a72:	e7c6      	b.n	8007a02 <_printf_common+0x3e>
 8007a74:	18e1      	adds	r1, r4, r3
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	2030      	movs	r0, #48	@ 0x30
 8007a7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a7e:	4422      	add	r2, r4
 8007a80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a88:	3302      	adds	r3, #2
 8007a8a:	e7c7      	b.n	8007a1c <_printf_common+0x58>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4622      	mov	r2, r4
 8007a90:	4641      	mov	r1, r8
 8007a92:	4638      	mov	r0, r7
 8007a94:	47c8      	blx	r9
 8007a96:	3001      	adds	r0, #1
 8007a98:	d0e6      	beq.n	8007a68 <_printf_common+0xa4>
 8007a9a:	3601      	adds	r6, #1
 8007a9c:	e7d9      	b.n	8007a52 <_printf_common+0x8e>
	...

08007aa0 <_printf_i>:
 8007aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa4:	7e0f      	ldrb	r7, [r1, #24]
 8007aa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aa8:	2f78      	cmp	r7, #120	@ 0x78
 8007aaa:	4691      	mov	r9, r2
 8007aac:	4680      	mov	r8, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	469a      	mov	sl, r3
 8007ab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ab6:	d807      	bhi.n	8007ac8 <_printf_i+0x28>
 8007ab8:	2f62      	cmp	r7, #98	@ 0x62
 8007aba:	d80a      	bhi.n	8007ad2 <_printf_i+0x32>
 8007abc:	2f00      	cmp	r7, #0
 8007abe:	f000 80d2 	beq.w	8007c66 <_printf_i+0x1c6>
 8007ac2:	2f58      	cmp	r7, #88	@ 0x58
 8007ac4:	f000 80b9 	beq.w	8007c3a <_printf_i+0x19a>
 8007ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007acc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ad0:	e03a      	b.n	8007b48 <_printf_i+0xa8>
 8007ad2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ad6:	2b15      	cmp	r3, #21
 8007ad8:	d8f6      	bhi.n	8007ac8 <_printf_i+0x28>
 8007ada:	a101      	add	r1, pc, #4	@ (adr r1, 8007ae0 <_printf_i+0x40>)
 8007adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ae0:	08007b39 	.word	0x08007b39
 8007ae4:	08007b4d 	.word	0x08007b4d
 8007ae8:	08007ac9 	.word	0x08007ac9
 8007aec:	08007ac9 	.word	0x08007ac9
 8007af0:	08007ac9 	.word	0x08007ac9
 8007af4:	08007ac9 	.word	0x08007ac9
 8007af8:	08007b4d 	.word	0x08007b4d
 8007afc:	08007ac9 	.word	0x08007ac9
 8007b00:	08007ac9 	.word	0x08007ac9
 8007b04:	08007ac9 	.word	0x08007ac9
 8007b08:	08007ac9 	.word	0x08007ac9
 8007b0c:	08007c4d 	.word	0x08007c4d
 8007b10:	08007b77 	.word	0x08007b77
 8007b14:	08007c07 	.word	0x08007c07
 8007b18:	08007ac9 	.word	0x08007ac9
 8007b1c:	08007ac9 	.word	0x08007ac9
 8007b20:	08007c6f 	.word	0x08007c6f
 8007b24:	08007ac9 	.word	0x08007ac9
 8007b28:	08007b77 	.word	0x08007b77
 8007b2c:	08007ac9 	.word	0x08007ac9
 8007b30:	08007ac9 	.word	0x08007ac9
 8007b34:	08007c0f 	.word	0x08007c0f
 8007b38:	6833      	ldr	r3, [r6, #0]
 8007b3a:	1d1a      	adds	r2, r3, #4
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6032      	str	r2, [r6, #0]
 8007b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e09d      	b.n	8007c88 <_printf_i+0x1e8>
 8007b4c:	6833      	ldr	r3, [r6, #0]
 8007b4e:	6820      	ldr	r0, [r4, #0]
 8007b50:	1d19      	adds	r1, r3, #4
 8007b52:	6031      	str	r1, [r6, #0]
 8007b54:	0606      	lsls	r6, r0, #24
 8007b56:	d501      	bpl.n	8007b5c <_printf_i+0xbc>
 8007b58:	681d      	ldr	r5, [r3, #0]
 8007b5a:	e003      	b.n	8007b64 <_printf_i+0xc4>
 8007b5c:	0645      	lsls	r5, r0, #25
 8007b5e:	d5fb      	bpl.n	8007b58 <_printf_i+0xb8>
 8007b60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	da03      	bge.n	8007b70 <_printf_i+0xd0>
 8007b68:	232d      	movs	r3, #45	@ 0x2d
 8007b6a:	426d      	negs	r5, r5
 8007b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b70:	4859      	ldr	r0, [pc, #356]	@ (8007cd8 <_printf_i+0x238>)
 8007b72:	230a      	movs	r3, #10
 8007b74:	e011      	b.n	8007b9a <_printf_i+0xfa>
 8007b76:	6821      	ldr	r1, [r4, #0]
 8007b78:	6833      	ldr	r3, [r6, #0]
 8007b7a:	0608      	lsls	r0, r1, #24
 8007b7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b80:	d402      	bmi.n	8007b88 <_printf_i+0xe8>
 8007b82:	0649      	lsls	r1, r1, #25
 8007b84:	bf48      	it	mi
 8007b86:	b2ad      	uxthmi	r5, r5
 8007b88:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b8a:	4853      	ldr	r0, [pc, #332]	@ (8007cd8 <_printf_i+0x238>)
 8007b8c:	6033      	str	r3, [r6, #0]
 8007b8e:	bf14      	ite	ne
 8007b90:	230a      	movne	r3, #10
 8007b92:	2308      	moveq	r3, #8
 8007b94:	2100      	movs	r1, #0
 8007b96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b9a:	6866      	ldr	r6, [r4, #4]
 8007b9c:	60a6      	str	r6, [r4, #8]
 8007b9e:	2e00      	cmp	r6, #0
 8007ba0:	bfa2      	ittt	ge
 8007ba2:	6821      	ldrge	r1, [r4, #0]
 8007ba4:	f021 0104 	bicge.w	r1, r1, #4
 8007ba8:	6021      	strge	r1, [r4, #0]
 8007baa:	b90d      	cbnz	r5, 8007bb0 <_printf_i+0x110>
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	d04b      	beq.n	8007c48 <_printf_i+0x1a8>
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bb6:	fb03 5711 	mls	r7, r3, r1, r5
 8007bba:	5dc7      	ldrb	r7, [r0, r7]
 8007bbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bc0:	462f      	mov	r7, r5
 8007bc2:	42bb      	cmp	r3, r7
 8007bc4:	460d      	mov	r5, r1
 8007bc6:	d9f4      	bls.n	8007bb2 <_printf_i+0x112>
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d10b      	bne.n	8007be4 <_printf_i+0x144>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	07df      	lsls	r7, r3, #31
 8007bd0:	d508      	bpl.n	8007be4 <_printf_i+0x144>
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	6861      	ldr	r1, [r4, #4]
 8007bd6:	4299      	cmp	r1, r3
 8007bd8:	bfde      	ittt	le
 8007bda:	2330      	movle	r3, #48	@ 0x30
 8007bdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007be0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007be4:	1b92      	subs	r2, r2, r6
 8007be6:	6122      	str	r2, [r4, #16]
 8007be8:	f8cd a000 	str.w	sl, [sp]
 8007bec:	464b      	mov	r3, r9
 8007bee:	aa03      	add	r2, sp, #12
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	f7ff fee6 	bl	80079c4 <_printf_common>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d14a      	bne.n	8007c92 <_printf_i+0x1f2>
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c00:	b004      	add	sp, #16
 8007c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	f043 0320 	orr.w	r3, r3, #32
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	4833      	ldr	r0, [pc, #204]	@ (8007cdc <_printf_i+0x23c>)
 8007c10:	2778      	movs	r7, #120	@ 0x78
 8007c12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	6831      	ldr	r1, [r6, #0]
 8007c1a:	061f      	lsls	r7, r3, #24
 8007c1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c20:	d402      	bmi.n	8007c28 <_printf_i+0x188>
 8007c22:	065f      	lsls	r7, r3, #25
 8007c24:	bf48      	it	mi
 8007c26:	b2ad      	uxthmi	r5, r5
 8007c28:	6031      	str	r1, [r6, #0]
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	bf44      	itt	mi
 8007c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c32:	6023      	strmi	r3, [r4, #0]
 8007c34:	b11d      	cbz	r5, 8007c3e <_printf_i+0x19e>
 8007c36:	2310      	movs	r3, #16
 8007c38:	e7ac      	b.n	8007b94 <_printf_i+0xf4>
 8007c3a:	4827      	ldr	r0, [pc, #156]	@ (8007cd8 <_printf_i+0x238>)
 8007c3c:	e7e9      	b.n	8007c12 <_printf_i+0x172>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	f023 0320 	bic.w	r3, r3, #32
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	e7f6      	b.n	8007c36 <_printf_i+0x196>
 8007c48:	4616      	mov	r6, r2
 8007c4a:	e7bd      	b.n	8007bc8 <_printf_i+0x128>
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	6825      	ldr	r5, [r4, #0]
 8007c50:	6961      	ldr	r1, [r4, #20]
 8007c52:	1d18      	adds	r0, r3, #4
 8007c54:	6030      	str	r0, [r6, #0]
 8007c56:	062e      	lsls	r6, r5, #24
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	d501      	bpl.n	8007c60 <_printf_i+0x1c0>
 8007c5c:	6019      	str	r1, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <_printf_i+0x1c6>
 8007c60:	0668      	lsls	r0, r5, #25
 8007c62:	d5fb      	bpl.n	8007c5c <_printf_i+0x1bc>
 8007c64:	8019      	strh	r1, [r3, #0]
 8007c66:	2300      	movs	r3, #0
 8007c68:	6123      	str	r3, [r4, #16]
 8007c6a:	4616      	mov	r6, r2
 8007c6c:	e7bc      	b.n	8007be8 <_printf_i+0x148>
 8007c6e:	6833      	ldr	r3, [r6, #0]
 8007c70:	1d1a      	adds	r2, r3, #4
 8007c72:	6032      	str	r2, [r6, #0]
 8007c74:	681e      	ldr	r6, [r3, #0]
 8007c76:	6862      	ldr	r2, [r4, #4]
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7f8 fad0 	bl	8000220 <memchr>
 8007c80:	b108      	cbz	r0, 8007c86 <_printf_i+0x1e6>
 8007c82:	1b80      	subs	r0, r0, r6
 8007c84:	6060      	str	r0, [r4, #4]
 8007c86:	6863      	ldr	r3, [r4, #4]
 8007c88:	6123      	str	r3, [r4, #16]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c90:	e7aa      	b.n	8007be8 <_printf_i+0x148>
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	4632      	mov	r2, r6
 8007c96:	4649      	mov	r1, r9
 8007c98:	4640      	mov	r0, r8
 8007c9a:	47d0      	blx	sl
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d0ad      	beq.n	8007bfc <_printf_i+0x15c>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	079b      	lsls	r3, r3, #30
 8007ca4:	d413      	bmi.n	8007cce <_printf_i+0x22e>
 8007ca6:	68e0      	ldr	r0, [r4, #12]
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	4298      	cmp	r0, r3
 8007cac:	bfb8      	it	lt
 8007cae:	4618      	movlt	r0, r3
 8007cb0:	e7a6      	b.n	8007c00 <_printf_i+0x160>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4640      	mov	r0, r8
 8007cba:	47d0      	blx	sl
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	d09d      	beq.n	8007bfc <_printf_i+0x15c>
 8007cc0:	3501      	adds	r5, #1
 8007cc2:	68e3      	ldr	r3, [r4, #12]
 8007cc4:	9903      	ldr	r1, [sp, #12]
 8007cc6:	1a5b      	subs	r3, r3, r1
 8007cc8:	42ab      	cmp	r3, r5
 8007cca:	dcf2      	bgt.n	8007cb2 <_printf_i+0x212>
 8007ccc:	e7eb      	b.n	8007ca6 <_printf_i+0x206>
 8007cce:	2500      	movs	r5, #0
 8007cd0:	f104 0619 	add.w	r6, r4, #25
 8007cd4:	e7f5      	b.n	8007cc2 <_printf_i+0x222>
 8007cd6:	bf00      	nop
 8007cd8:	0800a27a 	.word	0x0800a27a
 8007cdc:	0800a28b 	.word	0x0800a28b

08007ce0 <std>:
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8007cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cee:	6083      	str	r3, [r0, #8]
 8007cf0:	8181      	strh	r1, [r0, #12]
 8007cf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cf4:	81c2      	strh	r2, [r0, #14]
 8007cf6:	6183      	str	r3, [r0, #24]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	305c      	adds	r0, #92	@ 0x5c
 8007cfe:	f000 f928 	bl	8007f52 <memset>
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x58>)
 8007d04:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <std+0x5c>)
 8007d08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <std+0x60>)
 8007d0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <std+0x64>)
 8007d10:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <std+0x68>)
 8007d14:	6224      	str	r4, [r4, #32]
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d006      	beq.n	8007d28 <std+0x48>
 8007d1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d1e:	4294      	cmp	r4, r2
 8007d20:	d002      	beq.n	8007d28 <std+0x48>
 8007d22:	33d0      	adds	r3, #208	@ 0xd0
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d105      	bne.n	8007d34 <std+0x54>
 8007d28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d30:	f000 b98c 	b.w	800804c <__retarget_lock_init_recursive>
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	bf00      	nop
 8007d38:	08007ecd 	.word	0x08007ecd
 8007d3c:	08007eef 	.word	0x08007eef
 8007d40:	08007f27 	.word	0x08007f27
 8007d44:	08007f4b 	.word	0x08007f4b
 8007d48:	200005c4 	.word	0x200005c4

08007d4c <stdio_exit_handler>:
 8007d4c:	4a02      	ldr	r2, [pc, #8]	@ (8007d58 <stdio_exit_handler+0xc>)
 8007d4e:	4903      	ldr	r1, [pc, #12]	@ (8007d5c <stdio_exit_handler+0x10>)
 8007d50:	4803      	ldr	r0, [pc, #12]	@ (8007d60 <stdio_exit_handler+0x14>)
 8007d52:	f000 b869 	b.w	8007e28 <_fwalk_sglue>
 8007d56:	bf00      	nop
 8007d58:	20000024 	.word	0x20000024
 8007d5c:	080099ad 	.word	0x080099ad
 8007d60:	20000034 	.word	0x20000034

08007d64 <cleanup_stdio>:
 8007d64:	6841      	ldr	r1, [r0, #4]
 8007d66:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <cleanup_stdio+0x34>)
 8007d68:	4299      	cmp	r1, r3
 8007d6a:	b510      	push	{r4, lr}
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	d001      	beq.n	8007d74 <cleanup_stdio+0x10>
 8007d70:	f001 fe1c 	bl	80099ac <_fflush_r>
 8007d74:	68a1      	ldr	r1, [r4, #8]
 8007d76:	4b09      	ldr	r3, [pc, #36]	@ (8007d9c <cleanup_stdio+0x38>)
 8007d78:	4299      	cmp	r1, r3
 8007d7a:	d002      	beq.n	8007d82 <cleanup_stdio+0x1e>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f001 fe15 	bl	80099ac <_fflush_r>
 8007d82:	68e1      	ldr	r1, [r4, #12]
 8007d84:	4b06      	ldr	r3, [pc, #24]	@ (8007da0 <cleanup_stdio+0x3c>)
 8007d86:	4299      	cmp	r1, r3
 8007d88:	d004      	beq.n	8007d94 <cleanup_stdio+0x30>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d90:	f001 be0c 	b.w	80099ac <_fflush_r>
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	bf00      	nop
 8007d98:	200005c4 	.word	0x200005c4
 8007d9c:	2000062c 	.word	0x2000062c
 8007da0:	20000694 	.word	0x20000694

08007da4 <global_stdio_init.part.0>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <global_stdio_init.part.0+0x30>)
 8007da8:	4c0b      	ldr	r4, [pc, #44]	@ (8007dd8 <global_stdio_init.part.0+0x34>)
 8007daa:	4a0c      	ldr	r2, [pc, #48]	@ (8007ddc <global_stdio_init.part.0+0x38>)
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	4620      	mov	r0, r4
 8007db0:	2200      	movs	r2, #0
 8007db2:	2104      	movs	r1, #4
 8007db4:	f7ff ff94 	bl	8007ce0 <std>
 8007db8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	2109      	movs	r1, #9
 8007dc0:	f7ff ff8e 	bl	8007ce0 <std>
 8007dc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dc8:	2202      	movs	r2, #2
 8007dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dce:	2112      	movs	r1, #18
 8007dd0:	f7ff bf86 	b.w	8007ce0 <std>
 8007dd4:	200006fc 	.word	0x200006fc
 8007dd8:	200005c4 	.word	0x200005c4
 8007ddc:	08007d4d 	.word	0x08007d4d

08007de0 <__sfp_lock_acquire>:
 8007de0:	4801      	ldr	r0, [pc, #4]	@ (8007de8 <__sfp_lock_acquire+0x8>)
 8007de2:	f000 b934 	b.w	800804e <__retarget_lock_acquire_recursive>
 8007de6:	bf00      	nop
 8007de8:	20000705 	.word	0x20000705

08007dec <__sfp_lock_release>:
 8007dec:	4801      	ldr	r0, [pc, #4]	@ (8007df4 <__sfp_lock_release+0x8>)
 8007dee:	f000 b92f 	b.w	8008050 <__retarget_lock_release_recursive>
 8007df2:	bf00      	nop
 8007df4:	20000705 	.word	0x20000705

08007df8 <__sinit>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	f7ff fff0 	bl	8007de0 <__sfp_lock_acquire>
 8007e00:	6a23      	ldr	r3, [r4, #32]
 8007e02:	b11b      	cbz	r3, 8007e0c <__sinit+0x14>
 8007e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e08:	f7ff bff0 	b.w	8007dec <__sfp_lock_release>
 8007e0c:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <__sinit+0x28>)
 8007e0e:	6223      	str	r3, [r4, #32]
 8007e10:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <__sinit+0x2c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1f5      	bne.n	8007e04 <__sinit+0xc>
 8007e18:	f7ff ffc4 	bl	8007da4 <global_stdio_init.part.0>
 8007e1c:	e7f2      	b.n	8007e04 <__sinit+0xc>
 8007e1e:	bf00      	nop
 8007e20:	08007d65 	.word	0x08007d65
 8007e24:	200006fc 	.word	0x200006fc

08007e28 <_fwalk_sglue>:
 8007e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	4688      	mov	r8, r1
 8007e30:	4614      	mov	r4, r2
 8007e32:	2600      	movs	r6, #0
 8007e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e38:	f1b9 0901 	subs.w	r9, r9, #1
 8007e3c:	d505      	bpl.n	8007e4a <_fwalk_sglue+0x22>
 8007e3e:	6824      	ldr	r4, [r4, #0]
 8007e40:	2c00      	cmp	r4, #0
 8007e42:	d1f7      	bne.n	8007e34 <_fwalk_sglue+0xc>
 8007e44:	4630      	mov	r0, r6
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d907      	bls.n	8007e60 <_fwalk_sglue+0x38>
 8007e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e54:	3301      	adds	r3, #1
 8007e56:	d003      	beq.n	8007e60 <_fwalk_sglue+0x38>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	47c0      	blx	r8
 8007e5e:	4306      	orrs	r6, r0
 8007e60:	3568      	adds	r5, #104	@ 0x68
 8007e62:	e7e9      	b.n	8007e38 <_fwalk_sglue+0x10>

08007e64 <sniprintf>:
 8007e64:	b40c      	push	{r2, r3}
 8007e66:	b530      	push	{r4, r5, lr}
 8007e68:	4b17      	ldr	r3, [pc, #92]	@ (8007ec8 <sniprintf+0x64>)
 8007e6a:	1e0c      	subs	r4, r1, #0
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	b09d      	sub	sp, #116	@ 0x74
 8007e70:	da08      	bge.n	8007e84 <sniprintf+0x20>
 8007e72:	238b      	movs	r3, #139	@ 0x8b
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e7a:	b01d      	add	sp, #116	@ 0x74
 8007e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e80:	b002      	add	sp, #8
 8007e82:	4770      	bx	lr
 8007e84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e8c:	bf14      	ite	ne
 8007e8e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007e92:	4623      	moveq	r3, r4
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007e9c:	9002      	str	r0, [sp, #8]
 8007e9e:	9006      	str	r0, [sp, #24]
 8007ea0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ea4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ea6:	ab21      	add	r3, sp, #132	@ 0x84
 8007ea8:	a902      	add	r1, sp, #8
 8007eaa:	4628      	mov	r0, r5
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	f001 fbfd 	bl	80096ac <_svfiprintf_r>
 8007eb2:	1c43      	adds	r3, r0, #1
 8007eb4:	bfbc      	itt	lt
 8007eb6:	238b      	movlt	r3, #139	@ 0x8b
 8007eb8:	602b      	strlt	r3, [r5, #0]
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	d0dd      	beq.n	8007e7a <sniprintf+0x16>
 8007ebe:	9b02      	ldr	r3, [sp, #8]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	e7d9      	b.n	8007e7a <sniprintf+0x16>
 8007ec6:	bf00      	nop
 8007ec8:	20000030 	.word	0x20000030

08007ecc <__sread>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	460c      	mov	r4, r1
 8007ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed4:	f000 f86c 	bl	8007fb0 <_read_r>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	bfab      	itete	ge
 8007edc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ede:	89a3      	ldrhlt	r3, [r4, #12]
 8007ee0:	181b      	addge	r3, r3, r0
 8007ee2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ee6:	bfac      	ite	ge
 8007ee8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007eea:	81a3      	strhlt	r3, [r4, #12]
 8007eec:	bd10      	pop	{r4, pc}

08007eee <__swrite>:
 8007eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	898b      	ldrh	r3, [r1, #12]
 8007ef6:	05db      	lsls	r3, r3, #23
 8007ef8:	4605      	mov	r5, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	4616      	mov	r6, r2
 8007efe:	d505      	bpl.n	8007f0c <__swrite+0x1e>
 8007f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f04:	2302      	movs	r3, #2
 8007f06:	2200      	movs	r2, #0
 8007f08:	f000 f840 	bl	8007f8c <_lseek_r>
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f16:	81a3      	strh	r3, [r4, #12]
 8007f18:	4632      	mov	r2, r6
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f22:	f000 b857 	b.w	8007fd4 <_write_r>

08007f26 <__sseek>:
 8007f26:	b510      	push	{r4, lr}
 8007f28:	460c      	mov	r4, r1
 8007f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2e:	f000 f82d 	bl	8007f8c <_lseek_r>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	89a3      	ldrh	r3, [r4, #12]
 8007f36:	bf15      	itete	ne
 8007f38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f42:	81a3      	strheq	r3, [r4, #12]
 8007f44:	bf18      	it	ne
 8007f46:	81a3      	strhne	r3, [r4, #12]
 8007f48:	bd10      	pop	{r4, pc}

08007f4a <__sclose>:
 8007f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4e:	f000 b80d 	b.w	8007f6c <_close_r>

08007f52 <memset>:
 8007f52:	4402      	add	r2, r0
 8007f54:	4603      	mov	r3, r0
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d100      	bne.n	8007f5c <memset+0xa>
 8007f5a:	4770      	bx	lr
 8007f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f60:	e7f9      	b.n	8007f56 <memset+0x4>
	...

08007f64 <_localeconv_r>:
 8007f64:	4800      	ldr	r0, [pc, #0]	@ (8007f68 <_localeconv_r+0x4>)
 8007f66:	4770      	bx	lr
 8007f68:	20000170 	.word	0x20000170

08007f6c <_close_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d06      	ldr	r5, [pc, #24]	@ (8007f88 <_close_r+0x1c>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	602b      	str	r3, [r5, #0]
 8007f78:	f7fa fe75 	bl	8002c66 <_close>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d102      	bne.n	8007f86 <_close_r+0x1a>
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	b103      	cbz	r3, 8007f86 <_close_r+0x1a>
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	20000700 	.word	0x20000700

08007f8c <_lseek_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d07      	ldr	r5, [pc, #28]	@ (8007fac <_lseek_r+0x20>)
 8007f90:	4604      	mov	r4, r0
 8007f92:	4608      	mov	r0, r1
 8007f94:	4611      	mov	r1, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	602a      	str	r2, [r5, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f7fa fe8a 	bl	8002cb4 <_lseek>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_lseek_r+0x1e>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_lseek_r+0x1e>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	20000700 	.word	0x20000700

08007fb0 <_read_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d07      	ldr	r5, [pc, #28]	@ (8007fd0 <_read_r+0x20>)
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	4611      	mov	r1, r2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	602a      	str	r2, [r5, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f7fa fe18 	bl	8002bf4 <_read>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_read_r+0x1e>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_read_r+0x1e>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	20000700 	.word	0x20000700

08007fd4 <_write_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d07      	ldr	r5, [pc, #28]	@ (8007ff4 <_write_r+0x20>)
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4608      	mov	r0, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	602a      	str	r2, [r5, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f7fa fe23 	bl	8002c2e <_write>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_write_r+0x1e>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_write_r+0x1e>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000700 	.word	0x20000700

08007ff8 <__errno>:
 8007ff8:	4b01      	ldr	r3, [pc, #4]	@ (8008000 <__errno+0x8>)
 8007ffa:	6818      	ldr	r0, [r3, #0]
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000030 	.word	0x20000030

08008004 <__libc_init_array>:
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	4d0d      	ldr	r5, [pc, #52]	@ (800803c <__libc_init_array+0x38>)
 8008008:	4c0d      	ldr	r4, [pc, #52]	@ (8008040 <__libc_init_array+0x3c>)
 800800a:	1b64      	subs	r4, r4, r5
 800800c:	10a4      	asrs	r4, r4, #2
 800800e:	2600      	movs	r6, #0
 8008010:	42a6      	cmp	r6, r4
 8008012:	d109      	bne.n	8008028 <__libc_init_array+0x24>
 8008014:	4d0b      	ldr	r5, [pc, #44]	@ (8008044 <__libc_init_array+0x40>)
 8008016:	4c0c      	ldr	r4, [pc, #48]	@ (8008048 <__libc_init_array+0x44>)
 8008018:	f002 f8e4 	bl	800a1e4 <_init>
 800801c:	1b64      	subs	r4, r4, r5
 800801e:	10a4      	asrs	r4, r4, #2
 8008020:	2600      	movs	r6, #0
 8008022:	42a6      	cmp	r6, r4
 8008024:	d105      	bne.n	8008032 <__libc_init_array+0x2e>
 8008026:	bd70      	pop	{r4, r5, r6, pc}
 8008028:	f855 3b04 	ldr.w	r3, [r5], #4
 800802c:	4798      	blx	r3
 800802e:	3601      	adds	r6, #1
 8008030:	e7ee      	b.n	8008010 <__libc_init_array+0xc>
 8008032:	f855 3b04 	ldr.w	r3, [r5], #4
 8008036:	4798      	blx	r3
 8008038:	3601      	adds	r6, #1
 800803a:	e7f2      	b.n	8008022 <__libc_init_array+0x1e>
 800803c:	0800a5e0 	.word	0x0800a5e0
 8008040:	0800a5e0 	.word	0x0800a5e0
 8008044:	0800a5e0 	.word	0x0800a5e0
 8008048:	0800a5e4 	.word	0x0800a5e4

0800804c <__retarget_lock_init_recursive>:
 800804c:	4770      	bx	lr

0800804e <__retarget_lock_acquire_recursive>:
 800804e:	4770      	bx	lr

08008050 <__retarget_lock_release_recursive>:
 8008050:	4770      	bx	lr

08008052 <quorem>:
 8008052:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008056:	6903      	ldr	r3, [r0, #16]
 8008058:	690c      	ldr	r4, [r1, #16]
 800805a:	42a3      	cmp	r3, r4
 800805c:	4607      	mov	r7, r0
 800805e:	db7e      	blt.n	800815e <quorem+0x10c>
 8008060:	3c01      	subs	r4, #1
 8008062:	f101 0814 	add.w	r8, r1, #20
 8008066:	00a3      	lsls	r3, r4, #2
 8008068:	f100 0514 	add.w	r5, r0, #20
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800807c:	3301      	adds	r3, #1
 800807e:	429a      	cmp	r2, r3
 8008080:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008084:	fbb2 f6f3 	udiv	r6, r2, r3
 8008088:	d32e      	bcc.n	80080e8 <quorem+0x96>
 800808a:	f04f 0a00 	mov.w	sl, #0
 800808e:	46c4      	mov	ip, r8
 8008090:	46ae      	mov	lr, r5
 8008092:	46d3      	mov	fp, sl
 8008094:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008098:	b298      	uxth	r0, r3
 800809a:	fb06 a000 	mla	r0, r6, r0, sl
 800809e:	0c02      	lsrs	r2, r0, #16
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	fb06 2303 	mla	r3, r6, r3, r2
 80080a6:	f8de 2000 	ldr.w	r2, [lr]
 80080aa:	b280      	uxth	r0, r0
 80080ac:	b292      	uxth	r2, r2
 80080ae:	1a12      	subs	r2, r2, r0
 80080b0:	445a      	add	r2, fp
 80080b2:	f8de 0000 	ldr.w	r0, [lr]
 80080b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080c4:	b292      	uxth	r2, r2
 80080c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080ca:	45e1      	cmp	r9, ip
 80080cc:	f84e 2b04 	str.w	r2, [lr], #4
 80080d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80080d4:	d2de      	bcs.n	8008094 <quorem+0x42>
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	58eb      	ldr	r3, [r5, r3]
 80080da:	b92b      	cbnz	r3, 80080e8 <quorem+0x96>
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	3b04      	subs	r3, #4
 80080e0:	429d      	cmp	r5, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	d32f      	bcc.n	8008146 <quorem+0xf4>
 80080e6:	613c      	str	r4, [r7, #16]
 80080e8:	4638      	mov	r0, r7
 80080ea:	f001 f97b 	bl	80093e4 <__mcmp>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	db25      	blt.n	800813e <quorem+0xec>
 80080f2:	4629      	mov	r1, r5
 80080f4:	2000      	movs	r0, #0
 80080f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80080fa:	f8d1 c000 	ldr.w	ip, [r1]
 80080fe:	fa1f fe82 	uxth.w	lr, r2
 8008102:	fa1f f38c 	uxth.w	r3, ip
 8008106:	eba3 030e 	sub.w	r3, r3, lr
 800810a:	4403      	add	r3, r0
 800810c:	0c12      	lsrs	r2, r2, #16
 800810e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008112:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008116:	b29b      	uxth	r3, r3
 8008118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800811c:	45c1      	cmp	r9, r8
 800811e:	f841 3b04 	str.w	r3, [r1], #4
 8008122:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008126:	d2e6      	bcs.n	80080f6 <quorem+0xa4>
 8008128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800812c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008130:	b922      	cbnz	r2, 800813c <quorem+0xea>
 8008132:	3b04      	subs	r3, #4
 8008134:	429d      	cmp	r5, r3
 8008136:	461a      	mov	r2, r3
 8008138:	d30b      	bcc.n	8008152 <quorem+0x100>
 800813a:	613c      	str	r4, [r7, #16]
 800813c:	3601      	adds	r6, #1
 800813e:	4630      	mov	r0, r6
 8008140:	b003      	add	sp, #12
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	3b04      	subs	r3, #4
 800814a:	2a00      	cmp	r2, #0
 800814c:	d1cb      	bne.n	80080e6 <quorem+0x94>
 800814e:	3c01      	subs	r4, #1
 8008150:	e7c6      	b.n	80080e0 <quorem+0x8e>
 8008152:	6812      	ldr	r2, [r2, #0]
 8008154:	3b04      	subs	r3, #4
 8008156:	2a00      	cmp	r2, #0
 8008158:	d1ef      	bne.n	800813a <quorem+0xe8>
 800815a:	3c01      	subs	r4, #1
 800815c:	e7ea      	b.n	8008134 <quorem+0xe2>
 800815e:	2000      	movs	r0, #0
 8008160:	e7ee      	b.n	8008140 <quorem+0xee>
 8008162:	0000      	movs	r0, r0
 8008164:	0000      	movs	r0, r0
	...

08008168 <_dtoa_r>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	69c7      	ldr	r7, [r0, #28]
 800816e:	b099      	sub	sp, #100	@ 0x64
 8008170:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008174:	ec55 4b10 	vmov	r4, r5, d0
 8008178:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800817a:	9109      	str	r1, [sp, #36]	@ 0x24
 800817c:	4683      	mov	fp, r0
 800817e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008180:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008182:	b97f      	cbnz	r7, 80081a4 <_dtoa_r+0x3c>
 8008184:	2010      	movs	r0, #16
 8008186:	f000 fdfd 	bl	8008d84 <malloc>
 800818a:	4602      	mov	r2, r0
 800818c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008190:	b920      	cbnz	r0, 800819c <_dtoa_r+0x34>
 8008192:	4ba7      	ldr	r3, [pc, #668]	@ (8008430 <_dtoa_r+0x2c8>)
 8008194:	21ef      	movs	r1, #239	@ 0xef
 8008196:	48a7      	ldr	r0, [pc, #668]	@ (8008434 <_dtoa_r+0x2cc>)
 8008198:	f001 fc68 	bl	8009a6c <__assert_func>
 800819c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081a0:	6007      	str	r7, [r0, #0]
 80081a2:	60c7      	str	r7, [r0, #12]
 80081a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081a8:	6819      	ldr	r1, [r3, #0]
 80081aa:	b159      	cbz	r1, 80081c4 <_dtoa_r+0x5c>
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	604a      	str	r2, [r1, #4]
 80081b0:	2301      	movs	r3, #1
 80081b2:	4093      	lsls	r3, r2
 80081b4:	608b      	str	r3, [r1, #8]
 80081b6:	4658      	mov	r0, fp
 80081b8:	f000 feda 	bl	8008f70 <_Bfree>
 80081bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	1e2b      	subs	r3, r5, #0
 80081c6:	bfb9      	ittee	lt
 80081c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081cc:	9303      	strlt	r3, [sp, #12]
 80081ce:	2300      	movge	r3, #0
 80081d0:	6033      	strge	r3, [r6, #0]
 80081d2:	9f03      	ldr	r7, [sp, #12]
 80081d4:	4b98      	ldr	r3, [pc, #608]	@ (8008438 <_dtoa_r+0x2d0>)
 80081d6:	bfbc      	itt	lt
 80081d8:	2201      	movlt	r2, #1
 80081da:	6032      	strlt	r2, [r6, #0]
 80081dc:	43bb      	bics	r3, r7
 80081de:	d112      	bne.n	8008206 <_dtoa_r+0x9e>
 80081e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80081e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081ec:	4323      	orrs	r3, r4
 80081ee:	f000 854d 	beq.w	8008c8c <_dtoa_r+0xb24>
 80081f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800844c <_dtoa_r+0x2e4>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 854f 	beq.w	8008c9c <_dtoa_r+0xb34>
 80081fe:	f10a 0303 	add.w	r3, sl, #3
 8008202:	f000 bd49 	b.w	8008c98 <_dtoa_r+0xb30>
 8008206:	ed9d 7b02 	vldr	d7, [sp, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	ec51 0b17 	vmov	r0, r1, d7
 8008210:	2300      	movs	r3, #0
 8008212:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008216:	f7f8 fc7f 	bl	8000b18 <__aeabi_dcmpeq>
 800821a:	4680      	mov	r8, r0
 800821c:	b158      	cbz	r0, 8008236 <_dtoa_r+0xce>
 800821e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008220:	2301      	movs	r3, #1
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008226:	b113      	cbz	r3, 800822e <_dtoa_r+0xc6>
 8008228:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800822a:	4b84      	ldr	r3, [pc, #528]	@ (800843c <_dtoa_r+0x2d4>)
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008450 <_dtoa_r+0x2e8>
 8008232:	f000 bd33 	b.w	8008c9c <_dtoa_r+0xb34>
 8008236:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800823a:	aa16      	add	r2, sp, #88	@ 0x58
 800823c:	a917      	add	r1, sp, #92	@ 0x5c
 800823e:	4658      	mov	r0, fp
 8008240:	f001 f980 	bl	8009544 <__d2b>
 8008244:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008248:	4681      	mov	r9, r0
 800824a:	2e00      	cmp	r6, #0
 800824c:	d077      	beq.n	800833e <_dtoa_r+0x1d6>
 800824e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008250:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800825c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008260:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008264:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008268:	4619      	mov	r1, r3
 800826a:	2200      	movs	r2, #0
 800826c:	4b74      	ldr	r3, [pc, #464]	@ (8008440 <_dtoa_r+0x2d8>)
 800826e:	f7f8 f833 	bl	80002d8 <__aeabi_dsub>
 8008272:	a369      	add	r3, pc, #420	@ (adr r3, 8008418 <_dtoa_r+0x2b0>)
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f7f8 f9e6 	bl	8000648 <__aeabi_dmul>
 800827c:	a368      	add	r3, pc, #416	@ (adr r3, 8008420 <_dtoa_r+0x2b8>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f8 f82b 	bl	80002dc <__adddf3>
 8008286:	4604      	mov	r4, r0
 8008288:	4630      	mov	r0, r6
 800828a:	460d      	mov	r5, r1
 800828c:	f7f8 f972 	bl	8000574 <__aeabi_i2d>
 8008290:	a365      	add	r3, pc, #404	@ (adr r3, 8008428 <_dtoa_r+0x2c0>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f8 f9d7 	bl	8000648 <__aeabi_dmul>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4620      	mov	r0, r4
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f8 f81b 	bl	80002dc <__adddf3>
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	f7f8 fc7d 	bl	8000ba8 <__aeabi_d2iz>
 80082ae:	2200      	movs	r2, #0
 80082b0:	4607      	mov	r7, r0
 80082b2:	2300      	movs	r3, #0
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f8 fc38 	bl	8000b2c <__aeabi_dcmplt>
 80082bc:	b140      	cbz	r0, 80082d0 <_dtoa_r+0x168>
 80082be:	4638      	mov	r0, r7
 80082c0:	f7f8 f958 	bl	8000574 <__aeabi_i2d>
 80082c4:	4622      	mov	r2, r4
 80082c6:	462b      	mov	r3, r5
 80082c8:	f7f8 fc26 	bl	8000b18 <__aeabi_dcmpeq>
 80082cc:	b900      	cbnz	r0, 80082d0 <_dtoa_r+0x168>
 80082ce:	3f01      	subs	r7, #1
 80082d0:	2f16      	cmp	r7, #22
 80082d2:	d851      	bhi.n	8008378 <_dtoa_r+0x210>
 80082d4:	4b5b      	ldr	r3, [pc, #364]	@ (8008444 <_dtoa_r+0x2dc>)
 80082d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082e2:	f7f8 fc23 	bl	8000b2c <__aeabi_dcmplt>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d048      	beq.n	800837c <_dtoa_r+0x214>
 80082ea:	3f01      	subs	r7, #1
 80082ec:	2300      	movs	r3, #0
 80082ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80082f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80082f2:	1b9b      	subs	r3, r3, r6
 80082f4:	1e5a      	subs	r2, r3, #1
 80082f6:	bf44      	itt	mi
 80082f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80082fc:	2300      	movmi	r3, #0
 80082fe:	9208      	str	r2, [sp, #32]
 8008300:	bf54      	ite	pl
 8008302:	f04f 0800 	movpl.w	r8, #0
 8008306:	9308      	strmi	r3, [sp, #32]
 8008308:	2f00      	cmp	r7, #0
 800830a:	db39      	blt.n	8008380 <_dtoa_r+0x218>
 800830c:	9b08      	ldr	r3, [sp, #32]
 800830e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008310:	443b      	add	r3, r7
 8008312:	9308      	str	r3, [sp, #32]
 8008314:	2300      	movs	r3, #0
 8008316:	930a      	str	r3, [sp, #40]	@ 0x28
 8008318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831a:	2b09      	cmp	r3, #9
 800831c:	d864      	bhi.n	80083e8 <_dtoa_r+0x280>
 800831e:	2b05      	cmp	r3, #5
 8008320:	bfc4      	itt	gt
 8008322:	3b04      	subgt	r3, #4
 8008324:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008328:	f1a3 0302 	sub.w	r3, r3, #2
 800832c:	bfcc      	ite	gt
 800832e:	2400      	movgt	r4, #0
 8008330:	2401      	movle	r4, #1
 8008332:	2b03      	cmp	r3, #3
 8008334:	d863      	bhi.n	80083fe <_dtoa_r+0x296>
 8008336:	e8df f003 	tbb	[pc, r3]
 800833a:	372a      	.short	0x372a
 800833c:	5535      	.short	0x5535
 800833e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008342:	441e      	add	r6, r3
 8008344:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008348:	2b20      	cmp	r3, #32
 800834a:	bfc1      	itttt	gt
 800834c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008350:	409f      	lslgt	r7, r3
 8008352:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008356:	fa24 f303 	lsrgt.w	r3, r4, r3
 800835a:	bfd6      	itet	le
 800835c:	f1c3 0320 	rsble	r3, r3, #32
 8008360:	ea47 0003 	orrgt.w	r0, r7, r3
 8008364:	fa04 f003 	lslle.w	r0, r4, r3
 8008368:	f7f8 f8f4 	bl	8000554 <__aeabi_ui2d>
 800836c:	2201      	movs	r2, #1
 800836e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008372:	3e01      	subs	r6, #1
 8008374:	9214      	str	r2, [sp, #80]	@ 0x50
 8008376:	e777      	b.n	8008268 <_dtoa_r+0x100>
 8008378:	2301      	movs	r3, #1
 800837a:	e7b8      	b.n	80082ee <_dtoa_r+0x186>
 800837c:	9012      	str	r0, [sp, #72]	@ 0x48
 800837e:	e7b7      	b.n	80082f0 <_dtoa_r+0x188>
 8008380:	427b      	negs	r3, r7
 8008382:	930a      	str	r3, [sp, #40]	@ 0x28
 8008384:	2300      	movs	r3, #0
 8008386:	eba8 0807 	sub.w	r8, r8, r7
 800838a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800838c:	e7c4      	b.n	8008318 <_dtoa_r+0x1b0>
 800838e:	2300      	movs	r3, #0
 8008390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	dc35      	bgt.n	8008404 <_dtoa_r+0x29c>
 8008398:	2301      	movs	r3, #1
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	9307      	str	r3, [sp, #28]
 800839e:	461a      	mov	r2, r3
 80083a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083a2:	e00b      	b.n	80083bc <_dtoa_r+0x254>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e7f3      	b.n	8008390 <_dtoa_r+0x228>
 80083a8:	2300      	movs	r3, #0
 80083aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	bfb8      	it	lt
 80083ba:	2301      	movlt	r3, #1
 80083bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80083c0:	2100      	movs	r1, #0
 80083c2:	2204      	movs	r2, #4
 80083c4:	f102 0514 	add.w	r5, r2, #20
 80083c8:	429d      	cmp	r5, r3
 80083ca:	d91f      	bls.n	800840c <_dtoa_r+0x2a4>
 80083cc:	6041      	str	r1, [r0, #4]
 80083ce:	4658      	mov	r0, fp
 80083d0:	f000 fd8e 	bl	8008ef0 <_Balloc>
 80083d4:	4682      	mov	sl, r0
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d13c      	bne.n	8008454 <_dtoa_r+0x2ec>
 80083da:	4b1b      	ldr	r3, [pc, #108]	@ (8008448 <_dtoa_r+0x2e0>)
 80083dc:	4602      	mov	r2, r0
 80083de:	f240 11af 	movw	r1, #431	@ 0x1af
 80083e2:	e6d8      	b.n	8008196 <_dtoa_r+0x2e>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e7e0      	b.n	80083aa <_dtoa_r+0x242>
 80083e8:	2401      	movs	r4, #1
 80083ea:	2300      	movs	r3, #0
 80083ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	9307      	str	r3, [sp, #28]
 80083f8:	2200      	movs	r2, #0
 80083fa:	2312      	movs	r3, #18
 80083fc:	e7d0      	b.n	80083a0 <_dtoa_r+0x238>
 80083fe:	2301      	movs	r3, #1
 8008400:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008402:	e7f5      	b.n	80083f0 <_dtoa_r+0x288>
 8008404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	9307      	str	r3, [sp, #28]
 800840a:	e7d7      	b.n	80083bc <_dtoa_r+0x254>
 800840c:	3101      	adds	r1, #1
 800840e:	0052      	lsls	r2, r2, #1
 8008410:	e7d8      	b.n	80083c4 <_dtoa_r+0x25c>
 8008412:	bf00      	nop
 8008414:	f3af 8000 	nop.w
 8008418:	636f4361 	.word	0x636f4361
 800841c:	3fd287a7 	.word	0x3fd287a7
 8008420:	8b60c8b3 	.word	0x8b60c8b3
 8008424:	3fc68a28 	.word	0x3fc68a28
 8008428:	509f79fb 	.word	0x509f79fb
 800842c:	3fd34413 	.word	0x3fd34413
 8008430:	0800a2a9 	.word	0x0800a2a9
 8008434:	0800a2c0 	.word	0x0800a2c0
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	0800a279 	.word	0x0800a279
 8008440:	3ff80000 	.word	0x3ff80000
 8008444:	0800a3b8 	.word	0x0800a3b8
 8008448:	0800a318 	.word	0x0800a318
 800844c:	0800a2a5 	.word	0x0800a2a5
 8008450:	0800a278 	.word	0x0800a278
 8008454:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008458:	6018      	str	r0, [r3, #0]
 800845a:	9b07      	ldr	r3, [sp, #28]
 800845c:	2b0e      	cmp	r3, #14
 800845e:	f200 80a4 	bhi.w	80085aa <_dtoa_r+0x442>
 8008462:	2c00      	cmp	r4, #0
 8008464:	f000 80a1 	beq.w	80085aa <_dtoa_r+0x442>
 8008468:	2f00      	cmp	r7, #0
 800846a:	dd33      	ble.n	80084d4 <_dtoa_r+0x36c>
 800846c:	4bad      	ldr	r3, [pc, #692]	@ (8008724 <_dtoa_r+0x5bc>)
 800846e:	f007 020f 	and.w	r2, r7, #15
 8008472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008476:	ed93 7b00 	vldr	d7, [r3]
 800847a:	05f8      	lsls	r0, r7, #23
 800847c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008480:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008484:	d516      	bpl.n	80084b4 <_dtoa_r+0x34c>
 8008486:	4ba8      	ldr	r3, [pc, #672]	@ (8008728 <_dtoa_r+0x5c0>)
 8008488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800848c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008490:	f7f8 fa04 	bl	800089c <__aeabi_ddiv>
 8008494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008498:	f004 040f 	and.w	r4, r4, #15
 800849c:	2603      	movs	r6, #3
 800849e:	4da2      	ldr	r5, [pc, #648]	@ (8008728 <_dtoa_r+0x5c0>)
 80084a0:	b954      	cbnz	r4, 80084b8 <_dtoa_r+0x350>
 80084a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084aa:	f7f8 f9f7 	bl	800089c <__aeabi_ddiv>
 80084ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b2:	e028      	b.n	8008506 <_dtoa_r+0x39e>
 80084b4:	2602      	movs	r6, #2
 80084b6:	e7f2      	b.n	800849e <_dtoa_r+0x336>
 80084b8:	07e1      	lsls	r1, r4, #31
 80084ba:	d508      	bpl.n	80084ce <_dtoa_r+0x366>
 80084bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084c4:	f7f8 f8c0 	bl	8000648 <__aeabi_dmul>
 80084c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084cc:	3601      	adds	r6, #1
 80084ce:	1064      	asrs	r4, r4, #1
 80084d0:	3508      	adds	r5, #8
 80084d2:	e7e5      	b.n	80084a0 <_dtoa_r+0x338>
 80084d4:	f000 80d2 	beq.w	800867c <_dtoa_r+0x514>
 80084d8:	427c      	negs	r4, r7
 80084da:	4b92      	ldr	r3, [pc, #584]	@ (8008724 <_dtoa_r+0x5bc>)
 80084dc:	4d92      	ldr	r5, [pc, #584]	@ (8008728 <_dtoa_r+0x5c0>)
 80084de:	f004 020f 	and.w	r2, r4, #15
 80084e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084ee:	f7f8 f8ab 	bl	8000648 <__aeabi_dmul>
 80084f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f6:	1124      	asrs	r4, r4, #4
 80084f8:	2300      	movs	r3, #0
 80084fa:	2602      	movs	r6, #2
 80084fc:	2c00      	cmp	r4, #0
 80084fe:	f040 80b2 	bne.w	8008666 <_dtoa_r+0x4fe>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1d3      	bne.n	80084ae <_dtoa_r+0x346>
 8008506:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008508:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 80b7 	beq.w	8008680 <_dtoa_r+0x518>
 8008512:	4b86      	ldr	r3, [pc, #536]	@ (800872c <_dtoa_r+0x5c4>)
 8008514:	2200      	movs	r2, #0
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f8 fb07 	bl	8000b2c <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f000 80ae 	beq.w	8008680 <_dtoa_r+0x518>
 8008524:	9b07      	ldr	r3, [sp, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 80aa 	beq.w	8008680 <_dtoa_r+0x518>
 800852c:	9b00      	ldr	r3, [sp, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	dd37      	ble.n	80085a2 <_dtoa_r+0x43a>
 8008532:	1e7b      	subs	r3, r7, #1
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	4620      	mov	r0, r4
 8008538:	4b7d      	ldr	r3, [pc, #500]	@ (8008730 <_dtoa_r+0x5c8>)
 800853a:	2200      	movs	r2, #0
 800853c:	4629      	mov	r1, r5
 800853e:	f7f8 f883 	bl	8000648 <__aeabi_dmul>
 8008542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008546:	9c00      	ldr	r4, [sp, #0]
 8008548:	3601      	adds	r6, #1
 800854a:	4630      	mov	r0, r6
 800854c:	f7f8 f812 	bl	8000574 <__aeabi_i2d>
 8008550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008554:	f7f8 f878 	bl	8000648 <__aeabi_dmul>
 8008558:	4b76      	ldr	r3, [pc, #472]	@ (8008734 <_dtoa_r+0x5cc>)
 800855a:	2200      	movs	r2, #0
 800855c:	f7f7 febe 	bl	80002dc <__adddf3>
 8008560:	4605      	mov	r5, r0
 8008562:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008566:	2c00      	cmp	r4, #0
 8008568:	f040 808d 	bne.w	8008686 <_dtoa_r+0x51e>
 800856c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008570:	4b71      	ldr	r3, [pc, #452]	@ (8008738 <_dtoa_r+0x5d0>)
 8008572:	2200      	movs	r2, #0
 8008574:	f7f7 feb0 	bl	80002d8 <__aeabi_dsub>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008580:	462a      	mov	r2, r5
 8008582:	4633      	mov	r3, r6
 8008584:	f7f8 faf0 	bl	8000b68 <__aeabi_dcmpgt>
 8008588:	2800      	cmp	r0, #0
 800858a:	f040 828b 	bne.w	8008aa4 <_dtoa_r+0x93c>
 800858e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008592:	462a      	mov	r2, r5
 8008594:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008598:	f7f8 fac8 	bl	8000b2c <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	f040 8128 	bne.w	80087f2 <_dtoa_r+0x68a>
 80085a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80085a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80085aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f2c0 815a 	blt.w	8008866 <_dtoa_r+0x6fe>
 80085b2:	2f0e      	cmp	r7, #14
 80085b4:	f300 8157 	bgt.w	8008866 <_dtoa_r+0x6fe>
 80085b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008724 <_dtoa_r+0x5bc>)
 80085ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085be:	ed93 7b00 	vldr	d7, [r3]
 80085c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	ed8d 7b00 	vstr	d7, [sp]
 80085ca:	da03      	bge.n	80085d4 <_dtoa_r+0x46c>
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f340 8101 	ble.w	80087d6 <_dtoa_r+0x66e>
 80085d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085d8:	4656      	mov	r6, sl
 80085da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085de:	4620      	mov	r0, r4
 80085e0:	4629      	mov	r1, r5
 80085e2:	f7f8 f95b 	bl	800089c <__aeabi_ddiv>
 80085e6:	f7f8 fadf 	bl	8000ba8 <__aeabi_d2iz>
 80085ea:	4680      	mov	r8, r0
 80085ec:	f7f7 ffc2 	bl	8000574 <__aeabi_i2d>
 80085f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085f4:	f7f8 f828 	bl	8000648 <__aeabi_dmul>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008604:	f7f7 fe68 	bl	80002d8 <__aeabi_dsub>
 8008608:	f806 4b01 	strb.w	r4, [r6], #1
 800860c:	9d07      	ldr	r5, [sp, #28]
 800860e:	eba6 040a 	sub.w	r4, r6, sl
 8008612:	42a5      	cmp	r5, r4
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	f040 8117 	bne.w	800884a <_dtoa_r+0x6e2>
 800861c:	f7f7 fe5e 	bl	80002dc <__adddf3>
 8008620:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008624:	4604      	mov	r4, r0
 8008626:	460d      	mov	r5, r1
 8008628:	f7f8 fa9e 	bl	8000b68 <__aeabi_dcmpgt>
 800862c:	2800      	cmp	r0, #0
 800862e:	f040 80f9 	bne.w	8008824 <_dtoa_r+0x6bc>
 8008632:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008636:	4620      	mov	r0, r4
 8008638:	4629      	mov	r1, r5
 800863a:	f7f8 fa6d 	bl	8000b18 <__aeabi_dcmpeq>
 800863e:	b118      	cbz	r0, 8008648 <_dtoa_r+0x4e0>
 8008640:	f018 0f01 	tst.w	r8, #1
 8008644:	f040 80ee 	bne.w	8008824 <_dtoa_r+0x6bc>
 8008648:	4649      	mov	r1, r9
 800864a:	4658      	mov	r0, fp
 800864c:	f000 fc90 	bl	8008f70 <_Bfree>
 8008650:	2300      	movs	r3, #0
 8008652:	7033      	strb	r3, [r6, #0]
 8008654:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008656:	3701      	adds	r7, #1
 8008658:	601f      	str	r7, [r3, #0]
 800865a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 831d 	beq.w	8008c9c <_dtoa_r+0xb34>
 8008662:	601e      	str	r6, [r3, #0]
 8008664:	e31a      	b.n	8008c9c <_dtoa_r+0xb34>
 8008666:	07e2      	lsls	r2, r4, #31
 8008668:	d505      	bpl.n	8008676 <_dtoa_r+0x50e>
 800866a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800866e:	f7f7 ffeb 	bl	8000648 <__aeabi_dmul>
 8008672:	3601      	adds	r6, #1
 8008674:	2301      	movs	r3, #1
 8008676:	1064      	asrs	r4, r4, #1
 8008678:	3508      	adds	r5, #8
 800867a:	e73f      	b.n	80084fc <_dtoa_r+0x394>
 800867c:	2602      	movs	r6, #2
 800867e:	e742      	b.n	8008506 <_dtoa_r+0x39e>
 8008680:	9c07      	ldr	r4, [sp, #28]
 8008682:	9704      	str	r7, [sp, #16]
 8008684:	e761      	b.n	800854a <_dtoa_r+0x3e2>
 8008686:	4b27      	ldr	r3, [pc, #156]	@ (8008724 <_dtoa_r+0x5bc>)
 8008688:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800868a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800868e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008692:	4454      	add	r4, sl
 8008694:	2900      	cmp	r1, #0
 8008696:	d053      	beq.n	8008740 <_dtoa_r+0x5d8>
 8008698:	4928      	ldr	r1, [pc, #160]	@ (800873c <_dtoa_r+0x5d4>)
 800869a:	2000      	movs	r0, #0
 800869c:	f7f8 f8fe 	bl	800089c <__aeabi_ddiv>
 80086a0:	4633      	mov	r3, r6
 80086a2:	462a      	mov	r2, r5
 80086a4:	f7f7 fe18 	bl	80002d8 <__aeabi_dsub>
 80086a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086ac:	4656      	mov	r6, sl
 80086ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b2:	f7f8 fa79 	bl	8000ba8 <__aeabi_d2iz>
 80086b6:	4605      	mov	r5, r0
 80086b8:	f7f7 ff5c 	bl	8000574 <__aeabi_i2d>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086c4:	f7f7 fe08 	bl	80002d8 <__aeabi_dsub>
 80086c8:	3530      	adds	r5, #48	@ 0x30
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086d2:	f806 5b01 	strb.w	r5, [r6], #1
 80086d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086da:	f7f8 fa27 	bl	8000b2c <__aeabi_dcmplt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d171      	bne.n	80087c6 <_dtoa_r+0x65e>
 80086e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086e6:	4911      	ldr	r1, [pc, #68]	@ (800872c <_dtoa_r+0x5c4>)
 80086e8:	2000      	movs	r0, #0
 80086ea:	f7f7 fdf5 	bl	80002d8 <__aeabi_dsub>
 80086ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086f2:	f7f8 fa1b 	bl	8000b2c <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f040 8095 	bne.w	8008826 <_dtoa_r+0x6be>
 80086fc:	42a6      	cmp	r6, r4
 80086fe:	f43f af50 	beq.w	80085a2 <_dtoa_r+0x43a>
 8008702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008706:	4b0a      	ldr	r3, [pc, #40]	@ (8008730 <_dtoa_r+0x5c8>)
 8008708:	2200      	movs	r2, #0
 800870a:	f7f7 ff9d 	bl	8000648 <__aeabi_dmul>
 800870e:	4b08      	ldr	r3, [pc, #32]	@ (8008730 <_dtoa_r+0x5c8>)
 8008710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008714:	2200      	movs	r2, #0
 8008716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871a:	f7f7 ff95 	bl	8000648 <__aeabi_dmul>
 800871e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008722:	e7c4      	b.n	80086ae <_dtoa_r+0x546>
 8008724:	0800a3b8 	.word	0x0800a3b8
 8008728:	0800a390 	.word	0x0800a390
 800872c:	3ff00000 	.word	0x3ff00000
 8008730:	40240000 	.word	0x40240000
 8008734:	401c0000 	.word	0x401c0000
 8008738:	40140000 	.word	0x40140000
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	f7f7 ff80 	bl	8000648 <__aeabi_dmul>
 8008748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800874c:	9415      	str	r4, [sp, #84]	@ 0x54
 800874e:	4656      	mov	r6, sl
 8008750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008754:	f7f8 fa28 	bl	8000ba8 <__aeabi_d2iz>
 8008758:	4605      	mov	r5, r0
 800875a:	f7f7 ff0b 	bl	8000574 <__aeabi_i2d>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008766:	f7f7 fdb7 	bl	80002d8 <__aeabi_dsub>
 800876a:	3530      	adds	r5, #48	@ 0x30
 800876c:	f806 5b01 	strb.w	r5, [r6], #1
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	42a6      	cmp	r6, r4
 8008776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800877a:	f04f 0200 	mov.w	r2, #0
 800877e:	d124      	bne.n	80087ca <_dtoa_r+0x662>
 8008780:	4bac      	ldr	r3, [pc, #688]	@ (8008a34 <_dtoa_r+0x8cc>)
 8008782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008786:	f7f7 fda9 	bl	80002dc <__adddf3>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008792:	f7f8 f9e9 	bl	8000b68 <__aeabi_dcmpgt>
 8008796:	2800      	cmp	r0, #0
 8008798:	d145      	bne.n	8008826 <_dtoa_r+0x6be>
 800879a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800879e:	49a5      	ldr	r1, [pc, #660]	@ (8008a34 <_dtoa_r+0x8cc>)
 80087a0:	2000      	movs	r0, #0
 80087a2:	f7f7 fd99 	bl	80002d8 <__aeabi_dsub>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ae:	f7f8 f9bd 	bl	8000b2c <__aeabi_dcmplt>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	f43f aef5 	beq.w	80085a2 <_dtoa_r+0x43a>
 80087b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80087ba:	1e73      	subs	r3, r6, #1
 80087bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80087be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087c2:	2b30      	cmp	r3, #48	@ 0x30
 80087c4:	d0f8      	beq.n	80087b8 <_dtoa_r+0x650>
 80087c6:	9f04      	ldr	r7, [sp, #16]
 80087c8:	e73e      	b.n	8008648 <_dtoa_r+0x4e0>
 80087ca:	4b9b      	ldr	r3, [pc, #620]	@ (8008a38 <_dtoa_r+0x8d0>)
 80087cc:	f7f7 ff3c 	bl	8000648 <__aeabi_dmul>
 80087d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d4:	e7bc      	b.n	8008750 <_dtoa_r+0x5e8>
 80087d6:	d10c      	bne.n	80087f2 <_dtoa_r+0x68a>
 80087d8:	4b98      	ldr	r3, [pc, #608]	@ (8008a3c <_dtoa_r+0x8d4>)
 80087da:	2200      	movs	r2, #0
 80087dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e0:	f7f7 ff32 	bl	8000648 <__aeabi_dmul>
 80087e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e8:	f7f8 f9b4 	bl	8000b54 <__aeabi_dcmpge>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f000 8157 	beq.w	8008aa0 <_dtoa_r+0x938>
 80087f2:	2400      	movs	r4, #0
 80087f4:	4625      	mov	r5, r4
 80087f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087f8:	43db      	mvns	r3, r3
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	4656      	mov	r6, sl
 80087fe:	2700      	movs	r7, #0
 8008800:	4621      	mov	r1, r4
 8008802:	4658      	mov	r0, fp
 8008804:	f000 fbb4 	bl	8008f70 <_Bfree>
 8008808:	2d00      	cmp	r5, #0
 800880a:	d0dc      	beq.n	80087c6 <_dtoa_r+0x65e>
 800880c:	b12f      	cbz	r7, 800881a <_dtoa_r+0x6b2>
 800880e:	42af      	cmp	r7, r5
 8008810:	d003      	beq.n	800881a <_dtoa_r+0x6b2>
 8008812:	4639      	mov	r1, r7
 8008814:	4658      	mov	r0, fp
 8008816:	f000 fbab 	bl	8008f70 <_Bfree>
 800881a:	4629      	mov	r1, r5
 800881c:	4658      	mov	r0, fp
 800881e:	f000 fba7 	bl	8008f70 <_Bfree>
 8008822:	e7d0      	b.n	80087c6 <_dtoa_r+0x65e>
 8008824:	9704      	str	r7, [sp, #16]
 8008826:	4633      	mov	r3, r6
 8008828:	461e      	mov	r6, r3
 800882a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800882e:	2a39      	cmp	r2, #57	@ 0x39
 8008830:	d107      	bne.n	8008842 <_dtoa_r+0x6da>
 8008832:	459a      	cmp	sl, r3
 8008834:	d1f8      	bne.n	8008828 <_dtoa_r+0x6c0>
 8008836:	9a04      	ldr	r2, [sp, #16]
 8008838:	3201      	adds	r2, #1
 800883a:	9204      	str	r2, [sp, #16]
 800883c:	2230      	movs	r2, #48	@ 0x30
 800883e:	f88a 2000 	strb.w	r2, [sl]
 8008842:	781a      	ldrb	r2, [r3, #0]
 8008844:	3201      	adds	r2, #1
 8008846:	701a      	strb	r2, [r3, #0]
 8008848:	e7bd      	b.n	80087c6 <_dtoa_r+0x65e>
 800884a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a38 <_dtoa_r+0x8d0>)
 800884c:	2200      	movs	r2, #0
 800884e:	f7f7 fefb 	bl	8000648 <__aeabi_dmul>
 8008852:	2200      	movs	r2, #0
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	f7f8 f95d 	bl	8000b18 <__aeabi_dcmpeq>
 800885e:	2800      	cmp	r0, #0
 8008860:	f43f aebb 	beq.w	80085da <_dtoa_r+0x472>
 8008864:	e6f0      	b.n	8008648 <_dtoa_r+0x4e0>
 8008866:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008868:	2a00      	cmp	r2, #0
 800886a:	f000 80db 	beq.w	8008a24 <_dtoa_r+0x8bc>
 800886e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008870:	2a01      	cmp	r2, #1
 8008872:	f300 80bf 	bgt.w	80089f4 <_dtoa_r+0x88c>
 8008876:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008878:	2a00      	cmp	r2, #0
 800887a:	f000 80b7 	beq.w	80089ec <_dtoa_r+0x884>
 800887e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008882:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008884:	4646      	mov	r6, r8
 8008886:	9a08      	ldr	r2, [sp, #32]
 8008888:	2101      	movs	r1, #1
 800888a:	441a      	add	r2, r3
 800888c:	4658      	mov	r0, fp
 800888e:	4498      	add	r8, r3
 8008890:	9208      	str	r2, [sp, #32]
 8008892:	f000 fc21 	bl	80090d8 <__i2b>
 8008896:	4605      	mov	r5, r0
 8008898:	b15e      	cbz	r6, 80088b2 <_dtoa_r+0x74a>
 800889a:	9b08      	ldr	r3, [sp, #32]
 800889c:	2b00      	cmp	r3, #0
 800889e:	dd08      	ble.n	80088b2 <_dtoa_r+0x74a>
 80088a0:	42b3      	cmp	r3, r6
 80088a2:	9a08      	ldr	r2, [sp, #32]
 80088a4:	bfa8      	it	ge
 80088a6:	4633      	movge	r3, r6
 80088a8:	eba8 0803 	sub.w	r8, r8, r3
 80088ac:	1af6      	subs	r6, r6, r3
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	9308      	str	r3, [sp, #32]
 80088b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b4:	b1f3      	cbz	r3, 80088f4 <_dtoa_r+0x78c>
 80088b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80b7 	beq.w	8008a2c <_dtoa_r+0x8c4>
 80088be:	b18c      	cbz	r4, 80088e4 <_dtoa_r+0x77c>
 80088c0:	4629      	mov	r1, r5
 80088c2:	4622      	mov	r2, r4
 80088c4:	4658      	mov	r0, fp
 80088c6:	f000 fcc7 	bl	8009258 <__pow5mult>
 80088ca:	464a      	mov	r2, r9
 80088cc:	4601      	mov	r1, r0
 80088ce:	4605      	mov	r5, r0
 80088d0:	4658      	mov	r0, fp
 80088d2:	f000 fc17 	bl	8009104 <__multiply>
 80088d6:	4649      	mov	r1, r9
 80088d8:	9004      	str	r0, [sp, #16]
 80088da:	4658      	mov	r0, fp
 80088dc:	f000 fb48 	bl	8008f70 <_Bfree>
 80088e0:	9b04      	ldr	r3, [sp, #16]
 80088e2:	4699      	mov	r9, r3
 80088e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e6:	1b1a      	subs	r2, r3, r4
 80088e8:	d004      	beq.n	80088f4 <_dtoa_r+0x78c>
 80088ea:	4649      	mov	r1, r9
 80088ec:	4658      	mov	r0, fp
 80088ee:	f000 fcb3 	bl	8009258 <__pow5mult>
 80088f2:	4681      	mov	r9, r0
 80088f4:	2101      	movs	r1, #1
 80088f6:	4658      	mov	r0, fp
 80088f8:	f000 fbee 	bl	80090d8 <__i2b>
 80088fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088fe:	4604      	mov	r4, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 81cf 	beq.w	8008ca4 <_dtoa_r+0xb3c>
 8008906:	461a      	mov	r2, r3
 8008908:	4601      	mov	r1, r0
 800890a:	4658      	mov	r0, fp
 800890c:	f000 fca4 	bl	8009258 <__pow5mult>
 8008910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008912:	2b01      	cmp	r3, #1
 8008914:	4604      	mov	r4, r0
 8008916:	f300 8095 	bgt.w	8008a44 <_dtoa_r+0x8dc>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 8087 	bne.w	8008a30 <_dtoa_r+0x8c8>
 8008922:	9b03      	ldr	r3, [sp, #12]
 8008924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 8089 	bne.w	8008a40 <_dtoa_r+0x8d8>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008934:	0d1b      	lsrs	r3, r3, #20
 8008936:	051b      	lsls	r3, r3, #20
 8008938:	b12b      	cbz	r3, 8008946 <_dtoa_r+0x7de>
 800893a:	9b08      	ldr	r3, [sp, #32]
 800893c:	3301      	adds	r3, #1
 800893e:	9308      	str	r3, [sp, #32]
 8008940:	f108 0801 	add.w	r8, r8, #1
 8008944:	2301      	movs	r3, #1
 8008946:	930a      	str	r3, [sp, #40]	@ 0x28
 8008948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 81b0 	beq.w	8008cb0 <_dtoa_r+0xb48>
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008956:	6918      	ldr	r0, [r3, #16]
 8008958:	f000 fb72 	bl	8009040 <__hi0bits>
 800895c:	f1c0 0020 	rsb	r0, r0, #32
 8008960:	9b08      	ldr	r3, [sp, #32]
 8008962:	4418      	add	r0, r3
 8008964:	f010 001f 	ands.w	r0, r0, #31
 8008968:	d077      	beq.n	8008a5a <_dtoa_r+0x8f2>
 800896a:	f1c0 0320 	rsb	r3, r0, #32
 800896e:	2b04      	cmp	r3, #4
 8008970:	dd6b      	ble.n	8008a4a <_dtoa_r+0x8e2>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	f1c0 001c 	rsb	r0, r0, #28
 8008978:	4403      	add	r3, r0
 800897a:	4480      	add	r8, r0
 800897c:	4406      	add	r6, r0
 800897e:	9308      	str	r3, [sp, #32]
 8008980:	f1b8 0f00 	cmp.w	r8, #0
 8008984:	dd05      	ble.n	8008992 <_dtoa_r+0x82a>
 8008986:	4649      	mov	r1, r9
 8008988:	4642      	mov	r2, r8
 800898a:	4658      	mov	r0, fp
 800898c:	f000 fcbe 	bl	800930c <__lshift>
 8008990:	4681      	mov	r9, r0
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	2b00      	cmp	r3, #0
 8008996:	dd05      	ble.n	80089a4 <_dtoa_r+0x83c>
 8008998:	4621      	mov	r1, r4
 800899a:	461a      	mov	r2, r3
 800899c:	4658      	mov	r0, fp
 800899e:	f000 fcb5 	bl	800930c <__lshift>
 80089a2:	4604      	mov	r4, r0
 80089a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d059      	beq.n	8008a5e <_dtoa_r+0x8f6>
 80089aa:	4621      	mov	r1, r4
 80089ac:	4648      	mov	r0, r9
 80089ae:	f000 fd19 	bl	80093e4 <__mcmp>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	da53      	bge.n	8008a5e <_dtoa_r+0x8f6>
 80089b6:	1e7b      	subs	r3, r7, #1
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	4649      	mov	r1, r9
 80089bc:	2300      	movs	r3, #0
 80089be:	220a      	movs	r2, #10
 80089c0:	4658      	mov	r0, fp
 80089c2:	f000 faf7 	bl	8008fb4 <__multadd>
 80089c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089c8:	4681      	mov	r9, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 8172 	beq.w	8008cb4 <_dtoa_r+0xb4c>
 80089d0:	2300      	movs	r3, #0
 80089d2:	4629      	mov	r1, r5
 80089d4:	220a      	movs	r2, #10
 80089d6:	4658      	mov	r0, fp
 80089d8:	f000 faec 	bl	8008fb4 <__multadd>
 80089dc:	9b00      	ldr	r3, [sp, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	4605      	mov	r5, r0
 80089e2:	dc67      	bgt.n	8008ab4 <_dtoa_r+0x94c>
 80089e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	dc41      	bgt.n	8008a6e <_dtoa_r+0x906>
 80089ea:	e063      	b.n	8008ab4 <_dtoa_r+0x94c>
 80089ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089f2:	e746      	b.n	8008882 <_dtoa_r+0x71a>
 80089f4:	9b07      	ldr	r3, [sp, #28]
 80089f6:	1e5c      	subs	r4, r3, #1
 80089f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	bfbf      	itttt	lt
 80089fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a04:	1ae3      	sublt	r3, r4, r3
 8008a06:	bfb4      	ite	lt
 8008a08:	18d2      	addlt	r2, r2, r3
 8008a0a:	1b1c      	subge	r4, r3, r4
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	bfbc      	itt	lt
 8008a10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a12:	2400      	movlt	r4, #0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bfb5      	itete	lt
 8008a18:	eba8 0603 	sublt.w	r6, r8, r3
 8008a1c:	9b07      	ldrge	r3, [sp, #28]
 8008a1e:	2300      	movlt	r3, #0
 8008a20:	4646      	movge	r6, r8
 8008a22:	e730      	b.n	8008886 <_dtoa_r+0x71e>
 8008a24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a28:	4646      	mov	r6, r8
 8008a2a:	e735      	b.n	8008898 <_dtoa_r+0x730>
 8008a2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a2e:	e75c      	b.n	80088ea <_dtoa_r+0x782>
 8008a30:	2300      	movs	r3, #0
 8008a32:	e788      	b.n	8008946 <_dtoa_r+0x7de>
 8008a34:	3fe00000 	.word	0x3fe00000
 8008a38:	40240000 	.word	0x40240000
 8008a3c:	40140000 	.word	0x40140000
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	e780      	b.n	8008946 <_dtoa_r+0x7de>
 8008a44:	2300      	movs	r3, #0
 8008a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a48:	e782      	b.n	8008950 <_dtoa_r+0x7e8>
 8008a4a:	d099      	beq.n	8008980 <_dtoa_r+0x818>
 8008a4c:	9a08      	ldr	r2, [sp, #32]
 8008a4e:	331c      	adds	r3, #28
 8008a50:	441a      	add	r2, r3
 8008a52:	4498      	add	r8, r3
 8008a54:	441e      	add	r6, r3
 8008a56:	9208      	str	r2, [sp, #32]
 8008a58:	e792      	b.n	8008980 <_dtoa_r+0x818>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	e7f6      	b.n	8008a4c <_dtoa_r+0x8e4>
 8008a5e:	9b07      	ldr	r3, [sp, #28]
 8008a60:	9704      	str	r7, [sp, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	dc20      	bgt.n	8008aa8 <_dtoa_r+0x940>
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	dd1e      	ble.n	8008aac <_dtoa_r+0x944>
 8008a6e:	9b00      	ldr	r3, [sp, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f47f aec0 	bne.w	80087f6 <_dtoa_r+0x68e>
 8008a76:	4621      	mov	r1, r4
 8008a78:	2205      	movs	r2, #5
 8008a7a:	4658      	mov	r0, fp
 8008a7c:	f000 fa9a 	bl	8008fb4 <__multadd>
 8008a80:	4601      	mov	r1, r0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4648      	mov	r0, r9
 8008a86:	f000 fcad 	bl	80093e4 <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	f77f aeb3 	ble.w	80087f6 <_dtoa_r+0x68e>
 8008a90:	4656      	mov	r6, sl
 8008a92:	2331      	movs	r3, #49	@ 0x31
 8008a94:	f806 3b01 	strb.w	r3, [r6], #1
 8008a98:	9b04      	ldr	r3, [sp, #16]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	e6ae      	b.n	80087fe <_dtoa_r+0x696>
 8008aa0:	9c07      	ldr	r4, [sp, #28]
 8008aa2:	9704      	str	r7, [sp, #16]
 8008aa4:	4625      	mov	r5, r4
 8008aa6:	e7f3      	b.n	8008a90 <_dtoa_r+0x928>
 8008aa8:	9b07      	ldr	r3, [sp, #28]
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8104 	beq.w	8008cbc <_dtoa_r+0xb54>
 8008ab4:	2e00      	cmp	r6, #0
 8008ab6:	dd05      	ble.n	8008ac4 <_dtoa_r+0x95c>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4632      	mov	r2, r6
 8008abc:	4658      	mov	r0, fp
 8008abe:	f000 fc25 	bl	800930c <__lshift>
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d05a      	beq.n	8008b80 <_dtoa_r+0xa18>
 8008aca:	6869      	ldr	r1, [r5, #4]
 8008acc:	4658      	mov	r0, fp
 8008ace:	f000 fa0f 	bl	8008ef0 <_Balloc>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	b928      	cbnz	r0, 8008ae2 <_dtoa_r+0x97a>
 8008ad6:	4b84      	ldr	r3, [pc, #528]	@ (8008ce8 <_dtoa_r+0xb80>)
 8008ad8:	4602      	mov	r2, r0
 8008ada:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ade:	f7ff bb5a 	b.w	8008196 <_dtoa_r+0x2e>
 8008ae2:	692a      	ldr	r2, [r5, #16]
 8008ae4:	3202      	adds	r2, #2
 8008ae6:	0092      	lsls	r2, r2, #2
 8008ae8:	f105 010c 	add.w	r1, r5, #12
 8008aec:	300c      	adds	r0, #12
 8008aee:	f000 ffaf 	bl	8009a50 <memcpy>
 8008af2:	2201      	movs	r2, #1
 8008af4:	4631      	mov	r1, r6
 8008af6:	4658      	mov	r0, fp
 8008af8:	f000 fc08 	bl	800930c <__lshift>
 8008afc:	f10a 0301 	add.w	r3, sl, #1
 8008b00:	9307      	str	r3, [sp, #28]
 8008b02:	9b00      	ldr	r3, [sp, #0]
 8008b04:	4453      	add	r3, sl
 8008b06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b08:	9b02      	ldr	r3, [sp, #8]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	462f      	mov	r7, r5
 8008b10:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b12:	4605      	mov	r5, r0
 8008b14:	9b07      	ldr	r3, [sp, #28]
 8008b16:	4621      	mov	r1, r4
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	4648      	mov	r0, r9
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	f7ff fa98 	bl	8008052 <quorem>
 8008b22:	4639      	mov	r1, r7
 8008b24:	9002      	str	r0, [sp, #8]
 8008b26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b2a:	4648      	mov	r0, r9
 8008b2c:	f000 fc5a 	bl	80093e4 <__mcmp>
 8008b30:	462a      	mov	r2, r5
 8008b32:	9008      	str	r0, [sp, #32]
 8008b34:	4621      	mov	r1, r4
 8008b36:	4658      	mov	r0, fp
 8008b38:	f000 fc70 	bl	800941c <__mdiff>
 8008b3c:	68c2      	ldr	r2, [r0, #12]
 8008b3e:	4606      	mov	r6, r0
 8008b40:	bb02      	cbnz	r2, 8008b84 <_dtoa_r+0xa1c>
 8008b42:	4601      	mov	r1, r0
 8008b44:	4648      	mov	r0, r9
 8008b46:	f000 fc4d 	bl	80093e4 <__mcmp>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4658      	mov	r0, fp
 8008b50:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b52:	f000 fa0d 	bl	8008f70 <_Bfree>
 8008b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b5a:	9e07      	ldr	r6, [sp, #28]
 8008b5c:	ea43 0102 	orr.w	r1, r3, r2
 8008b60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b62:	4319      	orrs	r1, r3
 8008b64:	d110      	bne.n	8008b88 <_dtoa_r+0xa20>
 8008b66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b6a:	d029      	beq.n	8008bc0 <_dtoa_r+0xa58>
 8008b6c:	9b08      	ldr	r3, [sp, #32]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dd02      	ble.n	8008b78 <_dtoa_r+0xa10>
 8008b72:	9b02      	ldr	r3, [sp, #8]
 8008b74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008b78:	9b00      	ldr	r3, [sp, #0]
 8008b7a:	f883 8000 	strb.w	r8, [r3]
 8008b7e:	e63f      	b.n	8008800 <_dtoa_r+0x698>
 8008b80:	4628      	mov	r0, r5
 8008b82:	e7bb      	b.n	8008afc <_dtoa_r+0x994>
 8008b84:	2201      	movs	r2, #1
 8008b86:	e7e1      	b.n	8008b4c <_dtoa_r+0x9e4>
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	db04      	blt.n	8008b98 <_dtoa_r+0xa30>
 8008b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b90:	430b      	orrs	r3, r1
 8008b92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b94:	430b      	orrs	r3, r1
 8008b96:	d120      	bne.n	8008bda <_dtoa_r+0xa72>
 8008b98:	2a00      	cmp	r2, #0
 8008b9a:	dded      	ble.n	8008b78 <_dtoa_r+0xa10>
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	4658      	mov	r0, fp
 8008ba2:	f000 fbb3 	bl	800930c <__lshift>
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4681      	mov	r9, r0
 8008baa:	f000 fc1b 	bl	80093e4 <__mcmp>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	dc03      	bgt.n	8008bba <_dtoa_r+0xa52>
 8008bb2:	d1e1      	bne.n	8008b78 <_dtoa_r+0xa10>
 8008bb4:	f018 0f01 	tst.w	r8, #1
 8008bb8:	d0de      	beq.n	8008b78 <_dtoa_r+0xa10>
 8008bba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bbe:	d1d8      	bne.n	8008b72 <_dtoa_r+0xa0a>
 8008bc0:	9a00      	ldr	r2, [sp, #0]
 8008bc2:	2339      	movs	r3, #57	@ 0x39
 8008bc4:	7013      	strb	r3, [r2, #0]
 8008bc6:	4633      	mov	r3, r6
 8008bc8:	461e      	mov	r6, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bd0:	2a39      	cmp	r2, #57	@ 0x39
 8008bd2:	d052      	beq.n	8008c7a <_dtoa_r+0xb12>
 8008bd4:	3201      	adds	r2, #1
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	e612      	b.n	8008800 <_dtoa_r+0x698>
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	dd07      	ble.n	8008bee <_dtoa_r+0xa86>
 8008bde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008be2:	d0ed      	beq.n	8008bc0 <_dtoa_r+0xa58>
 8008be4:	9a00      	ldr	r2, [sp, #0]
 8008be6:	f108 0301 	add.w	r3, r8, #1
 8008bea:	7013      	strb	r3, [r2, #0]
 8008bec:	e608      	b.n	8008800 <_dtoa_r+0x698>
 8008bee:	9b07      	ldr	r3, [sp, #28]
 8008bf0:	9a07      	ldr	r2, [sp, #28]
 8008bf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d028      	beq.n	8008c4e <_dtoa_r+0xae6>
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	2300      	movs	r3, #0
 8008c00:	220a      	movs	r2, #10
 8008c02:	4658      	mov	r0, fp
 8008c04:	f000 f9d6 	bl	8008fb4 <__multadd>
 8008c08:	42af      	cmp	r7, r5
 8008c0a:	4681      	mov	r9, r0
 8008c0c:	f04f 0300 	mov.w	r3, #0
 8008c10:	f04f 020a 	mov.w	r2, #10
 8008c14:	4639      	mov	r1, r7
 8008c16:	4658      	mov	r0, fp
 8008c18:	d107      	bne.n	8008c2a <_dtoa_r+0xac2>
 8008c1a:	f000 f9cb 	bl	8008fb4 <__multadd>
 8008c1e:	4607      	mov	r7, r0
 8008c20:	4605      	mov	r5, r0
 8008c22:	9b07      	ldr	r3, [sp, #28]
 8008c24:	3301      	adds	r3, #1
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	e774      	b.n	8008b14 <_dtoa_r+0x9ac>
 8008c2a:	f000 f9c3 	bl	8008fb4 <__multadd>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4607      	mov	r7, r0
 8008c32:	2300      	movs	r3, #0
 8008c34:	220a      	movs	r2, #10
 8008c36:	4658      	mov	r0, fp
 8008c38:	f000 f9bc 	bl	8008fb4 <__multadd>
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	e7f0      	b.n	8008c22 <_dtoa_r+0xaba>
 8008c40:	9b00      	ldr	r3, [sp, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfcc      	ite	gt
 8008c46:	461e      	movgt	r6, r3
 8008c48:	2601      	movle	r6, #1
 8008c4a:	4456      	add	r6, sl
 8008c4c:	2700      	movs	r7, #0
 8008c4e:	4649      	mov	r1, r9
 8008c50:	2201      	movs	r2, #1
 8008c52:	4658      	mov	r0, fp
 8008c54:	f000 fb5a 	bl	800930c <__lshift>
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4681      	mov	r9, r0
 8008c5c:	f000 fbc2 	bl	80093e4 <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	dcb0      	bgt.n	8008bc6 <_dtoa_r+0xa5e>
 8008c64:	d102      	bne.n	8008c6c <_dtoa_r+0xb04>
 8008c66:	f018 0f01 	tst.w	r8, #1
 8008c6a:	d1ac      	bne.n	8008bc6 <_dtoa_r+0xa5e>
 8008c6c:	4633      	mov	r3, r6
 8008c6e:	461e      	mov	r6, r3
 8008c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c74:	2a30      	cmp	r2, #48	@ 0x30
 8008c76:	d0fa      	beq.n	8008c6e <_dtoa_r+0xb06>
 8008c78:	e5c2      	b.n	8008800 <_dtoa_r+0x698>
 8008c7a:	459a      	cmp	sl, r3
 8008c7c:	d1a4      	bne.n	8008bc8 <_dtoa_r+0xa60>
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	3301      	adds	r3, #1
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	2331      	movs	r3, #49	@ 0x31
 8008c86:	f88a 3000 	strb.w	r3, [sl]
 8008c8a:	e5b9      	b.n	8008800 <_dtoa_r+0x698>
 8008c8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008cec <_dtoa_r+0xb84>
 8008c92:	b11b      	cbz	r3, 8008c9c <_dtoa_r+0xb34>
 8008c94:	f10a 0308 	add.w	r3, sl, #8
 8008c98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	4650      	mov	r0, sl
 8008c9e:	b019      	add	sp, #100	@ 0x64
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	f77f ae37 	ble.w	800891a <_dtoa_r+0x7b2>
 8008cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	e655      	b.n	8008960 <_dtoa_r+0x7f8>
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f77f aed6 	ble.w	8008a68 <_dtoa_r+0x900>
 8008cbc:	4656      	mov	r6, sl
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4648      	mov	r0, r9
 8008cc2:	f7ff f9c6 	bl	8008052 <quorem>
 8008cc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cca:	f806 8b01 	strb.w	r8, [r6], #1
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	eba6 020a 	sub.w	r2, r6, sl
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	ddb3      	ble.n	8008c40 <_dtoa_r+0xad8>
 8008cd8:	4649      	mov	r1, r9
 8008cda:	2300      	movs	r3, #0
 8008cdc:	220a      	movs	r2, #10
 8008cde:	4658      	mov	r0, fp
 8008ce0:	f000 f968 	bl	8008fb4 <__multadd>
 8008ce4:	4681      	mov	r9, r0
 8008ce6:	e7ea      	b.n	8008cbe <_dtoa_r+0xb56>
 8008ce8:	0800a318 	.word	0x0800a318
 8008cec:	0800a29c 	.word	0x0800a29c

08008cf0 <_free_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	d041      	beq.n	8008d7c <_free_r+0x8c>
 8008cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cfc:	1f0c      	subs	r4, r1, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfb8      	it	lt
 8008d02:	18e4      	addlt	r4, r4, r3
 8008d04:	f000 f8e8 	bl	8008ed8 <__malloc_lock>
 8008d08:	4a1d      	ldr	r2, [pc, #116]	@ (8008d80 <_free_r+0x90>)
 8008d0a:	6813      	ldr	r3, [r2, #0]
 8008d0c:	b933      	cbnz	r3, 8008d1c <_free_r+0x2c>
 8008d0e:	6063      	str	r3, [r4, #4]
 8008d10:	6014      	str	r4, [r2, #0]
 8008d12:	4628      	mov	r0, r5
 8008d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d18:	f000 b8e4 	b.w	8008ee4 <__malloc_unlock>
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	d908      	bls.n	8008d32 <_free_r+0x42>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	1821      	adds	r1, r4, r0
 8008d24:	428b      	cmp	r3, r1
 8008d26:	bf01      	itttt	eq
 8008d28:	6819      	ldreq	r1, [r3, #0]
 8008d2a:	685b      	ldreq	r3, [r3, #4]
 8008d2c:	1809      	addeq	r1, r1, r0
 8008d2e:	6021      	streq	r1, [r4, #0]
 8008d30:	e7ed      	b.n	8008d0e <_free_r+0x1e>
 8008d32:	461a      	mov	r2, r3
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	b10b      	cbz	r3, 8008d3c <_free_r+0x4c>
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	d9fa      	bls.n	8008d32 <_free_r+0x42>
 8008d3c:	6811      	ldr	r1, [r2, #0]
 8008d3e:	1850      	adds	r0, r2, r1
 8008d40:	42a0      	cmp	r0, r4
 8008d42:	d10b      	bne.n	8008d5c <_free_r+0x6c>
 8008d44:	6820      	ldr	r0, [r4, #0]
 8008d46:	4401      	add	r1, r0
 8008d48:	1850      	adds	r0, r2, r1
 8008d4a:	4283      	cmp	r3, r0
 8008d4c:	6011      	str	r1, [r2, #0]
 8008d4e:	d1e0      	bne.n	8008d12 <_free_r+0x22>
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	6053      	str	r3, [r2, #4]
 8008d56:	4408      	add	r0, r1
 8008d58:	6010      	str	r0, [r2, #0]
 8008d5a:	e7da      	b.n	8008d12 <_free_r+0x22>
 8008d5c:	d902      	bls.n	8008d64 <_free_r+0x74>
 8008d5e:	230c      	movs	r3, #12
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	e7d6      	b.n	8008d12 <_free_r+0x22>
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	1821      	adds	r1, r4, r0
 8008d68:	428b      	cmp	r3, r1
 8008d6a:	bf04      	itt	eq
 8008d6c:	6819      	ldreq	r1, [r3, #0]
 8008d6e:	685b      	ldreq	r3, [r3, #4]
 8008d70:	6063      	str	r3, [r4, #4]
 8008d72:	bf04      	itt	eq
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	6054      	str	r4, [r2, #4]
 8008d7a:	e7ca      	b.n	8008d12 <_free_r+0x22>
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	bf00      	nop
 8008d80:	2000070c 	.word	0x2000070c

08008d84 <malloc>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	@ (8008d90 <malloc+0xc>)
 8008d86:	4601      	mov	r1, r0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f000 b825 	b.w	8008dd8 <_malloc_r>
 8008d8e:	bf00      	nop
 8008d90:	20000030 	.word	0x20000030

08008d94 <sbrk_aligned>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	4e0f      	ldr	r6, [pc, #60]	@ (8008dd4 <sbrk_aligned+0x40>)
 8008d98:	460c      	mov	r4, r1
 8008d9a:	6831      	ldr	r1, [r6, #0]
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	b911      	cbnz	r1, 8008da6 <sbrk_aligned+0x12>
 8008da0:	f000 fe46 	bl	8009a30 <_sbrk_r>
 8008da4:	6030      	str	r0, [r6, #0]
 8008da6:	4621      	mov	r1, r4
 8008da8:	4628      	mov	r0, r5
 8008daa:	f000 fe41 	bl	8009a30 <_sbrk_r>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	d103      	bne.n	8008dba <sbrk_aligned+0x26>
 8008db2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008db6:	4620      	mov	r0, r4
 8008db8:	bd70      	pop	{r4, r5, r6, pc}
 8008dba:	1cc4      	adds	r4, r0, #3
 8008dbc:	f024 0403 	bic.w	r4, r4, #3
 8008dc0:	42a0      	cmp	r0, r4
 8008dc2:	d0f8      	beq.n	8008db6 <sbrk_aligned+0x22>
 8008dc4:	1a21      	subs	r1, r4, r0
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 fe32 	bl	8009a30 <_sbrk_r>
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d1f2      	bne.n	8008db6 <sbrk_aligned+0x22>
 8008dd0:	e7ef      	b.n	8008db2 <sbrk_aligned+0x1e>
 8008dd2:	bf00      	nop
 8008dd4:	20000708 	.word	0x20000708

08008dd8 <_malloc_r>:
 8008dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ddc:	1ccd      	adds	r5, r1, #3
 8008dde:	f025 0503 	bic.w	r5, r5, #3
 8008de2:	3508      	adds	r5, #8
 8008de4:	2d0c      	cmp	r5, #12
 8008de6:	bf38      	it	cc
 8008de8:	250c      	movcc	r5, #12
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	4606      	mov	r6, r0
 8008dee:	db01      	blt.n	8008df4 <_malloc_r+0x1c>
 8008df0:	42a9      	cmp	r1, r5
 8008df2:	d904      	bls.n	8008dfe <_malloc_r+0x26>
 8008df4:	230c      	movs	r3, #12
 8008df6:	6033      	str	r3, [r6, #0]
 8008df8:	2000      	movs	r0, #0
 8008dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ed4 <_malloc_r+0xfc>
 8008e02:	f000 f869 	bl	8008ed8 <__malloc_lock>
 8008e06:	f8d8 3000 	ldr.w	r3, [r8]
 8008e0a:	461c      	mov	r4, r3
 8008e0c:	bb44      	cbnz	r4, 8008e60 <_malloc_r+0x88>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4630      	mov	r0, r6
 8008e12:	f7ff ffbf 	bl	8008d94 <sbrk_aligned>
 8008e16:	1c43      	adds	r3, r0, #1
 8008e18:	4604      	mov	r4, r0
 8008e1a:	d158      	bne.n	8008ece <_malloc_r+0xf6>
 8008e1c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e20:	4627      	mov	r7, r4
 8008e22:	2f00      	cmp	r7, #0
 8008e24:	d143      	bne.n	8008eae <_malloc_r+0xd6>
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	d04b      	beq.n	8008ec2 <_malloc_r+0xea>
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	eb04 0903 	add.w	r9, r4, r3
 8008e34:	f000 fdfc 	bl	8009a30 <_sbrk_r>
 8008e38:	4581      	cmp	r9, r0
 8008e3a:	d142      	bne.n	8008ec2 <_malloc_r+0xea>
 8008e3c:	6821      	ldr	r1, [r4, #0]
 8008e3e:	1a6d      	subs	r5, r5, r1
 8008e40:	4629      	mov	r1, r5
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7ff ffa6 	bl	8008d94 <sbrk_aligned>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d03a      	beq.n	8008ec2 <_malloc_r+0xea>
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	442b      	add	r3, r5
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	f8d8 3000 	ldr.w	r3, [r8]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	bb62      	cbnz	r2, 8008eb4 <_malloc_r+0xdc>
 8008e5a:	f8c8 7000 	str.w	r7, [r8]
 8008e5e:	e00f      	b.n	8008e80 <_malloc_r+0xa8>
 8008e60:	6822      	ldr	r2, [r4, #0]
 8008e62:	1b52      	subs	r2, r2, r5
 8008e64:	d420      	bmi.n	8008ea8 <_malloc_r+0xd0>
 8008e66:	2a0b      	cmp	r2, #11
 8008e68:	d917      	bls.n	8008e9a <_malloc_r+0xc2>
 8008e6a:	1961      	adds	r1, r4, r5
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	6025      	str	r5, [r4, #0]
 8008e70:	bf18      	it	ne
 8008e72:	6059      	strne	r1, [r3, #4]
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	bf08      	it	eq
 8008e78:	f8c8 1000 	streq.w	r1, [r8]
 8008e7c:	5162      	str	r2, [r4, r5]
 8008e7e:	604b      	str	r3, [r1, #4]
 8008e80:	4630      	mov	r0, r6
 8008e82:	f000 f82f 	bl	8008ee4 <__malloc_unlock>
 8008e86:	f104 000b 	add.w	r0, r4, #11
 8008e8a:	1d23      	adds	r3, r4, #4
 8008e8c:	f020 0007 	bic.w	r0, r0, #7
 8008e90:	1ac2      	subs	r2, r0, r3
 8008e92:	bf1c      	itt	ne
 8008e94:	1a1b      	subne	r3, r3, r0
 8008e96:	50a3      	strne	r3, [r4, r2]
 8008e98:	e7af      	b.n	8008dfa <_malloc_r+0x22>
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	bf0c      	ite	eq
 8008ea0:	f8c8 2000 	streq.w	r2, [r8]
 8008ea4:	605a      	strne	r2, [r3, #4]
 8008ea6:	e7eb      	b.n	8008e80 <_malloc_r+0xa8>
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	6864      	ldr	r4, [r4, #4]
 8008eac:	e7ae      	b.n	8008e0c <_malloc_r+0x34>
 8008eae:	463c      	mov	r4, r7
 8008eb0:	687f      	ldr	r7, [r7, #4]
 8008eb2:	e7b6      	b.n	8008e22 <_malloc_r+0x4a>
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d1fb      	bne.n	8008eb4 <_malloc_r+0xdc>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	6053      	str	r3, [r2, #4]
 8008ec0:	e7de      	b.n	8008e80 <_malloc_r+0xa8>
 8008ec2:	230c      	movs	r3, #12
 8008ec4:	6033      	str	r3, [r6, #0]
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f000 f80c 	bl	8008ee4 <__malloc_unlock>
 8008ecc:	e794      	b.n	8008df8 <_malloc_r+0x20>
 8008ece:	6005      	str	r5, [r0, #0]
 8008ed0:	e7d6      	b.n	8008e80 <_malloc_r+0xa8>
 8008ed2:	bf00      	nop
 8008ed4:	2000070c 	.word	0x2000070c

08008ed8 <__malloc_lock>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	@ (8008ee0 <__malloc_lock+0x8>)
 8008eda:	f7ff b8b8 	b.w	800804e <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	20000704 	.word	0x20000704

08008ee4 <__malloc_unlock>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	@ (8008eec <__malloc_unlock+0x8>)
 8008ee6:	f7ff b8b3 	b.w	8008050 <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	20000704 	.word	0x20000704

08008ef0 <_Balloc>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	69c6      	ldr	r6, [r0, #28]
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	b976      	cbnz	r6, 8008f18 <_Balloc+0x28>
 8008efa:	2010      	movs	r0, #16
 8008efc:	f7ff ff42 	bl	8008d84 <malloc>
 8008f00:	4602      	mov	r2, r0
 8008f02:	61e0      	str	r0, [r4, #28]
 8008f04:	b920      	cbnz	r0, 8008f10 <_Balloc+0x20>
 8008f06:	4b18      	ldr	r3, [pc, #96]	@ (8008f68 <_Balloc+0x78>)
 8008f08:	4818      	ldr	r0, [pc, #96]	@ (8008f6c <_Balloc+0x7c>)
 8008f0a:	216b      	movs	r1, #107	@ 0x6b
 8008f0c:	f000 fdae 	bl	8009a6c <__assert_func>
 8008f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f14:	6006      	str	r6, [r0, #0]
 8008f16:	60c6      	str	r6, [r0, #12]
 8008f18:	69e6      	ldr	r6, [r4, #28]
 8008f1a:	68f3      	ldr	r3, [r6, #12]
 8008f1c:	b183      	cbz	r3, 8008f40 <_Balloc+0x50>
 8008f1e:	69e3      	ldr	r3, [r4, #28]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f26:	b9b8      	cbnz	r0, 8008f58 <_Balloc+0x68>
 8008f28:	2101      	movs	r1, #1
 8008f2a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f2e:	1d72      	adds	r2, r6, #5
 8008f30:	0092      	lsls	r2, r2, #2
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fdb8 	bl	8009aa8 <_calloc_r>
 8008f38:	b160      	cbz	r0, 8008f54 <_Balloc+0x64>
 8008f3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f3e:	e00e      	b.n	8008f5e <_Balloc+0x6e>
 8008f40:	2221      	movs	r2, #33	@ 0x21
 8008f42:	2104      	movs	r1, #4
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fdaf 	bl	8009aa8 <_calloc_r>
 8008f4a:	69e3      	ldr	r3, [r4, #28]
 8008f4c:	60f0      	str	r0, [r6, #12]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e4      	bne.n	8008f1e <_Balloc+0x2e>
 8008f54:	2000      	movs	r0, #0
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	6802      	ldr	r2, [r0, #0]
 8008f5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f64:	e7f7      	b.n	8008f56 <_Balloc+0x66>
 8008f66:	bf00      	nop
 8008f68:	0800a2a9 	.word	0x0800a2a9
 8008f6c:	0800a329 	.word	0x0800a329

08008f70 <_Bfree>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	69c6      	ldr	r6, [r0, #28]
 8008f74:	4605      	mov	r5, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	b976      	cbnz	r6, 8008f98 <_Bfree+0x28>
 8008f7a:	2010      	movs	r0, #16
 8008f7c:	f7ff ff02 	bl	8008d84 <malloc>
 8008f80:	4602      	mov	r2, r0
 8008f82:	61e8      	str	r0, [r5, #28]
 8008f84:	b920      	cbnz	r0, 8008f90 <_Bfree+0x20>
 8008f86:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <_Bfree+0x3c>)
 8008f88:	4809      	ldr	r0, [pc, #36]	@ (8008fb0 <_Bfree+0x40>)
 8008f8a:	218f      	movs	r1, #143	@ 0x8f
 8008f8c:	f000 fd6e 	bl	8009a6c <__assert_func>
 8008f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f94:	6006      	str	r6, [r0, #0]
 8008f96:	60c6      	str	r6, [r0, #12]
 8008f98:	b13c      	cbz	r4, 8008faa <_Bfree+0x3a>
 8008f9a:	69eb      	ldr	r3, [r5, #28]
 8008f9c:	6862      	ldr	r2, [r4, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fa4:	6021      	str	r1, [r4, #0]
 8008fa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	0800a2a9 	.word	0x0800a2a9
 8008fb0:	0800a329 	.word	0x0800a329

08008fb4 <__multadd>:
 8008fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb8:	690d      	ldr	r5, [r1, #16]
 8008fba:	4607      	mov	r7, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	461e      	mov	r6, r3
 8008fc0:	f101 0c14 	add.w	ip, r1, #20
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f8dc 3000 	ldr.w	r3, [ip]
 8008fca:	b299      	uxth	r1, r3
 8008fcc:	fb02 6101 	mla	r1, r2, r1, r6
 8008fd0:	0c1e      	lsrs	r6, r3, #16
 8008fd2:	0c0b      	lsrs	r3, r1, #16
 8008fd4:	fb02 3306 	mla	r3, r2, r6, r3
 8008fd8:	b289      	uxth	r1, r1
 8008fda:	3001      	adds	r0, #1
 8008fdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fe0:	4285      	cmp	r5, r0
 8008fe2:	f84c 1b04 	str.w	r1, [ip], #4
 8008fe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fea:	dcec      	bgt.n	8008fc6 <__multadd+0x12>
 8008fec:	b30e      	cbz	r6, 8009032 <__multadd+0x7e>
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	dc19      	bgt.n	8009028 <__multadd+0x74>
 8008ff4:	6861      	ldr	r1, [r4, #4]
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	f7ff ff79 	bl	8008ef0 <_Balloc>
 8008ffe:	4680      	mov	r8, r0
 8009000:	b928      	cbnz	r0, 800900e <__multadd+0x5a>
 8009002:	4602      	mov	r2, r0
 8009004:	4b0c      	ldr	r3, [pc, #48]	@ (8009038 <__multadd+0x84>)
 8009006:	480d      	ldr	r0, [pc, #52]	@ (800903c <__multadd+0x88>)
 8009008:	21ba      	movs	r1, #186	@ 0xba
 800900a:	f000 fd2f 	bl	8009a6c <__assert_func>
 800900e:	6922      	ldr	r2, [r4, #16]
 8009010:	3202      	adds	r2, #2
 8009012:	f104 010c 	add.w	r1, r4, #12
 8009016:	0092      	lsls	r2, r2, #2
 8009018:	300c      	adds	r0, #12
 800901a:	f000 fd19 	bl	8009a50 <memcpy>
 800901e:	4621      	mov	r1, r4
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ffa5 	bl	8008f70 <_Bfree>
 8009026:	4644      	mov	r4, r8
 8009028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800902c:	3501      	adds	r5, #1
 800902e:	615e      	str	r6, [r3, #20]
 8009030:	6125      	str	r5, [r4, #16]
 8009032:	4620      	mov	r0, r4
 8009034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009038:	0800a318 	.word	0x0800a318
 800903c:	0800a329 	.word	0x0800a329

08009040 <__hi0bits>:
 8009040:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009044:	4603      	mov	r3, r0
 8009046:	bf36      	itet	cc
 8009048:	0403      	lslcc	r3, r0, #16
 800904a:	2000      	movcs	r0, #0
 800904c:	2010      	movcc	r0, #16
 800904e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009052:	bf3c      	itt	cc
 8009054:	021b      	lslcc	r3, r3, #8
 8009056:	3008      	addcc	r0, #8
 8009058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800905c:	bf3c      	itt	cc
 800905e:	011b      	lslcc	r3, r3, #4
 8009060:	3004      	addcc	r0, #4
 8009062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009066:	bf3c      	itt	cc
 8009068:	009b      	lslcc	r3, r3, #2
 800906a:	3002      	addcc	r0, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	db05      	blt.n	800907c <__hi0bits+0x3c>
 8009070:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009074:	f100 0001 	add.w	r0, r0, #1
 8009078:	bf08      	it	eq
 800907a:	2020      	moveq	r0, #32
 800907c:	4770      	bx	lr

0800907e <__lo0bits>:
 800907e:	6803      	ldr	r3, [r0, #0]
 8009080:	4602      	mov	r2, r0
 8009082:	f013 0007 	ands.w	r0, r3, #7
 8009086:	d00b      	beq.n	80090a0 <__lo0bits+0x22>
 8009088:	07d9      	lsls	r1, r3, #31
 800908a:	d421      	bmi.n	80090d0 <__lo0bits+0x52>
 800908c:	0798      	lsls	r0, r3, #30
 800908e:	bf49      	itett	mi
 8009090:	085b      	lsrmi	r3, r3, #1
 8009092:	089b      	lsrpl	r3, r3, #2
 8009094:	2001      	movmi	r0, #1
 8009096:	6013      	strmi	r3, [r2, #0]
 8009098:	bf5c      	itt	pl
 800909a:	6013      	strpl	r3, [r2, #0]
 800909c:	2002      	movpl	r0, #2
 800909e:	4770      	bx	lr
 80090a0:	b299      	uxth	r1, r3
 80090a2:	b909      	cbnz	r1, 80090a8 <__lo0bits+0x2a>
 80090a4:	0c1b      	lsrs	r3, r3, #16
 80090a6:	2010      	movs	r0, #16
 80090a8:	b2d9      	uxtb	r1, r3
 80090aa:	b909      	cbnz	r1, 80090b0 <__lo0bits+0x32>
 80090ac:	3008      	adds	r0, #8
 80090ae:	0a1b      	lsrs	r3, r3, #8
 80090b0:	0719      	lsls	r1, r3, #28
 80090b2:	bf04      	itt	eq
 80090b4:	091b      	lsreq	r3, r3, #4
 80090b6:	3004      	addeq	r0, #4
 80090b8:	0799      	lsls	r1, r3, #30
 80090ba:	bf04      	itt	eq
 80090bc:	089b      	lsreq	r3, r3, #2
 80090be:	3002      	addeq	r0, #2
 80090c0:	07d9      	lsls	r1, r3, #31
 80090c2:	d403      	bmi.n	80090cc <__lo0bits+0x4e>
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	f100 0001 	add.w	r0, r0, #1
 80090ca:	d003      	beq.n	80090d4 <__lo0bits+0x56>
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	4770      	bx	lr
 80090d0:	2000      	movs	r0, #0
 80090d2:	4770      	bx	lr
 80090d4:	2020      	movs	r0, #32
 80090d6:	4770      	bx	lr

080090d8 <__i2b>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	460c      	mov	r4, r1
 80090dc:	2101      	movs	r1, #1
 80090de:	f7ff ff07 	bl	8008ef0 <_Balloc>
 80090e2:	4602      	mov	r2, r0
 80090e4:	b928      	cbnz	r0, 80090f2 <__i2b+0x1a>
 80090e6:	4b05      	ldr	r3, [pc, #20]	@ (80090fc <__i2b+0x24>)
 80090e8:	4805      	ldr	r0, [pc, #20]	@ (8009100 <__i2b+0x28>)
 80090ea:	f240 1145 	movw	r1, #325	@ 0x145
 80090ee:	f000 fcbd 	bl	8009a6c <__assert_func>
 80090f2:	2301      	movs	r3, #1
 80090f4:	6144      	str	r4, [r0, #20]
 80090f6:	6103      	str	r3, [r0, #16]
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	bf00      	nop
 80090fc:	0800a318 	.word	0x0800a318
 8009100:	0800a329 	.word	0x0800a329

08009104 <__multiply>:
 8009104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009108:	4614      	mov	r4, r2
 800910a:	690a      	ldr	r2, [r1, #16]
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	429a      	cmp	r2, r3
 8009110:	bfa8      	it	ge
 8009112:	4623      	movge	r3, r4
 8009114:	460f      	mov	r7, r1
 8009116:	bfa4      	itt	ge
 8009118:	460c      	movge	r4, r1
 800911a:	461f      	movge	r7, r3
 800911c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009120:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009124:	68a3      	ldr	r3, [r4, #8]
 8009126:	6861      	ldr	r1, [r4, #4]
 8009128:	eb0a 0609 	add.w	r6, sl, r9
 800912c:	42b3      	cmp	r3, r6
 800912e:	b085      	sub	sp, #20
 8009130:	bfb8      	it	lt
 8009132:	3101      	addlt	r1, #1
 8009134:	f7ff fedc 	bl	8008ef0 <_Balloc>
 8009138:	b930      	cbnz	r0, 8009148 <__multiply+0x44>
 800913a:	4602      	mov	r2, r0
 800913c:	4b44      	ldr	r3, [pc, #272]	@ (8009250 <__multiply+0x14c>)
 800913e:	4845      	ldr	r0, [pc, #276]	@ (8009254 <__multiply+0x150>)
 8009140:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009144:	f000 fc92 	bl	8009a6c <__assert_func>
 8009148:	f100 0514 	add.w	r5, r0, #20
 800914c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009150:	462b      	mov	r3, r5
 8009152:	2200      	movs	r2, #0
 8009154:	4543      	cmp	r3, r8
 8009156:	d321      	bcc.n	800919c <__multiply+0x98>
 8009158:	f107 0114 	add.w	r1, r7, #20
 800915c:	f104 0214 	add.w	r2, r4, #20
 8009160:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009164:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	1b13      	subs	r3, r2, r4
 800916c:	3b15      	subs	r3, #21
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	3304      	adds	r3, #4
 8009174:	f104 0715 	add.w	r7, r4, #21
 8009178:	42ba      	cmp	r2, r7
 800917a:	bf38      	it	cc
 800917c:	2304      	movcc	r3, #4
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	9b02      	ldr	r3, [sp, #8]
 8009182:	9103      	str	r1, [sp, #12]
 8009184:	428b      	cmp	r3, r1
 8009186:	d80c      	bhi.n	80091a2 <__multiply+0x9e>
 8009188:	2e00      	cmp	r6, #0
 800918a:	dd03      	ble.n	8009194 <__multiply+0x90>
 800918c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009190:	2b00      	cmp	r3, #0
 8009192:	d05b      	beq.n	800924c <__multiply+0x148>
 8009194:	6106      	str	r6, [r0, #16]
 8009196:	b005      	add	sp, #20
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	f843 2b04 	str.w	r2, [r3], #4
 80091a0:	e7d8      	b.n	8009154 <__multiply+0x50>
 80091a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80091a6:	f1ba 0f00 	cmp.w	sl, #0
 80091aa:	d024      	beq.n	80091f6 <__multiply+0xf2>
 80091ac:	f104 0e14 	add.w	lr, r4, #20
 80091b0:	46a9      	mov	r9, r5
 80091b2:	f04f 0c00 	mov.w	ip, #0
 80091b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091ba:	f8d9 3000 	ldr.w	r3, [r9]
 80091be:	fa1f fb87 	uxth.w	fp, r7
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80091c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80091cc:	f8d9 7000 	ldr.w	r7, [r9]
 80091d0:	4463      	add	r3, ip
 80091d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80091da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80091de:	b29b      	uxth	r3, r3
 80091e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091e4:	4572      	cmp	r2, lr
 80091e6:	f849 3b04 	str.w	r3, [r9], #4
 80091ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091ee:	d8e2      	bhi.n	80091b6 <__multiply+0xb2>
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	f845 c003 	str.w	ip, [r5, r3]
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091fc:	3104      	adds	r1, #4
 80091fe:	f1b9 0f00 	cmp.w	r9, #0
 8009202:	d021      	beq.n	8009248 <__multiply+0x144>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	f104 0c14 	add.w	ip, r4, #20
 800920a:	46ae      	mov	lr, r5
 800920c:	f04f 0a00 	mov.w	sl, #0
 8009210:	f8bc b000 	ldrh.w	fp, [ip]
 8009214:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009218:	fb09 770b 	mla	r7, r9, fp, r7
 800921c:	4457      	add	r7, sl
 800921e:	b29b      	uxth	r3, r3
 8009220:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009224:	f84e 3b04 	str.w	r3, [lr], #4
 8009228:	f85c 3b04 	ldr.w	r3, [ip], #4
 800922c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009230:	f8be 3000 	ldrh.w	r3, [lr]
 8009234:	fb09 330a 	mla	r3, r9, sl, r3
 8009238:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800923c:	4562      	cmp	r2, ip
 800923e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009242:	d8e5      	bhi.n	8009210 <__multiply+0x10c>
 8009244:	9f01      	ldr	r7, [sp, #4]
 8009246:	51eb      	str	r3, [r5, r7]
 8009248:	3504      	adds	r5, #4
 800924a:	e799      	b.n	8009180 <__multiply+0x7c>
 800924c:	3e01      	subs	r6, #1
 800924e:	e79b      	b.n	8009188 <__multiply+0x84>
 8009250:	0800a318 	.word	0x0800a318
 8009254:	0800a329 	.word	0x0800a329

08009258 <__pow5mult>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	4615      	mov	r5, r2
 800925e:	f012 0203 	ands.w	r2, r2, #3
 8009262:	4607      	mov	r7, r0
 8009264:	460e      	mov	r6, r1
 8009266:	d007      	beq.n	8009278 <__pow5mult+0x20>
 8009268:	4c25      	ldr	r4, [pc, #148]	@ (8009300 <__pow5mult+0xa8>)
 800926a:	3a01      	subs	r2, #1
 800926c:	2300      	movs	r3, #0
 800926e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009272:	f7ff fe9f 	bl	8008fb4 <__multadd>
 8009276:	4606      	mov	r6, r0
 8009278:	10ad      	asrs	r5, r5, #2
 800927a:	d03d      	beq.n	80092f8 <__pow5mult+0xa0>
 800927c:	69fc      	ldr	r4, [r7, #28]
 800927e:	b97c      	cbnz	r4, 80092a0 <__pow5mult+0x48>
 8009280:	2010      	movs	r0, #16
 8009282:	f7ff fd7f 	bl	8008d84 <malloc>
 8009286:	4602      	mov	r2, r0
 8009288:	61f8      	str	r0, [r7, #28]
 800928a:	b928      	cbnz	r0, 8009298 <__pow5mult+0x40>
 800928c:	4b1d      	ldr	r3, [pc, #116]	@ (8009304 <__pow5mult+0xac>)
 800928e:	481e      	ldr	r0, [pc, #120]	@ (8009308 <__pow5mult+0xb0>)
 8009290:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009294:	f000 fbea 	bl	8009a6c <__assert_func>
 8009298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	60c4      	str	r4, [r0, #12]
 80092a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a8:	b94c      	cbnz	r4, 80092be <__pow5mult+0x66>
 80092aa:	f240 2171 	movw	r1, #625	@ 0x271
 80092ae:	4638      	mov	r0, r7
 80092b0:	f7ff ff12 	bl	80090d8 <__i2b>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ba:	4604      	mov	r4, r0
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	f04f 0900 	mov.w	r9, #0
 80092c2:	07eb      	lsls	r3, r5, #31
 80092c4:	d50a      	bpl.n	80092dc <__pow5mult+0x84>
 80092c6:	4631      	mov	r1, r6
 80092c8:	4622      	mov	r2, r4
 80092ca:	4638      	mov	r0, r7
 80092cc:	f7ff ff1a 	bl	8009104 <__multiply>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4680      	mov	r8, r0
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff fe4b 	bl	8008f70 <_Bfree>
 80092da:	4646      	mov	r6, r8
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	d00b      	beq.n	80092f8 <__pow5mult+0xa0>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	b938      	cbnz	r0, 80092f4 <__pow5mult+0x9c>
 80092e4:	4622      	mov	r2, r4
 80092e6:	4621      	mov	r1, r4
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ff0b 	bl	8009104 <__multiply>
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f8c0 9000 	str.w	r9, [r0]
 80092f4:	4604      	mov	r4, r0
 80092f6:	e7e4      	b.n	80092c2 <__pow5mult+0x6a>
 80092f8:	4630      	mov	r0, r6
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fe:	bf00      	nop
 8009300:	0800a384 	.word	0x0800a384
 8009304:	0800a2a9 	.word	0x0800a2a9
 8009308:	0800a329 	.word	0x0800a329

0800930c <__lshift>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	6849      	ldr	r1, [r1, #4]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	4607      	mov	r7, r0
 800931e:	4691      	mov	r9, r2
 8009320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009324:	f108 0601 	add.w	r6, r8, #1
 8009328:	42b3      	cmp	r3, r6
 800932a:	db0b      	blt.n	8009344 <__lshift+0x38>
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff fddf 	bl	8008ef0 <_Balloc>
 8009332:	4605      	mov	r5, r0
 8009334:	b948      	cbnz	r0, 800934a <__lshift+0x3e>
 8009336:	4602      	mov	r2, r0
 8009338:	4b28      	ldr	r3, [pc, #160]	@ (80093dc <__lshift+0xd0>)
 800933a:	4829      	ldr	r0, [pc, #164]	@ (80093e0 <__lshift+0xd4>)
 800933c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009340:	f000 fb94 	bl	8009a6c <__assert_func>
 8009344:	3101      	adds	r1, #1
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	e7ee      	b.n	8009328 <__lshift+0x1c>
 800934a:	2300      	movs	r3, #0
 800934c:	f100 0114 	add.w	r1, r0, #20
 8009350:	f100 0210 	add.w	r2, r0, #16
 8009354:	4618      	mov	r0, r3
 8009356:	4553      	cmp	r3, sl
 8009358:	db33      	blt.n	80093c2 <__lshift+0xb6>
 800935a:	6920      	ldr	r0, [r4, #16]
 800935c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009360:	f104 0314 	add.w	r3, r4, #20
 8009364:	f019 091f 	ands.w	r9, r9, #31
 8009368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800936c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009370:	d02b      	beq.n	80093ca <__lshift+0xbe>
 8009372:	f1c9 0e20 	rsb	lr, r9, #32
 8009376:	468a      	mov	sl, r1
 8009378:	2200      	movs	r2, #0
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	fa00 f009 	lsl.w	r0, r0, r9
 8009380:	4310      	orrs	r0, r2
 8009382:	f84a 0b04 	str.w	r0, [sl], #4
 8009386:	f853 2b04 	ldr.w	r2, [r3], #4
 800938a:	459c      	cmp	ip, r3
 800938c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009390:	d8f3      	bhi.n	800937a <__lshift+0x6e>
 8009392:	ebac 0304 	sub.w	r3, ip, r4
 8009396:	3b15      	subs	r3, #21
 8009398:	f023 0303 	bic.w	r3, r3, #3
 800939c:	3304      	adds	r3, #4
 800939e:	f104 0015 	add.w	r0, r4, #21
 80093a2:	4584      	cmp	ip, r0
 80093a4:	bf38      	it	cc
 80093a6:	2304      	movcc	r3, #4
 80093a8:	50ca      	str	r2, [r1, r3]
 80093aa:	b10a      	cbz	r2, 80093b0 <__lshift+0xa4>
 80093ac:	f108 0602 	add.w	r6, r8, #2
 80093b0:	3e01      	subs	r6, #1
 80093b2:	4638      	mov	r0, r7
 80093b4:	612e      	str	r6, [r5, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f7ff fdda 	bl	8008f70 <_Bfree>
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7c5      	b.n	8009356 <__lshift+0x4a>
 80093ca:	3904      	subs	r1, #4
 80093cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d4:	459c      	cmp	ip, r3
 80093d6:	d8f9      	bhi.n	80093cc <__lshift+0xc0>
 80093d8:	e7ea      	b.n	80093b0 <__lshift+0xa4>
 80093da:	bf00      	nop
 80093dc:	0800a318 	.word	0x0800a318
 80093e0:	0800a329 	.word	0x0800a329

080093e4 <__mcmp>:
 80093e4:	690a      	ldr	r2, [r1, #16]
 80093e6:	4603      	mov	r3, r0
 80093e8:	6900      	ldr	r0, [r0, #16]
 80093ea:	1a80      	subs	r0, r0, r2
 80093ec:	b530      	push	{r4, r5, lr}
 80093ee:	d10e      	bne.n	800940e <__mcmp+0x2a>
 80093f0:	3314      	adds	r3, #20
 80093f2:	3114      	adds	r1, #20
 80093f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009404:	4295      	cmp	r5, r2
 8009406:	d003      	beq.n	8009410 <__mcmp+0x2c>
 8009408:	d205      	bcs.n	8009416 <__mcmp+0x32>
 800940a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800940e:	bd30      	pop	{r4, r5, pc}
 8009410:	42a3      	cmp	r3, r4
 8009412:	d3f3      	bcc.n	80093fc <__mcmp+0x18>
 8009414:	e7fb      	b.n	800940e <__mcmp+0x2a>
 8009416:	2001      	movs	r0, #1
 8009418:	e7f9      	b.n	800940e <__mcmp+0x2a>
	...

0800941c <__mdiff>:
 800941c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	4689      	mov	r9, r1
 8009422:	4606      	mov	r6, r0
 8009424:	4611      	mov	r1, r2
 8009426:	4648      	mov	r0, r9
 8009428:	4614      	mov	r4, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d112      	bne.n	8009458 <__mdiff+0x3c>
 8009432:	4629      	mov	r1, r5
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fd5b 	bl	8008ef0 <_Balloc>
 800943a:	4602      	mov	r2, r0
 800943c:	b928      	cbnz	r0, 800944a <__mdiff+0x2e>
 800943e:	4b3f      	ldr	r3, [pc, #252]	@ (800953c <__mdiff+0x120>)
 8009440:	f240 2137 	movw	r1, #567	@ 0x237
 8009444:	483e      	ldr	r0, [pc, #248]	@ (8009540 <__mdiff+0x124>)
 8009446:	f000 fb11 	bl	8009a6c <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009450:	4610      	mov	r0, r2
 8009452:	b003      	add	sp, #12
 8009454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009458:	bfbc      	itt	lt
 800945a:	464b      	movlt	r3, r9
 800945c:	46a1      	movlt	r9, r4
 800945e:	4630      	mov	r0, r6
 8009460:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009464:	bfba      	itte	lt
 8009466:	461c      	movlt	r4, r3
 8009468:	2501      	movlt	r5, #1
 800946a:	2500      	movge	r5, #0
 800946c:	f7ff fd40 	bl	8008ef0 <_Balloc>
 8009470:	4602      	mov	r2, r0
 8009472:	b918      	cbnz	r0, 800947c <__mdiff+0x60>
 8009474:	4b31      	ldr	r3, [pc, #196]	@ (800953c <__mdiff+0x120>)
 8009476:	f240 2145 	movw	r1, #581	@ 0x245
 800947a:	e7e3      	b.n	8009444 <__mdiff+0x28>
 800947c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009480:	6926      	ldr	r6, [r4, #16]
 8009482:	60c5      	str	r5, [r0, #12]
 8009484:	f109 0310 	add.w	r3, r9, #16
 8009488:	f109 0514 	add.w	r5, r9, #20
 800948c:	f104 0e14 	add.w	lr, r4, #20
 8009490:	f100 0b14 	add.w	fp, r0, #20
 8009494:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009498:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	46d9      	mov	r9, fp
 80094a0:	f04f 0c00 	mov.w	ip, #0
 80094a4:	9b01      	ldr	r3, [sp, #4]
 80094a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	fa1f f38a 	uxth.w	r3, sl
 80094b4:	4619      	mov	r1, r3
 80094b6:	b283      	uxth	r3, r0
 80094b8:	1acb      	subs	r3, r1, r3
 80094ba:	0c00      	lsrs	r0, r0, #16
 80094bc:	4463      	add	r3, ip
 80094be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094cc:	4576      	cmp	r6, lr
 80094ce:	f849 3b04 	str.w	r3, [r9], #4
 80094d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094d6:	d8e5      	bhi.n	80094a4 <__mdiff+0x88>
 80094d8:	1b33      	subs	r3, r6, r4
 80094da:	3b15      	subs	r3, #21
 80094dc:	f023 0303 	bic.w	r3, r3, #3
 80094e0:	3415      	adds	r4, #21
 80094e2:	3304      	adds	r3, #4
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	bf38      	it	cc
 80094e8:	2304      	movcc	r3, #4
 80094ea:	441d      	add	r5, r3
 80094ec:	445b      	add	r3, fp
 80094ee:	461e      	mov	r6, r3
 80094f0:	462c      	mov	r4, r5
 80094f2:	4544      	cmp	r4, r8
 80094f4:	d30e      	bcc.n	8009514 <__mdiff+0xf8>
 80094f6:	f108 0103 	add.w	r1, r8, #3
 80094fa:	1b49      	subs	r1, r1, r5
 80094fc:	f021 0103 	bic.w	r1, r1, #3
 8009500:	3d03      	subs	r5, #3
 8009502:	45a8      	cmp	r8, r5
 8009504:	bf38      	it	cc
 8009506:	2100      	movcc	r1, #0
 8009508:	440b      	add	r3, r1
 800950a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800950e:	b191      	cbz	r1, 8009536 <__mdiff+0x11a>
 8009510:	6117      	str	r7, [r2, #16]
 8009512:	e79d      	b.n	8009450 <__mdiff+0x34>
 8009514:	f854 1b04 	ldr.w	r1, [r4], #4
 8009518:	46e6      	mov	lr, ip
 800951a:	0c08      	lsrs	r0, r1, #16
 800951c:	fa1c fc81 	uxtah	ip, ip, r1
 8009520:	4471      	add	r1, lr
 8009522:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009526:	b289      	uxth	r1, r1
 8009528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800952c:	f846 1b04 	str.w	r1, [r6], #4
 8009530:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009534:	e7dd      	b.n	80094f2 <__mdiff+0xd6>
 8009536:	3f01      	subs	r7, #1
 8009538:	e7e7      	b.n	800950a <__mdiff+0xee>
 800953a:	bf00      	nop
 800953c:	0800a318 	.word	0x0800a318
 8009540:	0800a329 	.word	0x0800a329

08009544 <__d2b>:
 8009544:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009548:	460f      	mov	r7, r1
 800954a:	2101      	movs	r1, #1
 800954c:	ec59 8b10 	vmov	r8, r9, d0
 8009550:	4616      	mov	r6, r2
 8009552:	f7ff fccd 	bl	8008ef0 <_Balloc>
 8009556:	4604      	mov	r4, r0
 8009558:	b930      	cbnz	r0, 8009568 <__d2b+0x24>
 800955a:	4602      	mov	r2, r0
 800955c:	4b23      	ldr	r3, [pc, #140]	@ (80095ec <__d2b+0xa8>)
 800955e:	4824      	ldr	r0, [pc, #144]	@ (80095f0 <__d2b+0xac>)
 8009560:	f240 310f 	movw	r1, #783	@ 0x30f
 8009564:	f000 fa82 	bl	8009a6c <__assert_func>
 8009568:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800956c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009570:	b10d      	cbz	r5, 8009576 <__d2b+0x32>
 8009572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	f1b8 0300 	subs.w	r3, r8, #0
 800957c:	d023      	beq.n	80095c6 <__d2b+0x82>
 800957e:	4668      	mov	r0, sp
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	f7ff fd7c 	bl	800907e <__lo0bits>
 8009586:	e9dd 1200 	ldrd	r1, r2, [sp]
 800958a:	b1d0      	cbz	r0, 80095c2 <__d2b+0x7e>
 800958c:	f1c0 0320 	rsb	r3, r0, #32
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	430b      	orrs	r3, r1
 8009596:	40c2      	lsrs	r2, r0
 8009598:	6163      	str	r3, [r4, #20]
 800959a:	9201      	str	r2, [sp, #4]
 800959c:	9b01      	ldr	r3, [sp, #4]
 800959e:	61a3      	str	r3, [r4, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bf0c      	ite	eq
 80095a4:	2201      	moveq	r2, #1
 80095a6:	2202      	movne	r2, #2
 80095a8:	6122      	str	r2, [r4, #16]
 80095aa:	b1a5      	cbz	r5, 80095d6 <__d2b+0x92>
 80095ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095b0:	4405      	add	r5, r0
 80095b2:	603d      	str	r5, [r7, #0]
 80095b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095b8:	6030      	str	r0, [r6, #0]
 80095ba:	4620      	mov	r0, r4
 80095bc:	b003      	add	sp, #12
 80095be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095c2:	6161      	str	r1, [r4, #20]
 80095c4:	e7ea      	b.n	800959c <__d2b+0x58>
 80095c6:	a801      	add	r0, sp, #4
 80095c8:	f7ff fd59 	bl	800907e <__lo0bits>
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	6163      	str	r3, [r4, #20]
 80095d0:	3020      	adds	r0, #32
 80095d2:	2201      	movs	r2, #1
 80095d4:	e7e8      	b.n	80095a8 <__d2b+0x64>
 80095d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80095de:	6038      	str	r0, [r7, #0]
 80095e0:	6918      	ldr	r0, [r3, #16]
 80095e2:	f7ff fd2d 	bl	8009040 <__hi0bits>
 80095e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095ea:	e7e5      	b.n	80095b8 <__d2b+0x74>
 80095ec:	0800a318 	.word	0x0800a318
 80095f0:	0800a329 	.word	0x0800a329

080095f4 <__ssputs_r>:
 80095f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f8:	688e      	ldr	r6, [r1, #8]
 80095fa:	461f      	mov	r7, r3
 80095fc:	42be      	cmp	r6, r7
 80095fe:	680b      	ldr	r3, [r1, #0]
 8009600:	4682      	mov	sl, r0
 8009602:	460c      	mov	r4, r1
 8009604:	4690      	mov	r8, r2
 8009606:	d82d      	bhi.n	8009664 <__ssputs_r+0x70>
 8009608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800960c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009610:	d026      	beq.n	8009660 <__ssputs_r+0x6c>
 8009612:	6965      	ldr	r5, [r4, #20]
 8009614:	6909      	ldr	r1, [r1, #16]
 8009616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800961a:	eba3 0901 	sub.w	r9, r3, r1
 800961e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009622:	1c7b      	adds	r3, r7, #1
 8009624:	444b      	add	r3, r9
 8009626:	106d      	asrs	r5, r5, #1
 8009628:	429d      	cmp	r5, r3
 800962a:	bf38      	it	cc
 800962c:	461d      	movcc	r5, r3
 800962e:	0553      	lsls	r3, r2, #21
 8009630:	d527      	bpl.n	8009682 <__ssputs_r+0x8e>
 8009632:	4629      	mov	r1, r5
 8009634:	f7ff fbd0 	bl	8008dd8 <_malloc_r>
 8009638:	4606      	mov	r6, r0
 800963a:	b360      	cbz	r0, 8009696 <__ssputs_r+0xa2>
 800963c:	6921      	ldr	r1, [r4, #16]
 800963e:	464a      	mov	r2, r9
 8009640:	f000 fa06 	bl	8009a50 <memcpy>
 8009644:	89a3      	ldrh	r3, [r4, #12]
 8009646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800964a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	6126      	str	r6, [r4, #16]
 8009652:	6165      	str	r5, [r4, #20]
 8009654:	444e      	add	r6, r9
 8009656:	eba5 0509 	sub.w	r5, r5, r9
 800965a:	6026      	str	r6, [r4, #0]
 800965c:	60a5      	str	r5, [r4, #8]
 800965e:	463e      	mov	r6, r7
 8009660:	42be      	cmp	r6, r7
 8009662:	d900      	bls.n	8009666 <__ssputs_r+0x72>
 8009664:	463e      	mov	r6, r7
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	4632      	mov	r2, r6
 800966a:	4641      	mov	r1, r8
 800966c:	f000 f9c6 	bl	80099fc <memmove>
 8009670:	68a3      	ldr	r3, [r4, #8]
 8009672:	1b9b      	subs	r3, r3, r6
 8009674:	60a3      	str	r3, [r4, #8]
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	4433      	add	r3, r6
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	2000      	movs	r0, #0
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	462a      	mov	r2, r5
 8009684:	f000 fa36 	bl	8009af4 <_realloc_r>
 8009688:	4606      	mov	r6, r0
 800968a:	2800      	cmp	r0, #0
 800968c:	d1e0      	bne.n	8009650 <__ssputs_r+0x5c>
 800968e:	6921      	ldr	r1, [r4, #16]
 8009690:	4650      	mov	r0, sl
 8009692:	f7ff fb2d 	bl	8008cf0 <_free_r>
 8009696:	230c      	movs	r3, #12
 8009698:	f8ca 3000 	str.w	r3, [sl]
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096a8:	e7e9      	b.n	800967e <__ssputs_r+0x8a>
	...

080096ac <_svfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	4698      	mov	r8, r3
 80096b2:	898b      	ldrh	r3, [r1, #12]
 80096b4:	061b      	lsls	r3, r3, #24
 80096b6:	b09d      	sub	sp, #116	@ 0x74
 80096b8:	4607      	mov	r7, r0
 80096ba:	460d      	mov	r5, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	d510      	bpl.n	80096e2 <_svfiprintf_r+0x36>
 80096c0:	690b      	ldr	r3, [r1, #16]
 80096c2:	b973      	cbnz	r3, 80096e2 <_svfiprintf_r+0x36>
 80096c4:	2140      	movs	r1, #64	@ 0x40
 80096c6:	f7ff fb87 	bl	8008dd8 <_malloc_r>
 80096ca:	6028      	str	r0, [r5, #0]
 80096cc:	6128      	str	r0, [r5, #16]
 80096ce:	b930      	cbnz	r0, 80096de <_svfiprintf_r+0x32>
 80096d0:	230c      	movs	r3, #12
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096d8:	b01d      	add	sp, #116	@ 0x74
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	2340      	movs	r3, #64	@ 0x40
 80096e0:	616b      	str	r3, [r5, #20]
 80096e2:	2300      	movs	r3, #0
 80096e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096e6:	2320      	movs	r3, #32
 80096e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f0:	2330      	movs	r3, #48	@ 0x30
 80096f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009890 <_svfiprintf_r+0x1e4>
 80096f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096fa:	f04f 0901 	mov.w	r9, #1
 80096fe:	4623      	mov	r3, r4
 8009700:	469a      	mov	sl, r3
 8009702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009706:	b10a      	cbz	r2, 800970c <_svfiprintf_r+0x60>
 8009708:	2a25      	cmp	r2, #37	@ 0x25
 800970a:	d1f9      	bne.n	8009700 <_svfiprintf_r+0x54>
 800970c:	ebba 0b04 	subs.w	fp, sl, r4
 8009710:	d00b      	beq.n	800972a <_svfiprintf_r+0x7e>
 8009712:	465b      	mov	r3, fp
 8009714:	4622      	mov	r2, r4
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ff6b 	bl	80095f4 <__ssputs_r>
 800971e:	3001      	adds	r0, #1
 8009720:	f000 80a7 	beq.w	8009872 <_svfiprintf_r+0x1c6>
 8009724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009726:	445a      	add	r2, fp
 8009728:	9209      	str	r2, [sp, #36]	@ 0x24
 800972a:	f89a 3000 	ldrb.w	r3, [sl]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 809f 	beq.w	8009872 <_svfiprintf_r+0x1c6>
 8009734:	2300      	movs	r3, #0
 8009736:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800973a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800973e:	f10a 0a01 	add.w	sl, sl, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800974a:	931a      	str	r3, [sp, #104]	@ 0x68
 800974c:	4654      	mov	r4, sl
 800974e:	2205      	movs	r2, #5
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	484e      	ldr	r0, [pc, #312]	@ (8009890 <_svfiprintf_r+0x1e4>)
 8009756:	f7f6 fd63 	bl	8000220 <memchr>
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	b9d8      	cbnz	r0, 8009796 <_svfiprintf_r+0xea>
 800975e:	06d0      	lsls	r0, r2, #27
 8009760:	bf44      	itt	mi
 8009762:	2320      	movmi	r3, #32
 8009764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009768:	0711      	lsls	r1, r2, #28
 800976a:	bf44      	itt	mi
 800976c:	232b      	movmi	r3, #43	@ 0x2b
 800976e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b2a      	cmp	r3, #42	@ 0x2a
 8009778:	d015      	beq.n	80097a6 <_svfiprintf_r+0xfa>
 800977a:	9a07      	ldr	r2, [sp, #28]
 800977c:	4654      	mov	r4, sl
 800977e:	2000      	movs	r0, #0
 8009780:	f04f 0c0a 	mov.w	ip, #10
 8009784:	4621      	mov	r1, r4
 8009786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800978a:	3b30      	subs	r3, #48	@ 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d94b      	bls.n	8009828 <_svfiprintf_r+0x17c>
 8009790:	b1b0      	cbz	r0, 80097c0 <_svfiprintf_r+0x114>
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	e014      	b.n	80097c0 <_svfiprintf_r+0x114>
 8009796:	eba0 0308 	sub.w	r3, r0, r8
 800979a:	fa09 f303 	lsl.w	r3, r9, r3
 800979e:	4313      	orrs	r3, r2
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	46a2      	mov	sl, r4
 80097a4:	e7d2      	b.n	800974c <_svfiprintf_r+0xa0>
 80097a6:	9b03      	ldr	r3, [sp, #12]
 80097a8:	1d19      	adds	r1, r3, #4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	9103      	str	r1, [sp, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	bfbb      	ittet	lt
 80097b2:	425b      	neglt	r3, r3
 80097b4:	f042 0202 	orrlt.w	r2, r2, #2
 80097b8:	9307      	strge	r3, [sp, #28]
 80097ba:	9307      	strlt	r3, [sp, #28]
 80097bc:	bfb8      	it	lt
 80097be:	9204      	strlt	r2, [sp, #16]
 80097c0:	7823      	ldrb	r3, [r4, #0]
 80097c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80097c4:	d10a      	bne.n	80097dc <_svfiprintf_r+0x130>
 80097c6:	7863      	ldrb	r3, [r4, #1]
 80097c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ca:	d132      	bne.n	8009832 <_svfiprintf_r+0x186>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	9203      	str	r2, [sp, #12]
 80097d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097d8:	3402      	adds	r4, #2
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098a0 <_svfiprintf_r+0x1f4>
 80097e0:	7821      	ldrb	r1, [r4, #0]
 80097e2:	2203      	movs	r2, #3
 80097e4:	4650      	mov	r0, sl
 80097e6:	f7f6 fd1b 	bl	8000220 <memchr>
 80097ea:	b138      	cbz	r0, 80097fc <_svfiprintf_r+0x150>
 80097ec:	9b04      	ldr	r3, [sp, #16]
 80097ee:	eba0 000a 	sub.w	r0, r0, sl
 80097f2:	2240      	movs	r2, #64	@ 0x40
 80097f4:	4082      	lsls	r2, r0
 80097f6:	4313      	orrs	r3, r2
 80097f8:	3401      	adds	r4, #1
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009800:	4824      	ldr	r0, [pc, #144]	@ (8009894 <_svfiprintf_r+0x1e8>)
 8009802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009806:	2206      	movs	r2, #6
 8009808:	f7f6 fd0a 	bl	8000220 <memchr>
 800980c:	2800      	cmp	r0, #0
 800980e:	d036      	beq.n	800987e <_svfiprintf_r+0x1d2>
 8009810:	4b21      	ldr	r3, [pc, #132]	@ (8009898 <_svfiprintf_r+0x1ec>)
 8009812:	bb1b      	cbnz	r3, 800985c <_svfiprintf_r+0x1b0>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	3307      	adds	r3, #7
 8009818:	f023 0307 	bic.w	r3, r3, #7
 800981c:	3308      	adds	r3, #8
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009822:	4433      	add	r3, r6
 8009824:	9309      	str	r3, [sp, #36]	@ 0x24
 8009826:	e76a      	b.n	80096fe <_svfiprintf_r+0x52>
 8009828:	fb0c 3202 	mla	r2, ip, r2, r3
 800982c:	460c      	mov	r4, r1
 800982e:	2001      	movs	r0, #1
 8009830:	e7a8      	b.n	8009784 <_svfiprintf_r+0xd8>
 8009832:	2300      	movs	r3, #0
 8009834:	3401      	adds	r4, #1
 8009836:	9305      	str	r3, [sp, #20]
 8009838:	4619      	mov	r1, r3
 800983a:	f04f 0c0a 	mov.w	ip, #10
 800983e:	4620      	mov	r0, r4
 8009840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009844:	3a30      	subs	r2, #48	@ 0x30
 8009846:	2a09      	cmp	r2, #9
 8009848:	d903      	bls.n	8009852 <_svfiprintf_r+0x1a6>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0c6      	beq.n	80097dc <_svfiprintf_r+0x130>
 800984e:	9105      	str	r1, [sp, #20]
 8009850:	e7c4      	b.n	80097dc <_svfiprintf_r+0x130>
 8009852:	fb0c 2101 	mla	r1, ip, r1, r2
 8009856:	4604      	mov	r4, r0
 8009858:	2301      	movs	r3, #1
 800985a:	e7f0      	b.n	800983e <_svfiprintf_r+0x192>
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4b0e      	ldr	r3, [pc, #56]	@ (800989c <_svfiprintf_r+0x1f0>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	4638      	mov	r0, r7
 8009868:	f7fd fe82 	bl	8007570 <_printf_float>
 800986c:	1c42      	adds	r2, r0, #1
 800986e:	4606      	mov	r6, r0
 8009870:	d1d6      	bne.n	8009820 <_svfiprintf_r+0x174>
 8009872:	89ab      	ldrh	r3, [r5, #12]
 8009874:	065b      	lsls	r3, r3, #25
 8009876:	f53f af2d 	bmi.w	80096d4 <_svfiprintf_r+0x28>
 800987a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800987c:	e72c      	b.n	80096d8 <_svfiprintf_r+0x2c>
 800987e:	ab03      	add	r3, sp, #12
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	462a      	mov	r2, r5
 8009884:	4b05      	ldr	r3, [pc, #20]	@ (800989c <_svfiprintf_r+0x1f0>)
 8009886:	a904      	add	r1, sp, #16
 8009888:	4638      	mov	r0, r7
 800988a:	f7fe f909 	bl	8007aa0 <_printf_i>
 800988e:	e7ed      	b.n	800986c <_svfiprintf_r+0x1c0>
 8009890:	0800a480 	.word	0x0800a480
 8009894:	0800a48a 	.word	0x0800a48a
 8009898:	08007571 	.word	0x08007571
 800989c:	080095f5 	.word	0x080095f5
 80098a0:	0800a486 	.word	0x0800a486

080098a4 <__sflush_r>:
 80098a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ac:	0716      	lsls	r6, r2, #28
 80098ae:	4605      	mov	r5, r0
 80098b0:	460c      	mov	r4, r1
 80098b2:	d454      	bmi.n	800995e <__sflush_r+0xba>
 80098b4:	684b      	ldr	r3, [r1, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dc02      	bgt.n	80098c0 <__sflush_r+0x1c>
 80098ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd48      	ble.n	8009952 <__sflush_r+0xae>
 80098c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098c2:	2e00      	cmp	r6, #0
 80098c4:	d045      	beq.n	8009952 <__sflush_r+0xae>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098cc:	682f      	ldr	r7, [r5, #0]
 80098ce:	6a21      	ldr	r1, [r4, #32]
 80098d0:	602b      	str	r3, [r5, #0]
 80098d2:	d030      	beq.n	8009936 <__sflush_r+0x92>
 80098d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	0759      	lsls	r1, r3, #29
 80098da:	d505      	bpl.n	80098e8 <__sflush_r+0x44>
 80098dc:	6863      	ldr	r3, [r4, #4]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098e2:	b10b      	cbz	r3, 80098e8 <__sflush_r+0x44>
 80098e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	2300      	movs	r3, #0
 80098ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ec:	6a21      	ldr	r1, [r4, #32]
 80098ee:	4628      	mov	r0, r5
 80098f0:	47b0      	blx	r6
 80098f2:	1c43      	adds	r3, r0, #1
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	d106      	bne.n	8009906 <__sflush_r+0x62>
 80098f8:	6829      	ldr	r1, [r5, #0]
 80098fa:	291d      	cmp	r1, #29
 80098fc:	d82b      	bhi.n	8009956 <__sflush_r+0xb2>
 80098fe:	4a2a      	ldr	r2, [pc, #168]	@ (80099a8 <__sflush_r+0x104>)
 8009900:	410a      	asrs	r2, r1
 8009902:	07d6      	lsls	r6, r2, #31
 8009904:	d427      	bmi.n	8009956 <__sflush_r+0xb2>
 8009906:	2200      	movs	r2, #0
 8009908:	6062      	str	r2, [r4, #4]
 800990a:	04d9      	lsls	r1, r3, #19
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	6022      	str	r2, [r4, #0]
 8009910:	d504      	bpl.n	800991c <__sflush_r+0x78>
 8009912:	1c42      	adds	r2, r0, #1
 8009914:	d101      	bne.n	800991a <__sflush_r+0x76>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	b903      	cbnz	r3, 800991c <__sflush_r+0x78>
 800991a:	6560      	str	r0, [r4, #84]	@ 0x54
 800991c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800991e:	602f      	str	r7, [r5, #0]
 8009920:	b1b9      	cbz	r1, 8009952 <__sflush_r+0xae>
 8009922:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009926:	4299      	cmp	r1, r3
 8009928:	d002      	beq.n	8009930 <__sflush_r+0x8c>
 800992a:	4628      	mov	r0, r5
 800992c:	f7ff f9e0 	bl	8008cf0 <_free_r>
 8009930:	2300      	movs	r3, #0
 8009932:	6363      	str	r3, [r4, #52]	@ 0x34
 8009934:	e00d      	b.n	8009952 <__sflush_r+0xae>
 8009936:	2301      	movs	r3, #1
 8009938:	4628      	mov	r0, r5
 800993a:	47b0      	blx	r6
 800993c:	4602      	mov	r2, r0
 800993e:	1c50      	adds	r0, r2, #1
 8009940:	d1c9      	bne.n	80098d6 <__sflush_r+0x32>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0c6      	beq.n	80098d6 <__sflush_r+0x32>
 8009948:	2b1d      	cmp	r3, #29
 800994a:	d001      	beq.n	8009950 <__sflush_r+0xac>
 800994c:	2b16      	cmp	r3, #22
 800994e:	d11e      	bne.n	800998e <__sflush_r+0xea>
 8009950:	602f      	str	r7, [r5, #0]
 8009952:	2000      	movs	r0, #0
 8009954:	e022      	b.n	800999c <__sflush_r+0xf8>
 8009956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800995a:	b21b      	sxth	r3, r3
 800995c:	e01b      	b.n	8009996 <__sflush_r+0xf2>
 800995e:	690f      	ldr	r7, [r1, #16]
 8009960:	2f00      	cmp	r7, #0
 8009962:	d0f6      	beq.n	8009952 <__sflush_r+0xae>
 8009964:	0793      	lsls	r3, r2, #30
 8009966:	680e      	ldr	r6, [r1, #0]
 8009968:	bf08      	it	eq
 800996a:	694b      	ldreq	r3, [r1, #20]
 800996c:	600f      	str	r7, [r1, #0]
 800996e:	bf18      	it	ne
 8009970:	2300      	movne	r3, #0
 8009972:	eba6 0807 	sub.w	r8, r6, r7
 8009976:	608b      	str	r3, [r1, #8]
 8009978:	f1b8 0f00 	cmp.w	r8, #0
 800997c:	dde9      	ble.n	8009952 <__sflush_r+0xae>
 800997e:	6a21      	ldr	r1, [r4, #32]
 8009980:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009982:	4643      	mov	r3, r8
 8009984:	463a      	mov	r2, r7
 8009986:	4628      	mov	r0, r5
 8009988:	47b0      	blx	r6
 800998a:	2800      	cmp	r0, #0
 800998c:	dc08      	bgt.n	80099a0 <__sflush_r+0xfc>
 800998e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a0:	4407      	add	r7, r0
 80099a2:	eba8 0800 	sub.w	r8, r8, r0
 80099a6:	e7e7      	b.n	8009978 <__sflush_r+0xd4>
 80099a8:	dfbffffe 	.word	0xdfbffffe

080099ac <_fflush_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	690b      	ldr	r3, [r1, #16]
 80099b0:	4605      	mov	r5, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	b913      	cbnz	r3, 80099bc <_fflush_r+0x10>
 80099b6:	2500      	movs	r5, #0
 80099b8:	4628      	mov	r0, r5
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	b118      	cbz	r0, 80099c6 <_fflush_r+0x1a>
 80099be:	6a03      	ldr	r3, [r0, #32]
 80099c0:	b90b      	cbnz	r3, 80099c6 <_fflush_r+0x1a>
 80099c2:	f7fe fa19 	bl	8007df8 <__sinit>
 80099c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0f3      	beq.n	80099b6 <_fflush_r+0xa>
 80099ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099d0:	07d0      	lsls	r0, r2, #31
 80099d2:	d404      	bmi.n	80099de <_fflush_r+0x32>
 80099d4:	0599      	lsls	r1, r3, #22
 80099d6:	d402      	bmi.n	80099de <_fflush_r+0x32>
 80099d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099da:	f7fe fb38 	bl	800804e <__retarget_lock_acquire_recursive>
 80099de:	4628      	mov	r0, r5
 80099e0:	4621      	mov	r1, r4
 80099e2:	f7ff ff5f 	bl	80098a4 <__sflush_r>
 80099e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099e8:	07da      	lsls	r2, r3, #31
 80099ea:	4605      	mov	r5, r0
 80099ec:	d4e4      	bmi.n	80099b8 <_fflush_r+0xc>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	059b      	lsls	r3, r3, #22
 80099f2:	d4e1      	bmi.n	80099b8 <_fflush_r+0xc>
 80099f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099f6:	f7fe fb2b 	bl	8008050 <__retarget_lock_release_recursive>
 80099fa:	e7dd      	b.n	80099b8 <_fflush_r+0xc>

080099fc <memmove>:
 80099fc:	4288      	cmp	r0, r1
 80099fe:	b510      	push	{r4, lr}
 8009a00:	eb01 0402 	add.w	r4, r1, r2
 8009a04:	d902      	bls.n	8009a0c <memmove+0x10>
 8009a06:	4284      	cmp	r4, r0
 8009a08:	4623      	mov	r3, r4
 8009a0a:	d807      	bhi.n	8009a1c <memmove+0x20>
 8009a0c:	1e43      	subs	r3, r0, #1
 8009a0e:	42a1      	cmp	r1, r4
 8009a10:	d008      	beq.n	8009a24 <memmove+0x28>
 8009a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a1a:	e7f8      	b.n	8009a0e <memmove+0x12>
 8009a1c:	4402      	add	r2, r0
 8009a1e:	4601      	mov	r1, r0
 8009a20:	428a      	cmp	r2, r1
 8009a22:	d100      	bne.n	8009a26 <memmove+0x2a>
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a2e:	e7f7      	b.n	8009a20 <memmove+0x24>

08009a30 <_sbrk_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d06      	ldr	r5, [pc, #24]	@ (8009a4c <_sbrk_r+0x1c>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f9 f948 	bl	8002cd0 <_sbrk>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_sbrk_r+0x1a>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_sbrk_r+0x1a>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20000700 	.word	0x20000700

08009a50 <memcpy>:
 8009a50:	440a      	add	r2, r1
 8009a52:	4291      	cmp	r1, r2
 8009a54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009a58:	d100      	bne.n	8009a5c <memcpy+0xc>
 8009a5a:	4770      	bx	lr
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a66:	4291      	cmp	r1, r2
 8009a68:	d1f9      	bne.n	8009a5e <memcpy+0xe>
 8009a6a:	bd10      	pop	{r4, pc}

08009a6c <__assert_func>:
 8009a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a6e:	4614      	mov	r4, r2
 8009a70:	461a      	mov	r2, r3
 8009a72:	4b09      	ldr	r3, [pc, #36]	@ (8009a98 <__assert_func+0x2c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4605      	mov	r5, r0
 8009a78:	68d8      	ldr	r0, [r3, #12]
 8009a7a:	b954      	cbnz	r4, 8009a92 <__assert_func+0x26>
 8009a7c:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <__assert_func+0x30>)
 8009a7e:	461c      	mov	r4, r3
 8009a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a84:	9100      	str	r1, [sp, #0]
 8009a86:	462b      	mov	r3, r5
 8009a88:	4905      	ldr	r1, [pc, #20]	@ (8009aa0 <__assert_func+0x34>)
 8009a8a:	f000 f86f 	bl	8009b6c <fiprintf>
 8009a8e:	f000 f87f 	bl	8009b90 <abort>
 8009a92:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <__assert_func+0x38>)
 8009a94:	e7f4      	b.n	8009a80 <__assert_func+0x14>
 8009a96:	bf00      	nop
 8009a98:	20000030 	.word	0x20000030
 8009a9c:	0800a4d6 	.word	0x0800a4d6
 8009aa0:	0800a4a8 	.word	0x0800a4a8
 8009aa4:	0800a49b 	.word	0x0800a49b

08009aa8 <_calloc_r>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	fba1 5402 	umull	r5, r4, r1, r2
 8009aae:	b93c      	cbnz	r4, 8009ac0 <_calloc_r+0x18>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7ff f991 	bl	8008dd8 <_malloc_r>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	b928      	cbnz	r0, 8009ac6 <_calloc_r+0x1e>
 8009aba:	2600      	movs	r6, #0
 8009abc:	4630      	mov	r0, r6
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
 8009ac0:	220c      	movs	r2, #12
 8009ac2:	6002      	str	r2, [r0, #0]
 8009ac4:	e7f9      	b.n	8009aba <_calloc_r+0x12>
 8009ac6:	462a      	mov	r2, r5
 8009ac8:	4621      	mov	r1, r4
 8009aca:	f7fe fa42 	bl	8007f52 <memset>
 8009ace:	e7f5      	b.n	8009abc <_calloc_r+0x14>

08009ad0 <__ascii_mbtowc>:
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	b901      	cbnz	r1, 8009ad6 <__ascii_mbtowc+0x6>
 8009ad4:	a901      	add	r1, sp, #4
 8009ad6:	b142      	cbz	r2, 8009aea <__ascii_mbtowc+0x1a>
 8009ad8:	b14b      	cbz	r3, 8009aee <__ascii_mbtowc+0x1e>
 8009ada:	7813      	ldrb	r3, [r2, #0]
 8009adc:	600b      	str	r3, [r1, #0]
 8009ade:	7812      	ldrb	r2, [r2, #0]
 8009ae0:	1e10      	subs	r0, r2, #0
 8009ae2:	bf18      	it	ne
 8009ae4:	2001      	movne	r0, #1
 8009ae6:	b002      	add	sp, #8
 8009ae8:	4770      	bx	lr
 8009aea:	4610      	mov	r0, r2
 8009aec:	e7fb      	b.n	8009ae6 <__ascii_mbtowc+0x16>
 8009aee:	f06f 0001 	mvn.w	r0, #1
 8009af2:	e7f8      	b.n	8009ae6 <__ascii_mbtowc+0x16>

08009af4 <_realloc_r>:
 8009af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	4680      	mov	r8, r0
 8009afa:	4615      	mov	r5, r2
 8009afc:	460c      	mov	r4, r1
 8009afe:	b921      	cbnz	r1, 8009b0a <_realloc_r+0x16>
 8009b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	4611      	mov	r1, r2
 8009b06:	f7ff b967 	b.w	8008dd8 <_malloc_r>
 8009b0a:	b92a      	cbnz	r2, 8009b18 <_realloc_r+0x24>
 8009b0c:	f7ff f8f0 	bl	8008cf0 <_free_r>
 8009b10:	2400      	movs	r4, #0
 8009b12:	4620      	mov	r0, r4
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b18:	f000 f841 	bl	8009b9e <_malloc_usable_size_r>
 8009b1c:	4285      	cmp	r5, r0
 8009b1e:	4606      	mov	r6, r0
 8009b20:	d802      	bhi.n	8009b28 <_realloc_r+0x34>
 8009b22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b26:	d8f4      	bhi.n	8009b12 <_realloc_r+0x1e>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	f7ff f954 	bl	8008dd8 <_malloc_r>
 8009b30:	4607      	mov	r7, r0
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0ec      	beq.n	8009b10 <_realloc_r+0x1c>
 8009b36:	42b5      	cmp	r5, r6
 8009b38:	462a      	mov	r2, r5
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	bf28      	it	cs
 8009b3e:	4632      	movcs	r2, r6
 8009b40:	f7ff ff86 	bl	8009a50 <memcpy>
 8009b44:	4621      	mov	r1, r4
 8009b46:	4640      	mov	r0, r8
 8009b48:	f7ff f8d2 	bl	8008cf0 <_free_r>
 8009b4c:	463c      	mov	r4, r7
 8009b4e:	e7e0      	b.n	8009b12 <_realloc_r+0x1e>

08009b50 <__ascii_wctomb>:
 8009b50:	4603      	mov	r3, r0
 8009b52:	4608      	mov	r0, r1
 8009b54:	b141      	cbz	r1, 8009b68 <__ascii_wctomb+0x18>
 8009b56:	2aff      	cmp	r2, #255	@ 0xff
 8009b58:	d904      	bls.n	8009b64 <__ascii_wctomb+0x14>
 8009b5a:	228a      	movs	r2, #138	@ 0x8a
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b62:	4770      	bx	lr
 8009b64:	700a      	strb	r2, [r1, #0]
 8009b66:	2001      	movs	r0, #1
 8009b68:	4770      	bx	lr
	...

08009b6c <fiprintf>:
 8009b6c:	b40e      	push	{r1, r2, r3}
 8009b6e:	b503      	push	{r0, r1, lr}
 8009b70:	4601      	mov	r1, r0
 8009b72:	ab03      	add	r3, sp, #12
 8009b74:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <fiprintf+0x20>)
 8009b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	f000 f83f 	bl	8009c00 <_vfiprintf_r>
 8009b82:	b002      	add	sp, #8
 8009b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b88:	b003      	add	sp, #12
 8009b8a:	4770      	bx	lr
 8009b8c:	20000030 	.word	0x20000030

08009b90 <abort>:
 8009b90:	b508      	push	{r3, lr}
 8009b92:	2006      	movs	r0, #6
 8009b94:	f000 fa08 	bl	8009fa8 <raise>
 8009b98:	2001      	movs	r0, #1
 8009b9a:	f7f9 f820 	bl	8002bde <_exit>

08009b9e <_malloc_usable_size_r>:
 8009b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ba2:	1f18      	subs	r0, r3, #4
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bfbc      	itt	lt
 8009ba8:	580b      	ldrlt	r3, [r1, r0]
 8009baa:	18c0      	addlt	r0, r0, r3
 8009bac:	4770      	bx	lr

08009bae <__sfputc_r>:
 8009bae:	6893      	ldr	r3, [r2, #8]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	b410      	push	{r4}
 8009bb6:	6093      	str	r3, [r2, #8]
 8009bb8:	da08      	bge.n	8009bcc <__sfputc_r+0x1e>
 8009bba:	6994      	ldr	r4, [r2, #24]
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	db01      	blt.n	8009bc4 <__sfputc_r+0x16>
 8009bc0:	290a      	cmp	r1, #10
 8009bc2:	d103      	bne.n	8009bcc <__sfputc_r+0x1e>
 8009bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bc8:	f000 b932 	b.w	8009e30 <__swbuf_r>
 8009bcc:	6813      	ldr	r3, [r2, #0]
 8009bce:	1c58      	adds	r0, r3, #1
 8009bd0:	6010      	str	r0, [r2, #0]
 8009bd2:	7019      	strb	r1, [r3, #0]
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <__sfputs_r>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	4614      	mov	r4, r2
 8009be4:	18d5      	adds	r5, r2, r3
 8009be6:	42ac      	cmp	r4, r5
 8009be8:	d101      	bne.n	8009bee <__sfputs_r+0x12>
 8009bea:	2000      	movs	r0, #0
 8009bec:	e007      	b.n	8009bfe <__sfputs_r+0x22>
 8009bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf2:	463a      	mov	r2, r7
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff ffda 	bl	8009bae <__sfputc_r>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	d1f3      	bne.n	8009be6 <__sfputs_r+0xa>
 8009bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c00 <_vfiprintf_r>:
 8009c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	460d      	mov	r5, r1
 8009c06:	b09d      	sub	sp, #116	@ 0x74
 8009c08:	4614      	mov	r4, r2
 8009c0a:	4698      	mov	r8, r3
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	b118      	cbz	r0, 8009c18 <_vfiprintf_r+0x18>
 8009c10:	6a03      	ldr	r3, [r0, #32]
 8009c12:	b90b      	cbnz	r3, 8009c18 <_vfiprintf_r+0x18>
 8009c14:	f7fe f8f0 	bl	8007df8 <__sinit>
 8009c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c1a:	07d9      	lsls	r1, r3, #31
 8009c1c:	d405      	bmi.n	8009c2a <_vfiprintf_r+0x2a>
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	059a      	lsls	r2, r3, #22
 8009c22:	d402      	bmi.n	8009c2a <_vfiprintf_r+0x2a>
 8009c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c26:	f7fe fa12 	bl	800804e <__retarget_lock_acquire_recursive>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	071b      	lsls	r3, r3, #28
 8009c2e:	d501      	bpl.n	8009c34 <_vfiprintf_r+0x34>
 8009c30:	692b      	ldr	r3, [r5, #16]
 8009c32:	b99b      	cbnz	r3, 8009c5c <_vfiprintf_r+0x5c>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4630      	mov	r0, r6
 8009c38:	f000 f938 	bl	8009eac <__swsetup_r>
 8009c3c:	b170      	cbz	r0, 8009c5c <_vfiprintf_r+0x5c>
 8009c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c40:	07dc      	lsls	r4, r3, #31
 8009c42:	d504      	bpl.n	8009c4e <_vfiprintf_r+0x4e>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c48:	b01d      	add	sp, #116	@ 0x74
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d4f7      	bmi.n	8009c44 <_vfiprintf_r+0x44>
 8009c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c56:	f7fe f9fb 	bl	8008050 <__retarget_lock_release_recursive>
 8009c5a:	e7f3      	b.n	8009c44 <_vfiprintf_r+0x44>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c60:	2320      	movs	r3, #32
 8009c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c6a:	2330      	movs	r3, #48	@ 0x30
 8009c6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e1c <_vfiprintf_r+0x21c>
 8009c70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c74:	f04f 0901 	mov.w	r9, #1
 8009c78:	4623      	mov	r3, r4
 8009c7a:	469a      	mov	sl, r3
 8009c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c80:	b10a      	cbz	r2, 8009c86 <_vfiprintf_r+0x86>
 8009c82:	2a25      	cmp	r2, #37	@ 0x25
 8009c84:	d1f9      	bne.n	8009c7a <_vfiprintf_r+0x7a>
 8009c86:	ebba 0b04 	subs.w	fp, sl, r4
 8009c8a:	d00b      	beq.n	8009ca4 <_vfiprintf_r+0xa4>
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	4622      	mov	r2, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	4630      	mov	r0, r6
 8009c94:	f7ff ffa2 	bl	8009bdc <__sfputs_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	f000 80a7 	beq.w	8009dec <_vfiprintf_r+0x1ec>
 8009c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ca0:	445a      	add	r2, fp
 8009ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 809f 	beq.w	8009dec <_vfiprintf_r+0x1ec>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb8:	f10a 0a01 	add.w	sl, sl, #1
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	9307      	str	r3, [sp, #28]
 8009cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cc6:	4654      	mov	r4, sl
 8009cc8:	2205      	movs	r2, #5
 8009cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cce:	4853      	ldr	r0, [pc, #332]	@ (8009e1c <_vfiprintf_r+0x21c>)
 8009cd0:	f7f6 faa6 	bl	8000220 <memchr>
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	b9d8      	cbnz	r0, 8009d10 <_vfiprintf_r+0x110>
 8009cd8:	06d1      	lsls	r1, r2, #27
 8009cda:	bf44      	itt	mi
 8009cdc:	2320      	movmi	r3, #32
 8009cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ce2:	0713      	lsls	r3, r2, #28
 8009ce4:	bf44      	itt	mi
 8009ce6:	232b      	movmi	r3, #43	@ 0x2b
 8009ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cec:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf2:	d015      	beq.n	8009d20 <_vfiprintf_r+0x120>
 8009cf4:	9a07      	ldr	r2, [sp, #28]
 8009cf6:	4654      	mov	r4, sl
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	f04f 0c0a 	mov.w	ip, #10
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d04:	3b30      	subs	r3, #48	@ 0x30
 8009d06:	2b09      	cmp	r3, #9
 8009d08:	d94b      	bls.n	8009da2 <_vfiprintf_r+0x1a2>
 8009d0a:	b1b0      	cbz	r0, 8009d3a <_vfiprintf_r+0x13a>
 8009d0c:	9207      	str	r2, [sp, #28]
 8009d0e:	e014      	b.n	8009d3a <_vfiprintf_r+0x13a>
 8009d10:	eba0 0308 	sub.w	r3, r0, r8
 8009d14:	fa09 f303 	lsl.w	r3, r9, r3
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	46a2      	mov	sl, r4
 8009d1e:	e7d2      	b.n	8009cc6 <_vfiprintf_r+0xc6>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	1d19      	adds	r1, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	9103      	str	r1, [sp, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	bfbb      	ittet	lt
 8009d2c:	425b      	neglt	r3, r3
 8009d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d32:	9307      	strge	r3, [sp, #28]
 8009d34:	9307      	strlt	r3, [sp, #28]
 8009d36:	bfb8      	it	lt
 8009d38:	9204      	strlt	r2, [sp, #16]
 8009d3a:	7823      	ldrb	r3, [r4, #0]
 8009d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d3e:	d10a      	bne.n	8009d56 <_vfiprintf_r+0x156>
 8009d40:	7863      	ldrb	r3, [r4, #1]
 8009d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d44:	d132      	bne.n	8009dac <_vfiprintf_r+0x1ac>
 8009d46:	9b03      	ldr	r3, [sp, #12]
 8009d48:	1d1a      	adds	r2, r3, #4
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	9203      	str	r2, [sp, #12]
 8009d4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d52:	3402      	adds	r4, #2
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e2c <_vfiprintf_r+0x22c>
 8009d5a:	7821      	ldrb	r1, [r4, #0]
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	4650      	mov	r0, sl
 8009d60:	f7f6 fa5e 	bl	8000220 <memchr>
 8009d64:	b138      	cbz	r0, 8009d76 <_vfiprintf_r+0x176>
 8009d66:	9b04      	ldr	r3, [sp, #16]
 8009d68:	eba0 000a 	sub.w	r0, r0, sl
 8009d6c:	2240      	movs	r2, #64	@ 0x40
 8009d6e:	4082      	lsls	r2, r0
 8009d70:	4313      	orrs	r3, r2
 8009d72:	3401      	adds	r4, #1
 8009d74:	9304      	str	r3, [sp, #16]
 8009d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d7a:	4829      	ldr	r0, [pc, #164]	@ (8009e20 <_vfiprintf_r+0x220>)
 8009d7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d80:	2206      	movs	r2, #6
 8009d82:	f7f6 fa4d 	bl	8000220 <memchr>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d03f      	beq.n	8009e0a <_vfiprintf_r+0x20a>
 8009d8a:	4b26      	ldr	r3, [pc, #152]	@ (8009e24 <_vfiprintf_r+0x224>)
 8009d8c:	bb1b      	cbnz	r3, 8009dd6 <_vfiprintf_r+0x1d6>
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	3307      	adds	r3, #7
 8009d92:	f023 0307 	bic.w	r3, r3, #7
 8009d96:	3308      	adds	r3, #8
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	443b      	add	r3, r7
 8009d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009da0:	e76a      	b.n	8009c78 <_vfiprintf_r+0x78>
 8009da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009da6:	460c      	mov	r4, r1
 8009da8:	2001      	movs	r0, #1
 8009daa:	e7a8      	b.n	8009cfe <_vfiprintf_r+0xfe>
 8009dac:	2300      	movs	r3, #0
 8009dae:	3401      	adds	r4, #1
 8009db0:	9305      	str	r3, [sp, #20]
 8009db2:	4619      	mov	r1, r3
 8009db4:	f04f 0c0a 	mov.w	ip, #10
 8009db8:	4620      	mov	r0, r4
 8009dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dbe:	3a30      	subs	r2, #48	@ 0x30
 8009dc0:	2a09      	cmp	r2, #9
 8009dc2:	d903      	bls.n	8009dcc <_vfiprintf_r+0x1cc>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d0c6      	beq.n	8009d56 <_vfiprintf_r+0x156>
 8009dc8:	9105      	str	r1, [sp, #20]
 8009dca:	e7c4      	b.n	8009d56 <_vfiprintf_r+0x156>
 8009dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e7f0      	b.n	8009db8 <_vfiprintf_r+0x1b8>
 8009dd6:	ab03      	add	r3, sp, #12
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	462a      	mov	r2, r5
 8009ddc:	4b12      	ldr	r3, [pc, #72]	@ (8009e28 <_vfiprintf_r+0x228>)
 8009dde:	a904      	add	r1, sp, #16
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7fd fbc5 	bl	8007570 <_printf_float>
 8009de6:	4607      	mov	r7, r0
 8009de8:	1c78      	adds	r0, r7, #1
 8009dea:	d1d6      	bne.n	8009d9a <_vfiprintf_r+0x19a>
 8009dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dee:	07d9      	lsls	r1, r3, #31
 8009df0:	d405      	bmi.n	8009dfe <_vfiprintf_r+0x1fe>
 8009df2:	89ab      	ldrh	r3, [r5, #12]
 8009df4:	059a      	lsls	r2, r3, #22
 8009df6:	d402      	bmi.n	8009dfe <_vfiprintf_r+0x1fe>
 8009df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dfa:	f7fe f929 	bl	8008050 <__retarget_lock_release_recursive>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	065b      	lsls	r3, r3, #25
 8009e02:	f53f af1f 	bmi.w	8009c44 <_vfiprintf_r+0x44>
 8009e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e08:	e71e      	b.n	8009c48 <_vfiprintf_r+0x48>
 8009e0a:	ab03      	add	r3, sp, #12
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4b05      	ldr	r3, [pc, #20]	@ (8009e28 <_vfiprintf_r+0x228>)
 8009e12:	a904      	add	r1, sp, #16
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7fd fe43 	bl	8007aa0 <_printf_i>
 8009e1a:	e7e4      	b.n	8009de6 <_vfiprintf_r+0x1e6>
 8009e1c:	0800a480 	.word	0x0800a480
 8009e20:	0800a48a 	.word	0x0800a48a
 8009e24:	08007571 	.word	0x08007571
 8009e28:	08009bdd 	.word	0x08009bdd
 8009e2c:	0800a486 	.word	0x0800a486

08009e30 <__swbuf_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	460e      	mov	r6, r1
 8009e34:	4614      	mov	r4, r2
 8009e36:	4605      	mov	r5, r0
 8009e38:	b118      	cbz	r0, 8009e42 <__swbuf_r+0x12>
 8009e3a:	6a03      	ldr	r3, [r0, #32]
 8009e3c:	b90b      	cbnz	r3, 8009e42 <__swbuf_r+0x12>
 8009e3e:	f7fd ffdb 	bl	8007df8 <__sinit>
 8009e42:	69a3      	ldr	r3, [r4, #24]
 8009e44:	60a3      	str	r3, [r4, #8]
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	071a      	lsls	r2, r3, #28
 8009e4a:	d501      	bpl.n	8009e50 <__swbuf_r+0x20>
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	b943      	cbnz	r3, 8009e62 <__swbuf_r+0x32>
 8009e50:	4621      	mov	r1, r4
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f82a 	bl	8009eac <__swsetup_r>
 8009e58:	b118      	cbz	r0, 8009e62 <__swbuf_r+0x32>
 8009e5a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009e5e:	4638      	mov	r0, r7
 8009e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	6922      	ldr	r2, [r4, #16]
 8009e66:	1a98      	subs	r0, r3, r2
 8009e68:	6963      	ldr	r3, [r4, #20]
 8009e6a:	b2f6      	uxtb	r6, r6
 8009e6c:	4283      	cmp	r3, r0
 8009e6e:	4637      	mov	r7, r6
 8009e70:	dc05      	bgt.n	8009e7e <__swbuf_r+0x4e>
 8009e72:	4621      	mov	r1, r4
 8009e74:	4628      	mov	r0, r5
 8009e76:	f7ff fd99 	bl	80099ac <_fflush_r>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d1ed      	bne.n	8009e5a <__swbuf_r+0x2a>
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	6022      	str	r2, [r4, #0]
 8009e8a:	701e      	strb	r6, [r3, #0]
 8009e8c:	6962      	ldr	r2, [r4, #20]
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d004      	beq.n	8009e9e <__swbuf_r+0x6e>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	07db      	lsls	r3, r3, #31
 8009e98:	d5e1      	bpl.n	8009e5e <__swbuf_r+0x2e>
 8009e9a:	2e0a      	cmp	r6, #10
 8009e9c:	d1df      	bne.n	8009e5e <__swbuf_r+0x2e>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f7ff fd83 	bl	80099ac <_fflush_r>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0d9      	beq.n	8009e5e <__swbuf_r+0x2e>
 8009eaa:	e7d6      	b.n	8009e5a <__swbuf_r+0x2a>

08009eac <__swsetup_r>:
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	4b29      	ldr	r3, [pc, #164]	@ (8009f54 <__swsetup_r+0xa8>)
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	b118      	cbz	r0, 8009ec0 <__swsetup_r+0x14>
 8009eb8:	6a03      	ldr	r3, [r0, #32]
 8009eba:	b90b      	cbnz	r3, 8009ec0 <__swsetup_r+0x14>
 8009ebc:	f7fd ff9c 	bl	8007df8 <__sinit>
 8009ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ec4:	0719      	lsls	r1, r3, #28
 8009ec6:	d422      	bmi.n	8009f0e <__swsetup_r+0x62>
 8009ec8:	06da      	lsls	r2, r3, #27
 8009eca:	d407      	bmi.n	8009edc <__swsetup_r+0x30>
 8009ecc:	2209      	movs	r2, #9
 8009ece:	602a      	str	r2, [r5, #0]
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eda:	e033      	b.n	8009f44 <__swsetup_r+0x98>
 8009edc:	0758      	lsls	r0, r3, #29
 8009ede:	d512      	bpl.n	8009f06 <__swsetup_r+0x5a>
 8009ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ee2:	b141      	cbz	r1, 8009ef6 <__swsetup_r+0x4a>
 8009ee4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ee8:	4299      	cmp	r1, r3
 8009eea:	d002      	beq.n	8009ef2 <__swsetup_r+0x46>
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7fe feff 	bl	8008cf0 <_free_r>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009efc:	81a3      	strh	r3, [r4, #12]
 8009efe:	2300      	movs	r3, #0
 8009f00:	6063      	str	r3, [r4, #4]
 8009f02:	6923      	ldr	r3, [r4, #16]
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	f043 0308 	orr.w	r3, r3, #8
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	6923      	ldr	r3, [r4, #16]
 8009f10:	b94b      	cbnz	r3, 8009f26 <__swsetup_r+0x7a>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f1c:	d003      	beq.n	8009f26 <__swsetup_r+0x7a>
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 f883 	bl	800a02c <__smakebuf_r>
 8009f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2a:	f013 0201 	ands.w	r2, r3, #1
 8009f2e:	d00a      	beq.n	8009f46 <__swsetup_r+0x9a>
 8009f30:	2200      	movs	r2, #0
 8009f32:	60a2      	str	r2, [r4, #8]
 8009f34:	6962      	ldr	r2, [r4, #20]
 8009f36:	4252      	negs	r2, r2
 8009f38:	61a2      	str	r2, [r4, #24]
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	b942      	cbnz	r2, 8009f50 <__swsetup_r+0xa4>
 8009f3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f42:	d1c5      	bne.n	8009ed0 <__swsetup_r+0x24>
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	0799      	lsls	r1, r3, #30
 8009f48:	bf58      	it	pl
 8009f4a:	6962      	ldrpl	r2, [r4, #20]
 8009f4c:	60a2      	str	r2, [r4, #8]
 8009f4e:	e7f4      	b.n	8009f3a <__swsetup_r+0x8e>
 8009f50:	2000      	movs	r0, #0
 8009f52:	e7f7      	b.n	8009f44 <__swsetup_r+0x98>
 8009f54:	20000030 	.word	0x20000030

08009f58 <_raise_r>:
 8009f58:	291f      	cmp	r1, #31
 8009f5a:	b538      	push	{r3, r4, r5, lr}
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	d904      	bls.n	8009f6c <_raise_r+0x14>
 8009f62:	2316      	movs	r3, #22
 8009f64:	6003      	str	r3, [r0, #0]
 8009f66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f6e:	b112      	cbz	r2, 8009f76 <_raise_r+0x1e>
 8009f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f74:	b94b      	cbnz	r3, 8009f8a <_raise_r+0x32>
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 f830 	bl	8009fdc <_getpid_r>
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	4601      	mov	r1, r0
 8009f80:	4628      	mov	r0, r5
 8009f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f86:	f000 b817 	b.w	8009fb8 <_kill_r>
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d00a      	beq.n	8009fa4 <_raise_r+0x4c>
 8009f8e:	1c59      	adds	r1, r3, #1
 8009f90:	d103      	bne.n	8009f9a <_raise_r+0x42>
 8009f92:	2316      	movs	r3, #22
 8009f94:	6003      	str	r3, [r0, #0]
 8009f96:	2001      	movs	r0, #1
 8009f98:	e7e7      	b.n	8009f6a <_raise_r+0x12>
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4798      	blx	r3
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	e7e0      	b.n	8009f6a <_raise_r+0x12>

08009fa8 <raise>:
 8009fa8:	4b02      	ldr	r3, [pc, #8]	@ (8009fb4 <raise+0xc>)
 8009faa:	4601      	mov	r1, r0
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	f7ff bfd3 	b.w	8009f58 <_raise_r>
 8009fb2:	bf00      	nop
 8009fb4:	20000030 	.word	0x20000030

08009fb8 <_kill_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d07      	ldr	r5, [pc, #28]	@ (8009fd8 <_kill_r+0x20>)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	602b      	str	r3, [r5, #0]
 8009fc6:	f7f8 fdfa 	bl	8002bbe <_kill>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	d102      	bne.n	8009fd4 <_kill_r+0x1c>
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	b103      	cbz	r3, 8009fd4 <_kill_r+0x1c>
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	bd38      	pop	{r3, r4, r5, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000700 	.word	0x20000700

08009fdc <_getpid_r>:
 8009fdc:	f7f8 bde7 	b.w	8002bae <_getpid>

08009fe0 <__swhatbuf_r>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	b096      	sub	sp, #88	@ 0x58
 8009fec:	4615      	mov	r5, r2
 8009fee:	461e      	mov	r6, r3
 8009ff0:	da0d      	bge.n	800a00e <__swhatbuf_r+0x2e>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ff8:	f04f 0100 	mov.w	r1, #0
 8009ffc:	bf14      	ite	ne
 8009ffe:	2340      	movne	r3, #64	@ 0x40
 800a000:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a004:	2000      	movs	r0, #0
 800a006:	6031      	str	r1, [r6, #0]
 800a008:	602b      	str	r3, [r5, #0]
 800a00a:	b016      	add	sp, #88	@ 0x58
 800a00c:	bd70      	pop	{r4, r5, r6, pc}
 800a00e:	466a      	mov	r2, sp
 800a010:	f000 f848 	bl	800a0a4 <_fstat_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	dbec      	blt.n	8009ff2 <__swhatbuf_r+0x12>
 800a018:	9901      	ldr	r1, [sp, #4]
 800a01a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a01e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a022:	4259      	negs	r1, r3
 800a024:	4159      	adcs	r1, r3
 800a026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a02a:	e7eb      	b.n	800a004 <__swhatbuf_r+0x24>

0800a02c <__smakebuf_r>:
 800a02c:	898b      	ldrh	r3, [r1, #12]
 800a02e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a030:	079d      	lsls	r5, r3, #30
 800a032:	4606      	mov	r6, r0
 800a034:	460c      	mov	r4, r1
 800a036:	d507      	bpl.n	800a048 <__smakebuf_r+0x1c>
 800a038:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	6123      	str	r3, [r4, #16]
 800a040:	2301      	movs	r3, #1
 800a042:	6163      	str	r3, [r4, #20]
 800a044:	b003      	add	sp, #12
 800a046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a048:	ab01      	add	r3, sp, #4
 800a04a:	466a      	mov	r2, sp
 800a04c:	f7ff ffc8 	bl	8009fe0 <__swhatbuf_r>
 800a050:	9f00      	ldr	r7, [sp, #0]
 800a052:	4605      	mov	r5, r0
 800a054:	4639      	mov	r1, r7
 800a056:	4630      	mov	r0, r6
 800a058:	f7fe febe 	bl	8008dd8 <_malloc_r>
 800a05c:	b948      	cbnz	r0, 800a072 <__smakebuf_r+0x46>
 800a05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a062:	059a      	lsls	r2, r3, #22
 800a064:	d4ee      	bmi.n	800a044 <__smakebuf_r+0x18>
 800a066:	f023 0303 	bic.w	r3, r3, #3
 800a06a:	f043 0302 	orr.w	r3, r3, #2
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	e7e2      	b.n	800a038 <__smakebuf_r+0xc>
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	6020      	str	r0, [r4, #0]
 800a076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	9b01      	ldr	r3, [sp, #4]
 800a07e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a082:	b15b      	cbz	r3, 800a09c <__smakebuf_r+0x70>
 800a084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 f81d 	bl	800a0c8 <_isatty_r>
 800a08e:	b128      	cbz	r0, 800a09c <__smakebuf_r+0x70>
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	f023 0303 	bic.w	r3, r3, #3
 800a096:	f043 0301 	orr.w	r3, r3, #1
 800a09a:	81a3      	strh	r3, [r4, #12]
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	431d      	orrs	r5, r3
 800a0a0:	81a5      	strh	r5, [r4, #12]
 800a0a2:	e7cf      	b.n	800a044 <__smakebuf_r+0x18>

0800a0a4 <_fstat_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	@ (800a0c4 <_fstat_r+0x20>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	602b      	str	r3, [r5, #0]
 800a0b2:	f7f8 fde4 	bl	8002c7e <_fstat>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d102      	bne.n	800a0c0 <_fstat_r+0x1c>
 800a0ba:	682b      	ldr	r3, [r5, #0]
 800a0bc:	b103      	cbz	r3, 800a0c0 <_fstat_r+0x1c>
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	bd38      	pop	{r3, r4, r5, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000700 	.word	0x20000700

0800a0c8 <_isatty_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	@ (800a0e4 <_isatty_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f8 fde3 	bl	8002c9e <_isatty>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_isatty_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_isatty_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20000700 	.word	0x20000700

0800a0e8 <fmax>:
 800a0e8:	b508      	push	{r3, lr}
 800a0ea:	ed2d 8b04 	vpush	{d8-d9}
 800a0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a0f2:	eef0 8a60 	vmov.f32	s17, s1
 800a0f6:	eeb0 9a41 	vmov.f32	s18, s2
 800a0fa:	eef0 9a61 	vmov.f32	s19, s3
 800a0fe:	f000 f847 	bl	800a190 <__fpclassifyd>
 800a102:	b950      	cbnz	r0, 800a11a <fmax+0x32>
 800a104:	eeb0 8a49 	vmov.f32	s16, s18
 800a108:	eef0 8a69 	vmov.f32	s17, s19
 800a10c:	eeb0 0a48 	vmov.f32	s0, s16
 800a110:	eef0 0a68 	vmov.f32	s1, s17
 800a114:	ecbd 8b04 	vpop	{d8-d9}
 800a118:	bd08      	pop	{r3, pc}
 800a11a:	eeb0 0a49 	vmov.f32	s0, s18
 800a11e:	eef0 0a69 	vmov.f32	s1, s19
 800a122:	f000 f835 	bl	800a190 <__fpclassifyd>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0f0      	beq.n	800a10c <fmax+0x24>
 800a12a:	ec53 2b19 	vmov	r2, r3, d9
 800a12e:	ec51 0b18 	vmov	r0, r1, d8
 800a132:	f7f6 fd19 	bl	8000b68 <__aeabi_dcmpgt>
 800a136:	2800      	cmp	r0, #0
 800a138:	d0e4      	beq.n	800a104 <fmax+0x1c>
 800a13a:	e7e7      	b.n	800a10c <fmax+0x24>

0800a13c <fmin>:
 800a13c:	b508      	push	{r3, lr}
 800a13e:	ed2d 8b04 	vpush	{d8-d9}
 800a142:	eeb0 8a40 	vmov.f32	s16, s0
 800a146:	eef0 8a60 	vmov.f32	s17, s1
 800a14a:	eeb0 9a41 	vmov.f32	s18, s2
 800a14e:	eef0 9a61 	vmov.f32	s19, s3
 800a152:	f000 f81d 	bl	800a190 <__fpclassifyd>
 800a156:	b950      	cbnz	r0, 800a16e <fmin+0x32>
 800a158:	eeb0 8a49 	vmov.f32	s16, s18
 800a15c:	eef0 8a69 	vmov.f32	s17, s19
 800a160:	eeb0 0a48 	vmov.f32	s0, s16
 800a164:	eef0 0a68 	vmov.f32	s1, s17
 800a168:	ecbd 8b04 	vpop	{d8-d9}
 800a16c:	bd08      	pop	{r3, pc}
 800a16e:	eeb0 0a49 	vmov.f32	s0, s18
 800a172:	eef0 0a69 	vmov.f32	s1, s19
 800a176:	f000 f80b 	bl	800a190 <__fpclassifyd>
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d0f0      	beq.n	800a160 <fmin+0x24>
 800a17e:	ec53 2b19 	vmov	r2, r3, d9
 800a182:	ec51 0b18 	vmov	r0, r1, d8
 800a186:	f7f6 fcd1 	bl	8000b2c <__aeabi_dcmplt>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0e4      	beq.n	800a158 <fmin+0x1c>
 800a18e:	e7e7      	b.n	800a160 <fmin+0x24>

0800a190 <__fpclassifyd>:
 800a190:	ec51 0b10 	vmov	r0, r1, d0
 800a194:	b510      	push	{r4, lr}
 800a196:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800a19a:	460b      	mov	r3, r1
 800a19c:	d019      	beq.n	800a1d2 <__fpclassifyd+0x42>
 800a19e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800a1a2:	490e      	ldr	r1, [pc, #56]	@ (800a1dc <__fpclassifyd+0x4c>)
 800a1a4:	428a      	cmp	r2, r1
 800a1a6:	d90e      	bls.n	800a1c6 <__fpclassifyd+0x36>
 800a1a8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800a1ac:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800a1b0:	428a      	cmp	r2, r1
 800a1b2:	d908      	bls.n	800a1c6 <__fpclassifyd+0x36>
 800a1b4:	4a0a      	ldr	r2, [pc, #40]	@ (800a1e0 <__fpclassifyd+0x50>)
 800a1b6:	4213      	tst	r3, r2
 800a1b8:	d007      	beq.n	800a1ca <__fpclassifyd+0x3a>
 800a1ba:	4294      	cmp	r4, r2
 800a1bc:	d107      	bne.n	800a1ce <__fpclassifyd+0x3e>
 800a1be:	fab0 f080 	clz	r0, r0
 800a1c2:	0940      	lsrs	r0, r0, #5
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	2004      	movs	r0, #4
 800a1c8:	e7fc      	b.n	800a1c4 <__fpclassifyd+0x34>
 800a1ca:	2003      	movs	r0, #3
 800a1cc:	e7fa      	b.n	800a1c4 <__fpclassifyd+0x34>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7f8      	b.n	800a1c4 <__fpclassifyd+0x34>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1ee      	bne.n	800a1b4 <__fpclassifyd+0x24>
 800a1d6:	2002      	movs	r0, #2
 800a1d8:	e7f4      	b.n	800a1c4 <__fpclassifyd+0x34>
 800a1da:	bf00      	nop
 800a1dc:	7fdfffff 	.word	0x7fdfffff
 800a1e0:	7ff00000 	.word	0x7ff00000

0800a1e4 <_init>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	bf00      	nop
 800a1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ea:	bc08      	pop	{r3}
 800a1ec:	469e      	mov	lr, r3
 800a1ee:	4770      	bx	lr

0800a1f0 <_fini>:
 800a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f2:	bf00      	nop
 800a1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f6:	bc08      	pop	{r3}
 800a1f8:	469e      	mov	lr, r3
 800a1fa:	4770      	bx	lr
