
VSSS_FIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf30  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800c110  0800c110  0000d110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c618  0800c618  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c618  0800c618  0000d618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c620  0800c620  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c620  0800c620  0000d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c624  0800c624  0000d624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c628  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  200001f0  0800c814  0000e1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800c814  0000e820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018380  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346e  00000000  00000000  0002659c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00029a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001002  00000000  00000000  0002aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d5f  00000000  00000000  0002beba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001859c  00000000  00000000  0004cc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb3d9  00000000  00000000  000651b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013058e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c70  00000000  00000000  001305d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00137244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c0f8 	.word	0x0800c0f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c0f8 	.word	0x0800c0f8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <IMU_Init>:

#define IMU_SPI &hspi2
#define CS_PORT   GPIOB
#define CS_PIN    GPIO_PIN_12

void IMU_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    uint8_t check;
    uint8_t data;

    check = IMU_ReadReg(IMU_WHO_AM_I);
 800103a:	2075      	movs	r0, #117	@ 0x75
 800103c:	f000 f838 	bl	80010b0 <IMU_ReadReg>
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
    if (check == 0x70) {
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b70      	cmp	r3, #112	@ 0x70
 8001048:	d106      	bne.n	8001058 <IMU_Init+0x24>
        data = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	71bb      	strb	r3, [r7, #6]
        IMU_WriteReg(IMU_PWR_MGMT_1, data);
 800104e:	79bb      	ldrb	r3, [r7, #6]
 8001050:	4619      	mov	r1, r3
 8001052:	206b      	movs	r0, #107	@ 0x6b
 8001054:	f000 f804 	bl	8001060 <IMU_WriteReg>
    }
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <IMU_WriteReg>:

void IMU_WriteReg(uint8_t reg, uint8_t data) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	71bb      	strb	r3, [r7, #6]
    uint8_t txData[2] = {reg, data};
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	733b      	strb	r3, [r7, #12]
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107e:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <IMU_WriteReg+0x48>)
 8001080:	f002 fbdc 	bl	800383c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, txData, 2, HAL_MAX_DELAY);
 8001084:	f107 010c 	add.w	r1, r7, #12
 8001088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108c:	2202      	movs	r2, #2
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <IMU_WriteReg+0x4c>)
 8001090:	f003 fc69 	bl	8004966 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800109a:	4803      	ldr	r0, [pc, #12]	@ (80010a8 <IMU_WriteReg+0x48>)
 800109c:	f002 fbce 	bl	800383c <HAL_GPIO_WritePin>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	48000400 	.word	0x48000400
 80010ac:	20000474 	.word	0x20000474

080010b0 <IMU_ReadReg>:

uint8_t IMU_ReadReg(uint8_t reg) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
    uint8_t txData = reg | 0x80;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73fb      	strb	r3, [r7, #15]
    uint8_t rxData;
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010ca:	480f      	ldr	r0, [pc, #60]	@ (8001108 <IMU_ReadReg+0x58>)
 80010cc:	f002 fbb6 	bl	800383c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(IMU_SPI, &txData, 1, HAL_MAX_DELAY);
 80010d0:	f107 010f 	add.w	r1, r7, #15
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d8:	2201      	movs	r2, #1
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <IMU_ReadReg+0x5c>)
 80010dc:	f003 fc43 	bl	8004966 <HAL_SPI_Transmit>
    HAL_SPI_Receive(IMU_SPI, &rxData, 1, HAL_MAX_DELAY);
 80010e0:	f107 010e 	add.w	r1, r7, #14
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010e8:	2201      	movs	r2, #1
 80010ea:	4808      	ldr	r0, [pc, #32]	@ (800110c <IMU_ReadReg+0x5c>)
 80010ec:	f003 fdb1 	bl	8004c52 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f6:	4804      	ldr	r0, [pc, #16]	@ (8001108 <IMU_ReadReg+0x58>)
 80010f8:	f002 fba0 	bl	800383c <HAL_GPIO_WritePin>
    return rxData;
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	48000400 	.word	0x48000400
 800110c:	20000474 	.word	0x20000474

08001110 <IMU_ReadAccelData>:

void IMU_ReadAccelData(int16_t *accelData) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_ACCEL_XOUT_H);
 8001118:	203b      	movs	r0, #59	@ 0x3b
 800111a:	f7ff ffc9 	bl	80010b0 <IMU_ReadReg>
 800111e:	4603      	mov	r3, r0
 8001120:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_ACCEL_XOUT_L);
 8001122:	203c      	movs	r0, #60	@ 0x3c
 8001124:	f7ff ffc4 	bl	80010b0 <IMU_ReadReg>
 8001128:	4603      	mov	r3, r0
 800112a:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_ACCEL_YOUT_H);
 800112c:	203d      	movs	r0, #61	@ 0x3d
 800112e:	f7ff ffbf 	bl	80010b0 <IMU_ReadReg>
 8001132:	4603      	mov	r3, r0
 8001134:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_ACCEL_YOUT_L);
 8001136:	203e      	movs	r0, #62	@ 0x3e
 8001138:	f7ff ffba 	bl	80010b0 <IMU_ReadReg>
 800113c:	4603      	mov	r3, r0
 800113e:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_ACCEL_ZOUT_H);
 8001140:	203f      	movs	r0, #63	@ 0x3f
 8001142:	f7ff ffb5 	bl	80010b0 <IMU_ReadReg>
 8001146:	4603      	mov	r3, r0
 8001148:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_ACCEL_ZOUT_L);
 800114a:	2040      	movs	r0, #64	@ 0x40
 800114c:	f7ff ffb0 	bl	80010b0 <IMU_ReadReg>
 8001150:	4603      	mov	r3, r0
 8001152:	737b      	strb	r3, [r7, #13]

    accelData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 8001154:	7a3b      	ldrb	r3, [r7, #8]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7a7b      	ldrb	r3, [r7, #9]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	801a      	strh	r2, [r3, #0]
    accelData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 8001166:	7abb      	ldrb	r3, [r7, #10]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b219      	sxth	r1, r3
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	b21a      	sxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3302      	adds	r3, #2
 8001174:	430a      	orrs	r2, r1
 8001176:	b212      	sxth	r2, r2
 8001178:	801a      	strh	r2, [r3, #0]
    accelData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 800117a:	7b3b      	ldrb	r3, [r7, #12]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b219      	sxth	r1, r3
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	b21a      	sxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3304      	adds	r3, #4
 8001188:	430a      	orrs	r2, r1
 800118a:	b212      	sxth	r2, r2
 800118c:	801a      	strh	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <IMU_ReadGyroData>:

void IMU_ReadGyroData(int16_t *gyroData) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    rawData[0] = IMU_ReadReg(IMU_GYRO_XOUT_H);
 800119e:	2043      	movs	r0, #67	@ 0x43
 80011a0:	f7ff ff86 	bl	80010b0 <IMU_ReadReg>
 80011a4:	4603      	mov	r3, r0
 80011a6:	723b      	strb	r3, [r7, #8]
    rawData[1] = IMU_ReadReg(IMU_GYRO_XOUT_L);
 80011a8:	2044      	movs	r0, #68	@ 0x44
 80011aa:	f7ff ff81 	bl	80010b0 <IMU_ReadReg>
 80011ae:	4603      	mov	r3, r0
 80011b0:	727b      	strb	r3, [r7, #9]
    rawData[2] = IMU_ReadReg(IMU_GYRO_YOUT_H);
 80011b2:	2045      	movs	r0, #69	@ 0x45
 80011b4:	f7ff ff7c 	bl	80010b0 <IMU_ReadReg>
 80011b8:	4603      	mov	r3, r0
 80011ba:	72bb      	strb	r3, [r7, #10]
    rawData[3] = IMU_ReadReg(IMU_GYRO_YOUT_L);
 80011bc:	2046      	movs	r0, #70	@ 0x46
 80011be:	f7ff ff77 	bl	80010b0 <IMU_ReadReg>
 80011c2:	4603      	mov	r3, r0
 80011c4:	72fb      	strb	r3, [r7, #11]
    rawData[4] = IMU_ReadReg(IMU_GYRO_ZOUT_H);
 80011c6:	2047      	movs	r0, #71	@ 0x47
 80011c8:	f7ff ff72 	bl	80010b0 <IMU_ReadReg>
 80011cc:	4603      	mov	r3, r0
 80011ce:	733b      	strb	r3, [r7, #12]
    rawData[5] = IMU_ReadReg(IMU_GYRO_ZOUT_L);
 80011d0:	2048      	movs	r0, #72	@ 0x48
 80011d2:	f7ff ff6d 	bl	80010b0 <IMU_ReadReg>
 80011d6:	4603      	mov	r3, r0
 80011d8:	737b      	strb	r3, [r7, #13]

    gyroData[0] = ((int16_t)rawData[0] << 8) | rawData[1];
 80011da:	7a3b      	ldrb	r3, [r7, #8]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7a7b      	ldrb	r3, [r7, #9]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	801a      	strh	r2, [r3, #0]
    gyroData[1] = ((int16_t)rawData[2] << 8) | rawData[3];
 80011ec:	7abb      	ldrb	r3, [r7, #10]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b219      	sxth	r1, r3
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3302      	adds	r3, #2
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b212      	sxth	r2, r2
 80011fe:	801a      	strh	r2, [r3, #0]
    gyroData[2] = ((int16_t)rawData[4] << 8) | rawData[5];
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b219      	sxth	r1, r3
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	b21a      	sxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	430a      	orrs	r2, r1
 8001210:	b212      	sxth	r2, r2
 8001212:	801a      	strh	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <PID_Init>:
#include "PID.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800124c:	f7ff fc8c 	bl	8000b68 <__aeabi_dcmpgt>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8001262:	e011      	b.n	8001288 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001270:	f7ff fc5c 	bl	8000b2c <__aeabi_dcmplt>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <PID_Init+0x60>
}
 800127a:	e005      	b.n	8001288 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6278      	str	r0, [r7, #36]	@ 0x24
 8001298:	6239      	str	r1, [r7, #32]
 800129a:	61fa      	str	r2, [r7, #28]
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	ed87 0b04 	vstr	d0, [r7, #16]
 80012a2:	ed87 1b02 	vstr	d1, [r7, #8]
 80012a6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	6a3a      	ldr	r2, [r7, #32]
 80012b4:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	2200      	movs	r2, #0
 80012c0:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80012c2:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001318 <PID+0x88>
 80012c6:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001320 <PID+0x90>
 80012ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012cc:	f000 f956 	bl	800157c <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	2264      	movs	r2, #100	@ 0x64
 80012d4:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80012d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80012da:	4619      	mov	r1, r3
 80012dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012de:	f000 fa63 	bl	80017a8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80012e2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80012e6:	4619      	mov	r1, r3
 80012e8:	ed97 2b00 	vldr	d2, [r7]
 80012ec:	ed97 1b02 	vldr	d1, [r7, #8]
 80012f0:	ed97 0b04 	vldr	d0, [r7, #16]
 80012f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012f6:	f000 f9af 	bl	8001658 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80012fa:	f002 f80b 	bl	8003314 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	1ad2      	subs	r2, r2, r3
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	605a      	str	r2, [r3, #4]

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
 8001318:	00000000 	.word	0x00000000
 800131c:	406fe000 	.word	0x406fe000
	...

08001328 <PID2>:

void PID2(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	@ 0x30
 800132c:	af02      	add	r7, sp, #8
 800132e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001330:	6239      	str	r1, [r7, #32]
 8001332:	61fa      	str	r2, [r7, #28]
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	ed87 0b04 	vstr	d0, [r7, #16]
 800133a:	ed87 1b02 	vstr	d1, [r7, #8]
 800133e:	ed87 2b00 	vstr	d2, [r7]
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
 8001342:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	2301      	movs	r3, #1
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	ed97 2b00 	vldr	d2, [r7]
 8001350:	ed97 1b02 	vldr	d1, [r7, #8]
 8001354:	ed97 0b04 	vldr	d0, [r7, #16]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	6a39      	ldr	r1, [r7, #32]
 800135e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001360:	f7ff ff96 	bl	8001290 <PID>
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	@ 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <PID_Compute>:

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b08c      	sub	sp, #48	@ 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <PID_Compute+0x14>
	{
		return _FALSE;
 800137c:	2300      	movs	r3, #0
 800137e:	e0db      	b.n	8001538 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001380:	f001 ffc8 	bl	8003314 <HAL_GetTick>
 8001384:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	429a      	cmp	r2, r3
 8001398:	f0c0 80cd 	bcc.w	8001536 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b4:	f7fe ff90 	bl	80002d8 <__aeabi_dsub>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80013c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ca:	f7fe ff85 	bl	80002d8 <__aeabi_dsub>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80013e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013e6:	f7ff f92f 	bl	8000648 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7fe ff73 	bl	80002dc <__adddf3>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d114      	bne.n	8001432 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001418:	f7ff f916 	bl	8000648 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4620      	mov	r0, r4
 8001422:	4629      	mov	r1, r5
 8001424:	f7fe ff58 	bl	80002d8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800143e:	f7ff fb93 	bl	8000b68 <__aeabi_dcmpgt>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001454:	e010      	b.n	8001478 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001462:	f7ff fb63 	bl	8000b2c <__aeabi_dcmplt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148a:	f7ff f8dd 	bl	8000648 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001496:	e005      	b.n	80014a4 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80014b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014b4:	f7ff f8c8 	bl	8000648 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7fe ff0a 	bl	80002d8 <__aeabi_dsub>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014cc:	f7fe ff06 	bl	80002dc <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80014de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014e2:	f7ff fb41 	bl	8000b68 <__aeabi_dcmpgt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80014f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80014f6:	e00e      	b.n	8001516 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80014fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001502:	f7ff fb13 	bl	8000b2c <__aeabi_dcmplt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001512:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800151a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800151e:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001528:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001530:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8001536:	2300      	movs	r3, #0
	}

}
 8001538:	4618      	mov	r0, r3
 800153a:	3730      	adds	r7, #48	@ 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bdb0      	pop	{r4, r5, r7, pc}

08001540 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2b01      	cmp	r3, #1
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <PID_SetMode+0x2e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fe57 	bl	800121c <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	705a      	strb	r2, [r3, #1]

}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6178      	str	r0, [r7, #20]
 8001584:	ed87 0b02 	vstr	d0, [r7, #8]
 8001588:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800158c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001594:	f7ff fade 	bl	8000b54 <__aeabi_dcmpge>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d158      	bne.n	8001650 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800159e:	6979      	ldr	r1, [r7, #20]
 80015a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 80015a8:	6979      	ldr	r1, [r7, #20]
 80015aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ae:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	785b      	ldrb	r3, [r3, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d04b      	beq.n	8001652 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80015c8:	f7ff face 	bl	8000b68 <__aeabi_dcmpgt>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80015dc:	e9c1 2300 	strd	r2, r3, [r1]
 80015e0:	e012      	b.n	8001608 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80015f0:	f7ff fa9c 	bl	8000b2c <__aeabi_dcmplt>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001604:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001614:	f7ff faa8 	bl	8000b68 <__aeabi_dcmpgt>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001624:	6979      	ldr	r1, [r7, #20]
 8001626:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800162a:	e012      	b.n	8001652 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001638:	f7ff fa78 	bl	8000b2c <__aeabi_dcmplt>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001648:	6979      	ldr	r1, [r7, #20]
 800164a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800164e:	e000      	b.n	8001652 <PID_SetOutputLimits+0xd6>
		return;
 8001650:	bf00      	nop
		}
		else { }

	}

}
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	61f8      	str	r0, [r7, #28]
 8001660:	ed87 0b04 	vstr	d0, [r7, #16]
 8001664:	ed87 1b02 	vstr	d1, [r7, #8]
 8001668:	ed87 2b00 	vstr	d2, [r7]
 800166c:	460b      	mov	r3, r1
 800166e:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800167c:	f7ff fa56 	bl	8000b2c <__aeabi_dcmplt>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8089 	bne.w	800179a <PID_SetTunings2+0x142>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001694:	f7ff fa4a 	bl	8000b2c <__aeabi_dcmplt>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d17d      	bne.n	800179a <PID_SetTunings2+0x142>
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016aa:	f7ff fa3f 	bl	8000b2c <__aeabi_dcmplt>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d172      	bne.n	800179a <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	7efa      	ldrb	r2, [r7, #27]
 80016b8:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80016ba:	7efb      	ldrb	r3, [r7, #27]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80016cc:	69f9      	ldr	r1, [r7, #28]
 80016ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80016d6:	69f9      	ldr	r1, [r7, #28]
 80016d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80016e0:	69f9      	ldr	r1, [r7, #28]
 80016e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e6:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff30 	bl	8000554 <__aeabi_ui2d>
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <PID_SetTunings2+0x14c>)
 80016fa:	f7ff f8cf 	bl	800089c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8001706:	69f9      	ldr	r1, [r7, #28]
 8001708:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800170c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001710:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001714:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001718:	f7fe ff96 	bl	8000648 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	69f9      	ldr	r1, [r7, #28]
 8001722:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800172a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172e:	f7ff f8b5 	bl	800089c <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	69f9      	ldr	r1, [r7, #28]
 8001738:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	78db      	ldrb	r3, [r3, #3]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d12b      	bne.n	800179c <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	f7fe fdc1 	bl	80002d8 <__aeabi_dsub>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	69f9      	ldr	r1, [r7, #28]
 800175c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001766:	f04f 0000 	mov.w	r0, #0
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	f7fe fdb3 	bl	80002d8 <__aeabi_dsub>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	69f9      	ldr	r1, [r7, #28]
 8001778:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	f7fe fda5 	bl	80002d8 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	69f9      	ldr	r1, [r7, #28]
 8001794:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001798:	e000      	b.n	800179c <PID_SetTunings2+0x144>
		return;
 800179a:	bf00      	nop

	}

}
 800179c:	3728      	adds	r7, #40	@ 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	408f4000 	.word	0x408f4000

080017a8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d02e      	beq.n	800181a <PID_SetControllerDirection+0x72>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	78db      	ldrb	r3, [r3, #3]
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d029      	beq.n	800181a <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80017cc:	f04f 0000 	mov.w	r0, #0
 80017d0:	f04f 0100 	mov.w	r1, #0
 80017d4:	f7fe fd80 	bl	80002d8 <__aeabi_dsub>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017e8:	f04f 0000 	mov.w	r0, #0
 80017ec:	f04f 0100 	mov.w	r1, #0
 80017f0:	f7fe fd72 	bl	80002d8 <__aeabi_dsub>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	f7fe fd64 	bl	80002d8 <__aeabi_dsub>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	70da      	strb	r2, [r3, #3]

}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	dd2e      	ble.n	8001896 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001838:	6838      	ldr	r0, [r7, #0]
 800183a:	f7fe fe9b 	bl	8000574 <__aeabi_i2d>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe84 	bl	8000554 <__aeabi_ui2d>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4620      	mov	r0, r4
 8001852:	4629      	mov	r1, r5
 8001854:	f7ff f822 	bl	800089c <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001866:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186a:	f7fe feed 	bl	8000648 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800187e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001882:	f7ff f80b 	bl	800089c <__aeabi_ddiv>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]

	}

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018a0 <VSSS_Init>:
//double left_rpm = 0.0;
//uint32_t timestamp = 0;
//uint32_t last_update_time = 0;


void VSSS_Init(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
    Kinematics_Init();
 80018a4:	f000 f8c8 	bl	8001a38 <Kinematics_Init>
    NRF24_Init();
 80018a8:	f001 f8c2 	bl	8002a30 <NRF24_Init>
    NRF24_RxMode(RxAddress, 76);
 80018ac:	214c      	movs	r1, #76	@ 0x4c
 80018ae:	4808      	ldr	r0, [pc, #32]	@ (80018d0 <VSSS_Init+0x30>)
 80018b0:	f001 f8e5 	bl	8002a7e <NRF24_RxMode>

    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80018b4:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <VSSS_Init+0x34>)
 80018b6:	f7fe fd03 	bl	80002c0 <strlen>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c2:	4904      	ldr	r1, [pc, #16]	@ (80018d4 <VSSS_Init+0x34>)
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <VSSS_Init+0x38>)
 80018c6:	f005 f983 	bl	8006bd0 <HAL_UART_Transmit>

//    srand(HAL_GetTick());
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000608 	.word	0x20000608

080018dc <VSSS_Run>:

void VSSS_Run(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

	if (isDataAvailable(2) == 1) {
 80018e0:	2002      	movs	r0, #2
 80018e2:	f001 f90b 	bl	8002afc <isDataAvailable>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10a      	bne.n	8001902 <VSSS_Run+0x26>
		NRF24_Receive(robot.RxData);
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <VSSS_Run+0x44>)
 80018ee:	f001 f925 	bl	8002b3c <NRF24_Receive>
        memcpy(&robot.vL, &robot.RxData[0], sizeof(float));
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <VSSS_Run+0x48>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <VSSS_Run+0x48>)
 80018f8:	6013      	str	r3, [r2, #0]
        memcpy(&robot.vR, &robot.RxData[4], sizeof(float));
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <VSSS_Run+0x48>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	4a09      	ldr	r2, [pc, #36]	@ (8001924 <VSSS_Run+0x48>)
 8001900:	6053      	str	r3, [r2, #4]
	}

//	char data[50];
//    snprintf(data, sizeof(data), "vL: %.2f, vR: %.2f\r\n", robot.vL, robot.vR);
//    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
    Kinematics_SetSpeeds(robot.vL, robot.vR);
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <VSSS_Run+0x48>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <VSSS_Run+0x48>)
 800190a:	ed93 7a01 	vldr	s14, [r3, #4]
 800190e:	eef0 0a47 	vmov.f32	s1, s14
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	f000 f96f 	bl	8001bf8 <Kinematics_SetSpeeds>

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000214 	.word	0x20000214
 8001924:	2000020c 	.word	0x2000020c

08001928 <Encoder_Init>:

Encoder left_encoder;
Encoder right_encoder;

void Encoder_Init(Encoder *encoder, TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	601a      	str	r2, [r3, #0]
    encoder->last_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(htim);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	b21a      	sxth	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	809a      	strh	r2, [r3, #4]
    encoder->last_time = HAL_GetTick();
 8001944:	f001 fce6 	bl	8003314 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]
    encoder->rpm = 0.0f;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <Encoder_Calculate_RPM>:

void Encoder_Calculate_RPM(Encoder *encoder)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

    uint32_t current_time = HAL_GetTick();
 8001968:	f001 fcd4 	bl	8003314 <HAL_GetTick>
 800196c:	61b8      	str	r0, [r7, #24]
    uint32_t delta_time = current_time - encoder->last_time;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]


    if (delta_time == 0) {
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <Encoder_Calculate_RPM+0xa8>
        return;
    }

    int16_t current_encoder_value = (int16_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	827b      	strh	r3, [r7, #18]
    int16_t delta_encoder = current_encoder_value - encoder->last_encoder_value;
 8001988:	8a7a      	ldrh	r2, [r7, #18]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001990:	b29b      	uxth	r3, r3
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b29b      	uxth	r3, r3
 8001996:	83fb      	strh	r3, [r7, #30]

    if (delta_encoder > (ENCODER_PULSES_PER_REV / 2)) {
 8001998:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800199c:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 80019a0:	db05      	blt.n	80019ae <Encoder_Calculate_RPM+0x4e>
        delta_encoder -= ENCODER_PULSES_PER_REV;
 80019a2:	8bfb      	ldrh	r3, [r7, #30]
 80019a4:	f6a3 23be 	subw	r3, r3, #2750	@ 0xabe
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	83fb      	strh	r3, [r7, #30]
 80019ac:	e009      	b.n	80019c2 <Encoder_Calculate_RPM+0x62>
    }
    else if (delta_encoder < -(ENCODER_PULSES_PER_REV / 2)) {
 80019ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019b2:	f513 6fac 	cmn.w	r3, #1376	@ 0x560
 80019b6:	dc04      	bgt.n	80019c2 <Encoder_Calculate_RPM+0x62>
        delta_encoder += ENCODER_PULSES_PER_REV;
 80019b8:	8bfb      	ldrh	r3, [r7, #30]
 80019ba:	f603 23be 	addw	r3, r3, #2750	@ 0xabe
 80019be:	b29b      	uxth	r3, r3
 80019c0:	83fb      	strh	r3, [r7, #30]
    }

    float dt_min = (float)delta_time / 60000.0f;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019cc:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001a10 <Encoder_Calculate_RPM+0xb0>
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	edc7 7a03 	vstr	s15, [r7, #12]

    encoder->rpm = ((float)delta_encoder / (float)ENCODER_PULSES_PER_REV) / dt_min;
 80019d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001a14 <Encoder_Calculate_RPM+0xb4>
 80019e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edc3 7a03 	vstr	s15, [r3, #12]


    encoder->last_encoder_value = current_encoder_value;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8a7a      	ldrh	r2, [r7, #18]
 80019fe:	809a      	strh	r2, [r3, #4]
    encoder->last_time = current_time;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	e000      	b.n	8001a0a <Encoder_Calculate_RPM+0xaa>
        return;
 8001a08:	bf00      	nop
}
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	476a6000 	.word	0x476a6000
 8001a14:	452be000 	.word	0x452be000

08001a18 <Encoder_Update>:

void Encoder_Update(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
    Encoder_Calculate_RPM(&left_encoder);
 8001a1c:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <Encoder_Update+0x14>)
 8001a1e:	f7ff ff9f 	bl	8001960 <Encoder_Calculate_RPM>
    Encoder_Calculate_RPM(&right_encoder);
 8001a22:	4803      	ldr	r0, [pc, #12]	@ (8001a30 <Encoder_Update+0x18>)
 8001a24:	f7ff ff9c 	bl	8001960 <Encoder_Calculate_RPM>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000234 	.word	0x20000234
 8001a30:	20000244 	.word	0x20000244
 8001a34:	00000000 	.word	0x00000000

08001a38 <Kinematics_Init>:
int16_t accelData[3], gyroData[3];

char debug_imu[150];


void Kinematics_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af04      	add	r7, sp, #16
	  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a3e:	213c      	movs	r1, #60	@ 0x3c
 8001a40:	4847      	ldr	r0, [pc, #284]	@ (8001b60 <Kinematics_Init+0x128>)
 8001a42:	f004 f877 	bl	8005b34 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001a46:	213c      	movs	r1, #60	@ 0x3c
 8001a48:	4846      	ldr	r0, [pc, #280]	@ (8001b64 <Kinematics_Init+0x12c>)
 8001a4a:	f004 f873 	bl	8005b34 <HAL_TIM_Encoder_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4845      	ldr	r0, [pc, #276]	@ (8001b68 <Kinematics_Init+0x130>)
 8001a52:	f003 fec9 	bl	80057e8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a56:	2100      	movs	r1, #0
 8001a58:	4844      	ldr	r0, [pc, #272]	@ (8001b6c <Kinematics_Init+0x134>)
 8001a5a:	f003 fec5 	bl	80057e8 <HAL_TIM_PWM_Start>

	  IMU_Init();
 8001a5e:	f7ff fae9 	bl	8001034 <IMU_Init>

      Encoder_Init(&left_encoder, &htim3);
 8001a62:	493f      	ldr	r1, [pc, #252]	@ (8001b60 <Kinematics_Init+0x128>)
 8001a64:	4842      	ldr	r0, [pc, #264]	@ (8001b70 <Kinematics_Init+0x138>)
 8001a66:	f7ff ff5f 	bl	8001928 <Encoder_Init>
      Encoder_Init(&right_encoder, &htim4);
 8001a6a:	493e      	ldr	r1, [pc, #248]	@ (8001b64 <Kinematics_Init+0x12c>)
 8001a6c:	4841      	ldr	r0, [pc, #260]	@ (8001b74 <Kinematics_Init+0x13c>)
 8001a6e:	f7ff ff5b 	bl	8001928 <Encoder_Init>

      Motor_Init(&motorLeft, &htim2, TIM_CHANNEL_1, INA1_GPIO_Port, INA1_Pin, INA2_GPIO_Port, INA2_Pin);
 8001a72:	2304      	movs	r3, #4
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a84:	2200      	movs	r2, #0
 8001a86:	4939      	ldr	r1, [pc, #228]	@ (8001b6c <Kinematics_Init+0x134>)
 8001a88:	483b      	ldr	r0, [pc, #236]	@ (8001b78 <Kinematics_Init+0x140>)
 8001a8a:	f000 fe15 	bl	80026b8 <Motor_Init>
      Motor_Init(&motorRight, &htim1, TIM_CHANNEL_1, INB1_GPIO_Port, INB1_Pin, INB2_GPIO_Port, INB2_Pin);
 8001a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4930      	ldr	r1, [pc, #192]	@ (8001b68 <Kinematics_Init+0x130>)
 8001aa8:	4834      	ldr	r0, [pc, #208]	@ (8001b7c <Kinematics_Init+0x144>)
 8001aaa:	f000 fe05 	bl	80026b8 <Motor_Init>

	  PID2(&pidLeft, &inputLeft, &outputLeft, &setpoint_left_rpm, 0.5539, 124.0, 0.001194, _PID_CD_DIRECT);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	ed9f 2b1d 	vldr	d2, [pc, #116]	@ 8001b28 <Kinematics_Init+0xf0>
 8001ab6:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8001b30 <Kinematics_Init+0xf8>
 8001aba:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8001b38 <Kinematics_Init+0x100>
 8001abe:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <Kinematics_Init+0x148>)
 8001ac0:	4a30      	ldr	r2, [pc, #192]	@ (8001b84 <Kinematics_Init+0x14c>)
 8001ac2:	4931      	ldr	r1, [pc, #196]	@ (8001b88 <Kinematics_Init+0x150>)
 8001ac4:	4831      	ldr	r0, [pc, #196]	@ (8001b8c <Kinematics_Init+0x154>)
 8001ac6:	f7ff fc2f 	bl	8001328 <PID2>
	  PID2(&pidRight, &inputRight, &outputRight, &setpoint_right_rpm, 0.3515, 84.89, 0.001194, _PID_CD_DIRECT);
 8001aca:	2300      	movs	r3, #0
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	ed9f 2b16 	vldr	d2, [pc, #88]	@ 8001b28 <Kinematics_Init+0xf0>
 8001ad2:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8001b40 <Kinematics_Init+0x108>
 8001ad6:	ed9f 0b1c 	vldr	d0, [pc, #112]	@ 8001b48 <Kinematics_Init+0x110>
 8001ada:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <Kinematics_Init+0x158>)
 8001adc:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <Kinematics_Init+0x15c>)
 8001ade:	492e      	ldr	r1, [pc, #184]	@ (8001b98 <Kinematics_Init+0x160>)
 8001ae0:	482e      	ldr	r0, [pc, #184]	@ (8001b9c <Kinematics_Init+0x164>)
 8001ae2:	f7ff fc21 	bl	8001328 <PID2>

	  PID_SetOutputLimits(&pidLeft, -PWM_MAX, PWM_MAX);
 8001ae6:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8001b50 <Kinematics_Init+0x118>
 8001aea:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001b58 <Kinematics_Init+0x120>
 8001aee:	4827      	ldr	r0, [pc, #156]	@ (8001b8c <Kinematics_Init+0x154>)
 8001af0:	f7ff fd44 	bl	800157c <PID_SetOutputLimits>
	  PID_SetOutputLimits(&pidRight, -PWM_MAX, PWM_MAX);
 8001af4:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001b50 <Kinematics_Init+0x118>
 8001af8:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001b58 <Kinematics_Init+0x120>
 8001afc:	4827      	ldr	r0, [pc, #156]	@ (8001b9c <Kinematics_Init+0x164>)
 8001afe:	f7ff fd3d 	bl	800157c <PID_SetOutputLimits>

	  PID_SetSampleTime(&pidLeft, 10);
 8001b02:	210a      	movs	r1, #10
 8001b04:	4821      	ldr	r0, [pc, #132]	@ (8001b8c <Kinematics_Init+0x154>)
 8001b06:	f7ff fe8f 	bl	8001828 <PID_SetSampleTime>
	  PID_SetSampleTime(&pidRight, 10);
 8001b0a:	210a      	movs	r1, #10
 8001b0c:	4823      	ldr	r0, [pc, #140]	@ (8001b9c <Kinematics_Init+0x164>)
 8001b0e:	f7ff fe8b 	bl	8001828 <PID_SetSampleTime>

	  PID_SetMode(&pidLeft, _PID_MODE_AUTOMATIC);
 8001b12:	2101      	movs	r1, #1
 8001b14:	481d      	ldr	r0, [pc, #116]	@ (8001b8c <Kinematics_Init+0x154>)
 8001b16:	f7ff fd13 	bl	8001540 <PID_SetMode>
	  PID_SetMode(&pidRight, _PID_MODE_AUTOMATIC);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	481f      	ldr	r0, [pc, #124]	@ (8001b9c <Kinematics_Init+0x164>)
 8001b1e:	f7ff fd0f 	bl	8001540 <PID_SetMode>
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	bce4217d 	.word	0xbce4217d
 8001b2c:	3f538fff 	.word	0x3f538fff
 8001b30:	00000000 	.word	0x00000000
 8001b34:	405f0000 	.word	0x405f0000
 8001b38:	7e28240b 	.word	0x7e28240b
 8001b3c:	3fe1b98c 	.word	0x3fe1b98c
 8001b40:	c28f5c29 	.word	0xc28f5c29
 8001b44:	405538f5 	.word	0x405538f5
 8001b48:	db22d0e5 	.word	0xdb22d0e5
 8001b4c:	3fd67ef9 	.word	0x3fd67ef9
 8001b50:	00000000 	.word	0x00000000
 8001b54:	409a8c00 	.word	0x409a8c00
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	c09a8c00 	.word	0xc09a8c00
 8001b60:	20000570 	.word	0x20000570
 8001b64:	200005bc 	.word	0x200005bc
 8001b68:	200004d8 	.word	0x200004d8
 8001b6c:	20000524 	.word	0x20000524
 8001b70:	20000234 	.word	0x20000234
 8001b74:	20000244 	.word	0x20000244
 8001b78:	2000069c 	.word	0x2000069c
 8001b7c:	200006b4 	.word	0x200006b4
 8001b80:	20000258 	.word	0x20000258
 8001b84:	20000268 	.word	0x20000268
 8001b88:	20000278 	.word	0x20000278
 8001b8c:	20000288 	.word	0x20000288
 8001b90:	20000260 	.word	0x20000260
 8001b94:	20000270 	.word	0x20000270
 8001b98:	20000280 	.word	0x20000280
 8001b9c:	200002f8 	.word	0x200002f8

08001ba0 <LinearToRPM>:

/**
 * @brief Converte velocidade linear para RPM.
 */
float LinearToRPM(float v) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0a01 	vstr	s0, [r7, #4]
    return (v * 60.0) / (2 * M_PI * WHEEL_RADIUS);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fcf4 	bl	8000598 <__aeabi_f2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <LinearToRPM+0x50>)
 8001bb6:	f7fe fd47 	bl	8000648 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	a309      	add	r3, pc, #36	@ (adr r3, 8001be8 <LinearToRPM+0x48>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fe68 	bl	800089c <__aeabi_ddiv>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7ff f830 	bl	8000c38 <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	ee07 3a90 	vmov	s15, r3
}
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	5b22baa6 	.word	0x5b22baa6
 8001bec:	3fd8209f 	.word	0x3fd8209f
 8001bf0:	404e0000 	.word	0x404e0000
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <Kinematics_SetSpeeds>:

/**
 * @brief Define as velocidades do robô com base em velocidades lineares (m/s).
 *        Chama `Set_Motor_Speeds()` do `motor_control.c` para aplicar nos motores.
 */
void Kinematics_SetSpeeds(float vL, float vR) {
 8001bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	b08f      	sub	sp, #60	@ 0x3c
 8001bfe:	af06      	add	r7, sp, #24
 8001c00:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c04:	edc7 0a00 	vstr	s1, [r7]
	Encoder_Update();
 8001c08:	f7ff ff06 	bl	8001a18 <Encoder_Update>


	uint8_t who_am_i = IMU_ReadReg(IMU_WHO_AM_I);
 8001c0c:	2075      	movs	r0, #117	@ 0x75
 8001c0e:	f7ff fa4f 	bl	80010b0 <IMU_ReadReg>
 8001c12:	4603      	mov	r3, r0
 8001c14:	77fb      	strb	r3, [r7, #31]
	IMU_ReadAccelData(accelData);
 8001c16:	4858      	ldr	r0, [pc, #352]	@ (8001d78 <Kinematics_SetSpeeds+0x180>)
 8001c18:	f7ff fa7a 	bl	8001110 <IMU_ReadAccelData>
	IMU_ReadGyroData(gyroData);
 8001c1c:	4857      	ldr	r0, [pc, #348]	@ (8001d7c <Kinematics_SetSpeeds+0x184>)
 8001c1e:	f7ff faba 	bl	8001196 <IMU_ReadGyroData>

	if (who_am_i == 0x70) {
 8001c22:	7ffb      	ldrb	r3, [r7, #31]
 8001c24:	2b70      	cmp	r3, #112	@ 0x70
 8001c26:	d122      	bne.n	8001c6e <Kinematics_SetSpeeds+0x76>
		snprintf(debug_imu, sizeof(debug_imu),
				"Ax | RAW: %d, Ay | RAW: %d, Az | RAW: %d\r\n"
				"Gx | RAW: %d, Gy | RAW: %d, Gz | RAW: %d\r\n",
				accelData[0], accelData[1], accelData[2],
 8001c28:	4b53      	ldr	r3, [pc, #332]	@ (8001d78 <Kinematics_SetSpeeds+0x180>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(debug_imu, sizeof(debug_imu),
 8001c2e:	469c      	mov	ip, r3
				accelData[0], accelData[1], accelData[2],
 8001c30:	4b51      	ldr	r3, [pc, #324]	@ (8001d78 <Kinematics_SetSpeeds+0x180>)
 8001c32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(debug_imu, sizeof(debug_imu),
 8001c36:	461a      	mov	r2, r3
				accelData[0], accelData[1], accelData[2],
 8001c38:	4b4f      	ldr	r3, [pc, #316]	@ (8001d78 <Kinematics_SetSpeeds+0x180>)
 8001c3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(debug_imu, sizeof(debug_imu),
 8001c3e:	4619      	mov	r1, r3
				gyroData[0], gyroData[1], gyroData[2]);
 8001c40:	4b4e      	ldr	r3, [pc, #312]	@ (8001d7c <Kinematics_SetSpeeds+0x184>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(debug_imu, sizeof(debug_imu),
 8001c46:	4618      	mov	r0, r3
				gyroData[0], gyroData[1], gyroData[2]);
 8001c48:	4b4c      	ldr	r3, [pc, #304]	@ (8001d7c <Kinematics_SetSpeeds+0x184>)
 8001c4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(debug_imu, sizeof(debug_imu),
 8001c4e:	461e      	mov	r6, r3
				gyroData[0], gyroData[1], gyroData[2]);
 8001c50:	4b4a      	ldr	r3, [pc, #296]	@ (8001d7c <Kinematics_SetSpeeds+0x184>)
 8001c52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(debug_imu, sizeof(debug_imu),
 8001c56:	9304      	str	r3, [sp, #16]
 8001c58:	9603      	str	r6, [sp, #12]
 8001c5a:	9002      	str	r0, [sp, #8]
 8001c5c:	9101      	str	r1, [sp, #4]
 8001c5e:	9200      	str	r2, [sp, #0]
 8001c60:	4663      	mov	r3, ip
 8001c62:	4a47      	ldr	r2, [pc, #284]	@ (8001d80 <Kinematics_SetSpeeds+0x188>)
 8001c64:	2196      	movs	r1, #150	@ 0x96
 8001c66:	4847      	ldr	r0, [pc, #284]	@ (8001d84 <Kinematics_SetSpeeds+0x18c>)
 8001c68:	f006 fd5c 	bl	8008724 <sniprintf>
 8001c6c:	e005      	b.n	8001c7a <Kinematics_SetSpeeds+0x82>
	}
	else {
		snprintf(debug_imu, sizeof(debug_imu), "Erro no IMU: Endereço não encontrado = 0x%X\r\n", who_am_i);
 8001c6e:	7ffb      	ldrb	r3, [r7, #31]
 8001c70:	4a45      	ldr	r2, [pc, #276]	@ (8001d88 <Kinematics_SetSpeeds+0x190>)
 8001c72:	2196      	movs	r1, #150	@ 0x96
 8001c74:	4843      	ldr	r0, [pc, #268]	@ (8001d84 <Kinematics_SetSpeeds+0x18c>)
 8001c76:	f006 fd55 	bl	8008724 <sniprintf>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)debug_imu, strlen(debug_imu), HAL_MAX_DELAY);
 8001c7a:	4842      	ldr	r0, [pc, #264]	@ (8001d84 <Kinematics_SetSpeeds+0x18c>)
 8001c7c:	f7fe fb20 	bl	80002c0 <strlen>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c88:	493e      	ldr	r1, [pc, #248]	@ (8001d84 <Kinematics_SetSpeeds+0x18c>)
 8001c8a:	4840      	ldr	r0, [pc, #256]	@ (8001d8c <Kinematics_SetSpeeds+0x194>)
 8001c8c:	f004 ffa0 	bl	8006bd0 <HAL_UART_Transmit>

	float target_rpm_left = LinearToRPM(vL);
 8001c90:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c94:	f7ff ff84 	bl	8001ba0 <LinearToRPM>
 8001c98:	ed87 0a06 	vstr	s0, [r7, #24]
    float target_rpm_right = LinearToRPM(vR);
 8001c9c:	ed97 0a00 	vldr	s0, [r7]
 8001ca0:	f7ff ff7e 	bl	8001ba0 <LinearToRPM>
 8001ca4:	ed87 0a05 	vstr	s0, [r7, #20]

    setpoint_left_rpm  = target_rpm_left;
 8001ca8:	69b8      	ldr	r0, [r7, #24]
 8001caa:	f7fe fc75 	bl	8000598 <__aeabi_f2d>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4937      	ldr	r1, [pc, #220]	@ (8001d90 <Kinematics_SetSpeeds+0x198>)
 8001cb4:	e9c1 2300 	strd	r2, r3, [r1]
    setpoint_right_rpm = target_rpm_right;
 8001cb8:	6978      	ldr	r0, [r7, #20]
 8001cba:	f7fe fc6d 	bl	8000598 <__aeabi_f2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4934      	ldr	r1, [pc, #208]	@ (8001d94 <Kinematics_SetSpeeds+0x19c>)
 8001cc4:	e9c1 2300 	strd	r2, r3, [r1]

    inputLeft  = left_encoder.rpm;
 8001cc8:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <Kinematics_SetSpeeds+0x1a0>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc63 	bl	8000598 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4931      	ldr	r1, [pc, #196]	@ (8001d9c <Kinematics_SetSpeeds+0x1a4>)
 8001cd8:	e9c1 2300 	strd	r2, r3, [r1]
    inputRight = right_encoder.rpm;
 8001cdc:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <Kinematics_SetSpeeds+0x1a8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc59 	bl	8000598 <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	492e      	ldr	r1, [pc, #184]	@ (8001da4 <Kinematics_SetSpeeds+0x1ac>)
 8001cec:	e9c1 2300 	strd	r2, r3, [r1]


    PID_Compute(&pidLeft);
 8001cf0:	482d      	ldr	r0, [pc, #180]	@ (8001da8 <Kinematics_SetSpeeds+0x1b0>)
 8001cf2:	f7ff fb3b 	bl	800136c <PID_Compute>
    PID_Compute(&pidRight);
 8001cf6:	482d      	ldr	r0, [pc, #180]	@ (8001dac <Kinematics_SetSpeeds+0x1b4>)
 8001cf8:	f7ff fb38 	bl	800136c <PID_Compute>

    if (outputLeft > PWM_MAX) {
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001db0 <Kinematics_SetSpeeds+0x1b8>)
 8001cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d02:	a319      	add	r3, pc, #100	@ (adr r3, 8001d68 <Kinematics_SetSpeeds+0x170>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe ff2e 	bl	8000b68 <__aeabi_dcmpgt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <Kinematics_SetSpeeds+0x128>
        outputLeft = PWM_MAX;
 8001d12:	4927      	ldr	r1, [pc, #156]	@ (8001db0 <Kinematics_SetSpeeds+0x1b8>)
 8001d14:	a314      	add	r3, pc, #80	@ (adr r3, 8001d68 <Kinematics_SetSpeeds+0x170>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	e9c1 2300 	strd	r2, r3, [r1]
 8001d1e:	e010      	b.n	8001d42 <Kinematics_SetSpeeds+0x14a>
    } else if (outputLeft < -PWM_MAX) {
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <Kinematics_SetSpeeds+0x1b8>)
 8001d22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d26:	a312      	add	r3, pc, #72	@ (adr r3, 8001d70 <Kinematics_SetSpeeds+0x178>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fefe 	bl	8000b2c <__aeabi_dcmplt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <Kinematics_SetSpeeds+0x14a>
        outputLeft = -PWM_MAX;
 8001d36:	491e      	ldr	r1, [pc, #120]	@ (8001db0 <Kinematics_SetSpeeds+0x1b8>)
 8001d38:	a30d      	add	r3, pc, #52	@ (adr r3, 8001d70 <Kinematics_SetSpeeds+0x178>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	e9c1 2300 	strd	r2, r3, [r1]
    }

    if (outputRight > PWM_MAX) {
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <Kinematics_SetSpeeds+0x1bc>)
 8001d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d48:	a307      	add	r3, pc, #28	@ (adr r3, 8001d68 <Kinematics_SetSpeeds+0x170>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe ff0b 	bl	8000b68 <__aeabi_dcmpgt>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d02f      	beq.n	8001db8 <Kinematics_SetSpeeds+0x1c0>
        outputRight = PWM_MAX;
 8001d58:	4916      	ldr	r1, [pc, #88]	@ (8001db4 <Kinematics_SetSpeeds+0x1bc>)
 8001d5a:	a303      	add	r3, pc, #12	@ (adr r3, 8001d68 <Kinematics_SetSpeeds+0x170>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	e9c1 2300 	strd	r2, r3, [r1]
 8001d64:	e039      	b.n	8001dda <Kinematics_SetSpeeds+0x1e2>
 8001d66:	bf00      	nop
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	409a8c00 	.word	0x409a8c00
 8001d70:	00000000 	.word	0x00000000
 8001d74:	c09a8c00 	.word	0xc09a8c00
 8001d78:	20000368 	.word	0x20000368
 8001d7c:	20000370 	.word	0x20000370
 8001d80:	0800c110 	.word	0x0800c110
 8001d84:	20000378 	.word	0x20000378
 8001d88:	0800c168 	.word	0x0800c168
 8001d8c:	20000608 	.word	0x20000608
 8001d90:	20000258 	.word	0x20000258
 8001d94:	20000260 	.word	0x20000260
 8001d98:	20000234 	.word	0x20000234
 8001d9c:	20000278 	.word	0x20000278
 8001da0:	20000244 	.word	0x20000244
 8001da4:	20000280 	.word	0x20000280
 8001da8:	20000288 	.word	0x20000288
 8001dac:	200002f8 	.word	0x200002f8
 8001db0:	20000268 	.word	0x20000268
 8001db4:	20000270 	.word	0x20000270
    } else if (outputRight < -PWM_MAX) {
 8001db8:	4b77      	ldr	r3, [pc, #476]	@ (8001f98 <Kinematics_SetSpeeds+0x3a0>)
 8001dba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dbe:	a370      	add	r3, pc, #448	@ (adr r3, 8001f80 <Kinematics_SetSpeeds+0x388>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe feb2 	bl	8000b2c <__aeabi_dcmplt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <Kinematics_SetSpeeds+0x1e2>
        outputRight = -PWM_MAX;
 8001dce:	4972      	ldr	r1, [pc, #456]	@ (8001f98 <Kinematics_SetSpeeds+0x3a0>)
 8001dd0:	a36b      	add	r3, pc, #428	@ (adr r3, 8001f80 <Kinematics_SetSpeeds+0x388>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	e9c1 2300 	strd	r2, r3, [r1]
    }


    if (fabs(outputLeft) < OUTPUT_TOLERANCE) outputLeft = 0;
 8001dda:	4b70      	ldr	r3, [pc, #448]	@ (8001f9c <Kinematics_SetSpeeds+0x3a4>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	4690      	mov	r8, r2
 8001de2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa0 <Kinematics_SetSpeeds+0x3a8>)
 8001dec:	4640      	mov	r0, r8
 8001dee:	4649      	mov	r1, r9
 8001df0:	f7fe fe9c 	bl	8000b2c <__aeabi_dcmplt>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <Kinematics_SetSpeeds+0x210>
 8001dfa:	4968      	ldr	r1, [pc, #416]	@ (8001f9c <Kinematics_SetSpeeds+0x3a4>)
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9c1 2300 	strd	r2, r3, [r1]
    if (fabs(outputRight) < OUTPUT_TOLERANCE) outputRight = 0;
 8001e08:	4b63      	ldr	r3, [pc, #396]	@ (8001f98 <Kinematics_SetSpeeds+0x3a0>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	4614      	mov	r4, r2
 8001e10:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b61      	ldr	r3, [pc, #388]	@ (8001fa0 <Kinematics_SetSpeeds+0x3a8>)
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	f7fe fe85 	bl	8000b2c <__aeabi_dcmplt>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <Kinematics_SetSpeeds+0x23e>
 8001e28:	495b      	ldr	r1, [pc, #364]	@ (8001f98 <Kinematics_SetSpeeds+0x3a0>)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9c1 2300 	strd	r2, r3, [r1]


    float pwm_left  = fabs(outputLeft);
 8001e36:	4b59      	ldr	r3, [pc, #356]	@ (8001f9c <Kinematics_SetSpeeds+0x3a4>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe fefa 	bl	8000c38 <__aeabi_d2f>
 8001e44:	ee07 0a90 	vmov	s15, r0
 8001e48:	eef0 7ae7 	vabs.f32	s15, s15
 8001e4c:	edc7 7a04 	vstr	s15, [r7, #16]
    float pwm_right = fabs(outputRight);
 8001e50:	4b51      	ldr	r3, [pc, #324]	@ (8001f98 <Kinematics_SetSpeeds+0x3a0>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe feed 	bl	8000c38 <__aeabi_d2f>
 8001e5e:	ee07 0a90 	vmov	s15, r0
 8001e62:	eef0 7ae7 	vabs.f32	s15, s15
 8001e66:	edc7 7a03 	vstr	s15, [r7, #12]

    pwm_left  = fmax(pwm_left, PWM_MIN);
 8001e6a:	6938      	ldr	r0, [r7, #16]
 8001e6c:	f7fe fb94 	bl	8000598 <__aeabi_f2d>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	ed9f 1b44 	vldr	d1, [pc, #272]	@ 8001f88 <Kinematics_SetSpeeds+0x390>
 8001e78:	ec43 2b10 	vmov	d0, r2, r3
 8001e7c:	f00a f8be 	bl	800bffc <fmax>
 8001e80:	ec53 2b10 	vmov	r2, r3, d0
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fed6 	bl	8000c38 <__aeabi_d2f>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	613b      	str	r3, [r7, #16]
    pwm_left  = fmin(pwm_left, PWM_MAX);
 8001e90:	6938      	ldr	r0, [r7, #16]
 8001e92:	f7fe fb81 	bl	8000598 <__aeabi_f2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	ed9f 1b3d 	vldr	d1, [pc, #244]	@ 8001f90 <Kinematics_SetSpeeds+0x398>
 8001e9e:	ec43 2b10 	vmov	d0, r2, r3
 8001ea2:	f00a f8d5 	bl	800c050 <fmin>
 8001ea6:	ec53 2b10 	vmov	r2, r3, d0
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fec3 	bl	8000c38 <__aeabi_d2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	613b      	str	r3, [r7, #16]
    pwm_right = fmax(pwm_right, PWM_MIN);
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7fe fb6e 	bl	8000598 <__aeabi_f2d>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 8001f88 <Kinematics_SetSpeeds+0x390>
 8001ec4:	ec43 2b10 	vmov	d0, r2, r3
 8001ec8:	f00a f898 	bl	800bffc <fmax>
 8001ecc:	ec53 2b10 	vmov	r2, r3, d0
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe feb0 	bl	8000c38 <__aeabi_d2f>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	60fb      	str	r3, [r7, #12]
    pwm_right = fmin(pwm_right, PWM_MAX);
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7fe fb5b 	bl	8000598 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8001f90 <Kinematics_SetSpeeds+0x398>
 8001eea:	ec43 2b10 	vmov	d0, r2, r3
 8001eee:	f00a f8af 	bl	800c050 <fmin>
 8001ef2:	ec53 2b10 	vmov	r2, r3, d0
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe9d 	bl	8000c38 <__aeabi_d2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	60fb      	str	r3, [r7, #12]


    uint8_t dir_left  = (outputLeft >= 0) ? 0 : 1;
 8001f02:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <Kinematics_SetSpeeds+0x3a4>)
 8001f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	461c      	mov	r4, r3
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	f7fe fe1e 	bl	8000b54 <__aeabi_dcmpge>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <Kinematics_SetSpeeds+0x32a>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	461c      	mov	r4, r3
 8001f22:	b2e3      	uxtb	r3, r4
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	72fb      	strb	r3, [r7, #11]
    uint8_t dir_right = (outputRight >= 0) ? 0 : 1;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <Kinematics_SetSpeeds+0x3a0>)
 8001f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f32:	2301      	movs	r3, #1
 8001f34:	461c      	mov	r4, r3
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	f7fe fe09 	bl	8000b54 <__aeabi_dcmpge>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <Kinematics_SetSpeeds+0x354>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	b2e3      	uxtb	r3, r4
 8001f4e:	f083 0301 	eor.w	r3, r3, #1
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	72bb      	strb	r3, [r7, #10]


    Motor_Control(pwm_left, dir_left, pwm_right, dir_right);
 8001f56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f5a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8001f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f66:	7abb      	ldrb	r3, [r7, #10]
 8001f68:	7af9      	ldrb	r1, [r7, #11]
 8001f6a:	ee17 2a90 	vmov	r2, s15
 8001f6e:	ee17 0a10 	vmov	r0, s14
 8001f72:	f000 fbc7 	bl	8002704 <Motor_Control>

}
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f80:	00000000 	.word	0x00000000
 8001f84:	c09a8c00 	.word	0xc09a8c00
	...
 8001f94:	409a8c00 	.word	0x409a8c00
 8001f98:	20000270 	.word	0x20000270
 8001f9c:	20000268 	.word	0x20000268
 8001fa0:	40080000 	.word	0x40080000

08001fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa8:	f001 f94f 	bl	800324a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fac:	f000 f815 	bl	8001fda <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb0:	f000 faf8 	bl	80025a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001fb4:	f000 f8d6 	bl	8002164 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001fb8:	f000 f984 	bl	80022c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fbc:	f000 f9f8 	bl	80023b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fc0:	f000 fa4c 	bl	800245c <MX_TIM4_Init>
  MX_SPI1_Init();
 8001fc4:	f000 f852 	bl	800206c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001fc8:	f000 fa9e 	bl	8002508 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001fcc:	f000 f88c 	bl	80020e8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  VSSS_Init();
 8001fd0:	f7ff fc66 	bl	80018a0 <VSSS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  VSSS_Run();
 8001fd4:	f7ff fc82 	bl	80018dc <VSSS_Run>
 8001fd8:	e7fc      	b.n	8001fd4 <main+0x30>

08001fda <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b094      	sub	sp, #80	@ 0x50
 8001fde:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe0:	f107 0318 	add.w	r3, r7, #24
 8001fe4:	2238      	movs	r2, #56	@ 0x38
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f006 fc32 	bl	8008852 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f001 fc35 	bl	800386c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002006:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800200a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200c:	2302      	movs	r3, #2
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002010:	2303      	movs	r3, #3
 8002012:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002014:	2302      	movs	r3, #2
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002018:	2355      	movs	r3, #85	@ 0x55
 800201a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800201c:	2302      	movs	r3, #2
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002020:	2302      	movs	r3, #2
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002024:	2302      	movs	r3, #2
 8002026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4618      	mov	r0, r3
 800202e:	f001 fcd1 	bl	80039d4 <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002038:	f000 fb38 	bl	80026ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	230f      	movs	r3, #15
 800203e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002040:	2303      	movs	r3, #3
 8002042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2104      	movs	r1, #4
 8002054:	4618      	mov	r0, r3
 8002056:	f001 ffcf 	bl	8003ff8 <HAL_RCC_ClockConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002060:	f000 fb24 	bl	80026ac <Error_Handler>
  }
}
 8002064:	bf00      	nop
 8002066:	3750      	adds	r7, #80	@ 0x50
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <MX_SPI1_Init+0x74>)
 8002072:	4a1c      	ldr	r2, [pc, #112]	@ (80020e4 <MX_SPI1_Init+0x78>)
 8002074:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002076:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <MX_SPI1_Init+0x74>)
 8002078:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800207c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <MX_SPI1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002084:	4b16      	ldr	r3, [pc, #88]	@ (80020e0 <MX_SPI1_Init+0x74>)
 8002086:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800208a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <MX_SPI1_Init+0x74>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <MX_SPI1_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <MX_SPI1_Init+0x74>)
 800209a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800209e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80020a0:	4b0f      	ldr	r3, [pc, #60]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020a2:	2220      	movs	r2, #32
 80020a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020ba:	2207      	movs	r2, #7
 80020bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020be:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020c6:	2208      	movs	r2, #8
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ca:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <MX_SPI1_Init+0x74>)
 80020cc:	f002 fba0 	bl	8004810 <HAL_SPI_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020d6:	f000 fae9 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000410 	.word	0x20000410
 80020e4:	40013000 	.word	0x40013000

080020e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <MX_SPI2_Init+0x74>)
 80020ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <MX_SPI2_Init+0x78>)
 80020f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_SPI2_Init+0x74>)
 80020f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_SPI2_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002100:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_SPI2_Init+0x74>)
 8002102:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002106:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <MX_SPI2_Init+0x74>)
 800210a:	2202      	movs	r2, #2
 800210c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <MX_SPI2_Init+0x74>)
 8002110:	2201      	movs	r2, #1
 8002112:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <MX_SPI2_Init+0x74>)
 8002116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <MX_SPI2_Init+0x74>)
 800211e:	2228      	movs	r2, #40	@ 0x28
 8002120:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002122:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <MX_SPI2_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <MX_SPI2_Init+0x74>)
 800212a:	2200      	movs	r2, #0
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <MX_SPI2_Init+0x74>)
 8002130:	2200      	movs	r2, #0
 8002132:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <MX_SPI2_Init+0x74>)
 8002136:	2207      	movs	r2, #7
 8002138:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800213a:	4b08      	ldr	r3, [pc, #32]	@ (800215c <MX_SPI2_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <MX_SPI2_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	@ (800215c <MX_SPI2_Init+0x74>)
 8002148:	f002 fb62 	bl	8004810 <HAL_SPI_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002152:	f000 faab 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000474 	.word	0x20000474
 8002160:	40003800 	.word	0x40003800

08002164 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09c      	sub	sp, #112	@ 0x70
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002184:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	615a      	str	r2, [r3, #20]
 8002196:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2234      	movs	r2, #52	@ 0x34
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f006 fb57 	bl	8008852 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021a4:	4b45      	ldr	r3, [pc, #276]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021a6:	4a46      	ldr	r2, [pc, #280]	@ (80022c0 <MX_TIM1_Init+0x15c>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021aa:	4b44      	ldr	r3, [pc, #272]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b42      	ldr	r3, [pc, #264]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1699;
 80021b6:	4b41      	ldr	r3, [pc, #260]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021b8:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80021bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b3f      	ldr	r3, [pc, #252]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021c4:	4b3d      	ldr	r3, [pc, #244]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b3c      	ldr	r3, [pc, #240]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021d0:	483a      	ldr	r0, [pc, #232]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021d2:	f003 fa51 	bl	8005678 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80021dc:	f000 fa66 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021ea:	4619      	mov	r1, r3
 80021ec:	4833      	ldr	r0, [pc, #204]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021ee:	f003 fe43 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80021f8:	f000 fa58 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021fc:	482f      	ldr	r0, [pc, #188]	@ (80022bc <MX_TIM1_Init+0x158>)
 80021fe:	f003 fa92 	bl	8005726 <HAL_TIM_PWM_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002208:	f000 fa50 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002218:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800221c:	4619      	mov	r1, r3
 800221e:	4827      	ldr	r0, [pc, #156]	@ (80022bc <MX_TIM1_Init+0x158>)
 8002220:	f004 fb78 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800222a:	f000 fa3f 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222e:	2360      	movs	r3, #96	@ 0x60
 8002230:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002236:	2300      	movs	r3, #0
 8002238:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800223a:	2300      	movs	r3, #0
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800224e:	2200      	movs	r2, #0
 8002250:	4619      	mov	r1, r3
 8002252:	481a      	ldr	r0, [pc, #104]	@ (80022bc <MX_TIM1_Init+0x158>)
 8002254:	f003 fcfc 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800225e:	f000 fa25 	bl	80026ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800227a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800228c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002292:	2300      	movs	r3, #0
 8002294:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4619      	mov	r1, r3
 800229e:	4807      	ldr	r0, [pc, #28]	@ (80022bc <MX_TIM1_Init+0x158>)
 80022a0:	f004 fbba 	bl	8006a18 <HAL_TIMEx_ConfigBreakDeadTime>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80022aa:	f000 f9ff 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022ae:	4803      	ldr	r0, [pc, #12]	@ (80022bc <MX_TIM1_Init+0x158>)
 80022b0:	f000 fdca 	bl	8002e48 <HAL_TIM_MspPostInit>

}
 80022b4:	bf00      	nop
 80022b6:	3770      	adds	r7, #112	@ 0x70
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200004d8 	.word	0x200004d8
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08e      	sub	sp, #56	@ 0x38
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e4:	463b      	mov	r3, r7
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022f6:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <MX_TIM2_Init+0xe8>)
 80022f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022fe:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <MX_TIM2_Init+0xe8>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b29      	ldr	r3, [pc, #164]	@ (80023ac <MX_TIM2_Init+0xe8>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1699;
 800230a:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <MX_TIM2_Init+0xe8>)
 800230c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8002310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002312:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <MX_TIM2_Init+0xe8>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <MX_TIM2_Init+0xe8>)
 800231a:	2200      	movs	r2, #0
 800231c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800231e:	4823      	ldr	r0, [pc, #140]	@ (80023ac <MX_TIM2_Init+0xe8>)
 8002320:	f003 f9aa 	bl	8005678 <HAL_TIM_Base_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800232a:	f000 f9bf 	bl	80026ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002332:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002334:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002338:	4619      	mov	r1, r3
 800233a:	481c      	ldr	r0, [pc, #112]	@ (80023ac <MX_TIM2_Init+0xe8>)
 800233c:	f003 fd9c 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002346:	f000 f9b1 	bl	80026ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800234a:	4818      	ldr	r0, [pc, #96]	@ (80023ac <MX_TIM2_Init+0xe8>)
 800234c:	f003 f9eb 	bl	8005726 <HAL_TIM_PWM_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002356:	f000 f9a9 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4810      	ldr	r0, [pc, #64]	@ (80023ac <MX_TIM2_Init+0xe8>)
 800236a:	f004 fad3 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002374:	f000 f99a 	bl	80026ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002378:	2360      	movs	r3, #96	@ 0x60
 800237a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	4807      	ldr	r0, [pc, #28]	@ (80023ac <MX_TIM2_Init+0xe8>)
 8002390:	f003 fc5e 	bl	8005c50 <HAL_TIM_PWM_ConfigChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800239a:	f000 f987 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800239e:	4803      	ldr	r0, [pc, #12]	@ (80023ac <MX_TIM2_Init+0xe8>)
 80023a0:	f000 fd52 	bl	8002e48 <HAL_TIM_MspPostInit>

}
 80023a4:	bf00      	nop
 80023a6:	3738      	adds	r7, #56	@ 0x38
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000524 	.word	0x20000524

080023b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	@ 0x30
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023b6:	f107 030c 	add.w	r3, r7, #12
 80023ba:	2224      	movs	r2, #36	@ 0x24
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f006 fa47 	bl	8008852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c4:	463b      	mov	r3, r7
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023ce:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <MX_TIM3_Init+0xa4>)
 80023d0:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <MX_TIM3_Init+0xa8>)
 80023d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <MX_TIM3_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <MX_TIM3_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <MX_TIM3_Init+0xa4>)
 80023e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <MX_TIM3_Init+0xa4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <MX_TIM3_Init+0xa4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023f4:	2303      	movs	r3, #3
 80023f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023fc:	2301      	movs	r3, #1
 80023fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800240c:	2301      	movs	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	4619      	mov	r1, r3
 800241e:	480d      	ldr	r0, [pc, #52]	@ (8002454 <MX_TIM3_Init+0xa4>)
 8002420:	f003 fae2 	bl	80059e8 <HAL_TIM_Encoder_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800242a:	f000 f93f 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002436:	463b      	mov	r3, r7
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	@ (8002454 <MX_TIM3_Init+0xa4>)
 800243c:	f004 fa6a 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002446:	f000 f931 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	3730      	adds	r7, #48	@ 0x30
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000570 	.word	0x20000570
 8002458:	40000400 	.word	0x40000400

0800245c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	@ 0x30
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	2224      	movs	r2, #36	@ 0x24
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f006 f9f1 	bl	8008852 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002470:	463b      	mov	r3, r7
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800247a:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <MX_TIM4_Init+0xa4>)
 800247c:	4a21      	ldr	r2, [pc, #132]	@ (8002504 <MX_TIM4_Init+0xa8>)
 800247e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <MX_TIM4_Init+0xa4>)
 8002482:	2200      	movs	r2, #0
 8002484:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <MX_TIM4_Init+0xa4>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800248c:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <MX_TIM4_Init+0xa4>)
 800248e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002492:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <MX_TIM4_Init+0xa4>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <MX_TIM4_Init+0xa4>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024a0:	2303      	movs	r3, #3
 80024a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024a8:	2301      	movs	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024b8:	2301      	movs	r3, #1
 80024ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	4619      	mov	r1, r3
 80024ca:	480d      	ldr	r0, [pc, #52]	@ (8002500 <MX_TIM4_Init+0xa4>)
 80024cc:	f003 fa8c 	bl	80059e8 <HAL_TIM_Encoder_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80024d6:	f000 f8e9 	bl	80026ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024e2:	463b      	mov	r3, r7
 80024e4:	4619      	mov	r1, r3
 80024e6:	4806      	ldr	r0, [pc, #24]	@ (8002500 <MX_TIM4_Init+0xa4>)
 80024e8:	f004 fa14 	bl	8006914 <HAL_TIMEx_MasterConfigSynchronization>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80024f2:	f000 f8db 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	3730      	adds	r7, #48	@ 0x30
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200005bc 	.word	0x200005bc
 8002504:	40000800 	.word	0x40000800

08002508 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800250c:	4b22      	ldr	r3, [pc, #136]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 800250e:	4a23      	ldr	r2, [pc, #140]	@ (800259c <MX_USART1_UART_Init+0x94>)
 8002510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002512:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002514:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <MX_USART1_UART_Init+0x98>)
 8002516:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 800252c:	220c      	movs	r2, #12
 800252e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002530:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002536:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002548:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800254e:	4812      	ldr	r0, [pc, #72]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002550:	f004 faee 	bl	8006b30 <HAL_UART_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800255a:	f000 f8a7 	bl	80026ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255e:	2100      	movs	r1, #0
 8002560:	480d      	ldr	r0, [pc, #52]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002562:	f005 f8e7 	bl	8007734 <HAL_UARTEx_SetTxFifoThreshold>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800256c:	f000 f89e 	bl	80026ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002570:	2100      	movs	r1, #0
 8002572:	4809      	ldr	r0, [pc, #36]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002574:	f005 f91c 	bl	80077b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800257e:	f000 f895 	bl	80026ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_USART1_UART_Init+0x90>)
 8002584:	f005 f89d 	bl	80076c2 <HAL_UARTEx_DisableFifoMode>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800258e:	f000 f88d 	bl	80026ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000608 	.word	0x20000608
 800259c:	40013800 	.word	0x40013800
 80025a0:	000f4240 	.word	0x000f4240

080025a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	@ 0x28
 80025a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ba:	4b39      	ldr	r3, [pc, #228]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	4a38      	ldr	r2, [pc, #224]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025c0:	f043 0320 	orr.w	r3, r3, #32
 80025c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c6:	4b36      	ldr	r3, [pc, #216]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	4b33      	ldr	r3, [pc, #204]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	4a32      	ldr	r2, [pc, #200]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025de:	4b30      	ldr	r3, [pc, #192]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	4b2d      	ldr	r3, [pc, #180]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	4a2c      	ldr	r2, [pc, #176]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f6:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	4b27      	ldr	r3, [pc, #156]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	4a26      	ldr	r2, [pc, #152]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <MX_GPIO_Init+0xfc>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	f240 6106 	movw	r1, #1542	@ 0x606
 8002620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002624:	f001 f90a 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin|CS_Pin, GPIO_PIN_RESET);
 8002628:	2200      	movs	r2, #0
 800262a:	f241 0103 	movw	r1, #4099	@ 0x1003
 800262e:	481d      	ldr	r0, [pc, #116]	@ (80026a4 <MX_GPIO_Init+0x100>)
 8002630:	f001 f904 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002634:	2200      	movs	r2, #0
 8002636:	2140      	movs	r1, #64	@ 0x40
 8002638:	481b      	ldr	r0, [pc, #108]	@ (80026a8 <MX_GPIO_Init+0x104>)
 800263a:	f001 f8ff 	bl	800383c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INA1_Pin INA2_Pin INB1_Pin INB2_Pin */
  GPIO_InitStruct.Pin = INA1_Pin|INA2_Pin|INB1_Pin|INB2_Pin;
 800263e:	f240 6306 	movw	r3, #1542	@ 0x606
 8002642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265a:	f000 ff6d 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin CS_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin|CS_Pin;
 800265e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002664:	2301      	movs	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	480b      	ldr	r0, [pc, #44]	@ (80026a4 <MX_GPIO_Init+0x100>)
 8002678:	f000 ff5e 	bl	8003538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800267c:	2340      	movs	r3, #64	@ 0x40
 800267e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	4805      	ldr	r0, [pc, #20]	@ (80026a8 <MX_GPIO_Init+0x104>)
 8002694:	f000 ff50 	bl	8003538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002698:	bf00      	nop
 800269a:	3728      	adds	r7, #40	@ 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000800 	.word	0x48000800

080026ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <Error_Handler+0x8>

080026b8 <Motor_Init>:
Motor_t motorLeft;
Motor_t motorRight;

void Motor_Init(Motor_t *motor, TIM_HandleTypeDef *pwm_timer, uint32_t pwm_channel,
                GPIO_TypeDef *gpio_port1, uint16_t gpio_pin1,
                GPIO_TypeDef *gpio_port2, uint16_t gpio_pin2) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
    motor->pwm_timer = pwm_timer;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	601a      	str	r2, [r3, #0]
    motor->pwm_channel = pwm_channel;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	605a      	str	r2, [r3, #4]
    motor->gpio_port1 = gpio_port1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	609a      	str	r2, [r3, #8]
    motor->gpio_pin1 = gpio_pin1;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8b3a      	ldrh	r2, [r7, #24]
 80026dc:	819a      	strh	r2, [r3, #12]
    motor->gpio_port2 = gpio_port2;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	611a      	str	r2, [r3, #16]
    motor->gpio_pin2 = gpio_pin2;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8c3a      	ldrh	r2, [r7, #32]
 80026e8:	829a      	strh	r2, [r3, #20]

    HAL_TIM_PWM_Start(motor->pwm_timer, motor->pwm_channel);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f003 f877 	bl	80057e8 <HAL_TIM_PWM_Start>
}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <Motor_Control>:

void Motor_Control(uint32_t pwm_left, uint8_t dir_left, uint32_t pwm_right, uint8_t dir_right) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	461a      	mov	r2, r3
 8002710:	460b      	mov	r3, r1
 8002712:	72fb      	strb	r3, [r7, #11]
 8002714:	4613      	mov	r3, r2
 8002716:	72bb      	strb	r3, [r7, #10]
       pinos de direção: PA9 (dir_right), PA10 (!dir_right) (exemplo)
     Ajuste conforme seu hardware.
    */

    // Motor Esquerdo
    HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, (GPIO_PinState)(dir_left));
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	461a      	mov	r2, r3
 800271c:	2102      	movs	r1, #2
 800271e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002722:	f001 f88b 	bl	800383c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, (GPIO_PinState)(!dir_left));
 8002726:	7afb      	ldrb	r3, [r7, #11]
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	2104      	movs	r1, #4
 8002736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273a:	f001 f87f 	bl	800383c <HAL_GPIO_WritePin>

    // Motor Direito
    HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin,  (GPIO_PinState)(dir_right));
 800273e:	7abb      	ldrb	r3, [r7, #10]
 8002740:	461a      	mov	r2, r3
 8002742:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800274a:	f001 f877 	bl	800383c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, (GPIO_PinState)(!dir_right));
 800274e:	7abb      	ldrb	r3, [r7, #10]
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002764:	f001 f86a 	bl	800383c <HAL_GPIO_WritePin>

    // PWM
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left);
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <Motor_Control+0x7c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_right);
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <Motor_Control+0x80>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20000524 	.word	0x20000524
 8002784:	200004d8 	.word	0x200004d8

08002788 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_0


void CS_Select (void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	2101      	movs	r1, #1
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <CS_Select+0x14>)
 8002792:	f001 f853 	bl	800383c <HAL_GPIO_WritePin>
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	48000400 	.word	0x48000400

080027a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	2101      	movs	r1, #1
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <CS_UnSelect+0x14>)
 80027aa:	f001 f847 	bl	800383c <HAL_GPIO_WritePin>
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	48000400 	.word	0x48000400

080027b8 <CE_Enable>:


void CE_Enable (void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80027bc:	2201      	movs	r2, #1
 80027be:	2102      	movs	r1, #2
 80027c0:	4802      	ldr	r0, [pc, #8]	@ (80027cc <CE_Enable+0x14>)
 80027c2:	f001 f83b 	bl	800383c <HAL_GPIO_WritePin>
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	48000400 	.word	0x48000400

080027d0 <CE_Disable>:

void CE_Disable (void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2102      	movs	r1, #2
 80027d8:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <CE_Disable+0x14>)
 80027da:	f001 f82f 	bl	800383c <HAL_GPIO_WritePin>
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	48000400 	.word	0x48000400

080027e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	460a      	mov	r2, r1
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80027f8:	79fb      	ldrb	r3, [r7, #7]
 80027fa:	f043 0320 	orr.w	r3, r3, #32
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8002802:	79bb      	ldrb	r3, [r7, #6]
 8002804:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002806:	f7ff ffbf 	bl	8002788 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800280a:	f107 010c 	add.w	r1, r7, #12
 800280e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002812:	2202      	movs	r2, #2
 8002814:	4804      	ldr	r0, [pc, #16]	@ (8002828 <nrf24_WriteReg+0x40>)
 8002816:	f002 f8a6 	bl	8004966 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800281a:	f7ff ffc1 	bl	80027a0 <CS_UnSelect>
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000410 	.word	0x20000410

0800282c <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	f043 0320 	orr.w	r3, r3, #32
 8002840:	b2db      	uxtb	r3, r3
 8002842:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002844:	f7ff ffa0 	bl	8002788 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8002848:	f107 0114 	add.w	r1, r7, #20
 800284c:	2364      	movs	r3, #100	@ 0x64
 800284e:	2201      	movs	r2, #1
 8002850:	4808      	ldr	r0, [pc, #32]	@ (8002874 <nrf24_WriteRegMulti+0x48>)
 8002852:	f002 f888 	bl	8004966 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	b29a      	uxth	r2, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	4804      	ldr	r0, [pc, #16]	@ (8002874 <nrf24_WriteRegMulti+0x48>)
 8002862:	f002 f880 	bl	8004966 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002866:	f7ff ff9b 	bl	80027a0 <CS_UnSelect>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000410 	.word	0x20000410

08002878 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002886:	f7ff ff7f 	bl	8002788 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800288a:	1df9      	adds	r1, r7, #7
 800288c:	2364      	movs	r3, #100	@ 0x64
 800288e:	2201      	movs	r2, #1
 8002890:	4808      	ldr	r0, [pc, #32]	@ (80028b4 <nrf24_ReadReg+0x3c>)
 8002892:	f002 f868 	bl	8004966 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8002896:	f107 010f 	add.w	r1, r7, #15
 800289a:	2364      	movs	r3, #100	@ 0x64
 800289c:	2201      	movs	r2, #1
 800289e:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <nrf24_ReadReg+0x3c>)
 80028a0:	f002 f9d7 	bl	8004c52 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80028a4:	f7ff ff7c 	bl	80027a0 <CS_UnSelect>

	return data;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000410 	.word	0x20000410

080028b8 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80028c2:	f7ff ff61 	bl	8002788 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80028c6:	1df9      	adds	r1, r7, #7
 80028c8:	2364      	movs	r3, #100	@ 0x64
 80028ca:	2201      	movs	r2, #1
 80028cc:	4804      	ldr	r0, [pc, #16]	@ (80028e0 <nrfsendCmd+0x28>)
 80028ce:	f002 f84a 	bl	8004966 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80028d2:	f7ff ff65 	bl	80027a0 <CS_UnSelect>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000410 	.word	0x20000410

080028e4 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d104      	bne.n	80028fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80028f4:	2100      	movs	r1, #0
 80028f6:	2007      	movs	r0, #7
 80028f8:	f7ff ff76 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80028fc:	e090      	b.n	8002a20 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b17      	cmp	r3, #23
 8002902:	d104      	bne.n	800290e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002904:	2111      	movs	r1, #17
 8002906:	2017      	movs	r0, #23
 8002908:	f7ff ff6e 	bl	80027e8 <nrf24_WriteReg>
}
 800290c:	e088      	b.n	8002a20 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800290e:	2108      	movs	r1, #8
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff ff69 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8002916:	213f      	movs	r1, #63	@ 0x3f
 8002918:	2001      	movs	r0, #1
 800291a:	f7ff ff65 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800291e:	2103      	movs	r1, #3
 8002920:	2002      	movs	r0, #2
 8002922:	f7ff ff61 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8002926:	2103      	movs	r1, #3
 8002928:	2003      	movs	r0, #3
 800292a:	f7ff ff5d 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800292e:	2103      	movs	r1, #3
 8002930:	2004      	movs	r0, #4
 8002932:	f7ff ff59 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8002936:	2102      	movs	r1, #2
 8002938:	2005      	movs	r0, #5
 800293a:	f7ff ff55 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800293e:	210e      	movs	r1, #14
 8002940:	2006      	movs	r0, #6
 8002942:	f7ff ff51 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8002946:	2100      	movs	r1, #0
 8002948:	2007      	movs	r0, #7
 800294a:	f7ff ff4d 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800294e:	2100      	movs	r1, #0
 8002950:	2008      	movs	r0, #8
 8002952:	f7ff ff49 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8002956:	2100      	movs	r1, #0
 8002958:	2009      	movs	r0, #9
 800295a:	f7ff ff45 	bl	80027e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800295e:	4a32      	ldr	r2, [pc, #200]	@ (8002a28 <nrf24_reset+0x144>)
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002968:	6018      	str	r0, [r3, #0]
 800296a:	3304      	adds	r3, #4
 800296c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800296e:	f107 0318 	add.w	r3, r7, #24
 8002972:	2205      	movs	r2, #5
 8002974:	4619      	mov	r1, r3
 8002976:	200a      	movs	r0, #10
 8002978:	f7ff ff58 	bl	800282c <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800297c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a2c <nrf24_reset+0x148>)
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002986:	6018      	str	r0, [r3, #0]
 8002988:	3304      	adds	r3, #4
 800298a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	2205      	movs	r2, #5
 8002992:	4619      	mov	r1, r3
 8002994:	200b      	movs	r0, #11
 8002996:	f7ff ff49 	bl	800282c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800299a:	21c3      	movs	r1, #195	@ 0xc3
 800299c:	200c      	movs	r0, #12
 800299e:	f7ff ff23 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80029a2:	21c4      	movs	r1, #196	@ 0xc4
 80029a4:	200d      	movs	r0, #13
 80029a6:	f7ff ff1f 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80029aa:	21c5      	movs	r1, #197	@ 0xc5
 80029ac:	200e      	movs	r0, #14
 80029ae:	f7ff ff1b 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80029b2:	21c6      	movs	r1, #198	@ 0xc6
 80029b4:	200f      	movs	r0, #15
 80029b6:	f7ff ff17 	bl	80027e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80029ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002a28 <nrf24_reset+0x144>)
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029c4:	6018      	str	r0, [r3, #0]
 80029c6:	3304      	adds	r3, #4
 80029c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	2205      	movs	r2, #5
 80029d0:	4619      	mov	r1, r3
 80029d2:	2010      	movs	r0, #16
 80029d4:	f7ff ff2a 	bl	800282c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80029d8:	2100      	movs	r1, #0
 80029da:	2011      	movs	r0, #17
 80029dc:	f7ff ff04 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80029e0:	2100      	movs	r1, #0
 80029e2:	2012      	movs	r0, #18
 80029e4:	f7ff ff00 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80029e8:	2100      	movs	r1, #0
 80029ea:	2013      	movs	r0, #19
 80029ec:	f7ff fefc 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80029f0:	2100      	movs	r1, #0
 80029f2:	2014      	movs	r0, #20
 80029f4:	f7ff fef8 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80029f8:	2100      	movs	r1, #0
 80029fa:	2015      	movs	r0, #21
 80029fc:	f7ff fef4 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8002a00:	2100      	movs	r1, #0
 8002a02:	2016      	movs	r0, #22
 8002a04:	f7ff fef0 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002a08:	2111      	movs	r1, #17
 8002a0a:	2017      	movs	r0, #23
 8002a0c:	f7ff feec 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8002a10:	2100      	movs	r1, #0
 8002a12:	201c      	movs	r0, #28
 8002a14:	f7ff fee8 	bl	80027e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	201d      	movs	r0, #29
 8002a1c:	f7ff fee4 	bl	80027e8 <nrf24_WriteReg>
}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	0800c198 	.word	0x0800c198
 8002a2c:	0800c1a0 	.word	0x0800c1a0

08002a30 <NRF24_Init>:




void NRF24_Init (void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8002a34:	f7ff fecc 	bl	80027d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff ff53 	bl	80028e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fed1 	bl	80027e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8002a46:	2100      	movs	r1, #0
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f7ff fecd 	bl	80027e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8002a4e:	2100      	movs	r1, #0
 8002a50:	2002      	movs	r0, #2
 8002a52:	f7ff fec9 	bl	80027e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8002a56:	2103      	movs	r1, #3
 8002a58:	2003      	movs	r0, #3
 8002a5a:	f7ff fec5 	bl	80027e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2004      	movs	r0, #4
 8002a62:	f7ff fec1 	bl	80027e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8002a66:	2100      	movs	r1, #0
 8002a68:	2005      	movs	r0, #5
 8002a6a:	f7ff febd 	bl	80027e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8002a6e:	210e      	movs	r1, #14
 8002a70:	2006      	movs	r0, #6
 8002a72:	f7ff feb9 	bl	80027e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002a76:	f7ff fe9f 	bl	80027b8 <CE_Enable>

}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8002a8a:	f7ff fea1 	bl	80027d0 <CE_Disable>

	nrf24_reset (STATUS);
 8002a8e:	2007      	movs	r0, #7
 8002a90:	f7ff ff28 	bl	80028e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	4619      	mov	r1, r3
 8002a98:	2005      	movs	r0, #5
 8002a9a:	f7ff fea5 	bl	80027e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f7ff feea 	bl	8002878 <nrf24_ReadReg>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	f043 0304 	orr.w	r3, r3, #4
 8002aae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	2002      	movs	r0, #2
 8002ab6:	f7ff fe97 	bl	80027e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8002aba:	2205      	movs	r2, #5
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	200b      	movs	r0, #11
 8002ac0:	f7ff feb4 	bl	800282c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8002ac4:	21ee      	movs	r1, #238	@ 0xee
 8002ac6:	200c      	movs	r0, #12
 8002ac8:	f7ff fe8e 	bl	80027e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8002acc:	2120      	movs	r1, #32
 8002ace:	2013      	movs	r0, #19
 8002ad0:	f7ff fe8a 	bl	80027e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7ff fecf 	bl	8002878 <nrf24_ReadReg>
 8002ada:	4603      	mov	r3, r0
 8002adc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8002ade:	7bbb      	ldrb	r3, [r7, #14]
 8002ae0:	f043 0303 	orr.w	r3, r3, #3
 8002ae4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff fe7c 	bl	80027e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002af0:	f7ff fe62 	bl	80027b8 <CE_Enable>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8002b04:	2007      	movs	r0, #7
 8002b06:	f7ff feb7 	bl	8002878 <nrf24_ReadReg>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <isDataAvailable+0x34>
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8002b24:	2140      	movs	r1, #64	@ 0x40
 8002b26:	2007      	movs	r0, #7
 8002b28:	f7ff fe5e 	bl	80027e8 <nrf24_WriteReg>

		return 1;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <isDataAvailable+0x36>
	}

	return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8002b48:	f7ff fe1e 	bl	8002788 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8002b4c:	2361      	movs	r3, #97	@ 0x61
 8002b4e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8002b50:	f107 010f 	add.w	r1, r7, #15
 8002b54:	2364      	movs	r3, #100	@ 0x64
 8002b56:	2201      	movs	r2, #1
 8002b58:	480c      	ldr	r0, [pc, #48]	@ (8002b8c <NRF24_Receive+0x50>)
 8002b5a:	f001 ff04 	bl	8004966 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8002b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b62:	2220      	movs	r2, #32
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4809      	ldr	r0, [pc, #36]	@ (8002b8c <NRF24_Receive+0x50>)
 8002b68:	f002 f873 	bl	8004c52 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8002b6c:	f7ff fe18 	bl	80027a0 <CS_UnSelect>

	HAL_Delay(1);
 8002b70:	2001      	movs	r0, #1
 8002b72:	f000 fbdb 	bl	800332c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8002b76:	23e2      	movs	r3, #226	@ 0xe2
 8002b78:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fe9b 	bl	80028b8 <nrfsendCmd>
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000410 	.word	0x20000410

08002b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	4a08      	ldr	r2, [pc, #32]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_MspInit+0x44>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002bc6:	f000 fef5 	bl	80039b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	@ 0x30
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3d      	ldr	r2, [pc, #244]	@ (8002cec <HAL_SPI_MspInit+0x114>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d145      	bne.n	8002c86 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c06:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	4b37      	ldr	r3, [pc, #220]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c16:	4a36      	ldr	r2, [pc, #216]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c1e:	4b34      	ldr	r3, [pc, #208]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2a:	4b31      	ldr	r3, [pc, #196]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2e:	4a30      	ldr	r2, [pc, #192]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c36:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8002c42:	23a0      	movs	r3, #160	@ 0xa0
 8002c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c52:	2305      	movs	r3, #5
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f107 031c 	add.w	r3, r7, #28
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c60:	f000 fc6a 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_Pin;
 8002c64:	2310      	movs	r3, #16
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c74:	2305      	movs	r3, #5
 8002c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	481d      	ldr	r0, [pc, #116]	@ (8002cf4 <HAL_SPI_MspInit+0x11c>)
 8002c80:	f000 fc5a 	bl	8003538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c84:	e02d      	b.n	8002ce2 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf8 <HAL_SPI_MspInit+0x120>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d128      	bne.n	8002ce2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c90:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	4a16      	ldr	r2, [pc, #88]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c9c:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cac:	4a10      	ldr	r2, [pc, #64]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf0 <HAL_SPI_MspInit+0x118>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cc0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd6:	f107 031c 	add.w	r3, r7, #28
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4805      	ldr	r0, [pc, #20]	@ (8002cf4 <HAL_SPI_MspInit+0x11c>)
 8002cde:	f000 fc2b 	bl	8003538 <HAL_GPIO_Init>
}
 8002ce2:	bf00      	nop
 8002ce4:	3730      	adds	r7, #48	@ 0x30
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40013000 	.word	0x40013000
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	40003800 	.word	0x40003800

08002cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <HAL_TIM_Base_MspInit+0x5c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10c      	bne.n	8002d28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <HAL_TIM_Base_MspInit+0x60>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d12:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <HAL_TIM_Base_MspInit+0x60>)
 8002d14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d18:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <HAL_TIM_Base_MspInit+0x60>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d26:	e010      	b.n	8002d4a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d30:	d10b      	bne.n	8002d4a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_TIM_Base_MspInit+0x60>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d36:	4a09      	ldr	r2, [pc, #36]	@ (8002d5c <HAL_TIM_Base_MspInit+0x60>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d3e:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <HAL_TIM_Base_MspInit+0x60>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	@ 0x30
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 031c 	add.w	r3, r7, #28
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	@ (8002e3c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d129      	bne.n	8002dd6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d82:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	4a2e      	ldr	r2, [pc, #184]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9e:	4a28      	ldr	r2, [pc, #160]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002da6:	4b26      	ldr	r3, [pc, #152]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = E2B_Pin|E2A_Pin;
 8002db2:	2350      	movs	r3, #80	@ 0x50
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f107 031c 	add.w	r3, r7, #28
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dd0:	f000 fbb2 	bl	8003538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002dd4:	e02e      	b.n	8002e34 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM4)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1a      	ldr	r2, [pc, #104]	@ (8002e44 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d129      	bne.n	8002e34 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	4a16      	ldr	r2, [pc, #88]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dec:	4b14      	ldr	r3, [pc, #80]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	613b      	str	r3, [r7, #16]
 8002df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df8:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfc:	4a10      	ldr	r2, [pc, #64]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e04:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = E1A_Pin|E1B_Pin;
 8002e10:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002e22:	230a      	movs	r3, #10
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	f107 031c 	add.w	r3, r7, #28
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e30:	f000 fb82 	bl	8003538 <HAL_GPIO_Init>
}
 8002e34:	bf00      	nop
 8002e36:	3730      	adds	r7, #48	@ 0x30
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40000800 	.word	0x40000800

08002e48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a23      	ldr	r2, [pc, #140]	@ (8002ef4 <HAL_TIM_MspPostInit+0xac>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d11e      	bne.n	8002ea8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <HAL_TIM_MspPostInit+0xb0>)
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ef8 <HAL_TIM_MspPostInit+0xb0>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_TIM_MspPostInit+0xb0>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = M1_Pin;
 8002e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e90:	2302      	movs	r3, #2
 8002e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002e94:	2306      	movs	r3, #6
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ea2:	f000 fb49 	bl	8003538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ea6:	e021      	b.n	8002eec <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb0:	d11c      	bne.n	8002eec <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_TIM_MspPostInit+0xb0>)
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb6:	4a10      	ldr	r2, [pc, #64]	@ (8002ef8 <HAL_TIM_MspPostInit+0xb0>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_TIM_MspPostInit+0xb0>)
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2_Pin;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eda:	2301      	movs	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(M2_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ee8:	f000 fb26 	bl	8003538 <HAL_GPIO_Init>
}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	@ 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b09c      	sub	sp, #112	@ 0x70
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f14:	f107 0318 	add.w	r3, r7, #24
 8002f18:	2244      	movs	r2, #68	@ 0x44
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 fc98 	bl	8008852 <memset>
  if(huart->Instance==USART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd8 <HAL_UART_MspInit+0xdc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d151      	bne.n	8002fd0 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f34:	f107 0318 	add.w	r3, r7, #24
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 fa79 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f44:	f7ff fbb2 	bl	80026ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f48:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4c:	4a23      	ldr	r2, [pc, #140]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f52:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f54:	4b21      	ldr	r3, [pc, #132]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f60:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	4a1d      	ldr	r2, [pc, #116]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f78:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7c:	4a17      	ldr	r2, [pc, #92]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f7e:	f043 0302 	orr.w	r3, r3, #2
 8002f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f84:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_UART_MspInit+0xe0>)
 8002f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8002f90:	2310      	movs	r3, #16
 8002f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fa0:	2307      	movs	r3, #7
 8002fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	480d      	ldr	r0, [pc, #52]	@ (8002fe0 <HAL_UART_MspInit+0xe4>)
 8002fac:	f000 fac4 	bl	8003538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4806      	ldr	r0, [pc, #24]	@ (8002fe4 <HAL_UART_MspInit+0xe8>)
 8002fcc:	f000 fab4 	bl	8003538 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002fd0:	bf00      	nop
 8002fd2:	3770      	adds	r7, #112	@ 0x70
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	48000400 	.word	0x48000400

08002fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <NMI_Handler+0x4>

08002ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <HardFault_Handler+0x4>

08002ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <MemManage_Handler+0x4>

08003000 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <BusFault_Handler+0x4>

08003008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <UsageFault_Handler+0x4>

08003010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800303e:	f000 f957 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}

08003046 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  return 1;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <_kill>:

int _kill(int pid, int sig)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003060:	f005 fc4a 	bl	80088f8 <__errno>
 8003064:	4603      	mov	r3, r0
 8003066:	2216      	movs	r2, #22
 8003068:	601a      	str	r2, [r3, #0]
  return -1;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_exit>:

void _exit (int status)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800307e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ffe7 	bl	8003056 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <_exit+0x12>

0800308c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e00a      	b.n	80030b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800309e:	f3af 8000 	nop.w
 80030a2:	4601      	mov	r1, r0
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	60ba      	str	r2, [r7, #8]
 80030aa:	b2ca      	uxtb	r2, r1
 80030ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3301      	adds	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dbf0      	blt.n	800309e <_read+0x12>
  }

  return len;
 80030bc:	687b      	ldr	r3, [r7, #4]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e009      	b.n	80030ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	60ba      	str	r2, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3301      	adds	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	dbf1      	blt.n	80030d8 <_write+0x12>
  }
  return len;
 80030f4:	687b      	ldr	r3, [r7, #4]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <_close>:

int _close(int file)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003126:	605a      	str	r2, [r3, #4]
  return 0;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <_isatty>:

int _isatty(int file)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003170:	4a14      	ldr	r2, [pc, #80]	@ (80031c4 <_sbrk+0x5c>)
 8003172:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <_sbrk+0x60>)
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800317c:	4b13      	ldr	r3, [pc, #76]	@ (80031cc <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003184:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <_sbrk+0x64>)
 8003186:	4a12      	ldr	r2, [pc, #72]	@ (80031d0 <_sbrk+0x68>)
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800318a:	4b10      	ldr	r3, [pc, #64]	@ (80031cc <_sbrk+0x64>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	429a      	cmp	r2, r3
 8003196:	d207      	bcs.n	80031a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003198:	f005 fbae 	bl	80088f8 <__errno>
 800319c:	4603      	mov	r3, r0
 800319e:	220c      	movs	r2, #12
 80031a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031a6:	e009      	b.n	80031bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a8:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ae:	4b07      	ldr	r3, [pc, #28]	@ (80031cc <_sbrk+0x64>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <_sbrk+0x64>)
 80031b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ba:	68fb      	ldr	r3, [r7, #12]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20008000 	.word	0x20008000
 80031c8:	00000400 	.word	0x00000400
 80031cc:	200006cc 	.word	0x200006cc
 80031d0:	20000820 	.word	0x20000820

080031d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <SystemInit+0x20>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <SystemInit+0x20>)
 80031e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
 ldr   r0, =_estack
 80031f8:	480d      	ldr	r0, [pc, #52]	@ (8003230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031fa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80031fc:	f7ff ffea 	bl	80031d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003200:	480c      	ldr	r0, [pc, #48]	@ (8003234 <LoopForever+0x6>)
  ldr r1, =_edata
 8003202:	490d      	ldr	r1, [pc, #52]	@ (8003238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003204:	4a0d      	ldr	r2, [pc, #52]	@ (800323c <LoopForever+0xe>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003208:	e002      	b.n	8003210 <LoopCopyDataInit>

0800320a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800320a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800320c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800320e:	3304      	adds	r3, #4

08003210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003214:	d3f9      	bcc.n	800320a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003216:	4a0a      	ldr	r2, [pc, #40]	@ (8003240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003218:	4c0a      	ldr	r4, [pc, #40]	@ (8003244 <LoopForever+0x16>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800321c:	e001      	b.n	8003222 <LoopFillZerobss>

0800321e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800321e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003220:	3204      	adds	r2, #4

08003222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003224:	d3fb      	bcc.n	800321e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003226:	f005 fb6d 	bl	8008904 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800322a:	f7fe febb 	bl	8001fa4 <main>

0800322e <LoopForever>:

LoopForever:
    b LoopForever
 800322e:	e7fe      	b.n	800322e <LoopForever>
 ldr   r0, =_estack
 8003230:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003238:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800323c:	0800c628 	.word	0x0800c628
  ldr r2, =_sbss
 8003240:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003244:	20000820 	.word	0x20000820

08003248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <ADC1_2_IRQHandler>

0800324a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003254:	2003      	movs	r0, #3
 8003256:	f000 f93d 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800325a:	200f      	movs	r0, #15
 800325c:	f000 f80e 	bl	800327c <HAL_InitTick>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	71fb      	strb	r3, [r7, #7]
 800326a:	e001      	b.n	8003270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800326c:	f7ff fc90 	bl	8002b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003270:	79fb      	ldrb	r3, [r7, #7]

}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003288:	4b16      	ldr	r3, [pc, #88]	@ (80032e4 <HAL_InitTick+0x68>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d022      	beq.n	80032d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003290:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <HAL_InitTick+0x6c>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <HAL_InitTick+0x68>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800329c:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f93a 	bl	800351e <HAL_SYSTICK_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10f      	bne.n	80032d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	d809      	bhi.n	80032ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b6:	2200      	movs	r2, #0
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032be:	f000 f914 	bl	80034ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032c2:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <HAL_InitTick+0x70>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e007      	b.n	80032da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e004      	b.n	80032da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e001      	b.n	80032da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000020 	.word	0x20000020
 80032e8:	20000018 	.word	0x20000018
 80032ec:	2000001c 	.word	0x2000001c

080032f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_IncTick+0x1c>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_IncTick+0x20>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	4a03      	ldr	r2, [pc, #12]	@ (800330c <HAL_IncTick+0x1c>)
 8003300:	6013      	str	r3, [r2, #0]
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	200006d0 	.word	0x200006d0
 8003310:	20000020 	.word	0x20000020

08003314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return uwTick;
 8003318:	4b03      	ldr	r3, [pc, #12]	@ (8003328 <HAL_GetTick+0x14>)
 800331a:	681b      	ldr	r3, [r3, #0]
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	200006d0 	.word	0x200006d0

0800332c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7ff ffee 	bl	8003314 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003344:	d004      	beq.n	8003350 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003346:	4b09      	ldr	r3, [pc, #36]	@ (800336c <HAL_Delay+0x40>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003350:	bf00      	nop
 8003352:	f7ff ffdf 	bl	8003314 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	429a      	cmp	r2, r3
 8003360:	d8f7      	bhi.n	8003352 <HAL_Delay+0x26>
  {
  }
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000020 	.word	0x20000020

08003370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003380:	4b0c      	ldr	r3, [pc, #48]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <__NVIC_GetPriorityGrouping+0x18>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0307 	and.w	r3, r3, #7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	@ (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	@ (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	@ 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a0:	d301      	bcc.n	80034a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <SysTick_Config+0x40>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ae:	210f      	movs	r1, #15
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034b4:	f7ff ff8e 	bl	80033d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <SysTick_Config+0x40>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034be:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <SysTick_Config+0x40>)
 80034c0:	2207      	movs	r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff47 	bl	8003370 <__NVIC_SetPriorityGrouping>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff5e 	bl	80033b8 <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff90 	bl	8003428 <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff5f 	bl	80033d4 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ffb2 	bl	8003490 <SysTick_Config>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003546:	e15a      	b.n	80037fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 814c 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d005      	beq.n	8003578 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003574:	2b02      	cmp	r3, #2
 8003576:	d130      	bne.n	80035da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ae:	2201      	movs	r2, #1
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	f003 0201 	and.w	r2, r3, #1
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d017      	beq.n	8003616 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d123      	bne.n	800366a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	220f      	movs	r2, #15
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	6939      	ldr	r1, [r7, #16]
 8003666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0203 	and.w	r2, r3, #3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ac:	4b5b      	ldr	r3, [pc, #364]	@ (800381c <HAL_GPIO_Init+0x2e4>)
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	4a5a      	ldr	r2, [pc, #360]	@ (800381c <HAL_GPIO_Init+0x2e4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80036b8:	4b58      	ldr	r3, [pc, #352]	@ (800381c <HAL_GPIO_Init+0x2e4>)
 80036ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c4:	4a56      	ldr	r2, [pc, #344]	@ (8003820 <HAL_GPIO_Init+0x2e8>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	3302      	adds	r3, #2
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	220f      	movs	r2, #15
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036ee:	d01f      	beq.n	8003730 <HAL_GPIO_Init+0x1f8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003824 <HAL_GPIO_Init+0x2ec>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d019      	beq.n	800372c <HAL_GPIO_Init+0x1f4>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003828 <HAL_GPIO_Init+0x2f0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d013      	beq.n	8003728 <HAL_GPIO_Init+0x1f0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a4a      	ldr	r2, [pc, #296]	@ (800382c <HAL_GPIO_Init+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00d      	beq.n	8003724 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a49      	ldr	r2, [pc, #292]	@ (8003830 <HAL_GPIO_Init+0x2f8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a48      	ldr	r2, [pc, #288]	@ (8003834 <HAL_GPIO_Init+0x2fc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_GPIO_Init+0x1e4>
 8003718:	2305      	movs	r3, #5
 800371a:	e00a      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800371c:	2306      	movs	r3, #6
 800371e:	e008      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003720:	2304      	movs	r3, #4
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003724:	2303      	movs	r3, #3
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1fa>
 8003730:	2300      	movs	r3, #0
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003742:	4937      	ldr	r1, [pc, #220]	@ (8003820 <HAL_GPIO_Init+0x2e8>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003750:	4b39      	ldr	r3, [pc, #228]	@ (8003838 <HAL_GPIO_Init+0x300>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003774:	4a30      	ldr	r2, [pc, #192]	@ (8003838 <HAL_GPIO_Init+0x300>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800377a:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <HAL_GPIO_Init+0x300>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800379e:	4a26      	ldr	r2, [pc, #152]	@ (8003838 <HAL_GPIO_Init+0x300>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037a4:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <HAL_GPIO_Init+0x300>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <HAL_GPIO_Init+0x300>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003838 <HAL_GPIO_Init+0x300>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037f2:	4a11      	ldr	r2, [pc, #68]	@ (8003838 <HAL_GPIO_Init+0x300>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f ae9d 	bne.w	8003548 <HAL_GPIO_Init+0x10>
  }
}
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	48000400 	.word	0x48000400
 8003828:	48000800 	.word	0x48000800
 800382c:	48000c00 	.word	0x48000c00
 8003830:	48001000 	.word	0x48001000
 8003834:	48001400 	.word	0x48001400
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
 8003848:	4613      	mov	r3, r2
 800384a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800384c:	787b      	ldrb	r3, [r7, #1]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003852:	887a      	ldrh	r2, [r7, #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003858:	e002      	b.n	8003860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d141      	bne.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800387a:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d131      	bne.n	80038ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003888:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800388e:	4a46      	ldr	r2, [pc, #280]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003894:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003898:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038a0:	4a41      	ldr	r2, [pc, #260]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038a8:	4b40      	ldr	r3, [pc, #256]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2232      	movs	r2, #50	@ 0x32
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	4a3f      	ldr	r2, [pc, #252]	@ (80039b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	0c9b      	lsrs	r3, r3, #18
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038be:	e002      	b.n	80038c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c6:	4b38      	ldr	r3, [pc, #224]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d2:	d102      	bne.n	80038da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f2      	bne.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038da:	4b33      	ldr	r3, [pc, #204]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e6:	d158      	bne.n	800399a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e057      	b.n	800399c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038ec:	4b2e      	ldr	r3, [pc, #184]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f2:	4a2d      	ldr	r2, [pc, #180]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038fc:	e04d      	b.n	800399a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003904:	d141      	bne.n	800398a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003906:	4b28      	ldr	r3, [pc, #160]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003912:	d131      	bne.n	8003978 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003914:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800391a:	4a23      	ldr	r2, [pc, #140]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003920:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800392c:	4a1e      	ldr	r2, [pc, #120]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003934:	4b1d      	ldr	r3, [pc, #116]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2232      	movs	r2, #50	@ 0x32
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	4a1c      	ldr	r2, [pc, #112]	@ (80039b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	0c9b      	lsrs	r3, r3, #18
 8003946:	3301      	adds	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394a:	e002      	b.n	8003952 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3b01      	subs	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003952:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800395e:	d102      	bne.n	8003966 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f2      	bne.n	800394c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003966:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003972:	d112      	bne.n	800399a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e011      	b.n	800399c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800397a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800397e:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003988:	e007      	b.n	800399a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003992:	4a05      	ldr	r2, [pc, #20]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003994:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003998:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40007000 	.word	0x40007000
 80039ac:	20000018 	.word	0x20000018
 80039b0:	431bde83 	.word	0x431bde83

080039b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a04      	ldr	r2, [pc, #16]	@ (80039d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c2:	6093      	str	r3, [r2, #8]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40007000 	.word	0x40007000

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e2fe      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d075      	beq.n	8003ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b97      	ldr	r3, [pc, #604]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fc:	4b94      	ldr	r3, [pc, #592]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3e>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d002      	beq.n	8003a18 <HAL_RCC_OscConfig+0x44>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	4b8d      	ldr	r3, [pc, #564]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05b      	beq.n	8003adc <HAL_RCC_OscConfig+0x108>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d157      	bne.n	8003adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e2d9      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x74>
 8003a3a:	4b85      	ldr	r3, [pc, #532]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a84      	ldr	r2, [pc, #528]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x98>
 8003a52:	4b7f      	ldr	r3, [pc, #508]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7e      	ldr	r2, [pc, #504]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7b      	ldr	r2, [pc, #492]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	4b78      	ldr	r3, [pc, #480]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a77      	ldr	r2, [pc, #476]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b75      	ldr	r3, [pc, #468]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a74      	ldr	r2, [pc, #464]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7ff fc42 	bl	8003314 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7ff fc3e 	bl	8003314 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	@ 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e29e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7ff fc2e 	bl	8003314 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7ff fc2a 	bl	8003314 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	@ 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e28a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ace:	4b60      	ldr	r3, [pc, #384]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0xe8>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d075      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aea:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af4:	4b56      	ldr	r3, [pc, #344]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d102      	bne.n	8003b0a <HAL_RCC_OscConfig+0x136>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d002      	beq.n	8003b10 <HAL_RCC_OscConfig+0x13c>
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d11f      	bne.n	8003b50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b10:	4b4f      	ldr	r3, [pc, #316]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_OscConfig+0x154>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e25d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b49      	ldr	r3, [pc, #292]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	4946      	ldr	r1, [pc, #280]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b3c:	4b45      	ldr	r3, [pc, #276]	@ (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fb9b 	bl	800327c <HAL_InitTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d043      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e249      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d023      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b58:	4b3d      	ldr	r3, [pc, #244]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7ff fbd6 	bl	8003314 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6c:	f7ff fbd2 	bl	8003314 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e232      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7e:	4b34      	ldr	r3, [pc, #208]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8a:	4b31      	ldr	r3, [pc, #196]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	061b      	lsls	r3, r3, #24
 8003b98:	492d      	ldr	r1, [pc, #180]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]
 8003b9e:	e01a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7ff fbb2 	bl	8003314 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7ff fbae 	bl	8003314 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e20e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc6:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x1e0>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d041      	beq.n	8003c66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bea:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf0:	4a17      	ldr	r2, [pc, #92]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7ff fb8b 	bl	8003314 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c02:	f7ff fb87 	bl	8003314 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1e7      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c14:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ef      	beq.n	8003c02 <HAL_RCC_OscConfig+0x22e>
 8003c22:	e020      	b.n	8003c66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c24:	4b0a      	ldr	r3, [pc, #40]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c2a:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <HAL_RCC_OscConfig+0x27c>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7ff fb6e 	bl	8003314 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c3a:	e00d      	b.n	8003c58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7ff fb6a 	bl	8003314 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d906      	bls.n	8003c58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1ca      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c58:	4b8c      	ldr	r3, [pc, #560]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ea      	bne.n	8003c3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80a6 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c74:	2300      	movs	r3, #0
 8003c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c78:	4b84      	ldr	r3, [pc, #528]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_OscConfig+0x2b4>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x2b6>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c92:	4a7e      	ldr	r2, [pc, #504]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003caa:	4b79      	ldr	r3, [pc, #484]	@ (8003e90 <HAL_RCC_OscConfig+0x4bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d118      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb6:	4b76      	ldr	r3, [pc, #472]	@ (8003e90 <HAL_RCC_OscConfig+0x4bc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a75      	ldr	r2, [pc, #468]	@ (8003e90 <HAL_RCC_OscConfig+0x4bc>)
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc2:	f7ff fb27 	bl	8003314 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cca:	f7ff fb23 	bl	8003314 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e183      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003e90 <HAL_RCC_OscConfig+0x4bc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d108      	bne.n	8003d02 <HAL_RCC_OscConfig+0x32e>
 8003cf0:	4b66      	ldr	r3, [pc, #408]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	4a65      	ldr	r2, [pc, #404]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003cf8:	f043 0301 	orr.w	r3, r3, #1
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d00:	e024      	b.n	8003d4c <HAL_RCC_OscConfig+0x378>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d110      	bne.n	8003d2c <HAL_RCC_OscConfig+0x358>
 8003d0a:	4b60      	ldr	r3, [pc, #384]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d10:	4a5e      	ldr	r2, [pc, #376]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	f043 0304 	orr.w	r3, r3, #4
 8003d16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	4a5a      	ldr	r2, [pc, #360]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCC_OscConfig+0x378>
 8003d2c:	4b57      	ldr	r3, [pc, #348]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a56      	ldr	r2, [pc, #344]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d3c:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a52      	ldr	r2, [pc, #328]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7ff fade 	bl	8003314 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5c:	f7ff fada 	bl	8003314 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e138      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d72:	4b46      	ldr	r3, [pc, #280]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0ed      	beq.n	8003d5c <HAL_RCC_OscConfig+0x388>
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7ff fac7 	bl	8003314 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8a:	f7ff fac3 	bl	8003314 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e121      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da0:	4b3a      	ldr	r3, [pc, #232]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ed      	bne.n	8003d8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dae:	7ffb      	ldrb	r3, [r7, #31]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b35      	ldr	r3, [pc, #212]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	4a34      	ldr	r2, [pc, #208]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d03c      	beq.n	8003e46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01c      	beq.n	8003e0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dda:	4a2c      	ldr	r2, [pc, #176]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7ff fa96 	bl	8003314 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dec:	f7ff fa92 	bl	8003314 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0f2      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dfe:	4b23      	ldr	r3, [pc, #140]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ef      	beq.n	8003dec <HAL_RCC_OscConfig+0x418>
 8003e0c:	e01b      	b.n	8003e46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e14:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7ff fa79 	bl	8003314 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e26:	f7ff fa75 	bl	8003314 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0d5      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e38:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ef      	bne.n	8003e26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80c9 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e50:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	f000 8083 	beq.w	8003f64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d15e      	bne.n	8003f24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b09      	ldr	r3, [pc, #36]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <HAL_RCC_OscConfig+0x4b8>)
 8003e6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e72:	f7ff fa4f 	bl	8003314 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e78:	e00c      	b.n	8003e94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7a:	f7ff fa4b 	bl	8003314 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d905      	bls.n	8003e94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0ab      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e94:	4b55      	ldr	r3, [pc, #340]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ec      	bne.n	8003e7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea0:	4b52      	ldr	r3, [pc, #328]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	4b52      	ldr	r3, [pc, #328]	@ (8003ff0 <HAL_RCC_OscConfig+0x61c>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6a11      	ldr	r1, [r2, #32]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0112      	lsls	r2, r2, #4
 8003eb4:	4311      	orrs	r1, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003eba:	0212      	lsls	r2, r2, #8
 8003ebc:	4311      	orrs	r1, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ec2:	0852      	lsrs	r2, r2, #1
 8003ec4:	3a01      	subs	r2, #1
 8003ec6:	0552      	lsls	r2, r2, #21
 8003ec8:	4311      	orrs	r1, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ece:	0852      	lsrs	r2, r2, #1
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	0652      	lsls	r2, r2, #25
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003eda:	06d2      	lsls	r2, r2, #27
 8003edc:	430a      	orrs	r2, r1
 8003ede:	4943      	ldr	r1, [pc, #268]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b41      	ldr	r3, [pc, #260]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a40      	ldr	r2, [pc, #256]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a3d      	ldr	r2, [pc, #244]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7ff fa0a 	bl	8003314 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7ff fa06 	bl	8003314 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e066      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b35      	ldr	r3, [pc, #212]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x530>
 8003f22:	e05e      	b.n	8003fe2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a30      	ldr	r2, [pc, #192]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7ff f9f0 	bl	8003314 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7ff f9ec 	bl	8003314 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e04c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4a:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f56:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	4924      	ldr	r1, [pc, #144]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_RCC_OscConfig+0x620>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60cb      	str	r3, [r1, #12]
 8003f62:	e03e      	b.n	8003fe2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e039      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f70:	4b1e      	ldr	r3, [pc, #120]	@ (8003fec <HAL_RCC_OscConfig+0x618>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0203 	and.w	r2, r3, #3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d12c      	bne.n	8003fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d123      	bne.n	8003fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d11b      	bne.n	8003fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d113      	bne.n	8003fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	019f800c 	.word	0x019f800c
 8003ff4:	feeefffc 	.word	0xfeeefffc

08003ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e11e      	b.n	800424e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b91      	ldr	r3, [pc, #580]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d910      	bls.n	8004040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b8e      	ldr	r3, [pc, #568]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 020f 	bic.w	r2, r3, #15
 8004026:	498c      	ldr	r1, [pc, #560]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b8a      	ldr	r3, [pc, #552]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e106      	b.n	800424e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d073      	beq.n	8004134 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d129      	bne.n	80040a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004054:	4b81      	ldr	r3, [pc, #516]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0f4      	b.n	800424e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004064:	f000 f99e 	bl	80043a4 <RCC_GetSysClockFreqFromPLLSource>
 8004068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4a7c      	ldr	r2, [pc, #496]	@ (8004260 <HAL_RCC_ClockConfig+0x268>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d93f      	bls.n	80040f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004072:	4b7a      	ldr	r3, [pc, #488]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004086:	2b00      	cmp	r3, #0
 8004088:	d033      	beq.n	80040f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800408e:	2b00      	cmp	r3, #0
 8004090:	d12f      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004092:	4b72      	ldr	r3, [pc, #456]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800409a:	4a70      	ldr	r2, [pc, #448]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 800409c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040a2:	2380      	movs	r3, #128	@ 0x80
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	e024      	b.n	80040f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d107      	bne.n	80040c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b0:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0c6      	b.n	800424e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c0:	4b66      	ldr	r3, [pc, #408]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e0be      	b.n	800424e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040d0:	f000 f8ce 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4a61      	ldr	r2, [pc, #388]	@ (8004260 <HAL_RCC_ClockConfig+0x268>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d909      	bls.n	80040f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040de:	4b5f      	ldr	r3, [pc, #380]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040e6:	4a5d      	ldr	r2, [pc, #372]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 80040e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b5a      	ldr	r3, [pc, #360]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4957      	ldr	r1, [pc, #348]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7ff f906 	bl	8003314 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7ff f902 	bl	8003314 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e095      	b.n	800424e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b4e      	ldr	r3, [pc, #312]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d023      	beq.n	8004188 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800414c:	4b43      	ldr	r3, [pc, #268]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a42      	ldr	r2, [pc, #264]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004156:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004164:	4b3d      	ldr	r3, [pc, #244]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800416c:	4a3b      	ldr	r2, [pc, #236]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 800416e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b39      	ldr	r3, [pc, #228]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4936      	ldr	r1, [pc, #216]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
 8004186:	e008      	b.n	800419a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b80      	cmp	r3, #128	@ 0x80
 800418c:	d105      	bne.n	800419a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800418e:	4b33      	ldr	r3, [pc, #204]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	4a32      	ldr	r2, [pc, #200]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004198:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800419a:	4b2f      	ldr	r3, [pc, #188]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d21d      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 020f 	bic.w	r2, r3, #15
 80041b0:	4929      	ldr	r1, [pc, #164]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041b8:	f7ff f8ac 	bl	8003314 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7ff f8a8 	bl	8003314 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e03b      	b.n	800424e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b20      	ldr	r3, [pc, #128]	@ (8004258 <HAL_RCC_ClockConfig+0x260>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1ed      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f0:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4917      	ldr	r1, [pc, #92]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800420e:	4b13      	ldr	r3, [pc, #76]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	490f      	ldr	r1, [pc, #60]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004222:	f000 f825 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8004226:	4602      	mov	r2, r0
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <HAL_RCC_ClockConfig+0x264>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	490c      	ldr	r1, [pc, #48]	@ (8004264 <HAL_RCC_ClockConfig+0x26c>)
 8004234:	5ccb      	ldrb	r3, [r1, r3]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a0a      	ldr	r2, [pc, #40]	@ (8004268 <HAL_RCC_ClockConfig+0x270>)
 8004240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <HAL_RCC_ClockConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f818 	bl	800327c <HAL_InitTick>
 800424c:	4603      	mov	r3, r0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40022000 	.word	0x40022000
 800425c:	40021000 	.word	0x40021000
 8004260:	04c4b400 	.word	0x04c4b400
 8004264:	0800c1a8 	.word	0x0800c1a8
 8004268:	20000018 	.word	0x20000018
 800426c:	2000001c 	.word	0x2000001c

08004270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004276:	4b2c      	ldr	r3, [pc, #176]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b04      	cmp	r3, #4
 8004280:	d102      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004282:	4b2a      	ldr	r3, [pc, #168]	@ (800432c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	e047      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004288:	4b27      	ldr	r3, [pc, #156]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d102      	bne.n	800429a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004294:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	e03e      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800429a:	4b23      	ldr	r3, [pc, #140]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b0c      	cmp	r3, #12
 80042a4:	d136      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a6:	4b20      	ldr	r3, [pc, #128]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	3301      	adds	r3, #1
 80042bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d10c      	bne.n	80042de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004330 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	4a16      	ldr	r2, [pc, #88]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ce:	68d2      	ldr	r2, [r2, #12]
 80042d0:	0a12      	lsrs	r2, r2, #8
 80042d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	617b      	str	r3, [r7, #20]
      break;
 80042dc:	e00c      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042de:	4a13      	ldr	r2, [pc, #76]	@ (800432c <HAL_RCC_GetSysClockFreq+0xbc>)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e6:	4a10      	ldr	r2, [pc, #64]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	0a12      	lsrs	r2, r2, #8
 80042ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	617b      	str	r3, [r7, #20]
      break;
 80042f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0e5b      	lsrs	r3, r3, #25
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e001      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004318:	693b      	ldr	r3, [r7, #16]
}
 800431a:	4618      	mov	r0, r3
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <HAL_RCC_GetHCLKFreq+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000018 	.word	0x20000018

0800434c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004350:	f7ff fff0 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4904      	ldr	r1, [pc, #16]	@ (8004374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000
 8004374:	0800c1b8 	.word	0x0800c1b8

08004378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800437c:	f7ff ffda 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0adb      	lsrs	r3, r3, #11
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4904      	ldr	r1, [pc, #16]	@ (80043a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000
 80043a0:	0800c1b8 	.word	0x0800c1b8

080043a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d10c      	bne.n	80043e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043c8:	4a17      	ldr	r2, [pc, #92]	@ (8004428 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	4a14      	ldr	r2, [pc, #80]	@ (8004424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043d2:	68d2      	ldr	r2, [r2, #12]
 80043d4:	0a12      	lsrs	r2, r2, #8
 80043d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	617b      	str	r3, [r7, #20]
    break;
 80043e0:	e00c      	b.n	80043fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043e2:	4a12      	ldr	r2, [pc, #72]	@ (800442c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4a0e      	ldr	r2, [pc, #56]	@ (8004424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ec:	68d2      	ldr	r2, [r2, #12]
 80043ee:	0a12      	lsrs	r2, r2, #8
 80043f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
    break;
 80043fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043fc:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0e5b      	lsrs	r3, r3, #25
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004416:	687b      	ldr	r3, [r7, #4]
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	40021000 	.word	0x40021000
 8004428:	007a1200 	.word	0x007a1200
 800442c:	00f42400 	.word	0x00f42400

08004430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004438:	2300      	movs	r3, #0
 800443a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800443c:	2300      	movs	r3, #0
 800443e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8098 	beq.w	800457e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004452:	4b43      	ldr	r3, [pc, #268]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445e:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	4a3f      	ldr	r2, [pc, #252]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004468:	6593      	str	r3, [r2, #88]	@ 0x58
 800446a:	4b3d      	ldr	r3, [pc, #244]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800447a:	4b3a      	ldr	r3, [pc, #232]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a39      	ldr	r2, [pc, #228]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004486:	f7fe ff45 	bl	8003314 <HAL_GetTick>
 800448a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800448c:	e009      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fe ff41 	bl	8003314 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d902      	bls.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	74fb      	strb	r3, [r7, #19]
        break;
 80044a0:	e005      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a2:	4b30      	ldr	r3, [pc, #192]	@ (8004564 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0ef      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d159      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01e      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d019      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044d0:	4b23      	ldr	r3, [pc, #140]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044dc:	4b20      	ldr	r3, [pc, #128]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044fc:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d016      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fe ff01 	bl	8003314 <HAL_GetTick>
 8004512:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004514:	e00b      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fe fefd 	bl	8003314 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004524:	4293      	cmp	r3, r2
 8004526:	d902      	bls.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	74fb      	strb	r3, [r7, #19]
            break;
 800452c:	e006      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ec      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004542:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004548:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004550:	4903      	ldr	r1, [pc, #12]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004558:	e008      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800455a:	7cfb      	ldrb	r3, [r7, #19]
 800455c:	74bb      	strb	r3, [r7, #18]
 800455e:	e005      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004560:	40021000 	.word	0x40021000
 8004564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456c:	7c7b      	ldrb	r3, [r7, #17]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004572:	4ba6      	ldr	r3, [pc, #664]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	4aa5      	ldr	r2, [pc, #660]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800458a:	4ba0      	ldr	r3, [pc, #640]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004590:	f023 0203 	bic.w	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	499c      	ldr	r1, [pc, #624]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ac:	4b97      	ldr	r3, [pc, #604]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f023 020c 	bic.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4994      	ldr	r1, [pc, #592]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ce:	4b8f      	ldr	r3, [pc, #572]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	498b      	ldr	r1, [pc, #556]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045f0:	4b86      	ldr	r3, [pc, #536]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	4983      	ldr	r1, [pc, #524]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004612:	4b7e      	ldr	r3, [pc, #504]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004618:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	497a      	ldr	r1, [pc, #488]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004634:	4b75      	ldr	r3, [pc, #468]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	4972      	ldr	r1, [pc, #456]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004656:	4b6d      	ldr	r3, [pc, #436]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	4969      	ldr	r1, [pc, #420]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004678:	4b64      	ldr	r3, [pc, #400]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4961      	ldr	r1, [pc, #388]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800469a:	4b5c      	ldr	r3, [pc, #368]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	4958      	ldr	r1, [pc, #352]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046bc:	4b53      	ldr	r3, [pc, #332]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	4950      	ldr	r1, [pc, #320]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046da:	d105      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046dc:	4b4b      	ldr	r3, [pc, #300]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a4a      	ldr	r2, [pc, #296]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d015      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046f4:	4b45      	ldr	r3, [pc, #276]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	4942      	ldr	r1, [pc, #264]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004714:	4b3d      	ldr	r3, [pc, #244]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a3c      	ldr	r2, [pc, #240]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800471e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800472c:	4b37      	ldr	r3, [pc, #220]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004732:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	4934      	ldr	r1, [pc, #208]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800474a:	d105      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474c:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a2e      	ldr	r2, [pc, #184]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004756:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d015      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004764:	4b29      	ldr	r3, [pc, #164]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	4926      	ldr	r1, [pc, #152]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004782:	d105      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004784:	4b21      	ldr	r3, [pc, #132]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a20      	ldr	r2, [pc, #128]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800478e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d015      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800479c:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047aa:	4918      	ldr	r1, [pc, #96]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ba:	d105      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b13      	ldr	r3, [pc, #76]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a12      	ldr	r2, [pc, #72]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047d4:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e2:	490a      	ldr	r1, [pc, #40]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a04      	ldr	r2, [pc, #16]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004800:	7cbb      	ldrb	r3, [r7, #18]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000

08004810 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e09d      	b.n	800495e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d108      	bne.n	800483c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004832:	d009      	beq.n	8004848 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	61da      	str	r2, [r3, #28]
 800483a:	e005      	b.n	8004848 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fe f9b8 	bl	8002bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800487e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004888:	d902      	bls.n	8004890 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e002      	b.n	8004896 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004894:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800489e:	d007      	beq.n	80048b0 <HAL_SPI_Init+0xa0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f2:	ea42 0103 	orr.w	r1, r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	0c1b      	lsrs	r3, r3, #16
 800490c:	f003 0204 	and.w	r2, r3, #4
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800492c:	ea42 0103 	orr.w	r1, r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800494c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004976:	f7fe fccd 	bl	8003314 <HAL_GetTick>
 800497a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d001      	beq.n	8004990 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
 800498e:	e15c      	b.n	8004c4a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0x36>
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e154      	b.n	8004c4a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_SPI_Transmit+0x48>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e14d      	b.n	8004c4a <HAL_SPI_Transmit+0x2e4>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2203      	movs	r2, #3
 80049ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a00:	d10f      	bne.n	8004a22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2c:	2b40      	cmp	r3, #64	@ 0x40
 8004a2e:	d007      	beq.n	8004a40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a48:	d952      	bls.n	8004af0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_Transmit+0xf2>
 8004a52:	8b7b      	ldrh	r3, [r7, #26]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d145      	bne.n	8004ae4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	881a      	ldrh	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	1c9a      	adds	r2, r3, #2
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a7c:	e032      	b.n	8004ae4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d112      	bne.n	8004ab2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	881a      	ldrh	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9c:	1c9a      	adds	r2, r3, #2
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ab0:	e018      	b.n	8004ae4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab2:	f7fe fc2f 	bl	8003314 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d803      	bhi.n	8004aca <HAL_SPI_Transmit+0x164>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ac8:	d102      	bne.n	8004ad0 <HAL_SPI_Transmit+0x16a>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0b2      	b.n	8004c4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1c7      	bne.n	8004a7e <HAL_SPI_Transmit+0x118>
 8004aee:	e083      	b.n	8004bf8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_SPI_Transmit+0x198>
 8004af8:	8b7b      	ldrh	r3, [r7, #26]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d177      	bne.n	8004bee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d912      	bls.n	8004b2e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b02      	subs	r3, #2
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b2c:	e05f      	b.n	8004bee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	7812      	ldrb	r2, [r2, #0]
 8004b3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b54:	e04b      	b.n	8004bee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d12b      	bne.n	8004bbc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d912      	bls.n	8004b94 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b02      	subs	r3, #2
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b92:	e02c      	b.n	8004bee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	7812      	ldrb	r2, [r2, #0]
 8004ba0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bba:	e018      	b.n	8004bee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bbc:	f7fe fbaa 	bl	8003314 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d803      	bhi.n	8004bd4 <HAL_SPI_Transmit+0x26e>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bd2:	d102      	bne.n	8004bda <HAL_SPI_Transmit+0x274>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e02d      	b.n	8004c4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ae      	bne.n	8004b56 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fcf5 	bl	80055ec <SPI_EndRxTxTransaction>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10a      	bne.n	8004c2c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af02      	add	r7, sp, #8
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d001      	beq.n	8004c72 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e123      	b.n	8004eba <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_SPI_Receive+0x2c>
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e11b      	b.n	8004eba <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c8a:	d112      	bne.n	8004cb2 <HAL_SPI_Receive+0x60>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10e      	bne.n	8004cb2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2204      	movs	r2, #4
 8004c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f90a 	bl	8004ec2 <HAL_SPI_TransmitReceive>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	e103      	b.n	8004eba <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb2:	f7fe fb2f 	bl	8003314 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_SPI_Receive+0x74>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0f9      	b.n	8004eba <HAL_SPI_Receive+0x268>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d18:	d908      	bls.n	8004d2c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	e007      	b.n	8004d3c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d44:	d10f      	bne.n	8004d66 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d70:	2b40      	cmp	r3, #64	@ 0x40
 8004d72:	d007      	beq.n	8004d84 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d8c:	d875      	bhi.n	8004e7a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d8e:	e037      	b.n	8004e00 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d117      	bne.n	8004dce <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f103 020c 	add.w	r2, r3, #12
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	7812      	ldrb	r2, [r2, #0]
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004dcc:	e018      	b.n	8004e00 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dce:	f7fe faa1 	bl	8003314 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d803      	bhi.n	8004de6 <HAL_SPI_Receive+0x194>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004de4:	d102      	bne.n	8004dec <HAL_SPI_Receive+0x19a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e05c      	b.n	8004eba <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1c1      	bne.n	8004d90 <HAL_SPI_Receive+0x13e>
 8004e0c:	e03b      	b.n	8004e86 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d115      	bne.n	8004e48 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	b292      	uxth	r2, r2
 8004e28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	1c9a      	adds	r2, r3, #2
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004e46:	e018      	b.n	8004e7a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e48:	f7fe fa64 	bl	8003314 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d803      	bhi.n	8004e60 <HAL_SPI_Receive+0x20e>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e5e:	d102      	bne.n	8004e66 <HAL_SPI_Receive+0x214>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e01f      	b.n	8004eba <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1c3      	bne.n	8004e0e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fb56 	bl	800553c <SPI_EndRxTransaction>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b08a      	sub	sp, #40	@ 0x28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed4:	f7fe fa1e 	bl	8003314 <HAL_GetTick>
 8004ed8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ee0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004eec:	887b      	ldrh	r3, [r7, #2]
 8004eee:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ef0:	7ffb      	ldrb	r3, [r7, #31]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d00c      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x4e>
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004efc:	d106      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x4a>
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d001      	beq.n	8004f10 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e1f3      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x60>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x60>
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e1e8      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x72>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e1e1      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x436>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d003      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2205      	movs	r2, #5
 8004f4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	887a      	ldrh	r2, [r7, #2]
 8004f68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	887a      	ldrh	r2, [r7, #2]
 8004f76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f92:	d802      	bhi.n	8004f9a <HAL_SPI_TransmitReceive+0xd8>
 8004f94:	8abb      	ldrh	r3, [r7, #20]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d908      	bls.n	8004fac <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	e007      	b.n	8004fbc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc6:	2b40      	cmp	r3, #64	@ 0x40
 8004fc8:	d007      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fe2:	f240 8083 	bls.w	80050ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x132>
 8004fee:	8afb      	ldrh	r3, [r7, #22]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d16f      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff8:	881a      	ldrh	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005004:	1c9a      	adds	r2, r3, #2
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005018:	e05c      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d11b      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x19e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x19e>
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	2b01      	cmp	r3, #1
 8005036:	d113      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	881a      	ldrh	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d11c      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x1e6>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	b292      	uxth	r2, r2
 8005086:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050a4:	2301      	movs	r3, #1
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050a8:	f7fe f934 	bl	8003314 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d80d      	bhi.n	80050d4 <HAL_SPI_TransmitReceive+0x212>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050be:	d009      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e111      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d19d      	bne.n	800501a <HAL_SPI_TransmitReceive+0x158>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d197      	bne.n	800501a <HAL_SPI_TransmitReceive+0x158>
 80050ea:	e0e5      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_SPI_TransmitReceive+0x23a>
 80050f4:	8afb      	ldrh	r3, [r7, #22]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	f040 80d1 	bne.w	800529e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b01      	cmp	r3, #1
 8005104:	d912      	bls.n	800512c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b02      	subs	r3, #2
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800512a:	e0b8      	b.n	800529e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	7812      	ldrb	r2, [r2, #0]
 8005138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005152:	e0a4      	b.n	800529e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b02      	cmp	r3, #2
 8005160:	d134      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x30a>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02f      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x30a>
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	2b01      	cmp	r3, #1
 8005170:	d12c      	bne.n	80051cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d912      	bls.n	80051a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	881a      	ldrh	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	1c9a      	adds	r2, r3, #2
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b02      	subs	r3, #2
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051a0:	e012      	b.n	80051c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	7812      	ldrb	r2, [r2, #0]
 80051ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d148      	bne.n	800526c <HAL_SPI_TransmitReceive+0x3aa>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d042      	beq.n	800526c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d923      	bls.n	800523a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	b292      	uxth	r2, r2
 80051fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005204:	1c9a      	adds	r2, r3, #2
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b02      	subs	r3, #2
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d81f      	bhi.n	8005268 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005236:	605a      	str	r2, [r3, #4]
 8005238:	e016      	b.n	8005268 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f103 020c 	add.w	r2, r3, #12
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005268:	2301      	movs	r3, #1
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800526c:	f7fe f852 	bl	8003314 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005278:	429a      	cmp	r2, r3
 800527a:	d803      	bhi.n	8005284 <HAL_SPI_TransmitReceive+0x3c2>
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005282:	d102      	bne.n	800528a <HAL_SPI_TransmitReceive+0x3c8>
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e02c      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f af55 	bne.w	8005154 <HAL_SPI_TransmitReceive+0x292>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f47f af4e 	bne.w	8005154 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f995 	bl	80055ec <SPI_EndRxTxTransaction>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e00e      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80052f6:	2300      	movs	r3, #0
  }
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3728      	adds	r7, #40	@ 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005310:	f7fe f800 	bl	8003314 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005320:	f7fd fff8 	bl	8003314 <HAL_GetTick>
 8005324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005326:	4b39      	ldr	r3, [pc, #228]	@ (800540c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	015b      	lsls	r3, r3, #5
 800532c:	0d1b      	lsrs	r3, r3, #20
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005336:	e054      	b.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800533e:	d050      	beq.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005340:	f7fd ffe8 	bl	8003314 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	429a      	cmp	r2, r3
 800534e:	d902      	bls.n	8005356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d13d      	bne.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800536e:	d111      	bne.n	8005394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005378:	d004      	beq.n	8005384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005382:	d107      	bne.n	8005394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800539c:	d10f      	bne.n	80053be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e017      	b.n	8005402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3b01      	subs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	bf0c      	ite	eq
 80053f2:	2301      	moveq	r3, #1
 80053f4:	2300      	movne	r3, #0
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d19b      	bne.n	8005338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000018 	.word	0x20000018

08005410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005422:	f7fd ff77 	bl	8003314 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	4413      	add	r3, r2
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005432:	f7fd ff6f 	bl	8003314 <HAL_GetTick>
 8005436:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005440:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	00da      	lsls	r2, r3, #3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	0d1b      	lsrs	r3, r3, #20
 8005450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005458:	e060      	b.n	800551c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005460:	d107      	bne.n	8005472 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005470:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005478:	d050      	beq.n	800551c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800547a:	f7fd ff4b 	bl	8003314 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005486:	429a      	cmp	r2, r3
 8005488:	d902      	bls.n	8005490 <SPI_WaitFifoStateUntilTimeout+0x80>
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	2b00      	cmp	r3, #0
 800548e:	d13d      	bne.n	800550c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800549e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a8:	d111      	bne.n	80054ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054b2:	d004      	beq.n	80054be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054bc:	d107      	bne.n	80054ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d6:	d10f      	bne.n	80054f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e010      	b.n	800552e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	3b01      	subs	r3, #1
 800551a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d196      	bne.n	800545a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	@ 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000018 	.word	0x20000018

0800553c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005550:	d111      	bne.n	8005576 <SPI_EndRxTransaction+0x3a>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800555a:	d004      	beq.n	8005566 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005564:	d107      	bne.n	8005576 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005574:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	2180      	movs	r1, #128	@ 0x80
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff febd 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e023      	b.n	80055e4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055a4:	d11d      	bne.n	80055e2 <SPI_EndRxTransaction+0xa6>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ae:	d004      	beq.n	80055ba <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b8:	d113      	bne.n	80055e2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff ff22 	bl	8005410 <SPI_WaitFifoStateUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e000      	b.n	80055e4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff ff03 	bl	8005410 <SPI_WaitFifoStateUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e027      	b.n	8005670 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2200      	movs	r2, #0
 8005628:	2180      	movs	r1, #128	@ 0x80
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff fe68 	bl	8005300 <SPI_WaitFlagStateUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e014      	b.n	8005670 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2200      	movs	r2, #0
 800564e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff fedc 	bl	8005410 <SPI_WaitFifoStateUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e000      	b.n	8005670 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e049      	b.n	800571e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fd fb2c 	bl	8002cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 fcd8 	bl	800606c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e049      	b.n	80057cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f841 	bl	80057d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f000 fc81 	bl	800606c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_TIM_PWM_Start+0x24>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e03c      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d109      	bne.n	8005826 <HAL_TIM_PWM_Start+0x3e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e02f      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x58>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e022      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d109      	bne.n	800585a <HAL_TIM_PWM_Start+0x72>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e015      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b10      	cmp	r3, #16
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x8c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e008      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e097      	b.n	80059be <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xb6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800589c:	e023      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xc6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ac:	e01b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Start+0xd6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058bc:	e013      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Start+0xe6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058cc:	e00b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0xf6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058dc:	e003      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2201      	movs	r2, #1
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 ffea 	bl	80068c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a33      	ldr	r2, [pc, #204]	@ (80059c8 <HAL_TIM_PWM_Start+0x1e0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a32      	ldr	r2, [pc, #200]	@ (80059cc <HAL_TIM_PWM_Start+0x1e4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a30      	ldr	r2, [pc, #192]	@ (80059d0 <HAL_TIM_PWM_Start+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2f      	ldr	r2, [pc, #188]	@ (80059d4 <HAL_TIM_PWM_Start+0x1ec>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2d      	ldr	r2, [pc, #180]	@ (80059d8 <HAL_TIM_PWM_Start+0x1f0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_Start+0x142>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_TIM_PWM_Start+0x144>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800593e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a20      	ldr	r2, [pc, #128]	@ (80059c8 <HAL_TIM_PWM_Start+0x1e0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d018      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005952:	d013      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a20      	ldr	r2, [pc, #128]	@ (80059dc <HAL_TIM_PWM_Start+0x1f4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1f      	ldr	r2, [pc, #124]	@ (80059e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <HAL_TIM_PWM_Start+0x1e4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <HAL_TIM_PWM_Start+0x1e8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d115      	bne.n	80059a8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <HAL_TIM_PWM_Start+0x1fc>)
 8005984:	4013      	ands	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b06      	cmp	r3, #6
 800598c:	d015      	beq.n	80059ba <HAL_TIM_PWM_Start+0x1d2>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005994:	d011      	beq.n	80059ba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a6:	e008      	b.n	80059ba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e000      	b.n	80059bc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	00010007 	.word	0x00010007

080059e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e097      	b.n	8005b2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fd f9a5 	bl	8002d60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f000 fb15 	bl	800606c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a88:	f023 030c 	bic.w	r3, r3, #12
 8005a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	011a      	lsls	r2, r3, #4
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	031b      	lsls	r3, r3, #12
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	4313      	orrs	r3, r2
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d110      	bne.n	8005b86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d102      	bne.n	8005b70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b6a:	7b7b      	ldrb	r3, [r7, #13]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d001      	beq.n	8005b74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e069      	b.n	8005c48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b84:	e031      	b.n	8005bea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d110      	bne.n	8005bae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b8c:	7bbb      	ldrb	r3, [r7, #14]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d102      	bne.n	8005b98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b92:	7b3b      	ldrb	r3, [r7, #12]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d001      	beq.n	8005b9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e055      	b.n	8005c48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bac:	e01d      	b.n	8005bea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb4:	7bbb      	ldrb	r3, [r7, #14]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bba:	7b7b      	ldrb	r3, [r7, #13]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d102      	bne.n	8005bc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bc0:	7b3b      	ldrb	r3, [r7, #12]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d001      	beq.n	8005bca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e03e      	b.n	8005c48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_TIM_Encoder_Start+0xc4>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d008      	beq.n	8005c08 <HAL_TIM_Encoder_Start+0xd4>
 8005bf6:	e00f      	b.n	8005c18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fe61 	bl	80068c8 <TIM_CCxChannelCmd>
      break;
 8005c06:	e016      	b.n	8005c36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	2104      	movs	r1, #4
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fe59 	bl	80068c8 <TIM_CCxChannelCmd>
      break;
 8005c16:	e00e      	b.n	8005c36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fe51 	bl	80068c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	2104      	movs	r1, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fe4a 	bl	80068c8 <TIM_CCxChannelCmd>
      break;
 8005c34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e0ff      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b14      	cmp	r3, #20
 8005c7a:	f200 80f0 	bhi.w	8005e5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005e5f 	.word	0x08005e5f
 8005c8c:	08005e5f 	.word	0x08005e5f
 8005c90:	08005e5f 	.word	0x08005e5f
 8005c94:	08005d19 	.word	0x08005d19
 8005c98:	08005e5f 	.word	0x08005e5f
 8005c9c:	08005e5f 	.word	0x08005e5f
 8005ca0:	08005e5f 	.word	0x08005e5f
 8005ca4:	08005d5b 	.word	0x08005d5b
 8005ca8:	08005e5f 	.word	0x08005e5f
 8005cac:	08005e5f 	.word	0x08005e5f
 8005cb0:	08005e5f 	.word	0x08005e5f
 8005cb4:	08005d9b 	.word	0x08005d9b
 8005cb8:	08005e5f 	.word	0x08005e5f
 8005cbc:	08005e5f 	.word	0x08005e5f
 8005cc0:	08005e5f 	.word	0x08005e5f
 8005cc4:	08005ddd 	.word	0x08005ddd
 8005cc8:	08005e5f 	.word	0x08005e5f
 8005ccc:	08005e5f 	.word	0x08005e5f
 8005cd0:	08005e5f 	.word	0x08005e5f
 8005cd4:	08005e1d 	.word	0x08005e1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fa60 	bl	80061a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0208 	orr.w	r2, r2, #8
 8005cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	619a      	str	r2, [r3, #24]
      break;
 8005d16:	e0a5      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fad0 	bl	80062c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6999      	ldr	r1, [r3, #24]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]
      break;
 8005d58:	e084      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb39 	bl	80063d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0208 	orr.w	r2, r2, #8
 8005d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0204 	bic.w	r2, r2, #4
 8005d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]
      break;
 8005d98:	e064      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fba1 	bl	80064e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69d9      	ldr	r1, [r3, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	021a      	lsls	r2, r3, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	61da      	str	r2, [r3, #28]
      break;
 8005dda:	e043      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fc0a 	bl	80065fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0208 	orr.w	r2, r2, #8
 8005df6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0204 	bic.w	r2, r2, #4
 8005e06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e1a:	e023      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fc4e 	bl	80066c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005e5c:	e002      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
      break;
 8005e62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop

08005e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIM_ConfigClockSource+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e0de      	b.n	8006052 <HAL_TIM_ConfigClockSource+0x1da>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005eb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a63      	ldr	r2, [pc, #396]	@ (800605c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	f000 80a9 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ed4:	4a61      	ldr	r2, [pc, #388]	@ (800605c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	f200 80ae 	bhi.w	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005edc:	4a60      	ldr	r2, [pc, #384]	@ (8006060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	f000 80a1 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8006060 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	f200 80a6 	bhi.w	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005eec:	4a5d      	ldr	r2, [pc, #372]	@ (8006064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	f000 8099 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8006064 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	f200 809e 	bhi.w	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005efc:	4a5a      	ldr	r2, [pc, #360]	@ (8006068 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	f000 8091 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f04:	4a58      	ldr	r2, [pc, #352]	@ (8006068 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	f200 8096 	bhi.w	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f10:	f000 8089 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005f18:	f200 808e 	bhi.w	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f20:	d03e      	beq.n	8005fa0 <HAL_TIM_ConfigClockSource+0x128>
 8005f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f26:	f200 8087 	bhi.w	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2e:	f000 8086 	beq.w	800603e <HAL_TIM_ConfigClockSource+0x1c6>
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f36:	d87f      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f38:	2b70      	cmp	r3, #112	@ 0x70
 8005f3a:	d01a      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0xfa>
 8005f3c:	2b70      	cmp	r3, #112	@ 0x70
 8005f3e:	d87b      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f40:	2b60      	cmp	r3, #96	@ 0x60
 8005f42:	d050      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0x16e>
 8005f44:	2b60      	cmp	r3, #96	@ 0x60
 8005f46:	d877      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f48:	2b50      	cmp	r3, #80	@ 0x50
 8005f4a:	d03c      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x14e>
 8005f4c:	2b50      	cmp	r3, #80	@ 0x50
 8005f4e:	d873      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f50:	2b40      	cmp	r3, #64	@ 0x40
 8005f52:	d058      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x18e>
 8005f54:	2b40      	cmp	r3, #64	@ 0x40
 8005f56:	d86f      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f58:	2b30      	cmp	r3, #48	@ 0x30
 8005f5a:	d064      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f5c:	2b30      	cmp	r3, #48	@ 0x30
 8005f5e:	d86b      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d060      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d867      	bhi.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d05c      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d05a      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x1ae>
 8005f70:	e062      	b.n	8006038 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f82:	f000 fc81 	bl	8006888 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	609a      	str	r2, [r3, #8]
      break;
 8005f9e:	e04f      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fb0:	f000 fc6a 	bl	8006888 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fc2:	609a      	str	r2, [r3, #8]
      break;
 8005fc4:	e03c      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f000 fbdc 	bl	8006790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2150      	movs	r1, #80	@ 0x50
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fc35 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8005fe4:	e02c      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f000 fbfb 	bl	80067ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2160      	movs	r1, #96	@ 0x60
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fc25 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8006004:	e01c      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	461a      	mov	r2, r3
 8006014:	f000 fbbc 	bl	8006790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2140      	movs	r1, #64	@ 0x40
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fc15 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8006024:	e00c      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f000 fc0c 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8006036:	e003      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	73fb      	strb	r3, [r7, #15]
      break;
 800603c:	e000      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800603e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	00100070 	.word	0x00100070
 8006060:	00100040 	.word	0x00100040
 8006064:	00100030 	.word	0x00100030
 8006068:	00100020 	.word	0x00100020

0800606c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a42      	ldr	r2, [pc, #264]	@ (8006188 <TIM_Base_SetConfig+0x11c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00f      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608a:	d00b      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a3f      	ldr	r2, [pc, #252]	@ (800618c <TIM_Base_SetConfig+0x120>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a3e      	ldr	r2, [pc, #248]	@ (8006190 <TIM_Base_SetConfig+0x124>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0x38>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a3d      	ldr	r2, [pc, #244]	@ (8006194 <TIM_Base_SetConfig+0x128>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d108      	bne.n	80060b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a33      	ldr	r2, [pc, #204]	@ (8006188 <TIM_Base_SetConfig+0x11c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01b      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c4:	d017      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a30      	ldr	r2, [pc, #192]	@ (800618c <TIM_Base_SetConfig+0x120>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006190 <TIM_Base_SetConfig+0x124>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00f      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006194 <TIM_Base_SetConfig+0x128>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00b      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006198 <TIM_Base_SetConfig+0x12c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d007      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2c      	ldr	r2, [pc, #176]	@ (800619c <TIM_Base_SetConfig+0x130>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d003      	beq.n	80060f6 <TIM_Base_SetConfig+0x8a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2b      	ldr	r2, [pc, #172]	@ (80061a0 <TIM_Base_SetConfig+0x134>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d108      	bne.n	8006108 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a16      	ldr	r2, [pc, #88]	@ (8006188 <TIM_Base_SetConfig+0x11c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00f      	beq.n	8006154 <TIM_Base_SetConfig+0xe8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a17      	ldr	r2, [pc, #92]	@ (8006194 <TIM_Base_SetConfig+0x128>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00b      	beq.n	8006154 <TIM_Base_SetConfig+0xe8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a16      	ldr	r2, [pc, #88]	@ (8006198 <TIM_Base_SetConfig+0x12c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_Base_SetConfig+0xe8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a15      	ldr	r2, [pc, #84]	@ (800619c <TIM_Base_SetConfig+0x130>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_Base_SetConfig+0xe8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a14      	ldr	r2, [pc, #80]	@ (80061a0 <TIM_Base_SetConfig+0x134>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d103      	bne.n	800615c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	611a      	str	r2, [r3, #16]
  }
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40012c00 	.word	0x40012c00
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40013400 	.word	0x40013400
 8006198:	40014000 	.word	0x40014000
 800619c:	40014400 	.word	0x40014400
 80061a0:	40014800 	.word	0x40014800

080061a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f023 0201 	bic.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 0302 	bic.w	r3, r3, #2
 80061f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a2c      	ldr	r2, [pc, #176]	@ (80062b0 <TIM_OC1_SetConfig+0x10c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00f      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a2b      	ldr	r2, [pc, #172]	@ (80062b4 <TIM_OC1_SetConfig+0x110>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00b      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a2a      	ldr	r2, [pc, #168]	@ (80062b8 <TIM_OC1_SetConfig+0x114>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d007      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a29      	ldr	r2, [pc, #164]	@ (80062bc <TIM_OC1_SetConfig+0x118>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC1_SetConfig+0x80>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a28      	ldr	r2, [pc, #160]	@ (80062c0 <TIM_OC1_SetConfig+0x11c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10c      	bne.n	800623e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0308 	bic.w	r3, r3, #8
 800622a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f023 0304 	bic.w	r3, r3, #4
 800623c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1b      	ldr	r2, [pc, #108]	@ (80062b0 <TIM_OC1_SetConfig+0x10c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00f      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a1a      	ldr	r2, [pc, #104]	@ (80062b4 <TIM_OC1_SetConfig+0x110>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00b      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a19      	ldr	r2, [pc, #100]	@ (80062b8 <TIM_OC1_SetConfig+0x114>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a18      	ldr	r2, [pc, #96]	@ (80062bc <TIM_OC1_SetConfig+0x118>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_OC1_SetConfig+0xc2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a17      	ldr	r2, [pc, #92]	@ (80062c0 <TIM_OC1_SetConfig+0x11c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d111      	bne.n	800628a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800626c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40013400 	.word	0x40013400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800

080062c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f023 0210 	bic.w	r2, r3, #16
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0320 	bic.w	r3, r3, #32
 8006312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a28      	ldr	r2, [pc, #160]	@ (80063c4 <TIM_OC2_SetConfig+0x100>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_OC2_SetConfig+0x6c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a27      	ldr	r2, [pc, #156]	@ (80063c8 <TIM_OC2_SetConfig+0x104>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10d      	bne.n	800634c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800634a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a1d      	ldr	r2, [pc, #116]	@ (80063c4 <TIM_OC2_SetConfig+0x100>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00f      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a1c      	ldr	r2, [pc, #112]	@ (80063c8 <TIM_OC2_SetConfig+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00b      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a1b      	ldr	r2, [pc, #108]	@ (80063cc <TIM_OC2_SetConfig+0x108>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d007      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a1a      	ldr	r2, [pc, #104]	@ (80063d0 <TIM_OC2_SetConfig+0x10c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC2_SetConfig+0xb0>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a19      	ldr	r2, [pc, #100]	@ (80063d4 <TIM_OC2_SetConfig+0x110>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d113      	bne.n	800639c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800637a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40013400 	.word	0x40013400
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400
 80063d4:	40014800 	.word	0x40014800

080063d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0303 	bic.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a27      	ldr	r2, [pc, #156]	@ (80064d4 <TIM_OC3_SetConfig+0xfc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d003      	beq.n	8006442 <TIM_OC3_SetConfig+0x6a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a26      	ldr	r2, [pc, #152]	@ (80064d8 <TIM_OC3_SetConfig+0x100>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d10d      	bne.n	800645e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800645c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <TIM_OC3_SetConfig+0xfc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00f      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <TIM_OC3_SetConfig+0x100>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a1a      	ldr	r2, [pc, #104]	@ (80064dc <TIM_OC3_SetConfig+0x104>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a19      	ldr	r2, [pc, #100]	@ (80064e0 <TIM_OC3_SetConfig+0x108>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_OC3_SetConfig+0xae>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <TIM_OC3_SetConfig+0x10c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d113      	bne.n	80064ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800648c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	621a      	str	r2, [r3, #32]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40013400 	.word	0x40013400
 80064dc:	40014000 	.word	0x40014000
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800

080064e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	031b      	lsls	r3, r3, #12
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a28      	ldr	r2, [pc, #160]	@ (80065e8 <TIM_OC4_SetConfig+0x100>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC4_SetConfig+0x6c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a27      	ldr	r2, [pc, #156]	@ (80065ec <TIM_OC4_SetConfig+0x104>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10d      	bne.n	8006570 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	031b      	lsls	r3, r3, #12
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800656e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <TIM_OC4_SetConfig+0x100>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00f      	beq.n	8006598 <TIM_OC4_SetConfig+0xb0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a1c      	ldr	r2, [pc, #112]	@ (80065ec <TIM_OC4_SetConfig+0x104>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00b      	beq.n	8006598 <TIM_OC4_SetConfig+0xb0>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1b      	ldr	r2, [pc, #108]	@ (80065f0 <TIM_OC4_SetConfig+0x108>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d007      	beq.n	8006598 <TIM_OC4_SetConfig+0xb0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a1a      	ldr	r2, [pc, #104]	@ (80065f4 <TIM_OC4_SetConfig+0x10c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC4_SetConfig+0xb0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <TIM_OC4_SetConfig+0x110>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d113      	bne.n	80065c0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800659e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	019b      	lsls	r3, r3, #6
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800

080065fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800662a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a17      	ldr	r2, [pc, #92]	@ (80066b0 <TIM_OC5_SetConfig+0xb4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00f      	beq.n	8006676 <TIM_OC5_SetConfig+0x7a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a16      	ldr	r2, [pc, #88]	@ (80066b4 <TIM_OC5_SetConfig+0xb8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00b      	beq.n	8006676 <TIM_OC5_SetConfig+0x7a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a15      	ldr	r2, [pc, #84]	@ (80066b8 <TIM_OC5_SetConfig+0xbc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <TIM_OC5_SetConfig+0x7a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a14      	ldr	r2, [pc, #80]	@ (80066bc <TIM_OC5_SetConfig+0xc0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <TIM_OC5_SetConfig+0x7a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a13      	ldr	r2, [pc, #76]	@ (80066c0 <TIM_OC5_SetConfig+0xc4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d109      	bne.n	800668a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800667c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40013400 	.word	0x40013400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	40014400 	.word	0x40014400
 80066c0:	40014800 	.word	0x40014800

080066c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800670a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	051b      	lsls	r3, r3, #20
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a18      	ldr	r2, [pc, #96]	@ (800677c <TIM_OC6_SetConfig+0xb8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00f      	beq.n	8006740 <TIM_OC6_SetConfig+0x7c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a17      	ldr	r2, [pc, #92]	@ (8006780 <TIM_OC6_SetConfig+0xbc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_OC6_SetConfig+0x7c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a16      	ldr	r2, [pc, #88]	@ (8006784 <TIM_OC6_SetConfig+0xc0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_OC6_SetConfig+0x7c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <TIM_OC6_SetConfig+0xc4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC6_SetConfig+0x7c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a14      	ldr	r2, [pc, #80]	@ (800678c <TIM_OC6_SetConfig+0xc8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d109      	bne.n	8006754 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f023 0201 	bic.w	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 030a 	bic.w	r3, r3, #10
 80067cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	f023 0210 	bic.w	r2, r3, #16
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	031b      	lsls	r3, r3, #12
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800682a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	f043 0307 	orr.w	r3, r3, #7
 8006874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	609a      	str	r2, [r3, #8]
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	021a      	lsls	r2, r3, #8
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	609a      	str	r2, [r3, #8]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2201      	movs	r2, #1
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1a      	ldr	r2, [r3, #32]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	401a      	ands	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
	...

08006914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006928:	2302      	movs	r3, #2
 800692a:	e065      	b.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a2c      	ldr	r2, [pc, #176]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a2b      	ldr	r2, [pc, #172]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d108      	bne.n	8006972 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006966:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1b      	ldr	r2, [pc, #108]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d018      	beq.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a2:	d013      	beq.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a18      	ldr	r2, [pc, #96]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00e      	beq.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a17      	ldr	r2, [pc, #92]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d009      	beq.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a12      	ldr	r2, [pc, #72]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a13      	ldr	r2, [pc, #76]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d10c      	bne.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40013400 	.word	0x40013400
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40014000 	.word	0x40014000

08006a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e073      	b.n	8006b1c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a19      	ldr	r2, [pc, #100]	@ (8006b28 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a18      	ldr	r2, [pc, #96]	@ (8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d11c      	bne.n	8006b0a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	051b      	lsls	r3, r3, #20
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40013400 	.word	0x40013400

08006b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e042      	b.n	8006bc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fc f9d1 	bl	8002efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2224      	movs	r2, #36	@ 0x24
 8006b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fb82 	bl	8007284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f8b3 	bl	8006cec <UART_SetConfig>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e01b      	b.n	8006bc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fc01 	bl	80073c8 <UART_CheckIdleState>
 8006bc6:	4603      	mov	r3, r0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08a      	sub	sp, #40	@ 0x28
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d17b      	bne.n	8006ce2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_UART_Transmit+0x26>
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e074      	b.n	8006ce4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2221      	movs	r2, #33	@ 0x21
 8006c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c0a:	f7fc fb83 	bl	8003314 <HAL_GetTick>
 8006c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	88fa      	ldrh	r2, [r7, #6]
 8006c14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	88fa      	ldrh	r2, [r7, #6]
 8006c1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c28:	d108      	bne.n	8006c3c <HAL_UART_Transmit+0x6c>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e003      	b.n	8006c44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c44:	e030      	b.n	8006ca8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2180      	movs	r1, #128	@ 0x80
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fc63 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e03d      	b.n	8006ce4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10b      	bne.n	8006c86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	3302      	adds	r3, #2
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e007      	b.n	8006c96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	781a      	ldrb	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3301      	adds	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1c8      	bne.n	8006c46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2140      	movs	r1, #64	@ 0x40
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fc2c 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e006      	b.n	8006ce4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e000      	b.n	8006ce4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ce2:	2302      	movs	r3, #2
  }
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf0:	b08c      	sub	sp, #48	@ 0x30
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4bab      	ldr	r3, [pc, #684]	@ (8006fc8 <UART_SetConfig+0x2dc>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d24:	430b      	orrs	r3, r1
 8006d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4aa0      	ldr	r2, [pc, #640]	@ (8006fcc <UART_SetConfig+0x2e0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d54:	4313      	orrs	r3, r2
 8006d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	f023 010f 	bic.w	r1, r3, #15
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a91      	ldr	r2, [pc, #580]	@ (8006fd0 <UART_SetConfig+0x2e4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d125      	bne.n	8006ddc <UART_SetConfig+0xf0>
 8006d90:	4b90      	ldr	r3, [pc, #576]	@ (8006fd4 <UART_SetConfig+0x2e8>)
 8006d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d81a      	bhi.n	8006dd4 <UART_SetConfig+0xe8>
 8006d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <UART_SetConfig+0xb8>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dc5 	.word	0x08006dc5
 8006dac:	08006dbd 	.word	0x08006dbd
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dba:	e0d6      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc2:	e0d2      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006dc4:	2304      	movs	r3, #4
 8006dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dca:	e0ce      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd2:	e0ca      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dda:	e0c6      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a7d      	ldr	r2, [pc, #500]	@ (8006fd8 <UART_SetConfig+0x2ec>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d138      	bne.n	8006e58 <UART_SetConfig+0x16c>
 8006de6:	4b7b      	ldr	r3, [pc, #492]	@ (8006fd4 <UART_SetConfig+0x2e8>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	2b0c      	cmp	r3, #12
 8006df2:	d82d      	bhi.n	8006e50 <UART_SetConfig+0x164>
 8006df4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dfc <UART_SetConfig+0x110>)
 8006df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfa:	bf00      	nop
 8006dfc:	08006e31 	.word	0x08006e31
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08006e51 	.word	0x08006e51
 8006e08:	08006e51 	.word	0x08006e51
 8006e0c:	08006e41 	.word	0x08006e41
 8006e10:	08006e51 	.word	0x08006e51
 8006e14:	08006e51 	.word	0x08006e51
 8006e18:	08006e51 	.word	0x08006e51
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e49 	.word	0x08006e49
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e36:	e098      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3e:	e094      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e46:	e090      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4e:	e08c      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e56:	e088      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a5f      	ldr	r2, [pc, #380]	@ (8006fdc <UART_SetConfig+0x2f0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d125      	bne.n	8006eae <UART_SetConfig+0x1c2>
 8006e62:	4b5c      	ldr	r3, [pc, #368]	@ (8006fd4 <UART_SetConfig+0x2e8>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e6c:	2b30      	cmp	r3, #48	@ 0x30
 8006e6e:	d016      	beq.n	8006e9e <UART_SetConfig+0x1b2>
 8006e70:	2b30      	cmp	r3, #48	@ 0x30
 8006e72:	d818      	bhi.n	8006ea6 <UART_SetConfig+0x1ba>
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	d00a      	beq.n	8006e8e <UART_SetConfig+0x1a2>
 8006e78:	2b20      	cmp	r3, #32
 8006e7a:	d814      	bhi.n	8006ea6 <UART_SetConfig+0x1ba>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <UART_SetConfig+0x19a>
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d008      	beq.n	8006e96 <UART_SetConfig+0x1aa>
 8006e84:	e00f      	b.n	8006ea6 <UART_SetConfig+0x1ba>
 8006e86:	2300      	movs	r3, #0
 8006e88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8c:	e06d      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e94:	e069      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e96:	2304      	movs	r3, #4
 8006e98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9c:	e065      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006e9e:	2308      	movs	r3, #8
 8006ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea4:	e061      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006ea6:	2310      	movs	r3, #16
 8006ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eac:	e05d      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8006fe0 <UART_SetConfig+0x2f4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d125      	bne.n	8006f04 <UART_SetConfig+0x218>
 8006eb8:	4b46      	ldr	r3, [pc, #280]	@ (8006fd4 <UART_SetConfig+0x2e8>)
 8006eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ec4:	d016      	beq.n	8006ef4 <UART_SetConfig+0x208>
 8006ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ec8:	d818      	bhi.n	8006efc <UART_SetConfig+0x210>
 8006eca:	2b80      	cmp	r3, #128	@ 0x80
 8006ecc:	d00a      	beq.n	8006ee4 <UART_SetConfig+0x1f8>
 8006ece:	2b80      	cmp	r3, #128	@ 0x80
 8006ed0:	d814      	bhi.n	8006efc <UART_SetConfig+0x210>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <UART_SetConfig+0x1f0>
 8006ed6:	2b40      	cmp	r3, #64	@ 0x40
 8006ed8:	d008      	beq.n	8006eec <UART_SetConfig+0x200>
 8006eda:	e00f      	b.n	8006efc <UART_SetConfig+0x210>
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee2:	e042      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eea:	e03e      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef2:	e03a      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efa:	e036      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e032      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a30      	ldr	r2, [pc, #192]	@ (8006fcc <UART_SetConfig+0x2e0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d12a      	bne.n	8006f64 <UART_SetConfig+0x278>
 8006f0e:	4b31      	ldr	r3, [pc, #196]	@ (8006fd4 <UART_SetConfig+0x2e8>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f1c:	d01a      	beq.n	8006f54 <UART_SetConfig+0x268>
 8006f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f22:	d81b      	bhi.n	8006f5c <UART_SetConfig+0x270>
 8006f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f28:	d00c      	beq.n	8006f44 <UART_SetConfig+0x258>
 8006f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f2e:	d815      	bhi.n	8006f5c <UART_SetConfig+0x270>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <UART_SetConfig+0x250>
 8006f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f38:	d008      	beq.n	8006f4c <UART_SetConfig+0x260>
 8006f3a:	e00f      	b.n	8006f5c <UART_SetConfig+0x270>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f42:	e012      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006f44:	2302      	movs	r3, #2
 8006f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4a:	e00e      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f52:	e00a      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006f54:	2308      	movs	r3, #8
 8006f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f5a:	e006      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f62:	e002      	b.n	8006f6a <UART_SetConfig+0x27e>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	@ (8006fcc <UART_SetConfig+0x2e0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	f040 80a8 	bne.w	80070c6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d834      	bhi.n	8006fe8 <UART_SetConfig+0x2fc>
 8006f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f84 <UART_SetConfig+0x298>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fe9 	.word	0x08006fe9
 8006f8c:	08006fb1 	.word	0x08006fb1
 8006f90:	08006fe9 	.word	0x08006fe9
 8006f94:	08006fb7 	.word	0x08006fb7
 8006f98:	08006fe9 	.word	0x08006fe9
 8006f9c:	08006fe9 	.word	0x08006fe9
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fd f9d0 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8006fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fae:	e021      	b.n	8006ff4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <UART_SetConfig+0x2f8>)
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fb4:	e01e      	b.n	8006ff4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fd f95b 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 8006fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fbc:	e01a      	b.n	8006ff4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fc4:	e016      	b.n	8006ff4 <UART_SetConfig+0x308>
 8006fc6:	bf00      	nop
 8006fc8:	cfff69f3 	.word	0xcfff69f3
 8006fcc:	40008000 	.word	0x40008000
 8006fd0:	40013800 	.word	0x40013800
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40004400 	.word	0x40004400
 8006fdc:	40004800 	.word	0x40004800
 8006fe0:	40004c00 	.word	0x40004c00
 8006fe4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ff2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 812a 	beq.w	8007250 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	4a9e      	ldr	r2, [pc, #632]	@ (800727c <UART_SetConfig+0x590>)
 8007002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007006:	461a      	mov	r2, r3
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	fbb3 f3f2 	udiv	r3, r3, r2
 800700e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	4413      	add	r3, r2
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	429a      	cmp	r2, r3
 800701e:	d305      	bcc.n	800702c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	429a      	cmp	r2, r3
 800702a:	d903      	bls.n	8007034 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007032:	e10d      	b.n	8007250 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	2200      	movs	r2, #0
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	60fa      	str	r2, [r7, #12]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	4a8e      	ldr	r2, [pc, #568]	@ (800727c <UART_SetConfig+0x590>)
 8007042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007046:	b29b      	uxth	r3, r3
 8007048:	2200      	movs	r2, #0
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007056:	f7f9 fe3f 	bl	8000cd8 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4610      	mov	r0, r2
 8007060:	4619      	mov	r1, r3
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	020b      	lsls	r3, r1, #8
 800706c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007070:	0202      	lsls	r2, r0, #8
 8007072:	6979      	ldr	r1, [r7, #20]
 8007074:	6849      	ldr	r1, [r1, #4]
 8007076:	0849      	lsrs	r1, r1, #1
 8007078:	2000      	movs	r0, #0
 800707a:	460c      	mov	r4, r1
 800707c:	4605      	mov	r5, r0
 800707e:	eb12 0804 	adds.w	r8, r2, r4
 8007082:	eb43 0905 	adc.w	r9, r3, r5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	469a      	mov	sl, r3
 800708e:	4693      	mov	fp, r2
 8007090:	4652      	mov	r2, sl
 8007092:	465b      	mov	r3, fp
 8007094:	4640      	mov	r0, r8
 8007096:	4649      	mov	r1, r9
 8007098:	f7f9 fe1e 	bl	8000cd8 <__aeabi_uldivmod>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4613      	mov	r3, r2
 80070a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070aa:	d308      	bcc.n	80070be <UART_SetConfig+0x3d2>
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070b2:	d204      	bcs.n	80070be <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6a3a      	ldr	r2, [r7, #32]
 80070ba:	60da      	str	r2, [r3, #12]
 80070bc:	e0c8      	b.n	8007250 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070c4:	e0c4      	b.n	8007250 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ce:	d167      	bne.n	80071a0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80070d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d828      	bhi.n	800712a <UART_SetConfig+0x43e>
 80070d8:	a201      	add	r2, pc, #4	@ (adr r2, 80070e0 <UART_SetConfig+0x3f4>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	08007105 	.word	0x08007105
 80070e4:	0800710d 	.word	0x0800710d
 80070e8:	08007115 	.word	0x08007115
 80070ec:	0800712b 	.word	0x0800712b
 80070f0:	0800711b 	.word	0x0800711b
 80070f4:	0800712b 	.word	0x0800712b
 80070f8:	0800712b 	.word	0x0800712b
 80070fc:	0800712b 	.word	0x0800712b
 8007100:	08007123 	.word	0x08007123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007104:	f7fd f922 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8007108:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800710a:	e014      	b.n	8007136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800710c:	f7fd f934 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 8007110:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007112:	e010      	b.n	8007136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007114:	4b5a      	ldr	r3, [pc, #360]	@ (8007280 <UART_SetConfig+0x594>)
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007118:	e00d      	b.n	8007136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800711a:	f7fd f8a9 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 800711e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007120:	e009      	b.n	8007136 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007128:	e005      	b.n	8007136 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 8089 	beq.w	8007250 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007142:	4a4e      	ldr	r2, [pc, #312]	@ (800727c <UART_SetConfig+0x590>)
 8007144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007148:	461a      	mov	r2, r3
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007150:	005a      	lsls	r2, r3, #1
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	441a      	add	r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	d916      	bls.n	8007198 <UART_SetConfig+0x4ac>
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007170:	d212      	bcs.n	8007198 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f023 030f 	bic.w	r3, r3, #15
 800717a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	085b      	lsrs	r3, r3, #1
 8007180:	b29b      	uxth	r3, r3
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	b29a      	uxth	r2, r3
 8007188:	8bfb      	ldrh	r3, [r7, #30]
 800718a:	4313      	orrs	r3, r2
 800718c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	8bfa      	ldrh	r2, [r7, #30]
 8007194:	60da      	str	r2, [r3, #12]
 8007196:	e05b      	b.n	8007250 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800719e:	e057      	b.n	8007250 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d828      	bhi.n	80071fa <UART_SetConfig+0x50e>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <UART_SetConfig+0x4c4>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	080071fb 	.word	0x080071fb
 80071c0:	080071eb 	.word	0x080071eb
 80071c4:	080071fb 	.word	0x080071fb
 80071c8:	080071fb 	.word	0x080071fb
 80071cc:	080071fb 	.word	0x080071fb
 80071d0:	080071f3 	.word	0x080071f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d4:	f7fd f8ba 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 80071d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071da:	e014      	b.n	8007206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071dc:	f7fd f8cc 	bl	8004378 <HAL_RCC_GetPCLK2Freq>
 80071e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071e2:	e010      	b.n	8007206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071e4:	4b26      	ldr	r3, [pc, #152]	@ (8007280 <UART_SetConfig+0x594>)
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071e8:	e00d      	b.n	8007206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ea:	f7fd f841 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 80071ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071f0:	e009      	b.n	8007206 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071f8:	e005      	b.n	8007206 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007204:	bf00      	nop
    }

    if (pclk != 0U)
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	2b00      	cmp	r3, #0
 800720a:	d021      	beq.n	8007250 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007210:	4a1a      	ldr	r2, [pc, #104]	@ (800727c <UART_SetConfig+0x590>)
 8007212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007216:	461a      	mov	r2, r3
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	fbb3 f2f2 	udiv	r2, r3, r2
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	441a      	add	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	2b0f      	cmp	r3, #15
 8007234:	d909      	bls.n	800724a <UART_SetConfig+0x55e>
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800723c:	d205      	bcs.n	800724a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	b29a      	uxth	r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60da      	str	r2, [r3, #12]
 8007248:	e002      	b.n	8007250 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2201      	movs	r2, #1
 8007254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2201      	movs	r2, #1
 800725c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2200      	movs	r2, #0
 8007264:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2200      	movs	r2, #0
 800726a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800726c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007270:	4618      	mov	r0, r3
 8007272:	3730      	adds	r7, #48	@ 0x30
 8007274:	46bd      	mov	sp, r7
 8007276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800727a:	bf00      	nop
 800727c:	0800c1c0 	.word	0x0800c1c0
 8007280:	00f42400 	.word	0x00f42400

08007284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01a      	beq.n	800739a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800737e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007382:	d10a      	bne.n	800739a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b098      	sub	sp, #96	@ 0x60
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073d8:	f7fb ff9c 	bl	8003314 <HAL_GetTick>
 80073dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d12f      	bne.n	800744c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f4:	2200      	movs	r2, #0
 80073f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f88e 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d022      	beq.n	800744c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800741a:	653b      	str	r3, [r7, #80]	@ 0x50
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007424:	647b      	str	r3, [r7, #68]	@ 0x44
 8007426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800742a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e6      	bne.n	8007406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e063      	b.n	8007514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b04      	cmp	r3, #4
 8007458:	d149      	bne.n	80074ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800745a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007462:	2200      	movs	r2, #0
 8007464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f857 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d03c      	beq.n	80074ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	623b      	str	r3, [r7, #32]
   return(result);
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007492:	633b      	str	r3, [r7, #48]	@ 0x30
 8007494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074c6:	61fa      	str	r2, [r7, #28]
 80074c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	69b9      	ldr	r1, [r7, #24]
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	617b      	str	r3, [r7, #20]
   return(result);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e012      	b.n	8007514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3758      	adds	r7, #88	@ 0x58
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752c:	e04f      	b.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007534:	d04b      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7fb feed 	bl	8003314 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <UART_WaitOnFlagUntilTimeout+0x30>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e04e      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d037      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b80      	cmp	r3, #128	@ 0x80
 8007562:	d034      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d031      	beq.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d110      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2208      	movs	r2, #8
 800757e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f838 	bl	80075f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2208      	movs	r2, #8
 800758a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e029      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075a8:	d111      	bne.n	80075ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f81e 	bl	80075f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e00f      	b.n	80075ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	bf0c      	ite	eq
 80075de:	2301      	moveq	r3, #1
 80075e0:	2300      	movne	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d0a0      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b095      	sub	sp, #84	@ 0x54
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800761c:	643b      	str	r3, [r7, #64]	@ 0x40
 800761e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800762a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e6      	bne.n	80075fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007646:	f023 0301 	bic.w	r3, r3, #1
 800764a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007654:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800765a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e3      	bne.n	8007630 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800766c:	2b01      	cmp	r3, #1
 800766e:	d118      	bne.n	80076a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	60bb      	str	r3, [r7, #8]
   return(result);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f023 0310 	bic.w	r3, r3, #16
 8007684:	647b      	str	r3, [r7, #68]	@ 0x44
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	613b      	str	r3, [r7, #16]
   return(result);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076b6:	bf00      	nop
 80076b8:	3754      	adds	r7, #84	@ 0x54
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e027      	b.n	8007728 <HAL_UARTEx_DisableFifoMode+0x66>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2224      	movs	r2, #36	@ 0x24
 80076e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007706:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007748:	2302      	movs	r3, #2
 800774a:	e02d      	b.n	80077a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2224      	movs	r2, #36	@ 0x24
 8007758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0201 	bic.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f84f 	bl	800782c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e02d      	b.n	8007824 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2224      	movs	r2, #36	@ 0x24
 80077d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0201 	bic.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f811 	bl	800782c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007838:	2b00      	cmp	r3, #0
 800783a:	d108      	bne.n	800784e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800784c:	e031      	b.n	80078b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800784e:	2308      	movs	r3, #8
 8007850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007852:	2308      	movs	r3, #8
 8007854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	0e5b      	lsrs	r3, r3, #25
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	0f5b      	lsrs	r3, r3, #29
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	7b3a      	ldrb	r2, [r7, #12]
 800787a:	4911      	ldr	r1, [pc, #68]	@ (80078c0 <UARTEx_SetNbDataToProcess+0x94>)
 800787c:	5c8a      	ldrb	r2, [r1, r2]
 800787e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007882:	7b3a      	ldrb	r2, [r7, #12]
 8007884:	490f      	ldr	r1, [pc, #60]	@ (80078c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007888:	fb93 f3f2 	sdiv	r3, r3, r2
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	7b7a      	ldrb	r2, [r7, #13]
 8007898:	4909      	ldr	r1, [pc, #36]	@ (80078c0 <UARTEx_SetNbDataToProcess+0x94>)
 800789a:	5c8a      	ldrb	r2, [r1, r2]
 800789c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078a0:	7b7a      	ldrb	r2, [r7, #13]
 80078a2:	4908      	ldr	r1, [pc, #32]	@ (80078c4 <UARTEx_SetNbDataToProcess+0x98>)
 80078a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80078b2:	bf00      	nop
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	0800c1d8 	.word	0x0800c1d8
 80078c4:	0800c1e0 	.word	0x0800c1e0

080078c8 <__cvt>:
 80078c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	ec57 6b10 	vmov	r6, r7, d0
 80078d0:	2f00      	cmp	r7, #0
 80078d2:	460c      	mov	r4, r1
 80078d4:	4619      	mov	r1, r3
 80078d6:	463b      	mov	r3, r7
 80078d8:	bfbb      	ittet	lt
 80078da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80078de:	461f      	movlt	r7, r3
 80078e0:	2300      	movge	r3, #0
 80078e2:	232d      	movlt	r3, #45	@ 0x2d
 80078e4:	700b      	strb	r3, [r1, #0]
 80078e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80078ec:	4691      	mov	r9, r2
 80078ee:	f023 0820 	bic.w	r8, r3, #32
 80078f2:	bfbc      	itt	lt
 80078f4:	4632      	movlt	r2, r6
 80078f6:	4616      	movlt	r6, r2
 80078f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078fc:	d005      	beq.n	800790a <__cvt+0x42>
 80078fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007902:	d100      	bne.n	8007906 <__cvt+0x3e>
 8007904:	3401      	adds	r4, #1
 8007906:	2102      	movs	r1, #2
 8007908:	e000      	b.n	800790c <__cvt+0x44>
 800790a:	2103      	movs	r1, #3
 800790c:	ab03      	add	r3, sp, #12
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	ab02      	add	r3, sp, #8
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	ec47 6b10 	vmov	d0, r6, r7
 8007918:	4653      	mov	r3, sl
 800791a:	4622      	mov	r2, r4
 800791c:	f001 f8a8 	bl	8008a70 <_dtoa_r>
 8007920:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007924:	4605      	mov	r5, r0
 8007926:	d119      	bne.n	800795c <__cvt+0x94>
 8007928:	f019 0f01 	tst.w	r9, #1
 800792c:	d00e      	beq.n	800794c <__cvt+0x84>
 800792e:	eb00 0904 	add.w	r9, r0, r4
 8007932:	2200      	movs	r2, #0
 8007934:	2300      	movs	r3, #0
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	f7f9 f8ed 	bl	8000b18 <__aeabi_dcmpeq>
 800793e:	b108      	cbz	r0, 8007944 <__cvt+0x7c>
 8007940:	f8cd 900c 	str.w	r9, [sp, #12]
 8007944:	2230      	movs	r2, #48	@ 0x30
 8007946:	9b03      	ldr	r3, [sp, #12]
 8007948:	454b      	cmp	r3, r9
 800794a:	d31e      	bcc.n	800798a <__cvt+0xc2>
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007950:	1b5b      	subs	r3, r3, r5
 8007952:	4628      	mov	r0, r5
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	b004      	add	sp, #16
 8007958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800795c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007960:	eb00 0904 	add.w	r9, r0, r4
 8007964:	d1e5      	bne.n	8007932 <__cvt+0x6a>
 8007966:	7803      	ldrb	r3, [r0, #0]
 8007968:	2b30      	cmp	r3, #48	@ 0x30
 800796a:	d10a      	bne.n	8007982 <__cvt+0xba>
 800796c:	2200      	movs	r2, #0
 800796e:	2300      	movs	r3, #0
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f9 f8d0 	bl	8000b18 <__aeabi_dcmpeq>
 8007978:	b918      	cbnz	r0, 8007982 <__cvt+0xba>
 800797a:	f1c4 0401 	rsb	r4, r4, #1
 800797e:	f8ca 4000 	str.w	r4, [sl]
 8007982:	f8da 3000 	ldr.w	r3, [sl]
 8007986:	4499      	add	r9, r3
 8007988:	e7d3      	b.n	8007932 <__cvt+0x6a>
 800798a:	1c59      	adds	r1, r3, #1
 800798c:	9103      	str	r1, [sp, #12]
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	e7d9      	b.n	8007946 <__cvt+0x7e>

08007992 <__exponent>:
 8007992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007994:	2900      	cmp	r1, #0
 8007996:	bfba      	itte	lt
 8007998:	4249      	neglt	r1, r1
 800799a:	232d      	movlt	r3, #45	@ 0x2d
 800799c:	232b      	movge	r3, #43	@ 0x2b
 800799e:	2909      	cmp	r1, #9
 80079a0:	7002      	strb	r2, [r0, #0]
 80079a2:	7043      	strb	r3, [r0, #1]
 80079a4:	dd29      	ble.n	80079fa <__exponent+0x68>
 80079a6:	f10d 0307 	add.w	r3, sp, #7
 80079aa:	461d      	mov	r5, r3
 80079ac:	270a      	movs	r7, #10
 80079ae:	461a      	mov	r2, r3
 80079b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80079b4:	fb07 1416 	mls	r4, r7, r6, r1
 80079b8:	3430      	adds	r4, #48	@ 0x30
 80079ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80079be:	460c      	mov	r4, r1
 80079c0:	2c63      	cmp	r4, #99	@ 0x63
 80079c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80079c6:	4631      	mov	r1, r6
 80079c8:	dcf1      	bgt.n	80079ae <__exponent+0x1c>
 80079ca:	3130      	adds	r1, #48	@ 0x30
 80079cc:	1e94      	subs	r4, r2, #2
 80079ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079d2:	1c41      	adds	r1, r0, #1
 80079d4:	4623      	mov	r3, r4
 80079d6:	42ab      	cmp	r3, r5
 80079d8:	d30a      	bcc.n	80079f0 <__exponent+0x5e>
 80079da:	f10d 0309 	add.w	r3, sp, #9
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	42ac      	cmp	r4, r5
 80079e2:	bf88      	it	hi
 80079e4:	2300      	movhi	r3, #0
 80079e6:	3302      	adds	r3, #2
 80079e8:	4403      	add	r3, r0
 80079ea:	1a18      	subs	r0, r3, r0
 80079ec:	b003      	add	sp, #12
 80079ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80079f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80079f8:	e7ed      	b.n	80079d6 <__exponent+0x44>
 80079fa:	2330      	movs	r3, #48	@ 0x30
 80079fc:	3130      	adds	r1, #48	@ 0x30
 80079fe:	7083      	strb	r3, [r0, #2]
 8007a00:	70c1      	strb	r1, [r0, #3]
 8007a02:	1d03      	adds	r3, r0, #4
 8007a04:	e7f1      	b.n	80079ea <__exponent+0x58>
	...

08007a08 <_printf_float>:
 8007a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0c:	b08d      	sub	sp, #52	@ 0x34
 8007a0e:	460c      	mov	r4, r1
 8007a10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a14:	4616      	mov	r6, r2
 8007a16:	461f      	mov	r7, r3
 8007a18:	4605      	mov	r5, r0
 8007a1a:	f000 ff23 	bl	8008864 <_localeconv_r>
 8007a1e:	6803      	ldr	r3, [r0, #0]
 8007a20:	9304      	str	r3, [sp, #16]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7f8 fc4c 	bl	80002c0 <strlen>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a30:	9005      	str	r0, [sp, #20]
 8007a32:	3307      	adds	r3, #7
 8007a34:	f023 0307 	bic.w	r3, r3, #7
 8007a38:	f103 0208 	add.w	r2, r3, #8
 8007a3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a40:	f8d4 b000 	ldr.w	fp, [r4]
 8007a44:	f8c8 2000 	str.w	r2, [r8]
 8007a48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a50:	9307      	str	r3, [sp, #28]
 8007a52:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a5e:	4b9c      	ldr	r3, [pc, #624]	@ (8007cd0 <_printf_float+0x2c8>)
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a64:	f7f9 f88a 	bl	8000b7c <__aeabi_dcmpun>
 8007a68:	bb70      	cbnz	r0, 8007ac8 <_printf_float+0xc0>
 8007a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a6e:	4b98      	ldr	r3, [pc, #608]	@ (8007cd0 <_printf_float+0x2c8>)
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a74:	f7f9 f864 	bl	8000b40 <__aeabi_dcmple>
 8007a78:	bb30      	cbnz	r0, 8007ac8 <_printf_float+0xc0>
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4649      	mov	r1, r9
 8007a82:	f7f9 f853 	bl	8000b2c <__aeabi_dcmplt>
 8007a86:	b110      	cbz	r0, 8007a8e <_printf_float+0x86>
 8007a88:	232d      	movs	r3, #45	@ 0x2d
 8007a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a8e:	4a91      	ldr	r2, [pc, #580]	@ (8007cd4 <_printf_float+0x2cc>)
 8007a90:	4b91      	ldr	r3, [pc, #580]	@ (8007cd8 <_printf_float+0x2d0>)
 8007a92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a96:	bf94      	ite	ls
 8007a98:	4690      	movls	r8, r2
 8007a9a:	4698      	movhi	r8, r3
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	f02b 0304 	bic.w	r3, fp, #4
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	f04f 0900 	mov.w	r9, #0
 8007aaa:	9700      	str	r7, [sp, #0]
 8007aac:	4633      	mov	r3, r6
 8007aae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 f9d2 	bl	8007e5c <_printf_common>
 8007ab8:	3001      	adds	r0, #1
 8007aba:	f040 808d 	bne.w	8007bd8 <_printf_float+0x1d0>
 8007abe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ac2:	b00d      	add	sp, #52	@ 0x34
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f9 f854 	bl	8000b7c <__aeabi_dcmpun>
 8007ad4:	b140      	cbz	r0, 8007ae8 <_printf_float+0xe0>
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bfbc      	itt	lt
 8007adc:	232d      	movlt	r3, #45	@ 0x2d
 8007ade:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8007cdc <_printf_float+0x2d4>)
 8007ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ce0 <_printf_float+0x2d8>)
 8007ae6:	e7d4      	b.n	8007a92 <_printf_float+0x8a>
 8007ae8:	6863      	ldr	r3, [r4, #4]
 8007aea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007aee:	9206      	str	r2, [sp, #24]
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	d13b      	bne.n	8007b6c <_printf_float+0x164>
 8007af4:	2306      	movs	r3, #6
 8007af6:	6063      	str	r3, [r4, #4]
 8007af8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007afc:	2300      	movs	r3, #0
 8007afe:	6022      	str	r2, [r4, #0]
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b08:	ab09      	add	r3, sp, #36	@ 0x24
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	6861      	ldr	r1, [r4, #4]
 8007b0e:	ec49 8b10 	vmov	d0, r8, r9
 8007b12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b16:	4628      	mov	r0, r5
 8007b18:	f7ff fed6 	bl	80078c8 <__cvt>
 8007b1c:	9b06      	ldr	r3, [sp, #24]
 8007b1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b20:	2b47      	cmp	r3, #71	@ 0x47
 8007b22:	4680      	mov	r8, r0
 8007b24:	d129      	bne.n	8007b7a <_printf_float+0x172>
 8007b26:	1cc8      	adds	r0, r1, #3
 8007b28:	db02      	blt.n	8007b30 <_printf_float+0x128>
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	dd41      	ble.n	8007bb4 <_printf_float+0x1ac>
 8007b30:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b34:	fa5f fa8a 	uxtb.w	sl, sl
 8007b38:	3901      	subs	r1, #1
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b40:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b42:	f7ff ff26 	bl	8007992 <__exponent>
 8007b46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b48:	1813      	adds	r3, r2, r0
 8007b4a:	2a01      	cmp	r2, #1
 8007b4c:	4681      	mov	r9, r0
 8007b4e:	6123      	str	r3, [r4, #16]
 8007b50:	dc02      	bgt.n	8007b58 <_printf_float+0x150>
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	07d2      	lsls	r2, r2, #31
 8007b56:	d501      	bpl.n	8007b5c <_printf_float+0x154>
 8007b58:	3301      	adds	r3, #1
 8007b5a:	6123      	str	r3, [r4, #16]
 8007b5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0a2      	beq.n	8007aaa <_printf_float+0xa2>
 8007b64:	232d      	movs	r3, #45	@ 0x2d
 8007b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b6a:	e79e      	b.n	8007aaa <_printf_float+0xa2>
 8007b6c:	9a06      	ldr	r2, [sp, #24]
 8007b6e:	2a47      	cmp	r2, #71	@ 0x47
 8007b70:	d1c2      	bne.n	8007af8 <_printf_float+0xf0>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1c0      	bne.n	8007af8 <_printf_float+0xf0>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e7bd      	b.n	8007af6 <_printf_float+0xee>
 8007b7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b7e:	d9db      	bls.n	8007b38 <_printf_float+0x130>
 8007b80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b84:	d118      	bne.n	8007bb8 <_printf_float+0x1b0>
 8007b86:	2900      	cmp	r1, #0
 8007b88:	6863      	ldr	r3, [r4, #4]
 8007b8a:	dd0b      	ble.n	8007ba4 <_printf_float+0x19c>
 8007b8c:	6121      	str	r1, [r4, #16]
 8007b8e:	b913      	cbnz	r3, 8007b96 <_printf_float+0x18e>
 8007b90:	6822      	ldr	r2, [r4, #0]
 8007b92:	07d0      	lsls	r0, r2, #31
 8007b94:	d502      	bpl.n	8007b9c <_printf_float+0x194>
 8007b96:	3301      	adds	r3, #1
 8007b98:	440b      	add	r3, r1
 8007b9a:	6123      	str	r3, [r4, #16]
 8007b9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	e7db      	b.n	8007b5c <_printf_float+0x154>
 8007ba4:	b913      	cbnz	r3, 8007bac <_printf_float+0x1a4>
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	07d2      	lsls	r2, r2, #31
 8007baa:	d501      	bpl.n	8007bb0 <_printf_float+0x1a8>
 8007bac:	3302      	adds	r3, #2
 8007bae:	e7f4      	b.n	8007b9a <_printf_float+0x192>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e7f2      	b.n	8007b9a <_printf_float+0x192>
 8007bb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	db05      	blt.n	8007bca <_printf_float+0x1c2>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	6121      	str	r1, [r4, #16]
 8007bc2:	07d8      	lsls	r0, r3, #31
 8007bc4:	d5ea      	bpl.n	8007b9c <_printf_float+0x194>
 8007bc6:	1c4b      	adds	r3, r1, #1
 8007bc8:	e7e7      	b.n	8007b9a <_printf_float+0x192>
 8007bca:	2900      	cmp	r1, #0
 8007bcc:	bfd4      	ite	le
 8007bce:	f1c1 0202 	rsble	r2, r1, #2
 8007bd2:	2201      	movgt	r2, #1
 8007bd4:	4413      	add	r3, r2
 8007bd6:	e7e0      	b.n	8007b9a <_printf_float+0x192>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	055a      	lsls	r2, r3, #21
 8007bdc:	d407      	bmi.n	8007bee <_printf_float+0x1e6>
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	4642      	mov	r2, r8
 8007be2:	4631      	mov	r1, r6
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b8      	blx	r7
 8007be8:	3001      	adds	r0, #1
 8007bea:	d12b      	bne.n	8007c44 <_printf_float+0x23c>
 8007bec:	e767      	b.n	8007abe <_printf_float+0xb6>
 8007bee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bf2:	f240 80dd 	bls.w	8007db0 <_printf_float+0x3a8>
 8007bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f7f8 ff8b 	bl	8000b18 <__aeabi_dcmpeq>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d033      	beq.n	8007c6e <_printf_float+0x266>
 8007c06:	4a37      	ldr	r2, [pc, #220]	@ (8007ce4 <_printf_float+0x2dc>)
 8007c08:	2301      	movs	r3, #1
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	f43f af54 	beq.w	8007abe <_printf_float+0xb6>
 8007c16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c1a:	4543      	cmp	r3, r8
 8007c1c:	db02      	blt.n	8007c24 <_printf_float+0x21c>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	07d8      	lsls	r0, r3, #31
 8007c22:	d50f      	bpl.n	8007c44 <_printf_float+0x23c>
 8007c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f af45 	beq.w	8007abe <_printf_float+0xb6>
 8007c34:	f04f 0900 	mov.w	r9, #0
 8007c38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007c3c:	f104 0a1a 	add.w	sl, r4, #26
 8007c40:	45c8      	cmp	r8, r9
 8007c42:	dc09      	bgt.n	8007c58 <_printf_float+0x250>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	079b      	lsls	r3, r3, #30
 8007c48:	f100 8103 	bmi.w	8007e52 <_printf_float+0x44a>
 8007c4c:	68e0      	ldr	r0, [r4, #12]
 8007c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c50:	4298      	cmp	r0, r3
 8007c52:	bfb8      	it	lt
 8007c54:	4618      	movlt	r0, r3
 8007c56:	e734      	b.n	8007ac2 <_printf_float+0xba>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f af2b 	beq.w	8007abe <_printf_float+0xb6>
 8007c68:	f109 0901 	add.w	r9, r9, #1
 8007c6c:	e7e8      	b.n	8007c40 <_printf_float+0x238>
 8007c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dc39      	bgt.n	8007ce8 <_printf_float+0x2e0>
 8007c74:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce4 <_printf_float+0x2dc>)
 8007c76:	2301      	movs	r3, #1
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f43f af1d 	beq.w	8007abe <_printf_float+0xb6>
 8007c84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c88:	ea59 0303 	orrs.w	r3, r9, r3
 8007c8c:	d102      	bne.n	8007c94 <_printf_float+0x28c>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	07d9      	lsls	r1, r3, #31
 8007c92:	d5d7      	bpl.n	8007c44 <_printf_float+0x23c>
 8007c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f af0d 	beq.w	8007abe <_printf_float+0xb6>
 8007ca4:	f04f 0a00 	mov.w	sl, #0
 8007ca8:	f104 0b1a 	add.w	fp, r4, #26
 8007cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cae:	425b      	negs	r3, r3
 8007cb0:	4553      	cmp	r3, sl
 8007cb2:	dc01      	bgt.n	8007cb8 <_printf_float+0x2b0>
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	e793      	b.n	8007be0 <_printf_float+0x1d8>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	465a      	mov	r2, fp
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f43f aefb 	beq.w	8007abe <_printf_float+0xb6>
 8007cc8:	f10a 0a01 	add.w	sl, sl, #1
 8007ccc:	e7ee      	b.n	8007cac <_printf_float+0x2a4>
 8007cce:	bf00      	nop
 8007cd0:	7fefffff 	.word	0x7fefffff
 8007cd4:	0800c1e8 	.word	0x0800c1e8
 8007cd8:	0800c1ec 	.word	0x0800c1ec
 8007cdc:	0800c1f0 	.word	0x0800c1f0
 8007ce0:	0800c1f4 	.word	0x0800c1f4
 8007ce4:	0800c1f8 	.word	0x0800c1f8
 8007ce8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cee:	4553      	cmp	r3, sl
 8007cf0:	bfa8      	it	ge
 8007cf2:	4653      	movge	r3, sl
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	4699      	mov	r9, r3
 8007cf8:	dc36      	bgt.n	8007d68 <_printf_float+0x360>
 8007cfa:	f04f 0b00 	mov.w	fp, #0
 8007cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d02:	f104 021a 	add.w	r2, r4, #26
 8007d06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d08:	9306      	str	r3, [sp, #24]
 8007d0a:	eba3 0309 	sub.w	r3, r3, r9
 8007d0e:	455b      	cmp	r3, fp
 8007d10:	dc31      	bgt.n	8007d76 <_printf_float+0x36e>
 8007d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d14:	459a      	cmp	sl, r3
 8007d16:	dc3a      	bgt.n	8007d8e <_printf_float+0x386>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	07da      	lsls	r2, r3, #31
 8007d1c:	d437      	bmi.n	8007d8e <_printf_float+0x386>
 8007d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d20:	ebaa 0903 	sub.w	r9, sl, r3
 8007d24:	9b06      	ldr	r3, [sp, #24]
 8007d26:	ebaa 0303 	sub.w	r3, sl, r3
 8007d2a:	4599      	cmp	r9, r3
 8007d2c:	bfa8      	it	ge
 8007d2e:	4699      	movge	r9, r3
 8007d30:	f1b9 0f00 	cmp.w	r9, #0
 8007d34:	dc33      	bgt.n	8007d9e <_printf_float+0x396>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d3e:	f104 0b1a 	add.w	fp, r4, #26
 8007d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d44:	ebaa 0303 	sub.w	r3, sl, r3
 8007d48:	eba3 0309 	sub.w	r3, r3, r9
 8007d4c:	4543      	cmp	r3, r8
 8007d4e:	f77f af79 	ble.w	8007c44 <_printf_float+0x23c>
 8007d52:	2301      	movs	r3, #1
 8007d54:	465a      	mov	r2, fp
 8007d56:	4631      	mov	r1, r6
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b8      	blx	r7
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f43f aeae 	beq.w	8007abe <_printf_float+0xb6>
 8007d62:	f108 0801 	add.w	r8, r8, #1
 8007d66:	e7ec      	b.n	8007d42 <_printf_float+0x33a>
 8007d68:	4642      	mov	r2, r8
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	d1c2      	bne.n	8007cfa <_printf_float+0x2f2>
 8007d74:	e6a3      	b.n	8007abe <_printf_float+0xb6>
 8007d76:	2301      	movs	r3, #1
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	9206      	str	r2, [sp, #24]
 8007d7e:	47b8      	blx	r7
 8007d80:	3001      	adds	r0, #1
 8007d82:	f43f ae9c 	beq.w	8007abe <_printf_float+0xb6>
 8007d86:	9a06      	ldr	r2, [sp, #24]
 8007d88:	f10b 0b01 	add.w	fp, fp, #1
 8007d8c:	e7bb      	b.n	8007d06 <_printf_float+0x2fe>
 8007d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d1c0      	bne.n	8007d1e <_printf_float+0x316>
 8007d9c:	e68f      	b.n	8007abe <_printf_float+0xb6>
 8007d9e:	9a06      	ldr	r2, [sp, #24]
 8007da0:	464b      	mov	r3, r9
 8007da2:	4442      	add	r2, r8
 8007da4:	4631      	mov	r1, r6
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	d1c3      	bne.n	8007d36 <_printf_float+0x32e>
 8007dae:	e686      	b.n	8007abe <_printf_float+0xb6>
 8007db0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007db4:	f1ba 0f01 	cmp.w	sl, #1
 8007db8:	dc01      	bgt.n	8007dbe <_printf_float+0x3b6>
 8007dba:	07db      	lsls	r3, r3, #31
 8007dbc:	d536      	bpl.n	8007e2c <_printf_float+0x424>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	47b8      	blx	r7
 8007dc8:	3001      	adds	r0, #1
 8007dca:	f43f ae78 	beq.w	8007abe <_printf_float+0xb6>
 8007dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b8      	blx	r7
 8007dd8:	3001      	adds	r0, #1
 8007dda:	f43f ae70 	beq.w	8007abe <_printf_float+0xb6>
 8007dde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007de2:	2200      	movs	r2, #0
 8007de4:	2300      	movs	r3, #0
 8007de6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007dea:	f7f8 fe95 	bl	8000b18 <__aeabi_dcmpeq>
 8007dee:	b9c0      	cbnz	r0, 8007e22 <_printf_float+0x41a>
 8007df0:	4653      	mov	r3, sl
 8007df2:	f108 0201 	add.w	r2, r8, #1
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d10c      	bne.n	8007e1a <_printf_float+0x412>
 8007e00:	e65d      	b.n	8007abe <_printf_float+0xb6>
 8007e02:	2301      	movs	r3, #1
 8007e04:	465a      	mov	r2, fp
 8007e06:	4631      	mov	r1, r6
 8007e08:	4628      	mov	r0, r5
 8007e0a:	47b8      	blx	r7
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	f43f ae56 	beq.w	8007abe <_printf_float+0xb6>
 8007e12:	f108 0801 	add.w	r8, r8, #1
 8007e16:	45d0      	cmp	r8, sl
 8007e18:	dbf3      	blt.n	8007e02 <_printf_float+0x3fa>
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e20:	e6df      	b.n	8007be2 <_printf_float+0x1da>
 8007e22:	f04f 0800 	mov.w	r8, #0
 8007e26:	f104 0b1a 	add.w	fp, r4, #26
 8007e2a:	e7f4      	b.n	8007e16 <_printf_float+0x40e>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	4642      	mov	r2, r8
 8007e30:	e7e1      	b.n	8007df6 <_printf_float+0x3ee>
 8007e32:	2301      	movs	r3, #1
 8007e34:	464a      	mov	r2, r9
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b8      	blx	r7
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f43f ae3e 	beq.w	8007abe <_printf_float+0xb6>
 8007e42:	f108 0801 	add.w	r8, r8, #1
 8007e46:	68e3      	ldr	r3, [r4, #12]
 8007e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e4a:	1a5b      	subs	r3, r3, r1
 8007e4c:	4543      	cmp	r3, r8
 8007e4e:	dcf0      	bgt.n	8007e32 <_printf_float+0x42a>
 8007e50:	e6fc      	b.n	8007c4c <_printf_float+0x244>
 8007e52:	f04f 0800 	mov.w	r8, #0
 8007e56:	f104 0919 	add.w	r9, r4, #25
 8007e5a:	e7f4      	b.n	8007e46 <_printf_float+0x43e>

08007e5c <_printf_common>:
 8007e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	4616      	mov	r6, r2
 8007e62:	4698      	mov	r8, r3
 8007e64:	688a      	ldr	r2, [r1, #8]
 8007e66:	690b      	ldr	r3, [r1, #16]
 8007e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	bfb8      	it	lt
 8007e70:	4613      	movlt	r3, r2
 8007e72:	6033      	str	r3, [r6, #0]
 8007e74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e78:	4607      	mov	r7, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	b10a      	cbz	r2, 8007e82 <_printf_common+0x26>
 8007e7e:	3301      	adds	r3, #1
 8007e80:	6033      	str	r3, [r6, #0]
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	0699      	lsls	r1, r3, #26
 8007e86:	bf42      	ittt	mi
 8007e88:	6833      	ldrmi	r3, [r6, #0]
 8007e8a:	3302      	addmi	r3, #2
 8007e8c:	6033      	strmi	r3, [r6, #0]
 8007e8e:	6825      	ldr	r5, [r4, #0]
 8007e90:	f015 0506 	ands.w	r5, r5, #6
 8007e94:	d106      	bne.n	8007ea4 <_printf_common+0x48>
 8007e96:	f104 0a19 	add.w	sl, r4, #25
 8007e9a:	68e3      	ldr	r3, [r4, #12]
 8007e9c:	6832      	ldr	r2, [r6, #0]
 8007e9e:	1a9b      	subs	r3, r3, r2
 8007ea0:	42ab      	cmp	r3, r5
 8007ea2:	dc26      	bgt.n	8007ef2 <_printf_common+0x96>
 8007ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	3b00      	subs	r3, #0
 8007eac:	bf18      	it	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	0692      	lsls	r2, r2, #26
 8007eb2:	d42b      	bmi.n	8007f0c <_printf_common+0xb0>
 8007eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007eb8:	4641      	mov	r1, r8
 8007eba:	4638      	mov	r0, r7
 8007ebc:	47c8      	blx	r9
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	d01e      	beq.n	8007f00 <_printf_common+0xa4>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	6922      	ldr	r2, [r4, #16]
 8007ec6:	f003 0306 	and.w	r3, r3, #6
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	bf02      	ittt	eq
 8007ece:	68e5      	ldreq	r5, [r4, #12]
 8007ed0:	6833      	ldreq	r3, [r6, #0]
 8007ed2:	1aed      	subeq	r5, r5, r3
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	bf0c      	ite	eq
 8007ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007edc:	2500      	movne	r5, #0
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	bfc4      	itt	gt
 8007ee2:	1a9b      	subgt	r3, r3, r2
 8007ee4:	18ed      	addgt	r5, r5, r3
 8007ee6:	2600      	movs	r6, #0
 8007ee8:	341a      	adds	r4, #26
 8007eea:	42b5      	cmp	r5, r6
 8007eec:	d11a      	bne.n	8007f24 <_printf_common+0xc8>
 8007eee:	2000      	movs	r0, #0
 8007ef0:	e008      	b.n	8007f04 <_printf_common+0xa8>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	4641      	mov	r1, r8
 8007ef8:	4638      	mov	r0, r7
 8007efa:	47c8      	blx	r9
 8007efc:	3001      	adds	r0, #1
 8007efe:	d103      	bne.n	8007f08 <_printf_common+0xac>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f08:	3501      	adds	r5, #1
 8007f0a:	e7c6      	b.n	8007e9a <_printf_common+0x3e>
 8007f0c:	18e1      	adds	r1, r4, r3
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	2030      	movs	r0, #48	@ 0x30
 8007f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f16:	4422      	add	r2, r4
 8007f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f20:	3302      	adds	r3, #2
 8007f22:	e7c7      	b.n	8007eb4 <_printf_common+0x58>
 8007f24:	2301      	movs	r3, #1
 8007f26:	4622      	mov	r2, r4
 8007f28:	4641      	mov	r1, r8
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	47c8      	blx	r9
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d0e6      	beq.n	8007f00 <_printf_common+0xa4>
 8007f32:	3601      	adds	r6, #1
 8007f34:	e7d9      	b.n	8007eea <_printf_common+0x8e>
	...

08007f38 <_printf_i>:
 8007f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	7e0f      	ldrb	r7, [r1, #24]
 8007f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f40:	2f78      	cmp	r7, #120	@ 0x78
 8007f42:	4691      	mov	r9, r2
 8007f44:	4680      	mov	r8, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	469a      	mov	sl, r3
 8007f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f4e:	d807      	bhi.n	8007f60 <_printf_i+0x28>
 8007f50:	2f62      	cmp	r7, #98	@ 0x62
 8007f52:	d80a      	bhi.n	8007f6a <_printf_i+0x32>
 8007f54:	2f00      	cmp	r7, #0
 8007f56:	f000 80d2 	beq.w	80080fe <_printf_i+0x1c6>
 8007f5a:	2f58      	cmp	r7, #88	@ 0x58
 8007f5c:	f000 80b9 	beq.w	80080d2 <_printf_i+0x19a>
 8007f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f68:	e03a      	b.n	8007fe0 <_printf_i+0xa8>
 8007f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f6e:	2b15      	cmp	r3, #21
 8007f70:	d8f6      	bhi.n	8007f60 <_printf_i+0x28>
 8007f72:	a101      	add	r1, pc, #4	@ (adr r1, 8007f78 <_printf_i+0x40>)
 8007f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f78:	08007fd1 	.word	0x08007fd1
 8007f7c:	08007fe5 	.word	0x08007fe5
 8007f80:	08007f61 	.word	0x08007f61
 8007f84:	08007f61 	.word	0x08007f61
 8007f88:	08007f61 	.word	0x08007f61
 8007f8c:	08007f61 	.word	0x08007f61
 8007f90:	08007fe5 	.word	0x08007fe5
 8007f94:	08007f61 	.word	0x08007f61
 8007f98:	08007f61 	.word	0x08007f61
 8007f9c:	08007f61 	.word	0x08007f61
 8007fa0:	08007f61 	.word	0x08007f61
 8007fa4:	080080e5 	.word	0x080080e5
 8007fa8:	0800800f 	.word	0x0800800f
 8007fac:	0800809f 	.word	0x0800809f
 8007fb0:	08007f61 	.word	0x08007f61
 8007fb4:	08007f61 	.word	0x08007f61
 8007fb8:	08008107 	.word	0x08008107
 8007fbc:	08007f61 	.word	0x08007f61
 8007fc0:	0800800f 	.word	0x0800800f
 8007fc4:	08007f61 	.word	0x08007f61
 8007fc8:	08007f61 	.word	0x08007f61
 8007fcc:	080080a7 	.word	0x080080a7
 8007fd0:	6833      	ldr	r3, [r6, #0]
 8007fd2:	1d1a      	adds	r2, r3, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6032      	str	r2, [r6, #0]
 8007fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e09d      	b.n	8008120 <_printf_i+0x1e8>
 8007fe4:	6833      	ldr	r3, [r6, #0]
 8007fe6:	6820      	ldr	r0, [r4, #0]
 8007fe8:	1d19      	adds	r1, r3, #4
 8007fea:	6031      	str	r1, [r6, #0]
 8007fec:	0606      	lsls	r6, r0, #24
 8007fee:	d501      	bpl.n	8007ff4 <_printf_i+0xbc>
 8007ff0:	681d      	ldr	r5, [r3, #0]
 8007ff2:	e003      	b.n	8007ffc <_printf_i+0xc4>
 8007ff4:	0645      	lsls	r5, r0, #25
 8007ff6:	d5fb      	bpl.n	8007ff0 <_printf_i+0xb8>
 8007ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ffc:	2d00      	cmp	r5, #0
 8007ffe:	da03      	bge.n	8008008 <_printf_i+0xd0>
 8008000:	232d      	movs	r3, #45	@ 0x2d
 8008002:	426d      	negs	r5, r5
 8008004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008008:	4859      	ldr	r0, [pc, #356]	@ (8008170 <_printf_i+0x238>)
 800800a:	230a      	movs	r3, #10
 800800c:	e011      	b.n	8008032 <_printf_i+0xfa>
 800800e:	6821      	ldr	r1, [r4, #0]
 8008010:	6833      	ldr	r3, [r6, #0]
 8008012:	0608      	lsls	r0, r1, #24
 8008014:	f853 5b04 	ldr.w	r5, [r3], #4
 8008018:	d402      	bmi.n	8008020 <_printf_i+0xe8>
 800801a:	0649      	lsls	r1, r1, #25
 800801c:	bf48      	it	mi
 800801e:	b2ad      	uxthmi	r5, r5
 8008020:	2f6f      	cmp	r7, #111	@ 0x6f
 8008022:	4853      	ldr	r0, [pc, #332]	@ (8008170 <_printf_i+0x238>)
 8008024:	6033      	str	r3, [r6, #0]
 8008026:	bf14      	ite	ne
 8008028:	230a      	movne	r3, #10
 800802a:	2308      	moveq	r3, #8
 800802c:	2100      	movs	r1, #0
 800802e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008032:	6866      	ldr	r6, [r4, #4]
 8008034:	60a6      	str	r6, [r4, #8]
 8008036:	2e00      	cmp	r6, #0
 8008038:	bfa2      	ittt	ge
 800803a:	6821      	ldrge	r1, [r4, #0]
 800803c:	f021 0104 	bicge.w	r1, r1, #4
 8008040:	6021      	strge	r1, [r4, #0]
 8008042:	b90d      	cbnz	r5, 8008048 <_printf_i+0x110>
 8008044:	2e00      	cmp	r6, #0
 8008046:	d04b      	beq.n	80080e0 <_printf_i+0x1a8>
 8008048:	4616      	mov	r6, r2
 800804a:	fbb5 f1f3 	udiv	r1, r5, r3
 800804e:	fb03 5711 	mls	r7, r3, r1, r5
 8008052:	5dc7      	ldrb	r7, [r0, r7]
 8008054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008058:	462f      	mov	r7, r5
 800805a:	42bb      	cmp	r3, r7
 800805c:	460d      	mov	r5, r1
 800805e:	d9f4      	bls.n	800804a <_printf_i+0x112>
 8008060:	2b08      	cmp	r3, #8
 8008062:	d10b      	bne.n	800807c <_printf_i+0x144>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	07df      	lsls	r7, r3, #31
 8008068:	d508      	bpl.n	800807c <_printf_i+0x144>
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	6861      	ldr	r1, [r4, #4]
 800806e:	4299      	cmp	r1, r3
 8008070:	bfde      	ittt	le
 8008072:	2330      	movle	r3, #48	@ 0x30
 8008074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008078:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800807c:	1b92      	subs	r2, r2, r6
 800807e:	6122      	str	r2, [r4, #16]
 8008080:	f8cd a000 	str.w	sl, [sp]
 8008084:	464b      	mov	r3, r9
 8008086:	aa03      	add	r2, sp, #12
 8008088:	4621      	mov	r1, r4
 800808a:	4640      	mov	r0, r8
 800808c:	f7ff fee6 	bl	8007e5c <_printf_common>
 8008090:	3001      	adds	r0, #1
 8008092:	d14a      	bne.n	800812a <_printf_i+0x1f2>
 8008094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008098:	b004      	add	sp, #16
 800809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	f043 0320 	orr.w	r3, r3, #32
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	4833      	ldr	r0, [pc, #204]	@ (8008174 <_printf_i+0x23c>)
 80080a8:	2778      	movs	r7, #120	@ 0x78
 80080aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	6831      	ldr	r1, [r6, #0]
 80080b2:	061f      	lsls	r7, r3, #24
 80080b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80080b8:	d402      	bmi.n	80080c0 <_printf_i+0x188>
 80080ba:	065f      	lsls	r7, r3, #25
 80080bc:	bf48      	it	mi
 80080be:	b2ad      	uxthmi	r5, r5
 80080c0:	6031      	str	r1, [r6, #0]
 80080c2:	07d9      	lsls	r1, r3, #31
 80080c4:	bf44      	itt	mi
 80080c6:	f043 0320 	orrmi.w	r3, r3, #32
 80080ca:	6023      	strmi	r3, [r4, #0]
 80080cc:	b11d      	cbz	r5, 80080d6 <_printf_i+0x19e>
 80080ce:	2310      	movs	r3, #16
 80080d0:	e7ac      	b.n	800802c <_printf_i+0xf4>
 80080d2:	4827      	ldr	r0, [pc, #156]	@ (8008170 <_printf_i+0x238>)
 80080d4:	e7e9      	b.n	80080aa <_printf_i+0x172>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	f023 0320 	bic.w	r3, r3, #32
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	e7f6      	b.n	80080ce <_printf_i+0x196>
 80080e0:	4616      	mov	r6, r2
 80080e2:	e7bd      	b.n	8008060 <_printf_i+0x128>
 80080e4:	6833      	ldr	r3, [r6, #0]
 80080e6:	6825      	ldr	r5, [r4, #0]
 80080e8:	6961      	ldr	r1, [r4, #20]
 80080ea:	1d18      	adds	r0, r3, #4
 80080ec:	6030      	str	r0, [r6, #0]
 80080ee:	062e      	lsls	r6, r5, #24
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	d501      	bpl.n	80080f8 <_printf_i+0x1c0>
 80080f4:	6019      	str	r1, [r3, #0]
 80080f6:	e002      	b.n	80080fe <_printf_i+0x1c6>
 80080f8:	0668      	lsls	r0, r5, #25
 80080fa:	d5fb      	bpl.n	80080f4 <_printf_i+0x1bc>
 80080fc:	8019      	strh	r1, [r3, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	4616      	mov	r6, r2
 8008104:	e7bc      	b.n	8008080 <_printf_i+0x148>
 8008106:	6833      	ldr	r3, [r6, #0]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	6032      	str	r2, [r6, #0]
 800810c:	681e      	ldr	r6, [r3, #0]
 800810e:	6862      	ldr	r2, [r4, #4]
 8008110:	2100      	movs	r1, #0
 8008112:	4630      	mov	r0, r6
 8008114:	f7f8 f884 	bl	8000220 <memchr>
 8008118:	b108      	cbz	r0, 800811e <_printf_i+0x1e6>
 800811a:	1b80      	subs	r0, r0, r6
 800811c:	6060      	str	r0, [r4, #4]
 800811e:	6863      	ldr	r3, [r4, #4]
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	2300      	movs	r3, #0
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008128:	e7aa      	b.n	8008080 <_printf_i+0x148>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	4632      	mov	r2, r6
 800812e:	4649      	mov	r1, r9
 8008130:	4640      	mov	r0, r8
 8008132:	47d0      	blx	sl
 8008134:	3001      	adds	r0, #1
 8008136:	d0ad      	beq.n	8008094 <_printf_i+0x15c>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	079b      	lsls	r3, r3, #30
 800813c:	d413      	bmi.n	8008166 <_printf_i+0x22e>
 800813e:	68e0      	ldr	r0, [r4, #12]
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	4298      	cmp	r0, r3
 8008144:	bfb8      	it	lt
 8008146:	4618      	movlt	r0, r3
 8008148:	e7a6      	b.n	8008098 <_printf_i+0x160>
 800814a:	2301      	movs	r3, #1
 800814c:	4632      	mov	r2, r6
 800814e:	4649      	mov	r1, r9
 8008150:	4640      	mov	r0, r8
 8008152:	47d0      	blx	sl
 8008154:	3001      	adds	r0, #1
 8008156:	d09d      	beq.n	8008094 <_printf_i+0x15c>
 8008158:	3501      	adds	r5, #1
 800815a:	68e3      	ldr	r3, [r4, #12]
 800815c:	9903      	ldr	r1, [sp, #12]
 800815e:	1a5b      	subs	r3, r3, r1
 8008160:	42ab      	cmp	r3, r5
 8008162:	dcf2      	bgt.n	800814a <_printf_i+0x212>
 8008164:	e7eb      	b.n	800813e <_printf_i+0x206>
 8008166:	2500      	movs	r5, #0
 8008168:	f104 0619 	add.w	r6, r4, #25
 800816c:	e7f5      	b.n	800815a <_printf_i+0x222>
 800816e:	bf00      	nop
 8008170:	0800c1fa 	.word	0x0800c1fa
 8008174:	0800c20b 	.word	0x0800c20b

08008178 <_scanf_float>:
 8008178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	b087      	sub	sp, #28
 800817e:	4617      	mov	r7, r2
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	688b      	ldr	r3, [r1, #8]
 8008184:	1e5a      	subs	r2, r3, #1
 8008186:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800818a:	bf81      	itttt	hi
 800818c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008190:	eb03 0b05 	addhi.w	fp, r3, r5
 8008194:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008198:	608b      	strhi	r3, [r1, #8]
 800819a:	680b      	ldr	r3, [r1, #0]
 800819c:	460a      	mov	r2, r1
 800819e:	f04f 0500 	mov.w	r5, #0
 80081a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80081a6:	f842 3b1c 	str.w	r3, [r2], #28
 80081aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081ae:	4680      	mov	r8, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	bf98      	it	ls
 80081b4:	f04f 0b00 	movls.w	fp, #0
 80081b8:	9201      	str	r2, [sp, #4]
 80081ba:	4616      	mov	r6, r2
 80081bc:	46aa      	mov	sl, r5
 80081be:	46a9      	mov	r9, r5
 80081c0:	9502      	str	r5, [sp, #8]
 80081c2:	68a2      	ldr	r2, [r4, #8]
 80081c4:	b152      	cbz	r2, 80081dc <_scanf_float+0x64>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b4e      	cmp	r3, #78	@ 0x4e
 80081cc:	d864      	bhi.n	8008298 <_scanf_float+0x120>
 80081ce:	2b40      	cmp	r3, #64	@ 0x40
 80081d0:	d83c      	bhi.n	800824c <_scanf_float+0xd4>
 80081d2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80081d6:	b2c8      	uxtb	r0, r1
 80081d8:	280e      	cmp	r0, #14
 80081da:	d93a      	bls.n	8008252 <_scanf_float+0xda>
 80081dc:	f1b9 0f00 	cmp.w	r9, #0
 80081e0:	d003      	beq.n	80081ea <_scanf_float+0x72>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80081ee:	f1ba 0f01 	cmp.w	sl, #1
 80081f2:	f200 8117 	bhi.w	8008424 <_scanf_float+0x2ac>
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	429e      	cmp	r6, r3
 80081fa:	f200 8108 	bhi.w	800840e <_scanf_float+0x296>
 80081fe:	2001      	movs	r0, #1
 8008200:	b007      	add	sp, #28
 8008202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008206:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800820a:	2a0d      	cmp	r2, #13
 800820c:	d8e6      	bhi.n	80081dc <_scanf_float+0x64>
 800820e:	a101      	add	r1, pc, #4	@ (adr r1, 8008214 <_scanf_float+0x9c>)
 8008210:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008214:	0800835b 	.word	0x0800835b
 8008218:	080081dd 	.word	0x080081dd
 800821c:	080081dd 	.word	0x080081dd
 8008220:	080081dd 	.word	0x080081dd
 8008224:	080083bb 	.word	0x080083bb
 8008228:	08008393 	.word	0x08008393
 800822c:	080081dd 	.word	0x080081dd
 8008230:	080081dd 	.word	0x080081dd
 8008234:	08008369 	.word	0x08008369
 8008238:	080081dd 	.word	0x080081dd
 800823c:	080081dd 	.word	0x080081dd
 8008240:	080081dd 	.word	0x080081dd
 8008244:	080081dd 	.word	0x080081dd
 8008248:	08008321 	.word	0x08008321
 800824c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008250:	e7db      	b.n	800820a <_scanf_float+0x92>
 8008252:	290e      	cmp	r1, #14
 8008254:	d8c2      	bhi.n	80081dc <_scanf_float+0x64>
 8008256:	a001      	add	r0, pc, #4	@ (adr r0, 800825c <_scanf_float+0xe4>)
 8008258:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800825c:	08008311 	.word	0x08008311
 8008260:	080081dd 	.word	0x080081dd
 8008264:	08008311 	.word	0x08008311
 8008268:	080083a7 	.word	0x080083a7
 800826c:	080081dd 	.word	0x080081dd
 8008270:	080082b9 	.word	0x080082b9
 8008274:	080082f7 	.word	0x080082f7
 8008278:	080082f7 	.word	0x080082f7
 800827c:	080082f7 	.word	0x080082f7
 8008280:	080082f7 	.word	0x080082f7
 8008284:	080082f7 	.word	0x080082f7
 8008288:	080082f7 	.word	0x080082f7
 800828c:	080082f7 	.word	0x080082f7
 8008290:	080082f7 	.word	0x080082f7
 8008294:	080082f7 	.word	0x080082f7
 8008298:	2b6e      	cmp	r3, #110	@ 0x6e
 800829a:	d809      	bhi.n	80082b0 <_scanf_float+0x138>
 800829c:	2b60      	cmp	r3, #96	@ 0x60
 800829e:	d8b2      	bhi.n	8008206 <_scanf_float+0x8e>
 80082a0:	2b54      	cmp	r3, #84	@ 0x54
 80082a2:	d07b      	beq.n	800839c <_scanf_float+0x224>
 80082a4:	2b59      	cmp	r3, #89	@ 0x59
 80082a6:	d199      	bne.n	80081dc <_scanf_float+0x64>
 80082a8:	2d07      	cmp	r5, #7
 80082aa:	d197      	bne.n	80081dc <_scanf_float+0x64>
 80082ac:	2508      	movs	r5, #8
 80082ae:	e02c      	b.n	800830a <_scanf_float+0x192>
 80082b0:	2b74      	cmp	r3, #116	@ 0x74
 80082b2:	d073      	beq.n	800839c <_scanf_float+0x224>
 80082b4:	2b79      	cmp	r3, #121	@ 0x79
 80082b6:	e7f6      	b.n	80082a6 <_scanf_float+0x12e>
 80082b8:	6821      	ldr	r1, [r4, #0]
 80082ba:	05c8      	lsls	r0, r1, #23
 80082bc:	d51b      	bpl.n	80082f6 <_scanf_float+0x17e>
 80082be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80082c2:	6021      	str	r1, [r4, #0]
 80082c4:	f109 0901 	add.w	r9, r9, #1
 80082c8:	f1bb 0f00 	cmp.w	fp, #0
 80082cc:	d003      	beq.n	80082d6 <_scanf_float+0x15e>
 80082ce:	3201      	adds	r2, #1
 80082d0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80082d4:	60a2      	str	r2, [r4, #8]
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	3b01      	subs	r3, #1
 80082da:	60a3      	str	r3, [r4, #8]
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	3301      	adds	r3, #1
 80082e0:	6123      	str	r3, [r4, #16]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	f340 8087 	ble.w	80083fc <_scanf_float+0x284>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	e765      	b.n	80081c2 <_scanf_float+0x4a>
 80082f6:	eb1a 0105 	adds.w	r1, sl, r5
 80082fa:	f47f af6f 	bne.w	80081dc <_scanf_float+0x64>
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008304:	6022      	str	r2, [r4, #0]
 8008306:	460d      	mov	r5, r1
 8008308:	468a      	mov	sl, r1
 800830a:	f806 3b01 	strb.w	r3, [r6], #1
 800830e:	e7e2      	b.n	80082d6 <_scanf_float+0x15e>
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	0610      	lsls	r0, r2, #24
 8008314:	f57f af62 	bpl.w	80081dc <_scanf_float+0x64>
 8008318:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800831c:	6022      	str	r2, [r4, #0]
 800831e:	e7f4      	b.n	800830a <_scanf_float+0x192>
 8008320:	f1ba 0f00 	cmp.w	sl, #0
 8008324:	d10e      	bne.n	8008344 <_scanf_float+0x1cc>
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	d10e      	bne.n	800834a <_scanf_float+0x1d2>
 800832c:	6822      	ldr	r2, [r4, #0]
 800832e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008332:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008336:	d108      	bne.n	800834a <_scanf_float+0x1d2>
 8008338:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800833c:	6022      	str	r2, [r4, #0]
 800833e:	f04f 0a01 	mov.w	sl, #1
 8008342:	e7e2      	b.n	800830a <_scanf_float+0x192>
 8008344:	f1ba 0f02 	cmp.w	sl, #2
 8008348:	d055      	beq.n	80083f6 <_scanf_float+0x27e>
 800834a:	2d01      	cmp	r5, #1
 800834c:	d002      	beq.n	8008354 <_scanf_float+0x1dc>
 800834e:	2d04      	cmp	r5, #4
 8008350:	f47f af44 	bne.w	80081dc <_scanf_float+0x64>
 8008354:	3501      	adds	r5, #1
 8008356:	b2ed      	uxtb	r5, r5
 8008358:	e7d7      	b.n	800830a <_scanf_float+0x192>
 800835a:	f1ba 0f01 	cmp.w	sl, #1
 800835e:	f47f af3d 	bne.w	80081dc <_scanf_float+0x64>
 8008362:	f04f 0a02 	mov.w	sl, #2
 8008366:	e7d0      	b.n	800830a <_scanf_float+0x192>
 8008368:	b97d      	cbnz	r5, 800838a <_scanf_float+0x212>
 800836a:	f1b9 0f00 	cmp.w	r9, #0
 800836e:	f47f af38 	bne.w	80081e2 <_scanf_float+0x6a>
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008378:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800837c:	f040 8108 	bne.w	8008590 <_scanf_float+0x418>
 8008380:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008384:	6022      	str	r2, [r4, #0]
 8008386:	2501      	movs	r5, #1
 8008388:	e7bf      	b.n	800830a <_scanf_float+0x192>
 800838a:	2d03      	cmp	r5, #3
 800838c:	d0e2      	beq.n	8008354 <_scanf_float+0x1dc>
 800838e:	2d05      	cmp	r5, #5
 8008390:	e7de      	b.n	8008350 <_scanf_float+0x1d8>
 8008392:	2d02      	cmp	r5, #2
 8008394:	f47f af22 	bne.w	80081dc <_scanf_float+0x64>
 8008398:	2503      	movs	r5, #3
 800839a:	e7b6      	b.n	800830a <_scanf_float+0x192>
 800839c:	2d06      	cmp	r5, #6
 800839e:	f47f af1d 	bne.w	80081dc <_scanf_float+0x64>
 80083a2:	2507      	movs	r5, #7
 80083a4:	e7b1      	b.n	800830a <_scanf_float+0x192>
 80083a6:	6822      	ldr	r2, [r4, #0]
 80083a8:	0591      	lsls	r1, r2, #22
 80083aa:	f57f af17 	bpl.w	80081dc <_scanf_float+0x64>
 80083ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80083b2:	6022      	str	r2, [r4, #0]
 80083b4:	f8cd 9008 	str.w	r9, [sp, #8]
 80083b8:	e7a7      	b.n	800830a <_scanf_float+0x192>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80083c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80083c4:	d006      	beq.n	80083d4 <_scanf_float+0x25c>
 80083c6:	0550      	lsls	r0, r2, #21
 80083c8:	f57f af08 	bpl.w	80081dc <_scanf_float+0x64>
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	f000 80de 	beq.w	8008590 <_scanf_float+0x418>
 80083d4:	0591      	lsls	r1, r2, #22
 80083d6:	bf58      	it	pl
 80083d8:	9902      	ldrpl	r1, [sp, #8]
 80083da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083de:	bf58      	it	pl
 80083e0:	eba9 0101 	subpl.w	r1, r9, r1
 80083e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80083e8:	bf58      	it	pl
 80083ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083ee:	6022      	str	r2, [r4, #0]
 80083f0:	f04f 0900 	mov.w	r9, #0
 80083f4:	e789      	b.n	800830a <_scanf_float+0x192>
 80083f6:	f04f 0a03 	mov.w	sl, #3
 80083fa:	e786      	b.n	800830a <_scanf_float+0x192>
 80083fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008400:	4639      	mov	r1, r7
 8008402:	4640      	mov	r0, r8
 8008404:	4798      	blx	r3
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f aedb 	beq.w	80081c2 <_scanf_float+0x4a>
 800840c:	e6e6      	b.n	80081dc <_scanf_float+0x64>
 800840e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008416:	463a      	mov	r2, r7
 8008418:	4640      	mov	r0, r8
 800841a:	4798      	blx	r3
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	3b01      	subs	r3, #1
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	e6e8      	b.n	80081f6 <_scanf_float+0x7e>
 8008424:	1e6b      	subs	r3, r5, #1
 8008426:	2b06      	cmp	r3, #6
 8008428:	d824      	bhi.n	8008474 <_scanf_float+0x2fc>
 800842a:	2d02      	cmp	r5, #2
 800842c:	d836      	bhi.n	800849c <_scanf_float+0x324>
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	429e      	cmp	r6, r3
 8008432:	f67f aee4 	bls.w	80081fe <_scanf_float+0x86>
 8008436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800843a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800843e:	463a      	mov	r2, r7
 8008440:	4640      	mov	r0, r8
 8008442:	4798      	blx	r3
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	3b01      	subs	r3, #1
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	e7f0      	b.n	800842e <_scanf_float+0x2b6>
 800844c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008450:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008454:	463a      	mov	r2, r7
 8008456:	4640      	mov	r0, r8
 8008458:	4798      	blx	r3
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	3b01      	subs	r3, #1
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008464:	fa5f fa8a 	uxtb.w	sl, sl
 8008468:	f1ba 0f02 	cmp.w	sl, #2
 800846c:	d1ee      	bne.n	800844c <_scanf_float+0x2d4>
 800846e:	3d03      	subs	r5, #3
 8008470:	b2ed      	uxtb	r5, r5
 8008472:	1b76      	subs	r6, r6, r5
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	05da      	lsls	r2, r3, #23
 8008478:	d530      	bpl.n	80084dc <_scanf_float+0x364>
 800847a:	055b      	lsls	r3, r3, #21
 800847c:	d511      	bpl.n	80084a2 <_scanf_float+0x32a>
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	429e      	cmp	r6, r3
 8008482:	f67f aebc 	bls.w	80081fe <_scanf_float+0x86>
 8008486:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800848a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800848e:	463a      	mov	r2, r7
 8008490:	4640      	mov	r0, r8
 8008492:	4798      	blx	r3
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	3b01      	subs	r3, #1
 8008498:	6123      	str	r3, [r4, #16]
 800849a:	e7f0      	b.n	800847e <_scanf_float+0x306>
 800849c:	46aa      	mov	sl, r5
 800849e:	46b3      	mov	fp, r6
 80084a0:	e7de      	b.n	8008460 <_scanf_float+0x2e8>
 80084a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	2965      	cmp	r1, #101	@ 0x65
 80084aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80084ae:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	d00c      	beq.n	80084d0 <_scanf_float+0x358>
 80084b6:	2945      	cmp	r1, #69	@ 0x45
 80084b8:	d00a      	beq.n	80084d0 <_scanf_float+0x358>
 80084ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084be:	463a      	mov	r2, r7
 80084c0:	4640      	mov	r0, r8
 80084c2:	4798      	blx	r3
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	1eb5      	subs	r5, r6, #2
 80084ce:	6123      	str	r3, [r4, #16]
 80084d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084d4:	463a      	mov	r2, r7
 80084d6:	4640      	mov	r0, r8
 80084d8:	4798      	blx	r3
 80084da:	462e      	mov	r6, r5
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	f012 0210 	ands.w	r2, r2, #16
 80084e2:	d001      	beq.n	80084e8 <_scanf_float+0x370>
 80084e4:	2000      	movs	r0, #0
 80084e6:	e68b      	b.n	8008200 <_scanf_float+0x88>
 80084e8:	7032      	strb	r2, [r6, #0]
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f4:	d11c      	bne.n	8008530 <_scanf_float+0x3b8>
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	454b      	cmp	r3, r9
 80084fa:	eba3 0209 	sub.w	r2, r3, r9
 80084fe:	d123      	bne.n	8008548 <_scanf_float+0x3d0>
 8008500:	9901      	ldr	r1, [sp, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	4640      	mov	r0, r8
 8008506:	f002 fc2b 	bl	800ad60 <_strtod_r>
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	6821      	ldr	r1, [r4, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f011 0f02 	tst.w	r1, #2
 8008514:	ec57 6b10 	vmov	r6, r7, d0
 8008518:	f103 0204 	add.w	r2, r3, #4
 800851c:	d01f      	beq.n	800855e <_scanf_float+0x3e6>
 800851e:	9903      	ldr	r1, [sp, #12]
 8008520:	600a      	str	r2, [r1, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	e9c3 6700 	strd	r6, r7, [r3]
 8008528:	68e3      	ldr	r3, [r4, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60e3      	str	r3, [r4, #12]
 800852e:	e7d9      	b.n	80084e4 <_scanf_float+0x36c>
 8008530:	9b04      	ldr	r3, [sp, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0e4      	beq.n	8008500 <_scanf_float+0x388>
 8008536:	9905      	ldr	r1, [sp, #20]
 8008538:	230a      	movs	r3, #10
 800853a:	3101      	adds	r1, #1
 800853c:	4640      	mov	r0, r8
 800853e:	f002 fc8f 	bl	800ae60 <_strtol_r>
 8008542:	9b04      	ldr	r3, [sp, #16]
 8008544:	9e05      	ldr	r6, [sp, #20]
 8008546:	1ac2      	subs	r2, r0, r3
 8008548:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800854c:	429e      	cmp	r6, r3
 800854e:	bf28      	it	cs
 8008550:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008554:	4910      	ldr	r1, [pc, #64]	@ (8008598 <_scanf_float+0x420>)
 8008556:	4630      	mov	r0, r6
 8008558:	f000 f918 	bl	800878c <siprintf>
 800855c:	e7d0      	b.n	8008500 <_scanf_float+0x388>
 800855e:	f011 0f04 	tst.w	r1, #4
 8008562:	9903      	ldr	r1, [sp, #12]
 8008564:	600a      	str	r2, [r1, #0]
 8008566:	d1dc      	bne.n	8008522 <_scanf_float+0x3aa>
 8008568:	681d      	ldr	r5, [r3, #0]
 800856a:	4632      	mov	r2, r6
 800856c:	463b      	mov	r3, r7
 800856e:	4630      	mov	r0, r6
 8008570:	4639      	mov	r1, r7
 8008572:	f7f8 fb03 	bl	8000b7c <__aeabi_dcmpun>
 8008576:	b128      	cbz	r0, 8008584 <_scanf_float+0x40c>
 8008578:	4808      	ldr	r0, [pc, #32]	@ (800859c <_scanf_float+0x424>)
 800857a:	f000 f9eb 	bl	8008954 <nanf>
 800857e:	ed85 0a00 	vstr	s0, [r5]
 8008582:	e7d1      	b.n	8008528 <_scanf_float+0x3b0>
 8008584:	4630      	mov	r0, r6
 8008586:	4639      	mov	r1, r7
 8008588:	f7f8 fb56 	bl	8000c38 <__aeabi_d2f>
 800858c:	6028      	str	r0, [r5, #0]
 800858e:	e7cb      	b.n	8008528 <_scanf_float+0x3b0>
 8008590:	f04f 0900 	mov.w	r9, #0
 8008594:	e629      	b.n	80081ea <_scanf_float+0x72>
 8008596:	bf00      	nop
 8008598:	0800c21c 	.word	0x0800c21c
 800859c:	0800c5b5 	.word	0x0800c5b5

080085a0 <std>:
 80085a0:	2300      	movs	r3, #0
 80085a2:	b510      	push	{r4, lr}
 80085a4:	4604      	mov	r4, r0
 80085a6:	e9c0 3300 	strd	r3, r3, [r0]
 80085aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085ae:	6083      	str	r3, [r0, #8]
 80085b0:	8181      	strh	r1, [r0, #12]
 80085b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80085b4:	81c2      	strh	r2, [r0, #14]
 80085b6:	6183      	str	r3, [r0, #24]
 80085b8:	4619      	mov	r1, r3
 80085ba:	2208      	movs	r2, #8
 80085bc:	305c      	adds	r0, #92	@ 0x5c
 80085be:	f000 f948 	bl	8008852 <memset>
 80085c2:	4b0d      	ldr	r3, [pc, #52]	@ (80085f8 <std+0x58>)
 80085c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80085c6:	4b0d      	ldr	r3, [pc, #52]	@ (80085fc <std+0x5c>)
 80085c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008600 <std+0x60>)
 80085cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008604 <std+0x64>)
 80085d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80085d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008608 <std+0x68>)
 80085d4:	6224      	str	r4, [r4, #32]
 80085d6:	429c      	cmp	r4, r3
 80085d8:	d006      	beq.n	80085e8 <std+0x48>
 80085da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085de:	4294      	cmp	r4, r2
 80085e0:	d002      	beq.n	80085e8 <std+0x48>
 80085e2:	33d0      	adds	r3, #208	@ 0xd0
 80085e4:	429c      	cmp	r4, r3
 80085e6:	d105      	bne.n	80085f4 <std+0x54>
 80085e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f0:	f000 b9ac 	b.w	800894c <__retarget_lock_init_recursive>
 80085f4:	bd10      	pop	{r4, pc}
 80085f6:	bf00      	nop
 80085f8:	080087cd 	.word	0x080087cd
 80085fc:	080087ef 	.word	0x080087ef
 8008600:	08008827 	.word	0x08008827
 8008604:	0800884b 	.word	0x0800884b
 8008608:	200006d4 	.word	0x200006d4

0800860c <stdio_exit_handler>:
 800860c:	4a02      	ldr	r2, [pc, #8]	@ (8008618 <stdio_exit_handler+0xc>)
 800860e:	4903      	ldr	r1, [pc, #12]	@ (800861c <stdio_exit_handler+0x10>)
 8008610:	4803      	ldr	r0, [pc, #12]	@ (8008620 <stdio_exit_handler+0x14>)
 8008612:	f000 b869 	b.w	80086e8 <_fwalk_sglue>
 8008616:	bf00      	nop
 8008618:	20000024 	.word	0x20000024
 800861c:	0800b21d 	.word	0x0800b21d
 8008620:	20000034 	.word	0x20000034

08008624 <cleanup_stdio>:
 8008624:	6841      	ldr	r1, [r0, #4]
 8008626:	4b0c      	ldr	r3, [pc, #48]	@ (8008658 <cleanup_stdio+0x34>)
 8008628:	4299      	cmp	r1, r3
 800862a:	b510      	push	{r4, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	d001      	beq.n	8008634 <cleanup_stdio+0x10>
 8008630:	f002 fdf4 	bl	800b21c <_fflush_r>
 8008634:	68a1      	ldr	r1, [r4, #8]
 8008636:	4b09      	ldr	r3, [pc, #36]	@ (800865c <cleanup_stdio+0x38>)
 8008638:	4299      	cmp	r1, r3
 800863a:	d002      	beq.n	8008642 <cleanup_stdio+0x1e>
 800863c:	4620      	mov	r0, r4
 800863e:	f002 fded 	bl	800b21c <_fflush_r>
 8008642:	68e1      	ldr	r1, [r4, #12]
 8008644:	4b06      	ldr	r3, [pc, #24]	@ (8008660 <cleanup_stdio+0x3c>)
 8008646:	4299      	cmp	r1, r3
 8008648:	d004      	beq.n	8008654 <cleanup_stdio+0x30>
 800864a:	4620      	mov	r0, r4
 800864c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008650:	f002 bde4 	b.w	800b21c <_fflush_r>
 8008654:	bd10      	pop	{r4, pc}
 8008656:	bf00      	nop
 8008658:	200006d4 	.word	0x200006d4
 800865c:	2000073c 	.word	0x2000073c
 8008660:	200007a4 	.word	0x200007a4

08008664 <global_stdio_init.part.0>:
 8008664:	b510      	push	{r4, lr}
 8008666:	4b0b      	ldr	r3, [pc, #44]	@ (8008694 <global_stdio_init.part.0+0x30>)
 8008668:	4c0b      	ldr	r4, [pc, #44]	@ (8008698 <global_stdio_init.part.0+0x34>)
 800866a:	4a0c      	ldr	r2, [pc, #48]	@ (800869c <global_stdio_init.part.0+0x38>)
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	4620      	mov	r0, r4
 8008670:	2200      	movs	r2, #0
 8008672:	2104      	movs	r1, #4
 8008674:	f7ff ff94 	bl	80085a0 <std>
 8008678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800867c:	2201      	movs	r2, #1
 800867e:	2109      	movs	r1, #9
 8008680:	f7ff ff8e 	bl	80085a0 <std>
 8008684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008688:	2202      	movs	r2, #2
 800868a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868e:	2112      	movs	r1, #18
 8008690:	f7ff bf86 	b.w	80085a0 <std>
 8008694:	2000080c 	.word	0x2000080c
 8008698:	200006d4 	.word	0x200006d4
 800869c:	0800860d 	.word	0x0800860d

080086a0 <__sfp_lock_acquire>:
 80086a0:	4801      	ldr	r0, [pc, #4]	@ (80086a8 <__sfp_lock_acquire+0x8>)
 80086a2:	f000 b954 	b.w	800894e <__retarget_lock_acquire_recursive>
 80086a6:	bf00      	nop
 80086a8:	20000815 	.word	0x20000815

080086ac <__sfp_lock_release>:
 80086ac:	4801      	ldr	r0, [pc, #4]	@ (80086b4 <__sfp_lock_release+0x8>)
 80086ae:	f000 b94f 	b.w	8008950 <__retarget_lock_release_recursive>
 80086b2:	bf00      	nop
 80086b4:	20000815 	.word	0x20000815

080086b8 <__sinit>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	4604      	mov	r4, r0
 80086bc:	f7ff fff0 	bl	80086a0 <__sfp_lock_acquire>
 80086c0:	6a23      	ldr	r3, [r4, #32]
 80086c2:	b11b      	cbz	r3, 80086cc <__sinit+0x14>
 80086c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c8:	f7ff bff0 	b.w	80086ac <__sfp_lock_release>
 80086cc:	4b04      	ldr	r3, [pc, #16]	@ (80086e0 <__sinit+0x28>)
 80086ce:	6223      	str	r3, [r4, #32]
 80086d0:	4b04      	ldr	r3, [pc, #16]	@ (80086e4 <__sinit+0x2c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1f5      	bne.n	80086c4 <__sinit+0xc>
 80086d8:	f7ff ffc4 	bl	8008664 <global_stdio_init.part.0>
 80086dc:	e7f2      	b.n	80086c4 <__sinit+0xc>
 80086de:	bf00      	nop
 80086e0:	08008625 	.word	0x08008625
 80086e4:	2000080c 	.word	0x2000080c

080086e8 <_fwalk_sglue>:
 80086e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	4607      	mov	r7, r0
 80086ee:	4688      	mov	r8, r1
 80086f0:	4614      	mov	r4, r2
 80086f2:	2600      	movs	r6, #0
 80086f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086f8:	f1b9 0901 	subs.w	r9, r9, #1
 80086fc:	d505      	bpl.n	800870a <_fwalk_sglue+0x22>
 80086fe:	6824      	ldr	r4, [r4, #0]
 8008700:	2c00      	cmp	r4, #0
 8008702:	d1f7      	bne.n	80086f4 <_fwalk_sglue+0xc>
 8008704:	4630      	mov	r0, r6
 8008706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870a:	89ab      	ldrh	r3, [r5, #12]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d907      	bls.n	8008720 <_fwalk_sglue+0x38>
 8008710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008714:	3301      	adds	r3, #1
 8008716:	d003      	beq.n	8008720 <_fwalk_sglue+0x38>
 8008718:	4629      	mov	r1, r5
 800871a:	4638      	mov	r0, r7
 800871c:	47c0      	blx	r8
 800871e:	4306      	orrs	r6, r0
 8008720:	3568      	adds	r5, #104	@ 0x68
 8008722:	e7e9      	b.n	80086f8 <_fwalk_sglue+0x10>

08008724 <sniprintf>:
 8008724:	b40c      	push	{r2, r3}
 8008726:	b530      	push	{r4, r5, lr}
 8008728:	4b17      	ldr	r3, [pc, #92]	@ (8008788 <sniprintf+0x64>)
 800872a:	1e0c      	subs	r4, r1, #0
 800872c:	681d      	ldr	r5, [r3, #0]
 800872e:	b09d      	sub	sp, #116	@ 0x74
 8008730:	da08      	bge.n	8008744 <sniprintf+0x20>
 8008732:	238b      	movs	r3, #139	@ 0x8b
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800873a:	b01d      	add	sp, #116	@ 0x74
 800873c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008740:	b002      	add	sp, #8
 8008742:	4770      	bx	lr
 8008744:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008748:	f8ad 3014 	strh.w	r3, [sp, #20]
 800874c:	bf14      	ite	ne
 800874e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008752:	4623      	moveq	r3, r4
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	9307      	str	r3, [sp, #28]
 8008758:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800875c:	9002      	str	r0, [sp, #8]
 800875e:	9006      	str	r0, [sp, #24]
 8008760:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008764:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008766:	ab21      	add	r3, sp, #132	@ 0x84
 8008768:	a902      	add	r1, sp, #8
 800876a:	4628      	mov	r0, r5
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	f002 fbd5 	bl	800af1c <_svfiprintf_r>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	bfbc      	itt	lt
 8008776:	238b      	movlt	r3, #139	@ 0x8b
 8008778:	602b      	strlt	r3, [r5, #0]
 800877a:	2c00      	cmp	r4, #0
 800877c:	d0dd      	beq.n	800873a <sniprintf+0x16>
 800877e:	9b02      	ldr	r3, [sp, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e7d9      	b.n	800873a <sniprintf+0x16>
 8008786:	bf00      	nop
 8008788:	20000030 	.word	0x20000030

0800878c <siprintf>:
 800878c:	b40e      	push	{r1, r2, r3}
 800878e:	b500      	push	{lr}
 8008790:	b09c      	sub	sp, #112	@ 0x70
 8008792:	ab1d      	add	r3, sp, #116	@ 0x74
 8008794:	9002      	str	r0, [sp, #8]
 8008796:	9006      	str	r0, [sp, #24]
 8008798:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800879c:	4809      	ldr	r0, [pc, #36]	@ (80087c4 <siprintf+0x38>)
 800879e:	9107      	str	r1, [sp, #28]
 80087a0:	9104      	str	r1, [sp, #16]
 80087a2:	4909      	ldr	r1, [pc, #36]	@ (80087c8 <siprintf+0x3c>)
 80087a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a8:	9105      	str	r1, [sp, #20]
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	a902      	add	r1, sp, #8
 80087b0:	f002 fbb4 	bl	800af1c <_svfiprintf_r>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	b01c      	add	sp, #112	@ 0x70
 80087bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c0:	b003      	add	sp, #12
 80087c2:	4770      	bx	lr
 80087c4:	20000030 	.word	0x20000030
 80087c8:	ffff0208 	.word	0xffff0208

080087cc <__sread>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	460c      	mov	r4, r1
 80087d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d4:	f000 f86c 	bl	80088b0 <_read_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	bfab      	itete	ge
 80087dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087de:	89a3      	ldrhlt	r3, [r4, #12]
 80087e0:	181b      	addge	r3, r3, r0
 80087e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087e6:	bfac      	ite	ge
 80087e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087ea:	81a3      	strhlt	r3, [r4, #12]
 80087ec:	bd10      	pop	{r4, pc}

080087ee <__swrite>:
 80087ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f2:	461f      	mov	r7, r3
 80087f4:	898b      	ldrh	r3, [r1, #12]
 80087f6:	05db      	lsls	r3, r3, #23
 80087f8:	4605      	mov	r5, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	4616      	mov	r6, r2
 80087fe:	d505      	bpl.n	800880c <__swrite+0x1e>
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	2302      	movs	r3, #2
 8008806:	2200      	movs	r2, #0
 8008808:	f000 f840 	bl	800888c <_lseek_r>
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	4632      	mov	r2, r6
 800881a:	463b      	mov	r3, r7
 800881c:	4628      	mov	r0, r5
 800881e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	f000 b857 	b.w	80088d4 <_write_r>

08008826 <__sseek>:
 8008826:	b510      	push	{r4, lr}
 8008828:	460c      	mov	r4, r1
 800882a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882e:	f000 f82d 	bl	800888c <_lseek_r>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	bf15      	itete	ne
 8008838:	6560      	strne	r0, [r4, #84]	@ 0x54
 800883a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800883e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008842:	81a3      	strheq	r3, [r4, #12]
 8008844:	bf18      	it	ne
 8008846:	81a3      	strhne	r3, [r4, #12]
 8008848:	bd10      	pop	{r4, pc}

0800884a <__sclose>:
 800884a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884e:	f000 b80d 	b.w	800886c <_close_r>

08008852 <memset>:
 8008852:	4402      	add	r2, r0
 8008854:	4603      	mov	r3, r0
 8008856:	4293      	cmp	r3, r2
 8008858:	d100      	bne.n	800885c <memset+0xa>
 800885a:	4770      	bx	lr
 800885c:	f803 1b01 	strb.w	r1, [r3], #1
 8008860:	e7f9      	b.n	8008856 <memset+0x4>
	...

08008864 <_localeconv_r>:
 8008864:	4800      	ldr	r0, [pc, #0]	@ (8008868 <_localeconv_r+0x4>)
 8008866:	4770      	bx	lr
 8008868:	20000170 	.word	0x20000170

0800886c <_close_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4d06      	ldr	r5, [pc, #24]	@ (8008888 <_close_r+0x1c>)
 8008870:	2300      	movs	r3, #0
 8008872:	4604      	mov	r4, r0
 8008874:	4608      	mov	r0, r1
 8008876:	602b      	str	r3, [r5, #0]
 8008878:	f7fa fc41 	bl	80030fe <_close>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_close_r+0x1a>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b103      	cbz	r3, 8008886 <_close_r+0x1a>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20000810 	.word	0x20000810

0800888c <_lseek_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4d07      	ldr	r5, [pc, #28]	@ (80088ac <_lseek_r+0x20>)
 8008890:	4604      	mov	r4, r0
 8008892:	4608      	mov	r0, r1
 8008894:	4611      	mov	r1, r2
 8008896:	2200      	movs	r2, #0
 8008898:	602a      	str	r2, [r5, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	f7fa fc56 	bl	800314c <_lseek>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_lseek_r+0x1e>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_lseek_r+0x1e>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000810 	.word	0x20000810

080088b0 <_read_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	@ (80088d0 <_read_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7fa fbe4 	bl	800308c <_read>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_read_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_read_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000810 	.word	0x20000810

080088d4 <_write_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	@ (80088f4 <_write_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7fa fbef 	bl	80030c6 <_write>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_write_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_write_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	20000810 	.word	0x20000810

080088f8 <__errno>:
 80088f8:	4b01      	ldr	r3, [pc, #4]	@ (8008900 <__errno+0x8>)
 80088fa:	6818      	ldr	r0, [r3, #0]
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	20000030 	.word	0x20000030

08008904 <__libc_init_array>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	4d0d      	ldr	r5, [pc, #52]	@ (800893c <__libc_init_array+0x38>)
 8008908:	4c0d      	ldr	r4, [pc, #52]	@ (8008940 <__libc_init_array+0x3c>)
 800890a:	1b64      	subs	r4, r4, r5
 800890c:	10a4      	asrs	r4, r4, #2
 800890e:	2600      	movs	r6, #0
 8008910:	42a6      	cmp	r6, r4
 8008912:	d109      	bne.n	8008928 <__libc_init_array+0x24>
 8008914:	4d0b      	ldr	r5, [pc, #44]	@ (8008944 <__libc_init_array+0x40>)
 8008916:	4c0c      	ldr	r4, [pc, #48]	@ (8008948 <__libc_init_array+0x44>)
 8008918:	f003 fbee 	bl	800c0f8 <_init>
 800891c:	1b64      	subs	r4, r4, r5
 800891e:	10a4      	asrs	r4, r4, #2
 8008920:	2600      	movs	r6, #0
 8008922:	42a6      	cmp	r6, r4
 8008924:	d105      	bne.n	8008932 <__libc_init_array+0x2e>
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	f855 3b04 	ldr.w	r3, [r5], #4
 800892c:	4798      	blx	r3
 800892e:	3601      	adds	r6, #1
 8008930:	e7ee      	b.n	8008910 <__libc_init_array+0xc>
 8008932:	f855 3b04 	ldr.w	r3, [r5], #4
 8008936:	4798      	blx	r3
 8008938:	3601      	adds	r6, #1
 800893a:	e7f2      	b.n	8008922 <__libc_init_array+0x1e>
 800893c:	0800c620 	.word	0x0800c620
 8008940:	0800c620 	.word	0x0800c620
 8008944:	0800c620 	.word	0x0800c620
 8008948:	0800c624 	.word	0x0800c624

0800894c <__retarget_lock_init_recursive>:
 800894c:	4770      	bx	lr

0800894e <__retarget_lock_acquire_recursive>:
 800894e:	4770      	bx	lr

08008950 <__retarget_lock_release_recursive>:
 8008950:	4770      	bx	lr
	...

08008954 <nanf>:
 8008954:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800895c <nanf+0x8>
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	7fc00000 	.word	0x7fc00000

08008960 <quorem>:
 8008960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	6903      	ldr	r3, [r0, #16]
 8008966:	690c      	ldr	r4, [r1, #16]
 8008968:	42a3      	cmp	r3, r4
 800896a:	4607      	mov	r7, r0
 800896c:	db7e      	blt.n	8008a6c <quorem+0x10c>
 800896e:	3c01      	subs	r4, #1
 8008970:	f101 0814 	add.w	r8, r1, #20
 8008974:	00a3      	lsls	r3, r4, #2
 8008976:	f100 0514 	add.w	r5, r0, #20
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800898a:	3301      	adds	r3, #1
 800898c:	429a      	cmp	r2, r3
 800898e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008992:	fbb2 f6f3 	udiv	r6, r2, r3
 8008996:	d32e      	bcc.n	80089f6 <quorem+0x96>
 8008998:	f04f 0a00 	mov.w	sl, #0
 800899c:	46c4      	mov	ip, r8
 800899e:	46ae      	mov	lr, r5
 80089a0:	46d3      	mov	fp, sl
 80089a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089a6:	b298      	uxth	r0, r3
 80089a8:	fb06 a000 	mla	r0, r6, r0, sl
 80089ac:	0c02      	lsrs	r2, r0, #16
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	fb06 2303 	mla	r3, r6, r3, r2
 80089b4:	f8de 2000 	ldr.w	r2, [lr]
 80089b8:	b280      	uxth	r0, r0
 80089ba:	b292      	uxth	r2, r2
 80089bc:	1a12      	subs	r2, r2, r0
 80089be:	445a      	add	r2, fp
 80089c0:	f8de 0000 	ldr.w	r0, [lr]
 80089c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089d2:	b292      	uxth	r2, r2
 80089d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089d8:	45e1      	cmp	r9, ip
 80089da:	f84e 2b04 	str.w	r2, [lr], #4
 80089de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80089e2:	d2de      	bcs.n	80089a2 <quorem+0x42>
 80089e4:	9b00      	ldr	r3, [sp, #0]
 80089e6:	58eb      	ldr	r3, [r5, r3]
 80089e8:	b92b      	cbnz	r3, 80089f6 <quorem+0x96>
 80089ea:	9b01      	ldr	r3, [sp, #4]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	429d      	cmp	r5, r3
 80089f0:	461a      	mov	r2, r3
 80089f2:	d32f      	bcc.n	8008a54 <quorem+0xf4>
 80089f4:	613c      	str	r4, [r7, #16]
 80089f6:	4638      	mov	r0, r7
 80089f8:	f001 f9c2 	bl	8009d80 <__mcmp>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	db25      	blt.n	8008a4c <quorem+0xec>
 8008a00:	4629      	mov	r1, r5
 8008a02:	2000      	movs	r0, #0
 8008a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a08:	f8d1 c000 	ldr.w	ip, [r1]
 8008a0c:	fa1f fe82 	uxth.w	lr, r2
 8008a10:	fa1f f38c 	uxth.w	r3, ip
 8008a14:	eba3 030e 	sub.w	r3, r3, lr
 8008a18:	4403      	add	r3, r0
 8008a1a:	0c12      	lsrs	r2, r2, #16
 8008a1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2a:	45c1      	cmp	r9, r8
 8008a2c:	f841 3b04 	str.w	r3, [r1], #4
 8008a30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a34:	d2e6      	bcs.n	8008a04 <quorem+0xa4>
 8008a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a3e:	b922      	cbnz	r2, 8008a4a <quorem+0xea>
 8008a40:	3b04      	subs	r3, #4
 8008a42:	429d      	cmp	r5, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	d30b      	bcc.n	8008a60 <quorem+0x100>
 8008a48:	613c      	str	r4, [r7, #16]
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	b003      	add	sp, #12
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	6812      	ldr	r2, [r2, #0]
 8008a56:	3b04      	subs	r3, #4
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	d1cb      	bne.n	80089f4 <quorem+0x94>
 8008a5c:	3c01      	subs	r4, #1
 8008a5e:	e7c6      	b.n	80089ee <quorem+0x8e>
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	3b04      	subs	r3, #4
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	d1ef      	bne.n	8008a48 <quorem+0xe8>
 8008a68:	3c01      	subs	r4, #1
 8008a6a:	e7ea      	b.n	8008a42 <quorem+0xe2>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7ee      	b.n	8008a4e <quorem+0xee>

08008a70 <_dtoa_r>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	69c7      	ldr	r7, [r0, #28]
 8008a76:	b099      	sub	sp, #100	@ 0x64
 8008a78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008a7c:	ec55 4b10 	vmov	r4, r5, d0
 8008a80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008a82:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a84:	4683      	mov	fp, r0
 8008a86:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a8a:	b97f      	cbnz	r7, 8008aac <_dtoa_r+0x3c>
 8008a8c:	2010      	movs	r0, #16
 8008a8e:	f000 fdfd 	bl	800968c <malloc>
 8008a92:	4602      	mov	r2, r0
 8008a94:	f8cb 001c 	str.w	r0, [fp, #28]
 8008a98:	b920      	cbnz	r0, 8008aa4 <_dtoa_r+0x34>
 8008a9a:	4ba7      	ldr	r3, [pc, #668]	@ (8008d38 <_dtoa_r+0x2c8>)
 8008a9c:	21ef      	movs	r1, #239	@ 0xef
 8008a9e:	48a7      	ldr	r0, [pc, #668]	@ (8008d3c <_dtoa_r+0x2cc>)
 8008aa0:	f002 fc36 	bl	800b310 <__assert_func>
 8008aa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008aa8:	6007      	str	r7, [r0, #0]
 8008aaa:	60c7      	str	r7, [r0, #12]
 8008aac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ab0:	6819      	ldr	r1, [r3, #0]
 8008ab2:	b159      	cbz	r1, 8008acc <_dtoa_r+0x5c>
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	604a      	str	r2, [r1, #4]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	4093      	lsls	r3, r2
 8008abc:	608b      	str	r3, [r1, #8]
 8008abe:	4658      	mov	r0, fp
 8008ac0:	f000 feda 	bl	8009878 <_Bfree>
 8008ac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	1e2b      	subs	r3, r5, #0
 8008ace:	bfb9      	ittee	lt
 8008ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ad4:	9303      	strlt	r3, [sp, #12]
 8008ad6:	2300      	movge	r3, #0
 8008ad8:	6033      	strge	r3, [r6, #0]
 8008ada:	9f03      	ldr	r7, [sp, #12]
 8008adc:	4b98      	ldr	r3, [pc, #608]	@ (8008d40 <_dtoa_r+0x2d0>)
 8008ade:	bfbc      	itt	lt
 8008ae0:	2201      	movlt	r2, #1
 8008ae2:	6032      	strlt	r2, [r6, #0]
 8008ae4:	43bb      	bics	r3, r7
 8008ae6:	d112      	bne.n	8008b0e <_dtoa_r+0x9e>
 8008ae8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008aea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008af4:	4323      	orrs	r3, r4
 8008af6:	f000 854d 	beq.w	8009594 <_dtoa_r+0xb24>
 8008afa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008afc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008d54 <_dtoa_r+0x2e4>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 854f 	beq.w	80095a4 <_dtoa_r+0xb34>
 8008b06:	f10a 0303 	add.w	r3, sl, #3
 8008b0a:	f000 bd49 	b.w	80095a0 <_dtoa_r+0xb30>
 8008b0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	ec51 0b17 	vmov	r0, r1, d7
 8008b18:	2300      	movs	r3, #0
 8008b1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008b1e:	f7f7 fffb 	bl	8000b18 <__aeabi_dcmpeq>
 8008b22:	4680      	mov	r8, r0
 8008b24:	b158      	cbz	r0, 8008b3e <_dtoa_r+0xce>
 8008b26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b28:	2301      	movs	r3, #1
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b2e:	b113      	cbz	r3, 8008b36 <_dtoa_r+0xc6>
 8008b30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b32:	4b84      	ldr	r3, [pc, #528]	@ (8008d44 <_dtoa_r+0x2d4>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008d58 <_dtoa_r+0x2e8>
 8008b3a:	f000 bd33 	b.w	80095a4 <_dtoa_r+0xb34>
 8008b3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008b42:	aa16      	add	r2, sp, #88	@ 0x58
 8008b44:	a917      	add	r1, sp, #92	@ 0x5c
 8008b46:	4658      	mov	r0, fp
 8008b48:	f001 fa3a 	bl	8009fc0 <__d2b>
 8008b4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b50:	4681      	mov	r9, r0
 8008b52:	2e00      	cmp	r6, #0
 8008b54:	d077      	beq.n	8008c46 <_dtoa_r+0x1d6>
 8008b56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b70:	4619      	mov	r1, r3
 8008b72:	2200      	movs	r2, #0
 8008b74:	4b74      	ldr	r3, [pc, #464]	@ (8008d48 <_dtoa_r+0x2d8>)
 8008b76:	f7f7 fbaf 	bl	80002d8 <__aeabi_dsub>
 8008b7a:	a369      	add	r3, pc, #420	@ (adr r3, 8008d20 <_dtoa_r+0x2b0>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fd62 	bl	8000648 <__aeabi_dmul>
 8008b84:	a368      	add	r3, pc, #416	@ (adr r3, 8008d28 <_dtoa_r+0x2b8>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fba7 	bl	80002dc <__adddf3>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4630      	mov	r0, r6
 8008b92:	460d      	mov	r5, r1
 8008b94:	f7f7 fcee 	bl	8000574 <__aeabi_i2d>
 8008b98:	a365      	add	r3, pc, #404	@ (adr r3, 8008d30 <_dtoa_r+0x2c0>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fd53 	bl	8000648 <__aeabi_dmul>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 fb97 	bl	80002dc <__adddf3>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	f7f7 fff9 	bl	8000ba8 <__aeabi_d2iz>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4607      	mov	r7, r0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7f7 ffb4 	bl	8000b2c <__aeabi_dcmplt>
 8008bc4:	b140      	cbz	r0, 8008bd8 <_dtoa_r+0x168>
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f7f7 fcd4 	bl	8000574 <__aeabi_i2d>
 8008bcc:	4622      	mov	r2, r4
 8008bce:	462b      	mov	r3, r5
 8008bd0:	f7f7 ffa2 	bl	8000b18 <__aeabi_dcmpeq>
 8008bd4:	b900      	cbnz	r0, 8008bd8 <_dtoa_r+0x168>
 8008bd6:	3f01      	subs	r7, #1
 8008bd8:	2f16      	cmp	r7, #22
 8008bda:	d851      	bhi.n	8008c80 <_dtoa_r+0x210>
 8008bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8008d4c <_dtoa_r+0x2dc>)
 8008bde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bea:	f7f7 ff9f 	bl	8000b2c <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	d048      	beq.n	8008c84 <_dtoa_r+0x214>
 8008bf2:	3f01      	subs	r7, #1
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008bfa:	1b9b      	subs	r3, r3, r6
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	bf44      	itt	mi
 8008c00:	f1c3 0801 	rsbmi	r8, r3, #1
 8008c04:	2300      	movmi	r3, #0
 8008c06:	9208      	str	r2, [sp, #32]
 8008c08:	bf54      	ite	pl
 8008c0a:	f04f 0800 	movpl.w	r8, #0
 8008c0e:	9308      	strmi	r3, [sp, #32]
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	db39      	blt.n	8008c88 <_dtoa_r+0x218>
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008c18:	443b      	add	r3, r7
 8008c1a:	9308      	str	r3, [sp, #32]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	2b09      	cmp	r3, #9
 8008c24:	d864      	bhi.n	8008cf0 <_dtoa_r+0x280>
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	bfc4      	itt	gt
 8008c2a:	3b04      	subgt	r3, #4
 8008c2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	f1a3 0302 	sub.w	r3, r3, #2
 8008c34:	bfcc      	ite	gt
 8008c36:	2400      	movgt	r4, #0
 8008c38:	2401      	movle	r4, #1
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d863      	bhi.n	8008d06 <_dtoa_r+0x296>
 8008c3e:	e8df f003 	tbb	[pc, r3]
 8008c42:	372a      	.short	0x372a
 8008c44:	5535      	.short	0x5535
 8008c46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008c4a:	441e      	add	r6, r3
 8008c4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c50:	2b20      	cmp	r3, #32
 8008c52:	bfc1      	itttt	gt
 8008c54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c58:	409f      	lslgt	r7, r3
 8008c5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c62:	bfd6      	itet	le
 8008c64:	f1c3 0320 	rsble	r3, r3, #32
 8008c68:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c6c:	fa04 f003 	lslle.w	r0, r4, r3
 8008c70:	f7f7 fc70 	bl	8000554 <__aeabi_ui2d>
 8008c74:	2201      	movs	r2, #1
 8008c76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c7a:	3e01      	subs	r6, #1
 8008c7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008c7e:	e777      	b.n	8008b70 <_dtoa_r+0x100>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e7b8      	b.n	8008bf6 <_dtoa_r+0x186>
 8008c84:	9012      	str	r0, [sp, #72]	@ 0x48
 8008c86:	e7b7      	b.n	8008bf8 <_dtoa_r+0x188>
 8008c88:	427b      	negs	r3, r7
 8008c8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	eba8 0807 	sub.w	r8, r8, r7
 8008c92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c94:	e7c4      	b.n	8008c20 <_dtoa_r+0x1b0>
 8008c96:	2300      	movs	r3, #0
 8008c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc35      	bgt.n	8008d0c <_dtoa_r+0x29c>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	9307      	str	r3, [sp, #28]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008caa:	e00b      	b.n	8008cc4 <_dtoa_r+0x254>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e7f3      	b.n	8008c98 <_dtoa_r+0x228>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cb6:	18fb      	adds	r3, r7, r3
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	9307      	str	r3, [sp, #28]
 8008cc0:	bfb8      	it	lt
 8008cc2:	2301      	movlt	r3, #1
 8008cc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008cc8:	2100      	movs	r1, #0
 8008cca:	2204      	movs	r2, #4
 8008ccc:	f102 0514 	add.w	r5, r2, #20
 8008cd0:	429d      	cmp	r5, r3
 8008cd2:	d91f      	bls.n	8008d14 <_dtoa_r+0x2a4>
 8008cd4:	6041      	str	r1, [r0, #4]
 8008cd6:	4658      	mov	r0, fp
 8008cd8:	f000 fd8e 	bl	80097f8 <_Balloc>
 8008cdc:	4682      	mov	sl, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d13c      	bne.n	8008d5c <_dtoa_r+0x2ec>
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d50 <_dtoa_r+0x2e0>)
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008cea:	e6d8      	b.n	8008a9e <_dtoa_r+0x2e>
 8008cec:	2301      	movs	r3, #1
 8008cee:	e7e0      	b.n	8008cb2 <_dtoa_r+0x242>
 8008cf0:	2401      	movs	r4, #1
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008cf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	9307      	str	r3, [sp, #28]
 8008d00:	2200      	movs	r2, #0
 8008d02:	2312      	movs	r3, #18
 8008d04:	e7d0      	b.n	8008ca8 <_dtoa_r+0x238>
 8008d06:	2301      	movs	r3, #1
 8008d08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d0a:	e7f5      	b.n	8008cf8 <_dtoa_r+0x288>
 8008d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	e7d7      	b.n	8008cc4 <_dtoa_r+0x254>
 8008d14:	3101      	adds	r1, #1
 8008d16:	0052      	lsls	r2, r2, #1
 8008d18:	e7d8      	b.n	8008ccc <_dtoa_r+0x25c>
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	636f4361 	.word	0x636f4361
 8008d24:	3fd287a7 	.word	0x3fd287a7
 8008d28:	8b60c8b3 	.word	0x8b60c8b3
 8008d2c:	3fc68a28 	.word	0x3fc68a28
 8008d30:	509f79fb 	.word	0x509f79fb
 8008d34:	3fd34413 	.word	0x3fd34413
 8008d38:	0800c22e 	.word	0x0800c22e
 8008d3c:	0800c245 	.word	0x0800c245
 8008d40:	7ff00000 	.word	0x7ff00000
 8008d44:	0800c1f9 	.word	0x0800c1f9
 8008d48:	3ff80000 	.word	0x3ff80000
 8008d4c:	0800c340 	.word	0x0800c340
 8008d50:	0800c29d 	.word	0x0800c29d
 8008d54:	0800c22a 	.word	0x0800c22a
 8008d58:	0800c1f8 	.word	0x0800c1f8
 8008d5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d60:	6018      	str	r0, [r3, #0]
 8008d62:	9b07      	ldr	r3, [sp, #28]
 8008d64:	2b0e      	cmp	r3, #14
 8008d66:	f200 80a4 	bhi.w	8008eb2 <_dtoa_r+0x442>
 8008d6a:	2c00      	cmp	r4, #0
 8008d6c:	f000 80a1 	beq.w	8008eb2 <_dtoa_r+0x442>
 8008d70:	2f00      	cmp	r7, #0
 8008d72:	dd33      	ble.n	8008ddc <_dtoa_r+0x36c>
 8008d74:	4bad      	ldr	r3, [pc, #692]	@ (800902c <_dtoa_r+0x5bc>)
 8008d76:	f007 020f 	and.w	r2, r7, #15
 8008d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d7e:	ed93 7b00 	vldr	d7, [r3]
 8008d82:	05f8      	lsls	r0, r7, #23
 8008d84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008d88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008d8c:	d516      	bpl.n	8008dbc <_dtoa_r+0x34c>
 8008d8e:	4ba8      	ldr	r3, [pc, #672]	@ (8009030 <_dtoa_r+0x5c0>)
 8008d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d98:	f7f7 fd80 	bl	800089c <__aeabi_ddiv>
 8008d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da0:	f004 040f 	and.w	r4, r4, #15
 8008da4:	2603      	movs	r6, #3
 8008da6:	4da2      	ldr	r5, [pc, #648]	@ (8009030 <_dtoa_r+0x5c0>)
 8008da8:	b954      	cbnz	r4, 8008dc0 <_dtoa_r+0x350>
 8008daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db2:	f7f7 fd73 	bl	800089c <__aeabi_ddiv>
 8008db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dba:	e028      	b.n	8008e0e <_dtoa_r+0x39e>
 8008dbc:	2602      	movs	r6, #2
 8008dbe:	e7f2      	b.n	8008da6 <_dtoa_r+0x336>
 8008dc0:	07e1      	lsls	r1, r4, #31
 8008dc2:	d508      	bpl.n	8008dd6 <_dtoa_r+0x366>
 8008dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dcc:	f7f7 fc3c 	bl	8000648 <__aeabi_dmul>
 8008dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	1064      	asrs	r4, r4, #1
 8008dd8:	3508      	adds	r5, #8
 8008dda:	e7e5      	b.n	8008da8 <_dtoa_r+0x338>
 8008ddc:	f000 80d2 	beq.w	8008f84 <_dtoa_r+0x514>
 8008de0:	427c      	negs	r4, r7
 8008de2:	4b92      	ldr	r3, [pc, #584]	@ (800902c <_dtoa_r+0x5bc>)
 8008de4:	4d92      	ldr	r5, [pc, #584]	@ (8009030 <_dtoa_r+0x5c0>)
 8008de6:	f004 020f 	and.w	r2, r4, #15
 8008dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008df6:	f7f7 fc27 	bl	8000648 <__aeabi_dmul>
 8008dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dfe:	1124      	asrs	r4, r4, #4
 8008e00:	2300      	movs	r3, #0
 8008e02:	2602      	movs	r6, #2
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	f040 80b2 	bne.w	8008f6e <_dtoa_r+0x4fe>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1d3      	bne.n	8008db6 <_dtoa_r+0x346>
 8008e0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 80b7 	beq.w	8008f88 <_dtoa_r+0x518>
 8008e1a:	4b86      	ldr	r3, [pc, #536]	@ (8009034 <_dtoa_r+0x5c4>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fe83 	bl	8000b2c <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f000 80ae 	beq.w	8008f88 <_dtoa_r+0x518>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80aa 	beq.w	8008f88 <_dtoa_r+0x518>
 8008e34:	9b00      	ldr	r3, [sp, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dd37      	ble.n	8008eaa <_dtoa_r+0x43a>
 8008e3a:	1e7b      	subs	r3, r7, #1
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4b7d      	ldr	r3, [pc, #500]	@ (8009038 <_dtoa_r+0x5c8>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7f7 fbff 	bl	8000648 <__aeabi_dmul>
 8008e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e4e:	9c00      	ldr	r4, [sp, #0]
 8008e50:	3601      	adds	r6, #1
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7f7 fb8e 	bl	8000574 <__aeabi_i2d>
 8008e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e5c:	f7f7 fbf4 	bl	8000648 <__aeabi_dmul>
 8008e60:	4b76      	ldr	r3, [pc, #472]	@ (800903c <_dtoa_r+0x5cc>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	f7f7 fa3a 	bl	80002dc <__adddf3>
 8008e68:	4605      	mov	r5, r0
 8008e6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	f040 808d 	bne.w	8008f8e <_dtoa_r+0x51e>
 8008e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e78:	4b71      	ldr	r3, [pc, #452]	@ (8009040 <_dtoa_r+0x5d0>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f7f7 fa2c 	bl	80002d8 <__aeabi_dsub>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e88:	462a      	mov	r2, r5
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	f7f7 fe6c 	bl	8000b68 <__aeabi_dcmpgt>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f040 828b 	bne.w	80093ac <_dtoa_r+0x93c>
 8008e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ea0:	f7f7 fe44 	bl	8000b2c <__aeabi_dcmplt>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f040 8128 	bne.w	80090fa <_dtoa_r+0x68a>
 8008eaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008eae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008eb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f2c0 815a 	blt.w	800916e <_dtoa_r+0x6fe>
 8008eba:	2f0e      	cmp	r7, #14
 8008ebc:	f300 8157 	bgt.w	800916e <_dtoa_r+0x6fe>
 8008ec0:	4b5a      	ldr	r3, [pc, #360]	@ (800902c <_dtoa_r+0x5bc>)
 8008ec2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ec6:	ed93 7b00 	vldr	d7, [r3]
 8008eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	ed8d 7b00 	vstr	d7, [sp]
 8008ed2:	da03      	bge.n	8008edc <_dtoa_r+0x46c>
 8008ed4:	9b07      	ldr	r3, [sp, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f340 8101 	ble.w	80090de <_dtoa_r+0x66e>
 8008edc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ee0:	4656      	mov	r6, sl
 8008ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	4629      	mov	r1, r5
 8008eea:	f7f7 fcd7 	bl	800089c <__aeabi_ddiv>
 8008eee:	f7f7 fe5b 	bl	8000ba8 <__aeabi_d2iz>
 8008ef2:	4680      	mov	r8, r0
 8008ef4:	f7f7 fb3e 	bl	8000574 <__aeabi_i2d>
 8008ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008efc:	f7f7 fba4 	bl	8000648 <__aeabi_dmul>
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008f0c:	f7f7 f9e4 	bl	80002d8 <__aeabi_dsub>
 8008f10:	f806 4b01 	strb.w	r4, [r6], #1
 8008f14:	9d07      	ldr	r5, [sp, #28]
 8008f16:	eba6 040a 	sub.w	r4, r6, sl
 8008f1a:	42a5      	cmp	r5, r4
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	f040 8117 	bne.w	8009152 <_dtoa_r+0x6e2>
 8008f24:	f7f7 f9da 	bl	80002dc <__adddf3>
 8008f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	f7f7 fe1a 	bl	8000b68 <__aeabi_dcmpgt>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f040 80f9 	bne.w	800912c <_dtoa_r+0x6bc>
 8008f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 fde9 	bl	8000b18 <__aeabi_dcmpeq>
 8008f46:	b118      	cbz	r0, 8008f50 <_dtoa_r+0x4e0>
 8008f48:	f018 0f01 	tst.w	r8, #1
 8008f4c:	f040 80ee 	bne.w	800912c <_dtoa_r+0x6bc>
 8008f50:	4649      	mov	r1, r9
 8008f52:	4658      	mov	r0, fp
 8008f54:	f000 fc90 	bl	8009878 <_Bfree>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	7033      	strb	r3, [r6, #0]
 8008f5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f5e:	3701      	adds	r7, #1
 8008f60:	601f      	str	r7, [r3, #0]
 8008f62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 831d 	beq.w	80095a4 <_dtoa_r+0xb34>
 8008f6a:	601e      	str	r6, [r3, #0]
 8008f6c:	e31a      	b.n	80095a4 <_dtoa_r+0xb34>
 8008f6e:	07e2      	lsls	r2, r4, #31
 8008f70:	d505      	bpl.n	8008f7e <_dtoa_r+0x50e>
 8008f72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f76:	f7f7 fb67 	bl	8000648 <__aeabi_dmul>
 8008f7a:	3601      	adds	r6, #1
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	1064      	asrs	r4, r4, #1
 8008f80:	3508      	adds	r5, #8
 8008f82:	e73f      	b.n	8008e04 <_dtoa_r+0x394>
 8008f84:	2602      	movs	r6, #2
 8008f86:	e742      	b.n	8008e0e <_dtoa_r+0x39e>
 8008f88:	9c07      	ldr	r4, [sp, #28]
 8008f8a:	9704      	str	r7, [sp, #16]
 8008f8c:	e761      	b.n	8008e52 <_dtoa_r+0x3e2>
 8008f8e:	4b27      	ldr	r3, [pc, #156]	@ (800902c <_dtoa_r+0x5bc>)
 8008f90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f9a:	4454      	add	r4, sl
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	d053      	beq.n	8009048 <_dtoa_r+0x5d8>
 8008fa0:	4928      	ldr	r1, [pc, #160]	@ (8009044 <_dtoa_r+0x5d4>)
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f7f7 fc7a 	bl	800089c <__aeabi_ddiv>
 8008fa8:	4633      	mov	r3, r6
 8008faa:	462a      	mov	r2, r5
 8008fac:	f7f7 f994 	bl	80002d8 <__aeabi_dsub>
 8008fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fb4:	4656      	mov	r6, sl
 8008fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fba:	f7f7 fdf5 	bl	8000ba8 <__aeabi_d2iz>
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	f7f7 fad8 	bl	8000574 <__aeabi_i2d>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fcc:	f7f7 f984 	bl	80002d8 <__aeabi_dsub>
 8008fd0:	3530      	adds	r5, #48	@ 0x30
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fda:	f806 5b01 	strb.w	r5, [r6], #1
 8008fde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fe2:	f7f7 fda3 	bl	8000b2c <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d171      	bne.n	80090ce <_dtoa_r+0x65e>
 8008fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fee:	4911      	ldr	r1, [pc, #68]	@ (8009034 <_dtoa_r+0x5c4>)
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f7f7 f971 	bl	80002d8 <__aeabi_dsub>
 8008ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ffa:	f7f7 fd97 	bl	8000b2c <__aeabi_dcmplt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f040 8095 	bne.w	800912e <_dtoa_r+0x6be>
 8009004:	42a6      	cmp	r6, r4
 8009006:	f43f af50 	beq.w	8008eaa <_dtoa_r+0x43a>
 800900a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800900e:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <_dtoa_r+0x5c8>)
 8009010:	2200      	movs	r2, #0
 8009012:	f7f7 fb19 	bl	8000648 <__aeabi_dmul>
 8009016:	4b08      	ldr	r3, [pc, #32]	@ (8009038 <_dtoa_r+0x5c8>)
 8009018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800901c:	2200      	movs	r2, #0
 800901e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009022:	f7f7 fb11 	bl	8000648 <__aeabi_dmul>
 8009026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800902a:	e7c4      	b.n	8008fb6 <_dtoa_r+0x546>
 800902c:	0800c340 	.word	0x0800c340
 8009030:	0800c318 	.word	0x0800c318
 8009034:	3ff00000 	.word	0x3ff00000
 8009038:	40240000 	.word	0x40240000
 800903c:	401c0000 	.word	0x401c0000
 8009040:	40140000 	.word	0x40140000
 8009044:	3fe00000 	.word	0x3fe00000
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	f7f7 fafc 	bl	8000648 <__aeabi_dmul>
 8009050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009054:	9415      	str	r4, [sp, #84]	@ 0x54
 8009056:	4656      	mov	r6, sl
 8009058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800905c:	f7f7 fda4 	bl	8000ba8 <__aeabi_d2iz>
 8009060:	4605      	mov	r5, r0
 8009062:	f7f7 fa87 	bl	8000574 <__aeabi_i2d>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800906e:	f7f7 f933 	bl	80002d8 <__aeabi_dsub>
 8009072:	3530      	adds	r5, #48	@ 0x30
 8009074:	f806 5b01 	strb.w	r5, [r6], #1
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	42a6      	cmp	r6, r4
 800907e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009082:	f04f 0200 	mov.w	r2, #0
 8009086:	d124      	bne.n	80090d2 <_dtoa_r+0x662>
 8009088:	4bac      	ldr	r3, [pc, #688]	@ (800933c <_dtoa_r+0x8cc>)
 800908a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800908e:	f7f7 f925 	bl	80002dc <__adddf3>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800909a:	f7f7 fd65 	bl	8000b68 <__aeabi_dcmpgt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d145      	bne.n	800912e <_dtoa_r+0x6be>
 80090a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090a6:	49a5      	ldr	r1, [pc, #660]	@ (800933c <_dtoa_r+0x8cc>)
 80090a8:	2000      	movs	r0, #0
 80090aa:	f7f7 f915 	bl	80002d8 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b6:	f7f7 fd39 	bl	8000b2c <__aeabi_dcmplt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f43f aef5 	beq.w	8008eaa <_dtoa_r+0x43a>
 80090c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80090c2:	1e73      	subs	r3, r6, #1
 80090c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80090c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ca:	2b30      	cmp	r3, #48	@ 0x30
 80090cc:	d0f8      	beq.n	80090c0 <_dtoa_r+0x650>
 80090ce:	9f04      	ldr	r7, [sp, #16]
 80090d0:	e73e      	b.n	8008f50 <_dtoa_r+0x4e0>
 80090d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009340 <_dtoa_r+0x8d0>)
 80090d4:	f7f7 fab8 	bl	8000648 <__aeabi_dmul>
 80090d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090dc:	e7bc      	b.n	8009058 <_dtoa_r+0x5e8>
 80090de:	d10c      	bne.n	80090fa <_dtoa_r+0x68a>
 80090e0:	4b98      	ldr	r3, [pc, #608]	@ (8009344 <_dtoa_r+0x8d4>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090e8:	f7f7 faae 	bl	8000648 <__aeabi_dmul>
 80090ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090f0:	f7f7 fd30 	bl	8000b54 <__aeabi_dcmpge>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f000 8157 	beq.w	80093a8 <_dtoa_r+0x938>
 80090fa:	2400      	movs	r4, #0
 80090fc:	4625      	mov	r5, r4
 80090fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009100:	43db      	mvns	r3, r3
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	4656      	mov	r6, sl
 8009106:	2700      	movs	r7, #0
 8009108:	4621      	mov	r1, r4
 800910a:	4658      	mov	r0, fp
 800910c:	f000 fbb4 	bl	8009878 <_Bfree>
 8009110:	2d00      	cmp	r5, #0
 8009112:	d0dc      	beq.n	80090ce <_dtoa_r+0x65e>
 8009114:	b12f      	cbz	r7, 8009122 <_dtoa_r+0x6b2>
 8009116:	42af      	cmp	r7, r5
 8009118:	d003      	beq.n	8009122 <_dtoa_r+0x6b2>
 800911a:	4639      	mov	r1, r7
 800911c:	4658      	mov	r0, fp
 800911e:	f000 fbab 	bl	8009878 <_Bfree>
 8009122:	4629      	mov	r1, r5
 8009124:	4658      	mov	r0, fp
 8009126:	f000 fba7 	bl	8009878 <_Bfree>
 800912a:	e7d0      	b.n	80090ce <_dtoa_r+0x65e>
 800912c:	9704      	str	r7, [sp, #16]
 800912e:	4633      	mov	r3, r6
 8009130:	461e      	mov	r6, r3
 8009132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009136:	2a39      	cmp	r2, #57	@ 0x39
 8009138:	d107      	bne.n	800914a <_dtoa_r+0x6da>
 800913a:	459a      	cmp	sl, r3
 800913c:	d1f8      	bne.n	8009130 <_dtoa_r+0x6c0>
 800913e:	9a04      	ldr	r2, [sp, #16]
 8009140:	3201      	adds	r2, #1
 8009142:	9204      	str	r2, [sp, #16]
 8009144:	2230      	movs	r2, #48	@ 0x30
 8009146:	f88a 2000 	strb.w	r2, [sl]
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	3201      	adds	r2, #1
 800914e:	701a      	strb	r2, [r3, #0]
 8009150:	e7bd      	b.n	80090ce <_dtoa_r+0x65e>
 8009152:	4b7b      	ldr	r3, [pc, #492]	@ (8009340 <_dtoa_r+0x8d0>)
 8009154:	2200      	movs	r2, #0
 8009156:	f7f7 fa77 	bl	8000648 <__aeabi_dmul>
 800915a:	2200      	movs	r2, #0
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	f7f7 fcd9 	bl	8000b18 <__aeabi_dcmpeq>
 8009166:	2800      	cmp	r0, #0
 8009168:	f43f aebb 	beq.w	8008ee2 <_dtoa_r+0x472>
 800916c:	e6f0      	b.n	8008f50 <_dtoa_r+0x4e0>
 800916e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009170:	2a00      	cmp	r2, #0
 8009172:	f000 80db 	beq.w	800932c <_dtoa_r+0x8bc>
 8009176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009178:	2a01      	cmp	r2, #1
 800917a:	f300 80bf 	bgt.w	80092fc <_dtoa_r+0x88c>
 800917e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009180:	2a00      	cmp	r2, #0
 8009182:	f000 80b7 	beq.w	80092f4 <_dtoa_r+0x884>
 8009186:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800918a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800918c:	4646      	mov	r6, r8
 800918e:	9a08      	ldr	r2, [sp, #32]
 8009190:	2101      	movs	r1, #1
 8009192:	441a      	add	r2, r3
 8009194:	4658      	mov	r0, fp
 8009196:	4498      	add	r8, r3
 8009198:	9208      	str	r2, [sp, #32]
 800919a:	f000 fc6b 	bl	8009a74 <__i2b>
 800919e:	4605      	mov	r5, r0
 80091a0:	b15e      	cbz	r6, 80091ba <_dtoa_r+0x74a>
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dd08      	ble.n	80091ba <_dtoa_r+0x74a>
 80091a8:	42b3      	cmp	r3, r6
 80091aa:	9a08      	ldr	r2, [sp, #32]
 80091ac:	bfa8      	it	ge
 80091ae:	4633      	movge	r3, r6
 80091b0:	eba8 0803 	sub.w	r8, r8, r3
 80091b4:	1af6      	subs	r6, r6, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091bc:	b1f3      	cbz	r3, 80091fc <_dtoa_r+0x78c>
 80091be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80b7 	beq.w	8009334 <_dtoa_r+0x8c4>
 80091c6:	b18c      	cbz	r4, 80091ec <_dtoa_r+0x77c>
 80091c8:	4629      	mov	r1, r5
 80091ca:	4622      	mov	r2, r4
 80091cc:	4658      	mov	r0, fp
 80091ce:	f000 fd11 	bl	8009bf4 <__pow5mult>
 80091d2:	464a      	mov	r2, r9
 80091d4:	4601      	mov	r1, r0
 80091d6:	4605      	mov	r5, r0
 80091d8:	4658      	mov	r0, fp
 80091da:	f000 fc61 	bl	8009aa0 <__multiply>
 80091de:	4649      	mov	r1, r9
 80091e0:	9004      	str	r0, [sp, #16]
 80091e2:	4658      	mov	r0, fp
 80091e4:	f000 fb48 	bl	8009878 <_Bfree>
 80091e8:	9b04      	ldr	r3, [sp, #16]
 80091ea:	4699      	mov	r9, r3
 80091ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091ee:	1b1a      	subs	r2, r3, r4
 80091f0:	d004      	beq.n	80091fc <_dtoa_r+0x78c>
 80091f2:	4649      	mov	r1, r9
 80091f4:	4658      	mov	r0, fp
 80091f6:	f000 fcfd 	bl	8009bf4 <__pow5mult>
 80091fa:	4681      	mov	r9, r0
 80091fc:	2101      	movs	r1, #1
 80091fe:	4658      	mov	r0, fp
 8009200:	f000 fc38 	bl	8009a74 <__i2b>
 8009204:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009206:	4604      	mov	r4, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 81cf 	beq.w	80095ac <_dtoa_r+0xb3c>
 800920e:	461a      	mov	r2, r3
 8009210:	4601      	mov	r1, r0
 8009212:	4658      	mov	r0, fp
 8009214:	f000 fcee 	bl	8009bf4 <__pow5mult>
 8009218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921a:	2b01      	cmp	r3, #1
 800921c:	4604      	mov	r4, r0
 800921e:	f300 8095 	bgt.w	800934c <_dtoa_r+0x8dc>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 8087 	bne.w	8009338 <_dtoa_r+0x8c8>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 8089 	bne.w	8009348 <_dtoa_r+0x8d8>
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800923c:	0d1b      	lsrs	r3, r3, #20
 800923e:	051b      	lsls	r3, r3, #20
 8009240:	b12b      	cbz	r3, 800924e <_dtoa_r+0x7de>
 8009242:	9b08      	ldr	r3, [sp, #32]
 8009244:	3301      	adds	r3, #1
 8009246:	9308      	str	r3, [sp, #32]
 8009248:	f108 0801 	add.w	r8, r8, #1
 800924c:	2301      	movs	r3, #1
 800924e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 81b0 	beq.w	80095b8 <_dtoa_r+0xb48>
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800925e:	6918      	ldr	r0, [r3, #16]
 8009260:	f000 fbbc 	bl	80099dc <__hi0bits>
 8009264:	f1c0 0020 	rsb	r0, r0, #32
 8009268:	9b08      	ldr	r3, [sp, #32]
 800926a:	4418      	add	r0, r3
 800926c:	f010 001f 	ands.w	r0, r0, #31
 8009270:	d077      	beq.n	8009362 <_dtoa_r+0x8f2>
 8009272:	f1c0 0320 	rsb	r3, r0, #32
 8009276:	2b04      	cmp	r3, #4
 8009278:	dd6b      	ble.n	8009352 <_dtoa_r+0x8e2>
 800927a:	9b08      	ldr	r3, [sp, #32]
 800927c:	f1c0 001c 	rsb	r0, r0, #28
 8009280:	4403      	add	r3, r0
 8009282:	4480      	add	r8, r0
 8009284:	4406      	add	r6, r0
 8009286:	9308      	str	r3, [sp, #32]
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	dd05      	ble.n	800929a <_dtoa_r+0x82a>
 800928e:	4649      	mov	r1, r9
 8009290:	4642      	mov	r2, r8
 8009292:	4658      	mov	r0, fp
 8009294:	f000 fd08 	bl	8009ca8 <__lshift>
 8009298:	4681      	mov	r9, r0
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	dd05      	ble.n	80092ac <_dtoa_r+0x83c>
 80092a0:	4621      	mov	r1, r4
 80092a2:	461a      	mov	r2, r3
 80092a4:	4658      	mov	r0, fp
 80092a6:	f000 fcff 	bl	8009ca8 <__lshift>
 80092aa:	4604      	mov	r4, r0
 80092ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d059      	beq.n	8009366 <_dtoa_r+0x8f6>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4648      	mov	r0, r9
 80092b6:	f000 fd63 	bl	8009d80 <__mcmp>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	da53      	bge.n	8009366 <_dtoa_r+0x8f6>
 80092be:	1e7b      	subs	r3, r7, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	4649      	mov	r1, r9
 80092c4:	2300      	movs	r3, #0
 80092c6:	220a      	movs	r2, #10
 80092c8:	4658      	mov	r0, fp
 80092ca:	f000 faf7 	bl	80098bc <__multadd>
 80092ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092d0:	4681      	mov	r9, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 8172 	beq.w	80095bc <_dtoa_r+0xb4c>
 80092d8:	2300      	movs	r3, #0
 80092da:	4629      	mov	r1, r5
 80092dc:	220a      	movs	r2, #10
 80092de:	4658      	mov	r0, fp
 80092e0:	f000 faec 	bl	80098bc <__multadd>
 80092e4:	9b00      	ldr	r3, [sp, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	4605      	mov	r5, r0
 80092ea:	dc67      	bgt.n	80093bc <_dtoa_r+0x94c>
 80092ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	dc41      	bgt.n	8009376 <_dtoa_r+0x906>
 80092f2:	e063      	b.n	80093bc <_dtoa_r+0x94c>
 80092f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80092fa:	e746      	b.n	800918a <_dtoa_r+0x71a>
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	1e5c      	subs	r4, r3, #1
 8009300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009302:	42a3      	cmp	r3, r4
 8009304:	bfbf      	itttt	lt
 8009306:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009308:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800930a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800930c:	1ae3      	sublt	r3, r4, r3
 800930e:	bfb4      	ite	lt
 8009310:	18d2      	addlt	r2, r2, r3
 8009312:	1b1c      	subge	r4, r3, r4
 8009314:	9b07      	ldr	r3, [sp, #28]
 8009316:	bfbc      	itt	lt
 8009318:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800931a:	2400      	movlt	r4, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfb5      	itete	lt
 8009320:	eba8 0603 	sublt.w	r6, r8, r3
 8009324:	9b07      	ldrge	r3, [sp, #28]
 8009326:	2300      	movlt	r3, #0
 8009328:	4646      	movge	r6, r8
 800932a:	e730      	b.n	800918e <_dtoa_r+0x71e>
 800932c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800932e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009330:	4646      	mov	r6, r8
 8009332:	e735      	b.n	80091a0 <_dtoa_r+0x730>
 8009334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009336:	e75c      	b.n	80091f2 <_dtoa_r+0x782>
 8009338:	2300      	movs	r3, #0
 800933a:	e788      	b.n	800924e <_dtoa_r+0x7de>
 800933c:	3fe00000 	.word	0x3fe00000
 8009340:	40240000 	.word	0x40240000
 8009344:	40140000 	.word	0x40140000
 8009348:	9b02      	ldr	r3, [sp, #8]
 800934a:	e780      	b.n	800924e <_dtoa_r+0x7de>
 800934c:	2300      	movs	r3, #0
 800934e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009350:	e782      	b.n	8009258 <_dtoa_r+0x7e8>
 8009352:	d099      	beq.n	8009288 <_dtoa_r+0x818>
 8009354:	9a08      	ldr	r2, [sp, #32]
 8009356:	331c      	adds	r3, #28
 8009358:	441a      	add	r2, r3
 800935a:	4498      	add	r8, r3
 800935c:	441e      	add	r6, r3
 800935e:	9208      	str	r2, [sp, #32]
 8009360:	e792      	b.n	8009288 <_dtoa_r+0x818>
 8009362:	4603      	mov	r3, r0
 8009364:	e7f6      	b.n	8009354 <_dtoa_r+0x8e4>
 8009366:	9b07      	ldr	r3, [sp, #28]
 8009368:	9704      	str	r7, [sp, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	dc20      	bgt.n	80093b0 <_dtoa_r+0x940>
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009372:	2b02      	cmp	r3, #2
 8009374:	dd1e      	ble.n	80093b4 <_dtoa_r+0x944>
 8009376:	9b00      	ldr	r3, [sp, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f47f aec0 	bne.w	80090fe <_dtoa_r+0x68e>
 800937e:	4621      	mov	r1, r4
 8009380:	2205      	movs	r2, #5
 8009382:	4658      	mov	r0, fp
 8009384:	f000 fa9a 	bl	80098bc <__multadd>
 8009388:	4601      	mov	r1, r0
 800938a:	4604      	mov	r4, r0
 800938c:	4648      	mov	r0, r9
 800938e:	f000 fcf7 	bl	8009d80 <__mcmp>
 8009392:	2800      	cmp	r0, #0
 8009394:	f77f aeb3 	ble.w	80090fe <_dtoa_r+0x68e>
 8009398:	4656      	mov	r6, sl
 800939a:	2331      	movs	r3, #49	@ 0x31
 800939c:	f806 3b01 	strb.w	r3, [r6], #1
 80093a0:	9b04      	ldr	r3, [sp, #16]
 80093a2:	3301      	adds	r3, #1
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	e6ae      	b.n	8009106 <_dtoa_r+0x696>
 80093a8:	9c07      	ldr	r4, [sp, #28]
 80093aa:	9704      	str	r7, [sp, #16]
 80093ac:	4625      	mov	r5, r4
 80093ae:	e7f3      	b.n	8009398 <_dtoa_r+0x928>
 80093b0:	9b07      	ldr	r3, [sp, #28]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 8104 	beq.w	80095c4 <_dtoa_r+0xb54>
 80093bc:	2e00      	cmp	r6, #0
 80093be:	dd05      	ble.n	80093cc <_dtoa_r+0x95c>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4632      	mov	r2, r6
 80093c4:	4658      	mov	r0, fp
 80093c6:	f000 fc6f 	bl	8009ca8 <__lshift>
 80093ca:	4605      	mov	r5, r0
 80093cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d05a      	beq.n	8009488 <_dtoa_r+0xa18>
 80093d2:	6869      	ldr	r1, [r5, #4]
 80093d4:	4658      	mov	r0, fp
 80093d6:	f000 fa0f 	bl	80097f8 <_Balloc>
 80093da:	4606      	mov	r6, r0
 80093dc:	b928      	cbnz	r0, 80093ea <_dtoa_r+0x97a>
 80093de:	4b84      	ldr	r3, [pc, #528]	@ (80095f0 <_dtoa_r+0xb80>)
 80093e0:	4602      	mov	r2, r0
 80093e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80093e6:	f7ff bb5a 	b.w	8008a9e <_dtoa_r+0x2e>
 80093ea:	692a      	ldr	r2, [r5, #16]
 80093ec:	3202      	adds	r2, #2
 80093ee:	0092      	lsls	r2, r2, #2
 80093f0:	f105 010c 	add.w	r1, r5, #12
 80093f4:	300c      	adds	r0, #12
 80093f6:	f001 ff75 	bl	800b2e4 <memcpy>
 80093fa:	2201      	movs	r2, #1
 80093fc:	4631      	mov	r1, r6
 80093fe:	4658      	mov	r0, fp
 8009400:	f000 fc52 	bl	8009ca8 <__lshift>
 8009404:	f10a 0301 	add.w	r3, sl, #1
 8009408:	9307      	str	r3, [sp, #28]
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	4453      	add	r3, sl
 800940e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	462f      	mov	r7, r5
 8009418:	930a      	str	r3, [sp, #40]	@ 0x28
 800941a:	4605      	mov	r5, r0
 800941c:	9b07      	ldr	r3, [sp, #28]
 800941e:	4621      	mov	r1, r4
 8009420:	3b01      	subs	r3, #1
 8009422:	4648      	mov	r0, r9
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	f7ff fa9b 	bl	8008960 <quorem>
 800942a:	4639      	mov	r1, r7
 800942c:	9002      	str	r0, [sp, #8]
 800942e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009432:	4648      	mov	r0, r9
 8009434:	f000 fca4 	bl	8009d80 <__mcmp>
 8009438:	462a      	mov	r2, r5
 800943a:	9008      	str	r0, [sp, #32]
 800943c:	4621      	mov	r1, r4
 800943e:	4658      	mov	r0, fp
 8009440:	f000 fcba 	bl	8009db8 <__mdiff>
 8009444:	68c2      	ldr	r2, [r0, #12]
 8009446:	4606      	mov	r6, r0
 8009448:	bb02      	cbnz	r2, 800948c <_dtoa_r+0xa1c>
 800944a:	4601      	mov	r1, r0
 800944c:	4648      	mov	r0, r9
 800944e:	f000 fc97 	bl	8009d80 <__mcmp>
 8009452:	4602      	mov	r2, r0
 8009454:	4631      	mov	r1, r6
 8009456:	4658      	mov	r0, fp
 8009458:	920e      	str	r2, [sp, #56]	@ 0x38
 800945a:	f000 fa0d 	bl	8009878 <_Bfree>
 800945e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009460:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009462:	9e07      	ldr	r6, [sp, #28]
 8009464:	ea43 0102 	orr.w	r1, r3, r2
 8009468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800946a:	4319      	orrs	r1, r3
 800946c:	d110      	bne.n	8009490 <_dtoa_r+0xa20>
 800946e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009472:	d029      	beq.n	80094c8 <_dtoa_r+0xa58>
 8009474:	9b08      	ldr	r3, [sp, #32]
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd02      	ble.n	8009480 <_dtoa_r+0xa10>
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009480:	9b00      	ldr	r3, [sp, #0]
 8009482:	f883 8000 	strb.w	r8, [r3]
 8009486:	e63f      	b.n	8009108 <_dtoa_r+0x698>
 8009488:	4628      	mov	r0, r5
 800948a:	e7bb      	b.n	8009404 <_dtoa_r+0x994>
 800948c:	2201      	movs	r2, #1
 800948e:	e7e1      	b.n	8009454 <_dtoa_r+0x9e4>
 8009490:	9b08      	ldr	r3, [sp, #32]
 8009492:	2b00      	cmp	r3, #0
 8009494:	db04      	blt.n	80094a0 <_dtoa_r+0xa30>
 8009496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009498:	430b      	orrs	r3, r1
 800949a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800949c:	430b      	orrs	r3, r1
 800949e:	d120      	bne.n	80094e2 <_dtoa_r+0xa72>
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	dded      	ble.n	8009480 <_dtoa_r+0xa10>
 80094a4:	4649      	mov	r1, r9
 80094a6:	2201      	movs	r2, #1
 80094a8:	4658      	mov	r0, fp
 80094aa:	f000 fbfd 	bl	8009ca8 <__lshift>
 80094ae:	4621      	mov	r1, r4
 80094b0:	4681      	mov	r9, r0
 80094b2:	f000 fc65 	bl	8009d80 <__mcmp>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	dc03      	bgt.n	80094c2 <_dtoa_r+0xa52>
 80094ba:	d1e1      	bne.n	8009480 <_dtoa_r+0xa10>
 80094bc:	f018 0f01 	tst.w	r8, #1
 80094c0:	d0de      	beq.n	8009480 <_dtoa_r+0xa10>
 80094c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094c6:	d1d8      	bne.n	800947a <_dtoa_r+0xa0a>
 80094c8:	9a00      	ldr	r2, [sp, #0]
 80094ca:	2339      	movs	r3, #57	@ 0x39
 80094cc:	7013      	strb	r3, [r2, #0]
 80094ce:	4633      	mov	r3, r6
 80094d0:	461e      	mov	r6, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80094d8:	2a39      	cmp	r2, #57	@ 0x39
 80094da:	d052      	beq.n	8009582 <_dtoa_r+0xb12>
 80094dc:	3201      	adds	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e612      	b.n	8009108 <_dtoa_r+0x698>
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	dd07      	ble.n	80094f6 <_dtoa_r+0xa86>
 80094e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80094ea:	d0ed      	beq.n	80094c8 <_dtoa_r+0xa58>
 80094ec:	9a00      	ldr	r2, [sp, #0]
 80094ee:	f108 0301 	add.w	r3, r8, #1
 80094f2:	7013      	strb	r3, [r2, #0]
 80094f4:	e608      	b.n	8009108 <_dtoa_r+0x698>
 80094f6:	9b07      	ldr	r3, [sp, #28]
 80094f8:	9a07      	ldr	r2, [sp, #28]
 80094fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80094fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009500:	4293      	cmp	r3, r2
 8009502:	d028      	beq.n	8009556 <_dtoa_r+0xae6>
 8009504:	4649      	mov	r1, r9
 8009506:	2300      	movs	r3, #0
 8009508:	220a      	movs	r2, #10
 800950a:	4658      	mov	r0, fp
 800950c:	f000 f9d6 	bl	80098bc <__multadd>
 8009510:	42af      	cmp	r7, r5
 8009512:	4681      	mov	r9, r0
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	f04f 020a 	mov.w	r2, #10
 800951c:	4639      	mov	r1, r7
 800951e:	4658      	mov	r0, fp
 8009520:	d107      	bne.n	8009532 <_dtoa_r+0xac2>
 8009522:	f000 f9cb 	bl	80098bc <__multadd>
 8009526:	4607      	mov	r7, r0
 8009528:	4605      	mov	r5, r0
 800952a:	9b07      	ldr	r3, [sp, #28]
 800952c:	3301      	adds	r3, #1
 800952e:	9307      	str	r3, [sp, #28]
 8009530:	e774      	b.n	800941c <_dtoa_r+0x9ac>
 8009532:	f000 f9c3 	bl	80098bc <__multadd>
 8009536:	4629      	mov	r1, r5
 8009538:	4607      	mov	r7, r0
 800953a:	2300      	movs	r3, #0
 800953c:	220a      	movs	r2, #10
 800953e:	4658      	mov	r0, fp
 8009540:	f000 f9bc 	bl	80098bc <__multadd>
 8009544:	4605      	mov	r5, r0
 8009546:	e7f0      	b.n	800952a <_dtoa_r+0xaba>
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	bfcc      	ite	gt
 800954e:	461e      	movgt	r6, r3
 8009550:	2601      	movle	r6, #1
 8009552:	4456      	add	r6, sl
 8009554:	2700      	movs	r7, #0
 8009556:	4649      	mov	r1, r9
 8009558:	2201      	movs	r2, #1
 800955a:	4658      	mov	r0, fp
 800955c:	f000 fba4 	bl	8009ca8 <__lshift>
 8009560:	4621      	mov	r1, r4
 8009562:	4681      	mov	r9, r0
 8009564:	f000 fc0c 	bl	8009d80 <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	dcb0      	bgt.n	80094ce <_dtoa_r+0xa5e>
 800956c:	d102      	bne.n	8009574 <_dtoa_r+0xb04>
 800956e:	f018 0f01 	tst.w	r8, #1
 8009572:	d1ac      	bne.n	80094ce <_dtoa_r+0xa5e>
 8009574:	4633      	mov	r3, r6
 8009576:	461e      	mov	r6, r3
 8009578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800957c:	2a30      	cmp	r2, #48	@ 0x30
 800957e:	d0fa      	beq.n	8009576 <_dtoa_r+0xb06>
 8009580:	e5c2      	b.n	8009108 <_dtoa_r+0x698>
 8009582:	459a      	cmp	sl, r3
 8009584:	d1a4      	bne.n	80094d0 <_dtoa_r+0xa60>
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	3301      	adds	r3, #1
 800958a:	9304      	str	r3, [sp, #16]
 800958c:	2331      	movs	r3, #49	@ 0x31
 800958e:	f88a 3000 	strb.w	r3, [sl]
 8009592:	e5b9      	b.n	8009108 <_dtoa_r+0x698>
 8009594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009596:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80095f4 <_dtoa_r+0xb84>
 800959a:	b11b      	cbz	r3, 80095a4 <_dtoa_r+0xb34>
 800959c:	f10a 0308 	add.w	r3, sl, #8
 80095a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	4650      	mov	r0, sl
 80095a6:	b019      	add	sp, #100	@ 0x64
 80095a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	f77f ae37 	ble.w	8009222 <_dtoa_r+0x7b2>
 80095b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095b8:	2001      	movs	r0, #1
 80095ba:	e655      	b.n	8009268 <_dtoa_r+0x7f8>
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f77f aed6 	ble.w	8009370 <_dtoa_r+0x900>
 80095c4:	4656      	mov	r6, sl
 80095c6:	4621      	mov	r1, r4
 80095c8:	4648      	mov	r0, r9
 80095ca:	f7ff f9c9 	bl	8008960 <quorem>
 80095ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80095d2:	f806 8b01 	strb.w	r8, [r6], #1
 80095d6:	9b00      	ldr	r3, [sp, #0]
 80095d8:	eba6 020a 	sub.w	r2, r6, sl
 80095dc:	4293      	cmp	r3, r2
 80095de:	ddb3      	ble.n	8009548 <_dtoa_r+0xad8>
 80095e0:	4649      	mov	r1, r9
 80095e2:	2300      	movs	r3, #0
 80095e4:	220a      	movs	r2, #10
 80095e6:	4658      	mov	r0, fp
 80095e8:	f000 f968 	bl	80098bc <__multadd>
 80095ec:	4681      	mov	r9, r0
 80095ee:	e7ea      	b.n	80095c6 <_dtoa_r+0xb56>
 80095f0:	0800c29d 	.word	0x0800c29d
 80095f4:	0800c221 	.word	0x0800c221

080095f8 <_free_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4605      	mov	r5, r0
 80095fc:	2900      	cmp	r1, #0
 80095fe:	d041      	beq.n	8009684 <_free_r+0x8c>
 8009600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009604:	1f0c      	subs	r4, r1, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	bfb8      	it	lt
 800960a:	18e4      	addlt	r4, r4, r3
 800960c:	f000 f8e8 	bl	80097e0 <__malloc_lock>
 8009610:	4a1d      	ldr	r2, [pc, #116]	@ (8009688 <_free_r+0x90>)
 8009612:	6813      	ldr	r3, [r2, #0]
 8009614:	b933      	cbnz	r3, 8009624 <_free_r+0x2c>
 8009616:	6063      	str	r3, [r4, #4]
 8009618:	6014      	str	r4, [r2, #0]
 800961a:	4628      	mov	r0, r5
 800961c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009620:	f000 b8e4 	b.w	80097ec <__malloc_unlock>
 8009624:	42a3      	cmp	r3, r4
 8009626:	d908      	bls.n	800963a <_free_r+0x42>
 8009628:	6820      	ldr	r0, [r4, #0]
 800962a:	1821      	adds	r1, r4, r0
 800962c:	428b      	cmp	r3, r1
 800962e:	bf01      	itttt	eq
 8009630:	6819      	ldreq	r1, [r3, #0]
 8009632:	685b      	ldreq	r3, [r3, #4]
 8009634:	1809      	addeq	r1, r1, r0
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	e7ed      	b.n	8009616 <_free_r+0x1e>
 800963a:	461a      	mov	r2, r3
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	b10b      	cbz	r3, 8009644 <_free_r+0x4c>
 8009640:	42a3      	cmp	r3, r4
 8009642:	d9fa      	bls.n	800963a <_free_r+0x42>
 8009644:	6811      	ldr	r1, [r2, #0]
 8009646:	1850      	adds	r0, r2, r1
 8009648:	42a0      	cmp	r0, r4
 800964a:	d10b      	bne.n	8009664 <_free_r+0x6c>
 800964c:	6820      	ldr	r0, [r4, #0]
 800964e:	4401      	add	r1, r0
 8009650:	1850      	adds	r0, r2, r1
 8009652:	4283      	cmp	r3, r0
 8009654:	6011      	str	r1, [r2, #0]
 8009656:	d1e0      	bne.n	800961a <_free_r+0x22>
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	6053      	str	r3, [r2, #4]
 800965e:	4408      	add	r0, r1
 8009660:	6010      	str	r0, [r2, #0]
 8009662:	e7da      	b.n	800961a <_free_r+0x22>
 8009664:	d902      	bls.n	800966c <_free_r+0x74>
 8009666:	230c      	movs	r3, #12
 8009668:	602b      	str	r3, [r5, #0]
 800966a:	e7d6      	b.n	800961a <_free_r+0x22>
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	1821      	adds	r1, r4, r0
 8009670:	428b      	cmp	r3, r1
 8009672:	bf04      	itt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	bf04      	itt	eq
 800967c:	1809      	addeq	r1, r1, r0
 800967e:	6021      	streq	r1, [r4, #0]
 8009680:	6054      	str	r4, [r2, #4]
 8009682:	e7ca      	b.n	800961a <_free_r+0x22>
 8009684:	bd38      	pop	{r3, r4, r5, pc}
 8009686:	bf00      	nop
 8009688:	2000081c 	.word	0x2000081c

0800968c <malloc>:
 800968c:	4b02      	ldr	r3, [pc, #8]	@ (8009698 <malloc+0xc>)
 800968e:	4601      	mov	r1, r0
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f000 b825 	b.w	80096e0 <_malloc_r>
 8009696:	bf00      	nop
 8009698:	20000030 	.word	0x20000030

0800969c <sbrk_aligned>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4e0f      	ldr	r6, [pc, #60]	@ (80096dc <sbrk_aligned+0x40>)
 80096a0:	460c      	mov	r4, r1
 80096a2:	6831      	ldr	r1, [r6, #0]
 80096a4:	4605      	mov	r5, r0
 80096a6:	b911      	cbnz	r1, 80096ae <sbrk_aligned+0x12>
 80096a8:	f001 fe0c 	bl	800b2c4 <_sbrk_r>
 80096ac:	6030      	str	r0, [r6, #0]
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f001 fe07 	bl	800b2c4 <_sbrk_r>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d103      	bne.n	80096c2 <sbrk_aligned+0x26>
 80096ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80096be:	4620      	mov	r0, r4
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
 80096c2:	1cc4      	adds	r4, r0, #3
 80096c4:	f024 0403 	bic.w	r4, r4, #3
 80096c8:	42a0      	cmp	r0, r4
 80096ca:	d0f8      	beq.n	80096be <sbrk_aligned+0x22>
 80096cc:	1a21      	subs	r1, r4, r0
 80096ce:	4628      	mov	r0, r5
 80096d0:	f001 fdf8 	bl	800b2c4 <_sbrk_r>
 80096d4:	3001      	adds	r0, #1
 80096d6:	d1f2      	bne.n	80096be <sbrk_aligned+0x22>
 80096d8:	e7ef      	b.n	80096ba <sbrk_aligned+0x1e>
 80096da:	bf00      	nop
 80096dc:	20000818 	.word	0x20000818

080096e0 <_malloc_r>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	1ccd      	adds	r5, r1, #3
 80096e6:	f025 0503 	bic.w	r5, r5, #3
 80096ea:	3508      	adds	r5, #8
 80096ec:	2d0c      	cmp	r5, #12
 80096ee:	bf38      	it	cc
 80096f0:	250c      	movcc	r5, #12
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	4606      	mov	r6, r0
 80096f6:	db01      	blt.n	80096fc <_malloc_r+0x1c>
 80096f8:	42a9      	cmp	r1, r5
 80096fa:	d904      	bls.n	8009706 <_malloc_r+0x26>
 80096fc:	230c      	movs	r3, #12
 80096fe:	6033      	str	r3, [r6, #0]
 8009700:	2000      	movs	r0, #0
 8009702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80097dc <_malloc_r+0xfc>
 800970a:	f000 f869 	bl	80097e0 <__malloc_lock>
 800970e:	f8d8 3000 	ldr.w	r3, [r8]
 8009712:	461c      	mov	r4, r3
 8009714:	bb44      	cbnz	r4, 8009768 <_malloc_r+0x88>
 8009716:	4629      	mov	r1, r5
 8009718:	4630      	mov	r0, r6
 800971a:	f7ff ffbf 	bl	800969c <sbrk_aligned>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	4604      	mov	r4, r0
 8009722:	d158      	bne.n	80097d6 <_malloc_r+0xf6>
 8009724:	f8d8 4000 	ldr.w	r4, [r8]
 8009728:	4627      	mov	r7, r4
 800972a:	2f00      	cmp	r7, #0
 800972c:	d143      	bne.n	80097b6 <_malloc_r+0xd6>
 800972e:	2c00      	cmp	r4, #0
 8009730:	d04b      	beq.n	80097ca <_malloc_r+0xea>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	4639      	mov	r1, r7
 8009736:	4630      	mov	r0, r6
 8009738:	eb04 0903 	add.w	r9, r4, r3
 800973c:	f001 fdc2 	bl	800b2c4 <_sbrk_r>
 8009740:	4581      	cmp	r9, r0
 8009742:	d142      	bne.n	80097ca <_malloc_r+0xea>
 8009744:	6821      	ldr	r1, [r4, #0]
 8009746:	1a6d      	subs	r5, r5, r1
 8009748:	4629      	mov	r1, r5
 800974a:	4630      	mov	r0, r6
 800974c:	f7ff ffa6 	bl	800969c <sbrk_aligned>
 8009750:	3001      	adds	r0, #1
 8009752:	d03a      	beq.n	80097ca <_malloc_r+0xea>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	442b      	add	r3, r5
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	f8d8 3000 	ldr.w	r3, [r8]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	bb62      	cbnz	r2, 80097bc <_malloc_r+0xdc>
 8009762:	f8c8 7000 	str.w	r7, [r8]
 8009766:	e00f      	b.n	8009788 <_malloc_r+0xa8>
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	1b52      	subs	r2, r2, r5
 800976c:	d420      	bmi.n	80097b0 <_malloc_r+0xd0>
 800976e:	2a0b      	cmp	r2, #11
 8009770:	d917      	bls.n	80097a2 <_malloc_r+0xc2>
 8009772:	1961      	adds	r1, r4, r5
 8009774:	42a3      	cmp	r3, r4
 8009776:	6025      	str	r5, [r4, #0]
 8009778:	bf18      	it	ne
 800977a:	6059      	strne	r1, [r3, #4]
 800977c:	6863      	ldr	r3, [r4, #4]
 800977e:	bf08      	it	eq
 8009780:	f8c8 1000 	streq.w	r1, [r8]
 8009784:	5162      	str	r2, [r4, r5]
 8009786:	604b      	str	r3, [r1, #4]
 8009788:	4630      	mov	r0, r6
 800978a:	f000 f82f 	bl	80097ec <__malloc_unlock>
 800978e:	f104 000b 	add.w	r0, r4, #11
 8009792:	1d23      	adds	r3, r4, #4
 8009794:	f020 0007 	bic.w	r0, r0, #7
 8009798:	1ac2      	subs	r2, r0, r3
 800979a:	bf1c      	itt	ne
 800979c:	1a1b      	subne	r3, r3, r0
 800979e:	50a3      	strne	r3, [r4, r2]
 80097a0:	e7af      	b.n	8009702 <_malloc_r+0x22>
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	bf0c      	ite	eq
 80097a8:	f8c8 2000 	streq.w	r2, [r8]
 80097ac:	605a      	strne	r2, [r3, #4]
 80097ae:	e7eb      	b.n	8009788 <_malloc_r+0xa8>
 80097b0:	4623      	mov	r3, r4
 80097b2:	6864      	ldr	r4, [r4, #4]
 80097b4:	e7ae      	b.n	8009714 <_malloc_r+0x34>
 80097b6:	463c      	mov	r4, r7
 80097b8:	687f      	ldr	r7, [r7, #4]
 80097ba:	e7b6      	b.n	800972a <_malloc_r+0x4a>
 80097bc:	461a      	mov	r2, r3
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	d1fb      	bne.n	80097bc <_malloc_r+0xdc>
 80097c4:	2300      	movs	r3, #0
 80097c6:	6053      	str	r3, [r2, #4]
 80097c8:	e7de      	b.n	8009788 <_malloc_r+0xa8>
 80097ca:	230c      	movs	r3, #12
 80097cc:	6033      	str	r3, [r6, #0]
 80097ce:	4630      	mov	r0, r6
 80097d0:	f000 f80c 	bl	80097ec <__malloc_unlock>
 80097d4:	e794      	b.n	8009700 <_malloc_r+0x20>
 80097d6:	6005      	str	r5, [r0, #0]
 80097d8:	e7d6      	b.n	8009788 <_malloc_r+0xa8>
 80097da:	bf00      	nop
 80097dc:	2000081c 	.word	0x2000081c

080097e0 <__malloc_lock>:
 80097e0:	4801      	ldr	r0, [pc, #4]	@ (80097e8 <__malloc_lock+0x8>)
 80097e2:	f7ff b8b4 	b.w	800894e <__retarget_lock_acquire_recursive>
 80097e6:	bf00      	nop
 80097e8:	20000814 	.word	0x20000814

080097ec <__malloc_unlock>:
 80097ec:	4801      	ldr	r0, [pc, #4]	@ (80097f4 <__malloc_unlock+0x8>)
 80097ee:	f7ff b8af 	b.w	8008950 <__retarget_lock_release_recursive>
 80097f2:	bf00      	nop
 80097f4:	20000814 	.word	0x20000814

080097f8 <_Balloc>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	69c6      	ldr	r6, [r0, #28]
 80097fc:	4604      	mov	r4, r0
 80097fe:	460d      	mov	r5, r1
 8009800:	b976      	cbnz	r6, 8009820 <_Balloc+0x28>
 8009802:	2010      	movs	r0, #16
 8009804:	f7ff ff42 	bl	800968c <malloc>
 8009808:	4602      	mov	r2, r0
 800980a:	61e0      	str	r0, [r4, #28]
 800980c:	b920      	cbnz	r0, 8009818 <_Balloc+0x20>
 800980e:	4b18      	ldr	r3, [pc, #96]	@ (8009870 <_Balloc+0x78>)
 8009810:	4818      	ldr	r0, [pc, #96]	@ (8009874 <_Balloc+0x7c>)
 8009812:	216b      	movs	r1, #107	@ 0x6b
 8009814:	f001 fd7c 	bl	800b310 <__assert_func>
 8009818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800981c:	6006      	str	r6, [r0, #0]
 800981e:	60c6      	str	r6, [r0, #12]
 8009820:	69e6      	ldr	r6, [r4, #28]
 8009822:	68f3      	ldr	r3, [r6, #12]
 8009824:	b183      	cbz	r3, 8009848 <_Balloc+0x50>
 8009826:	69e3      	ldr	r3, [r4, #28]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800982e:	b9b8      	cbnz	r0, 8009860 <_Balloc+0x68>
 8009830:	2101      	movs	r1, #1
 8009832:	fa01 f605 	lsl.w	r6, r1, r5
 8009836:	1d72      	adds	r2, r6, #5
 8009838:	0092      	lsls	r2, r2, #2
 800983a:	4620      	mov	r0, r4
 800983c:	f001 fd86 	bl	800b34c <_calloc_r>
 8009840:	b160      	cbz	r0, 800985c <_Balloc+0x64>
 8009842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009846:	e00e      	b.n	8009866 <_Balloc+0x6e>
 8009848:	2221      	movs	r2, #33	@ 0x21
 800984a:	2104      	movs	r1, #4
 800984c:	4620      	mov	r0, r4
 800984e:	f001 fd7d 	bl	800b34c <_calloc_r>
 8009852:	69e3      	ldr	r3, [r4, #28]
 8009854:	60f0      	str	r0, [r6, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e4      	bne.n	8009826 <_Balloc+0x2e>
 800985c:	2000      	movs	r0, #0
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	6802      	ldr	r2, [r0, #0]
 8009862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009866:	2300      	movs	r3, #0
 8009868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800986c:	e7f7      	b.n	800985e <_Balloc+0x66>
 800986e:	bf00      	nop
 8009870:	0800c22e 	.word	0x0800c22e
 8009874:	0800c2ae 	.word	0x0800c2ae

08009878 <_Bfree>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	69c6      	ldr	r6, [r0, #28]
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b976      	cbnz	r6, 80098a0 <_Bfree+0x28>
 8009882:	2010      	movs	r0, #16
 8009884:	f7ff ff02 	bl	800968c <malloc>
 8009888:	4602      	mov	r2, r0
 800988a:	61e8      	str	r0, [r5, #28]
 800988c:	b920      	cbnz	r0, 8009898 <_Bfree+0x20>
 800988e:	4b09      	ldr	r3, [pc, #36]	@ (80098b4 <_Bfree+0x3c>)
 8009890:	4809      	ldr	r0, [pc, #36]	@ (80098b8 <_Bfree+0x40>)
 8009892:	218f      	movs	r1, #143	@ 0x8f
 8009894:	f001 fd3c 	bl	800b310 <__assert_func>
 8009898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800989c:	6006      	str	r6, [r0, #0]
 800989e:	60c6      	str	r6, [r0, #12]
 80098a0:	b13c      	cbz	r4, 80098b2 <_Bfree+0x3a>
 80098a2:	69eb      	ldr	r3, [r5, #28]
 80098a4:	6862      	ldr	r2, [r4, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098ac:	6021      	str	r1, [r4, #0]
 80098ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	0800c22e 	.word	0x0800c22e
 80098b8:	0800c2ae 	.word	0x0800c2ae

080098bc <__multadd>:
 80098bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c0:	690d      	ldr	r5, [r1, #16]
 80098c2:	4607      	mov	r7, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	461e      	mov	r6, r3
 80098c8:	f101 0c14 	add.w	ip, r1, #20
 80098cc:	2000      	movs	r0, #0
 80098ce:	f8dc 3000 	ldr.w	r3, [ip]
 80098d2:	b299      	uxth	r1, r3
 80098d4:	fb02 6101 	mla	r1, r2, r1, r6
 80098d8:	0c1e      	lsrs	r6, r3, #16
 80098da:	0c0b      	lsrs	r3, r1, #16
 80098dc:	fb02 3306 	mla	r3, r2, r6, r3
 80098e0:	b289      	uxth	r1, r1
 80098e2:	3001      	adds	r0, #1
 80098e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098e8:	4285      	cmp	r5, r0
 80098ea:	f84c 1b04 	str.w	r1, [ip], #4
 80098ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098f2:	dcec      	bgt.n	80098ce <__multadd+0x12>
 80098f4:	b30e      	cbz	r6, 800993a <__multadd+0x7e>
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	42ab      	cmp	r3, r5
 80098fa:	dc19      	bgt.n	8009930 <__multadd+0x74>
 80098fc:	6861      	ldr	r1, [r4, #4]
 80098fe:	4638      	mov	r0, r7
 8009900:	3101      	adds	r1, #1
 8009902:	f7ff ff79 	bl	80097f8 <_Balloc>
 8009906:	4680      	mov	r8, r0
 8009908:	b928      	cbnz	r0, 8009916 <__multadd+0x5a>
 800990a:	4602      	mov	r2, r0
 800990c:	4b0c      	ldr	r3, [pc, #48]	@ (8009940 <__multadd+0x84>)
 800990e:	480d      	ldr	r0, [pc, #52]	@ (8009944 <__multadd+0x88>)
 8009910:	21ba      	movs	r1, #186	@ 0xba
 8009912:	f001 fcfd 	bl	800b310 <__assert_func>
 8009916:	6922      	ldr	r2, [r4, #16]
 8009918:	3202      	adds	r2, #2
 800991a:	f104 010c 	add.w	r1, r4, #12
 800991e:	0092      	lsls	r2, r2, #2
 8009920:	300c      	adds	r0, #12
 8009922:	f001 fcdf 	bl	800b2e4 <memcpy>
 8009926:	4621      	mov	r1, r4
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff ffa5 	bl	8009878 <_Bfree>
 800992e:	4644      	mov	r4, r8
 8009930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009934:	3501      	adds	r5, #1
 8009936:	615e      	str	r6, [r3, #20]
 8009938:	6125      	str	r5, [r4, #16]
 800993a:	4620      	mov	r0, r4
 800993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009940:	0800c29d 	.word	0x0800c29d
 8009944:	0800c2ae 	.word	0x0800c2ae

08009948 <__s2b>:
 8009948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800994c:	460c      	mov	r4, r1
 800994e:	4615      	mov	r5, r2
 8009950:	461f      	mov	r7, r3
 8009952:	2209      	movs	r2, #9
 8009954:	3308      	adds	r3, #8
 8009956:	4606      	mov	r6, r0
 8009958:	fb93 f3f2 	sdiv	r3, r3, r2
 800995c:	2100      	movs	r1, #0
 800995e:	2201      	movs	r2, #1
 8009960:	429a      	cmp	r2, r3
 8009962:	db09      	blt.n	8009978 <__s2b+0x30>
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff ff47 	bl	80097f8 <_Balloc>
 800996a:	b940      	cbnz	r0, 800997e <__s2b+0x36>
 800996c:	4602      	mov	r2, r0
 800996e:	4b19      	ldr	r3, [pc, #100]	@ (80099d4 <__s2b+0x8c>)
 8009970:	4819      	ldr	r0, [pc, #100]	@ (80099d8 <__s2b+0x90>)
 8009972:	21d3      	movs	r1, #211	@ 0xd3
 8009974:	f001 fccc 	bl	800b310 <__assert_func>
 8009978:	0052      	lsls	r2, r2, #1
 800997a:	3101      	adds	r1, #1
 800997c:	e7f0      	b.n	8009960 <__s2b+0x18>
 800997e:	9b08      	ldr	r3, [sp, #32]
 8009980:	6143      	str	r3, [r0, #20]
 8009982:	2d09      	cmp	r5, #9
 8009984:	f04f 0301 	mov.w	r3, #1
 8009988:	6103      	str	r3, [r0, #16]
 800998a:	dd16      	ble.n	80099ba <__s2b+0x72>
 800998c:	f104 0909 	add.w	r9, r4, #9
 8009990:	46c8      	mov	r8, r9
 8009992:	442c      	add	r4, r5
 8009994:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009998:	4601      	mov	r1, r0
 800999a:	3b30      	subs	r3, #48	@ 0x30
 800999c:	220a      	movs	r2, #10
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff ff8c 	bl	80098bc <__multadd>
 80099a4:	45a0      	cmp	r8, r4
 80099a6:	d1f5      	bne.n	8009994 <__s2b+0x4c>
 80099a8:	f1a5 0408 	sub.w	r4, r5, #8
 80099ac:	444c      	add	r4, r9
 80099ae:	1b2d      	subs	r5, r5, r4
 80099b0:	1963      	adds	r3, r4, r5
 80099b2:	42bb      	cmp	r3, r7
 80099b4:	db04      	blt.n	80099c0 <__s2b+0x78>
 80099b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ba:	340a      	adds	r4, #10
 80099bc:	2509      	movs	r5, #9
 80099be:	e7f6      	b.n	80099ae <__s2b+0x66>
 80099c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099c4:	4601      	mov	r1, r0
 80099c6:	3b30      	subs	r3, #48	@ 0x30
 80099c8:	220a      	movs	r2, #10
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ff76 	bl	80098bc <__multadd>
 80099d0:	e7ee      	b.n	80099b0 <__s2b+0x68>
 80099d2:	bf00      	nop
 80099d4:	0800c29d 	.word	0x0800c29d
 80099d8:	0800c2ae 	.word	0x0800c2ae

080099dc <__hi0bits>:
 80099dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80099e0:	4603      	mov	r3, r0
 80099e2:	bf36      	itet	cc
 80099e4:	0403      	lslcc	r3, r0, #16
 80099e6:	2000      	movcs	r0, #0
 80099e8:	2010      	movcc	r0, #16
 80099ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099ee:	bf3c      	itt	cc
 80099f0:	021b      	lslcc	r3, r3, #8
 80099f2:	3008      	addcc	r0, #8
 80099f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099f8:	bf3c      	itt	cc
 80099fa:	011b      	lslcc	r3, r3, #4
 80099fc:	3004      	addcc	r0, #4
 80099fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a02:	bf3c      	itt	cc
 8009a04:	009b      	lslcc	r3, r3, #2
 8009a06:	3002      	addcc	r0, #2
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	db05      	blt.n	8009a18 <__hi0bits+0x3c>
 8009a0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a10:	f100 0001 	add.w	r0, r0, #1
 8009a14:	bf08      	it	eq
 8009a16:	2020      	moveq	r0, #32
 8009a18:	4770      	bx	lr

08009a1a <__lo0bits>:
 8009a1a:	6803      	ldr	r3, [r0, #0]
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	f013 0007 	ands.w	r0, r3, #7
 8009a22:	d00b      	beq.n	8009a3c <__lo0bits+0x22>
 8009a24:	07d9      	lsls	r1, r3, #31
 8009a26:	d421      	bmi.n	8009a6c <__lo0bits+0x52>
 8009a28:	0798      	lsls	r0, r3, #30
 8009a2a:	bf49      	itett	mi
 8009a2c:	085b      	lsrmi	r3, r3, #1
 8009a2e:	089b      	lsrpl	r3, r3, #2
 8009a30:	2001      	movmi	r0, #1
 8009a32:	6013      	strmi	r3, [r2, #0]
 8009a34:	bf5c      	itt	pl
 8009a36:	6013      	strpl	r3, [r2, #0]
 8009a38:	2002      	movpl	r0, #2
 8009a3a:	4770      	bx	lr
 8009a3c:	b299      	uxth	r1, r3
 8009a3e:	b909      	cbnz	r1, 8009a44 <__lo0bits+0x2a>
 8009a40:	0c1b      	lsrs	r3, r3, #16
 8009a42:	2010      	movs	r0, #16
 8009a44:	b2d9      	uxtb	r1, r3
 8009a46:	b909      	cbnz	r1, 8009a4c <__lo0bits+0x32>
 8009a48:	3008      	adds	r0, #8
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	0719      	lsls	r1, r3, #28
 8009a4e:	bf04      	itt	eq
 8009a50:	091b      	lsreq	r3, r3, #4
 8009a52:	3004      	addeq	r0, #4
 8009a54:	0799      	lsls	r1, r3, #30
 8009a56:	bf04      	itt	eq
 8009a58:	089b      	lsreq	r3, r3, #2
 8009a5a:	3002      	addeq	r0, #2
 8009a5c:	07d9      	lsls	r1, r3, #31
 8009a5e:	d403      	bmi.n	8009a68 <__lo0bits+0x4e>
 8009a60:	085b      	lsrs	r3, r3, #1
 8009a62:	f100 0001 	add.w	r0, r0, #1
 8009a66:	d003      	beq.n	8009a70 <__lo0bits+0x56>
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	4770      	bx	lr
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	4770      	bx	lr
 8009a70:	2020      	movs	r0, #32
 8009a72:	4770      	bx	lr

08009a74 <__i2b>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	460c      	mov	r4, r1
 8009a78:	2101      	movs	r1, #1
 8009a7a:	f7ff febd 	bl	80097f8 <_Balloc>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	b928      	cbnz	r0, 8009a8e <__i2b+0x1a>
 8009a82:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <__i2b+0x24>)
 8009a84:	4805      	ldr	r0, [pc, #20]	@ (8009a9c <__i2b+0x28>)
 8009a86:	f240 1145 	movw	r1, #325	@ 0x145
 8009a8a:	f001 fc41 	bl	800b310 <__assert_func>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	6144      	str	r4, [r0, #20]
 8009a92:	6103      	str	r3, [r0, #16]
 8009a94:	bd10      	pop	{r4, pc}
 8009a96:	bf00      	nop
 8009a98:	0800c29d 	.word	0x0800c29d
 8009a9c:	0800c2ae 	.word	0x0800c2ae

08009aa0 <__multiply>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	690a      	ldr	r2, [r1, #16]
 8009aa8:	6923      	ldr	r3, [r4, #16]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	bfa8      	it	ge
 8009aae:	4623      	movge	r3, r4
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	bfa4      	itt	ge
 8009ab4:	460c      	movge	r4, r1
 8009ab6:	461f      	movge	r7, r3
 8009ab8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009abc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ac0:	68a3      	ldr	r3, [r4, #8]
 8009ac2:	6861      	ldr	r1, [r4, #4]
 8009ac4:	eb0a 0609 	add.w	r6, sl, r9
 8009ac8:	42b3      	cmp	r3, r6
 8009aca:	b085      	sub	sp, #20
 8009acc:	bfb8      	it	lt
 8009ace:	3101      	addlt	r1, #1
 8009ad0:	f7ff fe92 	bl	80097f8 <_Balloc>
 8009ad4:	b930      	cbnz	r0, 8009ae4 <__multiply+0x44>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	4b44      	ldr	r3, [pc, #272]	@ (8009bec <__multiply+0x14c>)
 8009ada:	4845      	ldr	r0, [pc, #276]	@ (8009bf0 <__multiply+0x150>)
 8009adc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009ae0:	f001 fc16 	bl	800b310 <__assert_func>
 8009ae4:	f100 0514 	add.w	r5, r0, #20
 8009ae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009aec:	462b      	mov	r3, r5
 8009aee:	2200      	movs	r2, #0
 8009af0:	4543      	cmp	r3, r8
 8009af2:	d321      	bcc.n	8009b38 <__multiply+0x98>
 8009af4:	f107 0114 	add.w	r1, r7, #20
 8009af8:	f104 0214 	add.w	r2, r4, #20
 8009afc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b04:	9302      	str	r3, [sp, #8]
 8009b06:	1b13      	subs	r3, r2, r4
 8009b08:	3b15      	subs	r3, #21
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	3304      	adds	r3, #4
 8009b10:	f104 0715 	add.w	r7, r4, #21
 8009b14:	42ba      	cmp	r2, r7
 8009b16:	bf38      	it	cc
 8009b18:	2304      	movcc	r3, #4
 8009b1a:	9301      	str	r3, [sp, #4]
 8009b1c:	9b02      	ldr	r3, [sp, #8]
 8009b1e:	9103      	str	r1, [sp, #12]
 8009b20:	428b      	cmp	r3, r1
 8009b22:	d80c      	bhi.n	8009b3e <__multiply+0x9e>
 8009b24:	2e00      	cmp	r6, #0
 8009b26:	dd03      	ble.n	8009b30 <__multiply+0x90>
 8009b28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d05b      	beq.n	8009be8 <__multiply+0x148>
 8009b30:	6106      	str	r6, [r0, #16]
 8009b32:	b005      	add	sp, #20
 8009b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b38:	f843 2b04 	str.w	r2, [r3], #4
 8009b3c:	e7d8      	b.n	8009af0 <__multiply+0x50>
 8009b3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b42:	f1ba 0f00 	cmp.w	sl, #0
 8009b46:	d024      	beq.n	8009b92 <__multiply+0xf2>
 8009b48:	f104 0e14 	add.w	lr, r4, #20
 8009b4c:	46a9      	mov	r9, r5
 8009b4e:	f04f 0c00 	mov.w	ip, #0
 8009b52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b56:	f8d9 3000 	ldr.w	r3, [r9]
 8009b5a:	fa1f fb87 	uxth.w	fp, r7
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009b68:	f8d9 7000 	ldr.w	r7, [r9]
 8009b6c:	4463      	add	r3, ip
 8009b6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b72:	fb0a c70b 	mla	r7, sl, fp, ip
 8009b76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b80:	4572      	cmp	r2, lr
 8009b82:	f849 3b04 	str.w	r3, [r9], #4
 8009b86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b8a:	d8e2      	bhi.n	8009b52 <__multiply+0xb2>
 8009b8c:	9b01      	ldr	r3, [sp, #4]
 8009b8e:	f845 c003 	str.w	ip, [r5, r3]
 8009b92:	9b03      	ldr	r3, [sp, #12]
 8009b94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b98:	3104      	adds	r1, #4
 8009b9a:	f1b9 0f00 	cmp.w	r9, #0
 8009b9e:	d021      	beq.n	8009be4 <__multiply+0x144>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	f104 0c14 	add.w	ip, r4, #20
 8009ba6:	46ae      	mov	lr, r5
 8009ba8:	f04f 0a00 	mov.w	sl, #0
 8009bac:	f8bc b000 	ldrh.w	fp, [ip]
 8009bb0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009bb4:	fb09 770b 	mla	r7, r9, fp, r7
 8009bb8:	4457      	add	r7, sl
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009bc0:	f84e 3b04 	str.w	r3, [lr], #4
 8009bc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bcc:	f8be 3000 	ldrh.w	r3, [lr]
 8009bd0:	fb09 330a 	mla	r3, r9, sl, r3
 8009bd4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009bd8:	4562      	cmp	r2, ip
 8009bda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bde:	d8e5      	bhi.n	8009bac <__multiply+0x10c>
 8009be0:	9f01      	ldr	r7, [sp, #4]
 8009be2:	51eb      	str	r3, [r5, r7]
 8009be4:	3504      	adds	r5, #4
 8009be6:	e799      	b.n	8009b1c <__multiply+0x7c>
 8009be8:	3e01      	subs	r6, #1
 8009bea:	e79b      	b.n	8009b24 <__multiply+0x84>
 8009bec:	0800c29d 	.word	0x0800c29d
 8009bf0:	0800c2ae 	.word	0x0800c2ae

08009bf4 <__pow5mult>:
 8009bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	f012 0203 	ands.w	r2, r2, #3
 8009bfe:	4607      	mov	r7, r0
 8009c00:	460e      	mov	r6, r1
 8009c02:	d007      	beq.n	8009c14 <__pow5mult+0x20>
 8009c04:	4c25      	ldr	r4, [pc, #148]	@ (8009c9c <__pow5mult+0xa8>)
 8009c06:	3a01      	subs	r2, #1
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c0e:	f7ff fe55 	bl	80098bc <__multadd>
 8009c12:	4606      	mov	r6, r0
 8009c14:	10ad      	asrs	r5, r5, #2
 8009c16:	d03d      	beq.n	8009c94 <__pow5mult+0xa0>
 8009c18:	69fc      	ldr	r4, [r7, #28]
 8009c1a:	b97c      	cbnz	r4, 8009c3c <__pow5mult+0x48>
 8009c1c:	2010      	movs	r0, #16
 8009c1e:	f7ff fd35 	bl	800968c <malloc>
 8009c22:	4602      	mov	r2, r0
 8009c24:	61f8      	str	r0, [r7, #28]
 8009c26:	b928      	cbnz	r0, 8009c34 <__pow5mult+0x40>
 8009c28:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca0 <__pow5mult+0xac>)
 8009c2a:	481e      	ldr	r0, [pc, #120]	@ (8009ca4 <__pow5mult+0xb0>)
 8009c2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c30:	f001 fb6e 	bl	800b310 <__assert_func>
 8009c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c38:	6004      	str	r4, [r0, #0]
 8009c3a:	60c4      	str	r4, [r0, #12]
 8009c3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c44:	b94c      	cbnz	r4, 8009c5a <__pow5mult+0x66>
 8009c46:	f240 2171 	movw	r1, #625	@ 0x271
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f7ff ff12 	bl	8009a74 <__i2b>
 8009c50:	2300      	movs	r3, #0
 8009c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c56:	4604      	mov	r4, r0
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	07eb      	lsls	r3, r5, #31
 8009c60:	d50a      	bpl.n	8009c78 <__pow5mult+0x84>
 8009c62:	4631      	mov	r1, r6
 8009c64:	4622      	mov	r2, r4
 8009c66:	4638      	mov	r0, r7
 8009c68:	f7ff ff1a 	bl	8009aa0 <__multiply>
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4680      	mov	r8, r0
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7ff fe01 	bl	8009878 <_Bfree>
 8009c76:	4646      	mov	r6, r8
 8009c78:	106d      	asrs	r5, r5, #1
 8009c7a:	d00b      	beq.n	8009c94 <__pow5mult+0xa0>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	b938      	cbnz	r0, 8009c90 <__pow5mult+0x9c>
 8009c80:	4622      	mov	r2, r4
 8009c82:	4621      	mov	r1, r4
 8009c84:	4638      	mov	r0, r7
 8009c86:	f7ff ff0b 	bl	8009aa0 <__multiply>
 8009c8a:	6020      	str	r0, [r4, #0]
 8009c8c:	f8c0 9000 	str.w	r9, [r0]
 8009c90:	4604      	mov	r4, r0
 8009c92:	e7e4      	b.n	8009c5e <__pow5mult+0x6a>
 8009c94:	4630      	mov	r0, r6
 8009c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	bf00      	nop
 8009c9c:	0800c308 	.word	0x0800c308
 8009ca0:	0800c22e 	.word	0x0800c22e
 8009ca4:	0800c2ae 	.word	0x0800c2ae

08009ca8 <__lshift>:
 8009ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cac:	460c      	mov	r4, r1
 8009cae:	6849      	ldr	r1, [r1, #4]
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	4607      	mov	r7, r0
 8009cba:	4691      	mov	r9, r2
 8009cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cc0:	f108 0601 	add.w	r6, r8, #1
 8009cc4:	42b3      	cmp	r3, r6
 8009cc6:	db0b      	blt.n	8009ce0 <__lshift+0x38>
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f7ff fd95 	bl	80097f8 <_Balloc>
 8009cce:	4605      	mov	r5, r0
 8009cd0:	b948      	cbnz	r0, 8009ce6 <__lshift+0x3e>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4b28      	ldr	r3, [pc, #160]	@ (8009d78 <__lshift+0xd0>)
 8009cd6:	4829      	ldr	r0, [pc, #164]	@ (8009d7c <__lshift+0xd4>)
 8009cd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009cdc:	f001 fb18 	bl	800b310 <__assert_func>
 8009ce0:	3101      	adds	r1, #1
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	e7ee      	b.n	8009cc4 <__lshift+0x1c>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f100 0114 	add.w	r1, r0, #20
 8009cec:	f100 0210 	add.w	r2, r0, #16
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	4553      	cmp	r3, sl
 8009cf4:	db33      	blt.n	8009d5e <__lshift+0xb6>
 8009cf6:	6920      	ldr	r0, [r4, #16]
 8009cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cfc:	f104 0314 	add.w	r3, r4, #20
 8009d00:	f019 091f 	ands.w	r9, r9, #31
 8009d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d0c:	d02b      	beq.n	8009d66 <__lshift+0xbe>
 8009d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d12:	468a      	mov	sl, r1
 8009d14:	2200      	movs	r2, #0
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	fa00 f009 	lsl.w	r0, r0, r9
 8009d1c:	4310      	orrs	r0, r2
 8009d1e:	f84a 0b04 	str.w	r0, [sl], #4
 8009d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d26:	459c      	cmp	ip, r3
 8009d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d2c:	d8f3      	bhi.n	8009d16 <__lshift+0x6e>
 8009d2e:	ebac 0304 	sub.w	r3, ip, r4
 8009d32:	3b15      	subs	r3, #21
 8009d34:	f023 0303 	bic.w	r3, r3, #3
 8009d38:	3304      	adds	r3, #4
 8009d3a:	f104 0015 	add.w	r0, r4, #21
 8009d3e:	4584      	cmp	ip, r0
 8009d40:	bf38      	it	cc
 8009d42:	2304      	movcc	r3, #4
 8009d44:	50ca      	str	r2, [r1, r3]
 8009d46:	b10a      	cbz	r2, 8009d4c <__lshift+0xa4>
 8009d48:	f108 0602 	add.w	r6, r8, #2
 8009d4c:	3e01      	subs	r6, #1
 8009d4e:	4638      	mov	r0, r7
 8009d50:	612e      	str	r6, [r5, #16]
 8009d52:	4621      	mov	r1, r4
 8009d54:	f7ff fd90 	bl	8009878 <_Bfree>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d62:	3301      	adds	r3, #1
 8009d64:	e7c5      	b.n	8009cf2 <__lshift+0x4a>
 8009d66:	3904      	subs	r1, #4
 8009d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d70:	459c      	cmp	ip, r3
 8009d72:	d8f9      	bhi.n	8009d68 <__lshift+0xc0>
 8009d74:	e7ea      	b.n	8009d4c <__lshift+0xa4>
 8009d76:	bf00      	nop
 8009d78:	0800c29d 	.word	0x0800c29d
 8009d7c:	0800c2ae 	.word	0x0800c2ae

08009d80 <__mcmp>:
 8009d80:	690a      	ldr	r2, [r1, #16]
 8009d82:	4603      	mov	r3, r0
 8009d84:	6900      	ldr	r0, [r0, #16]
 8009d86:	1a80      	subs	r0, r0, r2
 8009d88:	b530      	push	{r4, r5, lr}
 8009d8a:	d10e      	bne.n	8009daa <__mcmp+0x2a>
 8009d8c:	3314      	adds	r3, #20
 8009d8e:	3114      	adds	r1, #20
 8009d90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009da0:	4295      	cmp	r5, r2
 8009da2:	d003      	beq.n	8009dac <__mcmp+0x2c>
 8009da4:	d205      	bcs.n	8009db2 <__mcmp+0x32>
 8009da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009daa:	bd30      	pop	{r4, r5, pc}
 8009dac:	42a3      	cmp	r3, r4
 8009dae:	d3f3      	bcc.n	8009d98 <__mcmp+0x18>
 8009db0:	e7fb      	b.n	8009daa <__mcmp+0x2a>
 8009db2:	2001      	movs	r0, #1
 8009db4:	e7f9      	b.n	8009daa <__mcmp+0x2a>
	...

08009db8 <__mdiff>:
 8009db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	4689      	mov	r9, r1
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	f7ff ffdb 	bl	8009d80 <__mcmp>
 8009dca:	1e05      	subs	r5, r0, #0
 8009dcc:	d112      	bne.n	8009df4 <__mdiff+0x3c>
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f7ff fd11 	bl	80097f8 <_Balloc>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	b928      	cbnz	r0, 8009de6 <__mdiff+0x2e>
 8009dda:	4b3f      	ldr	r3, [pc, #252]	@ (8009ed8 <__mdiff+0x120>)
 8009ddc:	f240 2137 	movw	r1, #567	@ 0x237
 8009de0:	483e      	ldr	r0, [pc, #248]	@ (8009edc <__mdiff+0x124>)
 8009de2:	f001 fa95 	bl	800b310 <__assert_func>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dec:	4610      	mov	r0, r2
 8009dee:	b003      	add	sp, #12
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df4:	bfbc      	itt	lt
 8009df6:	464b      	movlt	r3, r9
 8009df8:	46a1      	movlt	r9, r4
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e00:	bfba      	itte	lt
 8009e02:	461c      	movlt	r4, r3
 8009e04:	2501      	movlt	r5, #1
 8009e06:	2500      	movge	r5, #0
 8009e08:	f7ff fcf6 	bl	80097f8 <_Balloc>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	b918      	cbnz	r0, 8009e18 <__mdiff+0x60>
 8009e10:	4b31      	ldr	r3, [pc, #196]	@ (8009ed8 <__mdiff+0x120>)
 8009e12:	f240 2145 	movw	r1, #581	@ 0x245
 8009e16:	e7e3      	b.n	8009de0 <__mdiff+0x28>
 8009e18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e1c:	6926      	ldr	r6, [r4, #16]
 8009e1e:	60c5      	str	r5, [r0, #12]
 8009e20:	f109 0310 	add.w	r3, r9, #16
 8009e24:	f109 0514 	add.w	r5, r9, #20
 8009e28:	f104 0e14 	add.w	lr, r4, #20
 8009e2c:	f100 0b14 	add.w	fp, r0, #20
 8009e30:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e34:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	46d9      	mov	r9, fp
 8009e3c:	f04f 0c00 	mov.w	ip, #0
 8009e40:	9b01      	ldr	r3, [sp, #4]
 8009e42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	fa1f f38a 	uxth.w	r3, sl
 8009e50:	4619      	mov	r1, r3
 8009e52:	b283      	uxth	r3, r0
 8009e54:	1acb      	subs	r3, r1, r3
 8009e56:	0c00      	lsrs	r0, r0, #16
 8009e58:	4463      	add	r3, ip
 8009e5a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e5e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e68:	4576      	cmp	r6, lr
 8009e6a:	f849 3b04 	str.w	r3, [r9], #4
 8009e6e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e72:	d8e5      	bhi.n	8009e40 <__mdiff+0x88>
 8009e74:	1b33      	subs	r3, r6, r4
 8009e76:	3b15      	subs	r3, #21
 8009e78:	f023 0303 	bic.w	r3, r3, #3
 8009e7c:	3415      	adds	r4, #21
 8009e7e:	3304      	adds	r3, #4
 8009e80:	42a6      	cmp	r6, r4
 8009e82:	bf38      	it	cc
 8009e84:	2304      	movcc	r3, #4
 8009e86:	441d      	add	r5, r3
 8009e88:	445b      	add	r3, fp
 8009e8a:	461e      	mov	r6, r3
 8009e8c:	462c      	mov	r4, r5
 8009e8e:	4544      	cmp	r4, r8
 8009e90:	d30e      	bcc.n	8009eb0 <__mdiff+0xf8>
 8009e92:	f108 0103 	add.w	r1, r8, #3
 8009e96:	1b49      	subs	r1, r1, r5
 8009e98:	f021 0103 	bic.w	r1, r1, #3
 8009e9c:	3d03      	subs	r5, #3
 8009e9e:	45a8      	cmp	r8, r5
 8009ea0:	bf38      	it	cc
 8009ea2:	2100      	movcc	r1, #0
 8009ea4:	440b      	add	r3, r1
 8009ea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009eaa:	b191      	cbz	r1, 8009ed2 <__mdiff+0x11a>
 8009eac:	6117      	str	r7, [r2, #16]
 8009eae:	e79d      	b.n	8009dec <__mdiff+0x34>
 8009eb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009eb4:	46e6      	mov	lr, ip
 8009eb6:	0c08      	lsrs	r0, r1, #16
 8009eb8:	fa1c fc81 	uxtah	ip, ip, r1
 8009ebc:	4471      	add	r1, lr
 8009ebe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ec2:	b289      	uxth	r1, r1
 8009ec4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ec8:	f846 1b04 	str.w	r1, [r6], #4
 8009ecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ed0:	e7dd      	b.n	8009e8e <__mdiff+0xd6>
 8009ed2:	3f01      	subs	r7, #1
 8009ed4:	e7e7      	b.n	8009ea6 <__mdiff+0xee>
 8009ed6:	bf00      	nop
 8009ed8:	0800c29d 	.word	0x0800c29d
 8009edc:	0800c2ae 	.word	0x0800c2ae

08009ee0 <__ulp>:
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	ed8d 0b00 	vstr	d0, [sp]
 8009ee6:	9a01      	ldr	r2, [sp, #4]
 8009ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8009f28 <__ulp+0x48>)
 8009eea:	4013      	ands	r3, r2
 8009eec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	dc08      	bgt.n	8009f06 <__ulp+0x26>
 8009ef4:	425b      	negs	r3, r3
 8009ef6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009efa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009efe:	da04      	bge.n	8009f0a <__ulp+0x2a>
 8009f00:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f04:	4113      	asrs	r3, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	e008      	b.n	8009f1c <__ulp+0x3c>
 8009f0a:	f1a2 0314 	sub.w	r3, r2, #20
 8009f0e:	2b1e      	cmp	r3, #30
 8009f10:	bfda      	itte	le
 8009f12:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f16:	40da      	lsrle	r2, r3
 8009f18:	2201      	movgt	r2, #1
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	ec41 0b10 	vmov	d0, r0, r1
 8009f24:	b002      	add	sp, #8
 8009f26:	4770      	bx	lr
 8009f28:	7ff00000 	.word	0x7ff00000

08009f2c <__b2d>:
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	6906      	ldr	r6, [r0, #16]
 8009f32:	f100 0814 	add.w	r8, r0, #20
 8009f36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009f3a:	1f37      	subs	r7, r6, #4
 8009f3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7ff fd4b 	bl	80099dc <__hi0bits>
 8009f46:	f1c0 0320 	rsb	r3, r0, #32
 8009f4a:	280a      	cmp	r0, #10
 8009f4c:	600b      	str	r3, [r1, #0]
 8009f4e:	491b      	ldr	r1, [pc, #108]	@ (8009fbc <__b2d+0x90>)
 8009f50:	dc15      	bgt.n	8009f7e <__b2d+0x52>
 8009f52:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f56:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f5a:	45b8      	cmp	r8, r7
 8009f5c:	ea43 0501 	orr.w	r5, r3, r1
 8009f60:	bf34      	ite	cc
 8009f62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f66:	2300      	movcs	r3, #0
 8009f68:	3015      	adds	r0, #21
 8009f6a:	fa02 f000 	lsl.w	r0, r2, r0
 8009f6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f72:	4303      	orrs	r3, r0
 8009f74:	461c      	mov	r4, r3
 8009f76:	ec45 4b10 	vmov	d0, r4, r5
 8009f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f7e:	45b8      	cmp	r8, r7
 8009f80:	bf3a      	itte	cc
 8009f82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f86:	f1a6 0708 	subcc.w	r7, r6, #8
 8009f8a:	2300      	movcs	r3, #0
 8009f8c:	380b      	subs	r0, #11
 8009f8e:	d012      	beq.n	8009fb6 <__b2d+0x8a>
 8009f90:	f1c0 0120 	rsb	r1, r0, #32
 8009f94:	fa23 f401 	lsr.w	r4, r3, r1
 8009f98:	4082      	lsls	r2, r0
 8009f9a:	4322      	orrs	r2, r4
 8009f9c:	4547      	cmp	r7, r8
 8009f9e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009fa2:	bf8c      	ite	hi
 8009fa4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009fa8:	2200      	movls	r2, #0
 8009faa:	4083      	lsls	r3, r0
 8009fac:	40ca      	lsrs	r2, r1
 8009fae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	e7de      	b.n	8009f74 <__b2d+0x48>
 8009fb6:	ea42 0501 	orr.w	r5, r2, r1
 8009fba:	e7db      	b.n	8009f74 <__b2d+0x48>
 8009fbc:	3ff00000 	.word	0x3ff00000

08009fc0 <__d2b>:
 8009fc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fc4:	460f      	mov	r7, r1
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	ec59 8b10 	vmov	r8, r9, d0
 8009fcc:	4616      	mov	r6, r2
 8009fce:	f7ff fc13 	bl	80097f8 <_Balloc>
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	b930      	cbnz	r0, 8009fe4 <__d2b+0x24>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	4b23      	ldr	r3, [pc, #140]	@ (800a068 <__d2b+0xa8>)
 8009fda:	4824      	ldr	r0, [pc, #144]	@ (800a06c <__d2b+0xac>)
 8009fdc:	f240 310f 	movw	r1, #783	@ 0x30f
 8009fe0:	f001 f996 	bl	800b310 <__assert_func>
 8009fe4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fec:	b10d      	cbz	r5, 8009ff2 <__d2b+0x32>
 8009fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ff8:	d023      	beq.n	800a042 <__d2b+0x82>
 8009ffa:	4668      	mov	r0, sp
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	f7ff fd0c 	bl	8009a1a <__lo0bits>
 800a002:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a006:	b1d0      	cbz	r0, 800a03e <__d2b+0x7e>
 800a008:	f1c0 0320 	rsb	r3, r0, #32
 800a00c:	fa02 f303 	lsl.w	r3, r2, r3
 800a010:	430b      	orrs	r3, r1
 800a012:	40c2      	lsrs	r2, r0
 800a014:	6163      	str	r3, [r4, #20]
 800a016:	9201      	str	r2, [sp, #4]
 800a018:	9b01      	ldr	r3, [sp, #4]
 800a01a:	61a3      	str	r3, [r4, #24]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	bf0c      	ite	eq
 800a020:	2201      	moveq	r2, #1
 800a022:	2202      	movne	r2, #2
 800a024:	6122      	str	r2, [r4, #16]
 800a026:	b1a5      	cbz	r5, 800a052 <__d2b+0x92>
 800a028:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a02c:	4405      	add	r5, r0
 800a02e:	603d      	str	r5, [r7, #0]
 800a030:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a034:	6030      	str	r0, [r6, #0]
 800a036:	4620      	mov	r0, r4
 800a038:	b003      	add	sp, #12
 800a03a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a03e:	6161      	str	r1, [r4, #20]
 800a040:	e7ea      	b.n	800a018 <__d2b+0x58>
 800a042:	a801      	add	r0, sp, #4
 800a044:	f7ff fce9 	bl	8009a1a <__lo0bits>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	6163      	str	r3, [r4, #20]
 800a04c:	3020      	adds	r0, #32
 800a04e:	2201      	movs	r2, #1
 800a050:	e7e8      	b.n	800a024 <__d2b+0x64>
 800a052:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a056:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a05a:	6038      	str	r0, [r7, #0]
 800a05c:	6918      	ldr	r0, [r3, #16]
 800a05e:	f7ff fcbd 	bl	80099dc <__hi0bits>
 800a062:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a066:	e7e5      	b.n	800a034 <__d2b+0x74>
 800a068:	0800c29d 	.word	0x0800c29d
 800a06c:	0800c2ae 	.word	0x0800c2ae

0800a070 <__ratio>:
 800a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a074:	b085      	sub	sp, #20
 800a076:	e9cd 1000 	strd	r1, r0, [sp]
 800a07a:	a902      	add	r1, sp, #8
 800a07c:	f7ff ff56 	bl	8009f2c <__b2d>
 800a080:	9800      	ldr	r0, [sp, #0]
 800a082:	a903      	add	r1, sp, #12
 800a084:	ec55 4b10 	vmov	r4, r5, d0
 800a088:	f7ff ff50 	bl	8009f2c <__b2d>
 800a08c:	9b01      	ldr	r3, [sp, #4]
 800a08e:	6919      	ldr	r1, [r3, #16]
 800a090:	9b00      	ldr	r3, [sp, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	1ac9      	subs	r1, r1, r3
 800a096:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a09a:	1a9b      	subs	r3, r3, r2
 800a09c:	ec5b ab10 	vmov	sl, fp, d0
 800a0a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfce      	itee	gt
 800a0a8:	462a      	movgt	r2, r5
 800a0aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0ae:	465a      	movle	r2, fp
 800a0b0:	462f      	mov	r7, r5
 800a0b2:	46d9      	mov	r9, fp
 800a0b4:	bfcc      	ite	gt
 800a0b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a0be:	464b      	mov	r3, r9
 800a0c0:	4652      	mov	r2, sl
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	4639      	mov	r1, r7
 800a0c6:	f7f6 fbe9 	bl	800089c <__aeabi_ddiv>
 800a0ca:	ec41 0b10 	vmov	d0, r0, r1
 800a0ce:	b005      	add	sp, #20
 800a0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0d4 <__copybits>:
 800a0d4:	3901      	subs	r1, #1
 800a0d6:	b570      	push	{r4, r5, r6, lr}
 800a0d8:	1149      	asrs	r1, r1, #5
 800a0da:	6914      	ldr	r4, [r2, #16]
 800a0dc:	3101      	adds	r1, #1
 800a0de:	f102 0314 	add.w	r3, r2, #20
 800a0e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a0e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a0ea:	1f05      	subs	r5, r0, #4
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	d30c      	bcc.n	800a10a <__copybits+0x36>
 800a0f0:	1aa3      	subs	r3, r4, r2
 800a0f2:	3b11      	subs	r3, #17
 800a0f4:	f023 0303 	bic.w	r3, r3, #3
 800a0f8:	3211      	adds	r2, #17
 800a0fa:	42a2      	cmp	r2, r4
 800a0fc:	bf88      	it	hi
 800a0fe:	2300      	movhi	r3, #0
 800a100:	4418      	add	r0, r3
 800a102:	2300      	movs	r3, #0
 800a104:	4288      	cmp	r0, r1
 800a106:	d305      	bcc.n	800a114 <__copybits+0x40>
 800a108:	bd70      	pop	{r4, r5, r6, pc}
 800a10a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a10e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a112:	e7eb      	b.n	800a0ec <__copybits+0x18>
 800a114:	f840 3b04 	str.w	r3, [r0], #4
 800a118:	e7f4      	b.n	800a104 <__copybits+0x30>

0800a11a <__any_on>:
 800a11a:	f100 0214 	add.w	r2, r0, #20
 800a11e:	6900      	ldr	r0, [r0, #16]
 800a120:	114b      	asrs	r3, r1, #5
 800a122:	4298      	cmp	r0, r3
 800a124:	b510      	push	{r4, lr}
 800a126:	db11      	blt.n	800a14c <__any_on+0x32>
 800a128:	dd0a      	ble.n	800a140 <__any_on+0x26>
 800a12a:	f011 011f 	ands.w	r1, r1, #31
 800a12e:	d007      	beq.n	800a140 <__any_on+0x26>
 800a130:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a134:	fa24 f001 	lsr.w	r0, r4, r1
 800a138:	fa00 f101 	lsl.w	r1, r0, r1
 800a13c:	428c      	cmp	r4, r1
 800a13e:	d10b      	bne.n	800a158 <__any_on+0x3e>
 800a140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a144:	4293      	cmp	r3, r2
 800a146:	d803      	bhi.n	800a150 <__any_on+0x36>
 800a148:	2000      	movs	r0, #0
 800a14a:	bd10      	pop	{r4, pc}
 800a14c:	4603      	mov	r3, r0
 800a14e:	e7f7      	b.n	800a140 <__any_on+0x26>
 800a150:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a154:	2900      	cmp	r1, #0
 800a156:	d0f5      	beq.n	800a144 <__any_on+0x2a>
 800a158:	2001      	movs	r0, #1
 800a15a:	e7f6      	b.n	800a14a <__any_on+0x30>

0800a15c <sulp>:
 800a15c:	b570      	push	{r4, r5, r6, lr}
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	ec45 4b10 	vmov	d0, r4, r5
 800a166:	4616      	mov	r6, r2
 800a168:	f7ff feba 	bl	8009ee0 <__ulp>
 800a16c:	ec51 0b10 	vmov	r0, r1, d0
 800a170:	b17e      	cbz	r6, 800a192 <sulp+0x36>
 800a172:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a176:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dd09      	ble.n	800a192 <sulp+0x36>
 800a17e:	051b      	lsls	r3, r3, #20
 800a180:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a184:	2400      	movs	r4, #0
 800a186:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a18a:	4622      	mov	r2, r4
 800a18c:	462b      	mov	r3, r5
 800a18e:	f7f6 fa5b 	bl	8000648 <__aeabi_dmul>
 800a192:	ec41 0b10 	vmov	d0, r0, r1
 800a196:	bd70      	pop	{r4, r5, r6, pc}

0800a198 <_strtod_l>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	b09f      	sub	sp, #124	@ 0x7c
 800a19e:	460c      	mov	r4, r1
 800a1a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a1a6:	9005      	str	r0, [sp, #20]
 800a1a8:	f04f 0a00 	mov.w	sl, #0
 800a1ac:	f04f 0b00 	mov.w	fp, #0
 800a1b0:	460a      	mov	r2, r1
 800a1b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1b4:	7811      	ldrb	r1, [r2, #0]
 800a1b6:	292b      	cmp	r1, #43	@ 0x2b
 800a1b8:	d04a      	beq.n	800a250 <_strtod_l+0xb8>
 800a1ba:	d838      	bhi.n	800a22e <_strtod_l+0x96>
 800a1bc:	290d      	cmp	r1, #13
 800a1be:	d832      	bhi.n	800a226 <_strtod_l+0x8e>
 800a1c0:	2908      	cmp	r1, #8
 800a1c2:	d832      	bhi.n	800a22a <_strtod_l+0x92>
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	d03b      	beq.n	800a240 <_strtod_l+0xa8>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a1cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a1ce:	782a      	ldrb	r2, [r5, #0]
 800a1d0:	2a30      	cmp	r2, #48	@ 0x30
 800a1d2:	f040 80b3 	bne.w	800a33c <_strtod_l+0x1a4>
 800a1d6:	786a      	ldrb	r2, [r5, #1]
 800a1d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a1dc:	2a58      	cmp	r2, #88	@ 0x58
 800a1de:	d16e      	bne.n	800a2be <_strtod_l+0x126>
 800a1e0:	9302      	str	r3, [sp, #8]
 800a1e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	4a8e      	ldr	r2, [pc, #568]	@ (800a424 <_strtod_l+0x28c>)
 800a1ec:	9805      	ldr	r0, [sp, #20]
 800a1ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a1f0:	a919      	add	r1, sp, #100	@ 0x64
 800a1f2:	f001 f927 	bl	800b444 <__gethex>
 800a1f6:	f010 060f 	ands.w	r6, r0, #15
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	d005      	beq.n	800a20a <_strtod_l+0x72>
 800a1fe:	2e06      	cmp	r6, #6
 800a200:	d128      	bne.n	800a254 <_strtod_l+0xbc>
 800a202:	3501      	adds	r5, #1
 800a204:	2300      	movs	r3, #0
 800a206:	9519      	str	r5, [sp, #100]	@ 0x64
 800a208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a20a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f040 858e 	bne.w	800ad2e <_strtod_l+0xb96>
 800a212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a214:	b1cb      	cbz	r3, 800a24a <_strtod_l+0xb2>
 800a216:	4652      	mov	r2, sl
 800a218:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a21c:	ec43 2b10 	vmov	d0, r2, r3
 800a220:	b01f      	add	sp, #124	@ 0x7c
 800a222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a226:	2920      	cmp	r1, #32
 800a228:	d1ce      	bne.n	800a1c8 <_strtod_l+0x30>
 800a22a:	3201      	adds	r2, #1
 800a22c:	e7c1      	b.n	800a1b2 <_strtod_l+0x1a>
 800a22e:	292d      	cmp	r1, #45	@ 0x2d
 800a230:	d1ca      	bne.n	800a1c8 <_strtod_l+0x30>
 800a232:	2101      	movs	r1, #1
 800a234:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a236:	1c51      	adds	r1, r2, #1
 800a238:	9119      	str	r1, [sp, #100]	@ 0x64
 800a23a:	7852      	ldrb	r2, [r2, #1]
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	d1c5      	bne.n	800a1cc <_strtod_l+0x34>
 800a240:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a242:	9419      	str	r4, [sp, #100]	@ 0x64
 800a244:	2b00      	cmp	r3, #0
 800a246:	f040 8570 	bne.w	800ad2a <_strtod_l+0xb92>
 800a24a:	4652      	mov	r2, sl
 800a24c:	465b      	mov	r3, fp
 800a24e:	e7e5      	b.n	800a21c <_strtod_l+0x84>
 800a250:	2100      	movs	r1, #0
 800a252:	e7ef      	b.n	800a234 <_strtod_l+0x9c>
 800a254:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a256:	b13a      	cbz	r2, 800a268 <_strtod_l+0xd0>
 800a258:	2135      	movs	r1, #53	@ 0x35
 800a25a:	a81c      	add	r0, sp, #112	@ 0x70
 800a25c:	f7ff ff3a 	bl	800a0d4 <__copybits>
 800a260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a262:	9805      	ldr	r0, [sp, #20]
 800a264:	f7ff fb08 	bl	8009878 <_Bfree>
 800a268:	3e01      	subs	r6, #1
 800a26a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a26c:	2e04      	cmp	r6, #4
 800a26e:	d806      	bhi.n	800a27e <_strtod_l+0xe6>
 800a270:	e8df f006 	tbb	[pc, r6]
 800a274:	201d0314 	.word	0x201d0314
 800a278:	14          	.byte	0x14
 800a279:	00          	.byte	0x00
 800a27a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a27e:	05e1      	lsls	r1, r4, #23
 800a280:	bf48      	it	mi
 800a282:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a28a:	0d1b      	lsrs	r3, r3, #20
 800a28c:	051b      	lsls	r3, r3, #20
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1bb      	bne.n	800a20a <_strtod_l+0x72>
 800a292:	f7fe fb31 	bl	80088f8 <__errno>
 800a296:	2322      	movs	r3, #34	@ 0x22
 800a298:	6003      	str	r3, [r0, #0]
 800a29a:	e7b6      	b.n	800a20a <_strtod_l+0x72>
 800a29c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a2a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a2a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2ac:	e7e7      	b.n	800a27e <_strtod_l+0xe6>
 800a2ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a42c <_strtod_l+0x294>
 800a2b2:	e7e4      	b.n	800a27e <_strtod_l+0xe6>
 800a2b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a2b8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a2bc:	e7df      	b.n	800a27e <_strtod_l+0xe6>
 800a2be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2c4:	785b      	ldrb	r3, [r3, #1]
 800a2c6:	2b30      	cmp	r3, #48	@ 0x30
 800a2c8:	d0f9      	beq.n	800a2be <_strtod_l+0x126>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d09d      	beq.n	800a20a <_strtod_l+0x72>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	9308      	str	r3, [sp, #32]
 800a2da:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2dc:	461f      	mov	r7, r3
 800a2de:	220a      	movs	r2, #10
 800a2e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a2e2:	7805      	ldrb	r5, [r0, #0]
 800a2e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a2e8:	b2d9      	uxtb	r1, r3
 800a2ea:	2909      	cmp	r1, #9
 800a2ec:	d928      	bls.n	800a340 <_strtod_l+0x1a8>
 800a2ee:	494e      	ldr	r1, [pc, #312]	@ (800a428 <_strtod_l+0x290>)
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f000 ffd5 	bl	800b2a0 <strncmp>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d032      	beq.n	800a360 <_strtod_l+0x1c8>
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	4681      	mov	r9, r0
 800a300:	463d      	mov	r5, r7
 800a302:	4603      	mov	r3, r0
 800a304:	2a65      	cmp	r2, #101	@ 0x65
 800a306:	d001      	beq.n	800a30c <_strtod_l+0x174>
 800a308:	2a45      	cmp	r2, #69	@ 0x45
 800a30a:	d114      	bne.n	800a336 <_strtod_l+0x19e>
 800a30c:	b91d      	cbnz	r5, 800a316 <_strtod_l+0x17e>
 800a30e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a310:	4302      	orrs	r2, r0
 800a312:	d095      	beq.n	800a240 <_strtod_l+0xa8>
 800a314:	2500      	movs	r5, #0
 800a316:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a318:	1c62      	adds	r2, r4, #1
 800a31a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a31c:	7862      	ldrb	r2, [r4, #1]
 800a31e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a320:	d077      	beq.n	800a412 <_strtod_l+0x27a>
 800a322:	2a2d      	cmp	r2, #45	@ 0x2d
 800a324:	d07b      	beq.n	800a41e <_strtod_l+0x286>
 800a326:	f04f 0c00 	mov.w	ip, #0
 800a32a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a32e:	2909      	cmp	r1, #9
 800a330:	f240 8082 	bls.w	800a438 <_strtod_l+0x2a0>
 800a334:	9419      	str	r4, [sp, #100]	@ 0x64
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	e0a2      	b.n	800a482 <_strtod_l+0x2ea>
 800a33c:	2300      	movs	r3, #0
 800a33e:	e7c7      	b.n	800a2d0 <_strtod_l+0x138>
 800a340:	2f08      	cmp	r7, #8
 800a342:	bfd5      	itete	le
 800a344:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a346:	9908      	ldrgt	r1, [sp, #32]
 800a348:	fb02 3301 	mlale	r3, r2, r1, r3
 800a34c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a350:	f100 0001 	add.w	r0, r0, #1
 800a354:	bfd4      	ite	le
 800a356:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a358:	9308      	strgt	r3, [sp, #32]
 800a35a:	3701      	adds	r7, #1
 800a35c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a35e:	e7bf      	b.n	800a2e0 <_strtod_l+0x148>
 800a360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	9219      	str	r2, [sp, #100]	@ 0x64
 800a366:	785a      	ldrb	r2, [r3, #1]
 800a368:	b37f      	cbz	r7, 800a3ca <_strtod_l+0x232>
 800a36a:	4681      	mov	r9, r0
 800a36c:	463d      	mov	r5, r7
 800a36e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a372:	2b09      	cmp	r3, #9
 800a374:	d912      	bls.n	800a39c <_strtod_l+0x204>
 800a376:	2301      	movs	r3, #1
 800a378:	e7c4      	b.n	800a304 <_strtod_l+0x16c>
 800a37a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a380:	785a      	ldrb	r2, [r3, #1]
 800a382:	3001      	adds	r0, #1
 800a384:	2a30      	cmp	r2, #48	@ 0x30
 800a386:	d0f8      	beq.n	800a37a <_strtod_l+0x1e2>
 800a388:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	f200 84d3 	bhi.w	800ad38 <_strtod_l+0xba0>
 800a392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a394:	930c      	str	r3, [sp, #48]	@ 0x30
 800a396:	4681      	mov	r9, r0
 800a398:	2000      	movs	r0, #0
 800a39a:	4605      	mov	r5, r0
 800a39c:	3a30      	subs	r2, #48	@ 0x30
 800a39e:	f100 0301 	add.w	r3, r0, #1
 800a3a2:	d02a      	beq.n	800a3fa <_strtod_l+0x262>
 800a3a4:	4499      	add	r9, r3
 800a3a6:	eb00 0c05 	add.w	ip, r0, r5
 800a3aa:	462b      	mov	r3, r5
 800a3ac:	210a      	movs	r1, #10
 800a3ae:	4563      	cmp	r3, ip
 800a3b0:	d10d      	bne.n	800a3ce <_strtod_l+0x236>
 800a3b2:	1c69      	adds	r1, r5, #1
 800a3b4:	4401      	add	r1, r0
 800a3b6:	4428      	add	r0, r5
 800a3b8:	2808      	cmp	r0, #8
 800a3ba:	dc16      	bgt.n	800a3ea <_strtod_l+0x252>
 800a3bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a3be:	230a      	movs	r3, #10
 800a3c0:	fb03 2300 	mla	r3, r3, r0, r2
 800a3c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e018      	b.n	800a3fc <_strtod_l+0x264>
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	e7da      	b.n	800a384 <_strtod_l+0x1ec>
 800a3ce:	2b08      	cmp	r3, #8
 800a3d0:	f103 0301 	add.w	r3, r3, #1
 800a3d4:	dc03      	bgt.n	800a3de <_strtod_l+0x246>
 800a3d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a3d8:	434e      	muls	r6, r1
 800a3da:	960a      	str	r6, [sp, #40]	@ 0x28
 800a3dc:	e7e7      	b.n	800a3ae <_strtod_l+0x216>
 800a3de:	2b10      	cmp	r3, #16
 800a3e0:	bfde      	ittt	le
 800a3e2:	9e08      	ldrle	r6, [sp, #32]
 800a3e4:	434e      	mulle	r6, r1
 800a3e6:	9608      	strle	r6, [sp, #32]
 800a3e8:	e7e1      	b.n	800a3ae <_strtod_l+0x216>
 800a3ea:	280f      	cmp	r0, #15
 800a3ec:	dceb      	bgt.n	800a3c6 <_strtod_l+0x22e>
 800a3ee:	9808      	ldr	r0, [sp, #32]
 800a3f0:	230a      	movs	r3, #10
 800a3f2:	fb03 2300 	mla	r3, r3, r0, r2
 800a3f6:	9308      	str	r3, [sp, #32]
 800a3f8:	e7e5      	b.n	800a3c6 <_strtod_l+0x22e>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3fe:	1c50      	adds	r0, r2, #1
 800a400:	9019      	str	r0, [sp, #100]	@ 0x64
 800a402:	7852      	ldrb	r2, [r2, #1]
 800a404:	4618      	mov	r0, r3
 800a406:	460d      	mov	r5, r1
 800a408:	e7b1      	b.n	800a36e <_strtod_l+0x1d6>
 800a40a:	f04f 0900 	mov.w	r9, #0
 800a40e:	2301      	movs	r3, #1
 800a410:	e77d      	b.n	800a30e <_strtod_l+0x176>
 800a412:	f04f 0c00 	mov.w	ip, #0
 800a416:	1ca2      	adds	r2, r4, #2
 800a418:	9219      	str	r2, [sp, #100]	@ 0x64
 800a41a:	78a2      	ldrb	r2, [r4, #2]
 800a41c:	e785      	b.n	800a32a <_strtod_l+0x192>
 800a41e:	f04f 0c01 	mov.w	ip, #1
 800a422:	e7f8      	b.n	800a416 <_strtod_l+0x27e>
 800a424:	0800c420 	.word	0x0800c420
 800a428:	0800c408 	.word	0x0800c408
 800a42c:	7ff00000 	.word	0x7ff00000
 800a430:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a432:	1c51      	adds	r1, r2, #1
 800a434:	9119      	str	r1, [sp, #100]	@ 0x64
 800a436:	7852      	ldrb	r2, [r2, #1]
 800a438:	2a30      	cmp	r2, #48	@ 0x30
 800a43a:	d0f9      	beq.n	800a430 <_strtod_l+0x298>
 800a43c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a440:	2908      	cmp	r1, #8
 800a442:	f63f af78 	bhi.w	800a336 <_strtod_l+0x19e>
 800a446:	3a30      	subs	r2, #48	@ 0x30
 800a448:	920e      	str	r2, [sp, #56]	@ 0x38
 800a44a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a44c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a44e:	f04f 080a 	mov.w	r8, #10
 800a452:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a454:	1c56      	adds	r6, r2, #1
 800a456:	9619      	str	r6, [sp, #100]	@ 0x64
 800a458:	7852      	ldrb	r2, [r2, #1]
 800a45a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a45e:	f1be 0f09 	cmp.w	lr, #9
 800a462:	d939      	bls.n	800a4d8 <_strtod_l+0x340>
 800a464:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a466:	1a76      	subs	r6, r6, r1
 800a468:	2e08      	cmp	r6, #8
 800a46a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a46e:	dc03      	bgt.n	800a478 <_strtod_l+0x2e0>
 800a470:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a472:	4588      	cmp	r8, r1
 800a474:	bfa8      	it	ge
 800a476:	4688      	movge	r8, r1
 800a478:	f1bc 0f00 	cmp.w	ip, #0
 800a47c:	d001      	beq.n	800a482 <_strtod_l+0x2ea>
 800a47e:	f1c8 0800 	rsb	r8, r8, #0
 800a482:	2d00      	cmp	r5, #0
 800a484:	d14e      	bne.n	800a524 <_strtod_l+0x38c>
 800a486:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a488:	4308      	orrs	r0, r1
 800a48a:	f47f aebe 	bne.w	800a20a <_strtod_l+0x72>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f47f aed6 	bne.w	800a240 <_strtod_l+0xa8>
 800a494:	2a69      	cmp	r2, #105	@ 0x69
 800a496:	d028      	beq.n	800a4ea <_strtod_l+0x352>
 800a498:	dc25      	bgt.n	800a4e6 <_strtod_l+0x34e>
 800a49a:	2a49      	cmp	r2, #73	@ 0x49
 800a49c:	d025      	beq.n	800a4ea <_strtod_l+0x352>
 800a49e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a4a0:	f47f aece 	bne.w	800a240 <_strtod_l+0xa8>
 800a4a4:	499b      	ldr	r1, [pc, #620]	@ (800a714 <_strtod_l+0x57c>)
 800a4a6:	a819      	add	r0, sp, #100	@ 0x64
 800a4a8:	f001 f9ee 	bl	800b888 <__match>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f43f aec7 	beq.w	800a240 <_strtod_l+0xa8>
 800a4b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b28      	cmp	r3, #40	@ 0x28
 800a4b8:	d12e      	bne.n	800a518 <_strtod_l+0x380>
 800a4ba:	4997      	ldr	r1, [pc, #604]	@ (800a718 <_strtod_l+0x580>)
 800a4bc:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4be:	a819      	add	r0, sp, #100	@ 0x64
 800a4c0:	f001 f9f6 	bl	800b8b0 <__hexnan>
 800a4c4:	2805      	cmp	r0, #5
 800a4c6:	d127      	bne.n	800a518 <_strtod_l+0x380>
 800a4c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a4ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a4d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a4d6:	e698      	b.n	800a20a <_strtod_l+0x72>
 800a4d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a4da:	fb08 2101 	mla	r1, r8, r1, r2
 800a4de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a4e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4e4:	e7b5      	b.n	800a452 <_strtod_l+0x2ba>
 800a4e6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a4e8:	e7da      	b.n	800a4a0 <_strtod_l+0x308>
 800a4ea:	498c      	ldr	r1, [pc, #560]	@ (800a71c <_strtod_l+0x584>)
 800a4ec:	a819      	add	r0, sp, #100	@ 0x64
 800a4ee:	f001 f9cb 	bl	800b888 <__match>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f43f aea4 	beq.w	800a240 <_strtod_l+0xa8>
 800a4f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4fa:	4989      	ldr	r1, [pc, #548]	@ (800a720 <_strtod_l+0x588>)
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	a819      	add	r0, sp, #100	@ 0x64
 800a500:	9319      	str	r3, [sp, #100]	@ 0x64
 800a502:	f001 f9c1 	bl	800b888 <__match>
 800a506:	b910      	cbnz	r0, 800a50e <_strtod_l+0x376>
 800a508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a50a:	3301      	adds	r3, #1
 800a50c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a50e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a730 <_strtod_l+0x598>
 800a512:	f04f 0a00 	mov.w	sl, #0
 800a516:	e678      	b.n	800a20a <_strtod_l+0x72>
 800a518:	4882      	ldr	r0, [pc, #520]	@ (800a724 <_strtod_l+0x58c>)
 800a51a:	f000 fef1 	bl	800b300 <nan>
 800a51e:	ec5b ab10 	vmov	sl, fp, d0
 800a522:	e672      	b.n	800a20a <_strtod_l+0x72>
 800a524:	eba8 0309 	sub.w	r3, r8, r9
 800a528:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a52a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a52c:	2f00      	cmp	r7, #0
 800a52e:	bf08      	it	eq
 800a530:	462f      	moveq	r7, r5
 800a532:	2d10      	cmp	r5, #16
 800a534:	462c      	mov	r4, r5
 800a536:	bfa8      	it	ge
 800a538:	2410      	movge	r4, #16
 800a53a:	f7f6 f80b 	bl	8000554 <__aeabi_ui2d>
 800a53e:	2d09      	cmp	r5, #9
 800a540:	4682      	mov	sl, r0
 800a542:	468b      	mov	fp, r1
 800a544:	dc13      	bgt.n	800a56e <_strtod_l+0x3d6>
 800a546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f43f ae5e 	beq.w	800a20a <_strtod_l+0x72>
 800a54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a550:	dd78      	ble.n	800a644 <_strtod_l+0x4ac>
 800a552:	2b16      	cmp	r3, #22
 800a554:	dc5f      	bgt.n	800a616 <_strtod_l+0x47e>
 800a556:	4974      	ldr	r1, [pc, #464]	@ (800a728 <_strtod_l+0x590>)
 800a558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a560:	4652      	mov	r2, sl
 800a562:	465b      	mov	r3, fp
 800a564:	f7f6 f870 	bl	8000648 <__aeabi_dmul>
 800a568:	4682      	mov	sl, r0
 800a56a:	468b      	mov	fp, r1
 800a56c:	e64d      	b.n	800a20a <_strtod_l+0x72>
 800a56e:	4b6e      	ldr	r3, [pc, #440]	@ (800a728 <_strtod_l+0x590>)
 800a570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a574:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a578:	f7f6 f866 	bl	8000648 <__aeabi_dmul>
 800a57c:	4682      	mov	sl, r0
 800a57e:	9808      	ldr	r0, [sp, #32]
 800a580:	468b      	mov	fp, r1
 800a582:	f7f5 ffe7 	bl	8000554 <__aeabi_ui2d>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4650      	mov	r0, sl
 800a58c:	4659      	mov	r1, fp
 800a58e:	f7f5 fea5 	bl	80002dc <__adddf3>
 800a592:	2d0f      	cmp	r5, #15
 800a594:	4682      	mov	sl, r0
 800a596:	468b      	mov	fp, r1
 800a598:	ddd5      	ble.n	800a546 <_strtod_l+0x3ae>
 800a59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a59c:	1b2c      	subs	r4, r5, r4
 800a59e:	441c      	add	r4, r3
 800a5a0:	2c00      	cmp	r4, #0
 800a5a2:	f340 8096 	ble.w	800a6d2 <_strtod_l+0x53a>
 800a5a6:	f014 030f 	ands.w	r3, r4, #15
 800a5aa:	d00a      	beq.n	800a5c2 <_strtod_l+0x42a>
 800a5ac:	495e      	ldr	r1, [pc, #376]	@ (800a728 <_strtod_l+0x590>)
 800a5ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ba:	f7f6 f845 	bl	8000648 <__aeabi_dmul>
 800a5be:	4682      	mov	sl, r0
 800a5c0:	468b      	mov	fp, r1
 800a5c2:	f034 040f 	bics.w	r4, r4, #15
 800a5c6:	d073      	beq.n	800a6b0 <_strtod_l+0x518>
 800a5c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a5cc:	dd48      	ble.n	800a660 <_strtod_l+0x4c8>
 800a5ce:	2400      	movs	r4, #0
 800a5d0:	46a0      	mov	r8, r4
 800a5d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a5d4:	46a1      	mov	r9, r4
 800a5d6:	9a05      	ldr	r2, [sp, #20]
 800a5d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a730 <_strtod_l+0x598>
 800a5dc:	2322      	movs	r3, #34	@ 0x22
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	f04f 0a00 	mov.w	sl, #0
 800a5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f43f ae0f 	beq.w	800a20a <_strtod_l+0x72>
 800a5ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5ee:	9805      	ldr	r0, [sp, #20]
 800a5f0:	f7ff f942 	bl	8009878 <_Bfree>
 800a5f4:	9805      	ldr	r0, [sp, #20]
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	f7ff f93e 	bl	8009878 <_Bfree>
 800a5fc:	9805      	ldr	r0, [sp, #20]
 800a5fe:	4641      	mov	r1, r8
 800a600:	f7ff f93a 	bl	8009878 <_Bfree>
 800a604:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a606:	9805      	ldr	r0, [sp, #20]
 800a608:	f7ff f936 	bl	8009878 <_Bfree>
 800a60c:	9805      	ldr	r0, [sp, #20]
 800a60e:	4621      	mov	r1, r4
 800a610:	f7ff f932 	bl	8009878 <_Bfree>
 800a614:	e5f9      	b.n	800a20a <_strtod_l+0x72>
 800a616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a618:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a61c:	4293      	cmp	r3, r2
 800a61e:	dbbc      	blt.n	800a59a <_strtod_l+0x402>
 800a620:	4c41      	ldr	r4, [pc, #260]	@ (800a728 <_strtod_l+0x590>)
 800a622:	f1c5 050f 	rsb	r5, r5, #15
 800a626:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a62a:	4652      	mov	r2, sl
 800a62c:	465b      	mov	r3, fp
 800a62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a632:	f7f6 f809 	bl	8000648 <__aeabi_dmul>
 800a636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a638:	1b5d      	subs	r5, r3, r5
 800a63a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a63e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a642:	e78f      	b.n	800a564 <_strtod_l+0x3cc>
 800a644:	3316      	adds	r3, #22
 800a646:	dba8      	blt.n	800a59a <_strtod_l+0x402>
 800a648:	4b37      	ldr	r3, [pc, #220]	@ (800a728 <_strtod_l+0x590>)
 800a64a:	eba9 0808 	sub.w	r8, r9, r8
 800a64e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a652:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a656:	4650      	mov	r0, sl
 800a658:	4659      	mov	r1, fp
 800a65a:	f7f6 f91f 	bl	800089c <__aeabi_ddiv>
 800a65e:	e783      	b.n	800a568 <_strtod_l+0x3d0>
 800a660:	4b32      	ldr	r3, [pc, #200]	@ (800a72c <_strtod_l+0x594>)
 800a662:	9308      	str	r3, [sp, #32]
 800a664:	2300      	movs	r3, #0
 800a666:	1124      	asrs	r4, r4, #4
 800a668:	4650      	mov	r0, sl
 800a66a:	4659      	mov	r1, fp
 800a66c:	461e      	mov	r6, r3
 800a66e:	2c01      	cmp	r4, #1
 800a670:	dc21      	bgt.n	800a6b6 <_strtod_l+0x51e>
 800a672:	b10b      	cbz	r3, 800a678 <_strtod_l+0x4e0>
 800a674:	4682      	mov	sl, r0
 800a676:	468b      	mov	fp, r1
 800a678:	492c      	ldr	r1, [pc, #176]	@ (800a72c <_strtod_l+0x594>)
 800a67a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a67e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a682:	4652      	mov	r2, sl
 800a684:	465b      	mov	r3, fp
 800a686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a68a:	f7f5 ffdd 	bl	8000648 <__aeabi_dmul>
 800a68e:	4b28      	ldr	r3, [pc, #160]	@ (800a730 <_strtod_l+0x598>)
 800a690:	460a      	mov	r2, r1
 800a692:	400b      	ands	r3, r1
 800a694:	4927      	ldr	r1, [pc, #156]	@ (800a734 <_strtod_l+0x59c>)
 800a696:	428b      	cmp	r3, r1
 800a698:	4682      	mov	sl, r0
 800a69a:	d898      	bhi.n	800a5ce <_strtod_l+0x436>
 800a69c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a6a0:	428b      	cmp	r3, r1
 800a6a2:	bf86      	itte	hi
 800a6a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a738 <_strtod_l+0x5a0>
 800a6a8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a6ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9308      	str	r3, [sp, #32]
 800a6b4:	e07a      	b.n	800a7ac <_strtod_l+0x614>
 800a6b6:	07e2      	lsls	r2, r4, #31
 800a6b8:	d505      	bpl.n	800a6c6 <_strtod_l+0x52e>
 800a6ba:	9b08      	ldr	r3, [sp, #32]
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f7f5 ffc2 	bl	8000648 <__aeabi_dmul>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	9a08      	ldr	r2, [sp, #32]
 800a6c8:	3208      	adds	r2, #8
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	1064      	asrs	r4, r4, #1
 800a6ce:	9208      	str	r2, [sp, #32]
 800a6d0:	e7cd      	b.n	800a66e <_strtod_l+0x4d6>
 800a6d2:	d0ed      	beq.n	800a6b0 <_strtod_l+0x518>
 800a6d4:	4264      	negs	r4, r4
 800a6d6:	f014 020f 	ands.w	r2, r4, #15
 800a6da:	d00a      	beq.n	800a6f2 <_strtod_l+0x55a>
 800a6dc:	4b12      	ldr	r3, [pc, #72]	@ (800a728 <_strtod_l+0x590>)
 800a6de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	4659      	mov	r1, fp
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f7f6 f8d7 	bl	800089c <__aeabi_ddiv>
 800a6ee:	4682      	mov	sl, r0
 800a6f0:	468b      	mov	fp, r1
 800a6f2:	1124      	asrs	r4, r4, #4
 800a6f4:	d0dc      	beq.n	800a6b0 <_strtod_l+0x518>
 800a6f6:	2c1f      	cmp	r4, #31
 800a6f8:	dd20      	ble.n	800a73c <_strtod_l+0x5a4>
 800a6fa:	2400      	movs	r4, #0
 800a6fc:	46a0      	mov	r8, r4
 800a6fe:	940a      	str	r4, [sp, #40]	@ 0x28
 800a700:	46a1      	mov	r9, r4
 800a702:	9a05      	ldr	r2, [sp, #20]
 800a704:	2322      	movs	r3, #34	@ 0x22
 800a706:	f04f 0a00 	mov.w	sl, #0
 800a70a:	f04f 0b00 	mov.w	fp, #0
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	e768      	b.n	800a5e4 <_strtod_l+0x44c>
 800a712:	bf00      	nop
 800a714:	0800c1f5 	.word	0x0800c1f5
 800a718:	0800c40c 	.word	0x0800c40c
 800a71c:	0800c1ed 	.word	0x0800c1ed
 800a720:	0800c224 	.word	0x0800c224
 800a724:	0800c5b5 	.word	0x0800c5b5
 800a728:	0800c340 	.word	0x0800c340
 800a72c:	0800c318 	.word	0x0800c318
 800a730:	7ff00000 	.word	0x7ff00000
 800a734:	7ca00000 	.word	0x7ca00000
 800a738:	7fefffff 	.word	0x7fefffff
 800a73c:	f014 0310 	ands.w	r3, r4, #16
 800a740:	bf18      	it	ne
 800a742:	236a      	movne	r3, #106	@ 0x6a
 800a744:	4ea9      	ldr	r6, [pc, #676]	@ (800a9ec <_strtod_l+0x854>)
 800a746:	9308      	str	r3, [sp, #32]
 800a748:	4650      	mov	r0, sl
 800a74a:	4659      	mov	r1, fp
 800a74c:	2300      	movs	r3, #0
 800a74e:	07e2      	lsls	r2, r4, #31
 800a750:	d504      	bpl.n	800a75c <_strtod_l+0x5c4>
 800a752:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a756:	f7f5 ff77 	bl	8000648 <__aeabi_dmul>
 800a75a:	2301      	movs	r3, #1
 800a75c:	1064      	asrs	r4, r4, #1
 800a75e:	f106 0608 	add.w	r6, r6, #8
 800a762:	d1f4      	bne.n	800a74e <_strtod_l+0x5b6>
 800a764:	b10b      	cbz	r3, 800a76a <_strtod_l+0x5d2>
 800a766:	4682      	mov	sl, r0
 800a768:	468b      	mov	fp, r1
 800a76a:	9b08      	ldr	r3, [sp, #32]
 800a76c:	b1b3      	cbz	r3, 800a79c <_strtod_l+0x604>
 800a76e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a772:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a776:	2b00      	cmp	r3, #0
 800a778:	4659      	mov	r1, fp
 800a77a:	dd0f      	ble.n	800a79c <_strtod_l+0x604>
 800a77c:	2b1f      	cmp	r3, #31
 800a77e:	dd55      	ble.n	800a82c <_strtod_l+0x694>
 800a780:	2b34      	cmp	r3, #52	@ 0x34
 800a782:	bfde      	ittt	le
 800a784:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a788:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a78c:	4093      	lslle	r3, r2
 800a78e:	f04f 0a00 	mov.w	sl, #0
 800a792:	bfcc      	ite	gt
 800a794:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a798:	ea03 0b01 	andle.w	fp, r3, r1
 800a79c:	2200      	movs	r2, #0
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4650      	mov	r0, sl
 800a7a2:	4659      	mov	r1, fp
 800a7a4:	f7f6 f9b8 	bl	8000b18 <__aeabi_dcmpeq>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d1a6      	bne.n	800a6fa <_strtod_l+0x562>
 800a7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a7b2:	9805      	ldr	r0, [sp, #20]
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	463a      	mov	r2, r7
 800a7b8:	f7ff f8c6 	bl	8009948 <__s2b>
 800a7bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f43f af05 	beq.w	800a5ce <_strtod_l+0x436>
 800a7c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	eba9 0308 	sub.w	r3, r9, r8
 800a7cc:	bfa8      	it	ge
 800a7ce:	2300      	movge	r3, #0
 800a7d0:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7d2:	2400      	movs	r4, #0
 800a7d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7d8:	9316      	str	r3, [sp, #88]	@ 0x58
 800a7da:	46a0      	mov	r8, r4
 800a7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7de:	9805      	ldr	r0, [sp, #20]
 800a7e0:	6859      	ldr	r1, [r3, #4]
 800a7e2:	f7ff f809 	bl	80097f8 <_Balloc>
 800a7e6:	4681      	mov	r9, r0
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	f43f aef4 	beq.w	800a5d6 <_strtod_l+0x43e>
 800a7ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7f0:	691a      	ldr	r2, [r3, #16]
 800a7f2:	3202      	adds	r2, #2
 800a7f4:	f103 010c 	add.w	r1, r3, #12
 800a7f8:	0092      	lsls	r2, r2, #2
 800a7fa:	300c      	adds	r0, #12
 800a7fc:	f000 fd72 	bl	800b2e4 <memcpy>
 800a800:	ec4b ab10 	vmov	d0, sl, fp
 800a804:	9805      	ldr	r0, [sp, #20]
 800a806:	aa1c      	add	r2, sp, #112	@ 0x70
 800a808:	a91b      	add	r1, sp, #108	@ 0x6c
 800a80a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a80e:	f7ff fbd7 	bl	8009fc0 <__d2b>
 800a812:	901a      	str	r0, [sp, #104]	@ 0x68
 800a814:	2800      	cmp	r0, #0
 800a816:	f43f aede 	beq.w	800a5d6 <_strtod_l+0x43e>
 800a81a:	9805      	ldr	r0, [sp, #20]
 800a81c:	2101      	movs	r1, #1
 800a81e:	f7ff f929 	bl	8009a74 <__i2b>
 800a822:	4680      	mov	r8, r0
 800a824:	b948      	cbnz	r0, 800a83a <_strtod_l+0x6a2>
 800a826:	f04f 0800 	mov.w	r8, #0
 800a82a:	e6d4      	b.n	800a5d6 <_strtod_l+0x43e>
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a830:	fa02 f303 	lsl.w	r3, r2, r3
 800a834:	ea03 0a0a 	and.w	sl, r3, sl
 800a838:	e7b0      	b.n	800a79c <_strtod_l+0x604>
 800a83a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a83c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a83e:	2d00      	cmp	r5, #0
 800a840:	bfab      	itete	ge
 800a842:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a844:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a846:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a848:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a84a:	bfac      	ite	ge
 800a84c:	18ef      	addge	r7, r5, r3
 800a84e:	1b5e      	sublt	r6, r3, r5
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	1aed      	subs	r5, r5, r3
 800a854:	4415      	add	r5, r2
 800a856:	4b66      	ldr	r3, [pc, #408]	@ (800a9f0 <_strtod_l+0x858>)
 800a858:	3d01      	subs	r5, #1
 800a85a:	429d      	cmp	r5, r3
 800a85c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a860:	da50      	bge.n	800a904 <_strtod_l+0x76c>
 800a862:	1b5b      	subs	r3, r3, r5
 800a864:	2b1f      	cmp	r3, #31
 800a866:	eba2 0203 	sub.w	r2, r2, r3
 800a86a:	f04f 0101 	mov.w	r1, #1
 800a86e:	dc3d      	bgt.n	800a8ec <_strtod_l+0x754>
 800a870:	fa01 f303 	lsl.w	r3, r1, r3
 800a874:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a876:	2300      	movs	r3, #0
 800a878:	9310      	str	r3, [sp, #64]	@ 0x40
 800a87a:	18bd      	adds	r5, r7, r2
 800a87c:	9b08      	ldr	r3, [sp, #32]
 800a87e:	42af      	cmp	r7, r5
 800a880:	4416      	add	r6, r2
 800a882:	441e      	add	r6, r3
 800a884:	463b      	mov	r3, r7
 800a886:	bfa8      	it	ge
 800a888:	462b      	movge	r3, r5
 800a88a:	42b3      	cmp	r3, r6
 800a88c:	bfa8      	it	ge
 800a88e:	4633      	movge	r3, r6
 800a890:	2b00      	cmp	r3, #0
 800a892:	bfc2      	ittt	gt
 800a894:	1aed      	subgt	r5, r5, r3
 800a896:	1af6      	subgt	r6, r6, r3
 800a898:	1aff      	subgt	r7, r7, r3
 800a89a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dd16      	ble.n	800a8ce <_strtod_l+0x736>
 800a8a0:	4641      	mov	r1, r8
 800a8a2:	9805      	ldr	r0, [sp, #20]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f7ff f9a5 	bl	8009bf4 <__pow5mult>
 800a8aa:	4680      	mov	r8, r0
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	d0ba      	beq.n	800a826 <_strtod_l+0x68e>
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8b4:	9805      	ldr	r0, [sp, #20]
 800a8b6:	f7ff f8f3 	bl	8009aa0 <__multiply>
 800a8ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	f43f ae8a 	beq.w	800a5d6 <_strtod_l+0x43e>
 800a8c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8c4:	9805      	ldr	r0, [sp, #20]
 800a8c6:	f7fe ffd7 	bl	8009878 <_Bfree>
 800a8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	dc1d      	bgt.n	800a90e <_strtod_l+0x776>
 800a8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dd23      	ble.n	800a920 <_strtod_l+0x788>
 800a8d8:	4649      	mov	r1, r9
 800a8da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a8dc:	9805      	ldr	r0, [sp, #20]
 800a8de:	f7ff f989 	bl	8009bf4 <__pow5mult>
 800a8e2:	4681      	mov	r9, r0
 800a8e4:	b9e0      	cbnz	r0, 800a920 <_strtod_l+0x788>
 800a8e6:	f04f 0900 	mov.w	r9, #0
 800a8ea:	e674      	b.n	800a5d6 <_strtod_l+0x43e>
 800a8ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a8f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a8f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a8f8:	35e2      	adds	r5, #226	@ 0xe2
 800a8fa:	fa01 f305 	lsl.w	r3, r1, r5
 800a8fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800a900:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a902:	e7ba      	b.n	800a87a <_strtod_l+0x6e2>
 800a904:	2300      	movs	r3, #0
 800a906:	9310      	str	r3, [sp, #64]	@ 0x40
 800a908:	2301      	movs	r3, #1
 800a90a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a90c:	e7b5      	b.n	800a87a <_strtod_l+0x6e2>
 800a90e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a910:	9805      	ldr	r0, [sp, #20]
 800a912:	462a      	mov	r2, r5
 800a914:	f7ff f9c8 	bl	8009ca8 <__lshift>
 800a918:	901a      	str	r0, [sp, #104]	@ 0x68
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d1d9      	bne.n	800a8d2 <_strtod_l+0x73a>
 800a91e:	e65a      	b.n	800a5d6 <_strtod_l+0x43e>
 800a920:	2e00      	cmp	r6, #0
 800a922:	dd07      	ble.n	800a934 <_strtod_l+0x79c>
 800a924:	4649      	mov	r1, r9
 800a926:	9805      	ldr	r0, [sp, #20]
 800a928:	4632      	mov	r2, r6
 800a92a:	f7ff f9bd 	bl	8009ca8 <__lshift>
 800a92e:	4681      	mov	r9, r0
 800a930:	2800      	cmp	r0, #0
 800a932:	d0d8      	beq.n	800a8e6 <_strtod_l+0x74e>
 800a934:	2f00      	cmp	r7, #0
 800a936:	dd08      	ble.n	800a94a <_strtod_l+0x7b2>
 800a938:	4641      	mov	r1, r8
 800a93a:	9805      	ldr	r0, [sp, #20]
 800a93c:	463a      	mov	r2, r7
 800a93e:	f7ff f9b3 	bl	8009ca8 <__lshift>
 800a942:	4680      	mov	r8, r0
 800a944:	2800      	cmp	r0, #0
 800a946:	f43f ae46 	beq.w	800a5d6 <_strtod_l+0x43e>
 800a94a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a94c:	9805      	ldr	r0, [sp, #20]
 800a94e:	464a      	mov	r2, r9
 800a950:	f7ff fa32 	bl	8009db8 <__mdiff>
 800a954:	4604      	mov	r4, r0
 800a956:	2800      	cmp	r0, #0
 800a958:	f43f ae3d 	beq.w	800a5d6 <_strtod_l+0x43e>
 800a95c:	68c3      	ldr	r3, [r0, #12]
 800a95e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a960:	2300      	movs	r3, #0
 800a962:	60c3      	str	r3, [r0, #12]
 800a964:	4641      	mov	r1, r8
 800a966:	f7ff fa0b 	bl	8009d80 <__mcmp>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	da46      	bge.n	800a9fc <_strtod_l+0x864>
 800a96e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a970:	ea53 030a 	orrs.w	r3, r3, sl
 800a974:	d16c      	bne.n	800aa50 <_strtod_l+0x8b8>
 800a976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d168      	bne.n	800aa50 <_strtod_l+0x8b8>
 800a97e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a982:	0d1b      	lsrs	r3, r3, #20
 800a984:	051b      	lsls	r3, r3, #20
 800a986:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a98a:	d961      	bls.n	800aa50 <_strtod_l+0x8b8>
 800a98c:	6963      	ldr	r3, [r4, #20]
 800a98e:	b913      	cbnz	r3, 800a996 <_strtod_l+0x7fe>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	2b01      	cmp	r3, #1
 800a994:	dd5c      	ble.n	800aa50 <_strtod_l+0x8b8>
 800a996:	4621      	mov	r1, r4
 800a998:	2201      	movs	r2, #1
 800a99a:	9805      	ldr	r0, [sp, #20]
 800a99c:	f7ff f984 	bl	8009ca8 <__lshift>
 800a9a0:	4641      	mov	r1, r8
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	f7ff f9ec 	bl	8009d80 <__mcmp>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	dd51      	ble.n	800aa50 <_strtod_l+0x8b8>
 800a9ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9b0:	9a08      	ldr	r2, [sp, #32]
 800a9b2:	0d1b      	lsrs	r3, r3, #20
 800a9b4:	051b      	lsls	r3, r3, #20
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	d06b      	beq.n	800aa92 <_strtod_l+0x8fa>
 800a9ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9be:	d868      	bhi.n	800aa92 <_strtod_l+0x8fa>
 800a9c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a9c4:	f67f ae9d 	bls.w	800a702 <_strtod_l+0x56a>
 800a9c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f4 <_strtod_l+0x85c>)
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	4659      	mov	r1, fp
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f7f5 fe3a 	bl	8000648 <__aeabi_dmul>
 800a9d4:	4b08      	ldr	r3, [pc, #32]	@ (800a9f8 <_strtod_l+0x860>)
 800a9d6:	400b      	ands	r3, r1
 800a9d8:	4682      	mov	sl, r0
 800a9da:	468b      	mov	fp, r1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f47f ae05 	bne.w	800a5ec <_strtod_l+0x454>
 800a9e2:	9a05      	ldr	r2, [sp, #20]
 800a9e4:	2322      	movs	r3, #34	@ 0x22
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	e600      	b.n	800a5ec <_strtod_l+0x454>
 800a9ea:	bf00      	nop
 800a9ec:	0800c438 	.word	0x0800c438
 800a9f0:	fffffc02 	.word	0xfffffc02
 800a9f4:	39500000 	.word	0x39500000
 800a9f8:	7ff00000 	.word	0x7ff00000
 800a9fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aa00:	d165      	bne.n	800aace <_strtod_l+0x936>
 800aa02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa08:	b35a      	cbz	r2, 800aa62 <_strtod_l+0x8ca>
 800aa0a:	4a9f      	ldr	r2, [pc, #636]	@ (800ac88 <_strtod_l+0xaf0>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d12b      	bne.n	800aa68 <_strtod_l+0x8d0>
 800aa10:	9b08      	ldr	r3, [sp, #32]
 800aa12:	4651      	mov	r1, sl
 800aa14:	b303      	cbz	r3, 800aa58 <_strtod_l+0x8c0>
 800aa16:	4b9d      	ldr	r3, [pc, #628]	@ (800ac8c <_strtod_l+0xaf4>)
 800aa18:	465a      	mov	r2, fp
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa24:	d81b      	bhi.n	800aa5e <_strtod_l+0x8c6>
 800aa26:	0d1b      	lsrs	r3, r3, #20
 800aa28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa2c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa30:	4299      	cmp	r1, r3
 800aa32:	d119      	bne.n	800aa68 <_strtod_l+0x8d0>
 800aa34:	4b96      	ldr	r3, [pc, #600]	@ (800ac90 <_strtod_l+0xaf8>)
 800aa36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d102      	bne.n	800aa42 <_strtod_l+0x8aa>
 800aa3c:	3101      	adds	r1, #1
 800aa3e:	f43f adca 	beq.w	800a5d6 <_strtod_l+0x43e>
 800aa42:	4b92      	ldr	r3, [pc, #584]	@ (800ac8c <_strtod_l+0xaf4>)
 800aa44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa46:	401a      	ands	r2, r3
 800aa48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa4c:	f04f 0a00 	mov.w	sl, #0
 800aa50:	9b08      	ldr	r3, [sp, #32]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1b8      	bne.n	800a9c8 <_strtod_l+0x830>
 800aa56:	e5c9      	b.n	800a5ec <_strtod_l+0x454>
 800aa58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa5c:	e7e8      	b.n	800aa30 <_strtod_l+0x898>
 800aa5e:	4613      	mov	r3, r2
 800aa60:	e7e6      	b.n	800aa30 <_strtod_l+0x898>
 800aa62:	ea53 030a 	orrs.w	r3, r3, sl
 800aa66:	d0a1      	beq.n	800a9ac <_strtod_l+0x814>
 800aa68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa6a:	b1db      	cbz	r3, 800aaa4 <_strtod_l+0x90c>
 800aa6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa6e:	4213      	tst	r3, r2
 800aa70:	d0ee      	beq.n	800aa50 <_strtod_l+0x8b8>
 800aa72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa74:	9a08      	ldr	r2, [sp, #32]
 800aa76:	4650      	mov	r0, sl
 800aa78:	4659      	mov	r1, fp
 800aa7a:	b1bb      	cbz	r3, 800aaac <_strtod_l+0x914>
 800aa7c:	f7ff fb6e 	bl	800a15c <sulp>
 800aa80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa84:	ec53 2b10 	vmov	r2, r3, d0
 800aa88:	f7f5 fc28 	bl	80002dc <__adddf3>
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	468b      	mov	fp, r1
 800aa90:	e7de      	b.n	800aa50 <_strtod_l+0x8b8>
 800aa92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aa96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa9e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800aaa2:	e7d5      	b.n	800aa50 <_strtod_l+0x8b8>
 800aaa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aaa6:	ea13 0f0a 	tst.w	r3, sl
 800aaaa:	e7e1      	b.n	800aa70 <_strtod_l+0x8d8>
 800aaac:	f7ff fb56 	bl	800a15c <sulp>
 800aab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aab4:	ec53 2b10 	vmov	r2, r3, d0
 800aab8:	f7f5 fc0e 	bl	80002d8 <__aeabi_dsub>
 800aabc:	2200      	movs	r2, #0
 800aabe:	2300      	movs	r3, #0
 800aac0:	4682      	mov	sl, r0
 800aac2:	468b      	mov	fp, r1
 800aac4:	f7f6 f828 	bl	8000b18 <__aeabi_dcmpeq>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d0c1      	beq.n	800aa50 <_strtod_l+0x8b8>
 800aacc:	e619      	b.n	800a702 <_strtod_l+0x56a>
 800aace:	4641      	mov	r1, r8
 800aad0:	4620      	mov	r0, r4
 800aad2:	f7ff facd 	bl	800a070 <__ratio>
 800aad6:	ec57 6b10 	vmov	r6, r7, d0
 800aada:	2200      	movs	r2, #0
 800aadc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aae0:	4630      	mov	r0, r6
 800aae2:	4639      	mov	r1, r7
 800aae4:	f7f6 f82c 	bl	8000b40 <__aeabi_dcmple>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d06f      	beq.n	800abcc <_strtod_l+0xa34>
 800aaec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d17a      	bne.n	800abe8 <_strtod_l+0xa50>
 800aaf2:	f1ba 0f00 	cmp.w	sl, #0
 800aaf6:	d158      	bne.n	800abaa <_strtod_l+0xa12>
 800aaf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d15a      	bne.n	800abb8 <_strtod_l+0xa20>
 800ab02:	4b64      	ldr	r3, [pc, #400]	@ (800ac94 <_strtod_l+0xafc>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	4630      	mov	r0, r6
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f6 f80f 	bl	8000b2c <__aeabi_dcmplt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d159      	bne.n	800abc6 <_strtod_l+0xa2e>
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	4b60      	ldr	r3, [pc, #384]	@ (800ac98 <_strtod_l+0xb00>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f7f5 fd95 	bl	8000648 <__aeabi_dmul>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	460f      	mov	r7, r1
 800ab22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab26:	9606      	str	r6, [sp, #24]
 800ab28:	9307      	str	r3, [sp, #28]
 800ab2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab2e:	4d57      	ldr	r5, [pc, #348]	@ (800ac8c <_strtod_l+0xaf4>)
 800ab30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab36:	401d      	ands	r5, r3
 800ab38:	4b58      	ldr	r3, [pc, #352]	@ (800ac9c <_strtod_l+0xb04>)
 800ab3a:	429d      	cmp	r5, r3
 800ab3c:	f040 80b2 	bne.w	800aca4 <_strtod_l+0xb0c>
 800ab40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab46:	ec4b ab10 	vmov	d0, sl, fp
 800ab4a:	f7ff f9c9 	bl	8009ee0 <__ulp>
 800ab4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab52:	ec51 0b10 	vmov	r0, r1, d0
 800ab56:	f7f5 fd77 	bl	8000648 <__aeabi_dmul>
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	465b      	mov	r3, fp
 800ab5e:	f7f5 fbbd 	bl	80002dc <__adddf3>
 800ab62:	460b      	mov	r3, r1
 800ab64:	4949      	ldr	r1, [pc, #292]	@ (800ac8c <_strtod_l+0xaf4>)
 800ab66:	4a4e      	ldr	r2, [pc, #312]	@ (800aca0 <_strtod_l+0xb08>)
 800ab68:	4019      	ands	r1, r3
 800ab6a:	4291      	cmp	r1, r2
 800ab6c:	4682      	mov	sl, r0
 800ab6e:	d942      	bls.n	800abf6 <_strtod_l+0xa5e>
 800ab70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab72:	4b47      	ldr	r3, [pc, #284]	@ (800ac90 <_strtod_l+0xaf8>)
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d103      	bne.n	800ab80 <_strtod_l+0x9e8>
 800ab78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	f43f ad2b 	beq.w	800a5d6 <_strtod_l+0x43e>
 800ab80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ac90 <_strtod_l+0xaf8>
 800ab84:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ab88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab8a:	9805      	ldr	r0, [sp, #20]
 800ab8c:	f7fe fe74 	bl	8009878 <_Bfree>
 800ab90:	9805      	ldr	r0, [sp, #20]
 800ab92:	4649      	mov	r1, r9
 800ab94:	f7fe fe70 	bl	8009878 <_Bfree>
 800ab98:	9805      	ldr	r0, [sp, #20]
 800ab9a:	4641      	mov	r1, r8
 800ab9c:	f7fe fe6c 	bl	8009878 <_Bfree>
 800aba0:	9805      	ldr	r0, [sp, #20]
 800aba2:	4621      	mov	r1, r4
 800aba4:	f7fe fe68 	bl	8009878 <_Bfree>
 800aba8:	e618      	b.n	800a7dc <_strtod_l+0x644>
 800abaa:	f1ba 0f01 	cmp.w	sl, #1
 800abae:	d103      	bne.n	800abb8 <_strtod_l+0xa20>
 800abb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f43f ada5 	beq.w	800a702 <_strtod_l+0x56a>
 800abb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ac68 <_strtod_l+0xad0>
 800abbc:	4f35      	ldr	r7, [pc, #212]	@ (800ac94 <_strtod_l+0xafc>)
 800abbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abc2:	2600      	movs	r6, #0
 800abc4:	e7b1      	b.n	800ab2a <_strtod_l+0x992>
 800abc6:	4f34      	ldr	r7, [pc, #208]	@ (800ac98 <_strtod_l+0xb00>)
 800abc8:	2600      	movs	r6, #0
 800abca:	e7aa      	b.n	800ab22 <_strtod_l+0x98a>
 800abcc:	4b32      	ldr	r3, [pc, #200]	@ (800ac98 <_strtod_l+0xb00>)
 800abce:	4630      	mov	r0, r6
 800abd0:	4639      	mov	r1, r7
 800abd2:	2200      	movs	r2, #0
 800abd4:	f7f5 fd38 	bl	8000648 <__aeabi_dmul>
 800abd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abda:	4606      	mov	r6, r0
 800abdc:	460f      	mov	r7, r1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d09f      	beq.n	800ab22 <_strtod_l+0x98a>
 800abe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800abe6:	e7a0      	b.n	800ab2a <_strtod_l+0x992>
 800abe8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ac70 <_strtod_l+0xad8>
 800abec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abf0:	ec57 6b17 	vmov	r6, r7, d7
 800abf4:	e799      	b.n	800ab2a <_strtod_l+0x992>
 800abf6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800abfa:	9b08      	ldr	r3, [sp, #32]
 800abfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1c1      	bne.n	800ab88 <_strtod_l+0x9f0>
 800ac04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac08:	0d1b      	lsrs	r3, r3, #20
 800ac0a:	051b      	lsls	r3, r3, #20
 800ac0c:	429d      	cmp	r5, r3
 800ac0e:	d1bb      	bne.n	800ab88 <_strtod_l+0x9f0>
 800ac10:	4630      	mov	r0, r6
 800ac12:	4639      	mov	r1, r7
 800ac14:	f7f6 f878 	bl	8000d08 <__aeabi_d2lz>
 800ac18:	f7f5 fce8 	bl	80005ec <__aeabi_l2d>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 fb58 	bl	80002d8 <__aeabi_dsub>
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ac34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac36:	ea46 060a 	orr.w	r6, r6, sl
 800ac3a:	431e      	orrs	r6, r3
 800ac3c:	d06f      	beq.n	800ad1e <_strtod_l+0xb86>
 800ac3e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac78 <_strtod_l+0xae0>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 ff72 	bl	8000b2c <__aeabi_dcmplt>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	f47f accf 	bne.w	800a5ec <_strtod_l+0x454>
 800ac4e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ac80 <_strtod_l+0xae8>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac58:	f7f5 ff86 	bl	8000b68 <__aeabi_dcmpgt>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d093      	beq.n	800ab88 <_strtod_l+0x9f0>
 800ac60:	e4c4      	b.n	800a5ec <_strtod_l+0x454>
 800ac62:	bf00      	nop
 800ac64:	f3af 8000 	nop.w
 800ac68:	00000000 	.word	0x00000000
 800ac6c:	bff00000 	.word	0xbff00000
 800ac70:	00000000 	.word	0x00000000
 800ac74:	3ff00000 	.word	0x3ff00000
 800ac78:	94a03595 	.word	0x94a03595
 800ac7c:	3fdfffff 	.word	0x3fdfffff
 800ac80:	35afe535 	.word	0x35afe535
 800ac84:	3fe00000 	.word	0x3fe00000
 800ac88:	000fffff 	.word	0x000fffff
 800ac8c:	7ff00000 	.word	0x7ff00000
 800ac90:	7fefffff 	.word	0x7fefffff
 800ac94:	3ff00000 	.word	0x3ff00000
 800ac98:	3fe00000 	.word	0x3fe00000
 800ac9c:	7fe00000 	.word	0x7fe00000
 800aca0:	7c9fffff 	.word	0x7c9fffff
 800aca4:	9b08      	ldr	r3, [sp, #32]
 800aca6:	b323      	cbz	r3, 800acf2 <_strtod_l+0xb5a>
 800aca8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800acac:	d821      	bhi.n	800acf2 <_strtod_l+0xb5a>
 800acae:	a328      	add	r3, pc, #160	@ (adr r3, 800ad50 <_strtod_l+0xbb8>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	4630      	mov	r0, r6
 800acb6:	4639      	mov	r1, r7
 800acb8:	f7f5 ff42 	bl	8000b40 <__aeabi_dcmple>
 800acbc:	b1a0      	cbz	r0, 800ace8 <_strtod_l+0xb50>
 800acbe:	4639      	mov	r1, r7
 800acc0:	4630      	mov	r0, r6
 800acc2:	f7f5 ff99 	bl	8000bf8 <__aeabi_d2uiz>
 800acc6:	2801      	cmp	r0, #1
 800acc8:	bf38      	it	cc
 800acca:	2001      	movcc	r0, #1
 800accc:	f7f5 fc42 	bl	8000554 <__aeabi_ui2d>
 800acd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	b9fb      	cbnz	r3, 800ad18 <_strtod_l+0xb80>
 800acd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acdc:	9014      	str	r0, [sp, #80]	@ 0x50
 800acde:	9315      	str	r3, [sp, #84]	@ 0x54
 800ace0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ace4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ace8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800acea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800acee:	1b5b      	subs	r3, r3, r5
 800acf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800acf2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800acf6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800acfa:	f7ff f8f1 	bl	8009ee0 <__ulp>
 800acfe:	4650      	mov	r0, sl
 800ad00:	ec53 2b10 	vmov	r2, r3, d0
 800ad04:	4659      	mov	r1, fp
 800ad06:	f7f5 fc9f 	bl	8000648 <__aeabi_dmul>
 800ad0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad0e:	f7f5 fae5 	bl	80002dc <__adddf3>
 800ad12:	4682      	mov	sl, r0
 800ad14:	468b      	mov	fp, r1
 800ad16:	e770      	b.n	800abfa <_strtod_l+0xa62>
 800ad18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ad1c:	e7e0      	b.n	800ace0 <_strtod_l+0xb48>
 800ad1e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad58 <_strtod_l+0xbc0>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f7f5 ff02 	bl	8000b2c <__aeabi_dcmplt>
 800ad28:	e798      	b.n	800ac5c <_strtod_l+0xac4>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	f7ff ba6d 	b.w	800a212 <_strtod_l+0x7a>
 800ad38:	2a65      	cmp	r2, #101	@ 0x65
 800ad3a:	f43f ab66 	beq.w	800a40a <_strtod_l+0x272>
 800ad3e:	2a45      	cmp	r2, #69	@ 0x45
 800ad40:	f43f ab63 	beq.w	800a40a <_strtod_l+0x272>
 800ad44:	2301      	movs	r3, #1
 800ad46:	f7ff bb9e 	b.w	800a486 <_strtod_l+0x2ee>
 800ad4a:	bf00      	nop
 800ad4c:	f3af 8000 	nop.w
 800ad50:	ffc00000 	.word	0xffc00000
 800ad54:	41dfffff 	.word	0x41dfffff
 800ad58:	94a03595 	.word	0x94a03595
 800ad5c:	3fcfffff 	.word	0x3fcfffff

0800ad60 <_strtod_r>:
 800ad60:	4b01      	ldr	r3, [pc, #4]	@ (800ad68 <_strtod_r+0x8>)
 800ad62:	f7ff ba19 	b.w	800a198 <_strtod_l>
 800ad66:	bf00      	nop
 800ad68:	20000080 	.word	0x20000080

0800ad6c <_strtol_l.constprop.0>:
 800ad6c:	2b24      	cmp	r3, #36	@ 0x24
 800ad6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad72:	4686      	mov	lr, r0
 800ad74:	4690      	mov	r8, r2
 800ad76:	d801      	bhi.n	800ad7c <_strtol_l.constprop.0+0x10>
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d106      	bne.n	800ad8a <_strtol_l.constprop.0+0x1e>
 800ad7c:	f7fd fdbc 	bl	80088f8 <__errno>
 800ad80:	2316      	movs	r3, #22
 800ad82:	6003      	str	r3, [r0, #0]
 800ad84:	2000      	movs	r0, #0
 800ad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8a:	4834      	ldr	r0, [pc, #208]	@ (800ae5c <_strtol_l.constprop.0+0xf0>)
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	462a      	mov	r2, r5
 800ad90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad94:	5d06      	ldrb	r6, [r0, r4]
 800ad96:	f016 0608 	ands.w	r6, r6, #8
 800ad9a:	d1f8      	bne.n	800ad8e <_strtol_l.constprop.0+0x22>
 800ad9c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ad9e:	d12d      	bne.n	800adfc <_strtol_l.constprop.0+0x90>
 800ada0:	782c      	ldrb	r4, [r5, #0]
 800ada2:	2601      	movs	r6, #1
 800ada4:	1c95      	adds	r5, r2, #2
 800ada6:	f033 0210 	bics.w	r2, r3, #16
 800adaa:	d109      	bne.n	800adc0 <_strtol_l.constprop.0+0x54>
 800adac:	2c30      	cmp	r4, #48	@ 0x30
 800adae:	d12a      	bne.n	800ae06 <_strtol_l.constprop.0+0x9a>
 800adb0:	782a      	ldrb	r2, [r5, #0]
 800adb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adb6:	2a58      	cmp	r2, #88	@ 0x58
 800adb8:	d125      	bne.n	800ae06 <_strtol_l.constprop.0+0x9a>
 800adba:	786c      	ldrb	r4, [r5, #1]
 800adbc:	2310      	movs	r3, #16
 800adbe:	3502      	adds	r5, #2
 800adc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800adc4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800adc8:	2200      	movs	r2, #0
 800adca:	fbbc f9f3 	udiv	r9, ip, r3
 800adce:	4610      	mov	r0, r2
 800add0:	fb03 ca19 	mls	sl, r3, r9, ip
 800add4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800add8:	2f09      	cmp	r7, #9
 800adda:	d81b      	bhi.n	800ae14 <_strtol_l.constprop.0+0xa8>
 800addc:	463c      	mov	r4, r7
 800adde:	42a3      	cmp	r3, r4
 800ade0:	dd27      	ble.n	800ae32 <_strtol_l.constprop.0+0xc6>
 800ade2:	1c57      	adds	r7, r2, #1
 800ade4:	d007      	beq.n	800adf6 <_strtol_l.constprop.0+0x8a>
 800ade6:	4581      	cmp	r9, r0
 800ade8:	d320      	bcc.n	800ae2c <_strtol_l.constprop.0+0xc0>
 800adea:	d101      	bne.n	800adf0 <_strtol_l.constprop.0+0x84>
 800adec:	45a2      	cmp	sl, r4
 800adee:	db1d      	blt.n	800ae2c <_strtol_l.constprop.0+0xc0>
 800adf0:	fb00 4003 	mla	r0, r0, r3, r4
 800adf4:	2201      	movs	r2, #1
 800adf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adfa:	e7eb      	b.n	800add4 <_strtol_l.constprop.0+0x68>
 800adfc:	2c2b      	cmp	r4, #43	@ 0x2b
 800adfe:	bf04      	itt	eq
 800ae00:	782c      	ldrbeq	r4, [r5, #0]
 800ae02:	1c95      	addeq	r5, r2, #2
 800ae04:	e7cf      	b.n	800ada6 <_strtol_l.constprop.0+0x3a>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1da      	bne.n	800adc0 <_strtol_l.constprop.0+0x54>
 800ae0a:	2c30      	cmp	r4, #48	@ 0x30
 800ae0c:	bf0c      	ite	eq
 800ae0e:	2308      	moveq	r3, #8
 800ae10:	230a      	movne	r3, #10
 800ae12:	e7d5      	b.n	800adc0 <_strtol_l.constprop.0+0x54>
 800ae14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae18:	2f19      	cmp	r7, #25
 800ae1a:	d801      	bhi.n	800ae20 <_strtol_l.constprop.0+0xb4>
 800ae1c:	3c37      	subs	r4, #55	@ 0x37
 800ae1e:	e7de      	b.n	800adde <_strtol_l.constprop.0+0x72>
 800ae20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae24:	2f19      	cmp	r7, #25
 800ae26:	d804      	bhi.n	800ae32 <_strtol_l.constprop.0+0xc6>
 800ae28:	3c57      	subs	r4, #87	@ 0x57
 800ae2a:	e7d8      	b.n	800adde <_strtol_l.constprop.0+0x72>
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae30:	e7e1      	b.n	800adf6 <_strtol_l.constprop.0+0x8a>
 800ae32:	1c53      	adds	r3, r2, #1
 800ae34:	d108      	bne.n	800ae48 <_strtol_l.constprop.0+0xdc>
 800ae36:	2322      	movs	r3, #34	@ 0x22
 800ae38:	f8ce 3000 	str.w	r3, [lr]
 800ae3c:	4660      	mov	r0, ip
 800ae3e:	f1b8 0f00 	cmp.w	r8, #0
 800ae42:	d0a0      	beq.n	800ad86 <_strtol_l.constprop.0+0x1a>
 800ae44:	1e69      	subs	r1, r5, #1
 800ae46:	e006      	b.n	800ae56 <_strtol_l.constprop.0+0xea>
 800ae48:	b106      	cbz	r6, 800ae4c <_strtol_l.constprop.0+0xe0>
 800ae4a:	4240      	negs	r0, r0
 800ae4c:	f1b8 0f00 	cmp.w	r8, #0
 800ae50:	d099      	beq.n	800ad86 <_strtol_l.constprop.0+0x1a>
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	d1f6      	bne.n	800ae44 <_strtol_l.constprop.0+0xd8>
 800ae56:	f8c8 1000 	str.w	r1, [r8]
 800ae5a:	e794      	b.n	800ad86 <_strtol_l.constprop.0+0x1a>
 800ae5c:	0800c461 	.word	0x0800c461

0800ae60 <_strtol_r>:
 800ae60:	f7ff bf84 	b.w	800ad6c <_strtol_l.constprop.0>

0800ae64 <__ssputs_r>:
 800ae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	688e      	ldr	r6, [r1, #8]
 800ae6a:	461f      	mov	r7, r3
 800ae6c:	42be      	cmp	r6, r7
 800ae6e:	680b      	ldr	r3, [r1, #0]
 800ae70:	4682      	mov	sl, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	4690      	mov	r8, r2
 800ae76:	d82d      	bhi.n	800aed4 <__ssputs_r+0x70>
 800ae78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae80:	d026      	beq.n	800aed0 <__ssputs_r+0x6c>
 800ae82:	6965      	ldr	r5, [r4, #20]
 800ae84:	6909      	ldr	r1, [r1, #16]
 800ae86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae8a:	eba3 0901 	sub.w	r9, r3, r1
 800ae8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae92:	1c7b      	adds	r3, r7, #1
 800ae94:	444b      	add	r3, r9
 800ae96:	106d      	asrs	r5, r5, #1
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	bf38      	it	cc
 800ae9c:	461d      	movcc	r5, r3
 800ae9e:	0553      	lsls	r3, r2, #21
 800aea0:	d527      	bpl.n	800aef2 <__ssputs_r+0x8e>
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7fe fc1c 	bl	80096e0 <_malloc_r>
 800aea8:	4606      	mov	r6, r0
 800aeaa:	b360      	cbz	r0, 800af06 <__ssputs_r+0xa2>
 800aeac:	6921      	ldr	r1, [r4, #16]
 800aeae:	464a      	mov	r2, r9
 800aeb0:	f000 fa18 	bl	800b2e4 <memcpy>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	6126      	str	r6, [r4, #16]
 800aec2:	6165      	str	r5, [r4, #20]
 800aec4:	444e      	add	r6, r9
 800aec6:	eba5 0509 	sub.w	r5, r5, r9
 800aeca:	6026      	str	r6, [r4, #0]
 800aecc:	60a5      	str	r5, [r4, #8]
 800aece:	463e      	mov	r6, r7
 800aed0:	42be      	cmp	r6, r7
 800aed2:	d900      	bls.n	800aed6 <__ssputs_r+0x72>
 800aed4:	463e      	mov	r6, r7
 800aed6:	6820      	ldr	r0, [r4, #0]
 800aed8:	4632      	mov	r2, r6
 800aeda:	4641      	mov	r1, r8
 800aedc:	f000 f9c6 	bl	800b26c <memmove>
 800aee0:	68a3      	ldr	r3, [r4, #8]
 800aee2:	1b9b      	subs	r3, r3, r6
 800aee4:	60a3      	str	r3, [r4, #8]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	4433      	add	r3, r6
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	2000      	movs	r0, #0
 800aeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef2:	462a      	mov	r2, r5
 800aef4:	f000 fd89 	bl	800ba0a <_realloc_r>
 800aef8:	4606      	mov	r6, r0
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d1e0      	bne.n	800aec0 <__ssputs_r+0x5c>
 800aefe:	6921      	ldr	r1, [r4, #16]
 800af00:	4650      	mov	r0, sl
 800af02:	f7fe fb79 	bl	80095f8 <_free_r>
 800af06:	230c      	movs	r3, #12
 800af08:	f8ca 3000 	str.w	r3, [sl]
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af12:	81a3      	strh	r3, [r4, #12]
 800af14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af18:	e7e9      	b.n	800aeee <__ssputs_r+0x8a>
	...

0800af1c <_svfiprintf_r>:
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	4698      	mov	r8, r3
 800af22:	898b      	ldrh	r3, [r1, #12]
 800af24:	061b      	lsls	r3, r3, #24
 800af26:	b09d      	sub	sp, #116	@ 0x74
 800af28:	4607      	mov	r7, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	4614      	mov	r4, r2
 800af2e:	d510      	bpl.n	800af52 <_svfiprintf_r+0x36>
 800af30:	690b      	ldr	r3, [r1, #16]
 800af32:	b973      	cbnz	r3, 800af52 <_svfiprintf_r+0x36>
 800af34:	2140      	movs	r1, #64	@ 0x40
 800af36:	f7fe fbd3 	bl	80096e0 <_malloc_r>
 800af3a:	6028      	str	r0, [r5, #0]
 800af3c:	6128      	str	r0, [r5, #16]
 800af3e:	b930      	cbnz	r0, 800af4e <_svfiprintf_r+0x32>
 800af40:	230c      	movs	r3, #12
 800af42:	603b      	str	r3, [r7, #0]
 800af44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af48:	b01d      	add	sp, #116	@ 0x74
 800af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4e:	2340      	movs	r3, #64	@ 0x40
 800af50:	616b      	str	r3, [r5, #20]
 800af52:	2300      	movs	r3, #0
 800af54:	9309      	str	r3, [sp, #36]	@ 0x24
 800af56:	2320      	movs	r3, #32
 800af58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af60:	2330      	movs	r3, #48	@ 0x30
 800af62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b100 <_svfiprintf_r+0x1e4>
 800af66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af6a:	f04f 0901 	mov.w	r9, #1
 800af6e:	4623      	mov	r3, r4
 800af70:	469a      	mov	sl, r3
 800af72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af76:	b10a      	cbz	r2, 800af7c <_svfiprintf_r+0x60>
 800af78:	2a25      	cmp	r2, #37	@ 0x25
 800af7a:	d1f9      	bne.n	800af70 <_svfiprintf_r+0x54>
 800af7c:	ebba 0b04 	subs.w	fp, sl, r4
 800af80:	d00b      	beq.n	800af9a <_svfiprintf_r+0x7e>
 800af82:	465b      	mov	r3, fp
 800af84:	4622      	mov	r2, r4
 800af86:	4629      	mov	r1, r5
 800af88:	4638      	mov	r0, r7
 800af8a:	f7ff ff6b 	bl	800ae64 <__ssputs_r>
 800af8e:	3001      	adds	r0, #1
 800af90:	f000 80a7 	beq.w	800b0e2 <_svfiprintf_r+0x1c6>
 800af94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af96:	445a      	add	r2, fp
 800af98:	9209      	str	r2, [sp, #36]	@ 0x24
 800af9a:	f89a 3000 	ldrb.w	r3, [sl]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 809f 	beq.w	800b0e2 <_svfiprintf_r+0x1c6>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afae:	f10a 0a01 	add.w	sl, sl, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	9307      	str	r3, [sp, #28]
 800afb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afba:	931a      	str	r3, [sp, #104]	@ 0x68
 800afbc:	4654      	mov	r4, sl
 800afbe:	2205      	movs	r2, #5
 800afc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc4:	484e      	ldr	r0, [pc, #312]	@ (800b100 <_svfiprintf_r+0x1e4>)
 800afc6:	f7f5 f92b 	bl	8000220 <memchr>
 800afca:	9a04      	ldr	r2, [sp, #16]
 800afcc:	b9d8      	cbnz	r0, 800b006 <_svfiprintf_r+0xea>
 800afce:	06d0      	lsls	r0, r2, #27
 800afd0:	bf44      	itt	mi
 800afd2:	2320      	movmi	r3, #32
 800afd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd8:	0711      	lsls	r1, r2, #28
 800afda:	bf44      	itt	mi
 800afdc:	232b      	movmi	r3, #43	@ 0x2b
 800afde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afe2:	f89a 3000 	ldrb.w	r3, [sl]
 800afe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800afe8:	d015      	beq.n	800b016 <_svfiprintf_r+0xfa>
 800afea:	9a07      	ldr	r2, [sp, #28]
 800afec:	4654      	mov	r4, sl
 800afee:	2000      	movs	r0, #0
 800aff0:	f04f 0c0a 	mov.w	ip, #10
 800aff4:	4621      	mov	r1, r4
 800aff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800affa:	3b30      	subs	r3, #48	@ 0x30
 800affc:	2b09      	cmp	r3, #9
 800affe:	d94b      	bls.n	800b098 <_svfiprintf_r+0x17c>
 800b000:	b1b0      	cbz	r0, 800b030 <_svfiprintf_r+0x114>
 800b002:	9207      	str	r2, [sp, #28]
 800b004:	e014      	b.n	800b030 <_svfiprintf_r+0x114>
 800b006:	eba0 0308 	sub.w	r3, r0, r8
 800b00a:	fa09 f303 	lsl.w	r3, r9, r3
 800b00e:	4313      	orrs	r3, r2
 800b010:	9304      	str	r3, [sp, #16]
 800b012:	46a2      	mov	sl, r4
 800b014:	e7d2      	b.n	800afbc <_svfiprintf_r+0xa0>
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	9103      	str	r1, [sp, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bfbb      	ittet	lt
 800b022:	425b      	neglt	r3, r3
 800b024:	f042 0202 	orrlt.w	r2, r2, #2
 800b028:	9307      	strge	r3, [sp, #28]
 800b02a:	9307      	strlt	r3, [sp, #28]
 800b02c:	bfb8      	it	lt
 800b02e:	9204      	strlt	r2, [sp, #16]
 800b030:	7823      	ldrb	r3, [r4, #0]
 800b032:	2b2e      	cmp	r3, #46	@ 0x2e
 800b034:	d10a      	bne.n	800b04c <_svfiprintf_r+0x130>
 800b036:	7863      	ldrb	r3, [r4, #1]
 800b038:	2b2a      	cmp	r3, #42	@ 0x2a
 800b03a:	d132      	bne.n	800b0a2 <_svfiprintf_r+0x186>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	1d1a      	adds	r2, r3, #4
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	9203      	str	r2, [sp, #12]
 800b044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b048:	3402      	adds	r4, #2
 800b04a:	9305      	str	r3, [sp, #20]
 800b04c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b110 <_svfiprintf_r+0x1f4>
 800b050:	7821      	ldrb	r1, [r4, #0]
 800b052:	2203      	movs	r2, #3
 800b054:	4650      	mov	r0, sl
 800b056:	f7f5 f8e3 	bl	8000220 <memchr>
 800b05a:	b138      	cbz	r0, 800b06c <_svfiprintf_r+0x150>
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	eba0 000a 	sub.w	r0, r0, sl
 800b062:	2240      	movs	r2, #64	@ 0x40
 800b064:	4082      	lsls	r2, r0
 800b066:	4313      	orrs	r3, r2
 800b068:	3401      	adds	r4, #1
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b070:	4824      	ldr	r0, [pc, #144]	@ (800b104 <_svfiprintf_r+0x1e8>)
 800b072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b076:	2206      	movs	r2, #6
 800b078:	f7f5 f8d2 	bl	8000220 <memchr>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d036      	beq.n	800b0ee <_svfiprintf_r+0x1d2>
 800b080:	4b21      	ldr	r3, [pc, #132]	@ (800b108 <_svfiprintf_r+0x1ec>)
 800b082:	bb1b      	cbnz	r3, 800b0cc <_svfiprintf_r+0x1b0>
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	3307      	adds	r3, #7
 800b088:	f023 0307 	bic.w	r3, r3, #7
 800b08c:	3308      	adds	r3, #8
 800b08e:	9303      	str	r3, [sp, #12]
 800b090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b092:	4433      	add	r3, r6
 800b094:	9309      	str	r3, [sp, #36]	@ 0x24
 800b096:	e76a      	b.n	800af6e <_svfiprintf_r+0x52>
 800b098:	fb0c 3202 	mla	r2, ip, r2, r3
 800b09c:	460c      	mov	r4, r1
 800b09e:	2001      	movs	r0, #1
 800b0a0:	e7a8      	b.n	800aff4 <_svfiprintf_r+0xd8>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	3401      	adds	r4, #1
 800b0a6:	9305      	str	r3, [sp, #20]
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	f04f 0c0a 	mov.w	ip, #10
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b4:	3a30      	subs	r2, #48	@ 0x30
 800b0b6:	2a09      	cmp	r2, #9
 800b0b8:	d903      	bls.n	800b0c2 <_svfiprintf_r+0x1a6>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0c6      	beq.n	800b04c <_svfiprintf_r+0x130>
 800b0be:	9105      	str	r1, [sp, #20]
 800b0c0:	e7c4      	b.n	800b04c <_svfiprintf_r+0x130>
 800b0c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e7f0      	b.n	800b0ae <_svfiprintf_r+0x192>
 800b0cc:	ab03      	add	r3, sp, #12
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	462a      	mov	r2, r5
 800b0d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b10c <_svfiprintf_r+0x1f0>)
 800b0d4:	a904      	add	r1, sp, #16
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f7fc fc96 	bl	8007a08 <_printf_float>
 800b0dc:	1c42      	adds	r2, r0, #1
 800b0de:	4606      	mov	r6, r0
 800b0e0:	d1d6      	bne.n	800b090 <_svfiprintf_r+0x174>
 800b0e2:	89ab      	ldrh	r3, [r5, #12]
 800b0e4:	065b      	lsls	r3, r3, #25
 800b0e6:	f53f af2d 	bmi.w	800af44 <_svfiprintf_r+0x28>
 800b0ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0ec:	e72c      	b.n	800af48 <_svfiprintf_r+0x2c>
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4b05      	ldr	r3, [pc, #20]	@ (800b10c <_svfiprintf_r+0x1f0>)
 800b0f6:	a904      	add	r1, sp, #16
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f7fc ff1d 	bl	8007f38 <_printf_i>
 800b0fe:	e7ed      	b.n	800b0dc <_svfiprintf_r+0x1c0>
 800b100:	0800c561 	.word	0x0800c561
 800b104:	0800c56b 	.word	0x0800c56b
 800b108:	08007a09 	.word	0x08007a09
 800b10c:	0800ae65 	.word	0x0800ae65
 800b110:	0800c567 	.word	0x0800c567

0800b114 <__sflush_r>:
 800b114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	0716      	lsls	r6, r2, #28
 800b11e:	4605      	mov	r5, r0
 800b120:	460c      	mov	r4, r1
 800b122:	d454      	bmi.n	800b1ce <__sflush_r+0xba>
 800b124:	684b      	ldr	r3, [r1, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	dc02      	bgt.n	800b130 <__sflush_r+0x1c>
 800b12a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dd48      	ble.n	800b1c2 <__sflush_r+0xae>
 800b130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b132:	2e00      	cmp	r6, #0
 800b134:	d045      	beq.n	800b1c2 <__sflush_r+0xae>
 800b136:	2300      	movs	r3, #0
 800b138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b13c:	682f      	ldr	r7, [r5, #0]
 800b13e:	6a21      	ldr	r1, [r4, #32]
 800b140:	602b      	str	r3, [r5, #0]
 800b142:	d030      	beq.n	800b1a6 <__sflush_r+0x92>
 800b144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b146:	89a3      	ldrh	r3, [r4, #12]
 800b148:	0759      	lsls	r1, r3, #29
 800b14a:	d505      	bpl.n	800b158 <__sflush_r+0x44>
 800b14c:	6863      	ldr	r3, [r4, #4]
 800b14e:	1ad2      	subs	r2, r2, r3
 800b150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b152:	b10b      	cbz	r3, 800b158 <__sflush_r+0x44>
 800b154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b156:	1ad2      	subs	r2, r2, r3
 800b158:	2300      	movs	r3, #0
 800b15a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b15c:	6a21      	ldr	r1, [r4, #32]
 800b15e:	4628      	mov	r0, r5
 800b160:	47b0      	blx	r6
 800b162:	1c43      	adds	r3, r0, #1
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	d106      	bne.n	800b176 <__sflush_r+0x62>
 800b168:	6829      	ldr	r1, [r5, #0]
 800b16a:	291d      	cmp	r1, #29
 800b16c:	d82b      	bhi.n	800b1c6 <__sflush_r+0xb2>
 800b16e:	4a2a      	ldr	r2, [pc, #168]	@ (800b218 <__sflush_r+0x104>)
 800b170:	410a      	asrs	r2, r1
 800b172:	07d6      	lsls	r6, r2, #31
 800b174:	d427      	bmi.n	800b1c6 <__sflush_r+0xb2>
 800b176:	2200      	movs	r2, #0
 800b178:	6062      	str	r2, [r4, #4]
 800b17a:	04d9      	lsls	r1, r3, #19
 800b17c:	6922      	ldr	r2, [r4, #16]
 800b17e:	6022      	str	r2, [r4, #0]
 800b180:	d504      	bpl.n	800b18c <__sflush_r+0x78>
 800b182:	1c42      	adds	r2, r0, #1
 800b184:	d101      	bne.n	800b18a <__sflush_r+0x76>
 800b186:	682b      	ldr	r3, [r5, #0]
 800b188:	b903      	cbnz	r3, 800b18c <__sflush_r+0x78>
 800b18a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b18e:	602f      	str	r7, [r5, #0]
 800b190:	b1b9      	cbz	r1, 800b1c2 <__sflush_r+0xae>
 800b192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b196:	4299      	cmp	r1, r3
 800b198:	d002      	beq.n	800b1a0 <__sflush_r+0x8c>
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7fe fa2c 	bl	80095f8 <_free_r>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1a4:	e00d      	b.n	800b1c2 <__sflush_r+0xae>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	47b0      	blx	r6
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	1c50      	adds	r0, r2, #1
 800b1b0:	d1c9      	bne.n	800b146 <__sflush_r+0x32>
 800b1b2:	682b      	ldr	r3, [r5, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d0c6      	beq.n	800b146 <__sflush_r+0x32>
 800b1b8:	2b1d      	cmp	r3, #29
 800b1ba:	d001      	beq.n	800b1c0 <__sflush_r+0xac>
 800b1bc:	2b16      	cmp	r3, #22
 800b1be:	d11e      	bne.n	800b1fe <__sflush_r+0xea>
 800b1c0:	602f      	str	r7, [r5, #0]
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e022      	b.n	800b20c <__sflush_r+0xf8>
 800b1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ca:	b21b      	sxth	r3, r3
 800b1cc:	e01b      	b.n	800b206 <__sflush_r+0xf2>
 800b1ce:	690f      	ldr	r7, [r1, #16]
 800b1d0:	2f00      	cmp	r7, #0
 800b1d2:	d0f6      	beq.n	800b1c2 <__sflush_r+0xae>
 800b1d4:	0793      	lsls	r3, r2, #30
 800b1d6:	680e      	ldr	r6, [r1, #0]
 800b1d8:	bf08      	it	eq
 800b1da:	694b      	ldreq	r3, [r1, #20]
 800b1dc:	600f      	str	r7, [r1, #0]
 800b1de:	bf18      	it	ne
 800b1e0:	2300      	movne	r3, #0
 800b1e2:	eba6 0807 	sub.w	r8, r6, r7
 800b1e6:	608b      	str	r3, [r1, #8]
 800b1e8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ec:	dde9      	ble.n	800b1c2 <__sflush_r+0xae>
 800b1ee:	6a21      	ldr	r1, [r4, #32]
 800b1f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1f2:	4643      	mov	r3, r8
 800b1f4:	463a      	mov	r2, r7
 800b1f6:	4628      	mov	r0, r5
 800b1f8:	47b0      	blx	r6
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	dc08      	bgt.n	800b210 <__sflush_r+0xfc>
 800b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	4407      	add	r7, r0
 800b212:	eba8 0800 	sub.w	r8, r8, r0
 800b216:	e7e7      	b.n	800b1e8 <__sflush_r+0xd4>
 800b218:	dfbffffe 	.word	0xdfbffffe

0800b21c <_fflush_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	690b      	ldr	r3, [r1, #16]
 800b220:	4605      	mov	r5, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b913      	cbnz	r3, 800b22c <_fflush_r+0x10>
 800b226:	2500      	movs	r5, #0
 800b228:	4628      	mov	r0, r5
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	b118      	cbz	r0, 800b236 <_fflush_r+0x1a>
 800b22e:	6a03      	ldr	r3, [r0, #32]
 800b230:	b90b      	cbnz	r3, 800b236 <_fflush_r+0x1a>
 800b232:	f7fd fa41 	bl	80086b8 <__sinit>
 800b236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0f3      	beq.n	800b226 <_fflush_r+0xa>
 800b23e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b240:	07d0      	lsls	r0, r2, #31
 800b242:	d404      	bmi.n	800b24e <_fflush_r+0x32>
 800b244:	0599      	lsls	r1, r3, #22
 800b246:	d402      	bmi.n	800b24e <_fflush_r+0x32>
 800b248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b24a:	f7fd fb80 	bl	800894e <__retarget_lock_acquire_recursive>
 800b24e:	4628      	mov	r0, r5
 800b250:	4621      	mov	r1, r4
 800b252:	f7ff ff5f 	bl	800b114 <__sflush_r>
 800b256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b258:	07da      	lsls	r2, r3, #31
 800b25a:	4605      	mov	r5, r0
 800b25c:	d4e4      	bmi.n	800b228 <_fflush_r+0xc>
 800b25e:	89a3      	ldrh	r3, [r4, #12]
 800b260:	059b      	lsls	r3, r3, #22
 800b262:	d4e1      	bmi.n	800b228 <_fflush_r+0xc>
 800b264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b266:	f7fd fb73 	bl	8008950 <__retarget_lock_release_recursive>
 800b26a:	e7dd      	b.n	800b228 <_fflush_r+0xc>

0800b26c <memmove>:
 800b26c:	4288      	cmp	r0, r1
 800b26e:	b510      	push	{r4, lr}
 800b270:	eb01 0402 	add.w	r4, r1, r2
 800b274:	d902      	bls.n	800b27c <memmove+0x10>
 800b276:	4284      	cmp	r4, r0
 800b278:	4623      	mov	r3, r4
 800b27a:	d807      	bhi.n	800b28c <memmove+0x20>
 800b27c:	1e43      	subs	r3, r0, #1
 800b27e:	42a1      	cmp	r1, r4
 800b280:	d008      	beq.n	800b294 <memmove+0x28>
 800b282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b28a:	e7f8      	b.n	800b27e <memmove+0x12>
 800b28c:	4402      	add	r2, r0
 800b28e:	4601      	mov	r1, r0
 800b290:	428a      	cmp	r2, r1
 800b292:	d100      	bne.n	800b296 <memmove+0x2a>
 800b294:	bd10      	pop	{r4, pc}
 800b296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b29a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b29e:	e7f7      	b.n	800b290 <memmove+0x24>

0800b2a0 <strncmp>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	b16a      	cbz	r2, 800b2c0 <strncmp+0x20>
 800b2a4:	3901      	subs	r1, #1
 800b2a6:	1884      	adds	r4, r0, r2
 800b2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d103      	bne.n	800b2bc <strncmp+0x1c>
 800b2b4:	42a0      	cmp	r0, r4
 800b2b6:	d001      	beq.n	800b2bc <strncmp+0x1c>
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	d1f5      	bne.n	800b2a8 <strncmp+0x8>
 800b2bc:	1ad0      	subs	r0, r2, r3
 800b2be:	bd10      	pop	{r4, pc}
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	e7fc      	b.n	800b2be <strncmp+0x1e>

0800b2c4 <_sbrk_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d06      	ldr	r5, [pc, #24]	@ (800b2e0 <_sbrk_r+0x1c>)
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f7 ff4a 	bl	8003168 <_sbrk>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_sbrk_r+0x1a>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_sbrk_r+0x1a>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	20000810 	.word	0x20000810

0800b2e4 <memcpy>:
 800b2e4:	440a      	add	r2, r1
 800b2e6:	4291      	cmp	r1, r2
 800b2e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b2ec:	d100      	bne.n	800b2f0 <memcpy+0xc>
 800b2ee:	4770      	bx	lr
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	d1f9      	bne.n	800b2f2 <memcpy+0xe>
 800b2fe:	bd10      	pop	{r4, pc}

0800b300 <nan>:
 800b300:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b308 <nan+0x8>
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	00000000 	.word	0x00000000
 800b30c:	7ff80000 	.word	0x7ff80000

0800b310 <__assert_func>:
 800b310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b312:	4614      	mov	r4, r2
 800b314:	461a      	mov	r2, r3
 800b316:	4b09      	ldr	r3, [pc, #36]	@ (800b33c <__assert_func+0x2c>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4605      	mov	r5, r0
 800b31c:	68d8      	ldr	r0, [r3, #12]
 800b31e:	b954      	cbnz	r4, 800b336 <__assert_func+0x26>
 800b320:	4b07      	ldr	r3, [pc, #28]	@ (800b340 <__assert_func+0x30>)
 800b322:	461c      	mov	r4, r3
 800b324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b328:	9100      	str	r1, [sp, #0]
 800b32a:	462b      	mov	r3, r5
 800b32c:	4905      	ldr	r1, [pc, #20]	@ (800b344 <__assert_func+0x34>)
 800b32e:	f000 fba7 	bl	800ba80 <fiprintf>
 800b332:	f000 fbb7 	bl	800baa4 <abort>
 800b336:	4b04      	ldr	r3, [pc, #16]	@ (800b348 <__assert_func+0x38>)
 800b338:	e7f4      	b.n	800b324 <__assert_func+0x14>
 800b33a:	bf00      	nop
 800b33c:	20000030 	.word	0x20000030
 800b340:	0800c5b5 	.word	0x0800c5b5
 800b344:	0800c587 	.word	0x0800c587
 800b348:	0800c57a 	.word	0x0800c57a

0800b34c <_calloc_r>:
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	fba1 5402 	umull	r5, r4, r1, r2
 800b352:	b93c      	cbnz	r4, 800b364 <_calloc_r+0x18>
 800b354:	4629      	mov	r1, r5
 800b356:	f7fe f9c3 	bl	80096e0 <_malloc_r>
 800b35a:	4606      	mov	r6, r0
 800b35c:	b928      	cbnz	r0, 800b36a <_calloc_r+0x1e>
 800b35e:	2600      	movs	r6, #0
 800b360:	4630      	mov	r0, r6
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	220c      	movs	r2, #12
 800b366:	6002      	str	r2, [r0, #0]
 800b368:	e7f9      	b.n	800b35e <_calloc_r+0x12>
 800b36a:	462a      	mov	r2, r5
 800b36c:	4621      	mov	r1, r4
 800b36e:	f7fd fa70 	bl	8008852 <memset>
 800b372:	e7f5      	b.n	800b360 <_calloc_r+0x14>

0800b374 <rshift>:
 800b374:	6903      	ldr	r3, [r0, #16]
 800b376:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b37a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b37e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b382:	f100 0414 	add.w	r4, r0, #20
 800b386:	dd45      	ble.n	800b414 <rshift+0xa0>
 800b388:	f011 011f 	ands.w	r1, r1, #31
 800b38c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b390:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b394:	d10c      	bne.n	800b3b0 <rshift+0x3c>
 800b396:	f100 0710 	add.w	r7, r0, #16
 800b39a:	4629      	mov	r1, r5
 800b39c:	42b1      	cmp	r1, r6
 800b39e:	d334      	bcc.n	800b40a <rshift+0x96>
 800b3a0:	1a9b      	subs	r3, r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	1eea      	subs	r2, r5, #3
 800b3a6:	4296      	cmp	r6, r2
 800b3a8:	bf38      	it	cc
 800b3aa:	2300      	movcc	r3, #0
 800b3ac:	4423      	add	r3, r4
 800b3ae:	e015      	b.n	800b3dc <rshift+0x68>
 800b3b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3b4:	f1c1 0820 	rsb	r8, r1, #32
 800b3b8:	40cf      	lsrs	r7, r1
 800b3ba:	f105 0e04 	add.w	lr, r5, #4
 800b3be:	46a1      	mov	r9, r4
 800b3c0:	4576      	cmp	r6, lr
 800b3c2:	46f4      	mov	ip, lr
 800b3c4:	d815      	bhi.n	800b3f2 <rshift+0x7e>
 800b3c6:	1a9a      	subs	r2, r3, r2
 800b3c8:	0092      	lsls	r2, r2, #2
 800b3ca:	3a04      	subs	r2, #4
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	42ae      	cmp	r6, r5
 800b3d0:	bf38      	it	cc
 800b3d2:	2200      	movcc	r2, #0
 800b3d4:	18a3      	adds	r3, r4, r2
 800b3d6:	50a7      	str	r7, [r4, r2]
 800b3d8:	b107      	cbz	r7, 800b3dc <rshift+0x68>
 800b3da:	3304      	adds	r3, #4
 800b3dc:	1b1a      	subs	r2, r3, r4
 800b3de:	42a3      	cmp	r3, r4
 800b3e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3e4:	bf08      	it	eq
 800b3e6:	2300      	moveq	r3, #0
 800b3e8:	6102      	str	r2, [r0, #16]
 800b3ea:	bf08      	it	eq
 800b3ec:	6143      	streq	r3, [r0, #20]
 800b3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f2:	f8dc c000 	ldr.w	ip, [ip]
 800b3f6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3fa:	ea4c 0707 	orr.w	r7, ip, r7
 800b3fe:	f849 7b04 	str.w	r7, [r9], #4
 800b402:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b406:	40cf      	lsrs	r7, r1
 800b408:	e7da      	b.n	800b3c0 <rshift+0x4c>
 800b40a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b40e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b412:	e7c3      	b.n	800b39c <rshift+0x28>
 800b414:	4623      	mov	r3, r4
 800b416:	e7e1      	b.n	800b3dc <rshift+0x68>

0800b418 <__hexdig_fun>:
 800b418:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b41c:	2b09      	cmp	r3, #9
 800b41e:	d802      	bhi.n	800b426 <__hexdig_fun+0xe>
 800b420:	3820      	subs	r0, #32
 800b422:	b2c0      	uxtb	r0, r0
 800b424:	4770      	bx	lr
 800b426:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b42a:	2b05      	cmp	r3, #5
 800b42c:	d801      	bhi.n	800b432 <__hexdig_fun+0x1a>
 800b42e:	3847      	subs	r0, #71	@ 0x47
 800b430:	e7f7      	b.n	800b422 <__hexdig_fun+0xa>
 800b432:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b436:	2b05      	cmp	r3, #5
 800b438:	d801      	bhi.n	800b43e <__hexdig_fun+0x26>
 800b43a:	3827      	subs	r0, #39	@ 0x27
 800b43c:	e7f1      	b.n	800b422 <__hexdig_fun+0xa>
 800b43e:	2000      	movs	r0, #0
 800b440:	4770      	bx	lr
	...

0800b444 <__gethex>:
 800b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	b085      	sub	sp, #20
 800b44a:	468a      	mov	sl, r1
 800b44c:	9302      	str	r3, [sp, #8]
 800b44e:	680b      	ldr	r3, [r1, #0]
 800b450:	9001      	str	r0, [sp, #4]
 800b452:	4690      	mov	r8, r2
 800b454:	1c9c      	adds	r4, r3, #2
 800b456:	46a1      	mov	r9, r4
 800b458:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b45c:	2830      	cmp	r0, #48	@ 0x30
 800b45e:	d0fa      	beq.n	800b456 <__gethex+0x12>
 800b460:	eba9 0303 	sub.w	r3, r9, r3
 800b464:	f1a3 0b02 	sub.w	fp, r3, #2
 800b468:	f7ff ffd6 	bl	800b418 <__hexdig_fun>
 800b46c:	4605      	mov	r5, r0
 800b46e:	2800      	cmp	r0, #0
 800b470:	d168      	bne.n	800b544 <__gethex+0x100>
 800b472:	49a0      	ldr	r1, [pc, #640]	@ (800b6f4 <__gethex+0x2b0>)
 800b474:	2201      	movs	r2, #1
 800b476:	4648      	mov	r0, r9
 800b478:	f7ff ff12 	bl	800b2a0 <strncmp>
 800b47c:	4607      	mov	r7, r0
 800b47e:	2800      	cmp	r0, #0
 800b480:	d167      	bne.n	800b552 <__gethex+0x10e>
 800b482:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b486:	4626      	mov	r6, r4
 800b488:	f7ff ffc6 	bl	800b418 <__hexdig_fun>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d062      	beq.n	800b556 <__gethex+0x112>
 800b490:	4623      	mov	r3, r4
 800b492:	7818      	ldrb	r0, [r3, #0]
 800b494:	2830      	cmp	r0, #48	@ 0x30
 800b496:	4699      	mov	r9, r3
 800b498:	f103 0301 	add.w	r3, r3, #1
 800b49c:	d0f9      	beq.n	800b492 <__gethex+0x4e>
 800b49e:	f7ff ffbb 	bl	800b418 <__hexdig_fun>
 800b4a2:	fab0 f580 	clz	r5, r0
 800b4a6:	096d      	lsrs	r5, r5, #5
 800b4a8:	f04f 0b01 	mov.w	fp, #1
 800b4ac:	464a      	mov	r2, r9
 800b4ae:	4616      	mov	r6, r2
 800b4b0:	3201      	adds	r2, #1
 800b4b2:	7830      	ldrb	r0, [r6, #0]
 800b4b4:	f7ff ffb0 	bl	800b418 <__hexdig_fun>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d1f8      	bne.n	800b4ae <__gethex+0x6a>
 800b4bc:	498d      	ldr	r1, [pc, #564]	@ (800b6f4 <__gethex+0x2b0>)
 800b4be:	2201      	movs	r2, #1
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f7ff feed 	bl	800b2a0 <strncmp>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d13f      	bne.n	800b54a <__gethex+0x106>
 800b4ca:	b944      	cbnz	r4, 800b4de <__gethex+0x9a>
 800b4cc:	1c74      	adds	r4, r6, #1
 800b4ce:	4622      	mov	r2, r4
 800b4d0:	4616      	mov	r6, r2
 800b4d2:	3201      	adds	r2, #1
 800b4d4:	7830      	ldrb	r0, [r6, #0]
 800b4d6:	f7ff ff9f 	bl	800b418 <__hexdig_fun>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d1f8      	bne.n	800b4d0 <__gethex+0x8c>
 800b4de:	1ba4      	subs	r4, r4, r6
 800b4e0:	00a7      	lsls	r7, r4, #2
 800b4e2:	7833      	ldrb	r3, [r6, #0]
 800b4e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4e8:	2b50      	cmp	r3, #80	@ 0x50
 800b4ea:	d13e      	bne.n	800b56a <__gethex+0x126>
 800b4ec:	7873      	ldrb	r3, [r6, #1]
 800b4ee:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4f0:	d033      	beq.n	800b55a <__gethex+0x116>
 800b4f2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4f4:	d034      	beq.n	800b560 <__gethex+0x11c>
 800b4f6:	1c71      	adds	r1, r6, #1
 800b4f8:	2400      	movs	r4, #0
 800b4fa:	7808      	ldrb	r0, [r1, #0]
 800b4fc:	f7ff ff8c 	bl	800b418 <__hexdig_fun>
 800b500:	1e43      	subs	r3, r0, #1
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b18      	cmp	r3, #24
 800b506:	d830      	bhi.n	800b56a <__gethex+0x126>
 800b508:	f1a0 0210 	sub.w	r2, r0, #16
 800b50c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b510:	f7ff ff82 	bl	800b418 <__hexdig_fun>
 800b514:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b518:	fa5f fc8c 	uxtb.w	ip, ip
 800b51c:	f1bc 0f18 	cmp.w	ip, #24
 800b520:	f04f 030a 	mov.w	r3, #10
 800b524:	d91e      	bls.n	800b564 <__gethex+0x120>
 800b526:	b104      	cbz	r4, 800b52a <__gethex+0xe6>
 800b528:	4252      	negs	r2, r2
 800b52a:	4417      	add	r7, r2
 800b52c:	f8ca 1000 	str.w	r1, [sl]
 800b530:	b1ed      	cbz	r5, 800b56e <__gethex+0x12a>
 800b532:	f1bb 0f00 	cmp.w	fp, #0
 800b536:	bf0c      	ite	eq
 800b538:	2506      	moveq	r5, #6
 800b53a:	2500      	movne	r5, #0
 800b53c:	4628      	mov	r0, r5
 800b53e:	b005      	add	sp, #20
 800b540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b544:	2500      	movs	r5, #0
 800b546:	462c      	mov	r4, r5
 800b548:	e7b0      	b.n	800b4ac <__gethex+0x68>
 800b54a:	2c00      	cmp	r4, #0
 800b54c:	d1c7      	bne.n	800b4de <__gethex+0x9a>
 800b54e:	4627      	mov	r7, r4
 800b550:	e7c7      	b.n	800b4e2 <__gethex+0x9e>
 800b552:	464e      	mov	r6, r9
 800b554:	462f      	mov	r7, r5
 800b556:	2501      	movs	r5, #1
 800b558:	e7c3      	b.n	800b4e2 <__gethex+0x9e>
 800b55a:	2400      	movs	r4, #0
 800b55c:	1cb1      	adds	r1, r6, #2
 800b55e:	e7cc      	b.n	800b4fa <__gethex+0xb6>
 800b560:	2401      	movs	r4, #1
 800b562:	e7fb      	b.n	800b55c <__gethex+0x118>
 800b564:	fb03 0002 	mla	r0, r3, r2, r0
 800b568:	e7ce      	b.n	800b508 <__gethex+0xc4>
 800b56a:	4631      	mov	r1, r6
 800b56c:	e7de      	b.n	800b52c <__gethex+0xe8>
 800b56e:	eba6 0309 	sub.w	r3, r6, r9
 800b572:	3b01      	subs	r3, #1
 800b574:	4629      	mov	r1, r5
 800b576:	2b07      	cmp	r3, #7
 800b578:	dc0a      	bgt.n	800b590 <__gethex+0x14c>
 800b57a:	9801      	ldr	r0, [sp, #4]
 800b57c:	f7fe f93c 	bl	80097f8 <_Balloc>
 800b580:	4604      	mov	r4, r0
 800b582:	b940      	cbnz	r0, 800b596 <__gethex+0x152>
 800b584:	4b5c      	ldr	r3, [pc, #368]	@ (800b6f8 <__gethex+0x2b4>)
 800b586:	4602      	mov	r2, r0
 800b588:	21e4      	movs	r1, #228	@ 0xe4
 800b58a:	485c      	ldr	r0, [pc, #368]	@ (800b6fc <__gethex+0x2b8>)
 800b58c:	f7ff fec0 	bl	800b310 <__assert_func>
 800b590:	3101      	adds	r1, #1
 800b592:	105b      	asrs	r3, r3, #1
 800b594:	e7ef      	b.n	800b576 <__gethex+0x132>
 800b596:	f100 0a14 	add.w	sl, r0, #20
 800b59a:	2300      	movs	r3, #0
 800b59c:	4655      	mov	r5, sl
 800b59e:	469b      	mov	fp, r3
 800b5a0:	45b1      	cmp	r9, r6
 800b5a2:	d337      	bcc.n	800b614 <__gethex+0x1d0>
 800b5a4:	f845 bb04 	str.w	fp, [r5], #4
 800b5a8:	eba5 050a 	sub.w	r5, r5, sl
 800b5ac:	10ad      	asrs	r5, r5, #2
 800b5ae:	6125      	str	r5, [r4, #16]
 800b5b0:	4658      	mov	r0, fp
 800b5b2:	f7fe fa13 	bl	80099dc <__hi0bits>
 800b5b6:	016d      	lsls	r5, r5, #5
 800b5b8:	f8d8 6000 	ldr.w	r6, [r8]
 800b5bc:	1a2d      	subs	r5, r5, r0
 800b5be:	42b5      	cmp	r5, r6
 800b5c0:	dd54      	ble.n	800b66c <__gethex+0x228>
 800b5c2:	1bad      	subs	r5, r5, r6
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7fe fda7 	bl	800a11a <__any_on>
 800b5cc:	4681      	mov	r9, r0
 800b5ce:	b178      	cbz	r0, 800b5f0 <__gethex+0x1ac>
 800b5d0:	1e6b      	subs	r3, r5, #1
 800b5d2:	1159      	asrs	r1, r3, #5
 800b5d4:	f003 021f 	and.w	r2, r3, #31
 800b5d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5dc:	f04f 0901 	mov.w	r9, #1
 800b5e0:	fa09 f202 	lsl.w	r2, r9, r2
 800b5e4:	420a      	tst	r2, r1
 800b5e6:	d003      	beq.n	800b5f0 <__gethex+0x1ac>
 800b5e8:	454b      	cmp	r3, r9
 800b5ea:	dc36      	bgt.n	800b65a <__gethex+0x216>
 800b5ec:	f04f 0902 	mov.w	r9, #2
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7ff febe 	bl	800b374 <rshift>
 800b5f8:	442f      	add	r7, r5
 800b5fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5fe:	42bb      	cmp	r3, r7
 800b600:	da42      	bge.n	800b688 <__gethex+0x244>
 800b602:	9801      	ldr	r0, [sp, #4]
 800b604:	4621      	mov	r1, r4
 800b606:	f7fe f937 	bl	8009878 <_Bfree>
 800b60a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b60c:	2300      	movs	r3, #0
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	25a3      	movs	r5, #163	@ 0xa3
 800b612:	e793      	b.n	800b53c <__gethex+0xf8>
 800b614:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b618:	2a2e      	cmp	r2, #46	@ 0x2e
 800b61a:	d012      	beq.n	800b642 <__gethex+0x1fe>
 800b61c:	2b20      	cmp	r3, #32
 800b61e:	d104      	bne.n	800b62a <__gethex+0x1e6>
 800b620:	f845 bb04 	str.w	fp, [r5], #4
 800b624:	f04f 0b00 	mov.w	fp, #0
 800b628:	465b      	mov	r3, fp
 800b62a:	7830      	ldrb	r0, [r6, #0]
 800b62c:	9303      	str	r3, [sp, #12]
 800b62e:	f7ff fef3 	bl	800b418 <__hexdig_fun>
 800b632:	9b03      	ldr	r3, [sp, #12]
 800b634:	f000 000f 	and.w	r0, r0, #15
 800b638:	4098      	lsls	r0, r3
 800b63a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b63e:	3304      	adds	r3, #4
 800b640:	e7ae      	b.n	800b5a0 <__gethex+0x15c>
 800b642:	45b1      	cmp	r9, r6
 800b644:	d8ea      	bhi.n	800b61c <__gethex+0x1d8>
 800b646:	492b      	ldr	r1, [pc, #172]	@ (800b6f4 <__gethex+0x2b0>)
 800b648:	9303      	str	r3, [sp, #12]
 800b64a:	2201      	movs	r2, #1
 800b64c:	4630      	mov	r0, r6
 800b64e:	f7ff fe27 	bl	800b2a0 <strncmp>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	2800      	cmp	r0, #0
 800b656:	d1e1      	bne.n	800b61c <__gethex+0x1d8>
 800b658:	e7a2      	b.n	800b5a0 <__gethex+0x15c>
 800b65a:	1ea9      	subs	r1, r5, #2
 800b65c:	4620      	mov	r0, r4
 800b65e:	f7fe fd5c 	bl	800a11a <__any_on>
 800b662:	2800      	cmp	r0, #0
 800b664:	d0c2      	beq.n	800b5ec <__gethex+0x1a8>
 800b666:	f04f 0903 	mov.w	r9, #3
 800b66a:	e7c1      	b.n	800b5f0 <__gethex+0x1ac>
 800b66c:	da09      	bge.n	800b682 <__gethex+0x23e>
 800b66e:	1b75      	subs	r5, r6, r5
 800b670:	4621      	mov	r1, r4
 800b672:	9801      	ldr	r0, [sp, #4]
 800b674:	462a      	mov	r2, r5
 800b676:	f7fe fb17 	bl	8009ca8 <__lshift>
 800b67a:	1b7f      	subs	r7, r7, r5
 800b67c:	4604      	mov	r4, r0
 800b67e:	f100 0a14 	add.w	sl, r0, #20
 800b682:	f04f 0900 	mov.w	r9, #0
 800b686:	e7b8      	b.n	800b5fa <__gethex+0x1b6>
 800b688:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b68c:	42bd      	cmp	r5, r7
 800b68e:	dd6f      	ble.n	800b770 <__gethex+0x32c>
 800b690:	1bed      	subs	r5, r5, r7
 800b692:	42ae      	cmp	r6, r5
 800b694:	dc34      	bgt.n	800b700 <__gethex+0x2bc>
 800b696:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d022      	beq.n	800b6e4 <__gethex+0x2a0>
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d024      	beq.n	800b6ec <__gethex+0x2a8>
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d115      	bne.n	800b6d2 <__gethex+0x28e>
 800b6a6:	42ae      	cmp	r6, r5
 800b6a8:	d113      	bne.n	800b6d2 <__gethex+0x28e>
 800b6aa:	2e01      	cmp	r6, #1
 800b6ac:	d10b      	bne.n	800b6c6 <__gethex+0x282>
 800b6ae:	9a02      	ldr	r2, [sp, #8]
 800b6b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	f8ca 3000 	str.w	r3, [sl]
 800b6be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c0:	2562      	movs	r5, #98	@ 0x62
 800b6c2:	601c      	str	r4, [r3, #0]
 800b6c4:	e73a      	b.n	800b53c <__gethex+0xf8>
 800b6c6:	1e71      	subs	r1, r6, #1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7fe fd26 	bl	800a11a <__any_on>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	d1ed      	bne.n	800b6ae <__gethex+0x26a>
 800b6d2:	9801      	ldr	r0, [sp, #4]
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	f7fe f8cf 	bl	8009878 <_Bfree>
 800b6da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6dc:	2300      	movs	r3, #0
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	2550      	movs	r5, #80	@ 0x50
 800b6e2:	e72b      	b.n	800b53c <__gethex+0xf8>
 800b6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1f3      	bne.n	800b6d2 <__gethex+0x28e>
 800b6ea:	e7e0      	b.n	800b6ae <__gethex+0x26a>
 800b6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1dd      	bne.n	800b6ae <__gethex+0x26a>
 800b6f2:	e7ee      	b.n	800b6d2 <__gethex+0x28e>
 800b6f4:	0800c408 	.word	0x0800c408
 800b6f8:	0800c29d 	.word	0x0800c29d
 800b6fc:	0800c5b6 	.word	0x0800c5b6
 800b700:	1e6f      	subs	r7, r5, #1
 800b702:	f1b9 0f00 	cmp.w	r9, #0
 800b706:	d130      	bne.n	800b76a <__gethex+0x326>
 800b708:	b127      	cbz	r7, 800b714 <__gethex+0x2d0>
 800b70a:	4639      	mov	r1, r7
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7fe fd04 	bl	800a11a <__any_on>
 800b712:	4681      	mov	r9, r0
 800b714:	117a      	asrs	r2, r7, #5
 800b716:	2301      	movs	r3, #1
 800b718:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b71c:	f007 071f 	and.w	r7, r7, #31
 800b720:	40bb      	lsls	r3, r7
 800b722:	4213      	tst	r3, r2
 800b724:	4629      	mov	r1, r5
 800b726:	4620      	mov	r0, r4
 800b728:	bf18      	it	ne
 800b72a:	f049 0902 	orrne.w	r9, r9, #2
 800b72e:	f7ff fe21 	bl	800b374 <rshift>
 800b732:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b736:	1b76      	subs	r6, r6, r5
 800b738:	2502      	movs	r5, #2
 800b73a:	f1b9 0f00 	cmp.w	r9, #0
 800b73e:	d047      	beq.n	800b7d0 <__gethex+0x38c>
 800b740:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b744:	2b02      	cmp	r3, #2
 800b746:	d015      	beq.n	800b774 <__gethex+0x330>
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d017      	beq.n	800b77c <__gethex+0x338>
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d109      	bne.n	800b764 <__gethex+0x320>
 800b750:	f019 0f02 	tst.w	r9, #2
 800b754:	d006      	beq.n	800b764 <__gethex+0x320>
 800b756:	f8da 3000 	ldr.w	r3, [sl]
 800b75a:	ea49 0903 	orr.w	r9, r9, r3
 800b75e:	f019 0f01 	tst.w	r9, #1
 800b762:	d10e      	bne.n	800b782 <__gethex+0x33e>
 800b764:	f045 0510 	orr.w	r5, r5, #16
 800b768:	e032      	b.n	800b7d0 <__gethex+0x38c>
 800b76a:	f04f 0901 	mov.w	r9, #1
 800b76e:	e7d1      	b.n	800b714 <__gethex+0x2d0>
 800b770:	2501      	movs	r5, #1
 800b772:	e7e2      	b.n	800b73a <__gethex+0x2f6>
 800b774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b776:	f1c3 0301 	rsb	r3, r3, #1
 800b77a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d0f0      	beq.n	800b764 <__gethex+0x320>
 800b782:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b786:	f104 0314 	add.w	r3, r4, #20
 800b78a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b78e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b792:	f04f 0c00 	mov.w	ip, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b7a0:	d01b      	beq.n	800b7da <__gethex+0x396>
 800b7a2:	3201      	adds	r2, #1
 800b7a4:	6002      	str	r2, [r0, #0]
 800b7a6:	2d02      	cmp	r5, #2
 800b7a8:	f104 0314 	add.w	r3, r4, #20
 800b7ac:	d13c      	bne.n	800b828 <__gethex+0x3e4>
 800b7ae:	f8d8 2000 	ldr.w	r2, [r8]
 800b7b2:	3a01      	subs	r2, #1
 800b7b4:	42b2      	cmp	r2, r6
 800b7b6:	d109      	bne.n	800b7cc <__gethex+0x388>
 800b7b8:	1171      	asrs	r1, r6, #5
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7c0:	f006 061f 	and.w	r6, r6, #31
 800b7c4:	fa02 f606 	lsl.w	r6, r2, r6
 800b7c8:	421e      	tst	r6, r3
 800b7ca:	d13a      	bne.n	800b842 <__gethex+0x3fe>
 800b7cc:	f045 0520 	orr.w	r5, r5, #32
 800b7d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d2:	601c      	str	r4, [r3, #0]
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	601f      	str	r7, [r3, #0]
 800b7d8:	e6b0      	b.n	800b53c <__gethex+0xf8>
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7e0:	d8d9      	bhi.n	800b796 <__gethex+0x352>
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	459b      	cmp	fp, r3
 800b7e6:	db17      	blt.n	800b818 <__gethex+0x3d4>
 800b7e8:	6861      	ldr	r1, [r4, #4]
 800b7ea:	9801      	ldr	r0, [sp, #4]
 800b7ec:	3101      	adds	r1, #1
 800b7ee:	f7fe f803 	bl	80097f8 <_Balloc>
 800b7f2:	4681      	mov	r9, r0
 800b7f4:	b918      	cbnz	r0, 800b7fe <__gethex+0x3ba>
 800b7f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b860 <__gethex+0x41c>)
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	2184      	movs	r1, #132	@ 0x84
 800b7fc:	e6c5      	b.n	800b58a <__gethex+0x146>
 800b7fe:	6922      	ldr	r2, [r4, #16]
 800b800:	3202      	adds	r2, #2
 800b802:	f104 010c 	add.w	r1, r4, #12
 800b806:	0092      	lsls	r2, r2, #2
 800b808:	300c      	adds	r0, #12
 800b80a:	f7ff fd6b 	bl	800b2e4 <memcpy>
 800b80e:	4621      	mov	r1, r4
 800b810:	9801      	ldr	r0, [sp, #4]
 800b812:	f7fe f831 	bl	8009878 <_Bfree>
 800b816:	464c      	mov	r4, r9
 800b818:	6923      	ldr	r3, [r4, #16]
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b820:	6122      	str	r2, [r4, #16]
 800b822:	2201      	movs	r2, #1
 800b824:	615a      	str	r2, [r3, #20]
 800b826:	e7be      	b.n	800b7a6 <__gethex+0x362>
 800b828:	6922      	ldr	r2, [r4, #16]
 800b82a:	455a      	cmp	r2, fp
 800b82c:	dd0b      	ble.n	800b846 <__gethex+0x402>
 800b82e:	2101      	movs	r1, #1
 800b830:	4620      	mov	r0, r4
 800b832:	f7ff fd9f 	bl	800b374 <rshift>
 800b836:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b83a:	3701      	adds	r7, #1
 800b83c:	42bb      	cmp	r3, r7
 800b83e:	f6ff aee0 	blt.w	800b602 <__gethex+0x1be>
 800b842:	2501      	movs	r5, #1
 800b844:	e7c2      	b.n	800b7cc <__gethex+0x388>
 800b846:	f016 061f 	ands.w	r6, r6, #31
 800b84a:	d0fa      	beq.n	800b842 <__gethex+0x3fe>
 800b84c:	4453      	add	r3, sl
 800b84e:	f1c6 0620 	rsb	r6, r6, #32
 800b852:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b856:	f7fe f8c1 	bl	80099dc <__hi0bits>
 800b85a:	42b0      	cmp	r0, r6
 800b85c:	dbe7      	blt.n	800b82e <__gethex+0x3ea>
 800b85e:	e7f0      	b.n	800b842 <__gethex+0x3fe>
 800b860:	0800c29d 	.word	0x0800c29d

0800b864 <L_shift>:
 800b864:	f1c2 0208 	rsb	r2, r2, #8
 800b868:	0092      	lsls	r2, r2, #2
 800b86a:	b570      	push	{r4, r5, r6, lr}
 800b86c:	f1c2 0620 	rsb	r6, r2, #32
 800b870:	6843      	ldr	r3, [r0, #4]
 800b872:	6804      	ldr	r4, [r0, #0]
 800b874:	fa03 f506 	lsl.w	r5, r3, r6
 800b878:	432c      	orrs	r4, r5
 800b87a:	40d3      	lsrs	r3, r2
 800b87c:	6004      	str	r4, [r0, #0]
 800b87e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b882:	4288      	cmp	r0, r1
 800b884:	d3f4      	bcc.n	800b870 <L_shift+0xc>
 800b886:	bd70      	pop	{r4, r5, r6, pc}

0800b888 <__match>:
 800b888:	b530      	push	{r4, r5, lr}
 800b88a:	6803      	ldr	r3, [r0, #0]
 800b88c:	3301      	adds	r3, #1
 800b88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b892:	b914      	cbnz	r4, 800b89a <__match+0x12>
 800b894:	6003      	str	r3, [r0, #0]
 800b896:	2001      	movs	r0, #1
 800b898:	bd30      	pop	{r4, r5, pc}
 800b89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b8a2:	2d19      	cmp	r5, #25
 800b8a4:	bf98      	it	ls
 800b8a6:	3220      	addls	r2, #32
 800b8a8:	42a2      	cmp	r2, r4
 800b8aa:	d0f0      	beq.n	800b88e <__match+0x6>
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e7f3      	b.n	800b898 <__match+0x10>

0800b8b0 <__hexnan>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	680b      	ldr	r3, [r1, #0]
 800b8b6:	6801      	ldr	r1, [r0, #0]
 800b8b8:	115e      	asrs	r6, r3, #5
 800b8ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8be:	f013 031f 	ands.w	r3, r3, #31
 800b8c2:	b087      	sub	sp, #28
 800b8c4:	bf18      	it	ne
 800b8c6:	3604      	addne	r6, #4
 800b8c8:	2500      	movs	r5, #0
 800b8ca:	1f37      	subs	r7, r6, #4
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	4690      	mov	r8, r2
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8d6:	46b9      	mov	r9, r7
 800b8d8:	463c      	mov	r4, r7
 800b8da:	9502      	str	r5, [sp, #8]
 800b8dc:	46ab      	mov	fp, r5
 800b8de:	784a      	ldrb	r2, [r1, #1]
 800b8e0:	1c4b      	adds	r3, r1, #1
 800b8e2:	9303      	str	r3, [sp, #12]
 800b8e4:	b342      	cbz	r2, 800b938 <__hexnan+0x88>
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	9105      	str	r1, [sp, #20]
 800b8ea:	9204      	str	r2, [sp, #16]
 800b8ec:	f7ff fd94 	bl	800b418 <__hexdig_fun>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d151      	bne.n	800b998 <__hexnan+0xe8>
 800b8f4:	9a04      	ldr	r2, [sp, #16]
 800b8f6:	9905      	ldr	r1, [sp, #20]
 800b8f8:	2a20      	cmp	r2, #32
 800b8fa:	d818      	bhi.n	800b92e <__hexnan+0x7e>
 800b8fc:	9b02      	ldr	r3, [sp, #8]
 800b8fe:	459b      	cmp	fp, r3
 800b900:	dd13      	ble.n	800b92a <__hexnan+0x7a>
 800b902:	454c      	cmp	r4, r9
 800b904:	d206      	bcs.n	800b914 <__hexnan+0x64>
 800b906:	2d07      	cmp	r5, #7
 800b908:	dc04      	bgt.n	800b914 <__hexnan+0x64>
 800b90a:	462a      	mov	r2, r5
 800b90c:	4649      	mov	r1, r9
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff ffa8 	bl	800b864 <L_shift>
 800b914:	4544      	cmp	r4, r8
 800b916:	d952      	bls.n	800b9be <__hexnan+0x10e>
 800b918:	2300      	movs	r3, #0
 800b91a:	f1a4 0904 	sub.w	r9, r4, #4
 800b91e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b922:	f8cd b008 	str.w	fp, [sp, #8]
 800b926:	464c      	mov	r4, r9
 800b928:	461d      	mov	r5, r3
 800b92a:	9903      	ldr	r1, [sp, #12]
 800b92c:	e7d7      	b.n	800b8de <__hexnan+0x2e>
 800b92e:	2a29      	cmp	r2, #41	@ 0x29
 800b930:	d157      	bne.n	800b9e2 <__hexnan+0x132>
 800b932:	3102      	adds	r1, #2
 800b934:	f8ca 1000 	str.w	r1, [sl]
 800b938:	f1bb 0f00 	cmp.w	fp, #0
 800b93c:	d051      	beq.n	800b9e2 <__hexnan+0x132>
 800b93e:	454c      	cmp	r4, r9
 800b940:	d206      	bcs.n	800b950 <__hexnan+0xa0>
 800b942:	2d07      	cmp	r5, #7
 800b944:	dc04      	bgt.n	800b950 <__hexnan+0xa0>
 800b946:	462a      	mov	r2, r5
 800b948:	4649      	mov	r1, r9
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7ff ff8a 	bl	800b864 <L_shift>
 800b950:	4544      	cmp	r4, r8
 800b952:	d936      	bls.n	800b9c2 <__hexnan+0x112>
 800b954:	f1a8 0204 	sub.w	r2, r8, #4
 800b958:	4623      	mov	r3, r4
 800b95a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b95e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b962:	429f      	cmp	r7, r3
 800b964:	d2f9      	bcs.n	800b95a <__hexnan+0xaa>
 800b966:	1b3b      	subs	r3, r7, r4
 800b968:	f023 0303 	bic.w	r3, r3, #3
 800b96c:	3304      	adds	r3, #4
 800b96e:	3401      	adds	r4, #1
 800b970:	3e03      	subs	r6, #3
 800b972:	42b4      	cmp	r4, r6
 800b974:	bf88      	it	hi
 800b976:	2304      	movhi	r3, #4
 800b978:	4443      	add	r3, r8
 800b97a:	2200      	movs	r2, #0
 800b97c:	f843 2b04 	str.w	r2, [r3], #4
 800b980:	429f      	cmp	r7, r3
 800b982:	d2fb      	bcs.n	800b97c <__hexnan+0xcc>
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	b91b      	cbnz	r3, 800b990 <__hexnan+0xe0>
 800b988:	4547      	cmp	r7, r8
 800b98a:	d128      	bne.n	800b9de <__hexnan+0x12e>
 800b98c:	2301      	movs	r3, #1
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	2005      	movs	r0, #5
 800b992:	b007      	add	sp, #28
 800b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b998:	3501      	adds	r5, #1
 800b99a:	2d08      	cmp	r5, #8
 800b99c:	f10b 0b01 	add.w	fp, fp, #1
 800b9a0:	dd06      	ble.n	800b9b0 <__hexnan+0x100>
 800b9a2:	4544      	cmp	r4, r8
 800b9a4:	d9c1      	bls.n	800b92a <__hexnan+0x7a>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9ac:	2501      	movs	r5, #1
 800b9ae:	3c04      	subs	r4, #4
 800b9b0:	6822      	ldr	r2, [r4, #0]
 800b9b2:	f000 000f 	and.w	r0, r0, #15
 800b9b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b9ba:	6020      	str	r0, [r4, #0]
 800b9bc:	e7b5      	b.n	800b92a <__hexnan+0x7a>
 800b9be:	2508      	movs	r5, #8
 800b9c0:	e7b3      	b.n	800b92a <__hexnan+0x7a>
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d0dd      	beq.n	800b984 <__hexnan+0xd4>
 800b9c8:	f1c3 0320 	rsb	r3, r3, #32
 800b9cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9d0:	40da      	lsrs	r2, r3
 800b9d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9dc:	e7d2      	b.n	800b984 <__hexnan+0xd4>
 800b9de:	3f04      	subs	r7, #4
 800b9e0:	e7d0      	b.n	800b984 <__hexnan+0xd4>
 800b9e2:	2004      	movs	r0, #4
 800b9e4:	e7d5      	b.n	800b992 <__hexnan+0xe2>

0800b9e6 <__ascii_mbtowc>:
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	b901      	cbnz	r1, 800b9ec <__ascii_mbtowc+0x6>
 800b9ea:	a901      	add	r1, sp, #4
 800b9ec:	b142      	cbz	r2, 800ba00 <__ascii_mbtowc+0x1a>
 800b9ee:	b14b      	cbz	r3, 800ba04 <__ascii_mbtowc+0x1e>
 800b9f0:	7813      	ldrb	r3, [r2, #0]
 800b9f2:	600b      	str	r3, [r1, #0]
 800b9f4:	7812      	ldrb	r2, [r2, #0]
 800b9f6:	1e10      	subs	r0, r2, #0
 800b9f8:	bf18      	it	ne
 800b9fa:	2001      	movne	r0, #1
 800b9fc:	b002      	add	sp, #8
 800b9fe:	4770      	bx	lr
 800ba00:	4610      	mov	r0, r2
 800ba02:	e7fb      	b.n	800b9fc <__ascii_mbtowc+0x16>
 800ba04:	f06f 0001 	mvn.w	r0, #1
 800ba08:	e7f8      	b.n	800b9fc <__ascii_mbtowc+0x16>

0800ba0a <_realloc_r>:
 800ba0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0e:	4680      	mov	r8, r0
 800ba10:	4615      	mov	r5, r2
 800ba12:	460c      	mov	r4, r1
 800ba14:	b921      	cbnz	r1, 800ba20 <_realloc_r+0x16>
 800ba16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	f7fd be60 	b.w	80096e0 <_malloc_r>
 800ba20:	b92a      	cbnz	r2, 800ba2e <_realloc_r+0x24>
 800ba22:	f7fd fde9 	bl	80095f8 <_free_r>
 800ba26:	2400      	movs	r4, #0
 800ba28:	4620      	mov	r0, r4
 800ba2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2e:	f000 f840 	bl	800bab2 <_malloc_usable_size_r>
 800ba32:	4285      	cmp	r5, r0
 800ba34:	4606      	mov	r6, r0
 800ba36:	d802      	bhi.n	800ba3e <_realloc_r+0x34>
 800ba38:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba3c:	d8f4      	bhi.n	800ba28 <_realloc_r+0x1e>
 800ba3e:	4629      	mov	r1, r5
 800ba40:	4640      	mov	r0, r8
 800ba42:	f7fd fe4d 	bl	80096e0 <_malloc_r>
 800ba46:	4607      	mov	r7, r0
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d0ec      	beq.n	800ba26 <_realloc_r+0x1c>
 800ba4c:	42b5      	cmp	r5, r6
 800ba4e:	462a      	mov	r2, r5
 800ba50:	4621      	mov	r1, r4
 800ba52:	bf28      	it	cs
 800ba54:	4632      	movcs	r2, r6
 800ba56:	f7ff fc45 	bl	800b2e4 <memcpy>
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	f7fd fdcb 	bl	80095f8 <_free_r>
 800ba62:	463c      	mov	r4, r7
 800ba64:	e7e0      	b.n	800ba28 <_realloc_r+0x1e>

0800ba66 <__ascii_wctomb>:
 800ba66:	4603      	mov	r3, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	b141      	cbz	r1, 800ba7e <__ascii_wctomb+0x18>
 800ba6c:	2aff      	cmp	r2, #255	@ 0xff
 800ba6e:	d904      	bls.n	800ba7a <__ascii_wctomb+0x14>
 800ba70:	228a      	movs	r2, #138	@ 0x8a
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba78:	4770      	bx	lr
 800ba7a:	700a      	strb	r2, [r1, #0]
 800ba7c:	2001      	movs	r0, #1
 800ba7e:	4770      	bx	lr

0800ba80 <fiprintf>:
 800ba80:	b40e      	push	{r1, r2, r3}
 800ba82:	b503      	push	{r0, r1, lr}
 800ba84:	4601      	mov	r1, r0
 800ba86:	ab03      	add	r3, sp, #12
 800ba88:	4805      	ldr	r0, [pc, #20]	@ (800baa0 <fiprintf+0x20>)
 800ba8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8e:	6800      	ldr	r0, [r0, #0]
 800ba90:	9301      	str	r3, [sp, #4]
 800ba92:	f000 f83f 	bl	800bb14 <_vfiprintf_r>
 800ba96:	b002      	add	sp, #8
 800ba98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba9c:	b003      	add	sp, #12
 800ba9e:	4770      	bx	lr
 800baa0:	20000030 	.word	0x20000030

0800baa4 <abort>:
 800baa4:	b508      	push	{r3, lr}
 800baa6:	2006      	movs	r0, #6
 800baa8:	f000 fa08 	bl	800bebc <raise>
 800baac:	2001      	movs	r0, #1
 800baae:	f7f7 fae2 	bl	8003076 <_exit>

0800bab2 <_malloc_usable_size_r>:
 800bab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bab6:	1f18      	subs	r0, r3, #4
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bfbc      	itt	lt
 800babc:	580b      	ldrlt	r3, [r1, r0]
 800babe:	18c0      	addlt	r0, r0, r3
 800bac0:	4770      	bx	lr

0800bac2 <__sfputc_r>:
 800bac2:	6893      	ldr	r3, [r2, #8]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	b410      	push	{r4}
 800baca:	6093      	str	r3, [r2, #8]
 800bacc:	da08      	bge.n	800bae0 <__sfputc_r+0x1e>
 800bace:	6994      	ldr	r4, [r2, #24]
 800bad0:	42a3      	cmp	r3, r4
 800bad2:	db01      	blt.n	800bad8 <__sfputc_r+0x16>
 800bad4:	290a      	cmp	r1, #10
 800bad6:	d103      	bne.n	800bae0 <__sfputc_r+0x1e>
 800bad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800badc:	f000 b932 	b.w	800bd44 <__swbuf_r>
 800bae0:	6813      	ldr	r3, [r2, #0]
 800bae2:	1c58      	adds	r0, r3, #1
 800bae4:	6010      	str	r0, [r2, #0]
 800bae6:	7019      	strb	r1, [r3, #0]
 800bae8:	4608      	mov	r0, r1
 800baea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <__sfputs_r>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	4606      	mov	r6, r0
 800baf4:	460f      	mov	r7, r1
 800baf6:	4614      	mov	r4, r2
 800baf8:	18d5      	adds	r5, r2, r3
 800bafa:	42ac      	cmp	r4, r5
 800bafc:	d101      	bne.n	800bb02 <__sfputs_r+0x12>
 800bafe:	2000      	movs	r0, #0
 800bb00:	e007      	b.n	800bb12 <__sfputs_r+0x22>
 800bb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb06:	463a      	mov	r2, r7
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7ff ffda 	bl	800bac2 <__sfputc_r>
 800bb0e:	1c43      	adds	r3, r0, #1
 800bb10:	d1f3      	bne.n	800bafa <__sfputs_r+0xa>
 800bb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb14 <_vfiprintf_r>:
 800bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	460d      	mov	r5, r1
 800bb1a:	b09d      	sub	sp, #116	@ 0x74
 800bb1c:	4614      	mov	r4, r2
 800bb1e:	4698      	mov	r8, r3
 800bb20:	4606      	mov	r6, r0
 800bb22:	b118      	cbz	r0, 800bb2c <_vfiprintf_r+0x18>
 800bb24:	6a03      	ldr	r3, [r0, #32]
 800bb26:	b90b      	cbnz	r3, 800bb2c <_vfiprintf_r+0x18>
 800bb28:	f7fc fdc6 	bl	80086b8 <__sinit>
 800bb2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb2e:	07d9      	lsls	r1, r3, #31
 800bb30:	d405      	bmi.n	800bb3e <_vfiprintf_r+0x2a>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	059a      	lsls	r2, r3, #22
 800bb36:	d402      	bmi.n	800bb3e <_vfiprintf_r+0x2a>
 800bb38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb3a:	f7fc ff08 	bl	800894e <__retarget_lock_acquire_recursive>
 800bb3e:	89ab      	ldrh	r3, [r5, #12]
 800bb40:	071b      	lsls	r3, r3, #28
 800bb42:	d501      	bpl.n	800bb48 <_vfiprintf_r+0x34>
 800bb44:	692b      	ldr	r3, [r5, #16]
 800bb46:	b99b      	cbnz	r3, 800bb70 <_vfiprintf_r+0x5c>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f000 f938 	bl	800bdc0 <__swsetup_r>
 800bb50:	b170      	cbz	r0, 800bb70 <_vfiprintf_r+0x5c>
 800bb52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb54:	07dc      	lsls	r4, r3, #31
 800bb56:	d504      	bpl.n	800bb62 <_vfiprintf_r+0x4e>
 800bb58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb5c:	b01d      	add	sp, #116	@ 0x74
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	0598      	lsls	r0, r3, #22
 800bb66:	d4f7      	bmi.n	800bb58 <_vfiprintf_r+0x44>
 800bb68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb6a:	f7fc fef1 	bl	8008950 <__retarget_lock_release_recursive>
 800bb6e:	e7f3      	b.n	800bb58 <_vfiprintf_r+0x44>
 800bb70:	2300      	movs	r3, #0
 800bb72:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb74:	2320      	movs	r3, #32
 800bb76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb7e:	2330      	movs	r3, #48	@ 0x30
 800bb80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd30 <_vfiprintf_r+0x21c>
 800bb84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb88:	f04f 0901 	mov.w	r9, #1
 800bb8c:	4623      	mov	r3, r4
 800bb8e:	469a      	mov	sl, r3
 800bb90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb94:	b10a      	cbz	r2, 800bb9a <_vfiprintf_r+0x86>
 800bb96:	2a25      	cmp	r2, #37	@ 0x25
 800bb98:	d1f9      	bne.n	800bb8e <_vfiprintf_r+0x7a>
 800bb9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb9e:	d00b      	beq.n	800bbb8 <_vfiprintf_r+0xa4>
 800bba0:	465b      	mov	r3, fp
 800bba2:	4622      	mov	r2, r4
 800bba4:	4629      	mov	r1, r5
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7ff ffa2 	bl	800baf0 <__sfputs_r>
 800bbac:	3001      	adds	r0, #1
 800bbae:	f000 80a7 	beq.w	800bd00 <_vfiprintf_r+0x1ec>
 800bbb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb4:	445a      	add	r2, fp
 800bbb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 809f 	beq.w	800bd00 <_vfiprintf_r+0x1ec>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbcc:	f10a 0a01 	add.w	sl, sl, #1
 800bbd0:	9304      	str	r3, [sp, #16]
 800bbd2:	9307      	str	r3, [sp, #28]
 800bbd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbda:	4654      	mov	r4, sl
 800bbdc:	2205      	movs	r2, #5
 800bbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe2:	4853      	ldr	r0, [pc, #332]	@ (800bd30 <_vfiprintf_r+0x21c>)
 800bbe4:	f7f4 fb1c 	bl	8000220 <memchr>
 800bbe8:	9a04      	ldr	r2, [sp, #16]
 800bbea:	b9d8      	cbnz	r0, 800bc24 <_vfiprintf_r+0x110>
 800bbec:	06d1      	lsls	r1, r2, #27
 800bbee:	bf44      	itt	mi
 800bbf0:	2320      	movmi	r3, #32
 800bbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf6:	0713      	lsls	r3, r2, #28
 800bbf8:	bf44      	itt	mi
 800bbfa:	232b      	movmi	r3, #43	@ 0x2b
 800bbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc00:	f89a 3000 	ldrb.w	r3, [sl]
 800bc04:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc06:	d015      	beq.n	800bc34 <_vfiprintf_r+0x120>
 800bc08:	9a07      	ldr	r2, [sp, #28]
 800bc0a:	4654      	mov	r4, sl
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	f04f 0c0a 	mov.w	ip, #10
 800bc12:	4621      	mov	r1, r4
 800bc14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc18:	3b30      	subs	r3, #48	@ 0x30
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d94b      	bls.n	800bcb6 <_vfiprintf_r+0x1a2>
 800bc1e:	b1b0      	cbz	r0, 800bc4e <_vfiprintf_r+0x13a>
 800bc20:	9207      	str	r2, [sp, #28]
 800bc22:	e014      	b.n	800bc4e <_vfiprintf_r+0x13a>
 800bc24:	eba0 0308 	sub.w	r3, r0, r8
 800bc28:	fa09 f303 	lsl.w	r3, r9, r3
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	9304      	str	r3, [sp, #16]
 800bc30:	46a2      	mov	sl, r4
 800bc32:	e7d2      	b.n	800bbda <_vfiprintf_r+0xc6>
 800bc34:	9b03      	ldr	r3, [sp, #12]
 800bc36:	1d19      	adds	r1, r3, #4
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	9103      	str	r1, [sp, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	bfbb      	ittet	lt
 800bc40:	425b      	neglt	r3, r3
 800bc42:	f042 0202 	orrlt.w	r2, r2, #2
 800bc46:	9307      	strge	r3, [sp, #28]
 800bc48:	9307      	strlt	r3, [sp, #28]
 800bc4a:	bfb8      	it	lt
 800bc4c:	9204      	strlt	r2, [sp, #16]
 800bc4e:	7823      	ldrb	r3, [r4, #0]
 800bc50:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc52:	d10a      	bne.n	800bc6a <_vfiprintf_r+0x156>
 800bc54:	7863      	ldrb	r3, [r4, #1]
 800bc56:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc58:	d132      	bne.n	800bcc0 <_vfiprintf_r+0x1ac>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	1d1a      	adds	r2, r3, #4
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	9203      	str	r2, [sp, #12]
 800bc62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc66:	3402      	adds	r4, #2
 800bc68:	9305      	str	r3, [sp, #20]
 800bc6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bd40 <_vfiprintf_r+0x22c>
 800bc6e:	7821      	ldrb	r1, [r4, #0]
 800bc70:	2203      	movs	r2, #3
 800bc72:	4650      	mov	r0, sl
 800bc74:	f7f4 fad4 	bl	8000220 <memchr>
 800bc78:	b138      	cbz	r0, 800bc8a <_vfiprintf_r+0x176>
 800bc7a:	9b04      	ldr	r3, [sp, #16]
 800bc7c:	eba0 000a 	sub.w	r0, r0, sl
 800bc80:	2240      	movs	r2, #64	@ 0x40
 800bc82:	4082      	lsls	r2, r0
 800bc84:	4313      	orrs	r3, r2
 800bc86:	3401      	adds	r4, #1
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8e:	4829      	ldr	r0, [pc, #164]	@ (800bd34 <_vfiprintf_r+0x220>)
 800bc90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc94:	2206      	movs	r2, #6
 800bc96:	f7f4 fac3 	bl	8000220 <memchr>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d03f      	beq.n	800bd1e <_vfiprintf_r+0x20a>
 800bc9e:	4b26      	ldr	r3, [pc, #152]	@ (800bd38 <_vfiprintf_r+0x224>)
 800bca0:	bb1b      	cbnz	r3, 800bcea <_vfiprintf_r+0x1d6>
 800bca2:	9b03      	ldr	r3, [sp, #12]
 800bca4:	3307      	adds	r3, #7
 800bca6:	f023 0307 	bic.w	r3, r3, #7
 800bcaa:	3308      	adds	r3, #8
 800bcac:	9303      	str	r3, [sp, #12]
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	443b      	add	r3, r7
 800bcb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb4:	e76a      	b.n	800bb8c <_vfiprintf_r+0x78>
 800bcb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcba:	460c      	mov	r4, r1
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	e7a8      	b.n	800bc12 <_vfiprintf_r+0xfe>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	3401      	adds	r4, #1
 800bcc4:	9305      	str	r3, [sp, #20]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	f04f 0c0a 	mov.w	ip, #10
 800bccc:	4620      	mov	r0, r4
 800bcce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd2:	3a30      	subs	r2, #48	@ 0x30
 800bcd4:	2a09      	cmp	r2, #9
 800bcd6:	d903      	bls.n	800bce0 <_vfiprintf_r+0x1cc>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0c6      	beq.n	800bc6a <_vfiprintf_r+0x156>
 800bcdc:	9105      	str	r1, [sp, #20]
 800bcde:	e7c4      	b.n	800bc6a <_vfiprintf_r+0x156>
 800bce0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce4:	4604      	mov	r4, r0
 800bce6:	2301      	movs	r3, #1
 800bce8:	e7f0      	b.n	800bccc <_vfiprintf_r+0x1b8>
 800bcea:	ab03      	add	r3, sp, #12
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	462a      	mov	r2, r5
 800bcf0:	4b12      	ldr	r3, [pc, #72]	@ (800bd3c <_vfiprintf_r+0x228>)
 800bcf2:	a904      	add	r1, sp, #16
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f7fb fe87 	bl	8007a08 <_printf_float>
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	1c78      	adds	r0, r7, #1
 800bcfe:	d1d6      	bne.n	800bcae <_vfiprintf_r+0x19a>
 800bd00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd02:	07d9      	lsls	r1, r3, #31
 800bd04:	d405      	bmi.n	800bd12 <_vfiprintf_r+0x1fe>
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	059a      	lsls	r2, r3, #22
 800bd0a:	d402      	bmi.n	800bd12 <_vfiprintf_r+0x1fe>
 800bd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd0e:	f7fc fe1f 	bl	8008950 <__retarget_lock_release_recursive>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	065b      	lsls	r3, r3, #25
 800bd16:	f53f af1f 	bmi.w	800bb58 <_vfiprintf_r+0x44>
 800bd1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd1c:	e71e      	b.n	800bb5c <_vfiprintf_r+0x48>
 800bd1e:	ab03      	add	r3, sp, #12
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4b05      	ldr	r3, [pc, #20]	@ (800bd3c <_vfiprintf_r+0x228>)
 800bd26:	a904      	add	r1, sp, #16
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f7fc f905 	bl	8007f38 <_printf_i>
 800bd2e:	e7e4      	b.n	800bcfa <_vfiprintf_r+0x1e6>
 800bd30:	0800c561 	.word	0x0800c561
 800bd34:	0800c56b 	.word	0x0800c56b
 800bd38:	08007a09 	.word	0x08007a09
 800bd3c:	0800baf1 	.word	0x0800baf1
 800bd40:	0800c567 	.word	0x0800c567

0800bd44 <__swbuf_r>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	460e      	mov	r6, r1
 800bd48:	4614      	mov	r4, r2
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b118      	cbz	r0, 800bd56 <__swbuf_r+0x12>
 800bd4e:	6a03      	ldr	r3, [r0, #32]
 800bd50:	b90b      	cbnz	r3, 800bd56 <__swbuf_r+0x12>
 800bd52:	f7fc fcb1 	bl	80086b8 <__sinit>
 800bd56:	69a3      	ldr	r3, [r4, #24]
 800bd58:	60a3      	str	r3, [r4, #8]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	071a      	lsls	r2, r3, #28
 800bd5e:	d501      	bpl.n	800bd64 <__swbuf_r+0x20>
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	b943      	cbnz	r3, 800bd76 <__swbuf_r+0x32>
 800bd64:	4621      	mov	r1, r4
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 f82a 	bl	800bdc0 <__swsetup_r>
 800bd6c:	b118      	cbz	r0, 800bd76 <__swbuf_r+0x32>
 800bd6e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bd72:	4638      	mov	r0, r7
 800bd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	6922      	ldr	r2, [r4, #16]
 800bd7a:	1a98      	subs	r0, r3, r2
 800bd7c:	6963      	ldr	r3, [r4, #20]
 800bd7e:	b2f6      	uxtb	r6, r6
 800bd80:	4283      	cmp	r3, r0
 800bd82:	4637      	mov	r7, r6
 800bd84:	dc05      	bgt.n	800bd92 <__swbuf_r+0x4e>
 800bd86:	4621      	mov	r1, r4
 800bd88:	4628      	mov	r0, r5
 800bd8a:	f7ff fa47 	bl	800b21c <_fflush_r>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d1ed      	bne.n	800bd6e <__swbuf_r+0x2a>
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	60a3      	str	r3, [r4, #8]
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	6022      	str	r2, [r4, #0]
 800bd9e:	701e      	strb	r6, [r3, #0]
 800bda0:	6962      	ldr	r2, [r4, #20]
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d004      	beq.n	800bdb2 <__swbuf_r+0x6e>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	07db      	lsls	r3, r3, #31
 800bdac:	d5e1      	bpl.n	800bd72 <__swbuf_r+0x2e>
 800bdae:	2e0a      	cmp	r6, #10
 800bdb0:	d1df      	bne.n	800bd72 <__swbuf_r+0x2e>
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f7ff fa31 	bl	800b21c <_fflush_r>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d0d9      	beq.n	800bd72 <__swbuf_r+0x2e>
 800bdbe:	e7d6      	b.n	800bd6e <__swbuf_r+0x2a>

0800bdc0 <__swsetup_r>:
 800bdc0:	b538      	push	{r3, r4, r5, lr}
 800bdc2:	4b29      	ldr	r3, [pc, #164]	@ (800be68 <__swsetup_r+0xa8>)
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	460c      	mov	r4, r1
 800bdca:	b118      	cbz	r0, 800bdd4 <__swsetup_r+0x14>
 800bdcc:	6a03      	ldr	r3, [r0, #32]
 800bdce:	b90b      	cbnz	r3, 800bdd4 <__swsetup_r+0x14>
 800bdd0:	f7fc fc72 	bl	80086b8 <__sinit>
 800bdd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd8:	0719      	lsls	r1, r3, #28
 800bdda:	d422      	bmi.n	800be22 <__swsetup_r+0x62>
 800bddc:	06da      	lsls	r2, r3, #27
 800bdde:	d407      	bmi.n	800bdf0 <__swsetup_r+0x30>
 800bde0:	2209      	movs	r2, #9
 800bde2:	602a      	str	r2, [r5, #0]
 800bde4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdee:	e033      	b.n	800be58 <__swsetup_r+0x98>
 800bdf0:	0758      	lsls	r0, r3, #29
 800bdf2:	d512      	bpl.n	800be1a <__swsetup_r+0x5a>
 800bdf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdf6:	b141      	cbz	r1, 800be0a <__swsetup_r+0x4a>
 800bdf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdfc:	4299      	cmp	r1, r3
 800bdfe:	d002      	beq.n	800be06 <__swsetup_r+0x46>
 800be00:	4628      	mov	r0, r5
 800be02:	f7fd fbf9 	bl	80095f8 <_free_r>
 800be06:	2300      	movs	r3, #0
 800be08:	6363      	str	r3, [r4, #52]	@ 0x34
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	2300      	movs	r3, #0
 800be14:	6063      	str	r3, [r4, #4]
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	f043 0308 	orr.w	r3, r3, #8
 800be20:	81a3      	strh	r3, [r4, #12]
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	b94b      	cbnz	r3, 800be3a <__swsetup_r+0x7a>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be30:	d003      	beq.n	800be3a <__swsetup_r+0x7a>
 800be32:	4621      	mov	r1, r4
 800be34:	4628      	mov	r0, r5
 800be36:	f000 f883 	bl	800bf40 <__smakebuf_r>
 800be3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be3e:	f013 0201 	ands.w	r2, r3, #1
 800be42:	d00a      	beq.n	800be5a <__swsetup_r+0x9a>
 800be44:	2200      	movs	r2, #0
 800be46:	60a2      	str	r2, [r4, #8]
 800be48:	6962      	ldr	r2, [r4, #20]
 800be4a:	4252      	negs	r2, r2
 800be4c:	61a2      	str	r2, [r4, #24]
 800be4e:	6922      	ldr	r2, [r4, #16]
 800be50:	b942      	cbnz	r2, 800be64 <__swsetup_r+0xa4>
 800be52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be56:	d1c5      	bne.n	800bde4 <__swsetup_r+0x24>
 800be58:	bd38      	pop	{r3, r4, r5, pc}
 800be5a:	0799      	lsls	r1, r3, #30
 800be5c:	bf58      	it	pl
 800be5e:	6962      	ldrpl	r2, [r4, #20]
 800be60:	60a2      	str	r2, [r4, #8]
 800be62:	e7f4      	b.n	800be4e <__swsetup_r+0x8e>
 800be64:	2000      	movs	r0, #0
 800be66:	e7f7      	b.n	800be58 <__swsetup_r+0x98>
 800be68:	20000030 	.word	0x20000030

0800be6c <_raise_r>:
 800be6c:	291f      	cmp	r1, #31
 800be6e:	b538      	push	{r3, r4, r5, lr}
 800be70:	4605      	mov	r5, r0
 800be72:	460c      	mov	r4, r1
 800be74:	d904      	bls.n	800be80 <_raise_r+0x14>
 800be76:	2316      	movs	r3, #22
 800be78:	6003      	str	r3, [r0, #0]
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be82:	b112      	cbz	r2, 800be8a <_raise_r+0x1e>
 800be84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be88:	b94b      	cbnz	r3, 800be9e <_raise_r+0x32>
 800be8a:	4628      	mov	r0, r5
 800be8c:	f000 f830 	bl	800bef0 <_getpid_r>
 800be90:	4622      	mov	r2, r4
 800be92:	4601      	mov	r1, r0
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9a:	f000 b817 	b.w	800becc <_kill_r>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d00a      	beq.n	800beb8 <_raise_r+0x4c>
 800bea2:	1c59      	adds	r1, r3, #1
 800bea4:	d103      	bne.n	800beae <_raise_r+0x42>
 800bea6:	2316      	movs	r3, #22
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	2001      	movs	r0, #1
 800beac:	e7e7      	b.n	800be7e <_raise_r+0x12>
 800beae:	2100      	movs	r1, #0
 800beb0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800beb4:	4620      	mov	r0, r4
 800beb6:	4798      	blx	r3
 800beb8:	2000      	movs	r0, #0
 800beba:	e7e0      	b.n	800be7e <_raise_r+0x12>

0800bebc <raise>:
 800bebc:	4b02      	ldr	r3, [pc, #8]	@ (800bec8 <raise+0xc>)
 800bebe:	4601      	mov	r1, r0
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	f7ff bfd3 	b.w	800be6c <_raise_r>
 800bec6:	bf00      	nop
 800bec8:	20000030 	.word	0x20000030

0800becc <_kill_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d07      	ldr	r5, [pc, #28]	@ (800beec <_kill_r+0x20>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	4611      	mov	r1, r2
 800bed8:	602b      	str	r3, [r5, #0]
 800beda:	f7f7 f8bc 	bl	8003056 <_kill>
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	d102      	bne.n	800bee8 <_kill_r+0x1c>
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	b103      	cbz	r3, 800bee8 <_kill_r+0x1c>
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	bf00      	nop
 800beec:	20000810 	.word	0x20000810

0800bef0 <_getpid_r>:
 800bef0:	f7f7 b8a9 	b.w	8003046 <_getpid>

0800bef4 <__swhatbuf_r>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	460c      	mov	r4, r1
 800bef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befc:	2900      	cmp	r1, #0
 800befe:	b096      	sub	sp, #88	@ 0x58
 800bf00:	4615      	mov	r5, r2
 800bf02:	461e      	mov	r6, r3
 800bf04:	da0d      	bge.n	800bf22 <__swhatbuf_r+0x2e>
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf0c:	f04f 0100 	mov.w	r1, #0
 800bf10:	bf14      	ite	ne
 800bf12:	2340      	movne	r3, #64	@ 0x40
 800bf14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf18:	2000      	movs	r0, #0
 800bf1a:	6031      	str	r1, [r6, #0]
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	b016      	add	sp, #88	@ 0x58
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
 800bf22:	466a      	mov	r2, sp
 800bf24:	f000 f848 	bl	800bfb8 <_fstat_r>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	dbec      	blt.n	800bf06 <__swhatbuf_r+0x12>
 800bf2c:	9901      	ldr	r1, [sp, #4]
 800bf2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf36:	4259      	negs	r1, r3
 800bf38:	4159      	adcs	r1, r3
 800bf3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf3e:	e7eb      	b.n	800bf18 <__swhatbuf_r+0x24>

0800bf40 <__smakebuf_r>:
 800bf40:	898b      	ldrh	r3, [r1, #12]
 800bf42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf44:	079d      	lsls	r5, r3, #30
 800bf46:	4606      	mov	r6, r0
 800bf48:	460c      	mov	r4, r1
 800bf4a:	d507      	bpl.n	800bf5c <__smakebuf_r+0x1c>
 800bf4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	2301      	movs	r3, #1
 800bf56:	6163      	str	r3, [r4, #20]
 800bf58:	b003      	add	sp, #12
 800bf5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf5c:	ab01      	add	r3, sp, #4
 800bf5e:	466a      	mov	r2, sp
 800bf60:	f7ff ffc8 	bl	800bef4 <__swhatbuf_r>
 800bf64:	9f00      	ldr	r7, [sp, #0]
 800bf66:	4605      	mov	r5, r0
 800bf68:	4639      	mov	r1, r7
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7fd fbb8 	bl	80096e0 <_malloc_r>
 800bf70:	b948      	cbnz	r0, 800bf86 <__smakebuf_r+0x46>
 800bf72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf76:	059a      	lsls	r2, r3, #22
 800bf78:	d4ee      	bmi.n	800bf58 <__smakebuf_r+0x18>
 800bf7a:	f023 0303 	bic.w	r3, r3, #3
 800bf7e:	f043 0302 	orr.w	r3, r3, #2
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	e7e2      	b.n	800bf4c <__smakebuf_r+0xc>
 800bf86:	89a3      	ldrh	r3, [r4, #12]
 800bf88:	6020      	str	r0, [r4, #0]
 800bf8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf8e:	81a3      	strh	r3, [r4, #12]
 800bf90:	9b01      	ldr	r3, [sp, #4]
 800bf92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf96:	b15b      	cbz	r3, 800bfb0 <__smakebuf_r+0x70>
 800bf98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f000 f81d 	bl	800bfdc <_isatty_r>
 800bfa2:	b128      	cbz	r0, 800bfb0 <__smakebuf_r+0x70>
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	f023 0303 	bic.w	r3, r3, #3
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	81a3      	strh	r3, [r4, #12]
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	431d      	orrs	r5, r3
 800bfb4:	81a5      	strh	r5, [r4, #12]
 800bfb6:	e7cf      	b.n	800bf58 <__smakebuf_r+0x18>

0800bfb8 <_fstat_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	@ (800bfd8 <_fstat_r+0x20>)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	602b      	str	r3, [r5, #0]
 800bfc6:	f7f7 f8a6 	bl	8003116 <_fstat>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	d102      	bne.n	800bfd4 <_fstat_r+0x1c>
 800bfce:	682b      	ldr	r3, [r5, #0]
 800bfd0:	b103      	cbz	r3, 800bfd4 <_fstat_r+0x1c>
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	bd38      	pop	{r3, r4, r5, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20000810 	.word	0x20000810

0800bfdc <_isatty_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d06      	ldr	r5, [pc, #24]	@ (800bff8 <_isatty_r+0x1c>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	602b      	str	r3, [r5, #0]
 800bfe8:	f7f7 f8a5 	bl	8003136 <_isatty>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_isatty_r+0x1a>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_isatty_r+0x1a>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	20000810 	.word	0x20000810

0800bffc <fmax>:
 800bffc:	b508      	push	{r3, lr}
 800bffe:	ed2d 8b04 	vpush	{d8-d9}
 800c002:	eeb0 8a40 	vmov.f32	s16, s0
 800c006:	eef0 8a60 	vmov.f32	s17, s1
 800c00a:	eeb0 9a41 	vmov.f32	s18, s2
 800c00e:	eef0 9a61 	vmov.f32	s19, s3
 800c012:	f000 f847 	bl	800c0a4 <__fpclassifyd>
 800c016:	b950      	cbnz	r0, 800c02e <fmax+0x32>
 800c018:	eeb0 8a49 	vmov.f32	s16, s18
 800c01c:	eef0 8a69 	vmov.f32	s17, s19
 800c020:	eeb0 0a48 	vmov.f32	s0, s16
 800c024:	eef0 0a68 	vmov.f32	s1, s17
 800c028:	ecbd 8b04 	vpop	{d8-d9}
 800c02c:	bd08      	pop	{r3, pc}
 800c02e:	eeb0 0a49 	vmov.f32	s0, s18
 800c032:	eef0 0a69 	vmov.f32	s1, s19
 800c036:	f000 f835 	bl	800c0a4 <__fpclassifyd>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d0f0      	beq.n	800c020 <fmax+0x24>
 800c03e:	ec53 2b19 	vmov	r2, r3, d9
 800c042:	ec51 0b18 	vmov	r0, r1, d8
 800c046:	f7f4 fd8f 	bl	8000b68 <__aeabi_dcmpgt>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d0e4      	beq.n	800c018 <fmax+0x1c>
 800c04e:	e7e7      	b.n	800c020 <fmax+0x24>

0800c050 <fmin>:
 800c050:	b508      	push	{r3, lr}
 800c052:	ed2d 8b04 	vpush	{d8-d9}
 800c056:	eeb0 8a40 	vmov.f32	s16, s0
 800c05a:	eef0 8a60 	vmov.f32	s17, s1
 800c05e:	eeb0 9a41 	vmov.f32	s18, s2
 800c062:	eef0 9a61 	vmov.f32	s19, s3
 800c066:	f000 f81d 	bl	800c0a4 <__fpclassifyd>
 800c06a:	b950      	cbnz	r0, 800c082 <fmin+0x32>
 800c06c:	eeb0 8a49 	vmov.f32	s16, s18
 800c070:	eef0 8a69 	vmov.f32	s17, s19
 800c074:	eeb0 0a48 	vmov.f32	s0, s16
 800c078:	eef0 0a68 	vmov.f32	s1, s17
 800c07c:	ecbd 8b04 	vpop	{d8-d9}
 800c080:	bd08      	pop	{r3, pc}
 800c082:	eeb0 0a49 	vmov.f32	s0, s18
 800c086:	eef0 0a69 	vmov.f32	s1, s19
 800c08a:	f000 f80b 	bl	800c0a4 <__fpclassifyd>
 800c08e:	2800      	cmp	r0, #0
 800c090:	d0f0      	beq.n	800c074 <fmin+0x24>
 800c092:	ec53 2b19 	vmov	r2, r3, d9
 800c096:	ec51 0b18 	vmov	r0, r1, d8
 800c09a:	f7f4 fd47 	bl	8000b2c <__aeabi_dcmplt>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d0e4      	beq.n	800c06c <fmin+0x1c>
 800c0a2:	e7e7      	b.n	800c074 <fmin+0x24>

0800c0a4 <__fpclassifyd>:
 800c0a4:	ec51 0b10 	vmov	r0, r1, d0
 800c0a8:	b510      	push	{r4, lr}
 800c0aa:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	d019      	beq.n	800c0e6 <__fpclassifyd+0x42>
 800c0b2:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800c0b6:	490e      	ldr	r1, [pc, #56]	@ (800c0f0 <__fpclassifyd+0x4c>)
 800c0b8:	428a      	cmp	r2, r1
 800c0ba:	d90e      	bls.n	800c0da <__fpclassifyd+0x36>
 800c0bc:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800c0c0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800c0c4:	428a      	cmp	r2, r1
 800c0c6:	d908      	bls.n	800c0da <__fpclassifyd+0x36>
 800c0c8:	4a0a      	ldr	r2, [pc, #40]	@ (800c0f4 <__fpclassifyd+0x50>)
 800c0ca:	4213      	tst	r3, r2
 800c0cc:	d007      	beq.n	800c0de <__fpclassifyd+0x3a>
 800c0ce:	4294      	cmp	r4, r2
 800c0d0:	d107      	bne.n	800c0e2 <__fpclassifyd+0x3e>
 800c0d2:	fab0 f080 	clz	r0, r0
 800c0d6:	0940      	lsrs	r0, r0, #5
 800c0d8:	bd10      	pop	{r4, pc}
 800c0da:	2004      	movs	r0, #4
 800c0dc:	e7fc      	b.n	800c0d8 <__fpclassifyd+0x34>
 800c0de:	2003      	movs	r0, #3
 800c0e0:	e7fa      	b.n	800c0d8 <__fpclassifyd+0x34>
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	e7f8      	b.n	800c0d8 <__fpclassifyd+0x34>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d1ee      	bne.n	800c0c8 <__fpclassifyd+0x24>
 800c0ea:	2002      	movs	r0, #2
 800c0ec:	e7f4      	b.n	800c0d8 <__fpclassifyd+0x34>
 800c0ee:	bf00      	nop
 800c0f0:	7fdfffff 	.word	0x7fdfffff
 800c0f4:	7ff00000 	.word	0x7ff00000

0800c0f8 <_init>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	bf00      	nop
 800c0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fe:	bc08      	pop	{r3}
 800c100:	469e      	mov	lr, r3
 800c102:	4770      	bx	lr

0800c104 <_fini>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	bf00      	nop
 800c108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10a:	bc08      	pop	{r3}
 800c10c:	469e      	mov	lr, r3
 800c10e:	4770      	bx	lr
